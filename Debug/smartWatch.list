
smartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029a68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b62c  08029bf8  08029bf8  00039bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045224  08045224  00062a2c  2**0
                  CONTENTS
  4 .ARM          00000008  08045224  08045224  00055224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804522c  0804522c  00062a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804522c  0804522c  0005522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045230  08045230  00055230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a2c  20000000  08045234  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049a4  20002a30  08047c60  00062a30  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200073d4  08047c60  000673d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00062a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008ea06  00000000  00000000  00062a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ec57  00000000  00000000  000f1462  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003350  00000000  00000000  001000c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f90  00000000  00000000  00103410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003fd4e  00000000  00000000  001063a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0006d122  00000000  00000000  001460ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df2d8  00000000  00000000  001b3210  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002924e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d70c  00000000  00000000  00292564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a30 	.word	0x20002a30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08029be0 	.word	0x08029be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a34 	.word	0x20002a34
 80001cc:	08029be0 	.word	0x08029be0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fd2c 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f82a 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fa6e 	bl	8001494 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 fa4c 	bl	8001454 <MX_DMA_Init>
  MX_RTC_Init();
 8000fbc:	f000 f8a6 	bl	800110c <MX_RTC_Init>
  MX_SPI1_Init();
 8000fc0:	f000 f8fe 	bl	80011c0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000fc4:	f000 f9ce 	bl	8001364 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000fc8:	f000 fa1a 	bl	8001400 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000fcc:	f000 f97c 	bl	80012c8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fd0:	f000 f92c 	bl	800122c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //tos_Flash_Init();
  tos_Tft_init();
 8000fd4:	f01e f9e0 	bl	801f398 <tos_Tft_init>
  tos_Get_Rtc(&hrtc);
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <main+0x58>)
 8000fda:	f025 fe23 	bl	8026c24 <tos_Get_Rtc>
  tos_Screen_Init();
 8000fde:	f025 fcc9 	bl	8026974 <tos_Screen_Init>
	ST7789_UnSelect();
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <main+0x5c>)
 8000fe8:	f001 fb4e 	bl	8002688 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	 tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 8000fec:	f025 fe2a 	bl	8026c44 <tos_Get_Current_Screen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f025 fdf0 	bl	8026bd8 <tos_Screen_Variables_Getter>
	tos_ScreenController();
 8000ff8:	f025 fd34 	bl	8026a64 <tos_ScreenController>
  {	 tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 8000ffc:	e7f6      	b.n	8000fec <main+0x44>
 8000ffe:	bf00      	nop
 8001000:	2000692c 	.word	0x2000692c
 8001004:	40020000 	.word	0x40020000

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b098      	sub	sp, #96	; 0x60
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f026 f8cd 	bl	80271b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <SystemClock_Config+0xfc>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a30      	ldr	r2, [pc, #192]	; (8001104 <SystemClock_Config+0xfc>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <SystemClock_Config+0xfc>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <SystemClock_Config+0x100>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <SystemClock_Config+0x100>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0x100>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001072:	2309      	movs	r3, #9
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800108e:	23a8      	movs	r3, #168	; 0xa8
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001096:	2304      	movs	r3, #4
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb0c 	bl	80026bc <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010aa:	f000 fa6f 	bl	800158c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fd65 	bl	8002b9c <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010d8:	f000 fa58 	bl	800158c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010dc:	2302      	movs	r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 ff48 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010f6:	f000 fa49 	bl	800158c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3760      	adds	r7, #96	; 0x60
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_RTC_Init+0xac>)
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_RTC_Init+0xb0>)
 8001128:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_RTC_Init+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_RTC_Init+0xac>)
 8001132:	227f      	movs	r2, #127	; 0x7f
 8001134:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_RTC_Init+0xac>)
 8001138:	22f9      	movs	r2, #249	; 0xf9
 800113a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_RTC_Init+0xac>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_RTC_Init+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_RTC_Init+0xac>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <MX_RTC_Init+0xac>)
 8001150:	f001 fff8 	bl	8003144 <HAL_RTC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 fa17 	bl	800158c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_RTC_Init+0xac>)
 800117a:	f002 f874 	bl	8003266 <HAL_RTC_SetTime>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001184:	f000 fa02 	bl	800158c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001188:	2301      	movs	r3, #1
 800118a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800118c:	2301      	movs	r3, #1
 800118e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_RTC_Init+0xac>)
 80011a0:	f002 f97c 	bl	800349c <HAL_RTC_SetDate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011aa:	f000 f9ef 	bl	800158c <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000692c 	.word	0x2000692c
 80011bc:	40002800 	.word	0x40002800

080011c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI1_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI1_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI1_Init+0x64>)
 8001212:	f002 fac9 	bl	80037a8 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f9b6 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000698c 	.word	0x2000698c
 8001228:	40013000 	.word	0x40013000

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM2_Init+0x94>)
 800124a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001252:	2254      	movs	r2, #84	; 0x54
 8001254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM2_Init+0x94>)
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM2_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001270:	f002 fcde 	bl	8003c30 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f987 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM2_Init+0x94>)
 800128c:	f002 fe52 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 f979 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM2_Init+0x94>)
 80012a8:	f003 f868 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80012b2:	f000 f96b 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200069e4 	.word	0x200069e4
 80012c4:	000186a0 	.word	0x000186a0

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM3_Init+0x94>)
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_TIM3_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_TIM3_Init+0x94>)
 80012ec:	2254      	movs	r2, #84	; 0x54
 80012ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM3_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM3_Init+0x94>)
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_TIM3_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM3_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_TIM3_Init+0x94>)
 800130c:	f002 fc90 	bl	8003c30 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f939 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_TIM3_Init+0x94>)
 8001328:	f002 fe04 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 f92b 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM3_Init+0x94>)
 8001344:	f003 f81a 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800134e:	f000 f91d 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200068ec 	.word	0x200068ec
 8001360:	40000400 	.word	0x40000400

08001364 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_TIM4_Init+0x94>)
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <MX_TIM4_Init+0x98>)
 8001384:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_TIM4_Init+0x94>)
 8001388:	2254      	movs	r2, #84	; 0x54
 800138a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_TIM4_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_TIM4_Init+0x94>)
 8001394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001398:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_TIM4_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_TIM4_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_TIM4_Init+0x94>)
 80013a8:	f002 fc42 	bl	8003c30 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013b2:	f000 f8eb 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_TIM4_Init+0x94>)
 80013c4:	f002 fdb6 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 f8dd 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM4_Init+0x94>)
 80013e0:	f002 ffcc 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013ea:	f000 f8cf 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200068ac 	.word	0x200068ac
 80013fc:	40000800 	.word	0x40000800

08001400 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART6_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART6_UART_Init+0x4c>)
 800140c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001410:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART6_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART6_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART6_UART_Init+0x4c>)
 8001438:	f003 f830 	bl	800449c <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f8a3 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000694c 	.word	0x2000694c
 8001450:	40011400 	.word	0x40011400

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_DMA_Init+0x3c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <MX_DMA_Init+0x3c>)
 8001464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_DMA_Init+0x3c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	203b      	movs	r0, #59	; 0x3b
 800147c:	f000 fc33 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001480:	203b      	movs	r0, #59	; 0x3b
 8001482:	f000 fc4c 	bl	8001d1e <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <MX_GPIO_Init+0xe8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <MX_GPIO_Init+0xe8>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_GPIO_Init+0xe8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_GPIO_Init+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a2b      	ldr	r2, [pc, #172]	; (800157c <MX_GPIO_Init+0xe8>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_GPIO_Init+0xe8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_GPIO_Init+0xe8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a24      	ldr	r2, [pc, #144]	; (800157c <MX_GPIO_Init+0xe8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_GPIO_Init+0xe8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_GPIO_Init+0xe8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <MX_GPIO_Init+0xe8>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_GPIO_Init+0xe8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	210e      	movs	r1, #14
 800151e:	4818      	ldr	r0, [pc, #96]	; (8001580 <MX_GPIO_Init+0xec>)
 8001520:	f001 f8b2 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Left_Btn_Pin Enter_Btn_Pin Right_Btn_Pin */
  GPIO_InitStruct.Pin = Left_Btn_Pin|Enter_Btn_Pin|Right_Btn_Pin;
 8001524:	2370      	movs	r3, #112	; 0x70
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152c:	2301      	movs	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_GPIO_Init+0xf0>)
 8001538:	f000 fef4 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_RST_Pin ST7789_DC_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin;
 800153c:	230e      	movs	r3, #14
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0xec>)
 8001554:	f000 fee6 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothState_Pin */
  GPIO_InitStruct.Pin = BluetoothState_Pin;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluetoothState_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_GPIO_Init+0xf4>)
 800156e:	f000 fed9 	bl	8002324 <HAL_GPIO_Init>

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40021000 	.word	0x40021000
 8001588:	40020800 	.word	0x40020800

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001592:	e7fe      	b.n	8001592 <Error_Handler+0x6>

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RTC_MspInit+0x24>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RTC_MspInit+0x28>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40002800 	.word	0x40002800
 800160c:	42470e3c 	.word	0x42470e3c

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_SPI_MspInit+0xe0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d159      	bne.n	80016e6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_SPI_MspInit+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800166a:	23a0      	movs	r3, #160	; 0xa0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167a:	2305      	movs	r3, #5
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	481c      	ldr	r0, [pc, #112]	; (80016f8 <HAL_SPI_MspInit+0xe8>)
 8001686:	f000 fe4d 	bl	8002324 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_SPI_MspInit+0xec>)
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_SPI_MspInit+0xf0>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_SPI_MspInit+0xec>)
 8001692:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_SPI_MspInit+0xec>)
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016cc:	f000 fb42 	bl	8001d54 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80016d6:	f7ff ff59 	bl	800158c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016de:	649a      	str	r2, [r3, #72]	; 0x48
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_SPI_MspInit+0xec>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40013000 	.word	0x40013000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	20006a24 	.word	0x20006a24
 8001700:	40026458 	.word	0x40026458

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d116      	bne.n	8001744 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201c      	movs	r0, #28
 8001738:	f000 fad5 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800173c:	201c      	movs	r0, #28
 800173e:	f000 faee 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001742:	e036      	b.n	80017b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_TIM_Base_MspInit+0xbc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d116      	bne.n	800177c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201d      	movs	r0, #29
 8001770:	f000 fab9 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001774:	201d      	movs	r0, #29
 8001776:	f000 fad2 	bl	8001d1e <HAL_NVIC_EnableIRQ>
}
 800177a:	e01a      	b.n	80017b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_TIM_Base_MspInit+0xc0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d115      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_TIM_Base_MspInit+0xb8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	201e      	movs	r0, #30
 80017a8:	f000 fa9d 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ac:	201e      	movs	r0, #30
 80017ae:	f000 fab6 	bl	8001d1e <HAL_NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40000800 	.word	0x40000800

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_UART_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12b      	bne.n	8001842 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_UART_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_UART_MspInit+0x88>)
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x88>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_UART_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_UART_MspInit+0x88>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_UART_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001832:	2308      	movs	r3, #8
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_UART_MspInit+0x8c>)
 800183e:	f000 fd71 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40011400 	.word	0x40011400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f000 f902 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  lv_task_handler();
 80018a8:	f012 f964 	bl	8013b74 <lv_task_handler>
  lv_tick_inc(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f010 ff51 	bl	8012754 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <TIM2_IRQHandler+0x14>)
 80018be:	f002 fa31 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tos_SleepScreen_Counter();
 80018c2:	f025 f9df 	bl	8026c84 <tos_SleepScreen_Counter>

  /* USER CODE END TIM2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200069e4 	.word	0x200069e4

080018d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <TIM3_IRQHandler+0x14>)
 80018d6:	f002 fa25 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MainScreen_Updater();
 80018da:	f01f f8bd 	bl	8020a58 <MainScreen_Updater>
  /* USER CODE END TIM3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200068ec 	.word	0x200068ec

080018e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <TIM4_IRQHandler+0x1c>)
 80018ee:	f002 fa19 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tos_firstScreen_Update();
 80018f2:	f025 f879 	bl	80269e8 <tos_firstScreen_Update>
  StopWatch_Update_Time();
 80018f6:	f024 fb15 	bl	8025f24 <StopWatch_Update_Time>
  RunMode_Update_Time();
 80018fa:	f021 fdfd 	bl	80234f8 <RunMode_Update_Time>
  /* USER CODE END TIM4_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200068ac 	.word	0x200068ac

08001908 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA2_Stream3_IRQHandler+0x10>)
 800190e:	f000 facf 	bl	8001eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20006a24 	.word	0x20006a24

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f025 fbee 	bl	802712c <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20020000 	.word	0x20020000
 800197c:	00000400 	.word	0x00000400
 8001980:	20002a4c 	.word	0x20002a4c
 8001984:	200073d8 	.word	0x200073d8

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SystemInit+0x28>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <SystemInit+0x28>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SystemInit+0x28>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a2:	609a      	str	r2, [r3, #8]
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr  r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019de:	f7ff ffd3 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f025 fba9 	bl	8027138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fadf 	bl	8000fa8 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019f0:	08045234 	.word	0x08045234
  ldr  r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f8:	20002a2c 	.word	0x20002a2c
  ldr  r2, =_sbss
 80019fc:	20002a30 	.word	0x20002a30
  ldr  r3, = _ebss
 8001a00:	200073d4 	.word	0x200073d4

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 f94d 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff fdaa 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f965 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a88:	f000 f92d 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20006a84 	.word	0x20006a84

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20006a84 	.word	0x20006a84

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_Delay+0x40>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff feb8 	bl	8001ad4 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e099      	b.n	8001ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d90:	e00f      	b.n	8001db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d92:	f7ff fe9f 	bl	8001ad4 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d908      	bls.n	8001db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e078      	b.n	8001ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e8      	bne.n	8001d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_DMA_Init+0x158>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d107      	bne.n	8001e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4313      	orrs	r3, r2
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 0307 	bic.w	r3, r3, #7
 8001e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d117      	bne.n	8001e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f9e9 	bl	8002230 <DMA_CheckFifoParam>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e72:	2301      	movs	r3, #1
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f9a0 	bl	80021c4 <DMA_CalcBaseAndBitshift>
 8001e84:	4603      	mov	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f010803f 	.word	0xf010803f

08001eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_DMA_IRQHandler+0x258>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_DMA_IRQHandler+0x25c>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2208      	movs	r2, #8
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0204 	bic.w	r2, r2, #4
 8001f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2208      	movs	r2, #8
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d012      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	409a      	lsls	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2204      	movs	r2, #4
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2204      	movs	r2, #4
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0204 	orr.w	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d043      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03c      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2210      	movs	r2, #16
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d018      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d024      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	e01f      	b.n	8002020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e016      	b.n	8002020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2220      	movs	r2, #32
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 808e 	beq.w	800214e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 8086 	beq.w	800214e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2220      	movs	r2, #32
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b05      	cmp	r3, #5
 8002058:	d136      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0216 	bic.w	r2, r2, #22
 8002068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_DMA_IRQHandler+0x1da>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0208 	bic.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	223f      	movs	r2, #63	; 0x3f
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d07d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
        }
        return;
 80020c6:	e078      	b.n	80021ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01c      	beq.n	8002110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d108      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d030      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e02b      	b.n	800214e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d027      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e022      	b.n	800214e <HAL_DMA_IRQHandler+0x29e>
 8002108:	20000000 	.word	0x20000000
 800210c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0210 	bic.w	r2, r2, #16
 800212c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	2b00      	cmp	r3, #0
 8002154:	d032      	beq.n	80021bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	429a      	cmp	r2, r3
 8002184:	d307      	bcc.n	8002196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f2      	bne.n	800217a <HAL_DMA_IRQHandler+0x2ca>
 8002194:	e000      	b.n	8002198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ba:	bf00      	nop
    }
  }
}
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop

080021c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3b10      	subs	r3, #16
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <DMA_CalcBaseAndBitshift+0x64>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <DMA_CalcBaseAndBitshift+0x68>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d909      	bls.n	8002206 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	1d1a      	adds	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	; 0x58
 8002204:	e007      	b.n	8002216 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	aaaaaaab 	.word	0xaaaaaaab
 800222c:	0802a4f4 	.word	0x0802a4f4

08002230 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d855      	bhi.n	80022fc <DMA_CheckFifoParam+0xcc>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <DMA_CheckFifoParam+0x28>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002269 	.word	0x08002269
 800225c:	0800227b 	.word	0x0800227b
 8002260:	08002269 	.word	0x08002269
 8002264:	080022fd 	.word	0x080022fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d045      	beq.n	8002300 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002278:	e042      	b.n	8002300 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002282:	d13f      	bne.n	8002304 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002288:	e03c      	b.n	8002304 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002292:	d121      	bne.n	80022d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d836      	bhi.n	8002308 <DMA_CheckFifoParam+0xd8>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <DMA_CheckFifoParam+0x70>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022b7 	.word	0x080022b7
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	080022c9 	.word	0x080022c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e02f      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d024      	beq.n	800230c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e021      	b.n	800230c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d0:	d11e      	bne.n	8002310 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022d6:	e01b      	b.n	8002310 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <DMA_CheckFifoParam+0xb4>
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d003      	beq.n	80022ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022e2:	e018      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      break;
 80022e8:	e015      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
      break;
 80022fa:	e00b      	b.n	8002314 <DMA_CheckFifoParam+0xe4>
      break;
 80022fc:	bf00      	nop
 80022fe:	e00a      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 8002300:	bf00      	nop
 8002302:	e008      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 8002304:	bf00      	nop
 8002306:	e006      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 8002308:	bf00      	nop
 800230a:	e004      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 800230c:	bf00      	nop
 800230e:	e002      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;   
 8002310:	bf00      	nop
 8002312:	e000      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 8002314:	bf00      	nop
    }
  } 
  
  return status; 
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e16b      	b.n	8002618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 815a 	bne.w	8002612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d00b      	beq.n	800237e <HAL_GPIO_Init+0x5a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002372:	2b11      	cmp	r3, #17
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b12      	cmp	r3, #18
 800237c:	d130      	bne.n	80023e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0201 	and.w	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0xfc>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80b4 	beq.w	8002612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_GPIO_Init+0x308>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a5e      	ldr	r2, [pc, #376]	; (800262c <HAL_GPIO_Init+0x308>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_GPIO_Init+0x308>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a5a      	ldr	r2, [pc, #360]	; (8002630 <HAL_GPIO_Init+0x30c>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a51      	ldr	r2, [pc, #324]	; (8002634 <HAL_GPIO_Init+0x310>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02b      	beq.n	800254a <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_GPIO_Init+0x314>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d025      	beq.n	8002546 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_GPIO_Init+0x318>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01f      	beq.n	8002542 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_GPIO_Init+0x31c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d019      	beq.n	800253e <HAL_GPIO_Init+0x21a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4d      	ldr	r2, [pc, #308]	; (8002644 <HAL_GPIO_Init+0x320>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0x216>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_GPIO_Init+0x324>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <HAL_GPIO_Init+0x212>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4b      	ldr	r2, [pc, #300]	; (800264c <HAL_GPIO_Init+0x328>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <HAL_GPIO_Init+0x20e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <HAL_GPIO_Init+0x32c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_GPIO_Init+0x20a>
 800252a:	2307      	movs	r3, #7
 800252c:	e00e      	b.n	800254c <HAL_GPIO_Init+0x228>
 800252e:	2308      	movs	r3, #8
 8002530:	e00c      	b.n	800254c <HAL_GPIO_Init+0x228>
 8002532:	2306      	movs	r3, #6
 8002534:	e00a      	b.n	800254c <HAL_GPIO_Init+0x228>
 8002536:	2305      	movs	r3, #5
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x228>
 800253a:	2304      	movs	r3, #4
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x228>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x228>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x228>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x228>
 800254a:	2300      	movs	r3, #0
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_GPIO_Init+0x30c>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_GPIO_Init+0x330>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258e:	4a31      	ldr	r2, [pc, #196]	; (8002654 <HAL_GPIO_Init+0x330>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_GPIO_Init+0x330>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <HAL_GPIO_Init+0x330>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_GPIO_Init+0x330>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_GPIO_Init+0x330>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_GPIO_Init+0x330>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_GPIO_Init+0x330>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f ae90 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002620:	bf00      	nop
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40023800 	.word	0x40023800
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40021400 	.word	0x40021400
 800264c:	40021800 	.word	0x40021800
 8002650:	40021c00 	.word	0x40021c00
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e001      	b.n	800267a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e25b      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d075      	beq.n	80027c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	4ba3      	ldr	r3, [pc, #652]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00c      	beq.n	8002700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b9d      	ldr	r3, [pc, #628]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4b99      	ldr	r3, [pc, #612]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05b      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d157      	bne.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e236      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x74>
 8002722:	4b91      	ldr	r3, [pc, #580]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a90      	ldr	r2, [pc, #576]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8a      	ldr	r2, [pc, #552]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a87      	ldr	r2, [pc, #540]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a83      	ldr	r2, [pc, #524]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a80      	ldr	r2, [pc, #512]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff f9ae 	bl	8001ad4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff f9aa 	bl	8001ad4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1fb      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xc0>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff f99a 	bl	8001ad4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff f996 	bl	8001ad4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1e7      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0xe8>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d063      	beq.n	800289a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d11c      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1bb      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4952      	ldr	r1, [pc, #328]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	e03a      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x2b0>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff f94f 	bl	8001ad4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7ff f94b 	bl	8001ad4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e19c      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4940      	ldr	r1, [pc, #256]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_OscConfig+0x2b0>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff f92e 	bl	8001ad4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287c:	f7ff f92a 	bl	8001ad4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e17b      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d030      	beq.n	8002908 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x2b4>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7ff f90e 	bl	8001ad4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff f90a 	bl	8001ad4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e15b      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x200>
 80028da:	e015      	b.n	8002908 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x2b4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff f8f7 	bl	8001ad4 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ea:	f7ff f8f3 	bl	8001ad4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e144      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a0 	beq.w	8002a56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7ff f8b9 	bl	8001ad4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e011      	b.n	800298a <HAL_RCC_OscConfig+0x2ce>
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	42470000 	.word	0x42470000
 8002970:	42470e80 	.word	0x42470e80
 8002974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7ff f8ac 	bl	8001ad4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0fd      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x2f0>
 800299e:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a7c      	ldr	r2, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	e01c      	b.n	80029e6 <HAL_RCC_OscConfig+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x312>
 80029b4:	4b77      	ldr	r3, [pc, #476]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a76      	ldr	r2, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b74      	ldr	r3, [pc, #464]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a73      	ldr	r2, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	e00b      	b.n	80029e6 <HAL_RCC_OscConfig+0x32a>
 80029ce:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a70      	ldr	r2, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a6d      	ldr	r2, [pc, #436]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d015      	beq.n	8002a1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7ff f871 	bl	8001ad4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff f86d 	bl	8001ad4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0bc      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ee      	beq.n	80029f6 <HAL_RCC_OscConfig+0x33a>
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7ff f85b 	bl	8001ad4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7ff f857 	bl	8001ad4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0a6      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b52      	ldr	r3, [pc, #328]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8092 	beq.w	8002b84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d05c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d141      	bne.n	8002af8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_RCC_OscConfig+0x4dc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff f82b 	bl	8001ad4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff f827 	bl	8001ad4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e078      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	4933      	ldr	r1, [pc, #204]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCC_OscConfig+0x4dc>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f800 	bl	8001ad4 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fffc 	bl	8001ad4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e04d      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
 8002af6:	e045      	b.n	8002b84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x4dc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe ffe9 	bl	8001ad4 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe ffe5 	bl	8001ad4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e036      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x44a>
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e029      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_RCC_OscConfig+0x4d8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d115      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000
 8002b94:	40023800 	.word	0x40023800
 8002b98:	42470060 	.word	0x42470060

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0cc      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d90c      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	494d      	ldr	r1, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe ff22 	bl	8001ad4 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe ff1e 	bl	8001ad4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20c      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e032      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4916      	ldr	r1, [pc, #88]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490e      	ldr	r1, [pc, #56]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f821 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d26:	4601      	mov	r1, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fe82 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	0802a4dc 	.word	0x0802a4dc
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d007      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x32>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x38>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80b4 	bne.w	8002efc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d96:	60bb      	str	r3, [r7, #8]
       break;
 8002d98:	e0b3      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9a:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d9c:	60bb      	str	r3, [r7, #8]
      break;
 8002d9e:	e0b0      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da0:	4b5a      	ldr	r3, [pc, #360]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002daa:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04a      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db6:	4b55      	ldr	r3, [pc, #340]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	f04f 0400 	mov.w	r4, #0
 8002dc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	ea03 0501 	and.w	r5, r3, r1
 8002dcc:	ea04 0602 	and.w	r6, r4, r2
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4632      	mov	r2, r6
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	0154      	lsls	r4, r2, #5
 8002dde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de2:	014b      	lsls	r3, r1, #5
 8002de4:	4619      	mov	r1, r3
 8002de6:	4622      	mov	r2, r4
 8002de8:	1b49      	subs	r1, r1, r5
 8002dea:	eb62 0206 	sbc.w	r2, r2, r6
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	0194      	lsls	r4, r2, #6
 8002df8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dfc:	018b      	lsls	r3, r1, #6
 8002dfe:	1a5b      	subs	r3, r3, r1
 8002e00:	eb64 0402 	sbc.w	r4, r4, r2
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	00e2      	lsls	r2, r4, #3
 8002e0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e12:	00d9      	lsls	r1, r3, #3
 8002e14:	460b      	mov	r3, r1
 8002e16:	4614      	mov	r4, r2
 8002e18:	195b      	adds	r3, r3, r5
 8002e1a:	eb44 0406 	adc.w	r4, r4, r6
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	0262      	lsls	r2, r4, #9
 8002e28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e2c:	0259      	lsls	r1, r3, #9
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	4621      	mov	r1, r4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	f7fd ff32 	bl	8000ca8 <__aeabi_uldivmod>
 8002e44:	4603      	mov	r3, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e049      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	f04f 0400 	mov.w	r4, #0
 8002e56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	ea03 0501 	and.w	r5, r3, r1
 8002e62:	ea04 0602 	and.w	r6, r4, r2
 8002e66:	4629      	mov	r1, r5
 8002e68:	4632      	mov	r2, r6
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	0154      	lsls	r4, r2, #5
 8002e74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e78:	014b      	lsls	r3, r1, #5
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	1b49      	subs	r1, r1, r5
 8002e80:	eb62 0206 	sbc.w	r2, r2, r6
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	0194      	lsls	r4, r2, #6
 8002e8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e92:	018b      	lsls	r3, r1, #6
 8002e94:	1a5b      	subs	r3, r3, r1
 8002e96:	eb64 0402 	sbc.w	r4, r4, r2
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ea8:	00d9      	lsls	r1, r3, #3
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	195b      	adds	r3, r3, r5
 8002eb0:	eb44 0406 	adc.w	r4, r4, r6
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	02a2      	lsls	r2, r4, #10
 8002ebe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ec2:	0299      	lsls	r1, r3, #10
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f04f 0400 	mov.w	r4, #0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	f7fd fee7 	bl	8000ca8 <__aeabi_uldivmod>
 8002eda:	4603      	mov	r3, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	60bb      	str	r3, [r7, #8]
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002efe:	60bb      	str	r3, [r7, #8]
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	68bb      	ldr	r3, [r7, #8]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f34:	f7ff fff0 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0a9b      	lsrs	r3, r3, #10
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	0802a4ec 	.word	0x0802a4ec

08002f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f5c:	f7ff ffdc 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f60:	4601      	mov	r1, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0b5b      	lsrs	r3, r3, #13
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	0802a4ec 	.word	0x0802a4ec

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d035      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa8:	4b62      	ldr	r3, [pc, #392]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fd91 	bl	8001ad4 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fb6:	f7fe fd8d 	bl	8001ad4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0b0      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	019a      	lsls	r2, r3, #6
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	4955      	ldr	r1, [pc, #340]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe8:	4b52      	ldr	r3, [pc, #328]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fee:	f7fe fd71 	bl	8001ad4 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ff6:	f7fe fd6d 	bl	8001ad4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e090      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8083 	beq.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b44      	ldr	r3, [pc, #272]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a43      	ldr	r2, [pc, #268]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800304a:	f7fe fd43 	bl	8001ad4 <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe fd3f 	bl	8001ad4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e062      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003064:	4b35      	ldr	r3, [pc, #212]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003070:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d02f      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	429a      	cmp	r2, r3
 800308c:	d028      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800308e:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030a4:	4a24      	ldr	r2, [pc, #144]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d114      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fd0d 	bl	8001ad4 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fd09 	bl	8001ad4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e02a      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ee      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ec:	d10d      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	490d      	ldr	r1, [pc, #52]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
 8003108:	e005      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003110:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003114:	6093      	str	r3, [r2, #8]
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	4905      	ldr	r1, [pc, #20]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	42470068 	.word	0x42470068
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470e40 	.word	0x42470e40

08003144 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e083      	b.n	800325e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7f5b      	ldrb	r3, [r3, #29]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe fa3c 	bl	80015e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	22ca      	movs	r2, #202	; 0xca
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2253      	movs	r2, #83	; 0x53
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 faa8 	bl	80036d8 <RTC_EnterInitMode>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2204      	movs	r2, #4
 800319a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e05e      	b.n	800325e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6919      	ldr	r1, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10e      	bne.n	800322c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa3a 	bl	8003688 <HAL_RTC_WaitForSynchro>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e018      	b.n	800325e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	7f1b      	ldrb	r3, [r3, #28]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_RTC_SetTime+0x1c>
 800327e:	2302      	movs	r3, #2
 8003280:	e0aa      	b.n	80033d8 <HAL_RTC_SetTime+0x172>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2202      	movs	r2, #2
 800328c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d126      	bne.n	80032e2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa3f 	bl	8003730 <RTC_ByteToBcd2>
 80032b2:	4603      	mov	r3, r0
 80032b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa38 	bl	8003730 <RTC_ByteToBcd2>
 80032c0:	4603      	mov	r3, r0
 80032c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa30 	bl	8003730 <RTC_ByteToBcd2>
 80032d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	78db      	ldrb	r3, [r3, #3]
 80032da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e018      	b.n	8003314 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003302:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003308:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	22ca      	movs	r2, #202	; 0xca
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2253      	movs	r2, #83	; 0x53
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9d7 	bl	80036d8 <RTC_EnterInitMode>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2204      	movs	r2, #4
 800333c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e047      	b.n	80033d8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003352:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003356:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003366:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800338e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d111      	bne.n	80033c2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f972 	bl	8003688 <HAL_RTC_WaitForSynchro>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	22ff      	movs	r2, #255	; 0xff
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2204      	movs	r2, #4
 80033b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00a      	b.n	80033d8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80033d6:	2300      	movs	r3, #0
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003412:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003416:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11a      	bne.n	8003492 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f983 	bl	800376c <RTC_Bcd2ToByte>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f97a 	bl	800376c <RTC_Bcd2ToByte>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	789b      	ldrb	r3, [r3, #2]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f971 	bl	800376c <RTC_Bcd2ToByte>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	7f1b      	ldrb	r3, [r3, #28]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_RTC_SetDate+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e094      	b.n	80035e2 <HAL_RTC_SetDate+0x146>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2202      	movs	r2, #2
 80034c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <HAL_RTC_SetDate+0x4c>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	f023 0310 	bic.w	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	330a      	adds	r3, #10
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11c      	bne.n	8003528 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f91c 	bl	8003730 <RTC_ByteToBcd2>
 80034f8:	4603      	mov	r3, r0
 80034fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f915 	bl	8003730 <RTC_ByteToBcd2>
 8003506:	4603      	mov	r3, r0
 8003508:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800350a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	789b      	ldrb	r3, [r3, #2]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f90d 	bl	8003730 <RTC_ByteToBcd2>
 8003516:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003518:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e00e      	b.n	8003546 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	78db      	ldrb	r3, [r3, #3]
 800352c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003534:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800353a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	22ca      	movs	r2, #202	; 0xca
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2253      	movs	r2, #83	; 0x53
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8be 	bl	80036d8 <RTC_EnterInitMode>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2204      	movs	r2, #4
 800356e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e033      	b.n	80035e2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003584:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003588:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f86d 	bl	8003688 <HAL_RTC_WaitForSynchro>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2204      	movs	r2, #4
 80035c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e00a      	b.n	80035e2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}

080035ea <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003604:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003608:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800362c:	b2da      	uxtb	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	0b5b      	lsrs	r3, r3, #13
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11a      	bne.n	800367e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	78db      	ldrb	r3, [r3, #3]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f88d 	bl	800376c <RTC_Bcd2ToByte>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f884 	bl	800376c <RTC_Bcd2ToByte>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	789b      	ldrb	r3, [r3, #2]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f87b 	bl	800376c <RTC_Bcd2ToByte>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fe fa16 	bl	8001ad4 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036aa:	e009      	b.n	80036c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036ac:	f7fe fa12 	bl	8001ad4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ba:	d901      	bls.n	80036c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e007      	b.n	80036d0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe f9ea 	bl	8001ad4 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003702:	e009      	b.n	8003718 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003704:	f7fe f9e6 	bl	8001ad4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003712:	d901      	bls.n	8003718 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e007      	b.n	8003728 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800373e:	e005      	b.n	800374c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	3b0a      	subs	r3, #10
 800374a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b09      	cmp	r3, #9
 8003750:	d8f6      	bhi.n	8003740 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	b2da      	uxtb	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	4313      	orrs	r3, r2
 800375e:	b2db      	uxtb	r3, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4413      	add	r3, r2
 800379a:	b2db      	uxtb	r3, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e056      	b.n	8003868 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd ff1b 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	ea42 0103 	orr.w	r1, r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	f003 0104 	and.w	r1, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003856:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_SPI_Transmit+0x22>
 800388e:	2302      	movs	r3, #2
 8003890:	e11e      	b.n	8003ad0 <HAL_SPI_Transmit+0x260>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800389a:	f7fe f91b 	bl	8001ad4 <HAL_GetTick>
 800389e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d002      	beq.n	80038b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038b4:	e103      	b.n	8003abe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0x52>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c6:	e0fa      	b.n	8003abe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390e:	d107      	bne.n	8003920 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d007      	beq.n	800393e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003946:	d14b      	bne.n	80039e0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_Transmit+0xe6>
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d13e      	bne.n	80039d4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	881a      	ldrh	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	1c9a      	adds	r2, r3, #2
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800397a:	e02b      	b.n	80039d4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b02      	cmp	r3, #2
 8003988:	d112      	bne.n	80039b0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ae:	e011      	b.n	80039d4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b0:	f7fe f890 	bl	8001ad4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d803      	bhi.n	80039c8 <HAL_SPI_Transmit+0x158>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_Transmit+0x15e>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039d2:	e074      	b.n	8003abe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ce      	bne.n	800397c <HAL_SPI_Transmit+0x10c>
 80039de:	e04c      	b.n	8003a7a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_Transmit+0x17e>
 80039e8:	8afb      	ldrh	r3, [r7, #22]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d140      	bne.n	8003a70 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a14:	e02c      	b.n	8003a70 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d113      	bne.n	8003a4c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a4a:	e011      	b.n	8003a70 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a4c:	f7fe f842 	bl	8001ad4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d803      	bhi.n	8003a64 <HAL_SPI_Transmit+0x1f4>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a62:	d102      	bne.n	8003a6a <HAL_SPI_Transmit+0x1fa>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a6e:	e026      	b.n	8003abe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1cd      	bne.n	8003a16 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f894 	bl	8003bac <SPI_EndRxTxTransaction>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e000      	b.n	8003abe <HAL_SPI_Transmit+0x24e>
  }

error:
 8003abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae8:	e04c      	b.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af0:	d048      	beq.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003af2:	f7fd ffef 	bl	8001ad4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d902      	bls.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d13d      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b20:	d111      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2a:	d004      	beq.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	d107      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d10f      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e00f      	b.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d1a3      	bne.n	8003aea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <SPI_EndRxTxTransaction+0x7c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <SPI_EndRxTxTransaction+0x80>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0d5b      	lsrs	r3, r3, #21
 8003bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d112      	bne.n	8003bfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff78 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00f      	b.n	8003c1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d0f2      	beq.n	8003bfe <SPI_EndRxTxTransaction+0x52>
 8003c18:	e000      	b.n	8003c1c <SPI_EndRxTxTransaction+0x70>
        break;
 8003c1a:	bf00      	nop
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	165e9f81 	.word	0x165e9f81

08003c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e01d      	b.n	8003c7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fd54 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f000 fa4a 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_TIM_Base_Stop_IT+0x48>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	f240 4344 	movw	r3, #1092	; 0x444
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_Base_Stop_IT+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0202 	mvn.w	r2, #2
 8003d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9af 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9a1 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f9b2 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0204 	mvn.w	r2, #4
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f985 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f977 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f988 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0208 	mvn.w	r2, #8
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f95b 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f94d 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f95e 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0210 	mvn.w	r2, #16
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2208      	movs	r2, #8
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f931 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f923 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f934 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0201 	mvn.w	r2, #1
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8fd 	bl	80040a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fada 	bl	8004488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8f9 	bl	80040f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d10e      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0220 	mvn.w	r2, #32
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 faa4 	bl	8004474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIM_ConfigClockSource+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e0a6      	b.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d067      	beq.n	8004054 <HAL_TIM_ConfigClockSource+0x120>
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d80b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x6c>
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d073      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0x140>
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d802      	bhi.n	8003f96 <HAL_TIM_ConfigClockSource+0x62>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d06f      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f94:	e078      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d06c      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0x140>
 8003f9a:	2b30      	cmp	r3, #48	; 0x30
 8003f9c:	d06a      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f9e:	e073      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_TIM_ConfigClockSource+0x8c>
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d804      	bhi.n	8003fb2 <HAL_TIM_ConfigClockSource+0x7e>
 8003fa8:	2b50      	cmp	r3, #80	; 0x50
 8003faa:	d033      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0xe0>
 8003fac:	2b60      	cmp	r3, #96	; 0x60
 8003fae:	d041      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fb0:	e06a      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d066      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x152>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d017      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fbe:	e063      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f000 f9b4 	bl	800433c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]
      break;
 8003fec:	e04c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6899      	ldr	r1, [r3, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f000 f99d 	bl	800433c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004010:	609a      	str	r2, [r3, #8]
      break;
 8004012:	e039      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	461a      	mov	r2, r3
 8004022:	f000 f911 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2150      	movs	r1, #80	; 0x50
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f96a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004032:	e029      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	461a      	mov	r2, r3
 8004042:	f000 f930 	bl	80042a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2160      	movs	r1, #96	; 0x60
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f95a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004052:	e019      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	461a      	mov	r2, r3
 8004062:	f000 f8f1 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2140      	movs	r1, #64	; 0x40
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f94a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004072:	e009      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 f941 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <TIM_Base_SetConfig+0x114>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3d      	ldr	r2, [pc, #244]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3a      	ldr	r2, [pc, #232]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <TIM_Base_SetConfig+0x114>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d027      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d023      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d017      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a28      	ldr	r2, [pc, #160]	; (8004230 <TIM_Base_SetConfig+0x128>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <TIM_Base_SetConfig+0x12c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <TIM_Base_SetConfig+0x130>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a25      	ldr	r2, [pc, #148]	; (800423c <TIM_Base_SetConfig+0x134>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <TIM_Base_SetConfig+0x138>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <TIM_Base_SetConfig+0x13c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <TIM_Base_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0xf8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d103      	bne.n	8004208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	615a      	str	r2, [r3, #20]
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	40001800 	.word	0x40001800
 8004240:	40001c00 	.word	0x40001c00
 8004244:	40002000 	.word	0x40002000

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 030a 	bic.w	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	431a      	orrs	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e05a      	b.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d01d      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4313      	orrs	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800

08004474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e03f      	b.n	800452e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f980 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f9b1 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af02      	add	r7, sp, #8
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	f040 8083 	bne.w	800465e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_UART_Transmit+0x2e>
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e07b      	b.n	8004660 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_UART_Transmit+0x40>
 8004572:	2302      	movs	r3, #2
 8004574:	e074      	b.n	8004660 <HAL_UART_Transmit+0x12a>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2221      	movs	r2, #33	; 0x21
 8004588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800458c:	f7fd faa2 	bl	8001ad4 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80045a6:	e042      	b.n	800462e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045be:	d122      	bne.n	8004606 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f8f2 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e042      	b.n	8004660 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3302      	adds	r3, #2
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	e017      	b.n	800462e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	e013      	b.n	800462e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f8cf 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e01f      	b.n	8004660 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	60ba      	str	r2, [r7, #8]
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1b7      	bne.n	80045a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f8b6 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e006      	b.n	8004660 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 8090 	bne.w	80047aa <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_UART_Receive+0x2e>
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e088      	b.n	80047ac <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Receive+0x40>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e081      	b.n	80047ac <HAL_UART_Receive+0x144>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2222      	movs	r2, #34	; 0x22
 80046ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046be:	f7fd fa09 	bl	8001ad4 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046d8:	e05c      	b.n	8004794 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d12b      	bne.n	800474a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2120      	movs	r1, #32
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f859 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e04f      	b.n	80047ac <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10c      	bne.n	8004732 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	b29a      	uxth	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3302      	adds	r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	e030      	b.n	8004794 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	b29b      	uxth	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	b29a      	uxth	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e024      	b.n	8004794 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2120      	movs	r1, #32
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	60ba      	str	r2, [r7, #8]
 8004778:	b2ca      	uxtb	r2, r1
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e00a      	b.n	8004794 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1c59      	adds	r1, r3, #1
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d19d      	bne.n	80046da <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fd f97e 	bl	8001ad4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800488a:	f023 030c 	bic.w	r3, r3, #12
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	430b      	orrs	r3, r1
 8004896:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	f040 818b 	bne.w	8004bd0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4ac1      	ldr	r2, [pc, #772]	; (8004bc4 <UART_SetConfig+0x37c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d005      	beq.n	80048d0 <UART_SetConfig+0x88>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4abf      	ldr	r2, [pc, #764]	; (8004bc8 <UART_SetConfig+0x380>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f040 80bd 	bne.w	8004a4a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe fb42 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 80048d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	461d      	mov	r5, r3
 80048da:	f04f 0600 	mov.w	r6, #0
 80048de:	46a8      	mov	r8, r5
 80048e0:	46b1      	mov	r9, r6
 80048e2:	eb18 0308 	adds.w	r3, r8, r8
 80048e6:	eb49 0409 	adc.w	r4, r9, r9
 80048ea:	4698      	mov	r8, r3
 80048ec:	46a1      	mov	r9, r4
 80048ee:	eb18 0805 	adds.w	r8, r8, r5
 80048f2:	eb49 0906 	adc.w	r9, r9, r6
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004902:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004906:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800490a:	4688      	mov	r8, r1
 800490c:	4691      	mov	r9, r2
 800490e:	eb18 0005 	adds.w	r0, r8, r5
 8004912:	eb49 0106 	adc.w	r1, r9, r6
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	461d      	mov	r5, r3
 800491c:	f04f 0600 	mov.w	r6, #0
 8004920:	196b      	adds	r3, r5, r5
 8004922:	eb46 0406 	adc.w	r4, r6, r6
 8004926:	461a      	mov	r2, r3
 8004928:	4623      	mov	r3, r4
 800492a:	f7fc f9bd 	bl	8000ca8 <__aeabi_uldivmod>
 800492e:	4603      	mov	r3, r0
 8004930:	460c      	mov	r4, r1
 8004932:	461a      	mov	r2, r3
 8004934:	4ba5      	ldr	r3, [pc, #660]	; (8004bcc <UART_SetConfig+0x384>)
 8004936:	fba3 2302 	umull	r2, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	461d      	mov	r5, r3
 8004944:	f04f 0600 	mov.w	r6, #0
 8004948:	46a9      	mov	r9, r5
 800494a:	46b2      	mov	sl, r6
 800494c:	eb19 0309 	adds.w	r3, r9, r9
 8004950:	eb4a 040a 	adc.w	r4, sl, sl
 8004954:	4699      	mov	r9, r3
 8004956:	46a2      	mov	sl, r4
 8004958:	eb19 0905 	adds.w	r9, r9, r5
 800495c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004974:	4689      	mov	r9, r1
 8004976:	4692      	mov	sl, r2
 8004978:	eb19 0005 	adds.w	r0, r9, r5
 800497c:	eb4a 0106 	adc.w	r1, sl, r6
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	461d      	mov	r5, r3
 8004986:	f04f 0600 	mov.w	r6, #0
 800498a:	196b      	adds	r3, r5, r5
 800498c:	eb46 0406 	adc.w	r4, r6, r6
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	f7fc f988 	bl	8000ca8 <__aeabi_uldivmod>
 8004998:	4603      	mov	r3, r0
 800499a:	460c      	mov	r4, r1
 800499c:	461a      	mov	r2, r3
 800499e:	4b8b      	ldr	r3, [pc, #556]	; (8004bcc <UART_SetConfig+0x384>)
 80049a0:	fba3 1302 	umull	r1, r3, r3, r2
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	2164      	movs	r1, #100	; 0x64
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	3332      	adds	r3, #50	; 0x32
 80049b2:	4a86      	ldr	r2, [pc, #536]	; (8004bcc <UART_SetConfig+0x384>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c0:	4498      	add	r8, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	461d      	mov	r5, r3
 80049c6:	f04f 0600 	mov.w	r6, #0
 80049ca:	46a9      	mov	r9, r5
 80049cc:	46b2      	mov	sl, r6
 80049ce:	eb19 0309 	adds.w	r3, r9, r9
 80049d2:	eb4a 040a 	adc.w	r4, sl, sl
 80049d6:	4699      	mov	r9, r3
 80049d8:	46a2      	mov	sl, r4
 80049da:	eb19 0905 	adds.w	r9, r9, r5
 80049de:	eb4a 0a06 	adc.w	sl, sl, r6
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049f6:	4689      	mov	r9, r1
 80049f8:	4692      	mov	sl, r2
 80049fa:	eb19 0005 	adds.w	r0, r9, r5
 80049fe:	eb4a 0106 	adc.w	r1, sl, r6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	461d      	mov	r5, r3
 8004a08:	f04f 0600 	mov.w	r6, #0
 8004a0c:	196b      	adds	r3, r5, r5
 8004a0e:	eb46 0406 	adc.w	r4, r6, r6
 8004a12:	461a      	mov	r2, r3
 8004a14:	4623      	mov	r3, r4
 8004a16:	f7fc f947 	bl	8000ca8 <__aeabi_uldivmod>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <UART_SetConfig+0x384>)
 8004a22:	fba3 1302 	umull	r1, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2164      	movs	r1, #100	; 0x64
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	3332      	adds	r3, #50	; 0x32
 8004a34:	4a65      	ldr	r2, [pc, #404]	; (8004bcc <UART_SetConfig+0x384>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 0207 	and.w	r2, r3, #7
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4442      	add	r2, r8
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	e26f      	b.n	8004f2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7fe fa71 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	461d      	mov	r5, r3
 8004a54:	f04f 0600 	mov.w	r6, #0
 8004a58:	46a8      	mov	r8, r5
 8004a5a:	46b1      	mov	r9, r6
 8004a5c:	eb18 0308 	adds.w	r3, r8, r8
 8004a60:	eb49 0409 	adc.w	r4, r9, r9
 8004a64:	4698      	mov	r8, r3
 8004a66:	46a1      	mov	r9, r4
 8004a68:	eb18 0805 	adds.w	r8, r8, r5
 8004a6c:	eb49 0906 	adc.w	r9, r9, r6
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a84:	4688      	mov	r8, r1
 8004a86:	4691      	mov	r9, r2
 8004a88:	eb18 0005 	adds.w	r0, r8, r5
 8004a8c:	eb49 0106 	adc.w	r1, r9, r6
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	461d      	mov	r5, r3
 8004a96:	f04f 0600 	mov.w	r6, #0
 8004a9a:	196b      	adds	r3, r5, r5
 8004a9c:	eb46 0406 	adc.w	r4, r6, r6
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	f7fc f900 	bl	8000ca8 <__aeabi_uldivmod>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <UART_SetConfig+0x384>)
 8004ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	461d      	mov	r5, r3
 8004abe:	f04f 0600 	mov.w	r6, #0
 8004ac2:	46a9      	mov	r9, r5
 8004ac4:	46b2      	mov	sl, r6
 8004ac6:	eb19 0309 	adds.w	r3, r9, r9
 8004aca:	eb4a 040a 	adc.w	r4, sl, sl
 8004ace:	4699      	mov	r9, r3
 8004ad0:	46a2      	mov	sl, r4
 8004ad2:	eb19 0905 	adds.w	r9, r9, r5
 8004ad6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aee:	4689      	mov	r9, r1
 8004af0:	4692      	mov	sl, r2
 8004af2:	eb19 0005 	adds.w	r0, r9, r5
 8004af6:	eb4a 0106 	adc.w	r1, sl, r6
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	461d      	mov	r5, r3
 8004b00:	f04f 0600 	mov.w	r6, #0
 8004b04:	196b      	adds	r3, r5, r5
 8004b06:	eb46 0406 	adc.w	r4, r6, r6
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	f7fc f8cb 	bl	8000ca8 <__aeabi_uldivmod>
 8004b12:	4603      	mov	r3, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <UART_SetConfig+0x384>)
 8004b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2164      	movs	r1, #100	; 0x64
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	3332      	adds	r3, #50	; 0x32
 8004b2c:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <UART_SetConfig+0x384>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b3a:	4498      	add	r8, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	461d      	mov	r5, r3
 8004b40:	f04f 0600 	mov.w	r6, #0
 8004b44:	46a9      	mov	r9, r5
 8004b46:	46b2      	mov	sl, r6
 8004b48:	eb19 0309 	adds.w	r3, r9, r9
 8004b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b50:	4699      	mov	r9, r3
 8004b52:	46a2      	mov	sl, r4
 8004b54:	eb19 0905 	adds.w	r9, r9, r5
 8004b58:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b70:	4689      	mov	r9, r1
 8004b72:	4692      	mov	sl, r2
 8004b74:	eb19 0005 	adds.w	r0, r9, r5
 8004b78:	eb4a 0106 	adc.w	r1, sl, r6
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	461d      	mov	r5, r3
 8004b82:	f04f 0600 	mov.w	r6, #0
 8004b86:	196b      	adds	r3, r5, r5
 8004b88:	eb46 0406 	adc.w	r4, r6, r6
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	f7fc f88a 	bl	8000ca8 <__aeabi_uldivmod>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <UART_SetConfig+0x384>)
 8004b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	2164      	movs	r1, #100	; 0x64
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	3332      	adds	r3, #50	; 0x32
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <UART_SetConfig+0x384>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	f003 0207 	and.w	r2, r3, #7
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4442      	add	r2, r8
 8004bc0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004bc2:	e1b2      	b.n	8004f2a <UART_SetConfig+0x6e2>
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40011400 	.word	0x40011400
 8004bcc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4ad7      	ldr	r2, [pc, #860]	; (8004f34 <UART_SetConfig+0x6ec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d005      	beq.n	8004be6 <UART_SetConfig+0x39e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4ad6      	ldr	r2, [pc, #856]	; (8004f38 <UART_SetConfig+0x6f0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	f040 80d1 	bne.w	8004d88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be6:	f7fe f9b7 	bl	8002f58 <HAL_RCC_GetPCLK2Freq>
 8004bea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	469a      	mov	sl, r3
 8004bf0:	f04f 0b00 	mov.w	fp, #0
 8004bf4:	46d0      	mov	r8, sl
 8004bf6:	46d9      	mov	r9, fp
 8004bf8:	eb18 0308 	adds.w	r3, r8, r8
 8004bfc:	eb49 0409 	adc.w	r4, r9, r9
 8004c00:	4698      	mov	r8, r3
 8004c02:	46a1      	mov	r9, r4
 8004c04:	eb18 080a 	adds.w	r8, r8, sl
 8004c08:	eb49 090b 	adc.w	r9, r9, fp
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c20:	4688      	mov	r8, r1
 8004c22:	4691      	mov	r9, r2
 8004c24:	eb1a 0508 	adds.w	r5, sl, r8
 8004c28:	eb4b 0609 	adc.w	r6, fp, r9
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	f04f 0400 	mov.w	r4, #0
 8004c3e:	0094      	lsls	r4, r2, #2
 8004c40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c44:	008b      	lsls	r3, r1, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	4623      	mov	r3, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	f7fc f82b 	bl	8000ca8 <__aeabi_uldivmod>
 8004c52:	4603      	mov	r3, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	461a      	mov	r2, r3
 8004c58:	4bb8      	ldr	r3, [pc, #736]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	469b      	mov	fp, r3
 8004c68:	f04f 0c00 	mov.w	ip, #0
 8004c6c:	46d9      	mov	r9, fp
 8004c6e:	46e2      	mov	sl, ip
 8004c70:	eb19 0309 	adds.w	r3, r9, r9
 8004c74:	eb4a 040a 	adc.w	r4, sl, sl
 8004c78:	4699      	mov	r9, r3
 8004c7a:	46a2      	mov	sl, r4
 8004c7c:	eb19 090b 	adds.w	r9, r9, fp
 8004c80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c98:	4689      	mov	r9, r1
 8004c9a:	4692      	mov	sl, r2
 8004c9c:	eb1b 0509 	adds.w	r5, fp, r9
 8004ca0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	0094      	lsls	r4, r2, #2
 8004cb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cbc:	008b      	lsls	r3, r1, #2
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	f7fb ffef 	bl	8000ca8 <__aeabi_uldivmod>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b9a      	ldr	r3, [pc, #616]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2164      	movs	r1, #100	; 0x64
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	3332      	adds	r3, #50	; 0x32
 8004ce4:	4a95      	ldr	r2, [pc, #596]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf0:	4498      	add	r8, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	469b      	mov	fp, r3
 8004cf6:	f04f 0c00 	mov.w	ip, #0
 8004cfa:	46d9      	mov	r9, fp
 8004cfc:	46e2      	mov	sl, ip
 8004cfe:	eb19 0309 	adds.w	r3, r9, r9
 8004d02:	eb4a 040a 	adc.w	r4, sl, sl
 8004d06:	4699      	mov	r9, r3
 8004d08:	46a2      	mov	sl, r4
 8004d0a:	eb19 090b 	adds.w	r9, r9, fp
 8004d0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d26:	4689      	mov	r9, r1
 8004d28:	4692      	mov	sl, r2
 8004d2a:	eb1b 0509 	adds.w	r5, fp, r9
 8004d2e:	eb4c 060a 	adc.w	r6, ip, sl
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4619      	mov	r1, r3
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	f04f 0400 	mov.w	r4, #0
 8004d44:	0094      	lsls	r4, r2, #2
 8004d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	4631      	mov	r1, r6
 8004d54:	f7fb ffa8 	bl	8000ca8 <__aeabi_uldivmod>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b77      	ldr	r3, [pc, #476]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a72      	ldr	r2, [pc, #456]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4442      	add	r2, r8
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	e0d0      	b.n	8004f2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe f8d2 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	469a      	mov	sl, r3
 8004d92:	f04f 0b00 	mov.w	fp, #0
 8004d96:	46d0      	mov	r8, sl
 8004d98:	46d9      	mov	r9, fp
 8004d9a:	eb18 0308 	adds.w	r3, r8, r8
 8004d9e:	eb49 0409 	adc.w	r4, r9, r9
 8004da2:	4698      	mov	r8, r3
 8004da4:	46a1      	mov	r9, r4
 8004da6:	eb18 080a 	adds.w	r8, r8, sl
 8004daa:	eb49 090b 	adc.w	r9, r9, fp
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dc2:	4688      	mov	r8, r1
 8004dc4:	4691      	mov	r9, r2
 8004dc6:	eb1a 0508 	adds.w	r5, sl, r8
 8004dca:	eb4b 0609 	adc.w	r6, fp, r9
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	f04f 0400 	mov.w	r4, #0
 8004de0:	0094      	lsls	r4, r2, #2
 8004de2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004de6:	008b      	lsls	r3, r1, #2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	4628      	mov	r0, r5
 8004dee:	4631      	mov	r1, r6
 8004df0:	f7fb ff5a 	bl	8000ca8 <__aeabi_uldivmod>
 8004df4:	4603      	mov	r3, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	469b      	mov	fp, r3
 8004e0a:	f04f 0c00 	mov.w	ip, #0
 8004e0e:	46d9      	mov	r9, fp
 8004e10:	46e2      	mov	sl, ip
 8004e12:	eb19 0309 	adds.w	r3, r9, r9
 8004e16:	eb4a 040a 	adc.w	r4, sl, sl
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	46a2      	mov	sl, r4
 8004e1e:	eb19 090b 	adds.w	r9, r9, fp
 8004e22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	4692      	mov	sl, r2
 8004e3e:	eb1b 0509 	adds.w	r5, fp, r9
 8004e42:	eb4c 060a 	adc.w	r6, ip, sl
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f04f 0400 	mov.w	r4, #0
 8004e58:	0094      	lsls	r4, r2, #2
 8004e5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	4631      	mov	r1, r6
 8004e68:	f7fb ff1e 	bl	8000ca8 <__aeabi_uldivmod>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a2d      	ldr	r2, [pc, #180]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	4498      	add	r8, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	469b      	mov	fp, r3
 8004e98:	f04f 0c00 	mov.w	ip, #0
 8004e9c:	46d9      	mov	r9, fp
 8004e9e:	46e2      	mov	sl, ip
 8004ea0:	eb19 0309 	adds.w	r3, r9, r9
 8004ea4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	46a2      	mov	sl, r4
 8004eac:	eb19 090b 	adds.w	r9, r9, fp
 8004eb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ec8:	4689      	mov	r9, r1
 8004eca:	4692      	mov	sl, r2
 8004ecc:	eb1b 0509 	adds.w	r5, fp, r9
 8004ed0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f04f 0400 	mov.w	r4, #0
 8004ee6:	0094      	lsls	r4, r2, #2
 8004ee8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eec:	008b      	lsls	r3, r1, #2
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	f7fb fed7 	bl	8000ca8 <__aeabi_uldivmod>
 8004efa:	4603      	mov	r3, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004f02:	fba3 1302 	umull	r1, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2164      	movs	r1, #100	; 0x64
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	3332      	adds	r3, #50	; 0x32
 8004f14:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <UART_SetConfig+0x6f4>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4442      	add	r2, r8
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	e7ff      	b.n	8004f2a <UART_SetConfig+0x6e2>
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40011400 	.word	0x40011400
 8004f3c:	51eb851f 	.word	0x51eb851f

08004f40 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <lv_disp_get_scr_act+0x14>
 8004f4e:	f00d fb2b 	bl	80125a8 <lv_disp_get_default>
 8004f52:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e001      	b.n	8004f62 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <lv_disp_get_layer_top+0x14>
 8004f78:	f00d fb16 	bl	80125a8 <lv_disp_get_default>
 8004f7c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e001      	b.n	8004f8c <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <lv_disp_get_layer_sys+0x14>
 8004fa2:	f00d fb01 	bl	80125a8 <lv_disp_get_default>
 8004fa6:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e001      	b.n	8004fb6 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004fc4:	2160      	movs	r1, #96	; 0x60
 8004fc6:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <lv_group_init+0x10>)
 8004fc8:	f00e fa00 	bl	80133cc <lv_ll_init>
}
 8004fcc:	bf00      	nop
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20006de8 	.word	0x20006de8

08004fd4 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d040      	beq.n	8005066 <lv_group_add_obj+0x92>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    LV_LL_READ(group->obj_ll, obj_i)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f00e fb72 	bl	80136d0 <lv_ll_get_head>
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	e00a      	b.n	8005006 <lv_group_add_obj+0x32>
    {
        if((*obj_i) == obj) {
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d037      	beq.n	800506a <lv_group_add_obj+0x96>
    LV_LL_READ(group->obj_ll, obj_i)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68f9      	ldr	r1, [r7, #12]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f00e fb8c 	bl	801371c <lv_ll_get_next>
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f1      	bne.n	8004ff0 <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8005014:	6838      	ldr	r0, [r7, #0]
 8005016:	f002 f952 	bl	80072be <lv_obj_is_focused>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f953 	bl	80052d0 <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f00e fa65 	bl	8013502 <lv_ll_ins_tail>
 8005038:	60b8      	str	r0, [r7, #8]
    lv_mem_assert(next);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d100      	bne.n	8005042 <lv_group_add_obj+0x6e>
 8005040:	e7fe      	b.n	8005040 <lv_group_add_obj+0x6c>
    if(next == NULL) return;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <lv_group_add_obj+0x9a>
    *next = obj;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	f00e fb3d 	bl	80136d0 <lv_ll_get_head>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <lv_group_add_obj+0x9c>
        lv_group_refocus(group);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f936 	bl	80052d0 <lv_group_refocus>
 8005064:	e004      	b.n	8005070 <lv_group_add_obj+0x9c>
    if(group == NULL) return;
 8005066:	bf00      	nop
 8005068:	e002      	b.n	8005070 <lv_group_add_obj+0x9c>
            return;
 800506a:	bf00      	nop
 800506c:	e000      	b.n	8005070 <lv_group_add_obj+0x9c>
    if(next == NULL) return;
 800506e:	bf00      	nop
    }
}
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <lv_group_remove_obj>:
/**
 * Remove an object from its group
 * @param obj pointer to an object to remove
 */
void lv_group_remove_obj(lv_obj_t * obj)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
    lv_group_t * g = obj->group_p;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	60bb      	str	r3, [r7, #8]
    if(g == NULL) return;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d053      	beq.n	8005132 <lv_group_remove_obj+0xbc>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d051      	beq.n	8005136 <lv_group_remove_obj+0xc0>

    /*Focus on the next object*/
    if(*g->obj_focus == obj) {
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d11f      	bne.n	80050de <lv_group_remove_obj+0x68>
        /*If this is the only object in the group then focus to nothing.*/
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f00e fb15 	bl	80136d0 <lv_ll_get_head>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d113      	bne.n	80050d8 <lv_group_remove_obj+0x62>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f00e fb1f 	bl	80136f6 <lv_ll_get_tail>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d10a      	bne.n	80050d8 <lv_group_remove_obj+0x62>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	6810      	ldr	r0, [r2, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2110      	movs	r1, #16
 80050d4:	4798      	blx	r3
 80050d6:	e002      	b.n	80050de <lv_group_remove_obj+0x68>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 80050d8:	68b8      	ldr	r0, [r7, #8]
 80050da:	f000 f8f9 	bl	80052d0 <lv_group_refocus>
    }

    /* If the focuses object is still the same then it was the only object in the group but it will
     * be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     * zero objects*/
    if(*g->obj_focus == obj) {
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d102      	bne.n	80050f0 <lv_group_remove_obj+0x7a>
        g->obj_focus = NULL;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group */
    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f00e faec 	bl	80136d0 <lv_ll_get_head>
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	e016      	b.n	800512a <lv_group_remove_obj+0xb4>
    {
        if(*i == obj) {
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d10b      	bne.n	800511e <lv_group_remove_obj+0xa8>
            lv_ll_rem(&g->obj_ll, i);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	f00e fa32 	bl	8013574 <lv_ll_rem>
            lv_mem_free(i);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f00e fc9d 	bl	8013a50 <lv_mem_free>
            obj->group_p = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800511c:	e00c      	b.n	8005138 <lv_group_remove_obj+0xc2>
    LV_LL_READ(g->obj_ll, i)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	4618      	mov	r0, r3
 8005124:	f00e fafa 	bl	801371c <lv_ll_get_next>
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <lv_group_remove_obj+0x86>
 8005130:	e002      	b.n	8005138 <lv_group_remove_obj+0xc2>
    if(g == NULL) return;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <lv_group_remove_obj+0xc2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 8005136:	bf00      	nop
        }
    }
}
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_head, lv_ll_get_next);
 8005148:	4a04      	ldr	r2, [pc, #16]	; (800515c <lv_group_focus_next+0x1c>)
 800514a:	4905      	ldr	r1, [pc, #20]	; (8005160 <lv_group_focus_next+0x20>)
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8f7 	bl	8005340 <focus_next_core>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0801371d 	.word	0x0801371d
 8005160:	080136d1 	.word	0x080136d1

08005164 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_tail, lv_ll_get_prev);
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <lv_group_focus_prev+0x1c>)
 800516e:	4905      	ldr	r1, [pc, #20]	; (8005184 <lv_group_focus_prev+0x20>)
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8e5 	bl	8005340 <focus_next_core>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08013751 	.word	0x08013751
 8005184:	080136f7 	.word	0x080136f7

08005188 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
    uint8_t en_val = edit ? 1 : 0;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800519e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d028      	beq.n	80051fe <lv_group_set_editing+0x76>

    group->editing     = en_val;
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	b2d9      	uxtb	r1, r3
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80051ba:	f361 0341 	bfi	r3, r1, #1, #1
 80051be:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f851 	bl	800526a <lv_group_get_focused>
 80051c8:	6138      	str	r0, [r7, #16]

    if(focused) {
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <lv_group_set_editing+0x6e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	2200      	movs	r2, #0
 80051d6:	210f      	movs	r1, #15
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	210c      	movs	r1, #12
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fdd7 	bl	8006d9a <lv_event_send>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <lv_group_set_editing+0x7a>
    }

    lv_obj_invalidate(focused);
 80051f6:	6938      	ldr	r0, [r7, #16]
 80051f8:	f000 fe1d 	bl	8005e36 <lv_obj_invalidate>
 80051fc:	e002      	b.n	8005204 <lv_group_set_editing+0x7c>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <lv_group_set_editing+0x7c>
        if(res != LV_RES_OK) return;
 8005202:	bf00      	nop
}
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <lv_group_mod_style>:
 * @param group pointer to group
 * @param style pointer to a style to modify
 * @return a copy of the input style but modified with the 'style_mod' function
 */
lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
    /*Load the current style. It will be modified by the callback*/
    lv_style_copy(&group->style_tmp, style);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	331c      	adds	r3, #28
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f003 faa6 	bl	800876c <lv_style_copy>

    if(group->editing) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <lv_group_mod_style+0x3e>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <lv_group_mod_style+0x54>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	321c      	adds	r2, #28
 8005240:	4611      	mov	r1, r2
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
 8005246:	e00a      	b.n	800525e <lv_group_mod_style+0x54>
    } else {
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d006      	beq.n	800525e <lv_group_mod_style+0x54>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	321c      	adds	r2, #28
 8005258:	4611      	mov	r1, r2
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4798      	blx	r3
    }
    return &group->style_tmp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	331c      	adds	r3, #28
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <lv_group_get_focused+0x12>
 8005278:	2300      	movs	r3, #0
 800527a:	e008      	b.n	800528e <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <lv_group_get_focused+0x1e>
 8005284:	2300      	movs	r3, #0
 8005286:	e002      	b.n	800528e <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <lv_group_get_editing+0x12>
 80052a8:	2300      	movs	r3, #0
 80052aa:	e00b      	b.n	80052c4 <lv_group_get_editing+0x2a>
    return group->editing ? true : false;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bf14      	ite	ne
 80052be:	2301      	movne	r3, #1
 80052c0:	2300      	moveq	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80052ec:	f043 0310 	orr.w	r3, r3, #16
 80052f0:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <lv_group_refocus+0x3c>
        lv_group_focus_next(g);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff1b 	bl	8005140 <lv_group_focus_next>
 800530a:	e00a      	b.n	8005322 <lv_group_refocus+0x52>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <lv_group_refocus+0x52>
        lv_group_focus_prev(g);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff21 	bl	8005164 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	b2d9      	uxtb	r1, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8005330:	f361 1304 	bfi	r3, r1, #4, #1
 8005334:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <focus_next_core>:
    }
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 80a6 	bne.w	80054aa <focus_next_core+0x16a>

    lv_obj_t ** obj_next     = group->obj_focus;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 800536c:	2301      	movs	r3, #1
 800536e:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11b      	bne.n	80053ae <focus_next_core+0x6e>
            if(group->wrap || obj_sentinel == NULL) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <focus_next_core+0x4e>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 8090 	bne.w	80054ae <focus_next_core+0x16e>
                if(!can_begin) return;
 800538e:	7dbb      	ldrb	r3, [r7, #22]
 8005390:	f083 0301 	eor.w	r3, r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 808b 	bne.w	80054b2 <focus_next_core+0x172>
                obj_next  = begin(&group->obj_ll);
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
 80053a4:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <focus_next_core+0x7e>
            obj_sentinel = obj_next;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d07b      	beq.n	80054b6 <focus_next_core+0x176>
        }

        if(can_move) {
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <focus_next_core+0x98>
            obj_next = move(&group->obj_ll, obj_next);
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	4610      	mov	r0, r2
 80053cc:	4798      	blx	r3
 80053ce:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d070      	beq.n	80054ba <focus_next_core+0x17a>
        }

        can_move = true;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <focus_next_core+0xba>

        /*Hidden objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 feee 	bl	80071c8 <lv_obj_get_hidden>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f083 0301 	eor.w	r3, r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <focus_next_core+0xbe>
 80053f8:	e7ba      	b.n	8005370 <focus_next_core+0x30>
        if(obj_next == NULL) continue;
 80053fa:	bf00      	nop
        if(obj_next == NULL) {
 80053fc:	e7b8      	b.n	8005370 <focus_next_core+0x30>
        if(!lv_obj_get_hidden(*obj_next)) break;
 80053fe:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	429a      	cmp	r2, r3
 8005408:	d059      	beq.n	80054be <focus_next_core+0x17e>

    if(group->obj_focus) {
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01c      	beq.n	800544c <focus_next_core+0x10c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	68d2      	ldr	r2, [r2, #12]
 800541e:	6810      	ldr	r0, [r2, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	2110      	movs	r1, #16
 8005424:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2200      	movs	r2, #0
 800542e:	210d      	movs	r1, #13
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fcb2 	bl	8006d9a <lv_event_send>
 8005436:	4603      	mov	r3, r0
 8005438:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 800543a:	7d7b      	ldrb	r3, [r7, #21]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d140      	bne.n	80054c2 <focus_next_core+0x182>
        lv_obj_invalidate(*group->obj_focus);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fcf5 	bl	8005e36 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	6810      	ldr	r0, [r2, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	210f      	movs	r1, #15
 8005464:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2200      	movs	r2, #0
 800546e:	210c      	movs	r1, #12
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fc92 	bl	8006d9a <lv_event_send>
 8005476:	4603      	mov	r3, r0
 8005478:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 800547a:	7d3b      	ldrb	r3, [r7, #20]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d122      	bne.n	80054c6 <focus_next_core+0x186>

    /*If the object or its parent has `top == true` bring it to the foregorund*/
    obj_to_foreground(*group->obj_focus);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f821 	bl	80054ce <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fccf 	bl	8005e36 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d013      	beq.n	80054c8 <focus_next_core+0x188>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	4798      	blx	r3
 80054a8:	e00e      	b.n	80054c8 <focus_next_core+0x188>
    if(group->frozen) return;
 80054aa:	bf00      	nop
 80054ac:	e00c      	b.n	80054c8 <focus_next_core+0x188>
                return;
 80054ae:	bf00      	nop
 80054b0:	e00a      	b.n	80054c8 <focus_next_core+0x188>
                if(!can_begin) return;
 80054b2:	bf00      	nop
 80054b4:	e008      	b.n	80054c8 <focus_next_core+0x188>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80054b6:	bf00      	nop
 80054b8:	e006      	b.n	80054c8 <focus_next_core+0x188>
            if(obj_next == obj_sentinel) return;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <focus_next_core+0x188>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <focus_next_core+0x188>
        if(res != LV_RES_OK) return;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <focus_next_core+0x188>
    if(res != LV_RES_OK) return;
 80054c6:	bf00      	nop
}
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 80054de:	e00d      	b.n	80054fc <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <obj_to_foreground+0x26>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f001 fd75 	bl	8006fe4 <lv_obj_get_parent>
 80054fa:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ee      	bne.n	80054e0 <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8005508:	68b8      	ldr	r0, [r7, #8]
 800550a:	f000 fd69 	bl	8005fe0 <lv_obj_move_foreground>
    }
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 800551a:	2000      	movs	r0, #0
 800551c:	f000 f81f 	bl	800555e <lv_indev_reset>
}
 8005520:	bf00      	nop
 8005522:	bd80      	pop	{r7, pc}

08005524 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
    return indev_act;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <lv_indev_get_act+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20002a50 	.word	0x20002a50

0800553c <lv_indev_get_type>:
 * Get the type of an input device
 * @param indev pointer to an input device
 * @return the type of the input device from `lv_hal_indev_type_t` (`LV_INDEV_TYPE_...`)
 */
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <lv_indev_get_type+0x12>
 800554a:	2300      	movs	r3, #0
 800554c:	e001      	b.n	8005552 <lv_indev_get_type+0x16>

    return indev->driver.type;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	781b      	ldrb	r3, [r3, #0]
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    if(indev)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 800557a:	e012      	b.n	80055a2 <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 800557c:	2000      	movs	r0, #0
 800557e:	f00d f8d1 	bl	8012724 <lv_indev_get_next>
 8005582:	60f8      	str	r0, [r7, #12]
        while(i) {
 8005584:	e00a      	b.n	800559c <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i = lv_indev_get_next(i);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f00d f8c5 	bl	8012724 <lv_indev_get_next>
 800559a:	60f8      	str	r0, [r7, #12]
        while(i) {
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <lv_indev_reset+0x28>
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <lv_indev_reset_long_press>:
/**
 * Reset the long press state of an input device
 * @param indev pointer to an input device
 */
void lv_indev_reset_long_press(lv_indev_t * indev)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
    indev->proc.long_pr_sent         = 0;
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80055b8:	f36f 0300 	bfc	r3, #0, #1
 80055bc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80055c0:	f00d f8e0 	bl	8012784 <lv_tick_get>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	64da      	str	r2, [r3, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 80055ca:	f00d f8db 	bl	8012784 <lv_tick_get>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <lv_indev_get_point>:
 * Get the last point of an input device (for LV_INDEV_TYPE_POINTER and LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d00c      	beq.n	8005608 <lv_indev_get_point+0x2c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d008      	beq.n	8005608 <lv_indev_get_point+0x2c>
        point->x = -1;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fc:	801a      	strh	r2, [r3, #0]
        point->y = -1;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005604:	805a      	strh	r2, [r3, #2]
 8005606:	e009      	b.n	800561c <lv_indev_get_point+0x40>
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	805a      	strh	r2, [r3, #2]
    }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <lv_indev_is_dragging>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <lv_indev_is_dragging+0x12>
 8005636:	2300      	movs	r3, #0
 8005638:	e014      	b.n	8005664 <lv_indev_is_dragging+0x3c>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d005      	beq.n	800564e <lv_indev_is_dragging+0x26>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d001      	beq.n	800564e <lv_indev_is_dragging+0x26>
 800564a:	2300      	movs	r3, #0
 800564c:	e00a      	b.n	8005664 <lv_indev_is_dragging+0x3c>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <lv_indev_get_vect>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
    if(indev == NULL) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <lv_indev_get_vect+0x1e>
        point->x = 0;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	805a      	strh	r2, [r3, #2]
        return;
 800568c:	e018      	b.n	80056c0 <lv_indev_get_vect+0x50>
    }

    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d00a      	beq.n	80056ac <lv_indev_get_vect+0x3c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d006      	beq.n	80056ac <lv_indev_get_vect+0x3c>
        point->x = 0;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2200      	movs	r2, #0
 80056a2:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	805a      	strh	r2, [r3, #2]
 80056aa:	e009      	b.n	80056c0 <lv_indev_get_vect+0x50>
    } else {
        point->x = indev->proc.types.pointer.vect.x;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.vect.y;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	805a      	strh	r2, [r3, #2]
    }
}
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <lv_indev_get_obj_act>:
/**
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
    return indev_obj_act;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <lv_indev_get_obj_act+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20002a54 	.word	0x20002a54

080056e4 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80056ee:	2208      	movs	r2, #8
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f021 fd54 	bl	80271a0 <memcpy>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005716:	b29b      	uxth	r3, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	b29b      	uxth	r3, r3
 800571c:	3301      	adds	r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	b21b      	sxth	r3, r3
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	b29b      	uxth	r3, r3
 800574a:	3301      	adds	r3, #1
 800574c:	b29b      	uxth	r3, r3
 800574e:	b21b      	sxth	r3, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8005760:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <lv_init+0x54>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d121      	bne.n	80057ac <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8005768:	f00e f92a 	bl	80139c0 <lv_mem_init>
    lv_task_core_init();
 800576c:	f00e f9f4 	bl	8013b58 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8005770:	f00d fca8 	bl	80130c4 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8005774:	f00d f83c 	bl	80127f0 <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8005778:	f7ff fc22 	bl	8004fc0 <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 800577c:	f002 fdaa 	bl	80082d4 <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8005780:	f001 ffd6 	bl	8007730 <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005784:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8005788:	480a      	ldr	r0, [pc, #40]	; (80057b4 <lv_init+0x58>)
 800578a:	f00d fe1f 	bl	80133cc <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800578e:	2160      	movs	r1, #96	; 0x60
 8005790:	4809      	ldr	r0, [pc, #36]	; (80057b8 <lv_init+0x5c>)
 8005792:	f00d fe1b 	bl	80133cc <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8005796:	f7ff febe 	bl	8005516 <lv_indev_init>

    lv_img_decoder_init();
 800579a:	f00b fb0b 	bl	8010db4 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800579e:	2001      	movs	r0, #1
 80057a0:	f00b fa1e 	bl	8010be0 <lv_img_cache_set_size>

    lv_initialized = true;
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <lv_init+0x54>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e000      	b.n	80057ae <lv_init+0x52>
        return;
 80057ac:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20002a58 	.word	0x20002a58
 80057b4:	20006db0 	.word	0x20006db0
 80057b8:	20006da0 	.word	0x20006da0

080057bc <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]

    lv_obj_t * new_obj = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
    /*Create a screen if the parent is NULL*/
    if(parent == NULL) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 80bf 	bne.w	8005950 <lv_obj_create+0x194>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 80057d2:	f00c fee9 	bl	80125a8 <lv_disp_get_default>
 80057d6:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <lv_obj_create+0x26>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	e26a      	b.n	8005cb8 <lv_obj_create+0x4fc>
        }

        new_obj = lv_ll_ins_head(&disp->scr_ll);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3328      	adds	r3, #40	; 0x28
 80057e6:	4618      	mov	r0, r3
 80057e8:	f00d fe10 	bl	801340c <lv_ll_ins_head>
 80057ec:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d100      	bne.n	80057f6 <lv_obj_create+0x3a>
 80057f4:	e7fe      	b.n	80057f4 <lv_obj_create+0x38>
        if(new_obj == NULL) return NULL;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <lv_obj_create+0x44>
 80057fc:	2300      	movs	r3, #0
 80057fe:	e25b      	b.n	8005cb8 <lv_obj_create+0x4fc>

        new_obj->par = NULL; /*Screens has no a parent*/
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3304      	adds	r3, #4
 800580a:	2148      	movs	r1, #72	; 0x48
 800580c:	4618      	mov	r0, r3
 800580e:	f00d fddd 	bl	80133cc <lv_ll_init>

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800581e:	2000      	movs	r0, #0
 8005820:	f00c fece 	bl	80125c0 <lv_disp_get_hor_res>
 8005824:	4603      	mov	r3, r0
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	b21a      	sxth	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8005832:	2000      	movs	r0, #0
 8005834:	f00c fee5 	bl	8012602 <lv_disp_get_ver_res>
 8005838:	4603      	mov	r3, r0
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	b21a      	sxth	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800586c:	f36f 0300 	bfc	r3, #0, #1
 8005870:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8005874:	f019 fb8e 	bl	801ef94 <lv_theme_get_current>
 8005878:	60b8      	str	r0, [r7, #8]
        if(th) {
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <lv_obj_create+0xce>
            new_obj->style_p = th->style.scr;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
 8005888:	e002      	b.n	8005890 <lv_obj_create+0xd4>
        } else {
            new_obj->style_p = &lv_style_scr;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4a5b      	ldr	r2, [pc, #364]	; (80059fc <lv_obj_create+0x240>)
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
        }
        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8005890:	495b      	ldr	r1, [pc, #364]	; (8005a00 <lv_obj_create+0x244>)
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f001 fb12 	bl	8006ebc <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8005898:	495a      	ldr	r1, [pc, #360]	; (8005a04 <lv_obj_create+0x248>)
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	f001 fb1c 	bl	8006ed8 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	3344      	adds	r3, #68	; 0x44
 80058aa:	2204      	movs	r2, #4
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f021 fc81 	bl	80271b6 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
        /*Set attributes*/
        new_obj->click        = 0;
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058c0:	f36f 0300 	bfc	r3, #0, #1
 80058c4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058ce:	f36f 0341 	bfc	r3, #1, #1
 80058d2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_throw   = 0;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058dc:	f36f 0382 	bfc	r3, #2, #1
 80058e0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058ea:	f36f 03c3 	bfc	r3, #3, #1
 80058ee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058f8:	f36f 1304 	bfc	r3, #4, #1
 80058fc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005906:	f36f 1345 	bfc	r3, #5, #1
 800590a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale_en = 0;
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800591c:	f36f 1386 	bfc	r3, #6, #1
 8005920:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->opa_scale    = LV_OPA_COVER;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	22ff      	movs	r2, #255	; 0xff
 8005928:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->parent_event = 0;
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005932:	f36f 13c7 	bfc	r3, #7, #1
 8005936:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->reserved     = 0;
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005940:	f36f 0387 	bfc	r3, #2, #6
 8005944:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        new_obj->ext_attr = NULL;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
 800594e:	e0bd      	b.n	8005acc <lv_obj_create+0x310>
    }
    /*parent != NULL create normal obj. on a parent*/
    else {
        LV_LOG_TRACE("Object create started");

        new_obj = lv_ll_ins_head(&parent->child_ll);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f00d fd59 	bl	801340c <lv_ll_ins_head>
 800595a:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d100      	bne.n	8005964 <lv_obj_create+0x1a8>
 8005962:	e7fe      	b.n	8005962 <lv_obj_create+0x1a6>
        if(new_obj == NULL) return NULL;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <lv_obj_create+0x1b2>
 800596a:	2300      	movs	r3, #0
 800596c:	e1a4      	b.n	8005cb8 <lv_obj_create+0x4fc>

        new_obj->par = parent; /*Set the parent*/
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3304      	adds	r3, #4
 8005978:	2148      	movs	r1, #72	; 0x48
 800597a:	4618      	mov	r0, r3
 800597c:	f00d fd26 	bl	80133cc <lv_ll_init>

        /*Set coordinates left top corner of parent*/
        new_obj->coords.x1    = parent->coords.x1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800599a:	b29b      	uxth	r3, r3
 800599c:	3364      	adds	r3, #100	; 0x64
 800599e:	b29b      	uxth	r3, r3
 80059a0:	b21a      	sxth	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3342      	adds	r3, #66	; 0x42
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80059de:	f36f 0300 	bfc	r3, #0, #1
 80059e2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
        /*Set appearance*/
        lv_theme_t * th = lv_theme_get_current();
 80059e6:	f019 fad5 	bl	801ef94 <lv_theme_get_current>
 80059ea:	6138      	str	r0, [r7, #16]
        if(th) {
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <lv_obj_create+0x24c>
            new_obj->style_p = th->style.panel;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
 80059fa:	e008      	b.n	8005a0e <lv_obj_create+0x252>
 80059fc:	20006ce0 	.word	0x20006ce0
 8005a00:	08007409 	.word	0x08007409
 8005a04:	080072ef 	.word	0x080072ef
        } else {
            new_obj->style_p = &lv_style_plain_color;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4aad      	ldr	r2, [pc, #692]	; (8005cc0 <lv_obj_create+0x504>)
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8005a0e:	49ad      	ldr	r1, [pc, #692]	; (8005cc4 <lv_obj_create+0x508>)
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f001 fa53 	bl	8006ebc <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8005a16:	49ac      	ldr	r1, [pc, #688]	; (8005cc8 <lv_obj_create+0x50c>)
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f001 fa5d 	bl	8006ed8 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2200      	movs	r2, #0
 8005a22:	619a      	str	r2, [r3, #24]
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3344      	adds	r3, #68	; 0x44
 8005a28:	2204      	movs	r2, #4
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f021 fbc2 	bl	80271b6 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

        /*Set attributes*/
        new_obj->click        = 1;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a4c:	f36f 0341 	bfc	r3, #1, #1
 8005a50:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005a5a:	f043 0303 	orr.w	r3, r3, #3
 8005a5e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = 0;
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a68:	f36f 0382 	bfc	r3, #2, #1
 8005a6c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a76:	f36f 03c3 	bfc	r3, #3, #1
 8005a7a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a84:	f36f 1304 	bfc	r3, #4, #1
 8005a88:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a92:	f36f 1345 	bfc	r3, #5, #1
 8005a96:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->opa_scale_en = 0;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005ab0:	f36f 1386 	bfc	r3, #6, #1
 8005ab4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = 0;
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005abe:	f36f 13c7 	bfc	r3, #7, #1
 8005ac2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->ext_attr = NULL;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Copy the attributes if required*/
    if(copy != NULL) {
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80e5 	beq.w	8005c9e <lv_obj_create+0x4e2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f103 0210 	add.w	r2, r3, #16
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	3310      	adds	r3, #16
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7ff fdff 	bl	80056e4 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
#endif

        /*Set free data*/
#if LV_USE_USER_DATA
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3344      	adds	r3, #68	; 0x44
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	3244      	adds	r2, #68	; 0x44
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	601a      	str	r2, [r3, #0]
#endif
        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b2e:	b2d9      	uxtb	r1, r3
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8005b36:	f361 0300 	bfi	r3, r1, #0, #1
 8005b3a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied the the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->click        = copy->click;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b50:	b2d9      	uxtb	r1, r3
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005b58:	f361 0300 	bfi	r3, r1, #0, #1
 8005b5c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b6a:	b2d9      	uxtb	r1, r3
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005b72:	f361 0341 	bfi	r3, r1, #1, #1
 8005b76:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b80:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005b84:	b2d9      	uxtb	r1, r3
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005b8c:	f361 0301 	bfi	r3, r1, #0, #2
 8005b90:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005ba6:	f361 0382 	bfi	r3, r1, #2, #1
 8005baa:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005bb8:	b2d9      	uxtb	r1, r3
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8005bc4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bd2:	b2d9      	uxtb	r1, r3
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bda:	f361 1304 	bfi	r3, r1, #4, #1
 8005bde:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = copy->top;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005be8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bec:	b2d9      	uxtb	r1, r3
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bf4:	f361 1345 	bfi	r3, r1, #5, #1
 8005bf8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c06:	b2d9      	uxtb	r1, r3
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005c0e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c12:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->opa_scale_en = copy->opa_scale_en;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c20:	b2d9      	uxtb	r1, r3
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005c28:	f361 1386 	bfi	r3, r1, #6, #1
 8005c2c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        new_obj->style_p = copy->style_p;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <lv_obj_create+0x4a8>
            lv_group_add_obj(copy->group_p, new_obj);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f9b8 	bl	8004fd4 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f001 f9bd 	bl	8006fe4 <lv_obj_get_parent>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <lv_obj_create+0x4d8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00e      	beq.n	8005c94 <lv_obj_create+0x4d8>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8005c76:	6838      	ldr	r0, [r7, #0]
 8005c78:	f001 f9ec 	bl	8007054 <lv_obj_get_x>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461c      	mov	r4, r3
 8005c80:	6838      	ldr	r0, [r7, #0]
 8005c82:	f001 fa00 	bl	8007086 <lv_obj_get_y>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	6978      	ldr	r0, [r7, #20]
 8005c8e:	f000 f9d1 	bl	8006034 <lv_obj_set_pos>
 8005c92:	e004      	b.n	8005c9e <lv_obj_create+0x4e2>
        } else {
            lv_obj_set_pos(new_obj, 0, 0);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2100      	movs	r1, #0
 8005c98:	6978      	ldr	r0, [r7, #20]
 8005c9a:	f000 f9cb 	bl	8006034 <lv_obj_set_pos>

        LV_LOG_INFO("Object create ready");
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <lv_obj_create+0x4fa>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	2101      	movs	r1, #1
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	f000 f8c0 	bl	8005e36 <lv_obj_invalidate>
    }

    return new_obj;
 8005cb6:	697b      	ldr	r3, [r7, #20]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	20006d58 	.word	0x20006d58
 8005cc4:	08007409 	.word	0x08007409
 8005cc8:	080072ef 	.word	0x080072ef

08005ccc <lv_obj_del>:
 * Delete 'obj' and all of its children
 * @param obj pointer to an object to delete
 * @return LV_RES_INV because the object is deleted
 */
lv_res_t lv_obj_del(lv_obj_t * obj)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f8ae 	bl	8005e36 <lv_obj_invalidate>

    /*Delete from the group*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fae3 	bl	80072a6 <lv_obj_get_group>
 8005ce0:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <lv_obj_del+0x22>
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff f9c4 	bl	8005076 <lv_group_remove_obj>
#endif

        /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00c fdd7 	bl	80128a4 <lv_anim_del>
#endif

    /*Recursively delete the children*/
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00d fce8 	bl	80136d0 <lv_ll_get_head>
 8005d00:	61f8      	str	r0, [r7, #28]
    while(i != NULL) {
 8005d02:	e00b      	b.n	8005d1c <lv_obj_del+0x50>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00d fd06 	bl	801371c <lv_ll_get_next>
 8005d10:	60b8      	str	r0, [r7, #8]

        /*Call the recursive del to the child too*/
        delete_children(i);
 8005d12:	69f8      	ldr	r0, [r7, #28]
 8005d14:	f001 fc33 	bl	800757e <delete_children>

        /*Set i to the next node*/
        i = i_next;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <lv_obj_del+0x38>
    }

    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8005d22:	2200      	movs	r2, #0
 8005d24:	2113      	movs	r1, #19
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 f837 	bl	8006d9a <lv_event_send>

    lv_event_mark_deleted(obj);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 fca5 	bl	800767c <lv_event_mark_deleted>

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 f956 	bl	8006fe4 <lv_obj_get_parent>
 8005d38:	6138      	str	r0, [r7, #16]
    if(par == NULL) { /*It is a screen*/
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <lv_obj_del+0x8a>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 f915 	bl	8006f70 <lv_obj_get_disp>
 8005d46:	60f8      	str	r0, [r7, #12]
        lv_ll_rem(&d->scr_ll, obj);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3328      	adds	r3, #40	; 0x28
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f00d fc10 	bl	8013574 <lv_ll_rem>
 8005d54:	e005      	b.n	8005d62 <lv_obj_del+0x96>
    } else {
        lv_ll_rem(&(par->child_ll), obj);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f00d fc09 	bl	8013574 <lv_ll_rem>
    }

    /* Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005d62:	2000      	movs	r0, #0
 8005d64:	f00c fcde 	bl	8012724 <lv_indev_get_next>
 8005d68:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8005d6a:	e026      	b.n	8005dba <lv_obj_del+0xee>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d004      	beq.n	8005d80 <lv_obj_del+0xb4>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d102      	bne.n	8005d86 <lv_obj_del+0xba>
            lv_indev_reset(indev);
 8005d80:	69b8      	ldr	r0, [r7, #24]
 8005d82:	f7ff fbec 	bl	800555e <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d102      	bne.n	8005d96 <lv_obj_del+0xca>
            indev->proc.types.pointer.last_pressed = NULL;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2200      	movs	r2, #0
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
        }

#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d108      	bne.n	8005db2 <lv_obj_del+0xe6>
 8005da0:	f7ff fc94 	bl	80056cc <lv_indev_get_obj_act>
 8005da4:	4602      	mov	r2, r0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d102      	bne.n	8005db2 <lv_obj_del+0xe6>
            lv_indev_reset(indev);
 8005dac:	69b8      	ldr	r0, [r7, #24]
 8005dae:	f7ff fbd6 	bl	800555e <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f00c fcb6 	bl	8012724 <lv_indev_get_next>
 8005db8:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1d5      	bne.n	8005d6c <lv_obj_del+0xa0>
    }

    /* All children deleted.
     * Now clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <lv_obj_del+0x112>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f00d fe39 	bl	8013a50 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f00d fe36 	bl	8013a50 <lv_mem_free>

    /*Send a signal to the parent to notify it about the child delete*/
    if(par != NULL) {
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <lv_obj_del+0x12a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2101      	movs	r1, #1
 8005df2:	6938      	ldr	r0, [r7, #16]
 8005df4:	4798      	blx	r3
    }

    return LV_RES_INV;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <lv_obj_clean>:
/**
 * Delete all children of an object
 * @param obj pointer to an object
 */
void lv_obj_clean(lv_obj_t * obj)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f8f6 	bl	8006ffc <lv_obj_get_child>
 8005e10:	60f8      	str	r0, [r7, #12]
    lv_obj_t * child_next;
    while(child) {
 8005e12:	e009      	b.n	8005e28 <lv_obj_clean+0x28>
        /* Read the next child before deleting the current
         * because the next couldn't be read from a deleted (invalid) node*/
        child_next = lv_obj_get_child(obj, child);
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f8f0 	bl	8006ffc <lv_obj_get_child>
 8005e1c:	60b8      	str	r0, [r7, #8]
        lv_obj_del(child);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7ff ff54 	bl	8005ccc <lv_obj_del>
        child = child_next;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	60fb      	str	r3, [r7, #12]
    while(child) {
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f2      	bne.n	8005e14 <lv_obj_clean+0x14>
    }
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08a      	sub	sp, #40	; 0x28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_hidden(obj)) return;
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 f9c2 	bl	80071c8 <lv_obj_get_hidden>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d17e      	bne.n	8005f48 <lv_obj_invalidate+0x112>

    /*Invalidate the object only if it belongs to the 'LV_GC_ROOT(_lv_act_scr)'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 f87c 	bl	8006f48 <lv_obj_get_screen>
 8005e50:	61f8      	str	r0, [r7, #28]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005e52:	69f8      	ldr	r0, [r7, #28]
 8005e54:	f001 f88c 	bl	8006f70 <lv_obj_get_disp>
 8005e58:	61b8      	str	r0, [r7, #24]
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8005e5a:	69b8      	ldr	r0, [r7, #24]
 8005e5c:	f7ff f870 	bl	8004f40 <lv_disp_get_scr_act>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00d      	beq.n	8005e84 <lv_obj_invalidate+0x4e>
 8005e68:	69b8      	ldr	r0, [r7, #24]
 8005e6a:	f7ff f87e 	bl	8004f6a <lv_disp_get_layer_top>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d006      	beq.n	8005e84 <lv_obj_invalidate+0x4e>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8005e76:	69b8      	ldr	r0, [r7, #24]
 8005e78:	f7ff f88c 	bl	8004f94 <lv_disp_get_layer_sys>
 8005e7c:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d164      	bne.n	8005f4e <lv_obj_invalidate+0x118>
        /*Truncate recursively to the parents*/
        lv_area_t area_trunc;
        lv_obj_t * par = lv_obj_get_parent(obj);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 f8ad 	bl	8006fe4 <lv_obj_get_parent>
 8005e8a:	6278      	str	r0, [r7, #36]	; 0x24
        bool union_ok  = true;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /*Start with the original coordinates*/
        lv_coord_t ext_size = obj->ext_draw_pad;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005e96:	82fb      	strh	r3, [r7, #22]
        lv_area_copy(&area_trunc, &obj->coords);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f103 0210 	add.w	r2, r3, #16
 8005e9e:	f107 030c 	add.w	r3, r7, #12
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fc1d 	bl	80056e4 <lv_area_copy>
        area_trunc.x1 -= ext_size;
 8005eaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	8afb      	ldrh	r3, [r7, #22]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	81bb      	strh	r3, [r7, #12]
        area_trunc.y1 -= ext_size;
 8005eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	8afb      	ldrh	r3, [r7, #22]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b21b      	sxth	r3, r3
 8005ec8:	81fb      	strh	r3, [r7, #14]
        area_trunc.x2 += ext_size;
 8005eca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	8afb      	ldrh	r3, [r7, #22]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	823b      	strh	r3, [r7, #16]
        area_trunc.y2 += ext_size;
 8005eda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	8afb      	ldrh	r3, [r7, #22]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	827b      	strh	r3, [r7, #18]

        /*Check through all parents*/
        while(par != NULL) {
 8005eea:	e01d      	b.n	8005f28 <lv_obj_invalidate+0xf2>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	f103 0210 	add.w	r2, r3, #16
 8005ef2:	f107 010c 	add.w	r1, r7, #12
 8005ef6:	f107 030c 	add.w	r3, r7, #12
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00c ff4e 	bl	8012d9c <lv_area_intersect>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8005f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f0a:	f083 0301 	eor.w	r3, r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <lv_obj_invalidate+0xfa>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f16:	f001 f957 	bl	80071c8 <lv_obj_get_hidden>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <lv_obj_invalidate+0x116>

            par = lv_obj_get_parent(par);
 8005f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f22:	f001 f85f 	bl	8006fe4 <lv_obj_get_parent>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24
        while(par != NULL) {
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1de      	bne.n	8005eec <lv_obj_invalidate+0xb6>
 8005f2e:	e000      	b.n	8005f32 <lv_obj_invalidate+0xfc>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8005f30:	bf00      	nop
        }

        if(union_ok) lv_inv_area(disp, &area_trunc);
 8005f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <lv_obj_invalidate+0x118>
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4619      	mov	r1, r3
 8005f40:	69b8      	ldr	r0, [r7, #24]
 8005f42:	f001 fbfd 	bl	8007740 <lv_inv_area>
 8005f46:	e002      	b.n	8005f4e <lv_obj_invalidate+0x118>
    if(lv_obj_get_hidden(obj)) return;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <lv_obj_invalidate+0x118>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005f4c:	bf00      	nop
    }
}
 8005f4e:	3728      	adds	r7, #40	; 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <lv_obj_set_parent>:
 * Set a new parent for an object. Its relative position will be the same.
 * @param obj pointer to an object. Can't be a screen.
 * @param parent pointer to the new parent object. (Can't be NULL)
 */
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
    if(obj->par == NULL) {
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d036      	beq.n	8005fd4 <lv_obj_set_parent+0x80>
        LV_LOG_WARN("Can't set the parent of a screen");
        return;
    }

    if(parent == NULL) {
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d035      	beq.n	8005fd8 <lv_obj_set_parent+0x84>
        LV_LOG_WARN("Can't set parent == NULL to an object");
        return;
    }

    lv_obj_invalidate(obj);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff62 	bl	8005e36 <lv_obj_invalidate>

    lv_point_t old_pos;
    old_pos.x = lv_obj_get_x(obj);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f86e 	bl	8007054 <lv_obj_get_x>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	813b      	strh	r3, [r7, #8]
    old_pos.y = lv_obj_get_y(obj);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f882 	bl	8007086 <lv_obj_get_y>
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]

    lv_obj_t * old_par = obj->par;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]

    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	1d18      	adds	r0, r3, #4
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	2301      	movs	r3, #1
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	f00d fb44 	bl	8013626 <lv_ll_chg_list>
    obj->par = parent;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	601a      	str	r2, [r3, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8005fa4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005fa8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f840 	bl	8006034 <lv_obj_set_pos>

    /*Notify the original parent because one of its children is lost*/
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2101      	movs	r1, #1
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	4798      	blx	r3

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ff32 	bl	8005e36 <lv_obj_invalidate>
 8005fd2:	e002      	b.n	8005fda <lv_obj_set_parent+0x86>
        return;
 8005fd4:	bf00      	nop
 8005fd6:	e000      	b.n	8005fda <lv_obj_set_parent+0x86>
        return;
 8005fd8:	bf00      	nop
}
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fffb 	bl	8006fe4 <lv_obj_get_parent>
 8005fee:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00d fb6b 	bl	80136d0 <lv_ll_get_head>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d014      	beq.n	800602c <lv_obj_move_foreground+0x4c>

    lv_obj_invalidate(parent);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff ff17 	bl	8005e36 <lv_obj_invalidate>

    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1d18      	adds	r0, r3, #4
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	1d19      	adds	r1, r3, #4
 8006010:	2301      	movs	r3, #1
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f00d fb07 	bl	8013626 <lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	2101      	movs	r1, #1
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff ff06 	bl	8005e36 <lv_obj_invalidate>
 800602a:	e000      	b.n	800602e <lv_obj_move_foreground+0x4e>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800602c:	bf00      	nop
}
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
 8006040:	4613      	mov	r3, r2
 8006042:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->par;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	617b      	str	r3, [r7, #20]

    x = x + par->coords.x1;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006050:	b29a      	uxth	r2, r3
 8006052:	887b      	ldrh	r3, [r7, #2]
 8006054:	4413      	add	r3, r2
 8006056:	b29b      	uxth	r3, r3
 8006058:	807b      	strh	r3, [r7, #2]
    y = y + par->coords.y1;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006060:	b29a      	uxth	r2, r3
 8006062:	883b      	ldrh	r3, [r7, #0]
 8006064:	4413      	add	r3, r2
 8006066:	b29b      	uxth	r3, r3
 8006068:	803b      	strh	r3, [r7, #0]

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 800606a:	887a      	ldrh	r2, [r7, #2]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006072:	b29b      	uxth	r3, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	b21b      	sxth	r3, r3
 800607a:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 800607c:	883a      	ldrh	r2, [r7, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006084:	b29b      	uxth	r3, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	b21b      	sxth	r3, r3
 800608c:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 800608e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <lv_obj_set_pos+0x6a>
 8006096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d051      	beq.n	8006142 <lv_obj_set_pos+0x10e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fec9 	bl	8005e36 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80060a4:	f107 0308 	add.w	r3, r7, #8
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 ffc3 	bl	8007036 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4413      	add	r3, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	b21a      	sxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	b21a      	sxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b21a      	sxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006104:	b29b      	uxth	r3, r3
 8006106:	4413      	add	r3, r2
 8006108:	b29b      	uxth	r3, r3
 800610a:	b21a      	sxth	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8006110:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006114:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f9b6 	bl	800748c <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f107 0208 	add.w	r2, r7, #8
 8006128:	2102      	movs	r1, #2
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3

    /*Send a signal to the parent too*/
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	2101      	movs	r1, #1
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff fe7b 	bl	8005e36 <lv_obj_invalidate>
 8006140:	e000      	b.n	8006144 <lv_obj_set_pos+0x110>
    if(diff.x == 0 && diff.y == 0) return;
 8006142:	bf00      	nop
}
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 ff95 	bl	8007086 <lv_obj_get_y>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff ff64 	bl	8006034 <lv_obj_set_pos>
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ff67 	bl	8007054 <lv_obj_get_x>
 8006186:	4603      	mov	r3, r0
 8006188:	4619      	mov	r1, r3
 800618a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800618e:	461a      	mov	r2, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff4f 	bl	8006034 <lv_obj_set_pos>
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <lv_obj_set_size>:
 * @param obj pointer to an object
 * @param w new width
 * @param h new height
 */
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b086      	sub	sp, #24
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	807b      	strh	r3, [r7, #2]
 80061aa:	4613      	mov	r3, r2
 80061ac:	803b      	strh	r3, [r7, #0]

    /* Do nothing if the size is not changed */
    /* It is very important else recursive resizing can
     * occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 ff82 	bl	80070b8 <lv_obj_get_width>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <lv_obj_set_size+0x34>
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 ff87 	bl	80070d4 <lv_obj_get_height>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d05a      	beq.n	8006288 <lv_obj_set_size+0xea>
        return;
    }

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe2f 	bl	8005e36 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80061d8:	f107 0308 	add.w	r3, r7, #8
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 ff29 	bl	8007036 <lv_obj_get_coords>

    /*Set the length and height*/
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	887b      	ldrh	r3, [r7, #2]
 80061ee:	4413      	add	r3, r2
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	b21a      	sxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006202:	b29a      	uxth	r2, r3
 8006204:	883b      	ldrh	r3, [r7, #0]
 8006206:	4413      	add	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	b21a      	sxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	82da      	strh	r2, [r3, #22]

    /*Send a signal to the object with its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f107 0208 	add.w	r2, r7, #8
 800621c:	2102      	movs	r1, #2
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3

    /*Send a signal to the parent too*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fede 	bl	8006fe4 <lv_obj_get_parent>
 8006228:	6138      	str	r0, [r7, #16]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <lv_obj_set_size+0x9e>
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	2101      	movs	r1, #1
 8006238:	6938      	ldr	r0, [r7, #16]
 800623a:	4798      	blx	r3

    /*Tell the children the parent's size has changed*/
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f00d fa45 	bl	80136d0 <lv_ll_get_head>
 8006246:	6178      	str	r0, [r7, #20]
 8006248:	e00c      	b.n	8006264 <lv_obj_set_size+0xc6>
    {
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	2200      	movs	r2, #0
 8006250:	2103      	movs	r1, #3
 8006252:	6978      	ldr	r0, [r7, #20]
 8006254:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3304      	adds	r3, #4
 800625a:	6979      	ldr	r1, [r7, #20]
 800625c:	4618      	mov	r0, r3
 800625e:	f00d fa5d 	bl	801371c <lv_ll_get_next>
 8006262:	6178      	str	r0, [r7, #20]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ef      	bne.n	800624a <lv_obj_set_size+0xac>
    }

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fde3 	bl	8005e36 <lv_obj_invalidate>

    /*Automatically realign the object if required*/
#if LV_USE_OBJ_REALIGN
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <lv_obj_set_size+0xec>
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fca3 	bl	8006bcc <lv_obj_realign>
 8006286:	e000      	b.n	800628a <lv_obj_set_size+0xec>
        return;
 8006288:	bf00      	nop
#endif
}
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <lv_obj_set_width>:
 * Set the width of an object
 * @param obj pointer to an object
 * @param w new width
 */
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 ff19 	bl	80070d4 <lv_obj_get_height>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff76 	bl	800619e <lv_obj_set_size>
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <lv_obj_set_height>:
 * Set the height of an object
 * @param obj pointer to an object
 * @param h new height
 */
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fef6 	bl	80070b8 <lv_obj_get_width>
 80062cc:	4603      	mov	r3, r0
 80062ce:	4619      	mov	r1, r3
 80062d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff ff61 	bl	800619e <lv_obj_set_size>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	460b      	mov	r3, r1
 80062f4:	71fb      	strb	r3, [r7, #7]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 feaa 	bl	8007054 <lv_obj_get_x>
 8006300:	4603      	mov	r3, r0
 8006302:	83fb      	strh	r3, [r7, #30]
    lv_coord_t new_y = lv_obj_get_y(obj);
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 febe 	bl	8007086 <lv_obj_get_y>
 800630a:	4603      	mov	r3, r0
 800630c:	83bb      	strh	r3, [r7, #28]

    if(base == NULL) {
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <lv_obj_align+0x38>
        base = lv_obj_get_parent(obj);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fe65 	bl	8006fe4 <lv_obj_get_parent>
 800631a:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b14      	cmp	r3, #20
 8006320:	f200 81f9 	bhi.w	8006716 <lv_obj_align+0x432>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <lv_obj_align+0x48>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006381 	.word	0x08006381
 8006330:	080063d7 	.word	0x080063d7
 8006334:	080063e1 	.word	0x080063e1
 8006338:	08006411 	.word	0x08006411
 800633c:	08006431 	.word	0x08006431
 8006340:	08006451 	.word	0x08006451
 8006344:	08006497 	.word	0x08006497
 8006348:	080064cd 	.word	0x080064cd
 800634c:	080064fd 	.word	0x080064fd
 8006350:	08006543 	.word	0x08006543
 8006354:	08006559 	.word	0x08006559
 8006358:	08006595 	.word	0x08006595
 800635c:	080065c1 	.word	0x080065c1
 8006360:	080065d1 	.word	0x080065d1
 8006364:	08006607 	.word	0x08006607
 8006368:	0800662d 	.word	0x0800662d
 800636c:	08006643 	.word	0x08006643
 8006370:	0800667f 	.word	0x0800667f
 8006374:	080066ab 	.word	0x080066ab
 8006378:	080066bb 	.word	0x080066bb
 800637c:	080066f1 	.word	0x080066f1
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006380:	68b8      	ldr	r0, [r7, #8]
 8006382:	f000 fe99 	bl	80070b8 <lv_obj_get_width>
 8006386:	4603      	mov	r3, r0
 8006388:	0fda      	lsrs	r2, r3, #31
 800638a:	4413      	add	r3, r2
 800638c:	105b      	asrs	r3, r3, #1
 800638e:	b21b      	sxth	r3, r3
 8006390:	b29c      	uxth	r4, r3
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fe90 	bl	80070b8 <lv_obj_get_width>
 8006398:	4603      	mov	r3, r0
 800639a:	0fda      	lsrs	r2, r3, #31
 800639c:	4413      	add	r3, r2
 800639e:	105b      	asrs	r3, r3, #1
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	1ae3      	subs	r3, r4, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80063aa:	68b8      	ldr	r0, [r7, #8]
 80063ac:	f000 fe92 	bl	80070d4 <lv_obj_get_height>
 80063b0:	4603      	mov	r3, r0
 80063b2:	0fda      	lsrs	r2, r3, #31
 80063b4:	4413      	add	r3, r2
 80063b6:	105b      	asrs	r3, r3, #1
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	b29c      	uxth	r4, r3
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fe89 	bl	80070d4 <lv_obj_get_height>
 80063c2:	4603      	mov	r3, r0
 80063c4:	0fda      	lsrs	r2, r3, #31
 80063c6:	4413      	add	r3, r2
 80063c8:	105b      	asrs	r3, r3, #1
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	1ae3      	subs	r3, r4, r3
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	83bb      	strh	r3, [r7, #28]
            break;
 80063d4:	e19f      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	83bb      	strh	r3, [r7, #28]
            break;
 80063de:	e19a      	b.n	8006716 <lv_obj_align+0x432>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f000 fe69 	bl	80070b8 <lv_obj_get_width>
 80063e6:	4603      	mov	r3, r0
 80063e8:	0fda      	lsrs	r2, r3, #31
 80063ea:	4413      	add	r3, r2
 80063ec:	105b      	asrs	r3, r3, #1
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	b29c      	uxth	r4, r3
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fe60 	bl	80070b8 <lv_obj_get_width>
 80063f8:	4603      	mov	r3, r0
 80063fa:	0fda      	lsrs	r2, r3, #31
 80063fc:	4413      	add	r3, r2
 80063fe:	105b      	asrs	r3, r3, #1
 8006400:	b21b      	sxth	r3, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	1ae3      	subs	r3, r4, r3
 8006406:	b29b      	uxth	r3, r3
 8006408:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	83bb      	strh	r3, [r7, #28]
            break;
 800640e:	e182      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006410:	68b8      	ldr	r0, [r7, #8]
 8006412:	f000 fe51 	bl	80070b8 <lv_obj_get_width>
 8006416:	4603      	mov	r3, r0
 8006418:	b29c      	uxth	r4, r3
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fe4c 	bl	80070b8 <lv_obj_get_width>
 8006420:	4603      	mov	r3, r0
 8006422:	b29b      	uxth	r3, r3
 8006424:	1ae3      	subs	r3, r4, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	83bb      	strh	r3, [r7, #28]
            break;
 800642e:	e172      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006434:	68b8      	ldr	r0, [r7, #8]
 8006436:	f000 fe4d 	bl	80070d4 <lv_obj_get_height>
 800643a:	4603      	mov	r3, r0
 800643c:	b29c      	uxth	r4, r3
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fe48 	bl	80070d4 <lv_obj_get_height>
 8006444:	4603      	mov	r3, r0
 8006446:	b29b      	uxth	r3, r3
 8006448:	1ae3      	subs	r3, r4, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	83bb      	strh	r3, [r7, #28]
            break;
 800644e:	e162      	b.n	8006716 <lv_obj_align+0x432>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006450:	68b8      	ldr	r0, [r7, #8]
 8006452:	f000 fe31 	bl	80070b8 <lv_obj_get_width>
 8006456:	4603      	mov	r3, r0
 8006458:	0fda      	lsrs	r2, r3, #31
 800645a:	4413      	add	r3, r2
 800645c:	105b      	asrs	r3, r3, #1
 800645e:	b21b      	sxth	r3, r3
 8006460:	b29c      	uxth	r4, r3
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fe28 	bl	80070b8 <lv_obj_get_width>
 8006468:	4603      	mov	r3, r0
 800646a:	0fda      	lsrs	r2, r3, #31
 800646c:	4413      	add	r3, r2
 800646e:	105b      	asrs	r3, r3, #1
 8006470:	b21b      	sxth	r3, r3
 8006472:	b29b      	uxth	r3, r3
 8006474:	1ae3      	subs	r3, r4, r3
 8006476:	b29b      	uxth	r3, r3
 8006478:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800647a:	68b8      	ldr	r0, [r7, #8]
 800647c:	f000 fe2a 	bl	80070d4 <lv_obj_get_height>
 8006480:	4603      	mov	r3, r0
 8006482:	b29c      	uxth	r4, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fe25 	bl	80070d4 <lv_obj_get_height>
 800648a:	4603      	mov	r3, r0
 800648c:	b29b      	uxth	r3, r3
 800648e:	1ae3      	subs	r3, r4, r3
 8006490:	b29b      	uxth	r3, r3
 8006492:	83bb      	strh	r3, [r7, #28]
            break;
 8006494:	e13f      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f000 fe0e 	bl	80070b8 <lv_obj_get_width>
 800649c:	4603      	mov	r3, r0
 800649e:	b29c      	uxth	r4, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fe09 	bl	80070b8 <lv_obj_get_width>
 80064a6:	4603      	mov	r3, r0
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	1ae3      	subs	r3, r4, r3
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80064b0:	68b8      	ldr	r0, [r7, #8]
 80064b2:	f000 fe0f 	bl	80070d4 <lv_obj_get_height>
 80064b6:	4603      	mov	r3, r0
 80064b8:	b29c      	uxth	r4, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fe0a 	bl	80070d4 <lv_obj_get_height>
 80064c0:	4603      	mov	r3, r0
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	1ae3      	subs	r3, r4, r3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	83bb      	strh	r3, [r7, #28]
            break;
 80064ca:	e124      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	f000 fdff 	bl	80070d4 <lv_obj_get_height>
 80064d6:	4603      	mov	r3, r0
 80064d8:	0fda      	lsrs	r2, r3, #31
 80064da:	4413      	add	r3, r2
 80064dc:	105b      	asrs	r3, r3, #1
 80064de:	b21b      	sxth	r3, r3
 80064e0:	b29c      	uxth	r4, r3
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fdf6 	bl	80070d4 <lv_obj_get_height>
 80064e8:	4603      	mov	r3, r0
 80064ea:	0fda      	lsrs	r2, r3, #31
 80064ec:	4413      	add	r3, r2
 80064ee:	105b      	asrs	r3, r3, #1
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	1ae3      	subs	r3, r4, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	83bb      	strh	r3, [r7, #28]
            break;
 80064fa:	e10c      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f000 fddb 	bl	80070b8 <lv_obj_get_width>
 8006502:	4603      	mov	r3, r0
 8006504:	b29c      	uxth	r4, r3
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fdd6 	bl	80070b8 <lv_obj_get_width>
 800650c:	4603      	mov	r3, r0
 800650e:	b29b      	uxth	r3, r3
 8006510:	1ae3      	subs	r3, r4, r3
 8006512:	b29b      	uxth	r3, r3
 8006514:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006516:	68b8      	ldr	r0, [r7, #8]
 8006518:	f000 fddc 	bl	80070d4 <lv_obj_get_height>
 800651c:	4603      	mov	r3, r0
 800651e:	0fda      	lsrs	r2, r3, #31
 8006520:	4413      	add	r3, r2
 8006522:	105b      	asrs	r3, r3, #1
 8006524:	b21b      	sxth	r3, r3
 8006526:	b29c      	uxth	r4, r3
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fdd3 	bl	80070d4 <lv_obj_get_height>
 800652e:	4603      	mov	r3, r0
 8006530:	0fda      	lsrs	r2, r3, #31
 8006532:	4413      	add	r3, r2
 8006534:	105b      	asrs	r3, r3, #1
 8006536:	b21b      	sxth	r3, r3
 8006538:	b29b      	uxth	r3, r3
 800653a:	1ae3      	subs	r3, r4, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	83bb      	strh	r3, [r7, #28]
            break;
 8006540:	e0e9      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fdc4 	bl	80070d4 <lv_obj_get_height>
 800654c:	4603      	mov	r3, r0
 800654e:	b29b      	uxth	r3, r3
 8006550:	425b      	negs	r3, r3
 8006552:	b29b      	uxth	r3, r3
 8006554:	83bb      	strh	r3, [r7, #28]
            break;
 8006556:	e0de      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006558:	68b8      	ldr	r0, [r7, #8]
 800655a:	f000 fdad 	bl	80070b8 <lv_obj_get_width>
 800655e:	4603      	mov	r3, r0
 8006560:	0fda      	lsrs	r2, r3, #31
 8006562:	4413      	add	r3, r2
 8006564:	105b      	asrs	r3, r3, #1
 8006566:	b21b      	sxth	r3, r3
 8006568:	b29c      	uxth	r4, r3
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fda4 	bl	80070b8 <lv_obj_get_width>
 8006570:	4603      	mov	r3, r0
 8006572:	0fda      	lsrs	r2, r3, #31
 8006574:	4413      	add	r3, r2
 8006576:	105b      	asrs	r3, r3, #1
 8006578:	b21b      	sxth	r3, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	1ae3      	subs	r3, r4, r3
 800657e:	b29b      	uxth	r3, r3
 8006580:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fda6 	bl	80070d4 <lv_obj_get_height>
 8006588:	4603      	mov	r3, r0
 800658a:	b29b      	uxth	r3, r3
 800658c:	425b      	negs	r3, r3
 800658e:	b29b      	uxth	r3, r3
 8006590:	83bb      	strh	r3, [r7, #28]
            break;
 8006592:	e0c0      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f000 fd8f 	bl	80070b8 <lv_obj_get_width>
 800659a:	4603      	mov	r3, r0
 800659c:	b29c      	uxth	r4, r3
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fd8a 	bl	80070b8 <lv_obj_get_width>
 80065a4:	4603      	mov	r3, r0
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	1ae3      	subs	r3, r4, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fd90 	bl	80070d4 <lv_obj_get_height>
 80065b4:	4603      	mov	r3, r0
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	425b      	negs	r3, r3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	83bb      	strh	r3, [r7, #28]
            break;
 80065be:	e0aa      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 80065c4:	68b8      	ldr	r0, [r7, #8]
 80065c6:	f000 fd85 	bl	80070d4 <lv_obj_get_height>
 80065ca:	4603      	mov	r3, r0
 80065cc:	83bb      	strh	r3, [r7, #28]
            break;
 80065ce:	e0a2      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80065d0:	68b8      	ldr	r0, [r7, #8]
 80065d2:	f000 fd71 	bl	80070b8 <lv_obj_get_width>
 80065d6:	4603      	mov	r3, r0
 80065d8:	0fda      	lsrs	r2, r3, #31
 80065da:	4413      	add	r3, r2
 80065dc:	105b      	asrs	r3, r3, #1
 80065de:	b21b      	sxth	r3, r3
 80065e0:	b29c      	uxth	r4, r3
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fd68 	bl	80070b8 <lv_obj_get_width>
 80065e8:	4603      	mov	r3, r0
 80065ea:	0fda      	lsrs	r2, r3, #31
 80065ec:	4413      	add	r3, r2
 80065ee:	105b      	asrs	r3, r3, #1
 80065f0:	b21b      	sxth	r3, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	1ae3      	subs	r3, r4, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 80065fa:	68b8      	ldr	r0, [r7, #8]
 80065fc:	f000 fd6a 	bl	80070d4 <lv_obj_get_height>
 8006600:	4603      	mov	r3, r0
 8006602:	83bb      	strh	r3, [r7, #28]
            break;
 8006604:	e087      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006606:	68b8      	ldr	r0, [r7, #8]
 8006608:	f000 fd56 	bl	80070b8 <lv_obj_get_width>
 800660c:	4603      	mov	r3, r0
 800660e:	b29c      	uxth	r4, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fd51 	bl	80070b8 <lv_obj_get_width>
 8006616:	4603      	mov	r3, r0
 8006618:	b29b      	uxth	r3, r3
 800661a:	1ae3      	subs	r3, r4, r3
 800661c:	b29b      	uxth	r3, r3
 800661e:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f000 fd57 	bl	80070d4 <lv_obj_get_height>
 8006626:	4603      	mov	r3, r0
 8006628:	83bb      	strh	r3, [r7, #28]
            break;
 800662a:	e074      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -lv_obj_get_width(obj);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fd43 	bl	80070b8 <lv_obj_get_width>
 8006632:	4603      	mov	r3, r0
 8006634:	b29b      	uxth	r3, r3
 8006636:	425b      	negs	r3, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	83bb      	strh	r3, [r7, #28]
            break;
 8006640:	e069      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -lv_obj_get_width(obj);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fd38 	bl	80070b8 <lv_obj_get_width>
 8006648:	4603      	mov	r3, r0
 800664a:	b29b      	uxth	r3, r3
 800664c:	425b      	negs	r3, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006652:	68b8      	ldr	r0, [r7, #8]
 8006654:	f000 fd3e 	bl	80070d4 <lv_obj_get_height>
 8006658:	4603      	mov	r3, r0
 800665a:	0fda      	lsrs	r2, r3, #31
 800665c:	4413      	add	r3, r2
 800665e:	105b      	asrs	r3, r3, #1
 8006660:	b21b      	sxth	r3, r3
 8006662:	b29c      	uxth	r4, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fd35 	bl	80070d4 <lv_obj_get_height>
 800666a:	4603      	mov	r3, r0
 800666c:	0fda      	lsrs	r2, r3, #31
 800666e:	4413      	add	r3, r2
 8006670:	105b      	asrs	r3, r3, #1
 8006672:	b21b      	sxth	r3, r3
 8006674:	b29b      	uxth	r3, r3
 8006676:	1ae3      	subs	r3, r4, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	83bb      	strh	r3, [r7, #28]
            break;
 800667c:	e04b      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -lv_obj_get_width(obj);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fd1a 	bl	80070b8 <lv_obj_get_width>
 8006684:	4603      	mov	r3, r0
 8006686:	b29b      	uxth	r3, r3
 8006688:	425b      	negs	r3, r3
 800668a:	b29b      	uxth	r3, r3
 800668c:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800668e:	68b8      	ldr	r0, [r7, #8]
 8006690:	f000 fd20 	bl	80070d4 <lv_obj_get_height>
 8006694:	4603      	mov	r3, r0
 8006696:	b29c      	uxth	r4, r3
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fd1b 	bl	80070d4 <lv_obj_get_height>
 800669e:	4603      	mov	r3, r0
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	1ae3      	subs	r3, r4, r3
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	83bb      	strh	r3, [r7, #28]
            break;
 80066a8:	e035      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base);
 80066aa:	68b8      	ldr	r0, [r7, #8]
 80066ac:	f000 fd04 	bl	80070b8 <lv_obj_get_width>
 80066b0:	4603      	mov	r3, r0
 80066b2:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	83bb      	strh	r3, [r7, #28]
            break;
 80066b8:	e02d      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base);
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f000 fcfc 	bl	80070b8 <lv_obj_get_width>
 80066c0:	4603      	mov	r3, r0
 80066c2:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80066c4:	68b8      	ldr	r0, [r7, #8]
 80066c6:	f000 fd05 	bl	80070d4 <lv_obj_get_height>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0fda      	lsrs	r2, r3, #31
 80066ce:	4413      	add	r3, r2
 80066d0:	105b      	asrs	r3, r3, #1
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	b29c      	uxth	r4, r3
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fcfc 	bl	80070d4 <lv_obj_get_height>
 80066dc:	4603      	mov	r3, r0
 80066de:	0fda      	lsrs	r2, r3, #31
 80066e0:	4413      	add	r3, r2
 80066e2:	105b      	asrs	r3, r3, #1
 80066e4:	b21b      	sxth	r3, r3
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	1ae3      	subs	r3, r4, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	83bb      	strh	r3, [r7, #28]
            break;
 80066ee:	e012      	b.n	8006716 <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base);
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	f000 fce1 	bl	80070b8 <lv_obj_get_width>
 80066f6:	4603      	mov	r3, r0
 80066f8:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80066fa:	68b8      	ldr	r0, [r7, #8]
 80066fc:	f000 fcea 	bl	80070d4 <lv_obj_get_height>
 8006700:	4603      	mov	r3, r0
 8006702:	b29c      	uxth	r4, r3
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fce5 	bl	80070d4 <lv_obj_get_height>
 800670a:	4603      	mov	r3, r0
 800670c:	b29b      	uxth	r3, r3
 800670e:	1ae3      	subs	r3, r4, r3
 8006710:	b29b      	uxth	r3, r3
 8006712:	83bb      	strh	r3, [r7, #28]
            break;
 8006714:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fc64 	bl	8006fe4 <lv_obj_get_parent>
 800671c:	61b8      	str	r0, [r7, #24]
    lv_coord_t base_abs_x = base->coords.x1;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	8a1b      	ldrh	r3, [r3, #16]
 8006722:	82fb      	strh	r3, [r7, #22]
    lv_coord_t base_abs_y = base->coords.y1;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	8a5b      	ldrh	r3, [r3, #18]
 8006728:	82bb      	strh	r3, [r7, #20]
    lv_coord_t par_abs_x  = par->coords.x1;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	8a1b      	ldrh	r3, [r3, #16]
 800672e:	827b      	strh	r3, [r7, #18]
    lv_coord_t par_abs_y  = par->coords.y1;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	8a5b      	ldrh	r3, [r3, #18]
 8006734:	823b      	strh	r3, [r7, #16]
    new_x += x_mod + base_abs_x;
 8006736:	88ba      	ldrh	r2, [r7, #4]
 8006738:	8afb      	ldrh	r3, [r7, #22]
 800673a:	4413      	add	r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	8bfb      	ldrh	r3, [r7, #30]
 8006740:	4413      	add	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	83fb      	strh	r3, [r7, #30]
    new_y += y_mod + base_abs_y;
 8006746:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006748:	8abb      	ldrh	r3, [r7, #20]
 800674a:	4413      	add	r3, r2
 800674c:	b29a      	uxth	r2, r3
 800674e:	8bbb      	ldrh	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	b29b      	uxth	r3, r3
 8006754:	83bb      	strh	r3, [r7, #28]
    new_x -= par_abs_x;
 8006756:	8bfa      	ldrh	r2, [r7, #30]
 8006758:	8a7b      	ldrh	r3, [r7, #18]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	b29b      	uxth	r3, r3
 800675e:	83fb      	strh	r3, [r7, #30]
    new_y -= par_abs_y;
 8006760:	8bba      	ldrh	r2, [r7, #28]
 8006762:	8a3b      	ldrh	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	b29b      	uxth	r3, r3
 8006768:	83bb      	strh	r3, [r7, #28]

    lv_obj_set_pos(obj, new_x, new_y);
 800676a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800676e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006772:	4619      	mov	r1, r3
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fc5d 	bl	8006034 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	88ba      	ldrh	r2, [r7, #4]
 8006786:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800678c:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 0;
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800679a:	f36f 0341 	bfc	r3, #1, #1
 800679e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 80067a2:	bf00      	nop
 80067a4:	3724      	adds	r7, #36	; 0x24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	bf00      	nop

080067ac <lv_obj_align_origo>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	460b      	mov	r3, r1
 80067bc:	71fb      	strb	r3, [r7, #7]
 80067be:	4613      	mov	r3, r2
 80067c0:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fc46 	bl	8007054 <lv_obj_get_x>
 80067c8:	4603      	mov	r3, r0
 80067ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fc5a 	bl	8007086 <lv_obj_get_y>
 80067d2:	4603      	mov	r3, r0
 80067d4:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fc6e 	bl	80070b8 <lv_obj_get_width>
 80067dc:	4603      	mov	r3, r0
 80067de:	0fda      	lsrs	r2, r3, #31
 80067e0:	4413      	add	r3, r2
 80067e2:	105b      	asrs	r3, r3, #1
 80067e4:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fc74 	bl	80070d4 <lv_obj_get_height>
 80067ec:	4603      	mov	r3, r0
 80067ee:	0fda      	lsrs	r2, r3, #31
 80067f0:	4413      	add	r3, r2
 80067f2:	105b      	asrs	r3, r3, #1
 80067f4:	843b      	strh	r3, [r7, #32]

    if(base == NULL) {
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <lv_obj_align_origo+0x58>
        base = lv_obj_get_parent(obj);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fbf1 	bl	8006fe4 <lv_obj_get_parent>
 8006802:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b14      	cmp	r3, #20
 8006808:	f200 8195 	bhi.w	8006b36 <lv_obj_align_origo+0x38a>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <lv_obj_align_origo+0x68>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006869 	.word	0x08006869
 8006818:	0800689f 	.word	0x0800689f
 800681c:	080068b1 	.word	0x080068b1
 8006820:	080068d5 	.word	0x080068d5
 8006824:	080068f1 	.word	0x080068f1
 8006828:	0800690d 	.word	0x0800690d
 800682c:	0800693b 	.word	0x0800693b
 8006830:	08006961 	.word	0x08006961
 8006834:	08006985 	.word	0x08006985
 8006838:	080069b3 	.word	0x080069b3
 800683c:	080069c5 	.word	0x080069c5
 8006840:	080069e9 	.word	0x080069e9
 8006844:	08006a05 	.word	0x08006a05
 8006848:	08006a21 	.word	0x08006a21
 800684c:	08006a4f 	.word	0x08006a4f
 8006850:	08006a75 	.word	0x08006a75
 8006854:	08006a87 	.word	0x08006a87
 8006858:	08006aab 	.word	0x08006aab
 800685c:	08006ac7 	.word	0x08006ac7
 8006860:	08006ae3 	.word	0x08006ae3
 8006864:	08006b11 	.word	0x08006b11
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f000 fc25 	bl	80070b8 <lv_obj_get_width>
 800686e:	4603      	mov	r3, r0
 8006870:	0fda      	lsrs	r2, r3, #31
 8006872:	4413      	add	r3, r2
 8006874:	105b      	asrs	r3, r3, #1
 8006876:	b21b      	sxth	r3, r3
 8006878:	b29a      	uxth	r2, r3
 800687a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f000 fc26 	bl	80070d4 <lv_obj_get_height>
 8006888:	4603      	mov	r3, r0
 800688a:	0fda      	lsrs	r2, r3, #31
 800688c:	4413      	add	r3, r2
 800688e:	105b      	asrs	r3, r3, #1
 8006890:	b21b      	sxth	r3, r3
 8006892:	b29a      	uxth	r2, r3
 8006894:	8c3b      	ldrh	r3, [r7, #32]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	b29b      	uxth	r3, r3
 800689a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800689c:	e14b      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 800689e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068a0:	425b      	negs	r3, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80068a6:	8c3b      	ldrh	r3, [r7, #32]
 80068a8:	425b      	negs	r3, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068ae:	e142      	b.n	8006b36 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80068b0:	68b8      	ldr	r0, [r7, #8]
 80068b2:	f000 fc01 	bl	80070b8 <lv_obj_get_width>
 80068b6:	4603      	mov	r3, r0
 80068b8:	0fda      	lsrs	r2, r3, #31
 80068ba:	4413      	add	r3, r2
 80068bc:	105b      	asrs	r3, r3, #1
 80068be:	b21b      	sxth	r3, r3
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80068ca:	8c3b      	ldrh	r3, [r7, #32]
 80068cc:	425b      	negs	r3, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068d2:	e130      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80068d4:	68b8      	ldr	r0, [r7, #8]
 80068d6:	f000 fbef 	bl	80070b8 <lv_obj_get_width>
 80068da:	4603      	mov	r3, r0
 80068dc:	b29a      	uxth	r2, r3
 80068de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80068e6:	8c3b      	ldrh	r3, [r7, #32]
 80068e8:	425b      	negs	r3, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068ee:	e122      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 80068f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f2:	425b      	negs	r3, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f000 fbeb 	bl	80070d4 <lv_obj_get_height>
 80068fe:	4603      	mov	r3, r0
 8006900:	b29a      	uxth	r2, r3
 8006902:	8c3b      	ldrh	r3, [r7, #32]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	b29b      	uxth	r3, r3
 8006908:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800690a:	e114      	b.n	8006b36 <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800690c:	68b8      	ldr	r0, [r7, #8]
 800690e:	f000 fbd3 	bl	80070b8 <lv_obj_get_width>
 8006912:	4603      	mov	r3, r0
 8006914:	0fda      	lsrs	r2, r3, #31
 8006916:	4413      	add	r3, r2
 8006918:	105b      	asrs	r3, r3, #1
 800691a:	b21b      	sxth	r3, r3
 800691c:	b29a      	uxth	r2, r3
 800691e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	b29b      	uxth	r3, r3
 8006924:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f000 fbd4 	bl	80070d4 <lv_obj_get_height>
 800692c:	4603      	mov	r3, r0
 800692e:	b29a      	uxth	r2, r3
 8006930:	8c3b      	ldrh	r3, [r7, #32]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	b29b      	uxth	r3, r3
 8006936:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006938:	e0fd      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	f000 fbbc 	bl	80070b8 <lv_obj_get_width>
 8006940:	4603      	mov	r3, r0
 8006942:	b29a      	uxth	r2, r3
 8006944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	b29b      	uxth	r3, r3
 800694a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f000 fbc1 	bl	80070d4 <lv_obj_get_height>
 8006952:	4603      	mov	r3, r0
 8006954:	b29a      	uxth	r2, r3
 8006956:	8c3b      	ldrh	r3, [r7, #32]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	b29b      	uxth	r3, r3
 800695c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800695e:	e0ea      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8006960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006962:	425b      	negs	r3, r3
 8006964:	b29b      	uxth	r3, r3
 8006966:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006968:	68b8      	ldr	r0, [r7, #8]
 800696a:	f000 fbb3 	bl	80070d4 <lv_obj_get_height>
 800696e:	4603      	mov	r3, r0
 8006970:	0fda      	lsrs	r2, r3, #31
 8006972:	4413      	add	r3, r2
 8006974:	105b      	asrs	r3, r3, #1
 8006976:	b21b      	sxth	r3, r3
 8006978:	b29a      	uxth	r2, r3
 800697a:	8c3b      	ldrh	r3, [r7, #32]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006982:	e0d8      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006984:	68b8      	ldr	r0, [r7, #8]
 8006986:	f000 fb97 	bl	80070b8 <lv_obj_get_width>
 800698a:	4603      	mov	r3, r0
 800698c:	b29a      	uxth	r2, r3
 800698e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f000 fb9c 	bl	80070d4 <lv_obj_get_height>
 800699c:	4603      	mov	r3, r0
 800699e:	0fda      	lsrs	r2, r3, #31
 80069a0:	4413      	add	r3, r2
 80069a2:	105b      	asrs	r3, r3, #1
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	8c3b      	ldrh	r3, [r7, #32]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069b0:	e0c1      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 80069b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069b4:	425b      	negs	r3, r3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069ba:	8c3b      	ldrh	r3, [r7, #32]
 80069bc:	425b      	negs	r3, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069c2:	e0b8      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f000 fb77 	bl	80070b8 <lv_obj_get_width>
 80069ca:	4603      	mov	r3, r0
 80069cc:	0fda      	lsrs	r2, r3, #31
 80069ce:	4413      	add	r3, r2
 80069d0:	105b      	asrs	r3, r3, #1
 80069d2:	b21b      	sxth	r3, r3
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069de:	8c3b      	ldrh	r3, [r7, #32]
 80069e0:	425b      	negs	r3, r3
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069e6:	e0a6      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	f000 fb65 	bl	80070b8 <lv_obj_get_width>
 80069ee:	4603      	mov	r3, r0
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069fa:	8c3b      	ldrh	r3, [r7, #32]
 80069fc:	425b      	negs	r3, r3
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a02:	e098      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8006a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a06:	425b      	negs	r3, r3
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f000 fb61 	bl	80070d4 <lv_obj_get_height>
 8006a12:	4603      	mov	r3, r0
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	8c3b      	ldrh	r3, [r7, #32]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a1e:	e08a      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f000 fb49 	bl	80070b8 <lv_obj_get_width>
 8006a26:	4603      	mov	r3, r0
 8006a28:	0fda      	lsrs	r2, r3, #31
 8006a2a:	4413      	add	r3, r2
 8006a2c:	105b      	asrs	r3, r3, #1
 8006a2e:	b21b      	sxth	r3, r3
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f000 fb4a 	bl	80070d4 <lv_obj_get_height>
 8006a40:	4603      	mov	r3, r0
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	8c3b      	ldrh	r3, [r7, #32]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a4c:	e073      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f000 fb32 	bl	80070b8 <lv_obj_get_width>
 8006a54:	4603      	mov	r3, r0
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a60:	68b8      	ldr	r0, [r7, #8]
 8006a62:	f000 fb37 	bl	80070d4 <lv_obj_get_height>
 8006a66:	4603      	mov	r3, r0
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	8c3b      	ldrh	r3, [r7, #32]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a72:	e060      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8006a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a76:	425b      	negs	r3, r3
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8006a7c:	8c3b      	ldrh	r3, [r7, #32]
 8006a7e:	425b      	negs	r3, r3
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a84:	e057      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8006a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a88:	425b      	negs	r3, r3
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006a8e:	68b8      	ldr	r0, [r7, #8]
 8006a90:	f000 fb20 	bl	80070d4 <lv_obj_get_height>
 8006a94:	4603      	mov	r3, r0
 8006a96:	0fda      	lsrs	r2, r3, #31
 8006a98:	4413      	add	r3, r2
 8006a9a:	105b      	asrs	r3, r3, #1
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	8c3b      	ldrh	r3, [r7, #32]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006aa8:	e045      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8006aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aac:	425b      	negs	r3, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006ab2:	68b8      	ldr	r0, [r7, #8]
 8006ab4:	f000 fb0e 	bl	80070d4 <lv_obj_get_height>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	8c3b      	ldrh	r3, [r7, #32]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006ac4:	e037      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006ac6:	68b8      	ldr	r0, [r7, #8]
 8006ac8:	f000 faf6 	bl	80070b8 <lv_obj_get_width>
 8006acc:	4603      	mov	r3, r0
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8006ad8:	8c3b      	ldrh	r3, [r7, #32]
 8006ada:	425b      	negs	r3, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006ae0:	e029      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006ae2:	68b8      	ldr	r0, [r7, #8]
 8006ae4:	f000 fae8 	bl	80070b8 <lv_obj_get_width>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f000 faed 	bl	80070d4 <lv_obj_get_height>
 8006afa:	4603      	mov	r3, r0
 8006afc:	0fda      	lsrs	r2, r3, #31
 8006afe:	4413      	add	r3, r2
 8006b00:	105b      	asrs	r3, r3, #1
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	8c3b      	ldrh	r3, [r7, #32]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006b0e:	e012      	b.n	8006b36 <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b10:	68b8      	ldr	r0, [r7, #8]
 8006b12:	f000 fad1 	bl	80070b8 <lv_obj_get_width>
 8006b16:	4603      	mov	r3, r0
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006b22:	68b8      	ldr	r0, [r7, #8]
 8006b24:	f000 fad6 	bl	80070d4 <lv_obj_get_height>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	8c3b      	ldrh	r3, [r7, #32]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006b34:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fa54 	bl	8006fe4 <lv_obj_get_parent>
 8006b3c:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	8a1b      	ldrh	r3, [r3, #16]
 8006b42:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	8a5b      	ldrh	r3, [r3, #18]
 8006b48:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	8a1b      	ldrh	r3, [r3, #16]
 8006b4e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	8a5b      	ldrh	r3, [r3, #18]
 8006b54:	82bb      	strh	r3, [r7, #20]
    new_x += x_mod + base_abs_x;
 8006b56:	88ba      	ldrh	r2, [r7, #4]
 8006b58:	8b7b      	ldrh	r3, [r7, #26]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b60:	4413      	add	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_mod + base_abs_y;
 8006b66:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006b68:	8b3b      	ldrh	r3, [r7, #24]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b70:	4413      	add	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 8006b76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b78:	8afb      	ldrh	r3, [r7, #22]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 8006b80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b82:	8abb      	ldrh	r3, [r7, #20]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_obj_set_pos(obj, new_x, new_y);
 8006b8a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006b8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff fa4d 	bl	8006034 <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	79fa      	ldrb	r2, [r7, #7]
 8006b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	88ba      	ldrh	r2, [r7, #4]
 8006ba6:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 1;
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8006bba:	f043 0302 	orr.w	r3, r3, #2
 8006bbe:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 8006bc2:	bf00      	nop
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop

08006bcc <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    if(obj->realign.origo_align)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <lv_obj_realign+0x3a>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fdd4 	bl	80067ac <lv_obj_align_origo>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8006c04:	e00f      	b.n	8006c26 <lv_obj_realign+0x5a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fb5f 	bl	80062e4 <lv_obj_align>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <lv_obj_set_style>:
 * Set a new style for an object
 * @param obj pointer to an object
 * @param style_p pointer to the new style
 */
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
    obj->style_p = style;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28

    /*Send a signal about style change to every children with NULL style*/
    refresh_children_style(obj);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc71 	bl	8007526 <refresh_children_style>

    /*Notify the object about the style change too*/
    lv_obj_refresh_style(obj);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f804 	bl	8006c52 <lv_obj_refresh_style>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <lv_obj_refresh_style>:
/**
 * Notify an object about its style is modified
 * @param obj pointer to an object
 */
void lv_obj_refresh_style(lv_obj_t * obj)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f8eb 	bl	8005e36 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2104      	movs	r1, #4
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f8e2 	bl	8005e36 <lv_obj_invalidate>
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
    obj->click = (en == true ? 1 : 0);
 8006c86:	78f9      	ldrb	r1, [r7, #3]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006c8e:	f361 0300 	bfi	r3, r1, #0, #1
 8006c92:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <lv_obj_set_drag>:
 * Enable the dragging of an object
 * @param obj pointer to an object
 * @param en true: make the object dragable
 */
void lv_obj_set_drag(lv_obj_t * obj, bool en)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <lv_obj_set_drag+0x1a>
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff ffdf 	bl	8006c7a <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 8006cbc:	78f9      	ldrb	r1, [r7, #3]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006cc4:	f361 0341 	bfi	r3, r1, #1, #1
 8006cc8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <lv_obj_set_drag_throw>:
 * Enable the throwing of an object after is is dragged
 * @param obj pointer to an object
 * @param en true: enable the drag throw
 */
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
    obj->drag_throw = (en == true ? 1 : 0);
 8006ce0:	78f9      	ldrb	r1, [r7, #3]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006ce8:	f361 0382 	bfi	r3, r1, #2, #1
 8006cec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <lv_obj_set_parent_event>:
 * Propagate the events to the parent too
 * @param obj pointer to an object
 * @param en true: enable the event propagation
 */
void lv_obj_set_parent_event(lv_obj_t * obj, bool en)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
    obj->parent_event = (en == true ? 1 : 0);
 8006d08:	78f9      	ldrb	r1, [r7, #3]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006d10:	f361 13c7 	bfi	r3, r1, #7, #1
 8006d14:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <lv_obj_set_protect>:
 * Set a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
    obj->protect |= prot;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <lv_obj_clear_protect>:
 * Clear a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
    prot = (~prot) & 0xFF;
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	70fb      	strb	r3, [r7, #3]
    obj->protect &= prot;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <lv_obj_set_event_cb>:
 * Used by the user to react on event which happens with the object.
 * @param obj pointer to an object
 * @param event_cb the new event function
 */
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
    obj->event_cb = event_cb;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	619a      	str	r2, [r3, #24]
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	460b      	mov	r3, r1
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <lv_event_send+0x18>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e009      	b.n	8006dc6 <lv_event_send+0x2c>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6998      	ldr	r0, [r3, #24]
 8006db6:	7afa      	ldrb	r2, [r7, #11]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	f000 f808 	bl	8006dd0 <lv_event_send_func>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75fb      	strb	r3, [r7, #23]
    return res;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	71fb      	strb	r3, [r7, #7]
    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 8006de4:	2300      	movs	r3, #0
 8006de6:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <lv_event_send_func+0xcc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <lv_event_send_func+0x2a>
        event_temp_data.prev = event_temp_data_head;
 8006df4:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <lv_event_send_func+0xcc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006dfa:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <lv_event_send_func+0xcc>)
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 8006e02:	4b27      	ldr	r3, [pc, #156]	; (8006ea0 <lv_event_send_func+0xd0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 8006e08:	4a25      	ldr	r2, [pc, #148]	; (8006ea0 <lv_event_send_func+0xd0>)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8006e0e:	f7fe fb89 	bl	8005524 <lv_indev_get_act>
 8006e12:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <lv_event_send_func+0x5e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <lv_event_send_func+0x5e>
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	79f9      	ldrb	r1, [r7, #7]
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <lv_event_send_func+0x6e>
 8006e34:	79fa      	ldrb	r2, [r7, #7]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	68b8      	ldr	r0, [r7, #8]
 8006e3c:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 8006e3e:	4a18      	ldr	r2, [pc, #96]	; (8006ea0 <lv_event_send_func+0xd0>)
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 8006e44:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <lv_event_send_func+0xcc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <lv_event_send_func+0xcc>)
 8006e4c:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 8006e4e:	7d3b      	ldrb	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <lv_event_send_func+0x88>
        return LV_RES_INV;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e01d      	b.n	8006e94 <lv_event_send_func+0xc4>
    }

    if(obj) {
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d019      	beq.n	8006e92 <lv_event_send_func+0xc2>
        if(obj->parent_event && obj->par) {
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d011      	beq.n	8006e92 <lv_event_send_func+0xc2>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00d      	beq.n	8006e92 <lv_event_send_func+0xc2>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	79f9      	ldrb	r1, [r7, #7]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff ff8b 	bl	8006d9a <lv_event_send>
 8006e84:	4603      	mov	r3, r0
 8006e86:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 8006e88:	7ffb      	ldrb	r3, [r7, #31]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d001      	beq.n	8006e92 <lv_event_send_func+0xc2>
                return LV_RES_INV;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <lv_event_send_func+0xc4>
            }
        }
    }

    return LV_RES_OK;
 8006e92:	2301      	movs	r3, #1
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20002a5c 	.word	0x20002a5c
 8006ea0:	20002a60 	.word	0x20002a60

08006ea4 <lv_event_get_data>:
/**
 * Get the `data` parameter of the current event
 * @return the `data` parameter
 */
const void * lv_event_get_data(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
    return event_act_data;
 8006ea8:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <lv_event_get_data+0x14>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20002a60 	.word	0x20002a60

08006ebc <lv_obj_set_signal_cb>:
 * Always call the previous signal function in the new.
 * @param obj pointer to an object
 * @param cb the new signal function
 */
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
    obj->signal_cb = signal_cb;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	61da      	str	r2, [r3, #28]
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <lv_obj_set_design_cb>:
 * Set a new design function for an object
 * @param obj pointer to an object
 * @param design_cb the new design function
 */
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
    obj->design_cb = design_cb;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	621a      	str	r2, [r3, #32]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <lv_obj_allocate_ext_attr>:
 * @param obj pointer to an object
 * @param ext_size the size of the new ext. data
 * @return Normal pointer to the allocated ext
 */
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	887a      	ldrh	r2, [r7, #2]
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f00c fdc9 	bl	8013aa0 <lv_mem_realloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

    return (void *)obj->ext_attr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <lv_obj_refresh_ext_draw_pad>:
/**
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
    obj->ext_draw_pad = 0;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	869a      	strh	r2, [r3, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2105      	movs	r1, #5
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fe ff7b 	bl	8005e36 <lv_obj_invalidate>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
    const lv_obj_t * par = obj;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f000 f843 	bl	8006fe4 <lv_obj_get_parent>
 8006f5e:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f6      	bne.n	8006f54 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_p;
 8006f66:	68bb      	ldr	r3, [r7, #8]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    const lv_obj_t * scr;

    if(obj->par == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <lv_obj_get_disp+0x16>
        scr = obj; /*`obj` is a screen*/
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e003      	b.n	8006f8e <lv_obj_get_disp+0x1e>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff ffde 	bl	8006f48 <lv_obj_get_screen>
 8006f8c:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006f8e:	4814      	ldr	r0, [pc, #80]	; (8006fe0 <lv_obj_get_disp+0x70>)
 8006f90:	f00c fb9e 	bl	80136d0 <lv_ll_get_head>
 8006f94:	6138      	str	r0, [r7, #16]
 8006f96:	e01b      	b.n	8006fd0 <lv_obj_get_disp+0x60>
    {
        lv_obj_t * s;
        LV_LL_READ(d->scr_ll, s)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3328      	adds	r3, #40	; 0x28
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f00c fb97 	bl	80136d0 <lv_ll_get_head>
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	e00c      	b.n	8006fc0 <lv_obj_get_disp+0x50>
        {
            if(s == scr) return d;
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d101      	bne.n	8006fb2 <lv_obj_get_disp+0x42>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	e012      	b.n	8006fd8 <lv_obj_get_disp+0x68>
        LV_LL_READ(d->scr_ll, s)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3328      	adds	r3, #40	; 0x28
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f00c fbaf 	bl	801371c <lv_ll_get_next>
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1ef      	bne.n	8006fa6 <lv_obj_get_disp+0x36>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006fc6:	6939      	ldr	r1, [r7, #16]
 8006fc8:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <lv_obj_get_disp+0x70>)
 8006fca:	f00c fba7 	bl	801371c <lv_ll_get_next>
 8006fce:	6138      	str	r0, [r7, #16]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e0      	bne.n	8006f98 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20006db0 	.word	0x20006db0

08006fe4 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    return obj->par;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
    lv_obj_t * result = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <lv_obj_get_child+0x22>
        result = lv_ll_get_head(&obj->child_ll);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f00c fb5b 	bl	80136d0 <lv_ll_get_head>
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	e006      	b.n	800702c <lv_obj_get_child+0x30>
    } else {
        result = lv_ll_get_next(&obj->child_ll, child);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f00c fb79 	bl	801371c <lv_ll_get_next>
 800702a:	60f8      	str	r0, [r7, #12]
    }

    return result;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
    lv_area_copy(cords_p, &obj->coords);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3310      	adds	r3, #16
 8007044:	4619      	mov	r1, r3
 8007046:	6838      	ldr	r0, [r7, #0]
 8007048:	f7fe fb4c 	bl	80056e4 <lv_area_copy>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff ffc1 	bl	8006fe4 <lv_obj_get_parent>
 8007062:	60f8      	str	r0, [r7, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007072:	b29b      	uxth	r3, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	b29b      	uxth	r3, r3
 8007078:	817b      	strh	r3, [r7, #10]

    return rel_x;
 800707a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ffa8 	bl	8006fe4 <lv_obj_get_parent>
 8007094:	60f8      	str	r0, [r7, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	817b      	strh	r3, [r7, #10]

    return rel_y;
 80070ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    return lv_area_get_width(&obj->coords);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3310      	adds	r3, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fb1b 	bl	8005700 <lv_area_get_width>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    return lv_area_get_height(&obj->coords);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3310      	adds	r3, #16
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fb24 	bl	800572e <lv_area_get_height>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <lv_obj_get_auto_realign>:
 * Get the automatic realign property of the object.
 * @param obj pointer to an object
 * @return  true: auto realign is enabled; false: auto realign is disabled
 */
bool lv_obj_get_auto_realign(lv_obj_t * obj)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    return obj->realign.auto_realign ? true : false;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
#else
    (void)obj;
    return false;
#endif
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <lv_obj_get_style>:
 * Get the style pointer of an object (if NULL get style of the parent)
 * @param obj pointer to an object
 * @return pointer to a style
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
    const lv_style_t * style_act = obj->style_p;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	617b      	str	r3, [r7, #20]
    if(style_act == NULL) {
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d12c      	bne.n	8007186 <lv_obj_get_style+0x6e>
        lv_obj_t * par = obj->par;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	613b      	str	r3, [r7, #16]

        while(par) {
 8007132:	e025      	b.n	8007180 <lv_obj_get_style+0x68>
            if(par->style_p) {
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01e      	beq.n	800717a <lv_obj_get_style+0x62>
                if(par->style_p->glass == 0) {
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d116      	bne.n	800717a <lv_obj_get_style+0x62>
#if LV_USE_GROUP == 0
                    style_act = par->style_p;
#else
                    /*If a parent is focused then use then focused style*/
                    lv_group_t * g = lv_obj_get_group(par);
 800714c:	6938      	ldr	r0, [r7, #16]
 800714e:	f000 f8aa 	bl	80072a6 <lv_obj_get_group>
 8007152:	60f8      	str	r0, [r7, #12]
                    if(lv_group_get_focused(g) == par) {
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7fe f888 	bl	800526a <lv_group_get_focused>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4293      	cmp	r3, r2
 8007160:	d107      	bne.n	8007172 <lv_obj_get_style+0x5a>
                        style_act = lv_group_mod_style(g, par->style_p);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	4619      	mov	r1, r3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7fe f84e 	bl	800520a <lv_group_mod_style>
 800716e:	6178      	str	r0, [r7, #20]
                    } else {
                        style_act = par->style_p;
                    }
#endif
                    break;
 8007170:	e009      	b.n	8007186 <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	617b      	str	r3, [r7, #20]
                    break;
 8007178:	e005      	b.n	8007186 <lv_obj_get_style+0x6e>
                }
            }
            par = par->par;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]
        while(par) {
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1d6      	bne.n	8007134 <lv_obj_get_style+0x1c>
        }
    }
#if LV_USE_GROUP
    if(obj->group_p) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <lv_obj_get_style+0x96>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe f869 	bl	800526a <lv_group_get_focused>
 8007198:	4602      	mov	r2, r0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4293      	cmp	r3, r2
 800719e:	d106      	bne.n	80071ae <lv_obj_get_style+0x96>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe f82f 	bl	800520a <lv_group_mod_style>
 80071ac:	6178      	str	r0, [r7, #20]
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <lv_obj_get_style+0xa0>
 80071b4:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <lv_obj_get_style+0xac>)
 80071b6:	617b      	str	r3, [r7, #20]

    return style_act;
 80071b8:	697b      	ldr	r3, [r7, #20]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20006c68 	.word	0x20006c68

080071c8 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    return obj->hidden == 0 ? false : true;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bf14      	ite	ne
 80071e0:	2301      	movne	r3, #1
 80071e2:	2300      	moveq	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <lv_obj_get_opa_scale>:
 * Get the opa scale parameter of an object
 * @param obj pointer to an object
 * @return opa scale [0..255]
 */
lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
    const lv_obj_t * parent = obj;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]

    while(parent) {
 80071fe:	e00f      	b.n	8007220 <lv_obj_get_opa_scale+0x2e>
        if(parent->opa_scale_en) return parent->opa_scale;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <lv_obj_get_opa_scale+0x26>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007216:	e007      	b.n	8007228 <lv_obj_get_opa_scale+0x36>
        parent = lv_obj_get_parent(parent);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fee3 	bl	8006fe4 <lv_obj_get_parent>
 800721e:	60f8      	str	r0, [r7, #12]
    while(parent) {
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ec      	bne.n	8007200 <lv_obj_get_opa_scale+0xe>
    }

    return LV_OPA_COVER;
 8007226:	23ff      	movs	r3, #255	; 0xff
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
    return (obj->protect & prot) == 0 ? false : true;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	4013      	ands	r3, r2
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <lv_obj_get_signal_cb>:
 * Get the signal function of an object
 * @param obj pointer to an object
 * @return the signal function
 */
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    return obj->signal_cb;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <lv_obj_get_design_cb>:
 * Get the design function of an object
 * @param obj pointer to an object
 * @return the design function
 */
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
    return obj->design_cb;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <lv_obj_get_ext_attr>:
 * @param obj pointer to an object
 * @return the ext pointer but not the dynamic version
 *         Use it as ext->data1, and NOT da(ext)->data1
 */
void * lv_obj_get_ext_attr(const lv_obj_t * obj)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
    return obj->ext_attr;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
    return obj->group_p;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
    if(obj->group_p) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <lv_obj_is_focused+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fd ffc9 	bl	800526a <lv_group_get_focused>
 80072d8:	4602      	mov	r2, r0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4293      	cmp	r3, r2
 80072de:	d101      	bne.n	80072e4 <lv_obj_is_focused+0x26>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <lv_obj_is_focused+0x28>
    }

    return false;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return true/false, depends on 'mode'
 */
static bool lv_obj_design(lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode)
{
 80072ee:	b590      	push	{r4, r7, lr}
 80072f0:	b08b      	sub	sp, #44	; 0x2c
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d16a      	bne.n	80073d8 <lv_obj_design+0xea>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3310      	adds	r3, #16
 8007306:	4619      	mov	r1, r3
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f00b fe32 	bl	8012f72 <lv_area_is_in>
 800730e:	4603      	mov	r3, r0
 8007310:	f083 0301 	eor.w	r3, r3, #1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <lv_obj_design+0x30>
 800731a:	2300      	movs	r3, #0
 800731c:	e070      	b.n	8007400 <lv_obj_design+0x112>

        /*Can cover the area only if fully solid (no opacity)*/
        const lv_style_t * style = lv_obj_get_style(obj);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fefa 	bl	8007118 <lv_obj_get_style>
 8007324:	6238      	str	r0, [r7, #32]
        if(style->body.opa < LV_OPA_MAX) return false;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	7a1b      	ldrb	r3, [r3, #8]
 800732a:	2bfa      	cmp	r3, #250	; 0xfa
 800732c:	d801      	bhi.n	8007332 <lv_obj_design+0x44>
 800732e:	2300      	movs	r3, #0
 8007330:	e066      	b.n	8007400 <lv_obj_design+0x112>

        /* Because of the radius it is not sure the area is covered
         * Check the areas where there is no radius*/
        lv_coord_t r = style->body.radius;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	88db      	ldrh	r3, [r3, #6]
 8007336:	83fb      	strh	r3, [r7, #30]

        if(r == LV_RADIUS_CIRCLE) return false;
 8007338:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800733c:	f647 4218 	movw	r2, #31768	; 0x7c18
 8007340:	4293      	cmp	r3, r2
 8007342:	d101      	bne.n	8007348 <lv_obj_design+0x5a>
 8007344:	2300      	movs	r3, #0
 8007346:	e05b      	b.n	8007400 <lv_obj_design+0x112>

        lv_area_t area_tmp;

        /*Check horizontally without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8007348:	f107 0314 	add.w	r3, r7, #20
 800734c:	4619      	mov	r1, r3
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fe71 	bl	8007036 <lv_obj_get_coords>
        area_tmp.x1 += r;
 8007354:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007358:	b29a      	uxth	r2, r3
 800735a:	8bfb      	ldrh	r3, [r7, #30]
 800735c:	4413      	add	r3, r2
 800735e:	b29b      	uxth	r3, r3
 8007360:	b21b      	sxth	r3, r3
 8007362:	82bb      	strh	r3, [r7, #20]
        area_tmp.x2 -= r;
 8007364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007368:	b29a      	uxth	r2, r3
 800736a:	8bfb      	ldrh	r3, [r7, #30]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	b29b      	uxth	r3, r3
 8007370:	b21b      	sxth	r3, r3
 8007372:	833b      	strh	r3, [r7, #24]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4619      	mov	r1, r3
 800737a:	68b8      	ldr	r0, [r7, #8]
 800737c:	f00b fdf9 	bl	8012f72 <lv_area_is_in>
 8007380:	4603      	mov	r3, r0
 8007382:	f083 0301 	eor.w	r3, r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <lv_obj_design+0xa2>
 800738c:	2300      	movs	r3, #0
 800738e:	e037      	b.n	8007400 <lv_obj_design+0x112>

        /*Check vertically without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4619      	mov	r1, r3
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fe4d 	bl	8007036 <lv_obj_get_coords>
        area_tmp.y1 += r;
 800739c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	8bfb      	ldrh	r3, [r7, #30]
 80073a4:	4413      	add	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b21b      	sxth	r3, r3
 80073aa:	82fb      	strh	r3, [r7, #22]
        area_tmp.y2 -= r;
 80073ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	8bfb      	ldrh	r3, [r7, #30]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	b21b      	sxth	r3, r3
 80073ba:	837b      	strh	r3, [r7, #26]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4619      	mov	r1, r3
 80073c2:	68b8      	ldr	r0, [r7, #8]
 80073c4:	f00b fdd5 	bl	8012f72 <lv_area_is_in>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f083 0301 	eor.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d014      	beq.n	80073fe <lv_obj_design+0x110>
 80073d4:	2300      	movs	r3, #0
 80073d6:	e013      	b.n	8007400 <lv_obj_design+0x112>

    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <lv_obj_design+0x110>
        const lv_style_t * style = lv_obj_get_style(obj);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff fe9a 	bl	8007118 <lv_obj_get_style>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f103 0410 	add.w	r4, r3, #16
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff ff00 	bl	80071f2 <lv_obj_get_opa_scale>
 80073f2:	4603      	mov	r3, r0
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f005 fbfc 	bl	800cbf6 <lv_draw_rect>
    }

    return true;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	372c      	adds	r7, #44	; 0x2c
 8007404:	46bd      	mov	sp, r7
 8007406:	bd90      	pop	{r4, r7, pc}

08007408 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	460b      	mov	r3, r1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	72fb      	strb	r3, [r7, #11]
    (void)param;

    lv_res_t res = LV_RES_OK;
 8007416:	2301      	movs	r3, #1
 8007418:	77fb      	strb	r3, [r7, #31]

    const lv_style_t * style = lv_obj_get_style(obj);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7ff fe7c 	bl	8007118 <lv_obj_get_style>
 8007420:	61b8      	str	r0, [r7, #24]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d109      	bne.n	800743c <lv_obj_signal+0x34>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8007428:	2101      	movs	r1, #1
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff ff00 	bl	8007230 <lv_obj_is_protected>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d022      	beq.n	800747c <lv_obj_signal+0x74>
 8007436:	2300      	movs	r3, #0
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e01f      	b.n	800747c <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b05      	cmp	r3, #5
 8007440:	d10d      	bne.n	800745e <lv_obj_signal+0x56>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800744e:	429a      	cmp	r2, r3
 8007450:	dd14      	ble.n	800747c <lv_obj_signal+0x74>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	869a      	strh	r2, [r3, #52]	; 0x34
 800745c:	e00e      	b.n	800747c <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	2b04      	cmp	r3, #4
 8007462:	d103      	bne.n	800746c <lv_obj_signal+0x64>
        lv_obj_refresh_ext_draw_pad(obj);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fd5b 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
 800746a:	e007      	b.n	800747c <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800746c:	7afb      	ldrb	r3, [r7, #11]
 800746e:	2b06      	cmp	r3, #6
 8007470:	d104      	bne.n	800747c <lv_obj_signal+0x74>
        lv_obj_type_t * buf = param;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	617b      	str	r3, [r7, #20]
        buf->type[0]        = "lv_obj";
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4a03      	ldr	r2, [pc, #12]	; (8007488 <lv_obj_signal+0x80>)
 800747a:	601a      	str	r2, [r3, #0]
    }

    return res;
 800747c:	7ffb      	ldrb	r3, [r7, #31]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	08029bf8 	.word	0x08029bf8

0800748c <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f00c f915 	bl	80136d0 <lv_ll_get_head>
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	e036      	b.n	8007518 <refresh_children_position+0x8c>
    {
        i->coords.x1 += x_diff;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	887b      	ldrh	r3, [r7, #2]
 80074b4:	4413      	add	r3, r2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b21a      	sxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	883b      	ldrh	r3, [r7, #0]
 80074c8:	4413      	add	r3, r2
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b21a      	sxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	4413      	add	r3, r2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	883b      	ldrh	r3, [r7, #0]
 80074f0:	4413      	add	r3, r2
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	b21a      	sxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 80074fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80074fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007502:	4619      	mov	r1, r3
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff ffc1 	bl	800748c <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	4618      	mov	r0, r3
 8007512:	f00c f903 	bl	801371c <lv_ll_get_next>
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1c5      	bne.n	80074aa <refresh_children_position+0x1e>
    }
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800752e:	2100      	movs	r1, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fd63 	bl	8006ffc <lv_obj_get_child>
 8007536:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8007538:	e01a      	b.n	8007570 <refresh_children_style+0x4a>
        if(child->style_p == NULL) {
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff ffef 	bl	8007526 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff fb82 	bl	8006c52 <lv_obj_refresh_style>
 800754e:	e00a      	b.n	8007566 <refresh_children_style+0x40>
        } else if(child->style_p->glass) {
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <refresh_children_style+0x40>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff ffe0 	bl	8007526 <refresh_children_style>
        }
        child = lv_obj_get_child(obj, child);
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fd47 	bl	8006ffc <lv_obj_get_child>
 800756e:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e1      	bne.n	800753a <refresh_children_style+0x14>
    }
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b088      	sub	sp, #32
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f00c f8a0 	bl	80136d0 <lv_ll_get_head>
 8007590:	61f8      	str	r0, [r7, #28]

    /*Remove from the group; remove before transversing children so that
     * the object still has access to all children during the
     * LV_SIGNAL_DEFOCUS call*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fe87 	bl	80072a6 <lv_obj_get_group>
 8007598:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00f      	beq.n	80075c0 <delete_children+0x42>
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fd fd68 	bl	8005076 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 80075a6:	e00b      	b.n	80075c0 <delete_children+0x42>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	69f9      	ldr	r1, [r7, #28]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f00c f8b4 	bl	801371c <lv_ll_get_next>
 80075b4:	60f8      	str	r0, [r7, #12]

        /*Call the recursive del to the child too*/
        delete_children(i);
 80075b6:	69f8      	ldr	r0, [r7, #28]
 80075b8:	f7ff ffe1 	bl	800757e <delete_children>

        /*Set i to the next node*/
        i = i_next;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <delete_children+0x2a>
    }

    /*Let the suer free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80075c6:	2200      	movs	r2, #0
 80075c8:	2113      	movs	r1, #19
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff fbe5 	bl	8006d9a <lv_event_send>

    lv_event_mark_deleted(obj);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f853 	bl	800767c <lv_event_mark_deleted>

    /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 80075d6:	2100      	movs	r1, #0
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f00b f963 	bl	80128a4 <lv_anim_del>
#endif

    /* Reset the input devices if
     * the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80075de:	2000      	movs	r0, #0
 80075e0:	f00b f8a0 	bl	8012724 <lv_indev_get_next>
 80075e4:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80075e6:	e026      	b.n	8007636 <delete_children+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d004      	beq.n	80075fc <delete_children+0x7e>
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d102      	bne.n	8007602 <delete_children+0x84>
            lv_indev_reset(indev);
 80075fc:	69b8      	ldr	r0, [r7, #24]
 80075fe:	f7fd ffae 	bl	800555e <lv_indev_reset>
        }

        if(indev->proc.types.pointer.last_pressed == obj) {
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d102      	bne.n	8007612 <delete_children+0x94>
            indev->proc.types.pointer.last_pressed = NULL;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
        }
#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	429a      	cmp	r2, r3
 800761a:	d108      	bne.n	800762e <delete_children+0xb0>
 800761c:	f7fe f856 	bl	80056cc <lv_indev_get_obj_act>
 8007620:	4602      	mov	r2, r0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4293      	cmp	r3, r2
 8007626:	d102      	bne.n	800762e <delete_children+0xb0>
            lv_indev_reset(indev);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f7fd ff98 	bl	800555e <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 800762e:	69b8      	ldr	r0, [r7, #24]
 8007630:	f00b f878 	bl	8012724 <lv_indev_get_next>
 8007634:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1d5      	bne.n	80075e8 <delete_children+0x6a>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fcd1 	bl	8006fe4 <lv_obj_get_parent>
 8007642:	6138      	str	r0, [r7, #16]
    lv_ll_rem(&(par->child_ll), obj);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3304      	adds	r3, #4
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4618      	mov	r0, r3
 800764c:	f00b ff92 	bl	8013574 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <delete_children+0xf0>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	4618      	mov	r0, r3
 800766a:	f00c f9f1 	bl	8013a50 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f00c f9ee 	bl	8013a50 <lv_mem_free>
}
 8007674:	bf00      	nop
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <lv_event_mark_deleted>:

static void lv_event_mark_deleted(lv_obj_t * obj)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    lv_event_temp_data_t * t = event_temp_data_head;
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <lv_event_mark_deleted+0x38>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]

    while(t) {
 800768a:	e00a      	b.n	80076a2 <lv_event_mark_deleted+0x26>
        if(t->obj == obj) t->deleted = true;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d102      	bne.n	800769c <lv_event_mark_deleted+0x20>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	711a      	strb	r2, [r3, #4]
        t = t->prev;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60fb      	str	r3, [r7, #12]
    while(t) {
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f1      	bne.n	800768c <lv_event_mark_deleted+0x10>
    }
}
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	20002a5c 	.word	0x20002a5c

080076b8 <lv_area_copy>:
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80076c2:	2208      	movs	r2, #8
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f01f fd6a 	bl	80271a0 <memcpy>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <lv_area_get_width>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3301      	adds	r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	b21b      	sxth	r3, r3
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <lv_area_get_height>:
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007718:	b29b      	uxth	r3, r3
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	b29b      	uxth	r3, r3
 800771e:	3301      	adds	r3, #1
 8007720:	b29b      	uxth	r3, r3
 8007722:	b21b      	sxth	r3, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <lv_inv_area+0x16>
 8007750:	f00a ff2a 	bl	80125a8 <lv_disp_get_default>
 8007754:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 809b 	beq.w	8007894 <lv_inv_area+0x154>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <lv_inv_area+0x34>
        disp->inv_p = 0;
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800776a:	f36f 0309 	bfc	r3, #0, #10
 800776e:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
        return;
 8007772:	e092      	b.n	800789a <lv_inv_area+0x15a>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f00a ff1f 	bl	80125c0 <lv_disp_get_hor_res>
 8007782:	4603      	mov	r3, r0
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	b21b      	sxth	r3, r3
 800778c:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f00a ff37 	bl	8012602 <lv_disp_get_ver_res>
 8007794:	4603      	mov	r3, r0
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	b21b      	sxth	r3, r3
 800779e:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 80077a0:	f107 0214 	add.w	r2, r7, #20
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f00b faf6 	bl	8012d9c <lv_area_intersect>
 80077b0:	4603      	mov	r3, r0
 80077b2:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 80077b4:	7f7b      	ldrb	r3, [r7, #29]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d06f      	beq.n	800789a <lv_inv_area+0x15a>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <lv_inv_area+0x94>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	4a36      	ldr	r2, [pc, #216]	; (80078a0 <lv_inv_area+0x160>)
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	4610      	mov	r0, r2
 80077cc:	f107 020c 	add.w	r2, r7, #12
 80077d0:	4611      	mov	r1, r2
 80077d2:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 80077d4:	2300      	movs	r3, #0
 80077d6:	83fb      	strh	r3, [r7, #30]
 80077d8:	e010      	b.n	80077fc <lv_inv_area+0xbc>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 80077da:	8bfb      	ldrh	r3, [r7, #30]
 80077dc:	3308      	adds	r3, #8
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	441a      	add	r2, r3
 80077e4:	f107 030c 	add.w	r3, r7, #12
 80077e8:	4611      	mov	r1, r2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f00b fbc1 	bl	8012f72 <lv_area_is_in>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d150      	bne.n	8007898 <lv_inv_area+0x158>
        for(i = 0; i < disp->inv_p; i++) {
 80077f6:	8bfb      	ldrh	r3, [r7, #30]
 80077f8:	3301      	adds	r3, #1
 80077fa:	83fb      	strh	r3, [r7, #30]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	4293      	cmp	r3, r2
 800780e:	d3e4      	bcc.n	80077da <lv_inv_area+0x9a>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b1f      	cmp	r3, #31
 800781e:	d810      	bhi.n	8007842 <lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800782a:	b29b      	uxth	r3, r3
 800782c:	3308      	adds	r3, #8
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	f107 020c 	add.w	r2, r7, #12
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ff3c 	bl	80076b8 <lv_area_copy>
 8007840:	e016      	b.n	8007870 <lv_inv_area+0x130>
        } else { /*If no place for the area add the screen*/
            disp->inv_p = 0;
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007848:	f36f 0309 	bfc	r3, #0, #10
 800784c:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785a:	b29b      	uxth	r3, r3
 800785c:	3308      	adds	r3, #8
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	f107 0214 	add.w	r2, r7, #20
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ff24 	bl	80076b8 <lv_area_copy>
        }
        disp->inv_p++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	3301      	adds	r3, #1
 800787e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007882:	b299      	uxth	r1, r3
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 800788a:	f361 0309 	bfi	r3, r1, #0, #10
 800788e:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
 8007892:	e002      	b.n	800789a <lv_inv_area+0x15a>
    if(!disp) return;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <lv_inv_area+0x15a>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8007898:	bf00      	nop
    }
}
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20002a68 	.word	0x20002a68

080078a4 <lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * lv_refr_get_disp_refreshing(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
    return disp_refr;
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <lv_refr_get_disp_refreshing+0x14>)
 80078aa:	681b      	ldr	r3, [r3, #0]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20002a68 	.word	0x20002a68

080078bc <lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void lv_disp_refr_task(lv_task_t * task)
{
 80078bc:	b5b0      	push	{r4, r5, r7, lr}
 80078be:	b08a      	sub	sp, #40	; 0x28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 80078c4:	f00a ff5e 	bl	8012784 <lv_tick_get>
 80078c8:	61f8      	str	r0, [r7, #28]

    disp_refr = task->user_data;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4a6c      	ldr	r2, [pc, #432]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 80078d0:	6013      	str	r3, [r2, #0]

    lv_refr_join_area();
 80078d2:	f000 f8d9 	bl	8007a88 <lv_refr_join_area>

    lv_refr_areas();
 80078d6:	f000 f973 	bl	8007bc0 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 80078da:	4b69      	ldr	r3, [pc, #420]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80078e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80c2 	beq.w	8007a72 <lv_disp_refr_task+0x1b6>
        /*In true double buffered mode copy the refreshed areas to the new VDB to keep it up to
         * date*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80078ee:	4b64      	ldr	r3, [pc, #400]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f00a fef5 	bl	80126e2 <lv_disp_is_true_double_buf>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 808b 	beq.w	8007a16 <lv_disp_refr_task+0x15a>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007900:	4b5f      	ldr	r3, [pc, #380]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	f00a fec9 	bl	801269c <lv_disp_get_buf>
 800790a:	61b8      	str	r0, [r7, #24]

            /*Flush the content of the VDB*/
            lv_refr_vdb_flush();
 800790c:	f000 fc5e 	bl	80081cc <lv_refr_vdb_flush>

            /* With true double buffering the flushing should be only the address change of the
             * current frame buffer. Wait until the address change is ready and copy the changed
             * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
            while(vdb->flushing)
 8007910:	bf00      	nop
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f8      	bne.n	8007912 <lv_disp_refr_task+0x56>
                ;

            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	617b      	str	r3, [r7, #20]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d102      	bne.n	8007938 <lv_disp_refr_task+0x7c>
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	e001      	b.n	800793c <lv_disp_refr_task+0x80>
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]

            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800793e:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f00a fe3c 	bl	80125c0 <lv_disp_get_hor_res>
 8007948:	4603      	mov	r3, r0
 800794a:	81fb      	strh	r3, [r7, #14]
            uint16_t a;
            for(a = 0; a < disp_refr->inv_p; a++) {
 800794c:	2300      	movs	r3, #0
 800794e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007950:	e056      	b.n	8007a00 <lv_disp_refr_task+0x144>
                if(disp_refr->inv_area_joined[a] == 0) {
 8007952:	4b4b      	ldr	r3, [pc, #300]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007958:	4413      	add	r3, r2
 800795a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800795e:	2b00      	cmp	r3, #0
 8007960:	d14b      	bne.n	80079fa <lv_disp_refr_task+0x13e>
                    lv_coord_t y;
                    uint32_t start_offs =
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8007962:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007966:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800796c:	3308      	adds	r3, #8
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	440b      	add	r3, r1
 8007972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007976:	fb03 f302 	mul.w	r3, r3, r2
 800797a:	4a41      	ldr	r2, [pc, #260]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8007980:	3108      	adds	r1, #8
 8007982:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8007986:	4413      	add	r3, r2
                    uint32_t start_offs =
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	623b      	str	r3, [r7, #32]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800798c:	4b3c      	ldr	r3, [pc, #240]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007992:	3308      	adds	r3, #8
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4413      	add	r3, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fe9b 	bl	80076d4 <lv_area_get_width>
 800799e:	4603      	mov	r3, r0
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	60bb      	str	r3, [r7, #8]

                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80079a4:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079aa:	3308      	adds	r3, #8
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	4413      	add	r3, r2
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079b4:	e015      	b.n	80079e2 <lv_disp_refr_task+0x126>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	18d0      	adds	r0, r2, r3
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	4413      	add	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	4619      	mov	r1, r3
 80079c6:	f01f fbeb 	bl	80271a0 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 80079ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	4413      	add	r3, r2
 80079d4:	623b      	str	r3, [r7, #32]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80079d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	b29b      	uxth	r3, r3
 80079e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079e2:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079e8:	3308      	adds	r3, #8
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	4413      	add	r3, r2
 80079ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80079f2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80079f6:	429a      	cmp	r2, r3
 80079f8:	dddd      	ble.n	80079b6 <lv_disp_refr_task+0xfa>
            for(a = 0; a < disp_refr->inv_p; a++) {
 80079fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079fc:	3301      	adds	r3, #1
 80079fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a00:	4b1f      	ldr	r3, [pc, #124]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d39d      	bcc.n	8007952 <lv_disp_refr_task+0x96>
                }
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007a16:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3340      	adds	r3, #64	; 0x40
 8007a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f01f fbc7 	bl	80271b6 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a30:	2220      	movs	r2, #32
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f01f fbbe 	bl	80271b6 <memset>
        disp_refr->inv_p = 0;
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007a42:	f36f 0309 	bfc	r3, #0, #10
 8007a46:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00e      	beq.n	8007a72 <lv_disp_refr_task+0x1b6>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699c      	ldr	r4, [r3, #24]
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <lv_disp_refr_task+0x1c4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461d      	mov	r5, r3
 8007a60:	69f8      	ldr	r0, [r7, #28]
 8007a62:	f00a fea9 	bl	80127b8 <lv_tick_elaps>
 8007a66:	4601      	mov	r1, r0
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <lv_disp_refr_task+0x1c8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47a0      	blx	r4
        }
    }

    lv_draw_free_buf();
 8007a72:	f000 fec3 	bl	80087fc <lv_draw_free_buf>

    LV_LOG_TRACE("lv_refr_task: ready");
}
 8007a76:	bf00      	nop
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20002a68 	.word	0x20002a68
 8007a84:	20002a64 	.word	0x20002a64

08007a88 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 8007a88:	b5b0      	push	{r4, r5, r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	e083      	b.n	8007b9c <lv_refr_join_area+0x114>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007a94:	4b49      	ldr	r3, [pc, #292]	; (8007bbc <lv_refr_join_area+0x134>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d176      	bne.n	8007b94 <lv_refr_join_area+0x10c>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	e067      	b.n	8007b7c <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8007aac:	4b43      	ldr	r3, [pc, #268]	; (8007bbc <lv_refr_join_area+0x134>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d158      	bne.n	8007b70 <lv_refr_join_area+0xe8>
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d054      	beq.n	8007b70 <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007ac6:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <lv_refr_join_area+0x134>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3308      	adds	r3, #8
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	18d0      	adds	r0, r2, r3
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <lv_refr_join_area+0x134>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	4413      	add	r3, r2
 8007ade:	4619      	mov	r1, r3
 8007ae0:	f00b fa19 	bl	8012f16 <lv_area_is_on>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f083 0301 	eor.w	r3, r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d141      	bne.n	8007b74 <lv_refr_join_area+0xec>
                continue;
            }

            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007af0:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <lv_refr_join_area+0x134>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3308      	adds	r3, #8
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	18d1      	adds	r1, r2, r3
 8007afc:	4b2f      	ldr	r3, [pc, #188]	; (8007bbc <lv_refr_join_area+0x134>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3308      	adds	r3, #8
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	441a      	add	r2, r3
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f00b f997 	bl	8012e3e <lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007b10:	463b      	mov	r3, r7
 8007b12:	4618      	mov	r0, r3
 8007b14:	f00b f921 	bl	8012d5a <lv_area_get_size>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4b28      	ldr	r3, [pc, #160]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3308      	adds	r3, #8
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	4413      	add	r3, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f00b f917 	bl	8012d5a <lv_area_get_size>
 8007b2c:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3308      	adds	r3, #8
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	4413      	add	r3, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f00b f90d 	bl	8012d5a <lv_area_get_size>
 8007b40:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007b42:	442b      	add	r3, r5
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d216      	bcs.n	8007b76 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007b48:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4413      	add	r3, r2
 8007b54:	463a      	mov	r2, r7
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fdad 	bl	80076b8 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <lv_refr_join_area+0xee>
                continue;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <lv_refr_join_area+0xee>
                continue;
 8007b74:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d38c      	bcc.n	8007aac <lv_refr_join_area+0x24>
 8007b92:	e000      	b.n	8007b96 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007b94:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <lv_refr_join_area+0x134>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f4ff af70 	bcc.w	8007a94 <lv_refr_join_area+0xc>
            }
        }
    }
}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bdb0      	pop	{r4, r5, r7, pc}
 8007bbc:	20002a68 	.word	0x20002a68

08007bc0 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
    px_num = 0;
 8007bc6:	4b1f      	ldr	r3, [pc, #124]	; (8007c44 <lv_refr_areas+0x84>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < disp_refr->inv_p; i++) {
 8007bcc:	2300      	movs	r3, #0
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e028      	b.n	8007c24 <lv_refr_areas+0x64>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 8007bd2:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <lv_refr_areas+0x88>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11c      	bne.n	8007c1e <lv_refr_areas+0x5e>

            lv_refr_area(&disp_refr->inv_areas[i]);
 8007be4:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <lv_refr_areas+0x88>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3308      	adds	r3, #8
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	4413      	add	r3, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f82b 	bl	8007c4c <lv_refr_area>

            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <lv_refr_areas+0x88>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00e      	beq.n	8007c1e <lv_refr_areas+0x5e>
 8007c00:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <lv_refr_areas+0x88>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3308      	adds	r3, #8
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f00b f8a4 	bl	8012d5a <lv_area_get_size>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <lv_refr_areas+0x84>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4413      	add	r3, r2
 8007c1a:	4a0a      	ldr	r2, [pc, #40]	; (8007c44 <lv_refr_areas+0x84>)
 8007c1c:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3301      	adds	r3, #1
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <lv_refr_areas+0x88>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d3cb      	bcc.n	8007bd2 <lv_refr_areas+0x12>
        }
    }
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20002a64 	.word	0x20002a64
 8007c48:	20002a68 	.word	0x20002a68

08007c4c <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b08d      	sub	sp, #52	; 0x34
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007c54:	4b7f      	ldr	r3, [pc, #508]	; (8007e54 <lv_refr_area+0x208>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f00a fd42 	bl	80126e2 <lv_disp_is_true_double_buf>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d027      	beq.n	8007cb4 <lv_refr_area+0x68>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c64:	4b7b      	ldr	r3, [pc, #492]	; (8007e54 <lv_refr_area+0x208>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f00a fd17 	bl	801269c <lv_disp_get_buf>
 8007c6e:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2200      	movs	r2, #0
 8007c74:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007c76:	4b77      	ldr	r3, [pc, #476]	; (8007e54 <lv_refr_area+0x208>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f00a fca0 	bl	80125c0 <lv_disp_get_hor_res>
 8007c80:	4603      	mov	r3, r0
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	b21a      	sxth	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2200      	movs	r2, #0
 8007c92:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007c94:	4b6f      	ldr	r3, [pc, #444]	; (8007e54 <lv_refr_area+0x208>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f00a fcb2 	bl	8012602 <lv_disp_get_ver_res>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	b21a      	sxth	r2, r3
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	82da      	strh	r2, [r3, #22]
        lv_refr_area_part(area_p);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8d3 	bl	8007e58 <lv_refr_area_part>
 8007cb2:	e0cb      	b.n	8007e4c <lv_refr_area+0x200>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007cb4:	4b67      	ldr	r3, [pc, #412]	; (8007e54 <lv_refr_area+0x208>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f00a fcef 	bl	801269c <lv_disp_get_buf>
 8007cbe:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fd07 	bl	80076d4 <lv_area_get_width>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fd19 	bl	8007702 <lv_area_get_height>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8007cda:	4b5e      	ldr	r3, [pc, #376]	; (8007e54 <lv_refr_area+0x208>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f00a fc8f 	bl	8012602 <lv_disp_get_ver_res>
 8007ce4:	4603      	mov	r3, r0
        lv_coord_t y2 =
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	db0c      	blt.n	8007d04 <lv_refr_area+0xb8>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007cea:	4b5a      	ldr	r3, [pc, #360]	; (8007e54 <lv_refr_area+0x208>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f00a fc87 	bl	8012602 <lv_disp_get_ver_res>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	837b      	strh	r3, [r7, #26]
        lv_coord_t y2 =
 8007cfe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007d02:	e002      	b.n	8007d0a <lv_refr_area+0xbe>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007d0a:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 8007d1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	dd02      	ble.n	8007d2a <lv_refr_area+0xde>
 8007d24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 8007d2a:	4b4a      	ldr	r3, [pc, #296]	; (8007e54 <lv_refr_area+0x208>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d034      	beq.n	8007d9e <lv_refr_area+0x152>
            lv_area_t tmp;
            tmp.x1 = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	81fb      	strh	r3, [r7, #14]

            lv_coord_t y_tmp = max_row - 1;
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = y_tmp;
 8007d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d4c:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007d4e:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <lv_refr_area+0x208>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	4a3f      	ldr	r2, [pc, #252]	; (8007e54 <lv_refr_area+0x208>)
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f107 020c 	add.w	r2, r7, #12
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fccb 	bl	8007702 <lv_area_get_height>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	4293      	cmp	r3, r2
 8007d74:	da0a      	bge.n	8007d8c <lv_refr_area+0x140>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                y_tmp--;
 8007d76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(y_tmp != 0);
 8007d82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1df      	bne.n	8007d4a <lv_refr_area+0xfe>
 8007d8a:	e000      	b.n	8007d8e <lv_refr_area+0x142>
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007d8c:	bf00      	nop

            if(y_tmp == 0) {
 8007d8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d059      	beq.n	8007e4a <lv_refr_area+0x1fe>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            } else {
                max_row = tmp.y2 + 1;
 8007d96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007da8:	e02c      	b.n	8007e04 <lv_refr_area+0x1b8>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007dc2:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dca:	4413      	add	r3, r2
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	b21a      	sxth	r2, r3
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007dde:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	da02      	bge.n	8007dec <lv_refr_area+0x1a0>
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	8b7a      	ldrh	r2, [r7, #26]
 8007dea:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	8adb      	ldrh	r3, [r3, #22]
 8007df0:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_refr_area_part(area_p);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f830 	bl	8007e58 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dfe:	4413      	add	r3, r2
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	853b      	strh	r3, [r7, #40]	; 0x28
 8007e04:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	4413      	add	r3, r2
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	ddc9      	ble.n	8007daa <lv_refr_area+0x15e>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 8007e16:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007e1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d014      	beq.n	8007e4c <lv_refr_area+0x200>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007e3a:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	8b7a      	ldrh	r2, [r7, #26]
 8007e40:	82da      	strh	r2, [r3, #22]

            /*Refresh this part too*/
            lv_refr_area_part(area_p);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f808 	bl	8007e58 <lv_refr_area_part>
 8007e48:	e000      	b.n	8007e4c <lv_refr_area+0x200>
                return;
 8007e4a:	bf00      	nop
        }
    }
}
 8007e4c:	3734      	adds	r7, #52	; 0x34
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20002a68 	.word	0x20002a68

08007e58 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007e60:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f00a fc19 	bl	801269c <lv_disp_get_buf>
 8007e6a:	6178      	str	r0, [r7, #20]

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8007e6c:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f00a fc1f 	bl	80126b4 <lv_disp_is_double_buf>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f083 0301 	eor.w	r3, r3, #1
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <lv_refr_area_part+0x3a>
        while(vdb->flushing)
 8007e82:	bf00      	nop
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f8      	bne.n	8007e84 <lv_refr_area_part+0x2c>
    lv_obj_t * top_p;

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f103 0210 	add.w	r2, r3, #16
 8007e98:	f107 0308 	add.w	r3, r7, #8
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f00a ff7c 	bl	8012d9c <lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007ea4:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd f849 	bl	8004f40 <lv_disp_get_scr_act>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f832 	bl	8007f20 <lv_refr_get_top_obj>
 8007ebc:	6138      	str	r0, [r7, #16]

    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_p, &start_mask);
 8007ebe:	f107 0308 	add.w	r3, r7, #8
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6938      	ldr	r0, [r7, #16]
 8007ec6:	f000 f87f 	bl	8007fc8 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd f84b 	bl	8004f6a <lv_disp_get_layer_top>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	f107 0308 	add.w	r3, r7, #8
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f000 f873 	bl	8007fc8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd f854 	bl	8004f94 <lv_disp_get_layer_sys>
 8007eec:	4602      	mov	r2, r0
 8007eee:	f107 0308 	add.w	r3, r7, #8
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f000 f867 	bl	8007fc8 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <lv_refr_area_part+0xc4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f00a fbef 	bl	80126e2 <lv_disp_is_true_double_buf>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f083 0301 	eor.w	r3, r3, #1
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <lv_refr_area_part+0xbc>
        lv_refr_vdb_flush();
 8007f10:	f000 f95c 	bl	80081cc <lv_refr_vdb_flush>
    }
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20002a68 	.word	0x20002a68

08007f20 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	3310      	adds	r3, #16
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f00b f81c 	bl	8012f72 <lv_area_is_in>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03e      	beq.n	8007fbe <lv_refr_get_top_obj+0x9e>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d136      	bne.n	8007fbe <lv_refr_get_top_obj+0x9e>
        lv_obj_t * i;
        LV_LL_READ(obj->child_ll, i)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f00b fbbb 	bl	80136d0 <lv_ll_get_head>
 8007f5a:	6138      	str	r0, [r7, #16]
 8007f5c:	e00e      	b.n	8007f7c <lv_refr_get_top_obj+0x5c>
        {
            found_p = lv_refr_get_top_obj(area_p, i);
 8007f5e:	6939      	ldr	r1, [r7, #16]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ffdd 	bl	8007f20 <lv_refr_get_top_obj>
 8007f66:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <lv_refr_get_top_obj+0x64>
        LV_LL_READ(obj->child_ll, i)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	3304      	adds	r3, #4
 8007f72:	6939      	ldr	r1, [r7, #16]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f00b fbd1 	bl	801371c <lv_ll_get_next>
 8007f7a:	6138      	str	r0, [r7, #16]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1ed      	bne.n	8007f5e <lv_refr_get_top_obj+0x3e>
 8007f82:	e000      	b.n	8007f86 <lv_refr_get_top_obj+0x66>
                break;
 8007f84:	bf00      	nop
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d118      	bne.n	8007fbe <lv_refr_get_top_obj+0x9e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007f8c:	6838      	ldr	r0, [r7, #0]
 8007f8e:	f7ff f8c3 	bl	8007118 <lv_obj_get_style>
 8007f92:	60f8      	str	r0, [r7, #12]
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	7a1b      	ldrb	r3, [r3, #8]
 8007f98:	2bff      	cmp	r3, #255	; 0xff
 8007f9a:	d110      	bne.n	8007fbe <lv_refr_get_top_obj+0x9e>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	6838      	ldr	r0, [r7, #0]
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <lv_refr_get_top_obj+0x9e>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007fae:	6838      	ldr	r0, [r7, #0]
 8007fb0:	f7ff f91f 	bl	80071f2 <lv_obj_get_opa_scale>
 8007fb4:	4603      	mov	r3, r0
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007fb6:	2bff      	cmp	r3, #255	; 0xff
 8007fb8:	d101      	bne.n	8007fbe <lv_refr_get_top_obj+0x9e>
                found_p = obj;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8007fbe:	697b      	ldr	r3, [r7, #20]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <lv_refr_obj_and_children+0x1c>
 8007fd8:	4b1c      	ldr	r3, [pc, #112]	; (800804c <lv_refr_obj_and_children+0x84>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fc ffaf 	bl	8004f40 <lv_disp_get_scr_act>
 8007fe2:	6078      	str	r0, [r7, #4]

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f832 	bl	8008050 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe fff7 	bl	8006fe4 <lv_obj_get_parent>
 8007ff6:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 8007ff8:	e021      	b.n	800803e <lv_refr_obj_and_children+0x76>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	6939      	ldr	r1, [r7, #16]
 8008000:	4618      	mov	r0, r3
 8008002:	f00b fba5 	bl	8013750 <lv_ll_get_prev>
 8008006:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 8008008:	e00a      	b.n	8008020 <lv_refr_obj_and_children+0x58>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f81f 	bl	8008050 <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3304      	adds	r3, #4
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	4618      	mov	r0, r3
 800801a:	f00b fb99 	bl	8013750 <lv_ll_get_prev>
 800801e:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f1      	bne.n	800800a <lv_refr_obj_and_children+0x42>
        }

        /*Call the post draw design function of the parents of the to object*/
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	2201      	movs	r2, #1
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f7fe ffd4 	bl	8006fe4 <lv_obj_get_parent>
 800803c:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1da      	bne.n	8007ffa <lv_refr_obj_and_children+0x32>
    }
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20002a68 	.word	0x20002a68

08008050 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 80ac 	bne.w	80081c4 <lv_refr_obj+0x174>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008070:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 8008072:	f107 0318 	add.w	r3, r7, #24
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fe ffdc 	bl	8007036 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800807e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008082:	b29a      	uxth	r2, r3
 8008084:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	b29b      	uxth	r3, r3
 800808a:	b21b      	sxth	r3, r3
 800808c:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800808e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008092:	b29a      	uxth	r2, r3
 8008094:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	b29b      	uxth	r3, r3
 800809a:	b21b      	sxth	r3, r3
 800809c:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800809e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80080a6:	4413      	add	r3, r2
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	b21b      	sxth	r3, r3
 80080ac:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 80080ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80080b6:	4413      	add	r3, r2
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	83fb      	strh	r3, [r7, #30]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80080be:	f107 0218 	add.w	r2, r7, #24
 80080c2:	f107 0320 	add.w	r3, r7, #32
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f00a fe67 	bl	8012d9c <lv_area_intersect>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 80080d4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d074      	beq.n	80081c6 <lv_refr_obj+0x176>

        /* Redraw the object */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	f107 0120 	add.w	r1, r7, #32
 80080e4:	2200      	movs	r2, #0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
        lv_draw_fill(&obj_ext_mask, &obj_ext_mask, debug_color, LV_OPA_50);
        debug_color.full *= 17;
        debug_color.full += 0xA1;
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 80080ea:	f107 0318 	add.w	r3, r7, #24
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe ffa0 	bl	8007036 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80080f6:	f107 0218 	add.w	r2, r7, #24
 80080fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f00a fe4b 	bl	8012d9c <lv_area_intersect>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800810c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008110:	2b00      	cmp	r3, #0
 8008112:	d04f      	beq.n	80081b4 <lv_refr_obj+0x164>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f00b faec 	bl	80136f6 <lv_ll_get_tail>
 800811e:	6378      	str	r0, [r7, #52]	; 0x34
 8008120:	e045      	b.n	80081ae <lv_refr_obj+0x15e>
            {
                lv_obj_get_coords(child_p, &child_area);
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4619      	mov	r1, r3
 8008128:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800812a:	f7fe ff84 	bl	8007036 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008132:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 8008134:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008138:	b29a      	uxth	r2, r3
 800813a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	b29b      	uxth	r3, r3
 8008140:	b21b      	sxth	r3, r3
 8008142:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 8008144:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008148:	b29a      	uxth	r2, r3
 800814a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	b29b      	uxth	r3, r3
 8008150:	b21b      	sxth	r3, r3
 8008152:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 8008154:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008158:	b29a      	uxth	r2, r3
 800815a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800815c:	4413      	add	r3, r2
 800815e:	b29b      	uxth	r3, r3
 8008160:	b21b      	sxth	r3, r3
 8008162:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 8008164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008168:	b29a      	uxth	r2, r3
 800816a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800816c:	4413      	add	r3, r2
 800816e:	b29b      	uxth	r3, r3
 8008170:	b21b      	sxth	r3, r3
 8008172:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008174:	f107 0208 	add.w	r2, r7, #8
 8008178:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800817c:	f107 0310 	add.w	r3, r7, #16
 8008180:	4618      	mov	r0, r3
 8008182:	f00a fe0b 	bl	8012d9c <lv_area_intersect>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800818c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <lv_refr_obj+0x150>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	4619      	mov	r1, r3
 800819a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800819c:	f7ff ff58 	bl	8008050 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
 80081a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081a6:	4618      	mov	r0, r3
 80081a8:	f00b fad2 	bl	8013750 <lv_ll_get_prev>
 80081ac:	6378      	str	r0, [r7, #52]	; 0x34
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1b6      	bne.n	8008122 <lv_refr_obj+0xd2>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f107 0120 	add.w	r1, r7, #32
 80081bc:	2201      	movs	r2, #1
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
 80081c2:	e000      	b.n	80081c6 <lv_refr_obj+0x176>
    if(obj->hidden != 0) return;
 80081c4:	bf00      	nop
    }
}
 80081c6:	3738      	adds	r7, #56	; 0x38
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80081d2:	4b23      	ldr	r3, [pc, #140]	; (8008260 <lv_refr_vdb_flush+0x94>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f00a fa60 	bl	801269c <lv_disp_get_buf>
 80081dc:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80081de:	4b20      	ldr	r3, [pc, #128]	; (8008260 <lv_refr_vdb_flush+0x94>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f00a fa66 	bl	80126b4 <lv_disp_is_double_buf>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d007      	beq.n	80081fe <lv_refr_vdb_flush+0x32>
        while(vdb->flushing)
 80081ee:	bf00      	nop
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f8      	bne.n	80081f0 <lv_refr_vdb_flush+0x24>
            ;
    }

    vdb->flushing = 1;
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	7e13      	ldrb	r3, [r2, #24]
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	7613      	strb	r3, [r2, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8008208:	f7ff fb4c 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800820c:	6038      	str	r0, [r7, #0]
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <lv_refr_vdb_flush+0x5c>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	f102 0110 	add.w	r1, r2, #16
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6892      	ldr	r2, [r2, #8]
 8008226:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <lv_refr_vdb_flush+0x8a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <lv_refr_vdb_flush+0x8a>
        if(vdb->buf_act == vdb->buf1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d104      	bne.n	800824e <lv_refr_vdb_flush+0x82>
            vdb->buf_act = vdb->buf2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800824c:	e003      	b.n	8008256 <lv_refr_vdb_flush+0x8a>
            vdb->buf_act = vdb->buf1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	609a      	str	r2, [r3, #8]
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20002a68 	.word	0x20002a68

08008264 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
 800826e:	460b      	mov	r3, r1
 8008270:	71bb      	strb	r3, [r7, #6]
 8008272:	4613      	mov	r3, r2
 8008274:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8008276:	79bb      	ldrb	r3, [r7, #6]
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	b2da      	uxtb	r2, r3
 8008282:	7b3b      	ldrb	r3, [r7, #12]
 8008284:	f362 0302 	bfi	r3, r2, #0, #3
 8008288:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	08db      	lsrs	r3, r3, #3
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	b2da      	uxtb	r2, r3
 8008296:	7b3b      	ldrb	r3, [r7, #12]
 8008298:	f362 03c7 	bfi	r3, r2, #3, #5
 800829c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800829e:	797b      	ldrb	r3, [r7, #5]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	7b7b      	ldrb	r3, [r7, #13]
 80082ac:	f362 0304 	bfi	r3, r2, #0, #5
 80082b0:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80082b2:	79bb      	ldrb	r3, [r7, #6]
 80082b4:	089b      	lsrs	r3, r3, #2
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	7b7b      	ldrb	r3, [r7, #13]
 80082c0:	f362 1347 	bfi	r3, r2, #5, #3
 80082c4:	737b      	strb	r3, [r7, #13]
    return color;
 80082c6:	89bb      	ldrh	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 80082d4:	b598      	push	{r3, r4, r7, lr}
 80082d6:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 80082d8:	4aad      	ldr	r2, [pc, #692]	; (8008590 <lv_style_init+0x2bc>)
 80082da:	7813      	ldrb	r3, [r2, #0]
 80082dc:	f36f 0300 	bfc	r3, #0, #1
 80082e0:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80082e2:	4bab      	ldr	r3, [pc, #684]	; (8008590 <lv_style_init+0x2bc>)
 80082e4:	22ff      	movs	r2, #255	; 0xff
 80082e6:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80082e8:	4aa9      	ldr	r2, [pc, #676]	; (8008590 <lv_style_init+0x2bc>)
 80082ea:	4baa      	ldr	r3, [pc, #680]	; (8008594 <lv_style_init+0x2c0>)
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80082f0:	4aa7      	ldr	r2, [pc, #668]	; (8008590 <lv_style_init+0x2bc>)
 80082f2:	4ba8      	ldr	r3, [pc, #672]	; (8008594 <lv_style_init+0x2c0>)
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 80082f8:	4ba5      	ldr	r3, [pc, #660]	; (8008590 <lv_style_init+0x2bc>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 80082fe:	4ba4      	ldr	r3, [pc, #656]	; (8008590 <lv_style_init+0x2bc>)
 8008300:	2200      	movs	r2, #0
 8008302:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 8008304:	4ba2      	ldr	r3, [pc, #648]	; (8008590 <lv_style_init+0x2bc>)
 8008306:	2200      	movs	r2, #0
 8008308:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 800830a:	4ba1      	ldr	r3, [pc, #644]	; (8008590 <lv_style_init+0x2bc>)
 800830c:	2200      	movs	r2, #0
 800830e:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 8008310:	4b9f      	ldr	r3, [pc, #636]	; (8008590 <lv_style_init+0x2bc>)
 8008312:	2200      	movs	r2, #0
 8008314:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8008316:	4b9e      	ldr	r3, [pc, #632]	; (8008590 <lv_style_init+0x2bc>)
 8008318:	2205      	movs	r2, #5
 800831a:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800831c:	4b9c      	ldr	r3, [pc, #624]	; (8008590 <lv_style_init+0x2bc>)
 800831e:	2200      	movs	r2, #0
 8008320:	815a      	strh	r2, [r3, #10]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8008322:	4b9b      	ldr	r3, [pc, #620]	; (8008590 <lv_style_init+0x2bc>)
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 8008328:	4b99      	ldr	r3, [pc, #612]	; (8008590 <lv_style_init+0x2bc>)
 800832a:	2200      	movs	r2, #0
 800832c:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800832e:	4b98      	ldr	r3, [pc, #608]	; (8008590 <lv_style_init+0x2bc>)
 8008330:	220f      	movs	r2, #15
 8008332:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008334:	4a96      	ldr	r2, [pc, #600]	; (8008590 <lv_style_init+0x2bc>)
 8008336:	4b98      	ldr	r3, [pc, #608]	; (8008598 <lv_style_init+0x2c4>)
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800833c:	4b94      	ldr	r3, [pc, #592]	; (8008590 <lv_style_init+0x2bc>)
 800833e:	2201      	movs	r2, #1
 8008340:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 8008342:	4b93      	ldr	r3, [pc, #588]	; (8008590 <lv_style_init+0x2bc>)
 8008344:	2200      	movs	r2, #0
 8008346:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008348:	4b91      	ldr	r3, [pc, #580]	; (8008590 <lv_style_init+0x2bc>)
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008350:	4c8f      	ldr	r4, [pc, #572]	; (8008590 <lv_style_init+0x2bc>)
 8008352:	2230      	movs	r2, #48	; 0x30
 8008354:	2130      	movs	r1, #48	; 0x30
 8008356:	2030      	movs	r0, #48	; 0x30
 8008358:	f7ff ff84 	bl	8008264 <lv_color_make>
 800835c:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800835e:	4c8c      	ldr	r4, [pc, #560]	; (8008590 <lv_style_init+0x2bc>)
 8008360:	22d8      	movs	r2, #216	; 0xd8
 8008362:	2196      	movs	r1, #150	; 0x96
 8008364:	2055      	movs	r0, #85	; 0x55
 8008366:	f7ff ff7d 	bl	8008264 <lv_color_make>
 800836a:	8460      	strh	r0, [r4, #34]	; 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800836c:	4b88      	ldr	r3, [pc, #544]	; (8008590 <lv_style_init+0x2bc>)
 800836e:	4a8b      	ldr	r2, [pc, #556]	; (800859c <lv_style_init+0x2c8>)
 8008370:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 8008372:	4b87      	ldr	r3, [pc, #540]	; (8008590 <lv_style_init+0x2bc>)
 8008374:	2200      	movs	r2, #0
 8008376:	851a      	strh	r2, [r3, #40]	; 0x28
    lv_style_scr.text.line_space   = 2;
 8008378:	4b85      	ldr	r3, [pc, #532]	; (8008590 <lv_style_init+0x2bc>)
 800837a:	2202      	movs	r2, #2
 800837c:	855a      	strh	r2, [r3, #42]	; 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 800837e:	4b84      	ldr	r3, [pc, #528]	; (8008590 <lv_style_init+0x2bc>)
 8008380:	22ff      	movs	r2, #255	; 0xff
 8008382:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8008386:	4c82      	ldr	r4, [pc, #520]	; (8008590 <lv_style_init+0x2bc>)
 8008388:	2220      	movs	r2, #32
 800838a:	2120      	movs	r1, #32
 800838c:	2020      	movs	r0, #32
 800838e:	f7ff ff69 	bl	8008264 <lv_color_make>
 8008392:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8008394:	4b7e      	ldr	r3, [pc, #504]	; (8008590 <lv_style_init+0x2bc>)
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 800839c:	4b7c      	ldr	r3, [pc, #496]	; (8008590 <lv_style_init+0x2bc>)
 800839e:	22ff      	movs	r2, #255	; 0xff
 80083a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 80083a4:	4c7a      	ldr	r4, [pc, #488]	; (8008590 <lv_style_init+0x2bc>)
 80083a6:	2220      	movs	r2, #32
 80083a8:	2120      	movs	r1, #32
 80083aa:	2020      	movs	r0, #32
 80083ac:	f7ff ff5a 	bl	8008264 <lv_color_make>
 80083b0:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_scr.line.width   = 2;
 80083b2:	4b77      	ldr	r3, [pc, #476]	; (8008590 <lv_style_init+0x2bc>)
 80083b4:	2202      	movs	r2, #2
 80083b6:	86da      	strh	r2, [r3, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 80083b8:	4a75      	ldr	r2, [pc, #468]	; (8008590 <lv_style_init+0x2bc>)
 80083ba:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80083be:	f36f 0300 	bfc	r3, #0, #1
 80083c2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80083c6:	4972      	ldr	r1, [pc, #456]	; (8008590 <lv_style_init+0x2bc>)
 80083c8:	4875      	ldr	r0, [pc, #468]	; (80085a0 <lv_style_init+0x2cc>)
 80083ca:	f000 f9cf 	bl	800876c <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 80083ce:	4b74      	ldr	r3, [pc, #464]	; (80085a0 <lv_style_init+0x2cc>)
 80083d0:	2205      	movs	r2, #5
 80083d2:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 80083d4:	4b72      	ldr	r3, [pc, #456]	; (80085a0 <lv_style_init+0x2cc>)
 80083d6:	2205      	movs	r2, #5
 80083d8:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 80083da:	4b71      	ldr	r3, [pc, #452]	; (80085a0 <lv_style_init+0x2cc>)
 80083dc:	2205      	movs	r2, #5
 80083de:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 80083e0:	4b6f      	ldr	r3, [pc, #444]	; (80085a0 <lv_style_init+0x2cc>)
 80083e2:	2205      	movs	r2, #5
 80083e4:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80083e6:	496e      	ldr	r1, [pc, #440]	; (80085a0 <lv_style_init+0x2cc>)
 80083e8:	486e      	ldr	r0, [pc, #440]	; (80085a4 <lv_style_init+0x2d0>)
 80083ea:	f000 f9bf 	bl	800876c <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80083ee:	4c6d      	ldr	r4, [pc, #436]	; (80085a4 <lv_style_init+0x2d0>)
 80083f0:	22f0      	movs	r2, #240	; 0xf0
 80083f2:	21f0      	movs	r1, #240	; 0xf0
 80083f4:	20f0      	movs	r0, #240	; 0xf0
 80083f6:	f7ff ff35 	bl	8008264 <lv_color_make>
 80083fa:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 80083fc:	4c69      	ldr	r4, [pc, #420]	; (80085a4 <lv_style_init+0x2d0>)
 80083fe:	22f0      	movs	r2, #240	; 0xf0
 8008400:	21f0      	movs	r1, #240	; 0xf0
 8008402:	20f0      	movs	r0, #240	; 0xf0
 8008404:	f7ff ff2e 	bl	8008264 <lv_color_make>
 8008408:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800840a:	4c66      	ldr	r4, [pc, #408]	; (80085a4 <lv_style_init+0x2d0>)
 800840c:	22f0      	movs	r2, #240	; 0xf0
 800840e:	21f0      	movs	r1, #240	; 0xf0
 8008410:	20f0      	movs	r0, #240	; 0xf0
 8008412:	f7ff ff27 	bl	8008264 <lv_color_make>
 8008416:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8008418:	4c62      	ldr	r4, [pc, #392]	; (80085a4 <lv_style_init+0x2d0>)
 800841a:	22d8      	movs	r2, #216	; 0xd8
 800841c:	2196      	movs	r1, #150	; 0x96
 800841e:	2055      	movs	r0, #85	; 0x55
 8008420:	f7ff ff20 	bl	8008264 <lv_color_make>
 8008424:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8008426:	4a5f      	ldr	r2, [pc, #380]	; (80085a4 <lv_style_init+0x2d0>)
 8008428:	4b5e      	ldr	r3, [pc, #376]	; (80085a4 <lv_style_init+0x2d0>)
 800842a:	885b      	ldrh	r3, [r3, #2]
 800842c:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800842e:	495c      	ldr	r1, [pc, #368]	; (80085a0 <lv_style_init+0x2cc>)
 8008430:	485d      	ldr	r0, [pc, #372]	; (80085a8 <lv_style_init+0x2d4>)
 8008432:	f000 f99b 	bl	800876c <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8008436:	4c5c      	ldr	r4, [pc, #368]	; (80085a8 <lv_style_init+0x2d4>)
 8008438:	2220      	movs	r2, #32
 800843a:	2120      	movs	r1, #32
 800843c:	2020      	movs	r0, #32
 800843e:	f7ff ff11 	bl	8008264 <lv_color_make>
 8008442:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8008444:	4c58      	ldr	r4, [pc, #352]	; (80085a8 <lv_style_init+0x2d4>)
 8008446:	2220      	movs	r2, #32
 8008448:	2120      	movs	r1, #32
 800844a:	2020      	movs	r0, #32
 800844c:	f7ff ff0a 	bl	8008264 <lv_color_make>
 8008450:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8008452:	4c55      	ldr	r4, [pc, #340]	; (80085a8 <lv_style_init+0x2d4>)
 8008454:	2220      	movs	r2, #32
 8008456:	2120      	movs	r1, #32
 8008458:	2020      	movs	r0, #32
 800845a:	f7ff ff03 	bl	8008264 <lv_color_make>
 800845e:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8008460:	4a51      	ldr	r2, [pc, #324]	; (80085a8 <lv_style_init+0x2d4>)
 8008462:	4b4c      	ldr	r3, [pc, #304]	; (8008594 <lv_style_init+0x2c0>)
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8008468:	4a4f      	ldr	r2, [pc, #316]	; (80085a8 <lv_style_init+0x2d4>)
 800846a:	4b50      	ldr	r3, [pc, #320]	; (80085ac <lv_style_init+0x2d8>)
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8008470:	4b4d      	ldr	r3, [pc, #308]	; (80085a8 <lv_style_init+0x2d4>)
 8008472:	2206      	movs	r2, #6
 8008474:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8008476:	4c4c      	ldr	r4, [pc, #304]	; (80085a8 <lv_style_init+0x2d4>)
 8008478:	2240      	movs	r2, #64	; 0x40
 800847a:	2140      	movs	r1, #64	; 0x40
 800847c:	2040      	movs	r0, #64	; 0x40
 800847e:	f7ff fef1 	bl	8008264 <lv_color_make>
 8008482:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008484:	4b48      	ldr	r3, [pc, #288]	; (80085a8 <lv_style_init+0x2d4>)
 8008486:	2202      	movs	r2, #2
 8008488:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800848a:	4b47      	ldr	r3, [pc, #284]	; (80085a8 <lv_style_init+0x2d4>)
 800848c:	224c      	movs	r2, #76	; 0x4c
 800848e:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008490:	4945      	ldr	r1, [pc, #276]	; (80085a8 <lv_style_init+0x2d4>)
 8008492:	4847      	ldr	r0, [pc, #284]	; (80085b0 <lv_style_init+0x2dc>)
 8008494:	f000 f96a 	bl	800876c <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8008498:	4c45      	ldr	r4, [pc, #276]	; (80085b0 <lv_style_init+0x2dc>)
 800849a:	22e0      	movs	r2, #224	; 0xe0
 800849c:	21e0      	movs	r1, #224	; 0xe0
 800849e:	20e0      	movs	r0, #224	; 0xe0
 80084a0:	f7ff fee0 	bl	8008264 <lv_color_make>
 80084a4:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80084a6:	4c42      	ldr	r4, [pc, #264]	; (80085b0 <lv_style_init+0x2dc>)
 80084a8:	22e0      	movs	r2, #224	; 0xe0
 80084aa:	21e0      	movs	r1, #224	; 0xe0
 80084ac:	20e0      	movs	r0, #224	; 0xe0
 80084ae:	f7ff fed9 	bl	8008264 <lv_color_make>
 80084b2:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 80084b4:	4c3e      	ldr	r4, [pc, #248]	; (80085b0 <lv_style_init+0x2dc>)
 80084b6:	22c0      	movs	r2, #192	; 0xc0
 80084b8:	21c0      	movs	r1, #192	; 0xc0
 80084ba:	20c0      	movs	r0, #192	; 0xc0
 80084bc:	f7ff fed2 	bl	8008264 <lv_color_make>
 80084c0:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80084c2:	4c3b      	ldr	r4, [pc, #236]	; (80085b0 <lv_style_init+0x2dc>)
 80084c4:	22c7      	movs	r2, #199	; 0xc7
 80084c6:	219a      	movs	r1, #154	; 0x9a
 80084c8:	206b      	movs	r0, #107	; 0x6b
 80084ca:	f7ff fecb 	bl	8008264 <lv_color_make>
 80084ce:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80084d0:	4c37      	ldr	r4, [pc, #220]	; (80085b0 <lv_style_init+0x2dc>)
 80084d2:	228b      	movs	r2, #139	; 0x8b
 80084d4:	2159      	movs	r1, #89	; 0x59
 80084d6:	202b      	movs	r0, #43	; 0x2b
 80084d8:	f7ff fec4 	bl	8008264 <lv_color_make>
 80084dc:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80084de:	4c34      	ldr	r4, [pc, #208]	; (80085b0 <lv_style_init+0x2dc>)
 80084e0:	2242      	movs	r2, #66	; 0x42
 80084e2:	212c      	movs	r1, #44	; 0x2c
 80084e4:	2015      	movs	r0, #21
 80084e6:	f7ff febd 	bl	8008264 <lv_color_make>
 80084ea:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80084ec:	492c      	ldr	r1, [pc, #176]	; (80085a0 <lv_style_init+0x2cc>)
 80084ee:	4831      	ldr	r0, [pc, #196]	; (80085b4 <lv_style_init+0x2e0>)
 80084f0:	f000 f93c 	bl	800876c <lv_style_copy>
    lv_style_transp.glass             = 1;
 80084f4:	4a2f      	ldr	r2, [pc, #188]	; (80085b4 <lv_style_init+0x2e0>)
 80084f6:	7813      	ldrb	r3, [r2, #0]
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <lv_style_init+0x2e0>)
 8008500:	2200      	movs	r2, #0
 8008502:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8008504:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <lv_style_init+0x2e0>)
 8008506:	2200      	movs	r2, #0
 8008508:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800850a:	492a      	ldr	r1, [pc, #168]	; (80085b4 <lv_style_init+0x2e0>)
 800850c:	482a      	ldr	r0, [pc, #168]	; (80085b8 <lv_style_init+0x2e4>)
 800850e:	f000 f92d 	bl	800876c <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8008512:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <lv_style_init+0x2e4>)
 8008514:	2200      	movs	r2, #0
 8008516:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8008518:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <lv_style_init+0x2e4>)
 800851a:	2200      	movs	r2, #0
 800851c:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 800851e:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <lv_style_init+0x2e4>)
 8008520:	2200      	movs	r2, #0
 8008522:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <lv_style_init+0x2e4>)
 8008526:	2200      	movs	r2, #0
 8008528:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800852a:	4923      	ldr	r1, [pc, #140]	; (80085b8 <lv_style_init+0x2e4>)
 800852c:	4823      	ldr	r0, [pc, #140]	; (80085bc <lv_style_init+0x2e8>)
 800852e:	f000 f91d 	bl	800876c <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 8008532:	4b22      	ldr	r3, [pc, #136]	; (80085bc <lv_style_init+0x2e8>)
 8008534:	2200      	movs	r2, #0
 8008536:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008538:	4919      	ldr	r1, [pc, #100]	; (80085a0 <lv_style_init+0x2cc>)
 800853a:	4821      	ldr	r0, [pc, #132]	; (80085c0 <lv_style_init+0x2ec>)
 800853c:	f000 f916 	bl	800876c <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008540:	4c1f      	ldr	r4, [pc, #124]	; (80085c0 <lv_style_init+0x2ec>)
 8008542:	22d0      	movs	r2, #208	; 0xd0
 8008544:	21a2      	movs	r1, #162	; 0xa2
 8008546:	2076      	movs	r0, #118	; 0x76
 8008548:	f7ff fe8c 	bl	8008264 <lv_color_make>
 800854c:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800854e:	4c1c      	ldr	r4, [pc, #112]	; (80085c0 <lv_style_init+0x2ec>)
 8008550:	225d      	movs	r2, #93	; 0x5d
 8008552:	213a      	movs	r1, #58	; 0x3a
 8008554:	2019      	movs	r0, #25
 8008556:	f7ff fe85 	bl	8008264 <lv_color_make>
 800855a:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800855c:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <lv_style_init+0x2ec>)
 800855e:	2206      	movs	r2, #6
 8008560:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8008562:	4b17      	ldr	r3, [pc, #92]	; (80085c0 <lv_style_init+0x2ec>)
 8008564:	2219      	movs	r2, #25
 8008566:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <lv_style_init+0x2ec>)
 800856a:	2219      	movs	r2, #25
 800856c:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800856e:	4b14      	ldr	r3, [pc, #80]	; (80085c0 <lv_style_init+0x2ec>)
 8008570:	2210      	movs	r2, #16
 8008572:	82da      	strh	r2, [r3, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8008574:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <lv_style_init+0x2ec>)
 8008576:	2210      	movs	r2, #16
 8008578:	831a      	strh	r2, [r3, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <lv_style_init+0x2ec>)
 800857c:	220a      	movs	r2, #10
 800857e:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008580:	4c0f      	ldr	r4, [pc, #60]	; (80085c0 <lv_style_init+0x2ec>)
 8008582:	2228      	movs	r2, #40	; 0x28
 8008584:	2119      	movs	r1, #25
 8008586:	200b      	movs	r0, #11
 8008588:	f7ff fe6c 	bl	8008264 <lv_color_make>
 800858c:	8160      	strh	r0, [r4, #10]
 800858e:	e019      	b.n	80085c4 <lv_style_init+0x2f0>
 8008590:	20006ce0 	.word	0x20006ce0
 8008594:	08029c00 	.word	0x08029c00
 8008598:	08029c04 	.word	0x08029c04
 800859c:	20000bec 	.word	0x20000bec
 80085a0:	20006c68 	.word	0x20006c68
 80085a4:	20006d58 	.word	0x20006d58
 80085a8:	20006b78 	.word	0x20006b78
 80085ac:	08029c08 	.word	0x08029c08
 80085b0:	20006a88 	.word	0x20006a88
 80085b4:	20006ac4 	.word	0x20006ac4
 80085b8:	20006c2c 	.word	0x20006c2c
 80085bc:	20006bb4 	.word	0x20006bb4
 80085c0:	20006b00 	.word	0x20006b00
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80085c4:	4b63      	ldr	r3, [pc, #396]	; (8008754 <lv_style_init+0x480>)
 80085c6:	2202      	movs	r2, #2
 80085c8:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80085ca:	4b62      	ldr	r3, [pc, #392]	; (8008754 <lv_style_init+0x480>)
 80085cc:	22b2      	movs	r2, #178	; 0xb2
 80085ce:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80085d0:	4a60      	ldr	r2, [pc, #384]	; (8008754 <lv_style_init+0x480>)
 80085d2:	4b61      	ldr	r3, [pc, #388]	; (8008758 <lv_style_init+0x484>)
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 80085d8:	4b5e      	ldr	r3, [pc, #376]	; (8008754 <lv_style_init+0x480>)
 80085da:	2200      	movs	r2, #0
 80085dc:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80085de:	4c5d      	ldr	r4, [pc, #372]	; (8008754 <lv_style_init+0x480>)
 80085e0:	22ff      	movs	r2, #255	; 0xff
 80085e2:	21ff      	movs	r1, #255	; 0xff
 80085e4:	20ff      	movs	r0, #255	; 0xff
 80085e6:	f7ff fe3d 	bl	8008264 <lv_color_make>
 80085ea:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80085ec:	4c59      	ldr	r4, [pc, #356]	; (8008754 <lv_style_init+0x480>)
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	21ff      	movs	r1, #255	; 0xff
 80085f2:	20ff      	movs	r0, #255	; 0xff
 80085f4:	f7ff fe36 	bl	8008264 <lv_color_make>
 80085f8:	8620      	strh	r0, [r4, #48]	; 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80085fa:	4956      	ldr	r1, [pc, #344]	; (8008754 <lv_style_init+0x480>)
 80085fc:	4857      	ldr	r0, [pc, #348]	; (800875c <lv_style_init+0x488>)
 80085fe:	f000 f8b5 	bl	800876c <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008602:	4c56      	ldr	r4, [pc, #344]	; (800875c <lv_style_init+0x488>)
 8008604:	2294      	movs	r2, #148	; 0x94
 8008606:	2162      	movs	r1, #98	; 0x62
 8008608:	2033      	movs	r0, #51	; 0x33
 800860a:	f7ff fe2b 	bl	8008264 <lv_color_make>
 800860e:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8008610:	4c52      	ldr	r4, [pc, #328]	; (800875c <lv_style_init+0x488>)
 8008612:	223c      	movs	r2, #60	; 0x3c
 8008614:	2126      	movs	r1, #38	; 0x26
 8008616:	2010      	movs	r0, #16
 8008618:	f7ff fe24 	bl	8008264 <lv_color_make>
 800861c:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800861e:	4c4f      	ldr	r4, [pc, #316]	; (800875c <lv_style_init+0x488>)
 8008620:	22c6      	movs	r2, #198	; 0xc6
 8008622:	21b5      	movs	r1, #181	; 0xb5
 8008624:	20a4      	movs	r0, #164	; 0xa4
 8008626:	f7ff fe1d 	bl	8008264 <lv_color_make>
 800862a:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800862c:	4c4b      	ldr	r4, [pc, #300]	; (800875c <lv_style_init+0x488>)
 800862e:	22c6      	movs	r2, #198	; 0xc6
 8008630:	21b5      	movs	r1, #181	; 0xb5
 8008632:	20a4      	movs	r0, #164	; 0xa4
 8008634:	f7ff fe16 	bl	8008264 <lv_color_make>
 8008638:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800863a:	4c48      	ldr	r4, [pc, #288]	; (800875c <lv_style_init+0x488>)
 800863c:	22c6      	movs	r2, #198	; 0xc6
 800863e:	21b5      	movs	r1, #181	; 0xb5
 8008640:	20a4      	movs	r0, #164	; 0xa4
 8008642:	f7ff fe0f 	bl	8008264 <lv_color_make>
 8008646:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8008648:	4942      	ldr	r1, [pc, #264]	; (8008754 <lv_style_init+0x480>)
 800864a:	4845      	ldr	r0, [pc, #276]	; (8008760 <lv_style_init+0x48c>)
 800864c:	f000 f88e 	bl	800876c <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008650:	4c43      	ldr	r4, [pc, #268]	; (8008760 <lv_style_init+0x48c>)
 8008652:	2222      	movs	r2, #34	; 0x22
 8008654:	2111      	movs	r1, #17
 8008656:	200a      	movs	r0, #10
 8008658:	f7ff fe04 	bl	8008264 <lv_color_make>
 800865c:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800865e:	4c40      	ldr	r4, [pc, #256]	; (8008760 <lv_style_init+0x48c>)
 8008660:	2290      	movs	r2, #144	; 0x90
 8008662:	2162      	movs	r1, #98	; 0x62
 8008664:	2037      	movs	r0, #55	; 0x37
 8008666:	f7ff fdfd 	bl	8008264 <lv_color_make>
 800866a:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800866c:	4c3c      	ldr	r4, [pc, #240]	; (8008760 <lv_style_init+0x48c>)
 800866e:	220d      	movs	r2, #13
 8008670:	2107      	movs	r1, #7
 8008672:	2001      	movs	r0, #1
 8008674:	f7ff fdf6 	bl	8008264 <lv_color_make>
 8008678:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800867a:	4c39      	ldr	r4, [pc, #228]	; (8008760 <lv_style_init+0x48c>)
 800867c:	22f4      	movs	r2, #244	; 0xf4
 800867e:	21dd      	movs	r1, #221	; 0xdd
 8008680:	20c8      	movs	r0, #200	; 0xc8
 8008682:	f7ff fdef 	bl	8008264 <lv_color_make>
 8008686:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8008688:	4c35      	ldr	r4, [pc, #212]	; (8008760 <lv_style_init+0x48c>)
 800868a:	22f4      	movs	r2, #244	; 0xf4
 800868c:	21dd      	movs	r1, #221	; 0xdd
 800868e:	20c8      	movs	r0, #200	; 0xc8
 8008690:	f7ff fde8 	bl	8008264 <lv_color_make>
 8008694:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008696:	4c32      	ldr	r4, [pc, #200]	; (8008760 <lv_style_init+0x48c>)
 8008698:	22f4      	movs	r2, #244	; 0xf4
 800869a:	21dd      	movs	r1, #221	; 0xdd
 800869c:	20c8      	movs	r0, #200	; 0xc8
 800869e:	f7ff fde1 	bl	8008264 <lv_color_make>
 80086a2:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80086a4:	492e      	ldr	r1, [pc, #184]	; (8008760 <lv_style_init+0x48c>)
 80086a6:	482f      	ldr	r0, [pc, #188]	; (8008764 <lv_style_init+0x490>)
 80086a8:	f000 f860 	bl	800876c <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80086ac:	4c2d      	ldr	r4, [pc, #180]	; (8008764 <lv_style_init+0x490>)
 80086ae:	2227      	movs	r2, #39	; 0x27
 80086b0:	2114      	movs	r1, #20
 80086b2:	2002      	movs	r0, #2
 80086b4:	f7ff fdd6 	bl	8008264 <lv_color_make>
 80086b8:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80086ba:	4c2a      	ldr	r4, [pc, #168]	; (8008764 <lv_style_init+0x490>)
 80086bc:	2270      	movs	r2, #112	; 0x70
 80086be:	214c      	movs	r1, #76	; 0x4c
 80086c0:	202b      	movs	r0, #43	; 0x2b
 80086c2:	f7ff fdcf 	bl	8008264 <lv_color_make>
 80086c6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80086c8:	4c26      	ldr	r4, [pc, #152]	; (8008764 <lv_style_init+0x490>)
 80086ca:	22c6      	movs	r2, #198	; 0xc6
 80086cc:	21b5      	movs	r1, #181	; 0xb5
 80086ce:	20a4      	movs	r0, #164	; 0xa4
 80086d0:	f7ff fdc8 	bl	8008264 <lv_color_make>
 80086d4:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80086d6:	4c23      	ldr	r4, [pc, #140]	; (8008764 <lv_style_init+0x490>)
 80086d8:	22c6      	movs	r2, #198	; 0xc6
 80086da:	21b5      	movs	r1, #181	; 0xb5
 80086dc:	20a4      	movs	r0, #164	; 0xa4
 80086de:	f7ff fdc1 	bl	8008264 <lv_color_make>
 80086e2:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80086e4:	4c1f      	ldr	r4, [pc, #124]	; (8008764 <lv_style_init+0x490>)
 80086e6:	22c6      	movs	r2, #198	; 0xc6
 80086e8:	21b5      	movs	r1, #181	; 0xb5
 80086ea:	20a4      	movs	r0, #164	; 0xa4
 80086ec:	f7ff fdba 	bl	8008264 <lv_color_make>
 80086f0:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80086f2:	4918      	ldr	r1, [pc, #96]	; (8008754 <lv_style_init+0x480>)
 80086f4:	481c      	ldr	r0, [pc, #112]	; (8008768 <lv_style_init+0x494>)
 80086f6:	f000 f839 	bl	800876c <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80086fa:	4c1b      	ldr	r4, [pc, #108]	; (8008768 <lv_style_init+0x494>)
 80086fc:	22d8      	movs	r2, #216	; 0xd8
 80086fe:	21d8      	movs	r1, #216	; 0xd8
 8008700:	20d8      	movs	r0, #216	; 0xd8
 8008702:	f7ff fdaf 	bl	8008264 <lv_color_make>
 8008706:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008708:	4c17      	ldr	r4, [pc, #92]	; (8008768 <lv_style_init+0x494>)
 800870a:	22d8      	movs	r2, #216	; 0xd8
 800870c:	21d8      	movs	r1, #216	; 0xd8
 800870e:	20d8      	movs	r0, #216	; 0xd8
 8008710:	f7ff fda8 	bl	8008264 <lv_color_make>
 8008714:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8008716:	4c14      	ldr	r4, [pc, #80]	; (8008768 <lv_style_init+0x494>)
 8008718:	2290      	movs	r2, #144	; 0x90
 800871a:	2190      	movs	r1, #144	; 0x90
 800871c:	2090      	movs	r0, #144	; 0x90
 800871e:	f7ff fda1 	bl	8008264 <lv_color_make>
 8008722:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8008724:	4c10      	ldr	r4, [pc, #64]	; (8008768 <lv_style_init+0x494>)
 8008726:	2270      	movs	r2, #112	; 0x70
 8008728:	2170      	movs	r1, #112	; 0x70
 800872a:	2070      	movs	r0, #112	; 0x70
 800872c:	f7ff fd9a 	bl	8008264 <lv_color_make>
 8008730:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8008732:	4c0d      	ldr	r4, [pc, #52]	; (8008768 <lv_style_init+0x494>)
 8008734:	2270      	movs	r2, #112	; 0x70
 8008736:	2170      	movs	r1, #112	; 0x70
 8008738:	2070      	movs	r0, #112	; 0x70
 800873a:	f7ff fd93 	bl	8008264 <lv_color_make>
 800873e:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8008740:	4c09      	ldr	r4, [pc, #36]	; (8008768 <lv_style_init+0x494>)
 8008742:	2270      	movs	r2, #112	; 0x70
 8008744:	2170      	movs	r1, #112	; 0x70
 8008746:	2070      	movs	r0, #112	; 0x70
 8008748:	f7ff fd8c 	bl	8008264 <lv_color_make>
 800874c:	86a0      	strh	r0, [r4, #52]	; 0x34
}
 800874e:	bf00      	nop
 8008750:	bd98      	pop	{r3, r4, r7, pc}
 8008752:	bf00      	nop
 8008754:	20006b00 	.word	0x20006b00
 8008758:	08029c04 	.word	0x08029c04
 800875c:	20006b3c 	.word	0x20006b3c
 8008760:	20006ca4 	.word	0x20006ca4
 8008764:	20006d1c 	.word	0x20006d1c
 8008768:	20006bf0 	.word	0x20006bf0

0800876c <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 8008776:	223c      	movs	r2, #60	; 0x3c
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f01e fd10 	bl	80271a0 <memcpy>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8008790:	4b18      	ldr	r3, [pc, #96]	; (80087f4 <lv_draw_get_buf+0x6c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d802      	bhi.n	80087a0 <lv_draw_get_buf+0x18>
 800879a:	4b17      	ldr	r3, [pc, #92]	; (80087f8 <lv_draw_get_buf+0x70>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	e024      	b.n	80087ea <lv_draw_get_buf+0x62>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 80087a0:	4a14      	ldr	r2, [pc, #80]	; (80087f4 <lv_draw_get_buf+0x6c>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6013      	str	r3, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10d      	bne.n	80087ca <lv_draw_get_buf+0x42>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f00b f90e 	bl	80139d0 <lv_mem_alloc>
 80087b4:	4602      	mov	r2, r0
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087b8:	601a      	str	r2, [r3, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80087ba:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d100      	bne.n	80087c4 <lv_draw_get_buf+0x3c>
 80087c2:	e7fe      	b.n	80087c2 <lv_draw_get_buf+0x3a>
        return LV_GC_ROOT(_lv_draw_buf);
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	e00f      	b.n	80087ea <lv_draw_get_buf+0x62>
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f00b f965 	bl	8013aa0 <lv_mem_realloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087da:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d100      	bne.n	80087e6 <lv_draw_get_buf+0x5e>
 80087e4:	e7fe      	b.n	80087e4 <lv_draw_get_buf+0x5c>
    return LV_GC_ROOT(_lv_draw_buf);
 80087e6:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <lv_draw_get_buf+0x70>)
 80087e8:	681b      	ldr	r3, [r3, #0]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20002a6c 	.word	0x20002a6c
 80087f8:	20006dac 	.word	0x20006dac

080087fc <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8008800:	4b08      	ldr	r3, [pc, #32]	; (8008824 <lv_draw_free_buf+0x28>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00a      	beq.n	800881e <lv_draw_free_buf+0x22>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <lv_draw_free_buf+0x28>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f00b f91f 	bl	8013a50 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8008812:	4b04      	ldr	r3, [pc, #16]	; (8008824 <lv_draw_free_buf+0x28>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
        draw_buf_size = 0;
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <lv_draw_free_buf+0x2c>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
    }
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20006dac 	.word	0x20006dac
 8008828:	20002a6c 	.word	0x20002a6c

0800882c <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	80fb      	strh	r3, [r7, #6]
 8008836:	460b      	mov	r3, r1
 8008838:	80bb      	strh	r3, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	70fb      	strb	r3, [r7, #3]
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 800883e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <lv_draw_aa_get_opa+0x1e>
        return LV_OPA_TRANSP;
 8008846:	2300      	movs	r3, #0
 8008848:	e021      	b.n	800888e <lv_draw_aa_get_opa+0x62>
    else if(seg < 8)
 800884a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800884e:	2b07      	cmp	r3, #7
 8008850:	dc10      	bgt.n	8008874 <lv_draw_aa_get_opa+0x48>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8008852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008856:	3b01      	subs	r3, #1
 8008858:	4a10      	ldr	r2, [pc, #64]	; (800889c <lv_draw_aa_get_opa+0x70>)
 800885a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800885e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008862:	4413      	add	r3, r2
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	fb03 f302 	mul.w	r3, r3, r2
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e00c      	b.n	800888e <lv_draw_aa_get_opa+0x62>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8008874:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	3301      	adds	r3, #1
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	fb02 f203 	mul.w	r2, r2, r3
 8008882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	fb92 f3f3 	sdiv	r3, r2, r3
 800888c:	b2db      	uxtb	r3, r3
    }
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	2000000c 	.word	0x2000000c

080088a0 <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	607b      	str	r3, [r7, #4]
 80088a8:	4603      	mov	r3, r0
 80088aa:	81fb      	strh	r3, [r7, #14]
 80088ac:	460b      	mov	r3, r1
 80088ae:	81bb      	strh	r3, [r7, #12]
 80088b0:	4613      	mov	r3, r2
 80088b2:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 80088b4:	2300      	movs	r3, #0
 80088b6:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 80088b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da05      	bge.n	80088cc <lv_draw_aa_ver_seg+0x2c>
        aa_inv = true;
 80088c0:	2301      	movs	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
        length = -length;
 80088c4:	897b      	ldrh	r3, [r7, #10]
 80088c6:	425b      	negs	r3, r3
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 80088cc:	2300      	movs	r3, #0
 80088ce:	82bb      	strh	r3, [r7, #20]
 80088d0:	e025      	b.n	800891e <lv_draw_aa_ver_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 80088d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80088d6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80088da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff ffa4 	bl	800882c <lv_draw_aa_get_opa>
 80088e4:	4603      	mov	r3, r0
 80088e6:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <lv_draw_aa_ver_seg+0x58>
 80088ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80088f2:	7cfb      	ldrb	r3, [r7, #19]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x, y + i, mask, color, px_opa);
 80088f8:	89ba      	ldrh	r2, [r7, #12]
 80088fa:	8abb      	ldrh	r3, [r7, #20]
 80088fc:	4413      	add	r3, r2
 80088fe:	b29b      	uxth	r3, r3
 8008900:	b219      	sxth	r1, r3
 8008902:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8008906:	7cfb      	ldrb	r3, [r7, #19]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	8c3b      	ldrh	r3, [r7, #32]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f000 fcb4 	bl	800927a <lv_draw_px>
    for(i = 0; i < length; i++) {
 8008912:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008916:	b29b      	uxth	r3, r3
 8008918:	3301      	adds	r3, #1
 800891a:	b29b      	uxth	r3, r3
 800891c:	82bb      	strh	r3, [r7, #20]
 800891e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008922:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008926:	429a      	cmp	r2, r3
 8008928:	dbd3      	blt.n	80088d2 <lv_draw_aa_ver_seg+0x32>
    }
}
 800892a:	bf00      	nop
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af02      	add	r7, sp, #8
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	4603      	mov	r3, r0
 800893c:	81fb      	strh	r3, [r7, #14]
 800893e:	460b      	mov	r3, r1
 8008940:	81bb      	strh	r3, [r7, #12]
 8008942:	4613      	mov	r3, r2
 8008944:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 800894a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800894e:	2b00      	cmp	r3, #0
 8008950:	da05      	bge.n	800895e <lv_draw_aa_hor_seg+0x2c>
        aa_inv = true;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
        length = -length;
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	425b      	negs	r3, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 800895e:	2300      	movs	r3, #0
 8008960:	82bb      	strh	r3, [r7, #20]
 8008962:	e025      	b.n	80089b0 <lv_draw_aa_hor_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 8008964:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008968:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800896c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff ff5b 	bl	800882c <lv_draw_aa_get_opa>
 8008976:	4603      	mov	r3, r0
 8008978:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <lv_draw_aa_hor_seg+0x58>
 8008980:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008984:	7cfb      	ldrb	r3, [r7, #19]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x + i, y, mask, color, px_opa);
 800898a:	89fa      	ldrh	r2, [r7, #14]
 800898c:	8abb      	ldrh	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	b29b      	uxth	r3, r3
 8008992:	b218      	sxth	r0, r3
 8008994:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008998:	7cfb      	ldrb	r3, [r7, #19]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	8c3b      	ldrh	r3, [r7, #32]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	f000 fc6b 	bl	800927a <lv_draw_px>
    for(i = 0; i < length; i++) {
 80089a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3301      	adds	r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	82bb      	strh	r3, [r7, #20]
 80089b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80089b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	dbd3      	blt.n	8008964 <lv_draw_aa_hor_seg+0x32>
    }
}
 80089bc:	bf00      	nop
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <lv_draw_arc>:
 * @param style style of the arc (`body.thickness`, `body.main_color`, `body.opa` is used)
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius, const lv_area_t * mask,
                 uint16_t start_angle, uint16_t end_angle, const lv_style_t * style, lv_opa_t opa_scale)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b094      	sub	sp, #80	; 0x50
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	4603      	mov	r3, r0
 80089ce:	81fb      	strh	r3, [r7, #14]
 80089d0:	460b      	mov	r3, r1
 80089d2:	81bb      	strh	r3, [r7, #12]
 80089d4:	4613      	mov	r3, r2
 80089d6:	817b      	strh	r3, [r7, #10]
    lv_coord_t thickness = style->line.width;
 80089d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    if(thickness > radius) thickness = radius;
 80089e0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80089e4:	897b      	ldrh	r3, [r7, #10]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	dd02      	ble.n	80089f0 <lv_draw_arc+0x2c>
 80089ea:	897b      	ldrh	r3, [r7, #10]
 80089ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t r_out = radius;
 80089f0:	897b      	ldrh	r3, [r7, #10]
 80089f2:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t r_in  = r_out - thickness;
 80089f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80089f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	873b      	strh	r3, [r7, #56]	; 0x38
    int16_t deg_base;
    int16_t deg;
    lv_coord_t x_start[4];
    lv_coord_t x_end[4];

    lv_color_t color = style->line.color;
 8008a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008a04:	823b      	strh	r3, [r7, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8008a06:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a0a:	2bff      	cmp	r3, #255	; 0xff
 8008a0c:	d102      	bne.n	8008a14 <lv_draw_arc+0x50>
 8008a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a10:	7a1b      	ldrb	r3, [r3, #8]
 8008a12:	e00b      	b.n	8008a2c <lv_draw_arc+0x68>
 8008a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a16:	7a1b      	ldrb	r3, [r3, #8]
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	fb12 f303 	smulbb	r3, r2, r3
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool (*deg_test)(uint16_t, uint16_t, uint16_t);
    if(start_angle <= end_angle)
 8008a30:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008a34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d802      	bhi.n	8008a42 <lv_draw_arc+0x7e>
        deg_test = deg_test_norm;
 8008a3c:	4bae      	ldr	r3, [pc, #696]	; (8008cf8 <lv_draw_arc+0x334>)
 8008a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a40:	e001      	b.n	8008a46 <lv_draw_arc+0x82>
    else
        deg_test = deg_test_inv;
 8008a42:	4bae      	ldr	r3, [pc, #696]	; (8008cfc <lv_draw_arc+0x338>)
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40

    if(deg_test(270, start_angle, end_angle))
 8008a46:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008a4a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a50:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a54:	4798      	blx	r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d017      	beq.n	8008a8c <lv_draw_arc+0xc8>
        hor_line(center_x - r_out + 1, center_y, mask, thickness - 1, color, opa); // Left Middle
 8008a5c:	89fa      	ldrh	r2, [r7, #14]
 8008a5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	b218      	sxth	r0, r3
 8008a6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	b21a      	sxth	r2, r3
 8008a74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008a78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	8a3b      	ldrh	r3, [r7, #16]
 8008a80:	f8ad 3000 	strh.w	r3, [sp]
 8008a84:	4613      	mov	r3, r2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	f000 faf4 	bl	8009074 <hor_line>
    if(deg_test(90, start_angle, end_angle))
 8008a8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008a90:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a96:	205a      	movs	r0, #90	; 0x5a
 8008a98:	4798      	blx	r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d015      	beq.n	8008acc <lv_draw_arc+0x108>
        hor_line(center_x + r_in, center_y, mask, thickness - 1, color, opa); // Right Middle
 8008aa0:	89fa      	ldrh	r2, [r7, #14]
 8008aa2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008aa4:	4413      	add	r3, r2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	b218      	sxth	r0, r3
 8008aaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	b21a      	sxth	r2, r3
 8008ab4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	8a3b      	ldrh	r3, [r7, #16]
 8008ac0:	f8ad 3000 	strh.w	r3, [sp]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	f000 fad4 	bl	8009074 <hor_line>
    if(deg_test(180, start_angle, end_angle))
 8008acc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008ad0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad6:	20b4      	movs	r0, #180	; 0xb4
 8008ad8:	4798      	blx	r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d017      	beq.n	8008b10 <lv_draw_arc+0x14c>
        ver_line(center_x, center_y - r_out + 1, mask, thickness - 1, color, opa); // Top Middle
 8008ae0:	89ba      	ldrh	r2, [r7, #12]
 8008ae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3301      	adds	r3, #1
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	b219      	sxth	r1, r3
 8008aee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	b21a      	sxth	r2, r3
 8008af8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8008afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	8a3b      	ldrh	r3, [r7, #16]
 8008b04:	f8ad 3000 	strh.w	r3, [sp]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	f000 fa8a 	bl	8009024 <ver_line>
    if(deg_test(0, start_angle, end_angle))
 8008b10:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b14:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	4798      	blx	r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d015      	beq.n	8008b50 <lv_draw_arc+0x18c>
        ver_line(center_x, center_y + r_in, mask, thickness - 1, color, opa); // Bottom middle
 8008b24:	89ba      	ldrh	r2, [r7, #12]
 8008b26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008b28:	4413      	add	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	b219      	sxth	r1, r3
 8008b2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	b21a      	sxth	r2, r3
 8008b38:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8008b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	8a3b      	ldrh	r3, [r7, #16]
 8008b44:	f8ad 3000 	strh.w	r3, [sp]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	f000 fa6a 	bl	8009024 <ver_line>

    uint32_t r_out_sqr = r_out * r_out;
 8008b50:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008b54:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t r_in_sqr  = r_in * r_in;
 8008b5e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8008b62:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8008b66:	fb02 f303 	mul.w	r3, r2, r3
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t xi;
    int16_t yi;
    for(yi = -r_out; yi < 0; yi++) {
 8008b6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008b6e:	425b      	negs	r3, r3
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008b74:	e1a8      	b.n	8008ec8 <lv_draw_arc+0x504>
        x_start[0] = LV_COORD_MIN;
 8008b76:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b7a:	83bb      	strh	r3, [r7, #28]
        x_start[1] = LV_COORD_MIN;
 8008b7c:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b80:	83fb      	strh	r3, [r7, #30]
        x_start[2] = LV_COORD_MIN;
 8008b82:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b86:	843b      	strh	r3, [r7, #32]
        x_start[3] = LV_COORD_MIN;
 8008b88:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b8c:	847b      	strh	r3, [r7, #34]	; 0x22
        x_end[0]   = LV_COORD_MIN;
 8008b8e:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b92:	82bb      	strh	r3, [r7, #20]
        x_end[1]   = LV_COORD_MIN;
 8008b94:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b98:	82fb      	strh	r3, [r7, #22]
        x_end[2]   = LV_COORD_MIN;
 8008b9a:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b9e:	833b      	strh	r3, [r7, #24]
        x_end[3]   = LV_COORD_MIN;
 8008ba0:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008ba4:	837b      	strh	r3, [r7, #26]
        for(xi = -r_out; xi < 0; xi++) {
 8008ba6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008ba8:	425b      	negs	r3, r3
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bae:	e0c4      	b.n	8008d3a <lv_draw_arc+0x376>

            uint32_t r_act_sqr = xi * xi + yi * yi;
 8008bb0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008bb4:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8008bb8:	fb02 f203 	mul.w	r2, r2, r3
 8008bbc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008bc0:	f9b7 103c 	ldrsh.w	r1, [r7, #60]	; 0x3c
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
            if(r_act_sqr > r_out_sqr) continue;
 8008bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	f200 80ab 	bhi.w	8008d2c <lv_draw_arc+0x368>

            deg_base = fast_atan2(xi, yi) - 180;
 8008bd6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008bda:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f97d 	bl	8008ee0 <fast_atan2>
 8008be6:	4603      	mov	r3, r0
 8008be8:	3bb4      	subs	r3, #180	; 0xb4
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	84fb      	strh	r3, [r7, #38]	; 0x26

            deg = 180 + deg_base;
 8008bee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bf0:	33b4      	adds	r3, #180	; 0xb4
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008bf6:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008bf8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bfc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c02:	4798      	blx	r3
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <lv_draw_arc+0x256>
                if(x_start[0] == LV_COORD_MIN) x_start[0] = xi;
 8008c0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c0e:	4a3c      	ldr	r2, [pc, #240]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d111      	bne.n	8008c38 <lv_draw_arc+0x274>
 8008c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c16:	83bb      	strh	r3, [r7, #28]
 8008c18:	e00e      	b.n	8008c38 <lv_draw_arc+0x274>
            } else if(x_start[0] != LV_COORD_MIN && x_end[0] == LV_COORD_MIN) {
 8008c1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c1e:	4a38      	ldr	r2, [pc, #224]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d009      	beq.n	8008c38 <lv_draw_arc+0x274>
 8008c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c28:	4a35      	ldr	r2, [pc, #212]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d104      	bne.n	8008c38 <lv_draw_arc+0x274>
                x_end[0] = xi - 1;
 8008c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	b21b      	sxth	r3, r3
 8008c36:	82bb      	strh	r3, [r7, #20]
            }

            deg = 360 - deg_base;
 8008c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c3a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008c42:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008c44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c48:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <lv_draw_arc+0x2a2>
                if(x_start[1] == LV_COORD_MIN) x_start[1] = xi;
 8008c56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008c5a:	4a29      	ldr	r2, [pc, #164]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d111      	bne.n	8008c84 <lv_draw_arc+0x2c0>
 8008c60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c62:	83fb      	strh	r3, [r7, #30]
 8008c64:	e00e      	b.n	8008c84 <lv_draw_arc+0x2c0>
            } else if(x_start[1] != LV_COORD_MIN && x_end[1] == LV_COORD_MIN) {
 8008c66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008c6a:	4a25      	ldr	r2, [pc, #148]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d009      	beq.n	8008c84 <lv_draw_arc+0x2c0>
 8008c70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c74:	4a22      	ldr	r2, [pc, #136]	; (8008d00 <lv_draw_arc+0x33c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d104      	bne.n	8008c84 <lv_draw_arc+0x2c0>
                x_end[1] = xi - 1;
 8008c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	b21b      	sxth	r3, r3
 8008c82:	82fb      	strh	r3, [r7, #22]
            }

            deg = 180 - deg_base;
 8008c84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c86:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008c8e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008c90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c94:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9a:	4798      	blx	r3
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d007      	beq.n	8008cb2 <lv_draw_arc+0x2ee>
                if(x_start[2] == LV_COORD_MIN) x_start[2] = xi;
 8008ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <lv_draw_arc+0x33c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d111      	bne.n	8008cd0 <lv_draw_arc+0x30c>
 8008cac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cae:	843b      	strh	r3, [r7, #32]
 8008cb0:	e00e      	b.n	8008cd0 <lv_draw_arc+0x30c>
            } else if(x_start[2] != LV_COORD_MIN && x_end[2] == LV_COORD_MIN) {
 8008cb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008cb6:	4a12      	ldr	r2, [pc, #72]	; (8008d00 <lv_draw_arc+0x33c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d009      	beq.n	8008cd0 <lv_draw_arc+0x30c>
 8008cbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008cc0:	4a0f      	ldr	r2, [pc, #60]	; (8008d00 <lv_draw_arc+0x33c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d104      	bne.n	8008cd0 <lv_draw_arc+0x30c>
                x_end[2] = xi - 1;
 8008cc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	833b      	strh	r3, [r7, #24]
            }

            deg = deg_base;
 8008cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008cd4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008cd6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008cda:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce0:	4798      	blx	r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00d      	beq.n	8008d04 <lv_draw_arc+0x340>
                if(x_start[3] == LV_COORD_MIN) x_start[3] = xi;
 8008ce8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008cec:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <lv_draw_arc+0x33c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d117      	bne.n	8008d22 <lv_draw_arc+0x35e>
 8008cf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cf4:	847b      	strh	r3, [r7, #34]	; 0x22
 8008cf6:	e014      	b.n	8008d22 <lv_draw_arc+0x35e>
 8008cf8:	080090c5 	.word	0x080090c5
 8008cfc:	080090f9 	.word	0x080090f9
 8008d00:	ffff83e8 	.word	0xffff83e8
            } else if(x_start[3] != LV_COORD_MIN && x_end[3] == LV_COORD_MIN) {
 8008d04:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008d08:	4a74      	ldr	r2, [pc, #464]	; (8008edc <lv_draw_arc+0x518>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d009      	beq.n	8008d22 <lv_draw_arc+0x35e>
 8008d0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008d12:	4a72      	ldr	r2, [pc, #456]	; (8008edc <lv_draw_arc+0x518>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d104      	bne.n	8008d22 <lv_draw_arc+0x35e>
                x_end[3] = xi - 1;
 8008d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	837b      	strh	r3, [r7, #26]
            }

            if(r_act_sqr < r_in_sqr)
 8008d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d30d      	bcc.n	8008d46 <lv_draw_arc+0x382>
 8008d2a:	e000      	b.n	8008d2e <lv_draw_arc+0x36a>
            if(r_act_sqr > r_out_sqr) continue;
 8008d2c:	bf00      	nop
        for(xi = -r_out; xi < 0; xi++) {
 8008d2e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	3301      	adds	r3, #1
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d3a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f6ff af36 	blt.w	8008bb0 <lv_draw_arc+0x1ec>
 8008d44:	e000      	b.n	8008d48 <lv_draw_arc+0x384>
                break; /*No need to continue the iteration in x once we found the inner edge of the
 8008d46:	bf00      	nop
                          arc*/
        }

        if(x_start[0] != LV_COORD_MIN) {
 8008d48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d4c:	4a63      	ldr	r2, [pc, #396]	; (8008edc <lv_draw_arc+0x518>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d028      	beq.n	8008da4 <lv_draw_arc+0x3e0>
            if(x_end[0] == LV_COORD_MIN) x_end[0] = xi - 1;
 8008d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d56:	4a61      	ldr	r2, [pc, #388]	; (8008edc <lv_draw_arc+0x518>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d104      	bne.n	8008d66 <lv_draw_arc+0x3a2>
 8008d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	b21b      	sxth	r3, r3
 8008d64:	82bb      	strh	r3, [r7, #20]
            hor_line(center_x + x_start[0], center_y + yi, mask, x_end[0] - x_start[0], color, opa);
 8008d66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
 8008d6e:	4413      	add	r3, r2
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b218      	sxth	r0, r3
 8008d74:	89ba      	ldrh	r2, [r7, #12]
 8008d76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d78:	4413      	add	r3, r2
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	b219      	sxth	r1, r3
 8008d7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	b21a      	sxth	r2, r3
 8008d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	8a3b      	ldrh	r3, [r7, #16]
 8008d98:	f8ad 3000 	strh.w	r3, [sp]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	f000 f968 	bl	8009074 <hor_line>
        }

        if(x_start[1] != LV_COORD_MIN) {
 8008da4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008da8:	4a4c      	ldr	r2, [pc, #304]	; (8008edc <lv_draw_arc+0x518>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d028      	beq.n	8008e00 <lv_draw_arc+0x43c>
            if(x_end[1] == LV_COORD_MIN) x_end[1] = xi - 1;
 8008dae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008db2:	4a4a      	ldr	r2, [pc, #296]	; (8008edc <lv_draw_arc+0x518>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d104      	bne.n	8008dc2 <lv_draw_arc+0x3fe>
 8008db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	82fb      	strh	r3, [r7, #22]
            hor_line(center_x + x_start[1], center_y - yi, mask, x_end[1] - x_start[1], color, opa);
 8008dc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	4413      	add	r3, r2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	b218      	sxth	r0, r3
 8008dd0:	89ba      	ldrh	r2, [r7, #12]
 8008dd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	b219      	sxth	r1, r3
 8008dda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	b21a      	sxth	r2, r3
 8008dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	8a3b      	ldrh	r3, [r7, #16]
 8008df4:	f8ad 3000 	strh.w	r3, [sp]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f000 f93a 	bl	8009074 <hor_line>
        }

        if(x_start[2] != LV_COORD_MIN) {
 8008e00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008e04:	4a35      	ldr	r2, [pc, #212]	; (8008edc <lv_draw_arc+0x518>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d029      	beq.n	8008e5e <lv_draw_arc+0x49a>
            if(x_end[2] == LV_COORD_MIN) x_end[2] = xi - 1;
 8008e0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e0e:	4a33      	ldr	r2, [pc, #204]	; (8008edc <lv_draw_arc+0x518>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d104      	bne.n	8008e1e <lv_draw_arc+0x45a>
 8008e14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	833b      	strh	r3, [r7, #24]
            hor_line(center_x - x_end[2], center_y + yi, mask, LV_MATH_ABS(x_end[2] - x_start[2]), color, opa);
 8008e1e:	89fa      	ldrh	r2, [r7, #14]
 8008e20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b218      	sxth	r0, r3
 8008e2c:	89ba      	ldrh	r2, [r7, #12]
 8008e2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e30:	4413      	add	r3, r2
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	b219      	sxth	r1, r3
 8008e36:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfb8      	it	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	b21a      	sxth	r2, r3
 8008e4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	8a3b      	ldrh	r3, [r7, #16]
 8008e52:	f8ad 3000 	strh.w	r3, [sp]
 8008e56:	4613      	mov	r3, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f000 f90b 	bl	8009074 <hor_line>
        }

        if(x_start[3] != LV_COORD_MIN) {
 8008e5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008e62:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <lv_draw_arc+0x518>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d029      	beq.n	8008ebc <lv_draw_arc+0x4f8>
            if(x_end[3] == LV_COORD_MIN) x_end[3] = xi - 1;
 8008e68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e6c:	4a1b      	ldr	r2, [pc, #108]	; (8008edc <lv_draw_arc+0x518>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d104      	bne.n	8008e7c <lv_draw_arc+0x4b8>
 8008e72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	b21b      	sxth	r3, r3
 8008e7a:	837b      	strh	r3, [r7, #26]
            hor_line(center_x - x_end[3], center_y - yi, mask, LV_MATH_ABS(x_end[3] - x_start[3]), color, opa);
 8008e7c:	89fa      	ldrh	r2, [r7, #14]
 8008e7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	b218      	sxth	r0, r3
 8008e8a:	89ba      	ldrh	r2, [r7, #12]
 8008e8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	b219      	sxth	r1, r3
 8008e94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfb8      	it	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	b21a      	sxth	r2, r3
 8008ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	8a3b      	ldrh	r3, [r7, #16]
 8008eb0:	f8ad 3000 	strh.w	r3, [sp]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	f000 f8dc 	bl	8009074 <hor_line>
    for(yi = -r_out; yi < 0; yi++) {
 8008ebc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008ec8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f6ff ae52 	blt.w	8008b76 <lv_draw_arc+0x1b2>
#if LV_ANTIALIAS
        /*TODO*/

#endif
    }
}
 8008ed2:	bf00      	nop
 8008ed4:	3748      	adds	r7, #72	; 0x48
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	ffff83e8 	.word	0xffff83e8

08008ee0 <fast_atan2>:

static uint16_t fast_atan2(int x, int y)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
    // signed int y;            // (and they will be destroyed)
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	77fb      	strb	r3, [r7, #31]
    if(x < 0) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	da05      	bge.n	8008f00 <fast_atan2+0x20>
        negflag += 0x01; // x flag bit
 8008ef4:	7ffb      	ldrb	r3, [r7, #31]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	77fb      	strb	r3, [r7, #31]
        x = (0 - x);     // is now +
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	425b      	negs	r3, r3
 8008efe:	607b      	str	r3, [r7, #4]
    }
    ux = x; // copy to unsigned var before multiply
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	617b      	str	r3, [r7, #20]
    if(y < 0) {
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da05      	bge.n	8008f16 <fast_atan2+0x36>
        negflag += 0x02; // y flag bit
 8008f0a:	7ffb      	ldrb	r3, [r7, #31]
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	77fb      	strb	r3, [r7, #31]
        y = (0 - y);     // is now +
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	425b      	negs	r3, r3
 8008f14:	603b      	str	r3, [r7, #0]
    }
    uy = y; // copy to unsigned var before multiply
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	613b      	str	r3, [r7, #16]

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d90d      	bls.n	8008f3e <fast_atan2+0x5e>
        degree = (uy * 45) / ux; // degree result will be 0-45 range
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4613      	mov	r3, r2
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	4413      	add	r3, r2
 8008f2a:	011a      	lsls	r2, r3, #4
 8008f2c:	1ad2      	subs	r2, r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	61bb      	str	r3, [r7, #24]
        negflag += 0x10;         // octant flag bit
 8008f36:	7ffb      	ldrb	r3, [r7, #31]
 8008f38:	3310      	adds	r3, #16
 8008f3a:	77fb      	strb	r3, [r7, #31]
 8008f3c:	e009      	b.n	8008f52 <fast_atan2+0x72>
    } else {
        degree = (ux * 45) / uy; // degree result will be 0-45 range
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4613      	mov	r3, r2
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	4413      	add	r3, r2
 8008f46:	011a      	lsls	r2, r3, #4
 8008f48:	1ad2      	subs	r2, r2, r3
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	61bb      	str	r3, [r7, #24]
    }

    // 2. Compensate for the 4 degree error curve
    comp       = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	77bb      	strb	r3, [r7, #30]
    tempdegree = degree;  // use an unsigned char for speed!
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	73fb      	strb	r3, [r7, #15]
    if(tempdegree > 22) { // if top half of range
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b16      	cmp	r3, #22
 8008f5e:	d918      	bls.n	8008f92 <fast_atan2+0xb2>
        if(tempdegree <= 44) comp++;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	2b2c      	cmp	r3, #44	; 0x2c
 8008f64:	d802      	bhi.n	8008f6c <fast_atan2+0x8c>
 8008f66:	7fbb      	ldrb	r3, [r7, #30]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 41) comp++;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b29      	cmp	r3, #41	; 0x29
 8008f70:	d802      	bhi.n	8008f78 <fast_atan2+0x98>
 8008f72:	7fbb      	ldrb	r3, [r7, #30]
 8008f74:	3301      	adds	r3, #1
 8008f76:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 37) comp++;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b25      	cmp	r3, #37	; 0x25
 8008f7c:	d802      	bhi.n	8008f84 <fast_atan2+0xa4>
 8008f7e:	7fbb      	ldrb	r3, [r7, #30]
 8008f80:	3301      	adds	r3, #1
 8008f82:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 32) comp++; // max is 4 degrees compensated
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d81b      	bhi.n	8008fc2 <fast_atan2+0xe2>
 8008f8a:	7fbb      	ldrb	r3, [r7, #30]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	77bb      	strb	r3, [r7, #30]
 8008f90:	e017      	b.n	8008fc2 <fast_atan2+0xe2>
    } else {                         // else is lower half of range
        if(tempdegree >= 2) comp++;
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d902      	bls.n	8008f9e <fast_atan2+0xbe>
 8008f98:	7fbb      	ldrb	r3, [r7, #30]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 6) comp++;
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d902      	bls.n	8008faa <fast_atan2+0xca>
 8008fa4:	7fbb      	ldrb	r3, [r7, #30]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 10) comp++;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	d902      	bls.n	8008fb6 <fast_atan2+0xd6>
 8008fb0:	7fbb      	ldrb	r3, [r7, #30]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 15) comp++; // max is 4 degrees compensated
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	2b0e      	cmp	r3, #14
 8008fba:	d902      	bls.n	8008fc2 <fast_atan2+0xe2>
 8008fbc:	7fbb      	ldrb	r3, [r7, #30]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	77bb      	strb	r3, [r7, #30]
    }
    degree += comp; // degree is now accurate to +/- 1 degree!
 8008fc2:	7fbb      	ldrb	r3, [r7, #30]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <fast_atan2+0xfc>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8008fda:	61bb      	str	r3, [r7, #24]

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) {   // if -Y
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <fast_atan2+0x122>
        if(negflag & 0x01) // if -Y -X
 8008fe6:	7ffb      	ldrb	r3, [r7, #31]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <fast_atan2+0x118>
            degree = (180 + degree);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	33b4      	adds	r3, #180	; 0xb4
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e00d      	b.n	8009014 <fast_atan2+0x134>
        else // else is -Y +X
            degree = (180 - degree);
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008ffe:	61bb      	str	r3, [r7, #24]
 8009000:	e008      	b.n	8009014 <fast_atan2+0x134>
    } else {               // else is +Y
        if(negflag & 0x01) // if +Y -X
 8009002:	7ffb      	ldrb	r3, [r7, #31]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <fast_atan2+0x134>
            degree = (360 - degree);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8009012:	61bb      	str	r3, [r7, #24]
    }
    return degree;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	b29b      	uxth	r3, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	3724      	adds	r7, #36	; 0x24
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <ver_line>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void ver_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b089      	sub	sp, #36	; 0x24
 8009028:	af02      	add	r7, sp, #8
 800902a:	60ba      	str	r2, [r7, #8]
 800902c:	461a      	mov	r2, r3
 800902e:	4603      	mov	r3, r0
 8009030:	81fb      	strh	r3, [r7, #14]
 8009032:	460b      	mov	r3, r1
 8009034:	81bb      	strh	r3, [r7, #12]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x, y + len);
 800903a:	89ba      	ldrh	r2, [r7, #12]
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	4413      	add	r3, r2
 8009040:	b29b      	uxth	r3, r3
 8009042:	b21b      	sxth	r3, r3
 8009044:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8009048:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800904c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009050:	f107 0010 	add.w	r0, r7, #16
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	4623      	mov	r3, r4
 8009058:	f009 fe08 	bl	8012c6c <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 800905c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009060:	f107 0010 	add.w	r0, r7, #16
 8009064:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	f000 f99f 	bl	80093aa <lv_draw_fill>
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}

08009074 <hor_line>:

static void hor_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b089      	sub	sp, #36	; 0x24
 8009078:	af02      	add	r7, sp, #8
 800907a:	60ba      	str	r2, [r7, #8]
 800907c:	461a      	mov	r2, r3
 800907e:	4603      	mov	r3, r0
 8009080:	81fb      	strh	r3, [r7, #14]
 8009082:	460b      	mov	r3, r1
 8009084:	81bb      	strh	r3, [r7, #12]
 8009086:	4613      	mov	r3, r2
 8009088:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x + len, y);
 800908a:	89fa      	ldrh	r2, [r7, #14]
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	4413      	add	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	b21c      	sxth	r4, r3
 8009094:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009098:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800909c:	f107 0010 	add.w	r0, r7, #16
 80090a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4623      	mov	r3, r4
 80090a8:	f009 fde0 	bl	8012c6c <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 80090ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090b0:	f107 0010 	add.w	r0, r7, #16
 80090b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	f000 f977 	bl	80093aa <lv_draw_fill>
}
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd90      	pop	{r4, r7, pc}

080090c4 <deg_test_norm>:

static bool deg_test_norm(uint16_t deg, uint16_t start, uint16_t end)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	80fb      	strh	r3, [r7, #6]
 80090ce:	460b      	mov	r3, r1
 80090d0:	80bb      	strh	r3, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	807b      	strh	r3, [r7, #2]
    if(deg >= start && deg <= end)
 80090d6:	88fa      	ldrh	r2, [r7, #6]
 80090d8:	88bb      	ldrh	r3, [r7, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d305      	bcc.n	80090ea <deg_test_norm+0x26>
 80090de:	88fa      	ldrh	r2, [r7, #6]
 80090e0:	887b      	ldrh	r3, [r7, #2]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d801      	bhi.n	80090ea <deg_test_norm+0x26>
        return true;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <deg_test_norm+0x28>
    else
        return false;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <deg_test_inv>:

static bool deg_test_inv(uint16_t deg, uint16_t start, uint16_t end)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	80fb      	strh	r3, [r7, #6]
 8009102:	460b      	mov	r3, r1
 8009104:	80bb      	strh	r3, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	807b      	strh	r3, [r7, #2]
    if(deg >= start || deg <= end) {
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	88bb      	ldrh	r3, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d203      	bcs.n	800911a <deg_test_inv+0x22>
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	887b      	ldrh	r3, [r7, #2]
 8009116:	429a      	cmp	r2, r3
 8009118:	d801      	bhi.n	800911e <deg_test_inv+0x26>
        return true;
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <deg_test_inv+0x28>
    } else
        return false;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	80b8      	strh	r0, [r7, #4]
 8009134:	8039      	strh	r1, [r7, #0]
 8009136:	4613      	mov	r3, r2
 8009138:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800913a:	793b      	ldrb	r3, [r7, #4]
 800913c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009140:	b2db      	uxtb	r3, r3
 8009142:	b29a      	uxth	r2, r3
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	b29b      	uxth	r3, r3
 8009148:	fb12 f303 	smulbb	r3, r2, r3
 800914c:	b29a      	uxth	r2, r3
 800914e:	783b      	ldrb	r3, [r7, #0]
 8009150:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009154:	b2db      	uxtb	r3, r3
 8009156:	b299      	uxth	r1, r3
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800915e:	b29b      	uxth	r3, r3
 8009160:	fb11 f303 	smulbb	r3, r1, r3
 8009164:	b29b      	uxth	r3, r3
 8009166:	4413      	add	r3, r2
 8009168:	b29b      	uxth	r3, r3
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	b29b      	uxth	r3, r3
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	b2da      	uxtb	r2, r3
 8009174:	7a3b      	ldrb	r3, [r7, #8]
 8009176:	f362 03c7 	bfi	r3, r2, #3, #5
 800917a:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800917c:	793b      	ldrb	r3, [r7, #4]
 800917e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009182:	b2db      	uxtb	r3, r3
 8009184:	b29b      	uxth	r3, r3
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	b29a      	uxth	r2, r3
 800918a:	797b      	ldrb	r3, [r7, #5]
 800918c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009190:	b2db      	uxtb	r3, r3
 8009192:	b29b      	uxth	r3, r3
 8009194:	4413      	add	r3, r2
 8009196:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 8009198:	783b      	ldrb	r3, [r7, #0]
 800919a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	787b      	ldrb	r3, [r7, #1]
 80091a8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4413      	add	r3, r2
 80091b2:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	89fa      	ldrh	r2, [r7, #14]
 80091ba:	fb12 f303 	smulbb	r3, r2, r3
 80091be:	b29a      	uxth	r2, r3
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	89b9      	ldrh	r1, [r7, #12]
 80091ca:	fb11 f303 	smulbb	r3, r1, r3
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 80091d8:	897b      	ldrh	r3, [r7, #10]
 80091da:	08db      	lsrs	r3, r3, #3
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	7a3b      	ldrb	r3, [r7, #8]
 80091e6:	f362 0302 	bfi	r3, r2, #0, #3
 80091ea:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 80091ec:	897b      	ldrh	r3, [r7, #10]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	7a7b      	ldrb	r3, [r7, #9]
 80091f6:	f362 1347 	bfi	r3, r2, #5, #3
 80091fa:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80091fc:	797b      	ldrb	r3, [r7, #5]
 80091fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009202:	b2db      	uxtb	r3, r3
 8009204:	b29a      	uxth	r2, r3
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	b29b      	uxth	r3, r3
 800920a:	fb12 f303 	smulbb	r3, r2, r3
 800920e:	b29a      	uxth	r2, r3
 8009210:	787b      	ldrb	r3, [r7, #1]
 8009212:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009216:	b2db      	uxtb	r3, r3
 8009218:	b299      	uxth	r1, r3
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009220:	b29b      	uxth	r3, r3
 8009222:	fb11 f303 	smulbb	r3, r1, r3
 8009226:	b29b      	uxth	r3, r3
 8009228:	4413      	add	r3, r2
 800922a:	b29b      	uxth	r3, r3
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	b29b      	uxth	r3, r3
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	b2da      	uxtb	r2, r3
 8009236:	7a7b      	ldrb	r3, [r7, #9]
 8009238:	f362 0304 	bfi	r3, r2, #0, #5
 800923c:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800923e:	893b      	ldrh	r3, [r7, #8]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800925a:	b29a      	uxth	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009262:	b29b      	uxth	r3, r3
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	b29b      	uxth	r3, r3
 8009268:	3301      	adds	r3, #1
 800926a:	b29b      	uxth	r3, r3
 800926c:	b21b      	sxth	r3, r3
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800927a:	b5b0      	push	{r4, r5, r7, lr}
 800927c:	b08e      	sub	sp, #56	; 0x38
 800927e:	af04      	add	r7, sp, #16
 8009280:	60ba      	str	r2, [r7, #8]
 8009282:	80bb      	strh	r3, [r7, #4]
 8009284:	4603      	mov	r3, r0
 8009286:	81fb      	strh	r3, [r7, #14]
 8009288:	460b      	mov	r3, r1
 800928a:	81bb      	strh	r3, [r7, #12]

    if(opa < LV_OPA_MIN) return;
 800928c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009290:	2b0f      	cmp	r3, #15
 8009292:	f240 8084 	bls.w	800939e <lv_draw_px+0x124>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009296:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800929a:	2bfb      	cmp	r3, #251	; 0xfb
 800929c:	d902      	bls.n	80092a4 <lv_draw_px+0x2a>
 800929e:	23ff      	movs	r3, #255	; 0xff
 80092a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	db77      	blt.n	80093a2 <lv_draw_px+0x128>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80092bc:	429a      	cmp	r2, r3
 80092be:	dc70      	bgt.n	80093a2 <lv_draw_px+0x128>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	db69      	blt.n	80093a2 <lv_draw_px+0x128>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80092d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80092d8:	429a      	cmp	r2, r3
 80092da:	dc62      	bgt.n	80093a2 <lv_draw_px+0x128>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80092dc:	f7fe fae2 	bl	80078a4 <lv_refr_get_disp_refreshing>
 80092e0:	6278      	str	r0, [r7, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80092e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092e4:	f009 f9da 	bl	801269c <lv_disp_get_buf>
 80092e8:	6238      	str	r0, [r7, #32]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	3310      	adds	r3, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff ffac 	bl	800924c <lv_area_get_width>
 80092f4:	4603      	mov	r3, r0
 80092f6:	61fb      	str	r3, [r7, #28]

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 80092f8:	89fa      	ldrh	r2, [r7, #14]
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009300:	b29b      	uxth	r3, r3
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	b29b      	uxth	r3, r3
 8009306:	81fb      	strh	r3, [r7, #14]
    y -= vdb->area.y1;
 8009308:	89ba      	ldrh	r2, [r7, #12]
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009310:	b29b      	uxth	r3, r3
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	b29b      	uxth	r3, r3
 8009316:	81bb      	strh	r3, [r7, #12]

    if(disp->driver.set_px_cb) {
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d014      	beq.n	800934a <lv_draw_px+0xd0>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	695c      	ldr	r4, [r3, #20]
 8009324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	6899      	ldr	r1, [r3, #8]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	b21a      	sxth	r2, r3
 800932e:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8009332:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009336:	9302      	str	r3, [sp, #8]
 8009338:	88bb      	ldrh	r3, [r7, #4]
 800933a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800933e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462b      	mov	r3, r5
 8009346:	47a0      	blx	r4
 8009348:	e02c      	b.n	80093a4 <lv_draw_px+0x12a>
    } else {
        bool scr_transp = false;
 800934a:	2300      	movs	r3, #0
 800934c:	76fb      	strb	r3, [r7, #27]
#if LV_COLOR_SCREEN_TRANSP
        scr_transp = disp->driver.screen_transp;
#endif

        lv_color_t * vdb_px_p = vdb->buf_act;
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	617b      	str	r3, [r7, #20]
        vdb_px_p += y * vdb_width + x;
 8009354:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	fb02 f203 	mul.w	r2, r2, r3
 800935e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009362:	4413      	add	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4413      	add	r3, r2
 800936a:	617b      	str	r3, [r7, #20]

        if(scr_transp == false) {
 800936c:	7efb      	ldrb	r3, [r7, #27]
 800936e:	f083 0301 	eor.w	r3, r3, #1
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	d015      	beq.n	80093a4 <lv_draw_px+0x12a>
            if(opa == LV_OPA_COVER) {
 8009378:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800937c:	2bff      	cmp	r3, #255	; 0xff
 800937e:	d103      	bne.n	8009388 <lv_draw_px+0x10e>
                *vdb_px_p = color;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	88ba      	ldrh	r2, [r7, #4]
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	e00d      	b.n	80093a4 <lv_draw_px+0x12a>
            } else {
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8009388:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	8819      	ldrh	r1, [r3, #0]
 8009390:	88b8      	ldrh	r0, [r7, #4]
 8009392:	f7ff fecb 	bl	800912c <lv_color_mix>
 8009396:	4602      	mov	r2, r0
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	801a      	strh	r2, [r3, #0]
 800939c:	e002      	b.n	80093a4 <lv_draw_px+0x12a>
    if(opa < LV_OPA_MIN) return;
 800939e:	bf00      	nop
 80093a0:	e000      	b.n	80093a4 <lv_draw_px+0x12a>
        return;
 80093a2:	bf00      	nop
#if LV_COLOR_DEPTH == 32
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 80093a4:	3728      	adds	r7, #40	; 0x28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bdb0      	pop	{r4, r5, r7, pc}

080093aa <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b090      	sub	sp, #64	; 0x40
 80093ae:	af02      	add	r7, sp, #8
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	80ba      	strh	r2, [r7, #4]
 80093b6:	71fb      	strb	r3, [r7, #7]
    if(opa < LV_OPA_MIN) return;
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b0f      	cmp	r3, #15
 80093bc:	d968      	bls.n	8009490 <lv_draw_fill+0xe6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	2bfb      	cmp	r3, #251	; 0xfb
 80093c2:	d901      	bls.n	80093c8 <lv_draw_fill+0x1e>
 80093c4:	23ff      	movs	r3, #255	; 0xff
 80093c6:	71fb      	strb	r3, [r7, #7]
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80093c8:	f107 031c 	add.w	r3, r7, #28
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f009 fce3 	bl	8012d9c <lv_area_intersect>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 80093dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093e0:	f083 0301 	eor.w	r3, r3, #1
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d154      	bne.n	8009494 <lv_draw_fill+0xea>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80093ea:	f7fe fa5b 	bl	80078a4 <lv_refr_get_disp_refreshing>
 80093ee:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80093f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f2:	f009 f953 	bl	801269c <lv_disp_get_buf>
 80093f6:	62f8      	str	r0, [r7, #44]	; 0x2c

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80093f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009404:	b29b      	uxth	r3, r3
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	b29b      	uxth	r3, r3
 800940a:	b21b      	sxth	r3, r3
 800940c:	82bb      	strh	r3, [r7, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800940e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009412:	b29a      	uxth	r2, r3
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800941a:	b29b      	uxth	r3, r3
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	b29b      	uxth	r3, r3
 8009420:	b21b      	sxth	r3, r3
 8009422:	82fb      	strh	r3, [r7, #22]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009428:	b29a      	uxth	r2, r3
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009430:	b29b      	uxth	r3, r3
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	b29b      	uxth	r3, r3
 8009436:	b21b      	sxth	r3, r3
 8009438:	833b      	strh	r3, [r7, #24]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800943a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800943e:	b29a      	uxth	r2, r3
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009446:	b29b      	uxth	r3, r3
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	b29b      	uxth	r3, r3
 800944c:	b21b      	sxth	r3, r3
 800944e:	837b      	strh	r3, [r7, #26]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t vdb_width       = lv_area_get_width(&vdb->area);
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fef6 	bl	800924c <lv_area_get_width>
 8009460:	4603      	mov	r3, r0
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
    /*Move the vdb_tmp to the first row*/
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8009464:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009468:	461a      	mov	r2, r3
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	fb03 f302 	mul.w	r3, r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009474:	4413      	add	r3, r2
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
        else {
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
        }
    }
#else
    sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	6898      	ldr	r0, [r3, #8]
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	b219      	sxth	r1, r3
 8009480:	f107 0214 	add.w	r2, r7, #20
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	88bb      	ldrh	r3, [r7, #4]
 800948a:	f000 fd4f 	bl	8009f2c <sw_color_fill>
 800948e:	e002      	b.n	8009496 <lv_draw_fill+0xec>
    if(opa < LV_OPA_MIN) return;
 8009490:	bf00      	nop
 8009492:	e000      	b.n	8009496 <lv_draw_fill+0xec>
        return;
 8009494:	bf00      	nop
#endif
}
 8009496:	3738      	adds	r7, #56	; 0x38
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	b0a1      	sub	sp, #132	; 0x84
 80094a0:	af04      	add	r7, sp, #16
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80094aa:	2300      	movs	r3, #0
 80094ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80094b0:	23ff      	movs	r3, #255	; 0xff
 80094b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80094b6:	4bbe      	ldr	r3, [pc, #760]	; (80097b0 <lv_draw_letter+0x314>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80094bc:	4bbd      	ldr	r3, [pc, #756]	; (80097b4 <lv_draw_letter+0x318>)
 80094be:	f107 041c 	add.w	r4, r7, #28
 80094c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 80094c8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80094cc:	2b0f      	cmp	r3, #15
 80094ce:	f240 827e 	bls.w	80099ce <lv_draw_letter+0x532>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80094d2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80094d6:	2bfb      	cmp	r3, #251	; 0xfb
 80094d8:	d902      	bls.n	80094e0 <lv_draw_letter+0x44>
 80094da:	23ff      	movs	r3, #255	; 0xff
 80094dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    if(font_p == NULL) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8275 	beq.w	80099d2 <lv_draw_letter+0x536>
        LV_LOG_WARN("Font: character's bitmap not found");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80094e8:	f107 0114 	add.w	r1, r7, #20
 80094ec:	2300      	movs	r3, #0
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f008 fc72 	bl	8011dda <lv_font_get_glyph_dsc>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(g_ret == false) return;
 80094fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009500:	f083 0301 	eor.w	r3, r3, #1
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	f040 8265 	bne.w	80099d6 <lv_draw_letter+0x53a>

    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009512:	b29a      	uxth	r2, r3
 8009514:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009518:	b29b      	uxth	r3, r3
 800951a:	4413      	add	r3, r2
 800951c:	b29b      	uxth	r3, r3
 800951e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7a1b      	ldrb	r3, [r3, #8]
 800952e:	b299      	uxth	r1, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7a5b      	ldrb	r3, [r3, #9]
 8009534:	b29b      	uxth	r3, r3
 8009536:	1acb      	subs	r3, r1, r3
 8009538:	b29b      	uxth	r3, r3
 800953a:	4413      	add	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	b29b      	uxth	r3, r3
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	b29a      	uxth	r2, r3
 8009546:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800954a:	b29b      	uxth	r3, r3
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	b29b      	uxth	r3, r3
 8009550:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    const uint8_t * bpp_opa_table;
    uint8_t bitmask_init;
    uint8_t bitmask;

    switch(g.bpp) {
 8009554:	7ebb      	ldrb	r3, [r7, #26]
 8009556:	3b01      	subs	r3, #1
 8009558:	2b07      	cmp	r3, #7
 800955a:	f200 823e 	bhi.w	80099da <lv_draw_letter+0x53e>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <lv_draw_letter+0xc8>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	08009585 	.word	0x08009585
 8009568:	08009593 	.word	0x08009593
 800956c:	080099db 	.word	0x080099db
 8009570:	080095a1 	.word	0x080095a1
 8009574:	080099db 	.word	0x080099db
 8009578:	080099db 	.word	0x080099db
 800957c:	080099db 	.word	0x080099db
 8009580:	080095af 	.word	0x080095af
        case 1:
            bpp_opa_table = bpp1_opa_table;
 8009584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009588:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0x80;
 800958a:	2380      	movs	r3, #128	; 0x80
 800958c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8009590:	e013      	b.n	80095ba <lv_draw_letter+0x11e>
        case 2:
            bpp_opa_table = bpp2_opa_table;
 8009592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009596:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xC0;
 8009598:	23c0      	movs	r3, #192	; 0xc0
 800959a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 800959e:	e00c      	b.n	80095ba <lv_draw_letter+0x11e>
        case 4:
            bpp_opa_table = bpp4_opa_table;
 80095a0:	f107 031c 	add.w	r3, r7, #28
 80095a4:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xF0;
 80095a6:	23f0      	movs	r3, #240	; 0xf0
 80095a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 80095ac:	e005      	b.n	80095ba <lv_draw_letter+0x11e>
        case 8:
            bpp_opa_table = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xFF;
 80095b2:	23ff      	movs	r3, #255	; 0xff
 80095b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;       /*No opa table, pixel value will be used directly*/
 80095b8:	bf00      	nop
        default: return; /*Invalid bpp. Can't render the letter*/
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f008 fbfd 	bl	8011dbc <lv_font_get_glyph_bitmap>
 80095c2:	6678      	str	r0, [r7, #100]	; 0x64

    if(map_p == NULL) return;
 80095c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 8209 	beq.w	80099de <lv_draw_letter+0x542>

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80095cc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80095d0:	7dba      	ldrb	r2, [r7, #22]
 80095d2:	4413      	add	r3, r2
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80095da:	4293      	cmp	r3, r2
 80095dc:	f2c0 8201 	blt.w	80099e2 <lv_draw_letter+0x546>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80095e6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 80095ea:	429a      	cmp	r2, r3
 80095ec:	f300 81f9 	bgt.w	80099e2 <lv_draw_letter+0x546>
 80095f0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80095f4:	7dfa      	ldrb	r2, [r7, #23]
 80095f6:	4413      	add	r3, r2
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80095fe:	4293      	cmp	r3, r2
 8009600:	f2c0 81ef 	blt.w	80099e2 <lv_draw_letter+0x546>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800960a:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800960e:	429a      	cmp	r2, r3
 8009610:	f300 81e7 	bgt.w	80099e2 <lv_draw_letter+0x546>

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8009614:	f7fe f946 	bl	80078a4 <lv_refr_get_disp_refreshing>
 8009618:	64f8      	str	r0, [r7, #76]	; 0x4c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800961a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800961c:	f009 f83e 	bl	801269c <lv_disp_get_buf>
 8009620:	64b8      	str	r0, [r7, #72]	; 0x48

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 8009622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fe10 	bl	800924c <lv_area_get_width>
 800962c:	4603      	mov	r3, r0
 800962e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t col, row;

    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	08db      	lsrs	r3, r3, #3
 800963c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(g.box_w & 0x7) width_byte_scr++;
 8009640:	7dbb      	ldrb	r3, [r7, #22]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <lv_draw_letter+0x1b8>
 800964a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800964e:	3301      	adds	r3, #1
 8009650:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8009654:	7dbb      	ldrb	r3, [r7, #22]
 8009656:	b29a      	uxth	r2, r3
 8009658:	7ebb      	ldrb	r3, [r7, #26]
 800965a:	b29b      	uxth	r3, r3
 800965c:	fb12 f303 	smulbb	r3, r2, r3
 8009660:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Calculate the col/row start/end on the map*/
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800966a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800966e:	429a      	cmp	r2, r3
 8009670:	da09      	bge.n	8009686 <lv_draw_letter+0x1ea>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009678:	b29a      	uxth	r2, r3
 800967a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	b29b      	uxth	r3, r3
 8009682:	b21b      	sxth	r3, r3
 8009684:	e000      	b.n	8009688 <lv_draw_letter+0x1ec>
 8009686:	2300      	movs	r3, #0
 8009688:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800968c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8009690:	7dba      	ldrb	r2, [r7, #22]
 8009692:	4413      	add	r3, r2
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800969a:	4293      	cmp	r3, r2
 800969c:	dc02      	bgt.n	80096a4 <lv_draw_letter+0x208>
 800969e:	7dbb      	ldrb	r3, [r7, #22]
 80096a0:	b21b      	sxth	r3, r3
 80096a2:	e00a      	b.n	80096ba <lv_draw_letter+0x21e>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3301      	adds	r3, #1
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096c2:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80096c6:	429a      	cmp	r2, r3
 80096c8:	da09      	bge.n	80096de <lv_draw_letter+0x242>
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	b21b      	sxth	r3, r3
 80096dc:	e000      	b.n	80096e0 <lv_draw_letter+0x244>
 80096de:	2300      	movs	r3, #0
 80096e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80096e2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80096e6:	7dfa      	ldrb	r2, [r7, #23]
 80096e8:	4413      	add	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80096f0:	4293      	cmp	r3, r2
 80096f2:	dc02      	bgt.n	80096fa <lv_draw_letter+0x25e>
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	e00a      	b.n	8009710 <lv_draw_letter+0x274>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009700:	b29a      	uxth	r2, r3
 8009702:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	3301      	adds	r3, #1
 800970c:	b29b      	uxth	r3, r3
 800970e:	b21b      	sxth	r3, r3
 8009710:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8009712:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8009716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009718:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009722:	fb02 f203 	mul.w	r2, r2, r3
 8009726:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800972a:	4413      	add	r3, r2
 800972c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800972e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8009732:	1a9b      	subs	r3, r3, r2
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009738:	4413      	add	r3, r2
 800973a:	663b      	str	r3, [r7, #96]	; 0x60

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800973c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009740:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009744:	fb02 f203 	mul.w	r2, r2, r3
 8009748:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800974c:	4413      	add	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009752:	4413      	add	r3, r2
 8009754:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8009756:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800975a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800975e:	fb02 f203 	mul.w	r2, r2, r3
 8009762:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009766:	7eb9      	ldrb	r1, [r7, #26]
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
    map_p += bit_ofs >> 3;
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009776:	4413      	add	r3, r2
 8009778:	667b      	str	r3, [r7, #100]	; 0x64

    uint8_t letter_px;
    lv_opa_t px_opa;
    uint16_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	b29b      	uxth	r3, r3
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    bool scr_transp = false;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    for(row = row_start; row < row_end; row++) {
 800978c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800978e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009792:	e114      	b.n	80099be <lv_draw_letter+0x522>
        bitmask = bitmask_init >> col_bit;
 8009794:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8009798:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800979c:	fa42 f303 	asr.w	r3, r2, r3
 80097a0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        for(col = col_start; col < col_end; col++) {
 80097a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80097a8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80097ac:	e0cc      	b.n	8009948 <lv_draw_letter+0x4ac>
 80097ae:	bf00      	nop
 80097b0:	08029c0c 	.word	0x08029c0c
 80097b4:	08029c10 	.word	0x08029c10
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80097c0:	4013      	ands	r3, r2
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80097ca:	f1c3 0308 	rsb	r3, r3, #8
 80097ce:	7eb9      	ldrb	r1, [r7, #26]
 80097d0:	1a5b      	subs	r3, r3, r1
 80097d2:	fa42 f303 	asr.w	r3, r2, r3
 80097d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            if(letter_px != 0) {
 80097da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8089 	beq.w	80098f6 <lv_draw_letter+0x45a>
                if(opa == LV_OPA_COVER) {
 80097e4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80097e8:	2bff      	cmp	r3, #255	; 0xff
 80097ea:	d10d      	bne.n	8009808 <lv_draw_letter+0x36c>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80097ec:	7ebb      	ldrb	r3, [r7, #26]
 80097ee:	2b08      	cmp	r3, #8
 80097f0:	d005      	beq.n	80097fe <lv_draw_letter+0x362>
 80097f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097f8:	4413      	add	r3, r2
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	e001      	b.n	8009802 <lv_draw_letter+0x366>
 80097fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009802:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8009806:	e020      	b.n	800984a <lv_draw_letter+0x3ae>
                } else {
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8009808:	7ebb      	ldrb	r3, [r7, #26]
 800980a:	2b08      	cmp	r3, #8
 800980c:	d10c      	bne.n	8009828 <lv_draw_letter+0x38c>
 800980e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009812:	b29a      	uxth	r2, r3
 8009814:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009818:	b29b      	uxth	r3, r3
 800981a:	fb12 f303 	smulbb	r3, r2, r3
 800981e:	b29b      	uxth	r3, r3
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	b29b      	uxth	r3, r3
 8009824:	b2db      	uxtb	r3, r3
 8009826:	e00e      	b.n	8009846 <lv_draw_letter+0x3aa>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8009828:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800982c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800982e:	4413      	add	r3, r2
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b29a      	uxth	r2, r3
 8009834:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009838:	b29b      	uxth	r3, r3
 800983a:	fb12 f303 	smulbb	r3, r2, r3
 800983e:	b29b      	uxth	r3, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	b29b      	uxth	r3, r3
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                }

                if(disp->driver.set_px_cb) {
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d02c      	beq.n	80098ac <lv_draw_letter+0x410>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	695c      	ldr	r4, [r3, #20]
 8009856:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800985a:	6899      	ldr	r1, [r3, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800985c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009860:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009864:	4413      	add	r3, r2
 8009866:	b29a      	uxth	r2, r3
 8009868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800986a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800986e:	b29b      	uxth	r3, r3
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8009874:	b21e      	sxth	r6, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8009876:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800987a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800987e:	4413      	add	r3, r2
 8009880:	b29a      	uxth	r2, r3
 8009882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009884:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009888:	b29b      	uxth	r3, r3
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800988e:	b21b      	sxth	r3, r3
 8009890:	f9b7 5046 	ldrsh.w	r5, [r7, #70]	; 0x46
 8009894:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8009898:	9202      	str	r2, [sp, #8]
 800989a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800989e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4633      	mov	r3, r6
 80098a6:	462a      	mov	r2, r5
 80098a8:	47a0      	blx	r4
 80098aa:	e024      	b.n	80098f6 <lv_draw_letter+0x45a>
                } else if(vdb_buf_tmp->full != color.full) {
 80098ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ae:	881a      	ldrh	r2, [r3, #0]
 80098b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d01e      	beq.n	80098f6 <lv_draw_letter+0x45a>
                    if(px_opa > LV_OPA_MAX)
 80098b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80098bc:	2bfb      	cmp	r3, #251	; 0xfb
 80098be:	d904      	bls.n	80098ca <lv_draw_letter+0x42e>
                        *vdb_buf_tmp = color;
 80098c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c2:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	e015      	b.n	80098f6 <lv_draw_letter+0x45a>
                    else if(px_opa > LV_OPA_MIN) {
 80098ca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80098ce:	2b10      	cmp	r3, #16
 80098d0:	d911      	bls.n	80098f6 <lv_draw_letter+0x45a>
                        if(scr_transp == false) {
 80098d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098d6:	f083 0301 	eor.w	r3, r3, #1
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <lv_draw_letter+0x45a>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 80098e0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80098e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e6:	8819      	ldrh	r1, [r3, #0]
 80098e8:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 80098ec:	f7ff fc1e 	bl	800912c <lv_color_mix>
 80098f0:	4602      	mov	r2, r0
 80098f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f4:	801a      	strh	r2, [r3, #0]
                        }
                    }
                }
            }

            vdb_buf_tmp++;
 80098f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f8:	3302      	adds	r3, #2
 80098fa:	663b      	str	r3, [r7, #96]	; 0x60

            if(col_bit < 8 - g.bpp) {
 80098fc:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8009900:	7ebb      	ldrb	r3, [r7, #26]
 8009902:	f1c3 0308 	rsb	r3, r3, #8
 8009906:	429a      	cmp	r2, r3
 8009908:	da0d      	bge.n	8009926 <lv_draw_letter+0x48a>
                col_bit += g.bpp;
 800990a:	7ebb      	ldrb	r3, [r7, #26]
 800990c:	b29a      	uxth	r2, r3
 800990e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009912:	4413      	add	r3, r2
 8009914:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask >> g.bpp;
 8009918:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800991c:	7eba      	ldrb	r2, [r7, #26]
 800991e:	4113      	asrs	r3, r2
 8009920:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8009924:	e009      	b.n	800993a <lv_draw_letter+0x49e>
            } else {
                col_bit = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask_init;
 800992c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009930:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                map_p++;
 8009934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009936:	3301      	adds	r3, #1
 8009938:	667b      	str	r3, [r7, #100]	; 0x64
        for(col = col_start; col < col_end; col++) {
 800993a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800993e:	b29b      	uxth	r3, r3
 8009940:	3301      	adds	r3, #1
 8009942:	b29b      	uxth	r3, r3
 8009944:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009948:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800994c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8009950:	429a      	cmp	r2, r3
 8009952:	f6ff af31 	blt.w	80097b8 <lv_draw_letter+0x31c>
            }
        }
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8009956:	7dbb      	ldrb	r3, [r7, #22]
 8009958:	461a      	mov	r2, r3
 800995a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009964:	4413      	add	r3, r2
 8009966:	b29a      	uxth	r2, r3
 8009968:	7ebb      	ldrb	r3, [r7, #26]
 800996a:	b29b      	uxth	r3, r3
 800996c:	fb12 f303 	smulbb	r3, r2, r3
 8009970:	b29a      	uxth	r2, r3
 8009972:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009976:	4413      	add	r3, r2
 8009978:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        map_p += (col_bit >> 3);
 800997c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009980:	08db      	lsrs	r3, r3, #3
 8009982:	b29b      	uxth	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009988:	4413      	add	r3, r2
 800998a:	667b      	str	r3, [r7, #100]	; 0x64
        col_bit = col_bit & 0x7;
 800998c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8009998:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800999c:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 80099a0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80099a4:	1acb      	subs	r3, r1, r3
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099ac:	4413      	add	r3, r2
 80099ae:	663b      	str	r3, [r7, #96]	; 0x60
    for(row = row_start; row < row_end; row++) {
 80099b0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3301      	adds	r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80099be:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80099c2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80099c6:	429a      	cmp	r2, r3
 80099c8:	f6ff aee4 	blt.w	8009794 <lv_draw_letter+0x2f8>
 80099cc:	e00a      	b.n	80099e4 <lv_draw_letter+0x548>
    if(opa < LV_OPA_MIN) return;
 80099ce:	bf00      	nop
 80099d0:	e008      	b.n	80099e4 <lv_draw_letter+0x548>
        return;
 80099d2:	bf00      	nop
 80099d4:	e006      	b.n	80099e4 <lv_draw_letter+0x548>
    if(g_ret == false) return;
 80099d6:	bf00      	nop
 80099d8:	e004      	b.n	80099e4 <lv_draw_letter+0x548>
        default: return; /*Invalid bpp. Can't render the letter*/
 80099da:	bf00      	nop
 80099dc:	e002      	b.n	80099e4 <lv_draw_letter+0x548>
    if(map_p == NULL) return;
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <lv_draw_letter+0x548>
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80099e2:	bf00      	nop
    }
}
 80099e4:	3774      	adds	r7, #116	; 0x74
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ea:	bf00      	nop

080099ec <lv_draw_map>:
 * @param recolor mix the pixels with this color
 * @param recolor_opa the intense of recoloring
 */
void lv_draw_map(const lv_area_t * cords_p, const lv_area_t * mask_p, const uint8_t * map_p, lv_opa_t opa,
                 bool chroma_key, bool alpha_byte, lv_color_t recolor, lv_opa_t recolor_opa)
{
 80099ec:	b5b0      	push	{r4, r5, r7, lr}
 80099ee:	b098      	sub	sp, #96	; 0x60
 80099f0:	af04      	add	r7, sp, #16
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	70fb      	strb	r3, [r7, #3]

    if(opa < LV_OPA_MIN) return;
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	2b0f      	cmp	r3, #15
 80099fe:	f240 825c 	bls.w	8009eba <lv_draw_map+0x4ce>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	2bfb      	cmp	r3, #251	; 0xfb
 8009a06:	d901      	bls.n	8009a0c <lv_draw_map+0x20>
 8009a08:	23ff      	movs	r3, #255	; 0xff
 8009a0a:	70fb      	strb	r3, [r7, #3]
    bool union_ok;

    /*Get the union of map size and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8009a0c:	f107 0320 	add.w	r3, r7, #32
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f009 f9c1 	bl	8012d9c <lv_area_intersect>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) return;
 8009a20:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009a24:	f083 0301 	eor.w	r3, r3, #1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f040 8247 	bne.w	8009ebe <lv_draw_map+0x4d2>

    /*The pixel size in byte is different if an alpha byte is added too*/
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009a30:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <lv_draw_map+0x50>
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e000      	b.n	8009a3e <lv_draw_map+0x52>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    /*If the map starts OUT of the masked area then calc. the first pixel*/
    lv_coord_t map_width = lv_area_get_width(cords_p);
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff fc02 	bl	800924c <lv_area_get_width>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if(cords_p->y1 < masked_a.y1) {
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009a54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	da11      	bge.n	8009a80 <lv_draw_map+0x94>
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8009a5c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009a60:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009a64:	4611      	mov	r1, r2
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009a6c:	1a8a      	subs	r2, r1, r2
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	607b      	str	r3, [r7, #4]
    }
    if(cords_p->x1 < masked_a.x1) {
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	da0e      	bge.n	8009aac <lv_draw_map+0xc0>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8009a8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a92:	461a      	mov	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	607b      	str	r3, [r7, #4]
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8009aac:	f7fd fefa 	bl	80078a4 <lv_refr_get_disp_refreshing>
 8009ab0:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009ab2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ab4:	f008 fdf2 	bl	801269c <lv_disp_get_buf>
 8009ab8:	63b8      	str	r0, [r7, #56]	; 0x38

    /*Stores coordinates relative to the current VDB*/
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8009aba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	b21b      	sxth	r3, r3
 8009ace:	843b      	strh	r3, [r7, #32]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8009ad0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	b21b      	sxth	r3, r3
 8009ae4:	847b      	strh	r3, [r7, #34]	; 0x22
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8009ae6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	84bb      	strh	r3, [r7, #36]	; 0x24
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8009afc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	b21b      	sxth	r3, r3
 8009b10:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	3310      	adds	r3, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fb98 	bl	800924c <lv_area_get_width>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 8009b26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009b2a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009b2e:	fb02 f303 	mul.w	r3, r2, r3
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b36:	4413      	add	r3, r2
 8009b38:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8009b3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b42:	4413      	add	r3, r2
 8009b44:	64fb      	str	r3, [r7, #76]	; 0x4c

    lv_coord_t row;
    lv_coord_t map_useful_w = lv_area_get_width(&masked_a);
 8009b46:	f107 0320 	add.w	r3, r7, #32
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff fb7e 	bl	800924c <lv_area_get_width>
 8009b50:	4603      	mov	r3, r0
 8009b52:	86bb      	strh	r3, [r7, #52]	; 0x34

    bool scr_transp = false;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    /*The simplest case just copy the pixels into the VDB*/
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8009b5a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009b5e:	f083 0301 	eor.w	r3, r3, #1
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 808d 	beq.w	8009c84 <lv_draw_map+0x298>
 8009b6a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009b6e:	f083 0301 	eor.w	r3, r3, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8085 	beq.w	8009c84 <lv_draw_map+0x298>
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	2bff      	cmp	r3, #255	; 0xff
 8009b7e:	f040 8081 	bne.w	8009c84 <lv_draw_map+0x298>
 8009b82:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d17c      	bne.n	8009c84 <lv_draw_map+0x298>

        /*Use the custom VDB write function is exists*/
        if(disp->driver.set_px_cb) {
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04f      	beq.n	8009c32 <lv_draw_map+0x246>
            lv_coord_t col;
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009b92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009b98:	e044      	b.n	8009c24 <lv_draw_map+0x238>
                for(col = 0; col < map_useful_w; col++) {
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ba0:	e029      	b.n	8009bf6 <lv_draw_map+0x20a>
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8009ba2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8009ba6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	83bb      	strh	r3, [r7, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb8:	695c      	ldr	r4, [r3, #20]
 8009bba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009bca:	4413      	add	r3, r2
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b21d      	sxth	r5, r3
 8009bd0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	8bbb      	ldrh	r3, [r7, #28]
 8009bda:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009bde:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	462b      	mov	r3, r5
 8009be6:	47a0      	blx	r4
                for(col = 0; col < map_useful_w; col++) {
 8009be8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009bf6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8009bfa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	dbcf      	blt.n	8009ba2 <lv_draw_map+0x1b6>
                                           px_color, opa);
                }
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8009c02:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009c06:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4413      	add	r3, r2
 8009c14:	607b      	str	r3, [r7, #4]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009c28:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	ddb4      	ble.n	8009b9a <lv_draw_map+0x1ae>
        if(disp->driver.set_px_cb) {
 8009c30:	e146      	b.n	8009ec0 <lv_draw_map+0x4d4>
            }
        }
        /*Normal native VDB*/
        else {
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c38:	e01d      	b.n	8009c76 <lv_draw_map+0x28a>
                    sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                } else {
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                }
#else
                sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 8009c3a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c44:	f000 f93f 	bl	8009ec6 <sw_mem_blend>
#endif
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8009c48:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009c4c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009c50:	fb02 f303 	mul.w	r3, r2, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	607b      	str	r3, [r7, #4]
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009c5c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c64:	4413      	add	r3, r2
 8009c66:	64fb      	str	r3, [r7, #76]	; 0x4c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c68:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009c7a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	dddb      	ble.n	8009c3a <lv_draw_map+0x24e>
        if(disp->driver.set_px_cb) {
 8009c82:	e11d      	b.n	8009ec0 <lv_draw_map+0x4d4>

    /*In the other cases every pixel need to be checked one-by-one*/
    else {

        lv_coord_t col;
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	833b      	strh	r3, [r7, #24]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009c88:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	8b39      	ldrh	r1, [r7, #24]
 8009c90:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 8009c94:	f7ff fa4a 	bl	800912c <lv_color_mix>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	82bb      	strh	r3, [r7, #20]
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ca2:	e102      	b.n	8009eaa <lv_draw_map+0x4be>
            for(col = 0; col < map_useful_w; col++) {
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009caa:	e0e0      	b.n	8009e6e <lv_draw_map+0x482>
                lv_opa_t opa_result  = opa;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                uint8_t * px_color_p = (uint8_t *)&map_p[(uint32_t)col * px_size_byte];
 8009cb2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009cb6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009cba:	fb02 f303 	mul.w	r3, r2, r3
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                lv_color_t px_color;

                /*Calculate with the pixel level alpha*/
                if(alpha_byte) {
 8009cc4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d022      	beq.n	8009d12 <lv_draw_map+0x326>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                    px_color.full = px_color_p[0];
#elif LV_COLOR_DEPTH == 16
                    /*Because of Alpha byte 16 bit color can start on odd address which can cause
                     * crash*/
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4413      	add	r3, r2
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	823b      	strh	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 32
                    px_color = *((lv_color_t *)px_color_p);
#endif
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8009ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(px_opa == LV_OPA_TRANSP)
 8009cec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 80b2 	beq.w	8009e5a <lv_draw_map+0x46e>
                        continue;
                    else if(px_opa != LV_OPA_COVER)
 8009cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cfa:	2bff      	cmp	r3, #255	; 0xff
 8009cfc:	d00c      	beq.n	8009d18 <lv_draw_map+0x32c>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8009cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	0a1b      	lsrs	r3, r3, #8
 8009d0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009d10:	e002      	b.n	8009d18 <lv_draw_map+0x32c>
                } else {
                    px_color = *((lv_color_t *)px_color_p);
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	823b      	strh	r3, [r7, #16]
                }

                /*Handle chroma key*/
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8009d18:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <lv_draw_map+0x340>
 8009d20:	8a3a      	ldrh	r2, [r7, #16]
 8009d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d24:	8b9b      	ldrh	r3, [r3, #28]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	f000 8099 	beq.w	8009e5e <lv_draw_map+0x472>

                /*Re-color the pixel if required*/
                if(recolor_opa != LV_OPA_TRANSP) {
 8009d2c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d04d      	beq.n	8009dd0 <lv_draw_map+0x3e4>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8009d34:	8b3a      	ldrh	r2, [r7, #24]
 8009d36:	8a3b      	ldrh	r3, [r7, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d00b      	beq.n	8009d54 <lv_draw_map+0x368>
                                                               new colors (save the last)*/
                        last_img_px  = px_color;
 8009d3c:	8a3b      	ldrh	r3, [r7, #16]
 8009d3e:	833b      	strh	r3, [r7, #24]
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009d40:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009d44:	461a      	mov	r2, r3
 8009d46:	8b39      	ldrh	r1, [r7, #24]
 8009d48:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 8009d4c:	f7ff f9ee 	bl	800912c <lv_color_mix>
 8009d50:	4603      	mov	r3, r0
 8009d52:	82bb      	strh	r3, [r7, #20]
                    }
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 8009d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01a      	beq.n	8009d92 <lv_draw_map+0x3a6>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	695c      	ldr	r4, [r3, #20]
 8009d60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	6899      	ldr	r1, [r3, #8]
 8009d66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d70:	4413      	add	r3, r2
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	b21d      	sxth	r5, r3
 8009d76:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009d7a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009d7e:	9302      	str	r3, [sp, #8]
 8009d80:	8abb      	ldrh	r3, [r7, #20]
 8009d82:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009d86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	47a0      	blx	r4
 8009d90:	e066      	b.n	8009e60 <lv_draw_map+0x474>
                                               row, recolored_px, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {
                        if(opa_result == LV_OPA_COVER)
 8009d92:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009d96:	2bff      	cmp	r3, #255	; 0xff
 8009d98:	d107      	bne.n	8009daa <lv_draw_map+0x3be>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8009d9a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009da2:	4413      	add	r3, r2
 8009da4:	8aba      	ldrh	r2, [r7, #20]
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	e05a      	b.n	8009e60 <lv_draw_map+0x474>
                        else
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8009daa:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009db2:	4413      	add	r3, r2
 8009db4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009db8:	0052      	lsls	r2, r2, #1
 8009dba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009dbc:	188c      	adds	r4, r1, r2
 8009dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009dc2:	8819      	ldrh	r1, [r3, #0]
 8009dc4:	8ab8      	ldrh	r0, [r7, #20]
 8009dc6:	f7ff f9b1 	bl	800912c <lv_color_mix>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	8023      	strh	r3, [r4, #0]
 8009dce:	e047      	b.n	8009e60 <lv_draw_map+0x474>
                    }
                } else {
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01a      	beq.n	8009e0e <lv_draw_map+0x422>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8009dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dda:	695c      	ldr	r4, [r3, #20]
 8009ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de0:	6899      	ldr	r1, [r3, #8]
 8009de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009dec:	4413      	add	r3, r2
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	b21d      	sxth	r5, r3
 8009df2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009df6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	8a3b      	ldrh	r3, [r7, #16]
 8009dfe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009e02:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	462b      	mov	r3, r5
 8009e0a:	47a0      	blx	r4
 8009e0c:	e028      	b.n	8009e60 <lv_draw_map+0x474>
                                               row, px_color, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {

                        if(opa_result == LV_OPA_COVER)
 8009e0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009e12:	2bff      	cmp	r3, #255	; 0xff
 8009e14:	d107      	bne.n	8009e26 <lv_draw_map+0x43a>
                            vdb_buf_tmp[col] = px_color;
 8009e16:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e1e:	4413      	add	r3, r2
 8009e20:	8a3a      	ldrh	r2, [r7, #16]
 8009e22:	801a      	strh	r2, [r3, #0]
 8009e24:	e01c      	b.n	8009e60 <lv_draw_map+0x474>
                        else {
                            if(scr_transp == false) {
 8009e26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e2a:	f083 0301 	eor.w	r3, r3, #1
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d015      	beq.n	8009e60 <lv_draw_map+0x474>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8009e34:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009e42:	0052      	lsls	r2, r2, #1
 8009e44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e46:	188c      	adds	r4, r1, r2
 8009e48:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e4c:	8819      	ldrh	r1, [r3, #0]
 8009e4e:	8a38      	ldrh	r0, [r7, #16]
 8009e50:	f7ff f96c 	bl	800912c <lv_color_mix>
 8009e54:	4603      	mov	r3, r0
 8009e56:	8023      	strh	r3, [r4, #0]
 8009e58:	e002      	b.n	8009e60 <lv_draw_map+0x474>
                        continue;
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <lv_draw_map+0x474>
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8009e5e:	bf00      	nop
            for(col = 0; col < map_useful_w; col++) {
 8009e60:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3301      	adds	r3, #1
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009e6e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009e72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f6ff af18 	blt.w	8009cac <lv_draw_map+0x2c0>
                        }
                    }
                }
            }

            map_p += map_width * px_size_byte; /*Next row on the map*/
 8009e7c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009e80:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	607b      	str	r3, [r7, #4]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009e90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e98:	4413      	add	r3, r2
 8009e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009e9c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009eaa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009eae:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	f77f aef6 	ble.w	8009ca4 <lv_draw_map+0x2b8>
 8009eb8:	e002      	b.n	8009ec0 <lv_draw_map+0x4d4>
    if(opa < LV_OPA_MIN) return;
 8009eba:	bf00      	nop
 8009ebc:	e000      	b.n	8009ec0 <lv_draw_map+0x4d4>
    if(union_ok == false) return;
 8009ebe:	bf00      	nop
        }
    }
}
 8009ec0:	3750      	adds	r7, #80	; 0x50
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bdb0      	pop	{r4, r5, r7, pc}

08009ec6 <sw_mem_blend>:
 * @param src pointer to pixel map. Copy it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 8009ec6:	b590      	push	{r4, r7, lr}
 8009ec8:	b087      	sub	sp, #28
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	70fb      	strb	r3, [r7, #3]
    if(opa == LV_OPA_COVER) {
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2bff      	cmp	r3, #255	; 0xff
 8009ed8:	d107      	bne.n	8009eea <sw_mem_blend+0x24>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	461a      	mov	r2, r3
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f01d f95c 	bl	80271a0 <memcpy>
        uint32_t col;
        for(col = 0; col < length; col++) {
            dest[col] = lv_color_mix(src[col], dest[col], opa);
        }
    }
}
 8009ee8:	e01c      	b.n	8009f24 <sw_mem_blend+0x5e>
        for(col = 0; col < length; col++) {
 8009eea:	2300      	movs	r3, #0
 8009eec:	617b      	str	r3, [r7, #20]
 8009eee:	e015      	b.n	8009f1c <sw_mem_blend+0x56>
            dest[col] = lv_color_mix(src[col], dest[col], opa);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	0052      	lsls	r2, r2, #1
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	4411      	add	r1, r2
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	0052      	lsls	r2, r2, #1
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	1884      	adds	r4, r0, r2
 8009f08:	78fa      	ldrb	r2, [r7, #3]
 8009f0a:	8809      	ldrh	r1, [r1, #0]
 8009f0c:	8818      	ldrh	r0, [r3, #0]
 8009f0e:	f7ff f90d 	bl	800912c <lv_color_mix>
 8009f12:	4603      	mov	r3, r0
 8009f14:	8023      	strh	r3, [r4, #0]
        for(col = 0; col < length; col++) {
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d3e5      	bcc.n	8009ef0 <sw_mem_blend+0x2a>
}
 8009f24:	bf00      	nop
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd90      	pop	{r4, r7, pc}

08009f2c <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b08f      	sub	sp, #60	; 0x3c
 8009f30:	af04      	add	r7, sp, #16
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	813b      	strh	r3, [r7, #8]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	817b      	strh	r3, [r7, #10]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8009f3c:	f7fd fcb2 	bl	80078a4 <lv_refr_get_disp_refreshing>
 8009f40:	6238      	str	r0, [r7, #32]
    if(disp->driver.set_px_cb) {
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d035      	beq.n	8009fb6 <sw_color_fill+0x8a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f50:	e029      	b.n	8009fa6 <sw_color_fill+0x7a>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f58:	e018      	b.n	8009f8c <sw_color_fill+0x60>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	695c      	ldr	r4, [r3, #20]
 8009f5e:	6a38      	ldr	r0, [r7, #32]
 8009f60:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8009f64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009f68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009f6c:	9302      	str	r3, [sp, #8]
 8009f6e:	893b      	ldrh	r3, [r7, #8]
 8009f70:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009f74:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	47a0      	blx	r4
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009f80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3301      	adds	r3, #1
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009f92:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f96:	429a      	cmp	r2, r3
 8009f98:	dddf      	ble.n	8009f5a <sw_color_fill+0x2e>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009f9a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009fac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	ddce      	ble.n	8009f52 <sw_color_fill+0x26>
                }
                mem += mem_width;
            }
        }
    }
}
 8009fb4:	e0c4      	b.n	800a140 <sw_color_fill+0x214>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009fc2:	fb03 f302 	mul.w	r3, r3, r2
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
        if(opa == LV_OPA_COVER) {
 8009fce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009fd2:	2bff      	cmp	r3, #255	; 0xff
 8009fd4:	d159      	bne.n	800a08a <sw_color_fill+0x15e>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009fdc:	e00c      	b.n	8009ff8 <sw_color_fill+0xcc>
                mem[col] = color;
 8009fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	893a      	ldrh	r2, [r7, #8]
 8009fea:	801a      	strh	r2, [r3, #0]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009fec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ffe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a002:	429a      	cmp	r2, r3
 800a004:	ddeb      	ble.n	8009fde <sw_color_fill+0xb2>
            lv_color_t * mem_first = &mem[fill_area->x1];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	61bb      	str	r3, [r7, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a01a:	461a      	mov	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	3301      	adds	r3, #1
 800a026:	b29b      	uxth	r3, r3
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	82fb      	strh	r3, [r7, #22]
            mem += mem_width;
 800a02e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a040:	b29b      	uxth	r3, r3
 800a042:	3301      	adds	r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a048:	e017      	b.n	800a07a <sw_color_fill+0x14e>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4413      	add	r3, r2
 800a056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a05a:	69b9      	ldr	r1, [r7, #24]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f01d f89f 	bl	80271a0 <memcpy>
                mem += mem_width;
 800a062:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a06e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a072:	b29b      	uxth	r3, r3
 800a074:	3301      	adds	r3, #1
 800a076:	b29b      	uxth	r3, r3
 800a078:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a080:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a084:	429a      	cmp	r2, r3
 800a086:	dde0      	ble.n	800a04a <sw_color_fill+0x11e>
}
 800a088:	e05a      	b.n	800a140 <sw_color_fill+0x214>
            bool scr_transp = false;
 800a08a:	2300      	movs	r3, #0
 800a08c:	77fb      	strb	r3, [r7, #31]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800a08e:	2300      	movs	r3, #0
 800a090:	82bb      	strh	r3, [r7, #20]
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a092:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a096:	461a      	mov	r2, r3
 800a098:	8ab9      	ldrh	r1, [r7, #20]
 800a09a:	8938      	ldrh	r0, [r7, #8]
 800a09c:	f7ff f846 	bl	800912c <lv_color_mix>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	823b      	strh	r3, [r7, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	885b      	ldrh	r3, [r3, #2]
 800a0a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0aa:	e042      	b.n	800a132 <sw_color_fill+0x206>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0b2:	e02b      	b.n	800a10c <sw_color_fill+0x1e0>
                    if(scr_transp == false) {
 800a0b4:	7ffb      	ldrb	r3, [r7, #31]
 800a0b6:	f083 0301 	eor.w	r3, r3, #1
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01f      	beq.n	800a100 <sw_color_fill+0x1d4>
                        if(mem[col].full != bg_tmp.full) {
 800a0c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881a      	ldrh	r2, [r3, #0]
 800a0cc:	8abb      	ldrh	r3, [r7, #20]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d00f      	beq.n	800a0f2 <sw_color_fill+0x1c6>
                            bg_tmp  = mem[col];
 800a0d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	82bb      	strh	r3, [r7, #20]
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a0e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	8ab9      	ldrh	r1, [r7, #20]
 800a0e8:	8938      	ldrh	r0, [r7, #8]
 800a0ea:	f7ff f81f 	bl	800912c <lv_color_mix>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	823b      	strh	r3, [r7, #16]
                        mem[col] = opa_tmp;
 800a0f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	8a3a      	ldrh	r2, [r7, #16]
 800a0fe:	801a      	strh	r2, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a100:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a104:	b29b      	uxth	r3, r3
 800a106:	3301      	adds	r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a112:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a116:	429a      	cmp	r2, r3
 800a118:	ddcc      	ble.n	800a0b4 <sw_color_fill+0x188>
                mem += mem_width;
 800a11a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a126:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3301      	adds	r3, #1
 800a12e:	b29b      	uxth	r3, r3
 800a130:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a138:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a13c:	429a      	cmp	r2, r3
 800a13e:	ddb5      	ble.n	800a0ac <sw_color_fill+0x180>
}
 800a140:	bf00      	nop
 800a142:	372c      	adds	r7, #44	; 0x2c
 800a144:	46bd      	mov	sp, r7
 800a146:	bd90      	pop	{r4, r7, pc}

0800a148 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800a152:	2208      	movs	r2, #8
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f01d f822 	bl	80271a0 <memcpy>
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3301      	adds	r3, #1
 800a182:	b29b      	uxth	r3, r3
 800a184:	b21b      	sxth	r3, r3
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
	...

0800a194 <lv_draw_img>:
 * @param style style of the image
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_style_t * style,
                 lv_opa_t opa_scale)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af06      	add	r7, sp, #24
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d11a      	bne.n	800a1de <lv_draw_img+0x4a>
        LV_LOG_WARN("Image draw: src is NULL");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a1a8:	23ff      	movs	r3, #255	; 0xff
 800a1aa:	4a23      	ldr	r2, [pc, #140]	; (800a238 <lv_draw_img+0xa4>)
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f002 fd21 	bl	800cbf6 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9305      	str	r3, [sp, #20]
 800a1b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9302      	str	r3, [sp, #8]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <lv_draw_img+0xa8>)
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	23ff      	movs	r3, #255	; 0xff
 800a1d2:	4a19      	ldr	r2, [pc, #100]	; (800a238 <lv_draw_img+0xa4>)
 800a1d4:	68b9      	ldr	r1, [r7, #8]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fa74 	bl	800a6c4 <lv_draw_label>
        return;
 800a1dc:	e028      	b.n	800a230 <lv_draw_img+0x9c>
    }

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, style, opa_scale);
 800a1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f8f0 	bl	800a3d0 <lv_img_draw_core>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d11a      	bne.n	800a230 <lv_draw_img+0x9c>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a1fa:	23ff      	movs	r3, #255	; 0xff
 800a1fc:	4a0e      	ldr	r2, [pc, #56]	; (800a238 <lv_draw_img+0xa4>)
 800a1fe:	68b9      	ldr	r1, [r7, #8]
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f002 fcf8 	bl	800cbf6 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800a206:	2300      	movs	r3, #0
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a214:	9303      	str	r3, [sp, #12]
 800a216:	2300      	movs	r3, #0
 800a218:	9302      	str	r3, [sp, #8]
 800a21a:	2300      	movs	r3, #0
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <lv_draw_img+0xa8>)
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	23ff      	movs	r3, #255	; 0xff
 800a224:	4a04      	ldr	r2, [pc, #16]	; (800a238 <lv_draw_img+0xa4>)
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 fa4b 	bl	800a6c4 <lv_draw_label>
        return;
 800a22e:	bf00      	nop
    }
}
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20006c68 	.word	0x20006c68
 800a23c:	08029c20 	.word	0x08029c20

0800a240 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a24e:	79fb      	ldrb	r3, [r7, #7]
 800a250:	2b0e      	cmp	r3, #14
 800a252:	d836      	bhi.n	800a2c2 <lv_img_color_format_get_px_size+0x82>
 800a254:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <lv_img_color_format_get_px_size+0x1c>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a299 	.word	0x0800a299
 800a260:	0800a299 	.word	0x0800a299
 800a264:	0800a2c3 	.word	0x0800a2c3
 800a268:	0800a2c3 	.word	0x0800a2c3
 800a26c:	0800a29f 	.word	0x0800a29f
 800a270:	0800a2a5 	.word	0x0800a2a5
 800a274:	0800a29f 	.word	0x0800a29f
 800a278:	0800a2ab 	.word	0x0800a2ab
 800a27c:	0800a2b1 	.word	0x0800a2b1
 800a280:	0800a2b7 	.word	0x0800a2b7
 800a284:	0800a2bd 	.word	0x0800a2bd
 800a288:	0800a2ab 	.word	0x0800a2ab
 800a28c:	0800a2b1 	.word	0x0800a2b1
 800a290:	0800a2b7 	.word	0x0800a2b7
 800a294:	0800a2bd 	.word	0x0800a2bd
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
 800a29c:	e014      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 800a29e:	2310      	movs	r3, #16
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	e011      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 800a2a4:	2318      	movs	r3, #24
 800a2a6:	73fb      	strb	r3, [r7, #15]
 800a2a8:	e00e      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	73fb      	strb	r3, [r7, #15]
 800a2ae:	e00b      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	73fb      	strb	r3, [r7, #15]
 800a2b4:	e008      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 800a2b6:	2304      	movs	r3, #4
 800a2b8:	73fb      	strb	r3, [r7, #15]
 800a2ba:	e005      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 800a2bc:	2308      	movs	r3, #8
 800a2be:	73fb      	strb	r3, [r7, #15]
 800a2c0:	e002      	b.n	800a2c8 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	bf00      	nop
    }

    return px_size;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop

0800a2d8 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d004      	beq.n	800a2f6 <lv_img_color_format_is_chroma_keyed+0x1e>
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	db05      	blt.n	800a2fc <lv_img_color_format_is_chroma_keyed+0x24>
 800a2f0:	3b06      	subs	r3, #6
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d802      	bhi.n	800a2fc <lv_img_color_format_is_chroma_keyed+0x24>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	73fb      	strb	r3, [r7, #15]
 800a2fa:	e002      	b.n	800a302 <lv_img_color_format_is_chroma_keyed+0x2a>
        default: is_chroma_keyed = false; break;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	bf00      	nop
    }

    return is_chroma_keyed;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	3b02      	subs	r3, #2
 800a322:	2b0c      	cmp	r3, #12
 800a324:	d81f      	bhi.n	800a366 <lv_img_color_format_has_alpha+0x56>
 800a326:	a201      	add	r2, pc, #4	; (adr r2, 800a32c <lv_img_color_format_has_alpha+0x1c>)
 800a328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32c:	0800a361 	.word	0x0800a361
 800a330:	0800a367 	.word	0x0800a367
 800a334:	0800a367 	.word	0x0800a367
 800a338:	0800a361 	.word	0x0800a361
 800a33c:	0800a367 	.word	0x0800a367
 800a340:	0800a367 	.word	0x0800a367
 800a344:	0800a367 	.word	0x0800a367
 800a348:	0800a367 	.word	0x0800a367
 800a34c:	0800a367 	.word	0x0800a367
 800a350:	0800a361 	.word	0x0800a361
 800a354:	0800a361 	.word	0x0800a361
 800a358:	0800a361 	.word	0x0800a361
 800a35c:	0800a361 	.word	0x0800a361
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e002      	b.n	800a36c <lv_img_color_format_has_alpha+0x5c>
        default: has_alpha = false; break;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
 800a36a:	bf00      	nop
    }

    return has_alpha;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800a384:	2303      	movs	r3, #3
 800a386:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <lv_img_src_get_type+0x16>
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	e018      	b.n	800a3c4 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b1f      	cmp	r3, #31
 800a39c:	d907      	bls.n	800a3ae <lv_img_src_get_type+0x32>
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	db02      	blt.n	800a3ae <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	e009      	b.n	800a3c2 <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	b25b      	sxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	da02      	bge.n	800a3be <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	e001      	b.n	800a3c2 <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <lv_img_draw_core>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * mask, const void * src,
                                 const lv_style_t * style, lv_opa_t opa_scale)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b095      	sub	sp, #84	; 0x54
 800a3d4:	af06      	add	r7, sp, #24
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800a3de:	f107 0318 	add.w	r3, r7, #24
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f008 fcd8 	bl	8012d9c <lv_area_intersect>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(union_ok == false) {
 800a3f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3f6:	f083 0301 	eor.w	r3, r3, #1
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <lv_img_draw_core+0x34>
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
 800a400:	2301      	movs	r3, #1
 800a402:	e0fd      	b.n	800a600 <lv_img_draw_core+0x230>
                             successfully.*/
    }

    lv_opa_t opa =
 800a404:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a408:	2bff      	cmp	r3, #255	; 0xff
 800a40a:	d103      	bne.n	800a414 <lv_img_draw_core+0x44>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a412:	e00c      	b.n	800a42e <lv_img_draw_core+0x5e>
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a420:	b29b      	uxth	r3, r3
 800a422:	fb12 f303 	smulbb	r3, r2, r3
 800a426:	b29b      	uxth	r3, r3
    lv_opa_t opa =
 800a428:	0a1b      	lsrs	r3, r3, #8
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f006 faf1 	bl	8010a1c <lv_img_cache_open>
 800a43a:	62f8      	str	r0, [r7, #44]	; 0x2c

    if(cdsc == NULL) return LV_RES_INV;
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <lv_img_draw_core+0x76>
 800a442:	2300      	movs	r3, #0
 800a444:	e0dc      	b.n	800a600 <lv_img_draw_core+0x230>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	7c1b      	ldrb	r3, [r3, #16]
 800a44a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff ff41 	bl	800a2d8 <lv_img_color_format_is_chroma_keyed>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	7c1b      	ldrb	r3, [r3, #16]
 800a460:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a464:	b2db      	uxtb	r3, r3
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff ff52 	bl	800a310 <lv_img_color_format_has_alpha>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d01b      	beq.n	800a4b2 <lv_img_draw_core+0xe2>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a47a:	23ff      	movs	r3, #255	; 0xff
 800a47c:	4a62      	ldr	r2, [pc, #392]	; (800a608 <lv_img_draw_core+0x238>)
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f002 fbb8 	bl	800cbf6 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	2200      	movs	r2, #0
 800a48c:	9205      	str	r2, [sp, #20]
 800a48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a492:	9204      	str	r2, [sp, #16]
 800a494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a498:	9203      	str	r2, [sp, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	9202      	str	r2, [sp, #8]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	9201      	str	r2, [sp, #4]
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	23ff      	movs	r3, #255	; 0xff
 800a4a6:	4a58      	ldr	r2, [pc, #352]	; (800a608 <lv_img_draw_core+0x238>)
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f90a 	bl	800a6c4 <lv_draw_label>
 800a4b0:	e0a5      	b.n	800a5fe <lv_img_draw_core+0x22e>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d017      	beq.n	800a4ea <lv_img_draw_core+0x11a>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	695a      	ldr	r2, [r3, #20]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a4c4:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a4ce:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a4d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fa82 	bl	80099ec <lv_draw_map>
 800a4e8:	e089      	b.n	800a5fe <lv_img_draw_core+0x22e>
                    style->image.intense);
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);
 800a4ea:	f107 0318 	add.w	r3, r7, #24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fe38 	bl	800a164 <lv_area_get_width>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	853b      	strh	r3, [r7, #40]	; 0x28

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 800a4f8:	f107 0318 	add.w	r3, r7, #24
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fe31 	bl	800a164 <lv_area_get_width>
 800a502:	4603      	mov	r3, r0
 800a504:	461a      	mov	r2, r3
 800a506:	4613      	mov	r3, r2
 800a508:	005b      	lsls	r3, r3, #1
 800a50a:	4413      	add	r3, r2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe f93b 	bl	8008788 <lv_draw_get_buf>
 800a512:	6278      	str	r0, [r7, #36]	; 0x24

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800a514:	f107 0218 	add.w	r2, r7, #24
 800a518:	f107 0310 	add.w	r3, r7, #16
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fe12 	bl	800a148 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800a524:	f107 0310 	add.w	r3, r7, #16
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f008 fbd5 	bl	8012cda <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 800a530:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	b29b      	uxth	r3, r3
 800a542:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_coord_t y = mask_com.y1 - coords->y1;
 800a544:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a548:	b29a      	uxth	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a550:	b29b      	uxth	r3, r3
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	b29b      	uxth	r3, r3
 800a556:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a558:	8b7b      	ldrh	r3, [r7, #26]
 800a55a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a55c:	e049      	b.n	800a5f2 <lv_img_draw_core+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a560:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800a564:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800a568:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4623      	mov	r3, r4
 800a572:	f006 fce5 	bl	8010f40 <lv_img_decoder_read_line>
 800a576:	4603      	mov	r3, r0
 800a578:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(read_res != LV_RES_OK) {
 800a57c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a580:	2b01      	cmp	r3, #1
 800a582:	d005      	beq.n	800a590 <lv_img_draw_core+0x1c0>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	4618      	mov	r0, r3
 800a588:	f006 fd06 	bl	8010f98 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e037      	b.n	800a600 <lv_img_draw_core+0x230>
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a596:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a59a:	f107 0010 	add.w	r0, r7, #16
 800a59e:	9303      	str	r3, [sp, #12]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a5a4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a5a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	f7ff fa17 	bl	80099ec <lv_draw_map>
            line.y1++;
 800a5be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	827b      	strh	r3, [r7, #18]
            line.y2++;
 800a5cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b21b      	sxth	r3, r3
 800a5d8:	82fb      	strh	r3, [r7, #22]
            y++;
 800a5da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a5e6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a5f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5f6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	ddaf      	ble.n	800a55e <lv_img_draw_core+0x18e>
        }
    }

    return LV_RES_OK;
 800a5fe:	2301      	movs	r3, #1
}
 800a600:	4618      	mov	r0, r3
 800a602:	373c      	adds	r7, #60	; 0x3c
 800a604:	46bd      	mov	sp, r7
 800a606:	bd90      	pop	{r4, r7, pc}
 800a608:	20006c68 	.word	0x20006c68

0800a60c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7a1b      	ldrb	r3, [r3, #8]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	71fb      	strb	r3, [r7, #7]
 800a62e:	460b      	mov	r3, r1
 800a630:	71bb      	strb	r3, [r7, #6]
 800a632:	4613      	mov	r3, r2
 800a634:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800a636:	79bb      	ldrb	r3, [r7, #6]
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	b2da      	uxtb	r2, r3
 800a642:	7b3b      	ldrb	r3, [r7, #12]
 800a644:	f362 0302 	bfi	r3, r2, #0, #3
 800a648:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	08db      	lsrs	r3, r3, #3
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	b2da      	uxtb	r2, r3
 800a656:	7b3b      	ldrb	r3, [r7, #12]
 800a658:	f362 03c7 	bfi	r3, r2, #3, #5
 800a65c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800a65e:	797b      	ldrb	r3, [r7, #5]
 800a660:	08db      	lsrs	r3, r3, #3
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	7b7b      	ldrb	r3, [r7, #13]
 800a66c:	f362 0304 	bfi	r3, r2, #0, #5
 800a670:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800a672:	79bb      	ldrb	r3, [r7, #6]
 800a674:	089b      	lsrs	r3, r3, #2
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	7b7b      	ldrb	r3, [r7, #13]
 800a680:	f362 1347 	bfi	r3, r2, #5, #3
 800a684:	737b      	strb	r3, [r7, #13]
    return color;
 800a686:	89bb      	ldrh	r3, [r7, #12]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <lv_area_get_width>:
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	b21b      	sxth	r3, r3
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <lv_draw_label>:
 * @param sel_end end index of selected area (`LV_LABEL_TXT_SEL_OFF` if none)
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, uint16_t sel_start, uint16_t sel_end,
                   lv_draw_label_hint_t * hint)
{
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b0b1      	sub	sp, #196	; 0xc4
 800a6c8:	af04      	add	r7, sp, #16
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	70fb      	strb	r3, [r7, #3]
    const lv_font_t * font = style->text.font;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800a6da:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <lv_draw_label+0x30>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff ffd4 	bl	800a694 <lv_area_get_width>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800a6f2:	e019      	b.n	800a728 <lv_draw_label+0x64>
    } else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a704:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a708:	f897 20c4 	ldrb.w	r2, [r7, #196]	; 0xc4
 800a70c:	9202      	str	r2, [sp, #8]
 800a70e:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a712:	9201      	str	r2, [sp, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4623      	mov	r3, r4
 800a718:	460a      	mov	r2, r1
 800a71a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800a71e:	f009 fca3 	bl	8014068 <lv_txt_get_size>
                        flag);
        w = p.x;
 800a722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a724:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    }

    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a728:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800a72c:	f7ff ff6e 	bl	800a60c <lv_font_get_line_height>
 800a730:	4603      	mov	r3, r0
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Init variables for the first line*/
    lv_coord_t line_width = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    lv_point_t pos;
    pos.x = coords->x1;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a750:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    pos.y = coords->y1;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a75a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_coord_t x_ofs = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    lv_coord_t y_ofs = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    if(offset != NULL) {
 800a76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d013      	beq.n	800a79a <lv_draw_label+0xd6>
        x_ofs = offset->x;
 800a772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        y_ofs = offset->y;
 800a77c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a780:	885b      	ldrh	r3, [r3, #2]
 800a782:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        pos.y += y_ofs;
 800a786:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a790:	4413      	add	r3, r2
 800a792:	b29b      	uxth	r3, r3
 800a794:	b21b      	sxth	r3, r3
 800a796:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_start     = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int32_t last_line_start = -1;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0) {
 800a7a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01f      	beq.n	800a7f0 <lv_draw_label+0x12c>
 800a7b0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11b      	bne.n	800a7f0 <lv_draw_label+0x12c>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800a7b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a7ca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a7ce:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800a7d2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	dd04      	ble.n	800a7e6 <lv_draw_label+0x122>
            hint->line_start = -1;
 800a7dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7e4:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800a7e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800a7f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d013      	beq.n	800a820 <lv_draw_label+0x15c>
 800a7f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	db0f      	blt.n	800a820 <lv_draw_label+0x15c>
        line_start = last_line_start;
 800a800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        pos.y += hint->y;
 800a808:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	b29b      	uxth	r3, r3
 800a816:	4413      	add	r3, r2
 800a818:	b29b      	uxth	r3, r3
 800a81a:	b21b      	sxth	r3, r3
 800a81c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a824:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a828:	18d0      	adds	r0, r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a830:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800a834:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	460b      	mov	r3, r1
 800a83c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800a840:	f009 fcc4 	bl	80141cc <lv_txt_get_next_line>
 800a844:	4603      	mov	r3, r0
 800a846:	461a      	mov	r2, r3
 800a848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a84c:	4413      	add	r3, r2
 800a84e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 800a852:	e053      	b.n	800a8fc <lv_draw_label+0x238>
        /*Go to next line*/
        line_start = line_end;
 800a854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a85c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a864:	18d0      	adds	r0, r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a86c:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800a870:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	460b      	mov	r3, r1
 800a878:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800a87c:	f009 fca6 	bl	80141cc <lv_txt_get_next_line>
 800a880:	4603      	mov	r3, r0
 800a882:	461a      	mov	r2, r3
 800a884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a888:	4413      	add	r3, r2
 800a88a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        pos.y += line_height;
 800a88e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a892:	b29a      	uxth	r2, r3
 800a894:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	b21b      	sxth	r3, r3
 800a89e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800a8a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01f      	beq.n	800a8ea <lv_draw_label+0x226>
 800a8aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a8ae:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800a8b2:	db1a      	blt.n	800a8ea <lv_draw_label+0x226>
 800a8b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da15      	bge.n	800a8ea <lv_draw_label+0x226>
            hint->line_start = line_start;
 800a8be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a8c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8c6:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800a8c8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8d4:	1ad2      	subs	r2, r2, r3
 800a8d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8da:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8e8:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800a8ea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a8ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8f2:	4413      	add	r3, r2
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 827d 	beq.w	800adf6 <lv_draw_label+0x732>
    while(pos.y + line_height < mask->y1) {
 800a8fc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a900:	461a      	mov	r2, r3
 800a902:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800a906:	4413      	add	r3, r2
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a90e:	4293      	cmp	r3, r2
 800a910:	dba0      	blt.n	800a854 <lv_draw_label+0x190>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 800a912:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d030      	beq.n	800a980 <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a91e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a926:	18d0      	adds	r0, r2, r3
 800a928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a932:	b29b      	uxth	r3, r3
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	b299      	uxth	r1, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a93e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a94a:	f009 fcf1 	bl	8014330 <lv_txt_get_width>
 800a94e:	4603      	mov	r3, r0
 800a950:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7ff fe9d 	bl	800a694 <lv_area_get_width>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	0fda      	lsrs	r2, r3, #31
 800a966:	4413      	add	r3, r2
 800a968:	105b      	asrs	r3, r3, #1
 800a96a:	4619      	mov	r1, r3
 800a96c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800a970:	b29a      	uxth	r2, r3
 800a972:	b28b      	uxth	r3, r1
 800a974:	4413      	add	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	b21b      	sxth	r3, r3
 800a97a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800a97e:	e031      	b.n	800a9e4 <lv_draw_label+0x320>

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800a980:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a984:	f003 0308 	and.w	r3, r3, #8
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d02b      	beq.n	800a9e4 <lv_draw_label+0x320>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a98c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a994:	18d0      	adds	r0, r2, r3
 800a996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	b299      	uxth	r1, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a9ac:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9b8:	f009 fcba 	bl	8014330 <lv_txt_get_width>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        pos.x += lv_area_get_width(coords) - line_width;
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fe66 	bl	800a694 <lv_area_get_width>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800a9d6:	b292      	uxth	r2, r2
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	b21b      	sxth	r3, r3
 800a9e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    }

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	2bff      	cmp	r3, #255	; 0xff
 800a9e8:	d103      	bne.n	800a9f2 <lv_draw_label+0x32e>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9f0:	e00b      	b.n	800aa0a <lv_draw_label+0x346>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	fb12 f303 	smulbb	r3, r2, r3
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    uint32_t i;
    uint16_t par_start = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    lv_color_t recolor;
    lv_coord_t letter_w;
    lv_style_t sel_style;
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800aa1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa1e:	499c      	ldr	r1, [pc, #624]	; (800ac90 <lv_draw_label+0x5cc>)
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fd fea3 	bl	800876c <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800aa2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800aa2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa2e:	857b      	strh	r3, [r7, #42]	; 0x2a

    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800aa30:	e1d7      	b.n	800ade2 <lv_draw_label+0x71e>
        if(offset != NULL) {
 800aa32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <lv_draw_label+0x38a>
            pos.x += x_ofs;
 800aa3a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800aa44:	4413      	add	r3, r2
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	b21b      	sxth	r3, r3
 800aa4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }
        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        i         = line_start;
 800aa54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa58:	66bb      	str	r3, [r7, #104]	; 0x68
        uint32_t letter;
        uint32_t letter_next;
        while(i < line_end) {
 800aa5a:	e120      	b.n	800ac9e <lv_draw_label+0x5da>
            letter      = lv_txt_encoded_next(txt, &i);
 800aa5c:	4b8d      	ldr	r3, [pc, #564]	; (800ac94 <lv_draw_label+0x5d0>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800aa64:	4611      	mov	r1, r2
 800aa66:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800aa6a:	4798      	blx	r3
 800aa6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800aa70:	4b88      	ldr	r3, [pc, #544]	; (800ac94 <lv_draw_label+0x5d0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa76:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800aa7a:	440a      	add	r2, r1
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4610      	mov	r0, r2
 800aa80:	4798      	blx	r3
 800aa82:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

            /*Handle the re-color command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800aa86:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d07a      	beq.n	800ab88 <lv_draw_label+0x4c4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800aa92:	2323      	movs	r3, #35	; 0x23
 800aa94:	461a      	mov	r2, r3
 800aa96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d11a      	bne.n	800aad4 <lv_draw_label+0x410>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800aa9e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <lv_draw_label+0x3f0>
                        par_start = i;
 800aaa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                        cmd_state = CMD_STATE_PAR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800aab2:	e0f4      	b.n	800ac9e <lv_draw_label+0x5da>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800aab4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d103      	bne.n	800aac4 <lv_draw_label+0x400>
                        cmd_state = CMD_STATE_WAIT;
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800aac2:	e007      	b.n	800aad4 <lv_draw_label+0x410>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800aac4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d103      	bne.n	800aad4 <lv_draw_label+0x410>
                        cmd_state = CMD_STATE_WAIT;
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800aad2:	e0e4      	b.n	800ac9e <lv_draw_label+0x5da>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800aad4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d155      	bne.n	800ab88 <lv_draw_label+0x4c4>
                    if(letter == ' ') {
 800aadc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	f040 80db 	bne.w	800ac9c <lv_draw_label+0x5d8>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800aae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aae8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	2b07      	cmp	r3, #7
 800aaf0:	d142      	bne.n	800ab78 <lv_draw_label+0x4b4>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800aaf2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aaf6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aafa:	18d1      	adds	r1, r2, r3
 800aafc:	f107 0318 	add.w	r3, r7, #24
 800ab00:	2206      	movs	r2, #6
 800ab02:	4618      	mov	r0, r3
 800ab04:	f01c fb4c 	bl	80271a0 <memcpy>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800ab08:	2300      	movs	r3, #0
 800ab0a:	77bb      	strb	r3, [r7, #30]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ab0c:	7e3b      	ldrb	r3, [r7, #24]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f978 	bl	800ae04 <hex_char_to_num>
 800ab14:	4603      	mov	r3, r0
 800ab16:	011c      	lsls	r4, r3, #4
 800ab18:	7e7b      	ldrb	r3, [r7, #25]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f972 	bl	800ae04 <hex_char_to_num>
 800ab20:	4603      	mov	r3, r0
 800ab22:	4423      	add	r3, r4
 800ab24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800ab28:	7ebb      	ldrb	r3, [r7, #26]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f96a 	bl	800ae04 <hex_char_to_num>
 800ab30:	4603      	mov	r3, r0
 800ab32:	011c      	lsls	r4, r3, #4
 800ab34:	7efb      	ldrb	r3, [r7, #27]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f964 	bl	800ae04 <hex_char_to_num>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	4423      	add	r3, r4
 800ab40:	67fb      	str	r3, [r7, #124]	; 0x7c
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800ab42:	7f3b      	ldrb	r3, [r7, #28]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 f95d 	bl	800ae04 <hex_char_to_num>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	011c      	lsls	r4, r3, #4
 800ab4e:	7f7b      	ldrb	r3, [r7, #29]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f957 	bl	800ae04 <hex_char_to_num>
 800ab56:	4603      	mov	r3, r0
 800ab58:	4423      	add	r3, r4
 800ab5a:	67bb      	str	r3, [r7, #120]	; 0x78
                            recolor = lv_color_make(r, g, b);
 800ab5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab64:	b2d1      	uxtb	r1, r2
 800ab66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fd5a 	bl	800a624 <lv_color_make>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab76:	e003      	b.n	800ab80 <lv_draw_label+0x4bc>
                        } else {
                            recolor.full = style->text.color.full;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8c1b      	ldrh	r3, [r3, #32]
 800ab7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ab80:	2302      	movs	r3, #2
 800ab82:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    }
                    continue;
 800ab86:	e089      	b.n	800ac9c <lv_draw_label+0x5d8>
                }
            }

            lv_color_t color = style->text.color;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	8c1b      	ldrh	r3, [r3, #32]
 800ab8c:	843b      	strh	r3, [r7, #32]

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800ab8e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d102      	bne.n	800ab9c <lv_draw_label+0x4d8>
 800ab96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab9a:	843b      	strh	r3, [r7, #32]

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ab9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aba0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800aba4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800aba8:	f007 f92a 	bl	8011e00 <lv_font_get_glyph_width>
 800abac:	4603      	mov	r3, r0
 800abae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800abb2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800abb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abba:	4293      	cmp	r3, r2
 800abbc:	d043      	beq.n	800ac46 <lv_draw_label+0x582>
 800abbe:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800abc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d03d      	beq.n	800ac46 <lv_draw_label+0x582>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800abca:	4b33      	ldr	r3, [pc, #204]	; (800ac98 <lv_draw_label+0x5d4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abd0:	4611      	mov	r1, r2
 800abd2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800abd6:	4798      	blx	r3
 800abd8:	4603      	mov	r3, r0
 800abda:	673b      	str	r3, [r7, #112]	; 0x70
                /*Do not draw the rectangle on the character at `sel_start`.*/
                if(char_ind > sel_start && char_ind <= sel_end) {
 800abdc:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800abe0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abe2:	429a      	cmp	r2, r3
 800abe4:	dd2f      	ble.n	800ac46 <lv_draw_label+0x582>
 800abe6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800abea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abec:	429a      	cmp	r2, r3
 800abee:	dc2a      	bgt.n	800ac46 <lv_draw_label+0x582>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800abf0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800abf4:	823b      	strh	r3, [r7, #16]
                    sel_coords.y1 = pos.y;
 800abf6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800abfa:	827b      	strh	r3, [r7, #18]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800abfc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ac06:	4413      	add	r3, r2
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	4413      	add	r3, r2
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	82bb      	strh	r3, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800ac1e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ac28:	4413      	add	r3, r2
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	b21b      	sxth	r3, r3
 800ac32:	82fb      	strh	r3, [r7, #22]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800ac34:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ac38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac3c:	f107 0010 	add.w	r0, r7, #16
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	f001 ffd8 	bl	800cbf6 <lv_draw_rect>
                }
            }
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800ac46:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800ac4a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	8c3b      	ldrh	r3, [r7, #32]
 800ac52:	f8ad 3000 	strh.w	r3, [sp]
 800ac56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	f7fe fc1c 	bl	800949c <lv_draw_letter>

            if(letter_w > 0) {
 800ac64:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dd18      	ble.n	800ac9e <lv_draw_label+0x5da>
                pos.x += letter_w + style->text.letter_space;
 800ac6c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800ac78:	b299      	uxth	r1, r3
 800ac7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ac7e:	440b      	add	r3, r1
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	4413      	add	r3, r2
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ac8c:	e007      	b.n	800ac9e <lv_draw_label+0x5da>
 800ac8e:	bf00      	nop
 800ac90:	20006d58 	.word	0x20006d58
 800ac94:	2000279c 	.word	0x2000279c
 800ac98:	200027a8 	.word	0x200027a8
                    continue;
 800ac9c:	bf00      	nop
        while(i < line_end) {
 800ac9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aca0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f63f aed9 	bhi.w	800aa5c <lv_draw_label+0x398>
            }
        }
        /*Go to next line*/
        line_start = line_end;
 800acaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800acb2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800acb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acba:	18d0      	adds	r0, r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800acc2:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800acc6:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	460b      	mov	r3, r1
 800acce:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800acd2:	f009 fa7b 	bl	80141cc <lv_txt_get_next_line>
 800acd6:	4603      	mov	r3, r0
 800acd8:	461a      	mov	r2, r3
 800acda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acde:	4413      	add	r3, r2
 800ace0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        pos.x = coords->x1;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 800acee:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800acf2:	f003 0304 	and.w	r3, r3, #4
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d030      	beq.n	800ad5c <lv_draw_label+0x698>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800acfa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800acfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad02:	18d0      	adds	r0, r2, r3
 800ad04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	b299      	uxth	r1, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800ad1a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	4613      	mov	r3, r2
 800ad22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad26:	f009 fb03 	bl	8014330 <lv_txt_get_width>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff fcaf 	bl	800a694 <lv_area_get_width>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	0fda      	lsrs	r2, r3, #31
 800ad42:	4413      	add	r3, r2
 800ad44:	105b      	asrs	r3, r3, #1
 800ad46:	4619      	mov	r1, r3
 800ad48:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	b28b      	uxth	r3, r1
 800ad50:	4413      	add	r3, r2
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	b21b      	sxth	r3, r3
 800ad56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ad5a:	e031      	b.n	800adc0 <lv_draw_label+0x6fc>

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800ad5c:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad60:	f003 0308 	and.w	r3, r3, #8
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d02b      	beq.n	800adc0 <lv_draw_label+0x6fc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800ad68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ad6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad70:	18d0      	adds	r0, r2, r3
 800ad72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	b299      	uxth	r1, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800ad88:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad94:	f009 facc 	bl	8014330 <lv_txt_get_width>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            pos.x += lv_area_get_width(coords) - line_width;
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff fc78 	bl	800a694 <lv_area_get_width>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461a      	mov	r2, r3
 800ada8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800adb2:	b292      	uxth	r2, r2
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4413      	add	r3, r2
 800adb8:	b29b      	uxth	r3, r3
 800adba:	b21b      	sxth	r3, r3
 800adbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        /*Go the next line position*/
        pos.y += line_height;
 800adc0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800adca:	4413      	add	r3, r2
 800adcc:	b29b      	uxth	r3, r3
 800adce:	b21b      	sxth	r3, r3
 800add0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if(pos.y > mask->y2) return;
 800add4:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800adde:	429a      	cmp	r2, r3
 800ade0:	dc0b      	bgt.n	800adfa <lv_draw_label+0x736>
    while(txt[line_start] != '\0') {
 800ade2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ade6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adea:	4413      	add	r3, r2
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f47f ae1f 	bne.w	800aa32 <lv_draw_label+0x36e>
 800adf4:	e002      	b.n	800adfc <lv_draw_label+0x738>
        if(txt[line_start] == '\0') return;
 800adf6:	bf00      	nop
 800adf8:	e000      	b.n	800adfc <lv_draw_label+0x738>
        if(pos.y > mask->y2) return;
 800adfa:	bf00      	nop
    }
}
 800adfc:	37b4      	adds	r7, #180	; 0xb4
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd90      	pop	{r4, r7, pc}
 800ae02:	bf00      	nop

0800ae04 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	2b2f      	cmp	r3, #47	; 0x2f
 800ae16:	d906      	bls.n	800ae26 <hex_char_to_num+0x22>
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	2b39      	cmp	r3, #57	; 0x39
 800ae1c:	d803      	bhi.n	800ae26 <hex_char_to_num+0x22>
        result = hex - '0';
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	3b30      	subs	r3, #48	; 0x30
 800ae22:	73fb      	strb	r3, [r7, #15]
 800ae24:	e02d      	b.n	800ae82 <hex_char_to_num+0x7e>
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	2b60      	cmp	r3, #96	; 0x60
 800ae2a:	d902      	bls.n	800ae32 <hex_char_to_num+0x2e>
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	3b20      	subs	r3, #32
 800ae30:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	3b41      	subs	r3, #65	; 0x41
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d820      	bhi.n	800ae7c <hex_char_to_num+0x78>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <hex_char_to_num+0x3c>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae5f 	.word	0x0800ae5f
 800ae48:	0800ae65 	.word	0x0800ae65
 800ae4c:	0800ae6b 	.word	0x0800ae6b
 800ae50:	0800ae71 	.word	0x0800ae71
 800ae54:	0800ae77 	.word	0x0800ae77
            case 'A': result = 10; break;
 800ae58:	230a      	movs	r3, #10
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	e011      	b.n	800ae82 <hex_char_to_num+0x7e>
            case 'B': result = 11; break;
 800ae5e:	230b      	movs	r3, #11
 800ae60:	73fb      	strb	r3, [r7, #15]
 800ae62:	e00e      	b.n	800ae82 <hex_char_to_num+0x7e>
            case 'C': result = 12; break;
 800ae64:	230c      	movs	r3, #12
 800ae66:	73fb      	strb	r3, [r7, #15]
 800ae68:	e00b      	b.n	800ae82 <hex_char_to_num+0x7e>
            case 'D': result = 13; break;
 800ae6a:	230d      	movs	r3, #13
 800ae6c:	73fb      	strb	r3, [r7, #15]
 800ae6e:	e008      	b.n	800ae82 <hex_char_to_num+0x7e>
            case 'E': result = 14; break;
 800ae70:	230e      	movs	r3, #14
 800ae72:	73fb      	strb	r3, [r7, #15]
 800ae74:	e005      	b.n	800ae82 <hex_char_to_num+0x7e>
            case 'F': result = 15; break;
 800ae76:	230f      	movs	r3, #15
 800ae78:	73fb      	strb	r3, [r7, #15]
 800ae7a:	e002      	b.n	800ae82 <hex_char_to_num+0x7e>
            default: result = 0; break;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
 800ae80:	bf00      	nop
        }
    }

    return result;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
                  const lv_style_t * style, lv_opa_t opa_scale)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b090      	sub	sp, #64	; 0x40
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	603b      	str	r3, [r7, #0]

    if(style->line.width == 0) return;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 81ce 	beq.w	800b246 <lv_draw_line+0x3b6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d108      	bne.n	800aecc <lv_draw_line+0x3c>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	f000 81bf 	beq.w	800b24a <lv_draw_line+0x3ba>

    /*Return if the points are out of the mask*/
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aed2:	461a      	mov	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeda:	4619      	mov	r1, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800aee2:	1acb      	subs	r3, r1, r3
 800aee4:	429a      	cmp	r2, r3
 800aee6:	da0e      	bge.n	800af06 <lv_draw_line+0x76>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aef6:	4619      	mov	r1, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800aefe:	1acb      	subs	r3, r1, r3
 800af00:	429a      	cmp	r2, r3
 800af02:	f2c0 81a4 	blt.w	800b24e <lv_draw_line+0x3be>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800af14:	4619      	mov	r1, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af1c:	440b      	add	r3, r1
 800af1e:	429a      	cmp	r2, r3
 800af20:	dd0e      	ble.n	800af40 <lv_draw_line+0xb0>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af28:	461a      	mov	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800af30:	4619      	mov	r1, r3
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af38:	440b      	add	r3, r1
 800af3a:	429a      	cmp	r2, r3
 800af3c:	f300 8189 	bgt.w	800b252 <lv_draw_line+0x3c2>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af46:	461a      	mov	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af4e:	4619      	mov	r1, r3
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af56:	1acb      	subs	r3, r1, r3
 800af58:	429a      	cmp	r2, r3
 800af5a:	da0e      	bge.n	800af7a <lv_draw_line+0xea>
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af6a:	4619      	mov	r1, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af72:	1acb      	subs	r3, r1, r3
 800af74:	429a      	cmp	r2, r3
 800af76:	f2c0 816e 	blt.w	800b256 <lv_draw_line+0x3c6>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800af88:	4619      	mov	r1, r3
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af90:	440b      	add	r3, r1
 800af92:	429a      	cmp	r2, r3
 800af94:	dd0e      	ble.n	800afb4 <lv_draw_line+0x124>
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af9c:	461a      	mov	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800afa4:	4619      	mov	r1, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800afac:	440b      	add	r3, r1
 800afae:	429a      	cmp	r2, r3
 800afb0:	f300 8153 	bgt.w	800b25a <lv_draw_line+0x3ca>
    lv_point_t p1;
    lv_point_t p2;

    /*If the line if rather vertical then be sure y1 < y2 else x1 < x2*/

    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afba:	461a      	mov	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800afc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afd2:	4619      	mov	r1, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afda:	1acb      	subs	r3, r1, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	bfb8      	it	lt
 800afe0:	425b      	neglt	r3, r3
 800afe2:	429a      	cmp	r2, r3
 800afe4:	dd29      	ble.n	800b03a <lv_draw_line+0x1aa>

        /*Steps less in y then x -> rather horizontal*/
        if(point1->x < point2->x) {
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	da10      	bge.n	800b018 <lv_draw_line+0x188>
            p1.x = point1->x;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800affc:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b004:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b00c:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b014:	82fb      	strh	r3, [r7, #22]
 800b016:	e039      	b.n	800b08c <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b01e:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b026:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b02e:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b036:	82fb      	strh	r3, [r7, #22]
 800b038:	e028      	b.n	800b08c <lv_draw_line+0x1fc>
        }
    } else {
        /*Steps less in x then y -> rather vertical*/
        if(point1->y < point2->y) {
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b046:	429a      	cmp	r2, r3
 800b048:	da10      	bge.n	800b06c <lv_draw_line+0x1dc>
            p1.x = point1->x;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b050:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b058:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b060:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b068:	82fb      	strh	r3, [r7, #22]
 800b06a:	e00f      	b.n	800b08c <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b072:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b07a:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b082:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b08a:	82fb      	strh	r3, [r7, #22]
        }
    }

    line_init(&main_line, &p1, &p2);
 800b08c:	f107 0214 	add.w	r2, r7, #20
 800b090:	f107 0118 	add.w	r1, r7, #24
 800b094:	f107 031c 	add.w	r3, r7, #28
 800b098:	4618      	mov	r0, r3
 800b09a:	f001 fbb0 	bl	800c7fe <line_init>

    /*Special case draw a horizontal line*/
    if(main_line.p1.y == main_line.p2.y) {
 800b09e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b0a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d108      	bne.n	800b0bc <lv_draw_line+0x22c>
        line_draw_hor(&main_line, mask, style, opa_scale);
 800b0aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0ae:	f107 001c 	add.w	r0, r7, #28
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	f000 f8d4 	bl	800b262 <line_draw_hor>
 800b0ba:	e0cf      	b.n	800b25c <lv_draw_line+0x3cc>
    }
    /*Special case draw a vertical line*/
    else if(main_line.p1.x == main_line.p2.x) {
 800b0bc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b0c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d108      	bne.n	800b0da <lv_draw_line+0x24a>
        line_draw_ver(&main_line, mask, style, opa_scale);
 800b0c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0cc:	f107 001c 	add.w	r0, r7, #28
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	f000 f93e 	bl	800b354 <line_draw_ver>
 800b0d8:	e0c0      	b.n	800b25c <lv_draw_line+0x3cc>
    }
    /*Arbitrary skew line*/
    else {
        bool dir_ori = false;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if LV_ANTIALIAS
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b0e0:	f7fc fbe0 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f007 faac 	bl	8012644 <lv_disp_get_antialiasing>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(aa) {
 800b0f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8099 	beq.w	800b22e <lv_draw_line+0x39e>
            lv_point_t p_tmp;

            if(main_line.hor) {
 800b0fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b100:	2b00      	cmp	r3, #0
 800b102:	d04a      	beq.n	800b19a <lv_draw_line+0x30a>
                if(main_line.p1.y < main_line.p2.y) {
 800b104:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b108:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b10c:	429a      	cmp	r2, r3
 800b10e:	da1d      	bge.n	800b14c <lv_draw_line+0x2bc>
                    dir_ori = true;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800b116:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b11a:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y - 1;
 800b11c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	b29b      	uxth	r3, r3
 800b126:	b21b      	sxth	r3, r3
 800b128:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b12a:	f107 0210 	add.w	r2, r7, #16
 800b12e:	f107 0118 	add.w	r1, r7, #24
 800b132:	f107 031c 	add.w	r3, r7, #28
 800b136:	4618      	mov	r0, r3
 800b138:	f001 fb61 	bl	800c7fe <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800b13c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfb8      	it	lt
 800b144:	425b      	neglt	r3, r3
 800b146:	b21b      	sxth	r3, r3
 800b148:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b14a:	e070      	b.n	800b22e <lv_draw_line+0x39e>
                } else if(main_line.p1.y > main_line.p2.y) {
 800b14c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b150:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b154:	429a      	cmp	r2, r3
 800b156:	dd6a      	ble.n	800b22e <lv_draw_line+0x39e>
                    dir_ori = false;
 800b158:	2300      	movs	r3, #0
 800b15a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800b15e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b162:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y + 1;
 800b164:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b168:	b29b      	uxth	r3, r3
 800b16a:	3301      	adds	r3, #1
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	b21b      	sxth	r3, r3
 800b170:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b172:	f107 0210 	add.w	r2, r7, #16
 800b176:	f107 0118 	add.w	r1, r7, #24
 800b17a:	f107 031c 	add.w	r3, r7, #28
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 fb3d 	bl	800c7fe <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800b184:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfb8      	it	lt
 800b18c:	425b      	neglt	r3, r3
 800b18e:	b29b      	uxth	r3, r3
 800b190:	425b      	negs	r3, r3
 800b192:	b29b      	uxth	r3, r3
 800b194:	b21b      	sxth	r3, r3
 800b196:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b198:	e049      	b.n	800b22e <lv_draw_line+0x39e>
                }
            } else {
                if(main_line.p1.x < main_line.p2.x) {
 800b19a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b19e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	da1d      	bge.n	800b1e2 <lv_draw_line+0x352>
                    dir_ori = true;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x - 1;
 800b1ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	b21b      	sxth	r3, r3
 800b1b8:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800b1ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b1be:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b1c0:	f107 0210 	add.w	r2, r7, #16
 800b1c4:	f107 0118 	add.w	r1, r7, #24
 800b1c8:	f107 031c 	add.w	r3, r7, #28
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f001 fb16 	bl	800c7fe <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800b1d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bfb8      	it	lt
 800b1da:	425b      	neglt	r3, r3
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b1e0:	e025      	b.n	800b22e <lv_draw_line+0x39e>
                } else if(main_line.p1.x > main_line.p2.x) {
 800b1e2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b1e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	dd1f      	ble.n	800b22e <lv_draw_line+0x39e>
                    dir_ori = false;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x + 1;
 800b1f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	b21b      	sxth	r3, r3
 800b200:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800b202:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b206:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b208:	f107 0210 	add.w	r2, r7, #16
 800b20c:	f107 0118 	add.w	r1, r7, #24
 800b210:	f107 031c 	add.w	r3, r7, #28
 800b214:	4618      	mov	r0, r3
 800b216:	f001 faf2 	bl	800c7fe <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800b21a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb8      	it	lt
 800b222:	425b      	neglt	r3, r3
 800b224:	b29b      	uxth	r3, r3
 800b226:	425b      	negs	r3, r3
 800b228:	b29b      	uxth	r3, r3
 800b22a:	b21b      	sxth	r3, r3
 800b22c:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
            }
        }
#endif
        line_draw_skew(&main_line, dir_ori, mask, style, opa_scale);
 800b22e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800b232:	f107 001c 	add.w	r0, r7, #28
 800b236:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	f000 f901 	bl	800b446 <line_draw_skew>
 800b244:	e00a      	b.n	800b25c <lv_draw_line+0x3cc>
    if(style->line.width == 0) return;
 800b246:	bf00      	nop
 800b248:	e008      	b.n	800b25c <lv_draw_line+0x3cc>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800b24a:	bf00      	nop
 800b24c:	e006      	b.n	800b25c <lv_draw_line+0x3cc>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800b24e:	bf00      	nop
 800b250:	e004      	b.n	800b25c <lv_draw_line+0x3cc>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800b252:	bf00      	nop
 800b254:	e002      	b.n	800b25c <lv_draw_line+0x3cc>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800b256:	bf00      	nop
 800b258:	e000      	b.n	800b25c <lv_draw_line+0x3cc>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800b25a:	bf00      	nop
    }
}
 800b25c:	3738      	adds	r7, #56	; 0x38
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <line_draw_hor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void line_draw_hor(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b08a      	sub	sp, #40	; 0x28
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800b27e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b282:	105b      	asrs	r3, r3, #1
 800b284:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800b286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	2bff      	cmp	r3, #255	; 0xff
 800b292:	d103      	bne.n	800b29c <line_draw_hor+0x3a>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b29a:	e00b      	b.n	800b2b4 <line_draw_hor+0x52>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	fb12 f303 	smulbb	r3, r2, r3
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2be:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b2c6:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	b21b      	sxth	r3, r3
 800b2de:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y + width_half;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ea:	4413      	add	r3, r2
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	b21b      	sxth	r3, r3
 800b2f0:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b2f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b2f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	bfa8      	it	ge
 800b2fe:	4613      	movge	r3, r2
 800b300:	b21b      	sxth	r3, r3
 800b302:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b304:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b308:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b30c:	4293      	cmp	r3, r2
 800b30e:	bfb8      	it	lt
 800b310:	4613      	movlt	r3, r2
 800b312:	b21b      	sxth	r3, r3
 800b314:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b316:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b31a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b31e:	4293      	cmp	r3, r2
 800b320:	bfa8      	it	ge
 800b322:	4613      	movge	r3, r2
 800b324:	b21b      	sxth	r3, r3
 800b326:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b328:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b32c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b330:	4293      	cmp	r3, r2
 800b332:	bfb8      	it	lt
 800b334:	4613      	movlt	r3, r2
 800b336:	b21b      	sxth	r3, r3
 800b338:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800b33a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	f107 0010 	add.w	r0, r7, #16
 800b344:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	f7fe f82f 	bl	80093aa <lv_draw_fill>
}
 800b34c:	bf00      	nop
 800b34e:	3728      	adds	r7, #40	; 0x28
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <line_draw_ver>:

static void line_draw_ver(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800b368:	b29b      	uxth	r3, r3
 800b36a:	3b01      	subs	r3, #1
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800b370:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b374:	105b      	asrs	r3, r3, #1
 800b376:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800b378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	2bff      	cmp	r3, #255	; 0xff
 800b384:	d103      	bne.n	800b38e <line_draw_ver+0x3a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b38c:	e00b      	b.n	800b3a6 <line_draw_ver+0x52>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b394:	b29a      	uxth	r2, r3
 800b396:	78fb      	ldrb	r3, [r7, #3]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	fb12 f303 	smulbb	r3, r2, r3
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x - width_half;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	b21b      	sxth	r3, r3
 800b3ba:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c6:	4413      	add	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	b21b      	sxth	r3, r3
 800b3d2:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3da:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3e2:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b3e4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b3e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	bfa8      	it	ge
 800b3f0:	4613      	movge	r3, r2
 800b3f2:	b21b      	sxth	r3, r3
 800b3f4:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b3f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b3fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3fe:	4293      	cmp	r3, r2
 800b400:	bfb8      	it	lt
 800b402:	4613      	movlt	r3, r2
 800b404:	b21b      	sxth	r3, r3
 800b406:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b408:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b40c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b410:	4293      	cmp	r3, r2
 800b412:	bfa8      	it	ge
 800b414:	4613      	movge	r3, r2
 800b416:	b21b      	sxth	r3, r3
 800b418:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b41a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b41e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b422:	4293      	cmp	r3, r2
 800b424:	bfb8      	it	lt
 800b426:	4613      	movlt	r3, r2
 800b428:	b21b      	sxth	r3, r3
 800b42a:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800b42c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	f107 0010 	add.w	r0, r7, #16
 800b436:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800b438:	68b9      	ldr	r1, [r7, #8]
 800b43a:	f7fd ffb6 	bl	80093aa <lv_draw_fill>
}
 800b43e:	bf00      	nop
 800b440:	3728      	adds	r7, #40	; 0x28
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <line_draw_skew>:

static void line_draw_skew(line_draw_t * main_line, bool dir_ori, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b09e      	sub	sp, #120	; 0x78
 800b44a:	af02      	add	r7, sp, #8
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
 800b452:	460b      	mov	r3, r1
 800b454:	72fb      	strb	r3, [r7, #11]

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b456:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800b45a:	2bff      	cmp	r3, #255	; 0xff
 800b45c:	d103      	bne.n	800b466 <line_draw_skew+0x20>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b464:	e00c      	b.n	800b480 <line_draw_skew+0x3a>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800b472:	b29b      	uxth	r3, r3
 800b474:	fb12 f303 	smulbb	r3, r2, r3
 800b478:	b29b      	uxth	r3, r3
 800b47a:	0a1b      	lsrs	r3, r3, #8
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
#if LV_ANTIALIAS
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b484:	f7fc fa0e 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800b488:	4603      	mov	r3, r0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f007 f8da 	bl	8012644 <lv_disp_get_antialiasing>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
#endif
    lv_point_t vect_main, vect_norm;
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	b21b      	sxth	r3, r3
 800b4ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	b21b      	sxth	r3, r3
 800b4c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(main_line->hor) {
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	7e1b      	ldrb	r3, [r3, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d025      	beq.n	800b51e <line_draw_skew+0xd8>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	440b      	add	r3, r1
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	da0c      	bge.n	800b504 <line_draw_skew+0xbe>
            vect_norm.x = -vect_main.y;
 800b4ea:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	425b      	negs	r3, r3
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	b21b      	sxth	r3, r3
 800b4f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800b4fa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b502:	e031      	b.n	800b568 <line_draw_skew+0x122>
        } else {
            vect_norm.x = vect_main.y;
 800b504:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b508:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800b50c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b510:	b29b      	uxth	r3, r3
 800b512:	425b      	negs	r3, r3
 800b514:	b29b      	uxth	r3, r3
 800b516:	b21b      	sxth	r3, r3
 800b518:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b51c:	e024      	b.n	800b568 <line_draw_skew+0x122>
        }
    } else {
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b524:	461a      	mov	r2, r3
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b52c:	4619      	mov	r1, r3
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	440b      	add	r3, r1
 800b532:	429a      	cmp	r2, r3
 800b534:	da0c      	bge.n	800b550 <line_draw_skew+0x10a>
            vect_norm.x = vect_main.y;
 800b536:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b53a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800b53e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b542:	b29b      	uxth	r3, r3
 800b544:	425b      	negs	r3, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	b21b      	sxth	r3, r3
 800b54a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b54e:	e00b      	b.n	800b568 <line_draw_skew+0x122>
        } else {
            vect_norm.x = -vect_main.y;
 800b550:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b554:	b29b      	uxth	r3, r3
 800b556:	425b      	negs	r3, r3
 800b558:	b29b      	uxth	r3, r3
 800b55a:	b21b      	sxth	r3, r3
 800b55c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800b560:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }
    }

    /* In case of a short but tick line the perpendicular ending is longer then the real line.
     * it would break the calculations so make the normal vector larger*/
    vect_norm.x = vect_norm.x << 4;
 800b568:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	b21b      	sxth	r3, r3
 800b570:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    vect_norm.y = vect_norm.y << 4;
 800b574:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b578:	011b      	lsls	r3, r3, #4
 800b57a:	b21b      	sxth	r3, r3
 800b57c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lv_coord_t width;
    width = style->line.width;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b584:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    /* The pattern stores the points of the line ending. It has the good direction and length.
     * The worth case is the 45° line where pattern can have 1.41 x `width` points*/

    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 800b588:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fd f8fa 	bl	8008788 <lv_draw_get_buf>
 800b594:	65b8      	str	r0, [r7, #88]	; 0x58
    lv_coord_t i = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    /*Create a perpendicular pattern (a small line)*/
    if(width != 0) {
 800b59c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d05b      	beq.n	800b65c <line_draw_skew+0x216>
        line_draw_t pattern_line;
        lv_point_t p0 = {0, 0};
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	82bb      	strh	r3, [r7, #20]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	82fb      	strh	r3, [r7, #22]
        line_init(&pattern_line, &p0, &vect_norm);
 800b5ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b5b0:	f107 0114 	add.w	r1, r7, #20
 800b5b4:	f107 0318 	add.w	r3, r7, #24
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f001 f920 	bl	800c7fe <line_init>

        uint32_t width_sqr = width * width;
 800b5be:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b5c2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ca:	657b      	str	r3, [r7, #84]	; 0x54
        /* Run for a lot of times. Meanwhile the real width will be determined as well */
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b5d2:	e03d      	b.n	800b650 <line_draw_skew+0x20a>
            pattern[i].x = pattern_line.p_act.x;
 800b5d4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5dc:	4413      	add	r3, r2
 800b5de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5e2:	801a      	strh	r2, [r3, #0]
            pattern[i].y = pattern_line.p_act.y;
 800b5e4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800b5f2:	805a      	strh	r2, [r3, #2]

            /*Finish the pattern line if it's length equal to the desired width (Use Pythagoras
             * theorem)*/
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b5f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b5f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5fc:	fb02 f203 	mul.w	r2, r2, r3
 800b600:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b604:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	653b      	str	r3, [r7, #80]	; 0x50
            if(sqr >= width_sqr) {
 800b610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b614:	429a      	cmp	r2, r3
 800b616:	d30f      	bcc.n	800b638 <line_draw_skew+0x1f2>
                width = i;
 800b618:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b61c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#if LV_ANTIALIAS
                if(aa) width--;
 800b620:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b624:	2b00      	cmp	r3, #0
 800b626:	d018      	beq.n	800b65a <line_draw_skew+0x214>
 800b628:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	3b01      	subs	r3, #1
 800b630:	b29b      	uxth	r3, r3
 800b632:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#endif
                break;
 800b636:	e010      	b.n	800b65a <line_draw_skew+0x214>
            }

            line_next(&pattern_line);
 800b638:	f107 0318 	add.w	r3, r7, #24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f001 f96a 	bl	800c916 <line_next>
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800b642:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b646:	b29b      	uxth	r3, r3
 800b648:	3301      	adds	r3, #1
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b650:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b654:	2b03      	cmp	r3, #3
 800b656:	ddbd      	ble.n	800b5d4 <line_draw_skew+0x18e>
 800b658:	e000      	b.n	800b65c <line_draw_skew+0x216>
                break;
 800b65a:	bf00      	nop
        }
    }

#if LV_ANTIALIAS
    lv_coord_t aa_last_corner;
    lv_coord_t width_safe = width;
 800b65c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b660:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    if(aa) {
 800b664:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d009      	beq.n	800b680 <line_draw_skew+0x23a>
        if(width == 0) width_safe = 1;
 800b66c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <line_draw_skew+0x234>
 800b674:	2301      	movs	r3, #1
 800b676:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        aa_last_corner = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    }
#endif

    lv_coord_t x_center_ofs = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    lv_coord_t y_center_ofs = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    if(width != 0) {
 800b68c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01e      	beq.n	800b6d2 <line_draw_skew+0x28c>
        x_center_ofs = pattern[width - 1].x / 2;
 800b694:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b69c:	3b01      	subs	r3, #1
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6a8:	0fda      	lsrs	r2, r3, #31
 800b6aa:	4413      	add	r3, r2
 800b6ac:	105b      	asrs	r3, r3, #1
 800b6ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        y_center_ofs = pattern[width - 1].y / 2;
 800b6b2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b6b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6c6:	0fda      	lsrs	r2, r3, #31
 800b6c8:	4413      	add	r3, r2
 800b6ca:	105b      	asrs	r3, r3, #1
 800b6cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b6d0:	e034      	b.n	800b73c <line_draw_skew+0x2f6>
    } else {
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	7e1b      	ldrb	r3, [r3, #24]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d014      	beq.n	800b704 <line_draw_skew+0x2be>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	7afb      	ldrb	r3, [r7, #11]
 800b6ec:	440b      	add	r3, r1
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	db08      	blt.n	800b704 <line_draw_skew+0x2be>
 800b6f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	b21a      	sxth	r2, r3
 800b700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b702:	805a      	strh	r2, [r3, #2]
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	7e1b      	ldrb	r3, [r3, #24]
 800b708:	f083 0301 	eor.w	r3, r3, #1
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d014      	beq.n	800b73c <line_draw_skew+0x2f6>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b718:	461a      	mov	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b720:	4619      	mov	r1, r3
 800b722:	7afb      	ldrb	r3, [r7, #11]
 800b724:	440b      	add	r3, r1
 800b726:	429a      	cmp	r2, r3
 800b728:	db08      	blt.n	800b73c <line_draw_skew+0x2f6>
 800b72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b72c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b730:	b29b      	uxth	r3, r3
 800b732:	3b01      	subs	r3, #1
 800b734:	b29b      	uxth	r3, r3
 800b736:	b21a      	sxth	r2, r3
 800b738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b73a:	801a      	strh	r2, [r3, #0]
    }

    /* Make the coordinates relative to the center */
    for(i = 0; i < width; i++) {
 800b73c:	2300      	movs	r3, #0
 800b73e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b742:	e224      	b.n	800bb8e <line_draw_skew+0x748>
        pattern[i].x -= x_center_ofs;
 800b744:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b74c:	4413      	add	r3, r2
 800b74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b752:	b29a      	uxth	r2, r3
 800b754:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	b299      	uxth	r1, r3
 800b75c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b764:	4413      	add	r3, r2
 800b766:	b20a      	sxth	r2, r1
 800b768:	801a      	strh	r2, [r3, #0]
        pattern[i].y -= y_center_ofs;
 800b76a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b772:	4413      	add	r3, r2
 800b774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b778:	b29a      	uxth	r2, r3
 800b77a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	b299      	uxth	r1, r3
 800b782:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b78a:	4413      	add	r3, r2
 800b78c:	b20a      	sxth	r2, r1
 800b78e:	805a      	strh	r2, [r3, #2]
#if LV_ANTIALIAS
        if(aa) {
 800b790:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 81f3 	beq.w	800bb80 <line_draw_skew+0x73a>
            if(i != 0) {
 800b79a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 81ee 	beq.w	800bb80 <line_draw_skew+0x73a>
                if(main_line->hor) {
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	7e1b      	ldrb	r3, [r3, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 80f5 	beq.w	800b998 <line_draw_skew+0x552>
                    if(pattern[i - 1].x != pattern[i].x) {
 800b7ae:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7bc:	4413      	add	r3, r2
 800b7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7c2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7ca:	440b      	add	r3, r1
 800b7cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	f000 81d5 	beq.w	800bb80 <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800b7d6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7de:	4413      	add	r3, r2
 800b7e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7ee:	440b      	add	r3, r1
 800b7f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        if(main_line->sy < 0) {
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b804:	2b00      	cmp	r3, #0
 800b806:	da67      	bge.n	800b8d8 <line_draw_skew+0x492>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b818:	440b      	add	r3, r1
 800b81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	4413      	add	r3, r2
 800b822:	b29b      	uxth	r3, r3
 800b824:	3b01      	subs	r3, #1
 800b826:	b29b      	uxth	r3, r3
 800b828:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b830:	b29a      	uxth	r2, r3
 800b832:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b83a:	440b      	add	r3, r1
 800b83c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b840:	b29b      	uxth	r3, r3
 800b842:	4413      	add	r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b84a:	4413      	add	r3, r2
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	3301      	adds	r3, #1
 800b850:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b852:	b219      	sxth	r1, r3
 800b854:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b858:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b862:	f8ad 3000 	strh.w	r3, [sp]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f7fd f81a 	bl	80088a0 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b872:	b29a      	uxth	r2, r3
 800b874:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b87c:	440b      	add	r3, r1
 800b87e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b882:	b29b      	uxth	r3, r3
 800b884:	4413      	add	r3, r2
 800b886:	b29b      	uxth	r3, r3
 800b888:	3301      	adds	r3, #1
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1, -seg_w, mask,
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b894:	b29a      	uxth	r2, r3
 800b896:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b89e:	440b      	add	r3, r1
 800b8a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b8ae:	4413      	add	r3, r2
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b8b6:	b219      	sxth	r1, r3
 800b8b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b8bc:	425b      	negs	r3, r3
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	b21a      	sxth	r2, r3
 800b8c2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b8cc:	f8ad 3000 	strh.w	r3, [sp]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f7fc ffe5 	bl	80088a0 <lv_draw_aa_ver_seg>
 800b8d6:	e05a      	b.n	800b98e <line_draw_skew+0x548>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8e8:	440b      	add	r3, r1
 800b8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y, seg_w, mask,
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b900:	b29a      	uxth	r2, r3
 800b902:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b90a:	440b      	add	r3, r1
 800b90c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b910:	b29b      	uxth	r3, r3
 800b912:	4413      	add	r3, r2
 800b914:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b916:	b219      	sxth	r1, r3
 800b918:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b91c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b926:	f8ad 3000 	strh.w	r3, [sp]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f7fc ffb8 	bl	80088a0 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b936:	b29a      	uxth	r2, r3
 800b938:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b940:	440b      	add	r3, r1
 800b942:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b946:	b29b      	uxth	r3, r3
 800b948:	4413      	add	r3, r2
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	3301      	adds	r3, #1
 800b94e:	b29b      	uxth	r3, r3
 800b950:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y, -seg_w, mask,
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b958:	b29a      	uxth	r2, r3
 800b95a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b962:	440b      	add	r3, r1
 800b964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	4413      	add	r3, r2
 800b96c:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b96e:	b219      	sxth	r1, r3
 800b970:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b974:	425b      	negs	r3, r3
 800b976:	b29b      	uxth	r3, r3
 800b978:	b21a      	sxth	r2, r3
 800b97a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b984:	f8ad 3000 	strh.w	r3, [sp]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f7fc ff89 	bl	80088a0 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800b98e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b992:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800b996:	e0f3      	b.n	800bb80 <line_draw_skew+0x73a>
                    }
                } else {
                    if(pattern[i - 1].y != pattern[i].y) {
 800b998:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b99c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b9ac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9b4:	440b      	add	r3, r1
 800b9b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	f000 80e0 	beq.w	800bb80 <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800b9c0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9d8:	440b      	add	r3, r1
 800b9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                        if(main_line->sx < 0) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da67      	bge.n	800bac2 <line_draw_skew+0x67c>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba02:	440b      	add	r3, r1
 800ba04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba12:	4413      	add	r3, r2
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3301      	adds	r3, #1
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba2c:	440b      	add	r3, r1
 800ba2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800ba3c:	b219      	sxth	r1, r3
 800ba3e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800ba42:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ba4c:	f8ad 3000 	strh.w	r3, [sp]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f7fc ff6e 	bl	8008932 <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba66:	440b      	add	r3, r1
 800ba68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	4413      	add	r3, r2
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba76:	4413      	add	r3, r2
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba90:	440b      	add	r3, r1
 800ba92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4413      	add	r3, r2
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800baa0:	b219      	sxth	r1, r3
 800baa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800baa6:	425b      	negs	r3, r3
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	b21a      	sxth	r2, r3
 800baac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bab6:	f8ad 3000 	strh.w	r3, [sp]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f7fc ff39 	bl	8008932 <lv_draw_aa_hor_seg>
 800bac0:	e05a      	b.n	800bb78 <line_draw_skew+0x732>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bac8:	b29a      	uxth	r2, r3
 800baca:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bad2:	440b      	add	r3, r1
 800bad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4413      	add	r3, r2
 800badc:	b29b      	uxth	r3, r3
 800bade:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baf0:	440b      	add	r3, r1
 800baf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	4413      	add	r3, r2
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bb00:	b219      	sxth	r1, r3
 800bb02:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800bb06:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bb10:	f8ad 3000 	strh.w	r3, [sp]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f7fc ff0c 	bl	8008932 <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb2a:	440b      	add	r3, r1
 800bb2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	4413      	add	r3, r2
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb48:	440b      	add	r3, r1
 800bb4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4413      	add	r3, r2
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	3301      	adds	r3, #1
 800bb56:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bb58:	b219      	sxth	r1, r3
 800bb5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bb5e:	425b      	negs	r3, r3
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	b21a      	sxth	r2, r3
 800bb64:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bb6e:	f8ad 3000 	strh.w	r3, [sp]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f7fc fedd 	bl	8008932 <lv_draw_aa_hor_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800bb78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb7c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    for(i = 0; i < width; i++) {
 800bb80:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	3301      	adds	r3, #1
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800bb8e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800bb92:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bb96:	429a      	cmp	r2, r3
 800bb98:	f6ff add4 	blt.w	800b744 <line_draw_skew+0x2fe>
#endif
    }

#if LV_ANTIALIAS
    /*Add the last part of anti-aliasing for the perpendicular ending*/
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
 800bb9c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 81f5 	beq.w	800bf90 <line_draw_skew+0xb4a>
 800bba6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 81f0 	beq.w	800bf90 <line_draw_skew+0xb4a>
        if(main_line->hor) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	7e1b      	ldrb	r3, [r3, #24]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 80f6 	beq.w	800bda6 <line_draw_skew+0x960>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800bbba:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bbbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbc8:	4413      	add	r3, r2
 800bbca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbd8:	440b      	add	r3, r1
 800bbda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if(main_line->sy < 0) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	da70      	bge.n	800bcd4 <line_draw_skew+0x88e>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc02:	440b      	add	r3, r1
 800bc04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	4413      	add	r3, r2
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc24:	440b      	add	r3, r1
 800bc26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4413      	add	r3, r2
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bc34:	4413      	add	r3, r2
 800bc36:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bc38:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bc46:	4413      	add	r3, r2
 800bc48:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bc4a:	b21a      	sxth	r2, r3
 800bc4c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bc56:	f8ad 3000 	strh.w	r3, [sp]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f7fc fe20 	bl	80088a0 <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc70:	440b      	add	r3, r1
 800bc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	4413      	add	r3, r2
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc92:	440b      	add	r3, r1
 800bc94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	4413      	add	r3, r2
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bca2:	4413      	add	r3, r2
 800bca4:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bca6:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bcb4:	4413      	add	r3, r2
 800bcb6:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bcb8:	425b      	negs	r3, r3
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	b21a      	sxth	r2, r3
 800bcbe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bcc8:	f8ad 3000 	strh.w	r3, [sp]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f7fc fde7 	bl	80088a0 <lv_draw_aa_ver_seg>
 800bcd2:	e15d      	b.n	800bf90 <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bce4:	440b      	add	r3, r1
 800bce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	4413      	add	r3, r2
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd06:	440b      	add	r3, r1
 800bd08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	4413      	add	r3, r2
 800bd10:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bd12:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bd20:	4413      	add	r3, r2
 800bd22:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bd24:	b21a      	sxth	r2, r3
 800bd26:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bd30:	f8ad 3000 	strh.w	r3, [sp]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f7fc fdb3 	bl	80088a0 <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd4a:	440b      	add	r3, r1
 800bd4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	4413      	add	r3, r2
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3301      	adds	r3, #1
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd6c:	440b      	add	r3, r1
 800bd6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	4413      	add	r3, r2
 800bd76:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd78:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bd86:	4413      	add	r3, r2
 800bd88:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd8a:	425b      	negs	r3, r3
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	b21a      	sxth	r2, r3
 800bd90:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bd9a:	f8ad 3000 	strh.w	r3, [sp]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f7fc fd7e 	bl	80088a0 <lv_draw_aa_ver_seg>
 800bda4:	e0f4      	b.n	800bf90 <line_draw_skew+0xb4a>
                                   style->line.color, opa);
            }
        } else {
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bda6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bdaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdc4:	440b      	add	r3, r1
 800bdc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(main_line->sx < 0) {
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	da70      	bge.n	800bec0 <line_draw_skew+0xa7a>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdee:	440b      	add	r3, r1
 800bdf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bdfe:	4413      	add	r3, r2
 800be00:	b29b      	uxth	r3, r3
 800be02:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be14:	440b      	add	r3, r1
 800be16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	4413      	add	r3, r2
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800be24:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be32:	4413      	add	r3, r2
 800be34:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800be36:	b21a      	sxth	r2, r3
 800be38:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800be42:	f8ad 3000 	strh.w	r3, [sp]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f7fc fd73 	bl	8008932 <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be52:	b29a      	uxth	r2, r3
 800be54:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be5c:	440b      	add	r3, r1
 800be5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be62:	b29b      	uxth	r3, r3
 800be64:	4413      	add	r3, r2
 800be66:	b29a      	uxth	r2, r3
 800be68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be6c:	4413      	add	r3, r2
 800be6e:	b29b      	uxth	r3, r3
 800be70:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be82:	440b      	add	r3, r1
 800be84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	3301      	adds	r3, #1
 800be90:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800be92:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bea0:	4413      	add	r3, r2
 800bea2:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800bea4:	425b      	negs	r3, r3
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	b21a      	sxth	r2, r3
 800beaa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800beb4:	f8ad 3000 	strh.w	r3, [sp]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f7fc fd3a 	bl	8008932 <lv_draw_aa_hor_seg>
 800bebe:	e067      	b.n	800bf90 <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bed0:	440b      	add	r3, r1
 800bed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	4413      	add	r3, r2
 800beda:	b29b      	uxth	r3, r3
 800bedc:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800beee:	440b      	add	r3, r1
 800bef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	4413      	add	r3, r2
 800bef8:	b29b      	uxth	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800befe:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf0c:	4413      	add	r3, r2
 800bf0e:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bf10:	b21a      	sxth	r2, r3
 800bf12:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bf1c:	f8ad 3000 	strh.w	r3, [sp]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f7fc fd06 	bl	8008932 <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf36:	440b      	add	r3, r1
 800bf38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	4413      	add	r3, r2
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf54:	440b      	add	r3, r1
 800bf56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	3301      	adds	r3, #1
 800bf62:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf64:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf72:	4413      	add	r3, r2
 800bf74:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf76:	425b      	negs	r3, r3
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	b21a      	sxth	r2, r3
 800bf7c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bf86:	f8ad 3000 	strh.w	r3, [sp]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f7fc fcd1 	bl	8008932 <lv_draw_aa_hor_seg>
#endif

#if LV_ANTIALIAS

    /*Shift the anti aliasing on the edges (-1, 1 or 0 (zero only in case width == 0))*/
    lv_coord_t aa_shift1 = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    lv_coord_t aa_shift2 = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    if(aa) {
 800bf9c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d049      	beq.n	800c038 <line_draw_skew+0xbf2>
        if(main_line->hor == false) {
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	7e1b      	ldrb	r3, [r3, #24]
 800bfa8:	f083 0301 	eor.w	r3, r3, #1
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d021      	beq.n	800bff6 <line_draw_skew+0xbb0>
            if(main_line->sx < 0) {
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da0e      	bge.n	800bfda <line_draw_skew+0xb94>
                aa_shift1 = -1;
 800bfbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfc0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800bfc4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <line_draw_skew+0xb8c>
 800bfcc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800bfd0:	e000      	b.n	800bfd4 <line_draw_skew+0xb8e>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800bfd8:	e02e      	b.n	800c038 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800bfe0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <line_draw_skew+0xba8>
 800bfe8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bfec:	e000      	b.n	800bff0 <line_draw_skew+0xbaa>
 800bfee:	2300      	movs	r3, #0
 800bff0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bff4:	e020      	b.n	800c038 <line_draw_skew+0xbf2>
            }
        } else {
            if(main_line->sy < 0) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0e      	bge.n	800c01e <line_draw_skew+0xbd8>
                aa_shift1 = -1;
 800c000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c004:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800c008:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d002      	beq.n	800c016 <line_draw_skew+0xbd0>
 800c010:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800c014:	e000      	b.n	800c018 <line_draw_skew+0xbd2>
 800c016:	2300      	movs	r3, #0
 800c018:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800c01c:	e00c      	b.n	800c038 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800c01e:	2301      	movs	r3, #1
 800c020:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800c024:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <line_draw_skew+0xbec>
 800c02c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800c030:	e000      	b.n	800c034 <line_draw_skew+0xbee>
 800c032:	2300      	movs	r3, #0
 800c034:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }
    }
#endif

    volatile lv_point_t prev_p;
    prev_p.x = main_line->p1.x;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c03e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c046:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t draw_area;
    bool first_run = true;
 800c048:	2301      	movs	r3, #1
 800c04a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if(main_line->hor) {
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	7e1b      	ldrb	r3, [r3, #24]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 82dd 	beq.w	800c612 <line_draw_skew+0x11cc>
        while(line_next_y(main_line)) {
 800c058:	e0f3      	b.n	800c242 <line_draw_skew+0xdfc>
            for(i = 0; i < width; i++) {
 800c05a:	2300      	movs	r3, #0
 800c05c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c060:	e074      	b.n	800c14c <line_draw_skew+0xd06>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800c062:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c064:	b21b      	sxth	r3, r3
 800c066:	b29a      	uxth	r2, r3
 800c068:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c070:	440b      	add	r3, r1
 800c072:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c076:	b29b      	uxth	r3, r3
 800c078:	4413      	add	r3, r2
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	b21b      	sxth	r3, r3
 800c07e:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800c080:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c082:	b21b      	sxth	r3, r3
 800c084:	b29a      	uxth	r2, r3
 800c086:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c08e:	440b      	add	r3, r1
 800c090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c094:	b29b      	uxth	r3, r3
 800c096:	4413      	add	r3, r2
 800c098:	b29b      	uxth	r3, r3
 800c09a:	b21b      	sxth	r3, r3
 800c09c:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800c09e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0b2:	b21b      	sxth	r3, r3
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	b21b      	sxth	r3, r3
 800c0c0:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1;
 800c0c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c0c6:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c0c8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c0d2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	f7fd f968 	bl	80093aa <lv_draw_fill>

                /* Fill the gaps
                 * When stepping in y one pixel remains empty on every corner (don't do this on the
                 * first segment ) */
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800c0da:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d02d      	beq.n	800c13e <line_draw_skew+0xcf8>
 800c0e2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c0f0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0fe:	440b      	add	r3, r1
 800c100:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c104:	429a      	cmp	r2, r3
 800c106:	d01a      	beq.n	800c13e <line_draw_skew+0xcf8>
 800c108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c10c:	f083 0301 	eor.w	r3, r3, #1
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d013      	beq.n	800c13e <line_draw_skew+0xcf8>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800c116:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800c11a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c11e:	b29a      	uxth	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c126:	b29b      	uxth	r3, r3
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	b219      	sxth	r1, r3
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c134:	9200      	str	r2, [sp, #0]
 800c136:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	f7fd f89e 	bl	800927a <lv_draw_px>
            for(i = 0; i < width; i++) {
 800c13e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c142:	b29b      	uxth	r3, r3
 800c144:	3301      	adds	r3, #1
 800c146:	b29b      	uxth	r3, r3
 800c148:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c14c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c150:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c154:	429a      	cmp	r2, r3
 800c156:	db84      	blt.n	800c062 <line_draw_skew+0xc1c>
                }
            }

#if LV_ANTIALIAS
            if(aa) {
 800c158:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d065      	beq.n	800c22c <line_draw_skew+0xde6>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c160:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c162:	b21b      	sxth	r3, r3
 800c164:	b29a      	uxth	r2, r3
 800c166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	4413      	add	r3, r2
 800c170:	b29b      	uxth	r3, r3
 800c172:	b218      	sxth	r0, r3
 800c174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c176:	b21b      	sxth	r3, r3
 800c178:	b29a      	uxth	r2, r3
 800c17a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c17c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c180:	b29b      	uxth	r3, r3
 800c182:	4413      	add	r3, r2
 800c184:	b29a      	uxth	r2, r3
 800c186:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	b219      	sxth	r1, r3
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800c190:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c192:	b21b      	sxth	r3, r3
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c1a2:	b21a      	sxth	r2, r3
 800c1a4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c1ae:	f8ad 3000 	strh.w	r3, [sp]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f7fc fbbd 	bl	8008932 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c1b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c1c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1cc:	440b      	add	r3, r1
 800c1ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	4413      	add	r3, r2
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800c1da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1dc:	b21b      	sxth	r3, r3
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c1e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1ee:	440b      	add	r3, r1
 800c1f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c1fe:	4413      	add	r3, r2
 800c200:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c202:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c20e:	b21b      	sxth	r3, r3
 800c210:	b29b      	uxth	r3, r3
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c216:	b21a      	sxth	r2, r3
 800c218:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c222:	f8ad 3000 	strh.w	r3, [sp]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f7fc fb83 	bl	8008932 <lv_draw_aa_hor_seg>
                                   mask, style->line.color, opa);
            }
#endif

            first_run = false;
 800c22c:	2300      	movs	r3, #0
 800c22e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            prev_p.x = main_line->p_act.x;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c238:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c240:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_y(main_line)) {
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 fbcf 	bl	800c9e6 <line_next_y>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f af05 	bne.w	800c05a <line_draw_skew+0xc14>
        }

        for(i = 0; i < width; i++) {
 800c250:	2300      	movs	r3, #0
 800c252:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c256:	e072      	b.n	800c33e <line_draw_skew+0xef8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800c258:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c266:	440b      	add	r3, r1
 800c268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	4413      	add	r3, r2
 800c270:	b29b      	uxth	r3, r3
 800c272:	b21b      	sxth	r3, r3
 800c274:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800c276:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c278:	b21b      	sxth	r3, r3
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c284:	440b      	add	r3, r1
 800c286:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	4413      	add	r3, r2
 800c28e:	b29b      	uxth	r3, r3
 800c290:	b21b      	sxth	r3, r3
 800c292:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800c294:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c298:	b29a      	uxth	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2a8:	b21b      	sxth	r3, r3
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	b21b      	sxth	r3, r3
 800c2b2:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1;
 800c2b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c2b8:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c2ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c2c4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	f7fd f86f 	bl	80093aa <lv_draw_fill>

            /* Fill the gaps
             * When stepping in y one pixel remains empty on every corner */
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800c2cc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d02d      	beq.n	800c330 <line_draw_skew+0xeea>
 800c2d4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2dc:	4413      	add	r3, r2
 800c2de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c2e2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2f0:	440b      	add	r3, r1
 800c2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d01a      	beq.n	800c330 <line_draw_skew+0xeea>
 800c2fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2fe:	f083 0301 	eor.w	r3, r3, #1
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d013      	beq.n	800c330 <line_draw_skew+0xeea>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800c308:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800c30c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c310:	b29a      	uxth	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	b219      	sxth	r1, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c326:	9200      	str	r2, [sp, #0]
 800c328:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	f7fc ffa5 	bl	800927a <lv_draw_px>
        for(i = 0; i < width; i++) {
 800c330:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c334:	b29b      	uxth	r3, r3
 800c336:	3301      	adds	r3, #1
 800c338:	b29b      	uxth	r3, r3
 800c33a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c33e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c342:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c346:	429a      	cmp	r2, r3
 800c348:	db86      	blt.n	800c258 <line_draw_skew+0xe12>
            }
        }

#if LV_ANTIALIAS
        if(aa) {
 800c34a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 8251 	beq.w	800c7f6 <line_draw_skew+0x13b0>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c354:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c356:	b21b      	sxth	r3, r3
 800c358:	b29a      	uxth	r2, r3
 800c35a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c360:	b29b      	uxth	r3, r3
 800c362:	4413      	add	r3, r2
 800c364:	b29b      	uxth	r3, r3
 800c366:	b218      	sxth	r0, r3
 800c368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c36a:	b21b      	sxth	r3, r3
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c370:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c374:	b29b      	uxth	r3, r3
 800c376:	4413      	add	r3, r2
 800c378:	b29a      	uxth	r2, r3
 800c37a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	b29b      	uxth	r3, r3
 800c382:	b219      	sxth	r1, r3
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c38e:	b21b      	sxth	r3, r3
 800c390:	b29b      	uxth	r3, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c396:	43db      	mvns	r3, r3
 800c398:	b29b      	uxth	r3, r3
 800c39a:	b21a      	sxth	r2, r3
 800c39c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c3a6:	f8ad 3000 	strh.w	r3, [sp]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f7fc fac1 	bl	8008932 <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800c3b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c3ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3c4:	440b      	add	r3, r1
 800c3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4413      	add	r3, r2
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	b218      	sxth	r0, r3
 800c3d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3d4:	b21b      	sxth	r3, r3
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c3dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3e6:	440b      	add	r3, r1
 800c3e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	4413      	add	r3, r2
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c3f6:	4413      	add	r3, r2
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	b219      	sxth	r1, r3
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c402:	b29a      	uxth	r2, r3
 800c404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c406:	b21b      	sxth	r3, r3
 800c408:	b29b      	uxth	r3, r3
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	3301      	adds	r3, #1
 800c410:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800c412:	b21a      	sxth	r2, r3
 800c414:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c418:	9301      	str	r3, [sp, #4]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c41e:	f8ad 3000 	strh.w	r3, [sp]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f7fc fa85 	bl	8008932 <lv_draw_aa_hor_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
        }
#endif
    }
}
 800c428:	e1e5      	b.n	800c7f6 <line_draw_skew+0x13b0>
            for(i = 0; i < width; i++) {
 800c42a:	2300      	movs	r3, #0
 800c42c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c430:	e074      	b.n	800c51c <line_draw_skew+0x10d6>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800c432:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c434:	b21b      	sxth	r3, r3
 800c436:	b29a      	uxth	r2, r3
 800c438:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c440:	440b      	add	r3, r1
 800c442:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c446:	b29b      	uxth	r3, r3
 800c448:	4413      	add	r3, r2
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	b21b      	sxth	r3, r3
 800c44e:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800c450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c452:	b21b      	sxth	r3, r3
 800c454:	b29a      	uxth	r2, r3
 800c456:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c45e:	440b      	add	r3, r1
 800c460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c464:	b29b      	uxth	r3, r3
 800c466:	4413      	add	r3, r2
 800c468:	b29b      	uxth	r3, r3
 800c46a:	b21b      	sxth	r3, r3
 800c46c:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1;
 800c46e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c472:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800c474:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c478:	b29a      	uxth	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c480:	b29b      	uxth	r3, r3
 800c482:	4413      	add	r3, r2
 800c484:	b29a      	uxth	r2, r3
 800c486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c488:	b21b      	sxth	r3, r3
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	b29b      	uxth	r3, r3
 800c490:	3b01      	subs	r3, #1
 800c492:	b29b      	uxth	r3, r3
 800c494:	b21b      	sxth	r3, r3
 800c496:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c498:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c4a2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	f7fc ff80 	bl	80093aa <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800c4aa:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d02d      	beq.n	800c50e <line_draw_skew+0x10c8>
 800c4b2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c4c0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4ce:	440b      	add	r3, r1
 800c4d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d01a      	beq.n	800c50e <line_draw_skew+0x10c8>
 800c4d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4dc:	f083 0301 	eor.w	r3, r3, #1
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d013      	beq.n	800c50e <line_draw_skew+0x10c8>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800c4e6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	b218      	sxth	r0, r3
 800c4fa:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c504:	9200      	str	r2, [sp, #0]
 800c506:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	f7fc feb6 	bl	800927a <lv_draw_px>
            for(i = 0; i < width; i++) {
 800c50e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c512:	b29b      	uxth	r3, r3
 800c514:	3301      	adds	r3, #1
 800c516:	b29b      	uxth	r3, r3
 800c518:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c51c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c520:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c524:	429a      	cmp	r2, r3
 800c526:	db84      	blt.n	800c432 <line_draw_skew+0xfec>
            if(aa) {
 800c528:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d065      	beq.n	800c5fc <line_draw_skew+0x11b6>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c530:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c532:	b21b      	sxth	r3, r3
 800c534:	b29a      	uxth	r2, r3
 800c536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	4413      	add	r3, r2
 800c540:	b29a      	uxth	r2, r3
 800c542:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	b29b      	uxth	r3, r3
 800c54a:	b218      	sxth	r0, r3
 800c54c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c54e:	b21b      	sxth	r3, r3
 800c550:	b29a      	uxth	r2, r3
 800c552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4413      	add	r3, r2
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	b219      	sxth	r1, r3
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800c560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c562:	b21b      	sxth	r3, r3
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c572:	b21a      	sxth	r2, r3
 800c574:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c57e:	f8ad 3000 	strh.w	r3, [sp]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f7fc f98c 	bl	80088a0 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c588:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c58a:	b21b      	sxth	r3, r3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c592:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c596:	3b01      	subs	r3, #1
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c59c:	440b      	add	r3, r1
 800c59e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	4413      	add	r3, r2
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c5ac:	4413      	add	r3, r2
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800c5b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5b4:	b21b      	sxth	r3, r3
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c5bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5c6:	440b      	add	r3, r1
 800c5c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	4413      	add	r3, r2
 800c5d0:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c5d2:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5de:	b21b      	sxth	r3, r3
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c5e6:	b21a      	sxth	r2, r3
 800c5e8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c5f2:	f8ad 3000 	strh.w	r3, [sp]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f7fc f952 	bl	80088a0 <lv_draw_aa_ver_seg>
            first_run = false;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            prev_p.x = main_line->p_act.x;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c608:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c610:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_x(main_line)) {
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 fa05 	bl	800ca22 <line_next_x>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f47f af05 	bne.w	800c42a <line_draw_skew+0xfe4>
        for(i = 0; i < width; i++) {
 800c620:	2300      	movs	r3, #0
 800c622:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c626:	e072      	b.n	800c70e <line_draw_skew+0x12c8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800c628:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c62a:	b21b      	sxth	r3, r3
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c636:	440b      	add	r3, r1
 800c638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4413      	add	r3, r2
 800c640:	b29b      	uxth	r3, r3
 800c642:	b21b      	sxth	r3, r3
 800c644:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800c646:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c648:	b21b      	sxth	r3, r3
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c654:	440b      	add	r3, r1
 800c656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	4413      	add	r3, r2
 800c65e:	b29b      	uxth	r3, r3
 800c660:	b21b      	sxth	r3, r3
 800c662:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1;
 800c664:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c668:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800c66a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c676:	b29b      	uxth	r3, r3
 800c678:	4413      	add	r3, r2
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c67e:	b21b      	sxth	r3, r3
 800c680:	b29b      	uxth	r3, r3
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	b29b      	uxth	r3, r3
 800c686:	b21b      	sxth	r3, r3
 800c688:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c68a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c694:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	f7fc fe87 	bl	80093aa <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800c69c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d02d      	beq.n	800c700 <line_draw_skew+0x12ba>
 800c6a4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c6b2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6c0:	440b      	add	r3, r1
 800c6c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d01a      	beq.n	800c700 <line_draw_skew+0x12ba>
 800c6ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6ce:	f083 0301 	eor.w	r3, r3, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d013      	beq.n	800c700 <line_draw_skew+0x12ba>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800c6d8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	b218      	sxth	r0, r3
 800c6ec:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c6f6:	9200      	str	r2, [sp, #0]
 800c6f8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	f7fc fdbd 	bl	800927a <lv_draw_px>
        for(i = 0; i < width; i++) {
 800c700:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c704:	b29b      	uxth	r3, r3
 800c706:	3301      	adds	r3, #1
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c70e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c712:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c716:	429a      	cmp	r2, r3
 800c718:	db86      	blt.n	800c628 <line_draw_skew+0x11e2>
        if(aa) {
 800c71a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d069      	beq.n	800c7f6 <line_draw_skew+0x13b0>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c724:	b21b      	sxth	r3, r3
 800c726:	b29a      	uxth	r2, r3
 800c728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c72a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4413      	add	r3, r2
 800c732:	b29a      	uxth	r2, r3
 800c734:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	b218      	sxth	r0, r3
 800c73e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c740:	b21b      	sxth	r3, r3
 800c742:	b29a      	uxth	r2, r3
 800c744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4413      	add	r3, r2
 800c74e:	b29b      	uxth	r3, r3
 800c750:	b219      	sxth	r1, r3
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c758:	b29a      	uxth	r2, r3
 800c75a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c75c:	b21b      	sxth	r3, r3
 800c75e:	b29b      	uxth	r3, r3
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c764:	43db      	mvns	r3, r3
 800c766:	b29b      	uxth	r3, r3
 800c768:	b21a      	sxth	r2, r3
 800c76a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c774:	f8ad 3000 	strh.w	r3, [sp]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f7fc f891 	bl	80088a0 <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800c77e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c780:	b21b      	sxth	r3, r3
 800c782:	b29a      	uxth	r2, r3
 800c784:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c78c:	3b01      	subs	r3, #1
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c792:	440b      	add	r3, r1
 800c794:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	4413      	add	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c7a2:	4413      	add	r3, r2
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	b218      	sxth	r0, r3
 800c7a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c7b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7bc:	440b      	add	r3, r1
 800c7be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4413      	add	r3, r2
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	b219      	sxth	r1, r3
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	3301      	adds	r3, #1
 800c7de:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800c7e0:	b21a      	sxth	r2, r3
 800c7e2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c7ec:	f8ad 3000 	strh.w	r3, [sp]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f7fc f855 	bl	80088a0 <lv_draw_aa_ver_seg>
}
 800c7f6:	bf00      	nop
 800c7f8:	3770      	adds	r7, #112	; 0x70
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <line_init>:

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
    line->p1.x = p1->x;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	801a      	strh	r2, [r3, #0]
    line->p1.y = p1->y;
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	805a      	strh	r2, [r3, #2]
    line->p2.x = p2->x;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	809a      	strh	r2, [r3, #4]
    line->p2.y = p2->y;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	80da      	strh	r2, [r3, #6]

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c838:	461a      	mov	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfb8      	it	lt
 800c846:	425b      	neglt	r3, r3
 800c848:	b21a      	sxth	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	819a      	strh	r2, [r3, #12]
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	da01      	bge.n	800c862 <line_init+0x64>
 800c85e:	2201      	movs	r2, #1
 800c860:	e001      	b.n	800c866 <line_init+0x68>
 800c862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	81da      	strh	r2, [r3, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c870:	461a      	mov	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bfb8      	it	lt
 800c87e:	425b      	neglt	r3, r3
 800c880:	b21a      	sxth	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	821a      	strh	r2, [r3, #16]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c892:	429a      	cmp	r2, r3
 800c894:	da01      	bge.n	800c89a <line_init+0x9c>
 800c896:	2201      	movs	r2, #1
 800c898:	e001      	b.n	800c89e <line_init+0xa0>
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	825a      	strh	r2, [r3, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	dd07      	ble.n	800c8c2 <line_init+0xc4>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c8b8:	0fda      	lsrs	r2, r3, #31
 800c8ba:	4413      	add	r3, r2
 800c8bc:	105b      	asrs	r3, r3, #1
 800c8be:	b21b      	sxth	r3, r3
 800c8c0:	e007      	b.n	800c8d2 <line_init+0xd4>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8c8:	425b      	negs	r3, r3
 800c8ca:	0fda      	lsrs	r2, r3, #31
 800c8cc:	4413      	add	r3, r2
 800c8ce:	105b      	asrs	r3, r3, #1
 800c8d0:	b21b      	sxth	r3, r3
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	8293      	strh	r3, [r2, #20]
    line->e2  = 0;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	82da      	strh	r2, [r3, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	bfcc      	ite	gt
 800c8ec:	2301      	movgt	r3, #1
 800c8ee:	2300      	movle	r3, #0
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	761a      	strb	r2, [r3, #24]

    line->p_act.x = line->p1.x;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	811a      	strh	r2, [r3, #8]
    line->p_act.y = line->p1.y;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	815a      	strh	r2, [r3, #10]
}
 800c90a:	bf00      	nop
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <line_next>:

static bool line_next(line_draw_t * line)
{
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d109      	bne.n	800c942 <line_next+0x2c>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d101      	bne.n	800c942 <line_next+0x2c>
 800c93e:	2300      	movs	r3, #0
 800c940:	e04b      	b.n	800c9da <line_next+0xc4>
    line->e2 = line->err;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	82da      	strh	r2, [r3, #22]
    if(line->e2 > -line->dx) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c952:	461a      	mov	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c95a:	425b      	negs	r3, r3
 800c95c:	429a      	cmp	r2, r3
 800c95e:	dd19      	ble.n	800c994 <line_next+0x7e>
        line->err -= line->dy;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	b29b      	uxth	r3, r3
 800c974:	b21a      	sxth	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	829a      	strh	r2, [r3, #20]
        line->p_act.x += line->sx;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c980:	b29a      	uxth	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4413      	add	r3, r2
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	b21a      	sxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	811a      	strh	r2, [r3, #8]
    }
    if(line->e2 < line->dy) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	da19      	bge.n	800c9d8 <line_next+0xc2>
        line->err += line->dx;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	4413      	add	r3, r2
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	b21a      	sxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	829a      	strh	r2, [r3, #20]
        line->p_act.y += line->sy;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	4413      	add	r3, r2
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	b21a      	sxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	815a      	strh	r2, [r3, #10]
    }
    return true;
 800c9d8:	2301      	movs	r3, #1
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <line_next_y>:
 * Iterate until step one in y direction.
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
    lv_coord_t last_y = line->p_act.y;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	895b      	ldrh	r3, [r3, #10]
 800c9f2:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff ff8e 	bl	800c916 <line_next>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f083 0301 	eor.w	r3, r3, #1
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <line_next_y+0x24>
 800ca06:	2300      	movs	r3, #0
 800ca08:	e007      	b.n	800ca1a <line_next_y+0x34>
    } while(last_y == line->p_act.y);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ca10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d0ed      	beq.n	800c9f4 <line_next_y+0xe>

    return true;
 800ca18:	2301      	movs	r3, #1
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <line_next_x>:
 * Iterate until step one in x direction.
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b084      	sub	sp, #16
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
    lv_coord_t last_x = line->p_act.x;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	891b      	ldrh	r3, [r3, #8]
 800ca2e:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ff70 	bl	800c916 <line_next>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f083 0301 	eor.w	r3, r3, #1
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <line_next_x+0x24>
 800ca42:	2300      	movs	r3, #0
 800ca44:	e007      	b.n	800ca56 <line_next_x+0x34>
    } while(last_x == line->p_act.x);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d0ed      	beq.n	800ca30 <line_next_x+0xe>

    return true;
 800ca54:	2301      	movs	r3, #1
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <lv_color_mix>:
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b085      	sub	sp, #20
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	80b8      	strh	r0, [r7, #4]
 800ca66:	8039      	strh	r1, [r7, #0]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	70fb      	strb	r3, [r7, #3]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ca6c:	793b      	ldrb	r3, [r7, #4]
 800ca6e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	78fb      	ldrb	r3, [r7, #3]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	fb12 f303 	smulbb	r3, r2, r3
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	783b      	ldrb	r3, [r7, #0]
 800ca82:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	b299      	uxth	r1, r3
 800ca8a:	78fb      	ldrb	r3, [r7, #3]
 800ca8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	fb11 f303 	smulbb	r3, r1, r3
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	4413      	add	r3, r2
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	0a1b      	lsrs	r3, r3, #8
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	f003 031f 	and.w	r3, r3, #31
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	7a3b      	ldrb	r3, [r7, #8]
 800caa8:	f362 03c7 	bfi	r3, r2, #3, #5
 800caac:	723b      	strb	r3, [r7, #8]
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800caae:	793b      	ldrb	r3, [r7, #4]
 800cab0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	b29a      	uxth	r2, r3
 800cabc:	797b      	ldrb	r3, [r7, #5]
 800cabe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4413      	add	r3, r2
 800cac8:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 800caca:	783b      	ldrb	r3, [r7, #0]
 800cacc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	787b      	ldrb	r3, [r7, #1]
 800cada:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	4413      	add	r3, r2
 800cae4:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 800cae6:	78fb      	ldrb	r3, [r7, #3]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	89fa      	ldrh	r2, [r7, #14]
 800caec:	fb12 f303 	smulbb	r3, r2, r3
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	78fb      	ldrb	r3, [r7, #3]
 800caf4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	89b9      	ldrh	r1, [r7, #12]
 800cafc:	fb11 f303 	smulbb	r3, r1, r3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	4413      	add	r3, r2
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	0a1b      	lsrs	r3, r3, #8
 800cb08:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 800cb0a:	897b      	ldrh	r3, [r7, #10]
 800cb0c:	08db      	lsrs	r3, r3, #3
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	f003 0307 	and.w	r3, r3, #7
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	7a3b      	ldrb	r3, [r7, #8]
 800cb18:	f362 0302 	bfi	r3, r2, #0, #3
 800cb1c:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 800cb1e:	897b      	ldrh	r3, [r7, #10]
 800cb20:	f003 0307 	and.w	r3, r3, #7
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	7a7b      	ldrb	r3, [r7, #9]
 800cb28:	f362 1347 	bfi	r3, r2, #5, #3
 800cb2c:	727b      	strb	r3, [r7, #9]
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800cb2e:	797b      	ldrb	r3, [r7, #5]
 800cb30:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	fb12 f303 	smulbb	r3, r2, r3
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	787b      	ldrb	r3, [r7, #1]
 800cb44:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	b299      	uxth	r1, r3
 800cb4c:	78fb      	ldrb	r3, [r7, #3]
 800cb4e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	fb11 f303 	smulbb	r3, r1, r3
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	0a1b      	lsrs	r3, r3, #8
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	f003 031f 	and.w	r3, r3, #31
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	7a7b      	ldrb	r3, [r7, #9]
 800cb6a:	f362 0304 	bfi	r3, r2, #0, #5
 800cb6e:	727b      	strb	r3, [r7, #9]
    return ret;
 800cb70:	893b      	ldrh	r3, [r7, #8]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <lv_area_copy>:
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800cb88:	2208      	movs	r2, #8
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f01a fb07 	bl	80271a0 <memcpy>
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <lv_area_get_width>:
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	b21b      	sxth	r3, r3
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	b21b      	sxth	r3, r3
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <lv_draw_rect>:
 * @param mask the rectangle will be drawn only in this mask
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
 800cc02:	70fb      	strb	r3, [r7, #3]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f7ff ffdf 	bl	800cbc8 <lv_area_get_height>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	dd4e      	ble.n	800ccae <lv_draw_rect+0xb8>
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff ffc2 	bl	800cb9a <lv_area_get_width>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dd48      	ble.n	800ccae <lv_draw_rect+0xb8>

#if LV_USE_SHADOW
    if(style->body.shadow.width != 0) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d005      	beq.n	800cc32 <lv_draw_rect+0x3c>
        lv_draw_shadow(coords, mask, style, opa_scale);
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f002 ff63 	bl	800faf8 <lv_draw_shadow>
    }
#endif

    /* If the object is out of the mask there is nothing to draw.
     * Draw shadow before it because the shadow is out of `coords`*/
    if(lv_area_is_on(coords, mask) == false) return;
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f006 f96e 	bl	8012f16 <lv_area_is_on>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	f083 0301 	eor.w	r3, r3, #1
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d135      	bne.n	800ccb2 <lv_draw_rect+0xbc>

    if(style->body.opa > LV_OPA_MIN) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7a1b      	ldrb	r3, [r3, #8]
 800cc4a:	2b10      	cmp	r3, #16
 800cc4c:	d910      	bls.n	800cc70 <lv_draw_rect+0x7a>
        lv_draw_rect_main_mid(coords, mask, style, opa_scale);
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f830 	bl	800ccba <lv_draw_rect_main_mid>

        if(style->body.radius != 0) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <lv_draw_rect+0x7a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	68b9      	ldr	r1, [r7, #8]
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f000 f927 	bl	800cebe <lv_draw_rect_main_corner>
        }
    }

    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d01c      	beq.n	800ccb4 <lv_draw_rect+0xbe>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	7b9b      	ldrb	r3, [r3, #14]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d018      	beq.n	800ccb4 <lv_draw_rect+0xbe>
       style->body.border.opa >= LV_OPA_MIN) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	7bdb      	ldrb	r3, [r3, #15]
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800cc86:	2b0f      	cmp	r3, #15
 800cc88:	d914      	bls.n	800ccb4 <lv_draw_rect+0xbe>
        lv_draw_rect_border_straight(coords, mask, style, opa_scale);
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f001 f93d 	bl	800df10 <lv_draw_rect_border_straight>

        if(style->body.radius != 0) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d009      	beq.n	800ccb4 <lv_draw_rect+0xbe>
            lv_draw_rect_border_corner(coords, mask, style, opa_scale);
 800cca0:	78fb      	ldrb	r3, [r7, #3]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f001 fcdf 	bl	800e66a <lv_draw_rect_border_corner>
 800ccac:	e002      	b.n	800ccb4 <lv_draw_rect+0xbe>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800ccae:	bf00      	nop
 800ccb0:	e000      	b.n	800ccb4 <lv_draw_rect+0xbe>
    if(lv_area_is_on(coords, mask) == false) return;
 800ccb2:	bf00      	nop
        }
    }
}
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <lv_draw_rect_main_mid>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_mid(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b08e      	sub	sp, #56	; 0x38
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ccce:	863b      	strh	r3, [r7, #48]	; 0x30
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ccd0:	f7fa fde8 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f005 fcb4 	bl	8012644 <lv_disp_get_antialiasing>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    lv_color_t mcolor = style->body.main_color;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	885b      	ldrh	r3, [r3, #2]
 800cce6:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_color_t gcolor = style->body.grad_color;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	889b      	ldrh	r3, [r3, #4]
 800ccec:	843b      	strh	r3, [r7, #32]
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff ff6a 	bl	800cbc8 <lv_area_get_height>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t width  = lv_area_get_width(coords);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f7ff ff4e 	bl	800cb9a <lv_area_get_width>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	2bff      	cmp	r3, #255	; 0xff
 800cd06:	d102      	bne.n	800cd0e <lv_draw_rect_main_mid+0x54>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	7a1b      	ldrb	r3, [r3, #8]
 800cd0c:	e00a      	b.n	800cd24 <lv_draw_rect_main_mid+0x6a>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7a1b      	ldrb	r3, [r3, #8]
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	fb12 f303 	smulbb	r3, r2, r3
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cd28:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800cd2c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800cd30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd32:	4618      	mov	r0, r3
 800cd34:	f003 fdd8 	bl	80108e8 <lv_draw_cont_radius_corr>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	863b      	strh	r3, [r7, #48]	; 0x30

    /*If the radius is too big then there is no body*/
    if(radius > height / 2) return;
 800cd3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800cd3e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cd42:	0fd9      	lsrs	r1, r3, #31
 800cd44:	440b      	add	r3, r1
 800cd46:	105b      	asrs	r3, r3, #1
 800cd48:	b21b      	sxth	r3, r3
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	f300 80b3 	bgt.w	800ceb6 <lv_draw_rect_main_mid+0x1fc>

    lv_area_t work_area;
    work_area.x1 = coords->x1;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd56:	833b      	strh	r3, [r7, #24]
    work_area.x2 = coords->x2;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cd5e:	83bb      	strh	r3, [r7, #28]

    if(mcolor.full == gcolor.full) {
 800cd60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd62:	8c3b      	ldrh	r3, [r7, #32]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d140      	bne.n	800cdea <lv_draw_rect_main_mid+0x130>
        work_area.y1 = coords->y1 + radius;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd72:	4413      	add	r3, r2
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	b21b      	sxth	r3, r3
 800cd78:	837b      	strh	r3, [r7, #26]
        work_area.y2 = coords->y2 - radius;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	83fb      	strh	r3, [r7, #30]

        if(style->body.radius != 0) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d020      	beq.n	800cdd8 <lv_draw_rect_main_mid+0x11e>

            if(aa) {
 800cd96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00e      	beq.n	800cdbc <lv_draw_rect_main_mid+0x102>
                work_area.y1 += 2;
 800cd9e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	3302      	adds	r3, #2
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 2;
 800cdac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	3b02      	subs	r3, #2
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	b21b      	sxth	r3, r3
 800cdb8:	83fb      	strh	r3, [r7, #30]
 800cdba:	e00d      	b.n	800cdd8 <lv_draw_rect_main_mid+0x11e>
            } else {
                work_area.y1 += 1;
 800cdbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	b21b      	sxth	r3, r3
 800cdc8:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 1;
 800cdca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	b21b      	sxth	r3, r3
 800cdd6:	83fb      	strh	r3, [r7, #30]
            }
        }

        lv_draw_fill(&work_area, mask, mcolor, opa);
 800cdd8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cddc:	f107 0018 	add.w	r0, r7, #24
 800cde0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cde2:	68b9      	ldr	r1, [r7, #8]
 800cde4:	f7fc fae1 	bl	80093aa <lv_draw_fill>
 800cde8:	e066      	b.n	800ceb8 <lv_draw_rect_main_mid+0x1fe>
    } else {
        lv_coord_t row;
        lv_coord_t row_start = coords->y1 + radius;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cdf4:	4413      	add	r3, r2
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t row_end   = coords->y2 - radius;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_color_t act_color;

        if(style->body.radius != 0) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d014      	beq.n	800ce3e <lv_draw_rect_main_mid+0x184>
            if(aa) {
 800ce14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d008      	beq.n	800ce2e <lv_draw_rect_main_mid+0x174>
                row_start += 2;
 800ce1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce1e:	3302      	adds	r3, #2
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 2;
 800ce24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ce26:	3b02      	subs	r3, #2
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	867b      	strh	r3, [r7, #50]	; 0x32
 800ce2c:	e007      	b.n	800ce3e <lv_draw_rect_main_mid+0x184>
            } else {
                row_start += 1;
 800ce2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce30:	3301      	adds	r3, #1
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 1;
 800ce36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	867b      	strh	r3, [r7, #50]	; 0x32
            }
        }
        if(row_start < 0) row_start = 0;
 800ce3e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da01      	bge.n	800ce4a <lv_draw_rect_main_mid+0x190>
 800ce46:	2300      	movs	r3, #0
 800ce48:	86bb      	strh	r3, [r7, #52]	; 0x34

        for(row = row_start; row <= row_end; row++) {
 800ce4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ce4e:	e02b      	b.n	800cea8 <lv_draw_rect_main_mid+0x1ee>
            work_area.y1 = row;
 800ce50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce52:	837b      	strh	r3, [r7, #26]
            work_area.y2 = row;
 800ce54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce56:	83fb      	strh	r3, [r7, #30]
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	461a      	mov	r2, r3
 800ce68:	4613      	mov	r3, r2
 800ce6a:	021b      	lsls	r3, r3, #8
 800ce6c:	1a9a      	subs	r2, r3, r2
 800ce6e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ce72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800ce7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce7e:	461a      	mov	r2, r3
 800ce80:	8c39      	ldrh	r1, [r7, #32]
 800ce82:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800ce84:	f7ff fdeb 	bl	800ca5e <lv_color_mix>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	82bb      	strh	r3, [r7, #20]

            lv_draw_fill(&work_area, mask, act_color, opa);
 800ce8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ce90:	f107 0018 	add.w	r0, r7, #24
 800ce94:	8aba      	ldrh	r2, [r7, #20]
 800ce96:	68b9      	ldr	r1, [r7, #8]
 800ce98:	f7fc fa87 	bl	80093aa <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
 800ce9c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	3301      	adds	r3, #1
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cea8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800ceac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	ddcd      	ble.n	800ce50 <lv_draw_rect_main_mid+0x196>
 800ceb4:	e000      	b.n	800ceb8 <lv_draw_rect_main_mid+0x1fe>
    if(radius > height / 2) return;
 800ceb6:	bf00      	nop
        }
    }
}
 800ceb8:	3738      	adds	r7, #56	; 0x38
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <lv_draw_rect_main_corner>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                     lv_opa_t opa_scale)
{
 800cebe:	b5b0      	push	{r4, r5, r7, lr}
 800cec0:	b0a4      	sub	sp, #144	; 0x90
 800cec2:	af02      	add	r7, sp, #8
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
 800ceca:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ced2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ced6:	f7fa fce5 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4618      	mov	r0, r3
 800cede:	f005 fbb1 	bl	8012644 <lv_disp_get_antialiasing>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    lv_color_t mcolor = style->body.main_color;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	885b      	ldrh	r3, [r3, #2]
 800ceec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	889b      	ldrh	r3, [r3, #4]
 800cef4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	2bff      	cmp	r3, #255	; 0xff
 800cefc:	d102      	bne.n	800cf04 <lv_draw_rect_main_corner+0x46>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	7a1b      	ldrb	r3, [r3, #8]
 800cf02:	e00a      	b.n	800cf1a <lv_draw_rect_main_corner+0x5c>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	7a1b      	ldrb	r3, [r3, #8]
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	78fb      	ldrb	r3, [r7, #3]
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	fb12 f303 	smulbb	r3, r2, r3
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	0a1b      	lsrs	r3, r3, #8
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7ff fe52 	bl	800cbc8 <lv_area_get_height>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    lv_coord_t width  = lv_area_get_width(coords);
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff fe35 	bl	800cb9a <lv_area_get_width>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cf36:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800cf3a:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 800cf3e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf42:	4618      	mov	r0, r3
 800cf44:	f003 fcd0 	bl	80108e8 <lv_draw_cont_radius_corr>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf5a:	4413      	add	r3, r2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	4413      	add	r3, r2
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	b21b      	sxth	r3, r3
 800cf6a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + aa;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf7a:	4413      	add	r3, r2
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4413      	add	r3, r2
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	b21b      	sxth	r3, r3
 800cf8a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    lb_origo.x = coords->x1 + radius + aa;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf9a:	4413      	add	r3, r2
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	4413      	add	r3, r2
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	b21b      	sxth	r3, r3
 800cfaa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    rt_origo.x = coords->x2 - radius - aa;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	b21b      	sxth	r3, r3
 800cfea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    rt_origo.y = coords->y1 + radius + aa;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cffa:	4413      	add	r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d002:	b29b      	uxth	r3, r3
 800d004:	4413      	add	r3, r2
 800d006:	b29b      	uxth	r3, r3
 800d008:	b21b      	sxth	r3, r3
 800d00a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    rb_origo.x = coords->x2 - radius - aa;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d014:	b29a      	uxth	r2, r3
 800d016:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d022:	b29b      	uxth	r3, r3
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	b29b      	uxth	r3, r3
 800d028:	b21b      	sxth	r3, r3
 800d02a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    rb_origo.y = coords->y2 - radius - aa;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d034:	b29a      	uxth	r2, r3
 800d036:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d042:	b29b      	uxth	r3, r3
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	b29b      	uxth	r3, r3
 800d048:	b21b      	sxth	r3, r3
 800d04a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mid_bot_area;
    lv_area_t edge_bot_area;

    lv_point_t cir;
    lv_coord_t cir_tmp;
    lv_circ_init(&cir, &cir_tmp, radius);
 800d04e:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800d052:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800d056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d05a:	4618      	mov	r0, r3
 800d05c:	f005 ffb9 	bl	8012fd2 <lv_circ_init>

    /*Init the areas*/
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d060:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d064:	b29a      	uxth	r2, r3
 800d066:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	b29b      	uxth	r3, r3
 800d070:	b219      	sxth	r1, r3
 800d072:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d076:	b29a      	uxth	r2, r3
 800d078:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	4413      	add	r3, r2
 800d080:	b29b      	uxth	r3, r3
 800d082:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d084:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d088:	b29a      	uxth	r2, r3
 800d08a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4413      	add	r3, r2
 800d092:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d094:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d096:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	4413      	add	r3, r2
 800d0a4:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	f005 fddb 	bl	8012c6c <lv_area_set>

    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0b6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	b219      	sxth	r1, r3
 800d0c8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d0da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4413      	add	r3, r2
 800d0e8:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0ea:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d0ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0fc:	b21b      	sxth	r3, r3
 800d0fe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	462b      	mov	r3, r5
 800d106:	4622      	mov	r2, r4
 800d108:	f005 fdb0 	bl	8012c6c <lv_area_set>

    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d10c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d110:	b29a      	uxth	r2, r3
 800d112:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d116:	b29b      	uxth	r3, r3
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	b219      	sxth	r1, r3
 800d11e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d122:	b29a      	uxth	r2, r3
 800d124:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d128:	b29b      	uxth	r3, r3
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d130:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d134:	b29a      	uxth	r2, r3
 800d136:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4413      	add	r3, r2
 800d13e:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d140:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d142:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d146:	b29a      	uxth	r2, r3
 800d148:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d152:	b21b      	sxth	r3, r3
 800d154:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	462b      	mov	r3, r5
 800d15c:	4622      	mov	r2, r4
 800d15e:	f005 fd85 	bl	8012c6c <lv_area_set>

    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d162:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d166:	b29a      	uxth	r2, r3
 800d168:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	b29b      	uxth	r3, r3
 800d172:	b219      	sxth	r1, r3
 800d174:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d178:	b29a      	uxth	r2, r3
 800d17a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d17e:	b29b      	uxth	r3, r3
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	b29b      	uxth	r3, r3
 800d184:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d186:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d190:	b29b      	uxth	r3, r3
 800d192:	4413      	add	r3, r2
 800d194:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d196:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d198:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	462b      	mov	r3, r5
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	f005 fd5a 	bl	8012c6c <lv_area_set>
#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    lv_coord_t out_y_seg_end   = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    lv_coord_t out_x_last      = radius;
 800d1c4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d1c8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    lv_color_t aa_color_hor_top;
    lv_color_t aa_color_hor_bottom;
    lv_color_t aa_color_ver;
#endif

    while(lv_circ_cont(&cir)) {
 800d1cc:	e367      	b.n	800d89e <lv_draw_rect_main_corner+0x9e0>
#if LV_ANTIALIAS
        if(aa) {
 800d1ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 8197 	beq.w	800d506 <lv_draw_rect_main_corner+0x648>
            /*New step in y on the outter circle*/
            if(out_x_last != cir.x) {
 800d1d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d1dc:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	f000 8190 	beq.w	800d506 <lv_draw_rect_main_corner+0x648>
                out_y_seg_end       = cir.y;
 800d1e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d1e8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800d1ec:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d1f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800d1fc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d200:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800d202:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d206:	837b      	strh	r3, [r7, #26]

                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800d208:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d20c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	461a      	mov	r2, r3
 800d214:	4613      	mov	r3, r2
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	1a9a      	subs	r2, r3, r2
 800d21a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d222:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800d226:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d22a:	461a      	mov	r2, r3
 800d22c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800d230:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800d234:	f7ff fc13 	bl	800ca5e <lv_color_mix>
 800d238:	4603      	mov	r3, r0
 800d23a:	84bb      	strh	r3, [r7, #36]	; 0x24
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800d23c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d240:	461a      	mov	r2, r3
 800d242:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d246:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d24a:	f7ff fc08 	bl	800ca5e <lv_color_mix>
 800d24e:	4603      	mov	r3, r0
 800d250:	843b      	strh	r3, [r7, #32]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800d252:	2300      	movs	r3, #0
 800d254:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800d258:	e147      	b.n	800d4ea <lv_draw_rect_main_corner+0x62c>
                    lv_opa_t aa_opa;
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800d25a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d25e:	2b01      	cmp	r3, #1
 800d260:	dd0c      	ble.n	800d27c <lv_draw_rect_main_corner+0x3be>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800d262:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800d266:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800d26a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d26e:	4618      	mov	r0, r3
 800d270:	f003 fb7c 	bl	801096c <antialias_get_opa_circ>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d27a:	e00f      	b.n	800d29c <lv_draw_rect_main_corner+0x3de>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800d27c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800d280:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800d284:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fb facf 	bl	800882c <lv_draw_aa_get_opa>
 800d28e:	4603      	mov	r3, r0
 800d290:	461a      	mov	r2, r3
 800d292:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                    }

                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800d29c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	4413      	add	r3, r2
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d2b0:	4413      	add	r3, r2
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	b218      	sxth	r0, r3
 800d2b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	4413      	add	r3, r2
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	b219      	sxth	r1, r3
 800d2cc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	8c3b      	ldrh	r3, [r7, #32]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	f7fb ffd0 	bl	800927a <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800d2da:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	b218      	sxth	r0, r3
 800d2f4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	4413      	add	r3, r2
 800d302:	b29b      	uxth	r3, r3
 800d304:	3301      	adds	r3, #1
 800d306:	b29b      	uxth	r3, r3
 800d308:	b219      	sxth	r1, r3
 800d30a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	8c3b      	ldrh	r3, [r7, #32]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	f7fb ffb1 	bl	800927a <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800d318:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d322:	b29b      	uxth	r3, r3
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	b29a      	uxth	r2, r3
 800d328:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	b29b      	uxth	r3, r3
 800d330:	b218      	sxth	r0, r3
 800d332:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d336:	b29a      	uxth	r2, r3
 800d338:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	b29b      	uxth	r3, r3
 800d342:	3b01      	subs	r3, #1
 800d344:	b29b      	uxth	r3, r3
 800d346:	b219      	sxth	r1, r3
 800d348:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	f7fb ff92 	bl	800927a <lv_draw_px>
                               aa_color_hor_top, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800d356:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d360:	b29b      	uxth	r3, r3
 800d362:	4413      	add	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d36a:	4413      	add	r3, r2
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	b218      	sxth	r0, r3
 800d370:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d374:	b29a      	uxth	r2, r3
 800d376:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	b29b      	uxth	r3, r3
 800d380:	3b01      	subs	r3, #1
 800d382:	b29b      	uxth	r3, r3
 800d384:	b219      	sxth	r1, r3
 800d386:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	f7fb ff73 	bl	800927a <lv_draw_px>
                               aa_color_hor_top, aa_opa);

                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800d394:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d398:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800d39c:	1ad2      	subs	r2, r2, r3
 800d39e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800d3a2:	4413      	add	r3, r2
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	021b      	lsls	r3, r3, #8
 800d3aa:	1a9a      	subs	r2, r3, r2
 800d3ac:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800d3b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d3bc:	461a      	mov	r2, r3
 800d3be:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d3c2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d3c6:	f7ff fb4a 	bl	800ca5e <lv_color_mix>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800d3ce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	4413      	add	r3, r2
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	b218      	sxth	r0, r3
 800d3e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	4413      	add	r3, r2
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d3f8:	4413      	add	r3, r2
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	b219      	sxth	r1, r3
 800d3fe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	8bbb      	ldrh	r3, [r7, #28]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	f7fb ff37 	bl	800927a <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800d40c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d410:	b29a      	uxth	r2, r3
 800d412:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d416:	b29b      	uxth	r3, r3
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	3b01      	subs	r3, #1
 800d41e:	b29b      	uxth	r3, r3
 800d420:	b218      	sxth	r0, r3
 800d422:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d426:	b29a      	uxth	r2, r3
 800d428:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4413      	add	r3, r2
 800d430:	b29a      	uxth	r2, r3
 800d432:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d436:	4413      	add	r3, r2
 800d438:	b29b      	uxth	r3, r3
 800d43a:	b219      	sxth	r1, r3
 800d43c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	8bbb      	ldrh	r3, [r7, #28]
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	f7fb ff18 	bl	800927a <lv_draw_px>
                               aa_color_ver, aa_opa);

                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800d44a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d44e:	461a      	mov	r2, r3
 800d450:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800d454:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800d458:	f7ff fb01 	bl	800ca5e <lv_color_mix>
 800d45c:	4603      	mov	r3, r0
 800d45e:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800d460:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d464:	b29a      	uxth	r2, r3
 800d466:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3b01      	subs	r3, #1
 800d472:	b29b      	uxth	r3, r3
 800d474:	b218      	sxth	r0, r3
 800d476:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d480:	b29b      	uxth	r3, r3
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	b29a      	uxth	r2, r3
 800d486:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	b219      	sxth	r1, r3
 800d490:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	8bbb      	ldrh	r3, [r7, #28]
 800d498:	68ba      	ldr	r2, [r7, #8]
 800d49a:	f7fb feee 	bl	800927a <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800d49e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	4413      	add	r3, r2
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	b218      	sxth	r0, r3
 800d4b4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	b219      	sxth	r1, r3
 800d4ce:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	8bbb      	ldrh	r3, [r7, #28]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	f7fb fecf 	bl	800927a <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800d4dc:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800d4ea:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800d4ee:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	f6ff aeb1 	blt.w	800d25a <lv_draw_rect_main_corner+0x39c>
                               aa_color_ver, aa_opa);
                }

                out_x_last      = cir.x;
 800d4f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d4fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                out_y_seg_start = out_y_seg_end;
 800d4fe:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800d502:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            }
        }
#endif
        uint8_t edge_top_refr = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        uint8_t mid_top_refr  = 0;
 800d50c:	2300      	movs	r3, #0
 800d50e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        uint8_t mid_bot_refr  = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        uint8_t edge_bot_refr = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        /* If a new row coming draw the previous
         * The y coordinate can remain the same so wait for a new*/
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800d51e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d522:	461a      	mov	r2, r3
 800d524:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d528:	4619      	mov	r1, r3
 800d52a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d52e:	440b      	add	r3, r1
 800d530:	429a      	cmp	r2, r3
 800d532:	d002      	beq.n	800d53a <lv_draw_rect_main_corner+0x67c>
 800d534:	2301      	movs	r3, #1
 800d536:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800d53a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d53e:	461a      	mov	r2, r3
 800d540:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d544:	4619      	mov	r1, r3
 800d546:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d54a:	440b      	add	r3, r1
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d002      	beq.n	800d556 <lv_draw_rect_main_corner+0x698>
 800d550:	2301      	movs	r3, #1
 800d552:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800d556:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d55a:	461a      	mov	r2, r3
 800d55c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d560:	4619      	mov	r1, r3
 800d562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d566:	1acb      	subs	r3, r1, r3
 800d568:	429a      	cmp	r2, r3
 800d56a:	d002      	beq.n	800d572 <lv_draw_rect_main_corner+0x6b4>
 800d56c:	2301      	movs	r3, #1
 800d56e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800d572:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d576:	461a      	mov	r2, r3
 800d578:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d57c:	4619      	mov	r1, r3
 800d57e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d582:	1acb      	subs	r3, r1, r3
 800d584:	429a      	cmp	r2, r3
 800d586:	d002      	beq.n	800d58e <lv_draw_rect_main_corner+0x6d0>
 800d588:	2301      	movs	r3, #1
 800d58a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

        /*Draw the areas which are not disabled*/
        if(edge_top_refr != 0) {
 800d58e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d592:	2b00      	cmp	r3, #0
 800d594:	d030      	beq.n	800d5f8 <lv_draw_rect_main_corner+0x73a>
            if(mcolor.full == gcolor.full)
 800d596:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d59a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d104      	bne.n	800d5ac <lv_draw_rect_main_corner+0x6ee>
                act_color = mcolor;
 800d5a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d5a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d5aa:	e01c      	b.n	800d5e6 <lv_draw_rect_main_corner+0x728>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	4613      	mov	r3, r2
 800d5be:	021b      	lsls	r3, r3, #8
 800d5c0:	1a9a      	subs	r2, r3, r2
 800d5c2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d5ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d5d8:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d5dc:	f7ff fa3f 	bl	800ca5e <lv_color_mix>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800d5e6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d5ea:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d5ee:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	f7fb fed9 	bl	80093aa <lv_draw_fill>
        }

        if(mid_top_refr != 0) {
 800d5f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d030      	beq.n	800d662 <lv_draw_rect_main_corner+0x7a4>
            if(mcolor.full == gcolor.full)
 800d600:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d604:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d608:	429a      	cmp	r2, r3
 800d60a:	d104      	bne.n	800d616 <lv_draw_rect_main_corner+0x758>
                act_color = mcolor;
 800d60c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d610:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d614:	e01c      	b.n	800d650 <lv_draw_rect_main_corner+0x792>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d61c:	461a      	mov	r2, r3
 800d61e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	461a      	mov	r2, r3
 800d626:	4613      	mov	r3, r2
 800d628:	021b      	lsls	r3, r3, #8
 800d62a:	1a9a      	subs	r2, r3, r2
 800d62c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d630:	fbb2 f3f3 	udiv	r3, r2, r3
 800d634:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d638:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d63c:	461a      	mov	r2, r3
 800d63e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d642:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d646:	f7ff fa0a 	bl	800ca5e <lv_color_mix>
 800d64a:	4603      	mov	r3, r0
 800d64c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800d650:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d654:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d658:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	f7fb fea4 	bl	80093aa <lv_draw_fill>
        }

        if(mid_bot_refr != 0) {
 800d662:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800d666:	2b00      	cmp	r3, #0
 800d668:	d030      	beq.n	800d6cc <lv_draw_rect_main_corner+0x80e>
            if(mcolor.full == gcolor.full)
 800d66a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d66e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d672:	429a      	cmp	r2, r3
 800d674:	d104      	bne.n	800d680 <lv_draw_rect_main_corner+0x7c2>
                act_color = mcolor;
 800d676:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d67a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d67e:	e01c      	b.n	800d6ba <lv_draw_rect_main_corner+0x7fc>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d686:	461a      	mov	r2, r3
 800d688:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	461a      	mov	r2, r3
 800d690:	4613      	mov	r3, r2
 800d692:	021b      	lsls	r3, r3, #8
 800d694:	1a9a      	subs	r2, r3, r2
 800d696:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d69e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d6a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d6ac:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d6b0:	f7ff f9d5 	bl	800ca5e <lv_color_mix>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800d6ba:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d6be:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d6c2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	f7fb fe6f 	bl	80093aa <lv_draw_fill>
        }

        if(edge_bot_refr != 0) {
 800d6cc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d030      	beq.n	800d736 <lv_draw_rect_main_corner+0x878>

            if(mcolor.full == gcolor.full)
 800d6d4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d6d8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d104      	bne.n	800d6ea <lv_draw_rect_main_corner+0x82c>
                act_color = mcolor;
 800d6e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d6e4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d6e8:	e01c      	b.n	800d724 <lv_draw_rect_main_corner+0x866>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	021b      	lsls	r3, r3, #8
 800d6fe:	1a9a      	subs	r2, r3, r2
 800d700:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d704:	fbb2 f3f3 	udiv	r3, r2, r3
 800d708:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d70c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d710:	461a      	mov	r2, r3
 800d712:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d716:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d71a:	f7ff f9a0 	bl	800ca5e <lv_color_mix>
 800d71e:	4603      	mov	r3, r0
 800d720:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800d724:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d728:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d72c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	f7fb fe3a 	bl	80093aa <lv_draw_fill>
        }

        /*Save the current coordinates*/
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d736:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d740:	b29b      	uxth	r3, r3
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	b29b      	uxth	r3, r3
 800d746:	b219      	sxth	r1, r3
 800d748:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d752:	b29b      	uxth	r3, r3
 800d754:	4413      	add	r3, r2
 800d756:	b29b      	uxth	r3, r3
 800d758:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d75a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d75e:	b29a      	uxth	r2, r3
 800d760:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d764:	b29b      	uxth	r3, r3
 800d766:	4413      	add	r3, r2
 800d768:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d76a:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d76c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d770:	b29a      	uxth	r2, r3
 800d772:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d776:	b29b      	uxth	r3, r3
 800d778:	4413      	add	r3, r2
 800d77a:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d77c:	b21b      	sxth	r3, r3
 800d77e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	462b      	mov	r3, r5
 800d786:	4622      	mov	r2, r4
 800d788:	f005 fa70 	bl	8012c6c <lv_area_set>

        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d78c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d790:	b29a      	uxth	r2, r3
 800d792:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d796:	b29b      	uxth	r3, r3
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	b219      	sxth	r1, r3
 800d79e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4413      	add	r3, r2
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d7b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	4413      	add	r3, r2
 800d7be:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d7c0:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d7c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d7d2:	b21b      	sxth	r3, r3
 800d7d4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	462b      	mov	r3, r5
 800d7dc:	4622      	mov	r2, r4
 800d7de:	f005 fa45 	bl	8012c6c <lv_area_set>

        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d7e2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	b219      	sxth	r1, r3
 800d7f4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	b29b      	uxth	r3, r3
 800d804:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d806:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d810:	b29b      	uxth	r3, r3
 800d812:	4413      	add	r3, r2
 800d814:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d816:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d818:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d822:	b29b      	uxth	r3, r3
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d828:	b21b      	sxth	r3, r3
 800d82a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	462b      	mov	r3, r5
 800d832:	4622      	mov	r2, r4
 800d834:	f005 fa1a 	bl	8012c6c <lv_area_set>

        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d838:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d842:	b29b      	uxth	r3, r3
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	b29b      	uxth	r3, r3
 800d848:	b219      	sxth	r1, r3
 800d84a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d84e:	b29a      	uxth	r2, r3
 800d850:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d854:	b29b      	uxth	r3, r3
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	b29b      	uxth	r3, r3
 800d85a:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d85c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d860:	b29a      	uxth	r2, r3
 800d862:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d866:	b29b      	uxth	r3, r3
 800d868:	4413      	add	r3, r2
 800d86a:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d86c:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d86e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d872:	b29a      	uxth	r2, r3
 800d874:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d878:	b29b      	uxth	r3, r3
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d87e:	b21b      	sxth	r3, r3
 800d880:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	462b      	mov	r3, r5
 800d888:	4622      	mov	r2, r4
 800d88a:	f005 f9ef 	bl	8012c6c <lv_area_set>

        lv_circ_next(&cir, &cir_tmp);
 800d88e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f005 fbc9 	bl	8013030 <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 800d89e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f005 fbaf 	bl	8013006 <lv_circ_cont>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f47f ac8f 	bne.w	800d1ce <lv_draw_rect_main_corner+0x310>
    }

    if(mcolor.full == gcolor.full)
 800d8b0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d8b4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d104      	bne.n	800d8c6 <lv_draw_rect_main_corner+0xa08>
        act_color = mcolor;
 800d8bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d8c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d8c4:	e01c      	b.n	800d900 <lv_draw_rect_main_corner+0xa42>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	1a9a      	subs	r2, r3, r2
 800d8dc:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800d8e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d8f2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d8f6:	f7ff f8b2 	bl	800ca5e <lv_color_mix>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800d900:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d904:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d908:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d90c:	68b9      	ldr	r1, [r7, #8]
 800d90e:	f7fb fd4c 	bl	80093aa <lv_draw_fill>

    if(edge_top_area.y1 != mid_top_area.y1) {
 800d912:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800d916:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d030      	beq.n	800d980 <lv_draw_rect_main_corner+0xac2>

        if(mcolor.full == gcolor.full)
 800d91e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d922:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d926:	429a      	cmp	r2, r3
 800d928:	d104      	bne.n	800d934 <lv_draw_rect_main_corner+0xa76>
            act_color = mcolor;
 800d92a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d92e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d932:	e01c      	b.n	800d96e <lv_draw_rect_main_corner+0xab0>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d93a:	461a      	mov	r2, r3
 800d93c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	461a      	mov	r2, r3
 800d944:	4613      	mov	r3, r2
 800d946:	021b      	lsls	r3, r3, #8
 800d948:	1a9a      	subs	r2, r3, r2
 800d94a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d952:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800d956:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d95a:	461a      	mov	r2, r3
 800d95c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d960:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d964:	f7ff f87b 	bl	800ca5e <lv_color_mix>
 800d968:	4603      	mov	r3, r0
 800d96a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800d96e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d972:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d976:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d97a:	68b9      	ldr	r1, [r7, #8]
 800d97c:	f7fb fd15 	bl	80093aa <lv_draw_fill>
    }

    if(mcolor.full == gcolor.full)
 800d980:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d984:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d988:	429a      	cmp	r2, r3
 800d98a:	d104      	bne.n	800d996 <lv_draw_rect_main_corner+0xad8>
        act_color = mcolor;
 800d98c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d990:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d994:	e01c      	b.n	800d9d0 <lv_draw_rect_main_corner+0xb12>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d99c:	461a      	mov	r2, r3
 800d99e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	021b      	lsls	r3, r3, #8
 800d9aa:	1a9a      	subs	r2, r3, r2
 800d9ac:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800d9b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d9bc:	461a      	mov	r2, r3
 800d9be:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d9c2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d9c6:	f7ff f84a 	bl	800ca5e <lv_color_mix>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800d9d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d9d4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d9d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d9dc:	68b9      	ldr	r1, [r7, #8]
 800d9de:	f7fb fce4 	bl	80093aa <lv_draw_fill>

    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800d9e2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800d9e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d030      	beq.n	800da50 <lv_draw_rect_main_corner+0xb92>

        if(mcolor.full == gcolor.full)
 800d9ee:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d9f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d104      	bne.n	800da04 <lv_draw_rect_main_corner+0xb46>
            act_color = mcolor;
 800d9fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d9fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800da02:	e01c      	b.n	800da3e <lv_draw_rect_main_corner+0xb80>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800da0a:	461a      	mov	r2, r3
 800da0c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	461a      	mov	r2, r3
 800da14:	4613      	mov	r3, r2
 800da16:	021b      	lsls	r3, r3, #8
 800da18:	1a9a      	subs	r2, r3, r2
 800da1a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800da1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800da26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800da2a:	461a      	mov	r2, r3
 800da2c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800da30:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800da34:	f7ff f813 	bl	800ca5e <lv_color_mix>
 800da38:	4603      	mov	r3, r0
 800da3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800da3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800da42:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800da46:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	f7fb fcad 	bl	80093aa <lv_draw_fill>
    }

#if LV_ANTIALIAS
    if(aa) {
 800da50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 8257 	beq.w	800df08 <lv_draw_rect_main_corner+0x104a>
        /*The first and the last line is not drawn*/
        edge_top_area.x1 = coords->x1 + radius + 2;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da60:	b29a      	uxth	r2, r3
 800da62:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800da66:	4413      	add	r3, r2
 800da68:	b29b      	uxth	r3, r3
 800da6a:	3302      	adds	r3, #2
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	b21b      	sxth	r3, r3
 800da70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        edge_top_area.x2 = coords->x2 - radius - 2;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	b29b      	uxth	r3, r3
 800da84:	3b02      	subs	r3, #2
 800da86:	b29b      	uxth	r3, r3
 800da88:	b21b      	sxth	r3, r3
 800da8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        edge_top_area.y1 = coords->y1;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y1;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800daa2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800daac:	8852      	ldrh	r2, [r2, #2]
 800daae:	68b9      	ldr	r1, [r7, #8]
 800dab0:	f7fb fc7b 	bl	80093aa <lv_draw_fill>

        edge_top_area.y1 = coords->y2;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800daba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y2;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dac4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800dac8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800dad2:	8892      	ldrh	r2, [r2, #4]
 800dad4:	68b9      	ldr	r1, [r7, #8]
 800dad6:	f7fb fc68 	bl	80093aa <lv_draw_fill>

        /*Last parts of the anti-alias*/
        out_y_seg_end       = cir.y;
 800dada:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dadc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800dae0:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800dae4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	b29b      	uxth	r3, r3
 800daec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800daf0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800daf4:	82bb      	strh	r3, [r7, #20]
        aa_p.y = out_y_seg_start;
 800daf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dafa:	82fb      	strh	r3, [r7, #22]

        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800dafc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800db00:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	461a      	mov	r2, r3
 800db08:	4613      	mov	r3, r2
 800db0a:	021b      	lsls	r3, r3, #8
 800db0c:	1a9a      	subs	r2, r3, r2
 800db0e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800db12:	fbb2 f3f3 	udiv	r3, r2, r3
 800db16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800db1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db1e:	461a      	mov	r2, r3
 800db20:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800db24:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800db28:	f7fe ff99 	bl	800ca5e <lv_color_mix>
 800db2c:	4603      	mov	r3, r0
 800db2e:	843b      	strh	r3, [r7, #32]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800db30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db34:	461a      	mov	r2, r3
 800db36:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800db3a:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800db3e:	f7fe ff8e 	bl	800ca5e <lv_color_mix>
 800db42:	4603      	mov	r3, r0
 800db44:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800db46:	2300      	movs	r3, #0
 800db48:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800db4c:	e136      	b.n	800ddbc <lv_draw_rect_main_corner+0xefe>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800db4e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800db52:	f9b7 107a 	ldrsh.w	r1, [r7, #122]	; 0x7a
 800db56:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fa fe66 	bl	800882c <lv_draw_aa_get_opa>
 800db60:	4603      	mov	r3, r0
 800db62:	461a      	mov	r2, r3
 800db64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800db68:	1a9b      	subs	r3, r3, r2
 800db6a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800db6e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800db72:	b29a      	uxth	r2, r3
 800db74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	4413      	add	r3, r2
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db82:	4413      	add	r3, r2
 800db84:	b29b      	uxth	r3, r3
 800db86:	b218      	sxth	r0, r3
 800db88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800db92:	b29b      	uxth	r3, r3
 800db94:	4413      	add	r3, r2
 800db96:	b29b      	uxth	r3, r3
 800db98:	3301      	adds	r3, #1
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	b219      	sxth	r1, r3
 800db9e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	f7fb fb67 	bl	800927a <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800dbac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	b218      	sxth	r0, r3
 800dbc6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	4413      	add	r3, r2
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	b219      	sxth	r1, r3
 800dbdc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	f7fb fb48 	bl	800927a <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800dbea:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b218      	sxth	r0, r3
 800dc04:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	3b01      	subs	r3, #1
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	b219      	sxth	r1, r3
 800dc1a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	8c3b      	ldrh	r3, [r7, #32]
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	f7fb fb29 	bl	800927a <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800dc28:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	4413      	add	r3, r2
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc3c:	4413      	add	r3, r2
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	b218      	sxth	r0, r3
 800dc42:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	3b01      	subs	r3, #1
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	b219      	sxth	r1, r3
 800dc58:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	8c3b      	ldrh	r3, [r7, #32]
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	f7fb fb0a 	bl	800927a <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);

            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800dc66:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800dc6a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800dc74:	4413      	add	r3, r2
 800dc76:	461a      	mov	r2, r3
 800dc78:	4613      	mov	r3, r2
 800dc7a:	021b      	lsls	r3, r3, #8
 800dc7c:	1a9a      	subs	r2, r3, r2
 800dc7e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800dc82:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800dc8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800dc94:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800dc98:	f7fe fee1 	bl	800ca5e <lv_color_mix>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800dca0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4413      	add	r3, r2
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	b218      	sxth	r0, r3
 800dcb6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcca:	4413      	add	r3, r2
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	b219      	sxth	r1, r3
 800dcd0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	8bbb      	ldrh	r3, [r7, #28]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	f7fb face 	bl	800927a <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800dcde:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	b218      	sxth	r0, r3
 800dcf4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4413      	add	r3, r2
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd08:	4413      	add	r3, r2
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	b219      	sxth	r1, r3
 800dd0e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	8bbb      	ldrh	r3, [r7, #28]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	f7fb faaf 	bl	800927a <lv_draw_px>
                       aa_opa);

            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800dd1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dd20:	461a      	mov	r2, r3
 800dd22:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800dd26:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800dd2a:	f7fe fe98 	bl	800ca5e <lv_color_mix>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800dd32:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	3b01      	subs	r3, #1
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	b218      	sxth	r0, r3
 800dd48:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	b219      	sxth	r1, r3
 800dd62:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	8bbb      	ldrh	r3, [r7, #28]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	f7fb fa85 	bl	800927a <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800dd70:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4413      	add	r3, r2
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3301      	adds	r3, #1
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	b218      	sxth	r0, r3
 800dd86:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	b219      	sxth	r1, r3
 800dda0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	8bbb      	ldrh	r3, [r7, #28]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	f7fb fa66 	bl	800927a <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800ddae:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800ddbc:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800ddc0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	f6ff aec2 	blt.w	800db4e <lv_draw_rect_main_corner+0xc90>
                       aa_opa);
        }

        /*In some cases the last pixel is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800ddca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ddda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ddde:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800dde2:	429a      	cmp	r2, r3
 800dde4:	f040 8090 	bne.w	800df08 <lv_draw_rect_main_corner+0x104a>
            aa_p.x = out_x_last;
 800dde8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ddec:	82bb      	strh	r3, [r7, #20]
            aa_p.y = out_x_last;
 800ddee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ddf2:	82fb      	strh	r3, [r7, #22]

            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800ddf4:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	021b      	lsls	r3, r3, #8
 800ddfc:	1a9a      	subs	r2, r3, r2
 800ddfe:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800de02:	fbb2 f3f3 	udiv	r3, r2, r3
 800de06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800de0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de0e:	461a      	mov	r2, r3
 800de10:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800de14:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800de18:	f7fe fe21 	bl	800ca5e <lv_color_mix>
 800de1c:	4603      	mov	r3, r0
 800de1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800de20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de24:	461a      	mov	r2, r3
 800de26:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800de2a:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800de2e:	f7fe fe16 	bl	800ca5e <lv_color_mix>
 800de32:	4603      	mov	r3, r0
 800de34:	843b      	strh	r3, [r7, #32]

            lv_opa_t aa_opa = opa >> 1;
 800de36:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800de40:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800de44:	b29a      	uxth	r2, r3
 800de46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	4413      	add	r3, r2
 800de4e:	b29b      	uxth	r3, r3
 800de50:	b218      	sxth	r0, r3
 800de52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de56:	b29a      	uxth	r2, r3
 800de58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	4413      	add	r3, r2
 800de60:	b29b      	uxth	r3, r3
 800de62:	b219      	sxth	r1, r3
 800de64:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	8c3b      	ldrh	r3, [r7, #32]
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	f7fb fa04 	bl	800927a <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800de72:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800de76:	b29a      	uxth	r2, r3
 800de78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	b29b      	uxth	r3, r3
 800de82:	b218      	sxth	r0, r3
 800de84:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800de88:	b29a      	uxth	r2, r3
 800de8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4413      	add	r3, r2
 800de92:	b29b      	uxth	r3, r3
 800de94:	b219      	sxth	r1, r3
 800de96:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	8c3b      	ldrh	r3, [r7, #32]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	f7fb f9eb 	bl	800927a <lv_draw_px>
                       aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800dea4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	b218      	sxth	r0, r3
 800deb6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800deba:	b29a      	uxth	r2, r3
 800debc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	b219      	sxth	r1, r3
 800dec8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	f7fb f9d2 	bl	800927a <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800ded6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800deda:	b29a      	uxth	r2, r3
 800dedc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4413      	add	r3, r2
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	b218      	sxth	r0, r3
 800dee8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800deec:	b29a      	uxth	r2, r3
 800deee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800def2:	b29b      	uxth	r3, r3
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	b29b      	uxth	r3, r3
 800def8:	b219      	sxth	r1, r3
 800defa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	f7fb f9b9 	bl	800927a <lv_draw_px>
                       aa_opa);
        }
    }
#endif
}
 800df08:	bf00      	nop
 800df0a:	3788      	adds	r7, #136	; 0x88
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bdb0      	pop	{r4, r5, r7, pc}

0800df10 <lv_draw_rect_border_straight>:
 * @param rstyle pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         lv_opa_t opa_scale)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08c      	sub	sp, #48	; 0x30
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df24:	857b      	strh	r3, [r7, #42]	; 0x2a
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800df26:	f7f9 fcbd 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800df2a:	4603      	mov	r3, r0
 800df2c:	4618      	mov	r0, r3
 800df2e:	f004 fb89 	bl	8012644 <lv_disp_get_antialiasing>
 800df32:	4603      	mov	r3, r0
 800df34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    lv_coord_t width  = lv_area_get_width(coords);
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7fe fe2e 	bl	800cb9a <lv_area_get_width>
 800df3e:	4603      	mov	r3, r0
 800df40:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t height = lv_area_get_height(coords);
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7fe fe40 	bl	800cbc8 <lv_area_get_height>
 800df48:	4603      	mov	r3, r0
 800df4a:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t bwidth = style->body.border.width;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	899b      	ldrh	r3, [r3, #12]
 800df50:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800df52:	78fb      	ldrb	r3, [r7, #3]
 800df54:	2bff      	cmp	r3, #255	; 0xff
 800df56:	d102      	bne.n	800df5e <lv_draw_rect_border_straight+0x4e>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	7bdb      	ldrb	r3, [r3, #15]
 800df5c:	e00a      	b.n	800df74 <lv_draw_rect_border_straight+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	7bdb      	ldrb	r3, [r3, #15]
 800df62:	b29a      	uxth	r2, r3
 800df64:	78fb      	ldrb	r3, [r7, #3]
 800df66:	b29b      	uxth	r3, r3
 800df68:	fb12 f303 	smulbb	r3, r2, r3
 800df6c:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800df6e:	0a1b      	lsrs	r3, r3, #8
 800df70:	b29b      	uxth	r3, r3
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    lv_border_part_t part = style->body.border.part;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7b9b      	ldrb	r3, [r3, #14]
 800df7c:	f887 3020 	strb.w	r3, [r7, #32]
    lv_color_t color      = style->body.border.color;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	895b      	ldrh	r3, [r3, #10]
 800df84:	83bb      	strh	r3, [r7, #28]
    lv_area_t work_area;
    lv_coord_t length_corr = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t corner_size = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*the 0 px border width drawn as 1 px, so decrement the b_width*/
    bwidth--;
 800df8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800df92:	b29b      	uxth	r3, r3
 800df94:	3b01      	subs	r3, #1
 800df96:	b29b      	uxth	r3, r3
 800df98:	847b      	strh	r3, [r7, #34]	; 0x22

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800df9a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df9e:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800dfa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f002 fc9f 	bl	80108e8 <lv_draw_cont_radius_corr>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(radius < bwidth) {
 800dfae:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800dfb0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	da0c      	bge.n	800dfd2 <lv_draw_rect_border_straight+0xc2>
        length_corr = bwidth - radius - aa;
 800dfb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	85fb      	strh	r3, [r7, #46]	; 0x2e
        corner_size = bwidth;
 800dfcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dfd0:	e006      	b.n	800dfe0 <lv_draw_rect_border_straight+0xd0>
    } else {
        corner_size = radius + aa;
 800dfd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfda:	4413      	add	r3, r2
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    /*If radius == 0 is a special case*/
    if(style->body.radius == 0) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f040 80ca 	bne.w	800e180 <lv_draw_rect_border_straight+0x270>
        /*Left top corner*/
        if(part & LV_BORDER_TOP) {
 800dfec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01c      	beq.n	800e032 <lv_draw_rect_border_straight+0x122>
            work_area.x1 = coords->x1;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dffe:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e006:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e00e:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e016:	b29a      	uxth	r2, r3
 800e018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e01a:	4413      	add	r3, r2
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	b21b      	sxth	r3, r3
 800e020:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e022:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e026:	f107 0014 	add.w	r0, r7, #20
 800e02a:	8bba      	ldrh	r2, [r7, #28]
 800e02c:	68b9      	ldr	r1, [r7, #8]
 800e02e:	f7fb f9bc 	bl	80093aa <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & LV_BORDER_RIGHT) {
 800e032:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d03a      	beq.n	800e0b4 <lv_draw_rect_border_straight+0x1a4>
            work_area.x1 = coords->x2 - bwidth;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e044:	b29a      	uxth	r2, r3
 800e046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	b21b      	sxth	r3, r3
 800e04e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e056:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e064:	f003 0302 	and.w	r3, r3, #2
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <lv_draw_rect_border_straight+0x164>
 800e06c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e06e:	3301      	adds	r3, #1
 800e070:	b29b      	uxth	r3, r3
 800e072:	e000      	b.n	800e076 <lv_draw_rect_border_straight+0x166>
 800e074:	2300      	movs	r3, #0
 800e076:	4413      	add	r3, r2
 800e078:	b29b      	uxth	r3, r3
 800e07a:	b21b      	sxth	r3, r3
 800e07c:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e084:	b29a      	uxth	r2, r3
 800e086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e08a:	f003 0301 	and.w	r3, r3, #1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <lv_draw_rect_border_straight+0x18a>
 800e092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e094:	3301      	adds	r3, #1
 800e096:	b29b      	uxth	r3, r3
 800e098:	e000      	b.n	800e09c <lv_draw_rect_border_straight+0x18c>
 800e09a:	2300      	movs	r3, #0
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	b21b      	sxth	r3, r3
 800e0a2:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e0a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e0a8:	f107 0014 	add.w	r0, r7, #20
 800e0ac:	8bba      	ldrh	r2, [r7, #28]
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	f7fb f97b 	bl	80093aa <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & LV_BORDER_LEFT) {
 800e0b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d03a      	beq.n	800e136 <lv_draw_rect_border_straight+0x226>
            work_area.x1 = coords->x1;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c6:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + bwidth;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0d2:	4413      	add	r3, r2
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	b21b      	sxth	r3, r3
 800e0d8:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <lv_draw_rect_border_straight+0x1e6>
 800e0ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	e000      	b.n	800e0f8 <lv_draw_rect_border_straight+0x1e8>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4413      	add	r3, r2
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	b21b      	sxth	r3, r3
 800e0fe:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e106:	b29a      	uxth	r2, r3
 800e108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <lv_draw_rect_border_straight+0x20c>
 800e114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e116:	3301      	adds	r3, #1
 800e118:	b29b      	uxth	r3, r3
 800e11a:	e000      	b.n	800e11e <lv_draw_rect_border_straight+0x20e>
 800e11c:	2300      	movs	r3, #0
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	b29b      	uxth	r3, r3
 800e122:	b21b      	sxth	r3, r3
 800e124:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e126:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e12a:	f107 0014 	add.w	r0, r7, #20
 800e12e:	8bba      	ldrh	r2, [r7, #28]
 800e130:	68b9      	ldr	r1, [r7, #8]
 800e132:	f7fb f93a 	bl	80093aa <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & LV_BORDER_BOTTOM) {
 800e136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e13a:	f003 0301 	and.w	r3, r3, #1
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f000 828f 	beq.w	800e662 <lv_draw_rect_border_straight+0x752>
            work_area.x1 = coords->x1;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e152:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	b29b      	uxth	r3, r3
 800e162:	b21b      	sxth	r3, r3
 800e164:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e16c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e16e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e172:	f107 0014 	add.w	r0, r7, #20
 800e176:	8bba      	ldrh	r2, [r7, #28]
 800e178:	68b9      	ldr	r1, [r7, #8]
 800e17a:	f7fb f916 	bl	80093aa <lv_draw_fill>
 800e17e:	e271      	b.n	800e664 <lv_draw_rect_border_straight+0x754>
        }
        return;
    }

    /* Modify the corner_size if corner is drawn */
    corner_size++;
 800e180:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e184:	b29b      	uxth	r3, r3
 800e186:	3301      	adds	r3, #1
 800e188:	b29b      	uxth	r3, r3
 800e18a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*Depending one which part's are drawn modify the area lengths */
    if(part & LV_BORDER_TOP)
 800e18c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <lv_draw_rect_border_straight+0x29c>
        work_area.y1 = coords->y1 + corner_size;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e1a2:	4413      	add	r3, r2
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	b21b      	sxth	r3, r3
 800e1a8:	82fb      	strh	r3, [r7, #22]
 800e1aa:	e008      	b.n	800e1be <lv_draw_rect_border_straight+0x2ae>
    else
        work_area.y1 = coords->y1 + radius;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1b6:	4413      	add	r3, r2
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	b21b      	sxth	r3, r3
 800e1bc:	82fb      	strh	r3, [r7, #22]

    if(part & LV_BORDER_BOTTOM)
 800e1be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d009      	beq.n	800e1de <lv_draw_rect_border_straight+0x2ce>
        work_area.y2 = coords->y2 - corner_size;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	b21b      	sxth	r3, r3
 800e1da:	837b      	strh	r3, [r7, #26]
 800e1dc:	e008      	b.n	800e1f0 <lv_draw_rect_border_straight+0x2e0>
    else
        work_area.y2 = coords->y2 - radius;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	b21b      	sxth	r3, r3
 800e1ee:	837b      	strh	r3, [r7, #26]

    /*Left border*/
    if(part & LV_BORDER_LEFT) {
 800e1f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1f4:	f003 0304 	and.w	r3, r3, #4
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d013      	beq.n	800e224 <lv_draw_rect_border_straight+0x314>
        work_area.x1 = coords->x1;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e202:	82bb      	strh	r3, [r7, #20]
        work_area.x2 = work_area.x1 + bwidth;
 800e204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e20c:	4413      	add	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	b21b      	sxth	r3, r3
 800e212:	833b      	strh	r3, [r7, #24]
        lv_draw_fill(&work_area, mask, color, opa);
 800e214:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e218:	f107 0014 	add.w	r0, r7, #20
 800e21c:	8bba      	ldrh	r2, [r7, #28]
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	f7fb f8c3 	bl	80093aa <lv_draw_fill>
    }

    /*Right border*/
    if(part & LV_BORDER_RIGHT) {
 800e224:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e228:	f003 0308 	and.w	r3, r3, #8
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d013      	beq.n	800e258 <lv_draw_rect_border_straight+0x348>
        work_area.x2 = coords->x2;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e236:	833b      	strh	r3, [r7, #24]
        work_area.x1 = work_area.x2 - bwidth;
 800e238:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	b29b      	uxth	r3, r3
 800e244:	b21b      	sxth	r3, r3
 800e246:	82bb      	strh	r3, [r7, #20]
        lv_draw_fill(&work_area, mask, color, opa);
 800e248:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e24c:	f107 0014 	add.w	r0, r7, #20
 800e250:	8bba      	ldrh	r2, [r7, #28]
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	f7fb f8a9 	bl	80093aa <lv_draw_fill>
    }

    work_area.x1 = coords->x1 + corner_size - length_corr;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e25e:	b29a      	uxth	r2, r3
 800e260:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e262:	4413      	add	r3, r2
 800e264:	b29a      	uxth	r2, r3
 800e266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	b21b      	sxth	r3, r3
 800e26e:	82bb      	strh	r3, [r7, #20]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e276:	b29a      	uxth	r2, r3
 800e278:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e280:	4413      	add	r3, r2
 800e282:	b29b      	uxth	r3, r3
 800e284:	b21b      	sxth	r3, r3
 800e286:	833b      	strh	r3, [r7, #24]

    /*Upper border*/
    if(part & LV_BORDER_TOP) {
 800e288:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e28c:	f003 0302 	and.w	r3, r3, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	d014      	beq.n	800e2be <lv_draw_rect_border_straight+0x3ae>
        work_area.y1 = coords->y1;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e29a:	82fb      	strh	r3, [r7, #22]
        work_area.y2 = coords->y1 + bwidth;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2a6:	4413      	add	r3, r2
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	837b      	strh	r3, [r7, #26]
        lv_draw_fill(&work_area, mask, color, opa);
 800e2ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e2b2:	f107 0014 	add.w	r0, r7, #20
 800e2b6:	8bba      	ldrh	r2, [r7, #28]
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	f7fb f876 	bl	80093aa <lv_draw_fill>
    }

    /*Lower border*/
    if(part & LV_BORDER_BOTTOM) {
 800e2be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d013      	beq.n	800e2f2 <lv_draw_rect_border_straight+0x3e2>
        work_area.y2 = coords->y2;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2d0:	837b      	strh	r3, [r7, #26]
        work_area.y1 = work_area.y2 - bwidth;
 800e2d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	b21b      	sxth	r3, r3
 800e2e0:	82fb      	strh	r3, [r7, #22]
        lv_draw_fill(&work_area, mask, color, opa);
 800e2e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e2e6:	f107 0014 	add.w	r0, r7, #20
 800e2ea:	8bba      	ldrh	r2, [r7, #28]
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	f7fb f85c 	bl	80093aa <lv_draw_fill>
    }

    /*Draw the a remaining rectangles if the radius is smaller then bwidth */
    if(length_corr != 0) {
 800e2f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 80fc 	beq.w	800e4f4 <lv_draw_rect_border_straight+0x5e4>
        /*Left top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800e2fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e300:	f003 0302 	and.w	r3, r3, #2
 800e304:	2b00      	cmp	r3, #0
 800e306:	d038      	beq.n	800e37a <lv_draw_rect_border_straight+0x46a>
 800e308:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	2b00      	cmp	r3, #0
 800e312:	d032      	beq.n	800e37a <lv_draw_rect_border_straight+0x46a>
            work_area.x1 = coords->x1;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e31a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e322:	b29a      	uxth	r2, r3
 800e324:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e326:	4413      	add	r3, r2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e32e:	b29b      	uxth	r3, r3
 800e330:	4413      	add	r3, r2
 800e332:	b29b      	uxth	r3, r3
 800e334:	b21b      	sxth	r3, r3
 800e336:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e33e:	b29a      	uxth	r2, r3
 800e340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e342:	4413      	add	r3, r2
 800e344:	b29a      	uxth	r2, r3
 800e346:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	4413      	add	r3, r2
 800e34e:	b29b      	uxth	r3, r3
 800e350:	3301      	adds	r3, #1
 800e352:	b29b      	uxth	r3, r3
 800e354:	b21b      	sxth	r3, r3
 800e356:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e35e:	b29a      	uxth	r2, r3
 800e360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e362:	4413      	add	r3, r2
 800e364:	b29b      	uxth	r3, r3
 800e366:	b21b      	sxth	r3, r3
 800e368:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e36a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e36e:	f107 0014 	add.w	r0, r7, #20
 800e372:	8bba      	ldrh	r2, [r7, #28]
 800e374:	68b9      	ldr	r1, [r7, #8]
 800e376:	f7fb f818 	bl	80093aa <lv_draw_fill>
        }

        /*Right top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800e37a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e37e:	f003 0302 	and.w	r3, r3, #2
 800e382:	2b00      	cmp	r3, #0
 800e384:	d038      	beq.n	800e3f8 <lv_draw_rect_border_straight+0x4e8>
 800e386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e38a:	f003 0308 	and.w	r3, r3, #8
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d032      	beq.n	800e3f8 <lv_draw_rect_border_straight+0x4e8>
            work_area.x1 = coords->x2 - radius - aa;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e398:	b29a      	uxth	r2, r3
 800e39a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	b21b      	sxth	r3, r3
 800e3ac:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e3b4:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3c0:	4413      	add	r3, r2
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	4413      	add	r3, r2
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	b21b      	sxth	r3, r3
 800e3d4:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3e0:	4413      	add	r3, r2
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	b21b      	sxth	r3, r3
 800e3e6:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e3e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e3ec:	f107 0014 	add.w	r0, r7, #20
 800e3f0:	8bba      	ldrh	r2, [r7, #28]
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	f7fa ffd9 	bl	80093aa <lv_draw_fill>
        }

        /*Left bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800e3f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b00      	cmp	r3, #0
 800e402:	d038      	beq.n	800e476 <lv_draw_rect_border_straight+0x566>
 800e404:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d032      	beq.n	800e476 <lv_draw_rect_border_straight+0x566>
            work_area.x1 = coords->x1;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e416:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e41e:	b29a      	uxth	r2, r3
 800e420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e422:	4413      	add	r3, r2
 800e424:	b29a      	uxth	r2, r3
 800e426:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	4413      	add	r3, r2
 800e42e:	b29b      	uxth	r3, r3
 800e430:	b21b      	sxth	r3, r3
 800e432:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	b29b      	uxth	r3, r3
 800e442:	b21b      	sxth	r3, r3
 800e444:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	b29a      	uxth	r2, r3
 800e454:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e458:	b29b      	uxth	r3, r3
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	3b01      	subs	r3, #1
 800e460:	b29b      	uxth	r3, r3
 800e462:	b21b      	sxth	r3, r3
 800e464:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e466:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e46a:	f107 0014 	add.w	r0, r7, #20
 800e46e:	8bba      	ldrh	r2, [r7, #28]
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	f7fa ff9a 	bl	80093aa <lv_draw_fill>
        }

        /*Right bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d038      	beq.n	800e4f4 <lv_draw_rect_border_straight+0x5e4>
 800e482:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e486:	f003 0308 	and.w	r3, r3, #8
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d032      	beq.n	800e4f4 <lv_draw_rect_border_straight+0x5e4>
            work_area.x1 = coords->x2 - radius - aa;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e494:	b29a      	uxth	r2, r3
 800e496:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	b21b      	sxth	r3, r3
 800e4a8:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e4b0:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	b21b      	sxth	r3, r3
 800e4c2:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	b21b      	sxth	r3, r3
 800e4e2:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e4e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e4e8:	f107 0014 	add.w	r0, r7, #20
 800e4ec:	8bba      	ldrh	r2, [r7, #28]
 800e4ee:	68b9      	ldr	r1, [r7, #8]
 800e4f0:	f7fa ff5b 	bl	80093aa <lv_draw_fill>
        }
    }

    /*If radius == 0 one px on the corners are not drawn by main drawer*/
    if(style->body.radius == 0) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f040 80b2 	bne.w	800e664 <lv_draw_rect_border_straight+0x754>
        /*Left top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800e500:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e504:	f003 0306 	and.w	r3, r3, #6
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d025      	beq.n	800e558 <lv_draw_rect_border_straight+0x648>
            work_area.x1 = coords->x1;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e512:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e520:	b29b      	uxth	r3, r3
 800e522:	4413      	add	r3, r2
 800e524:	b29b      	uxth	r3, r3
 800e526:	b21b      	sxth	r3, r3
 800e528:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e530:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e538:	b29a      	uxth	r2, r3
 800e53a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4413      	add	r3, r2
 800e542:	b29b      	uxth	r3, r3
 800e544:	b21b      	sxth	r3, r3
 800e546:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e548:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e54c:	f107 0014 	add.w	r0, r7, #20
 800e550:	8bba      	ldrh	r2, [r7, #28]
 800e552:	68b9      	ldr	r1, [r7, #8]
 800e554:	f7fa ff29 	bl	80093aa <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800e558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e55c:	f003 030a 	and.w	r3, r3, #10
 800e560:	2b00      	cmp	r3, #0
 800e562:	d025      	beq.n	800e5b0 <lv_draw_rect_border_straight+0x6a0>
            work_area.x1 = coords->x2 - aa;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e570:	b29b      	uxth	r3, r3
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	b29b      	uxth	r3, r3
 800e576:	b21b      	sxth	r3, r3
 800e578:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e580:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e588:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e590:	b29a      	uxth	r2, r3
 800e592:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e596:	b29b      	uxth	r3, r3
 800e598:	4413      	add	r3, r2
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	b21b      	sxth	r3, r3
 800e59e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e5a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e5a4:	f107 0014 	add.w	r0, r7, #20
 800e5a8:	8bba      	ldrh	r2, [r7, #28]
 800e5aa:	68b9      	ldr	r1, [r7, #8]
 800e5ac:	f7fa fefd 	bl	80093aa <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800e5b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5b4:	f003 0305 	and.w	r3, r3, #5
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d025      	beq.n	800e608 <lv_draw_rect_border_straight+0x6f8>
            work_area.x1 = coords->x1;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5c2:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	4413      	add	r3, r2
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	b21b      	sxth	r3, r3
 800e5d8:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	b21b      	sxth	r3, r3
 800e5ee:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e5f6:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e5f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e5fc:	f107 0014 	add.w	r0, r7, #20
 800e600:	8bba      	ldrh	r2, [r7, #28]
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	f7fa fed1 	bl	80093aa <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800e608:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e60c:	f003 0309 	and.w	r3, r3, #9
 800e610:	2b00      	cmp	r3, #0
 800e612:	d027      	beq.n	800e664 <lv_draw_rect_border_straight+0x754>
            work_area.x1 = coords->x2 - aa;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e620:	b29b      	uxth	r3, r3
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	b29b      	uxth	r3, r3
 800e626:	b21b      	sxth	r3, r3
 800e628:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e630:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e638:	b29a      	uxth	r2, r3
 800e63a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e63e:	b29b      	uxth	r3, r3
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	b29b      	uxth	r3, r3
 800e644:	b21b      	sxth	r3, r3
 800e646:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e64e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e650:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e654:	f107 0014 	add.w	r0, r7, #20
 800e658:	8bba      	ldrh	r2, [r7, #28]
 800e65a:	68b9      	ldr	r1, [r7, #8]
 800e65c:	f7fa fea5 	bl	80093aa <lv_draw_fill>
 800e660:	e000      	b.n	800e664 <lv_draw_rect_border_straight+0x754>
        return;
 800e662:	bf00      	nop
        }
    }
}
 800e664:	3730      	adds	r7, #48	; 0x30
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <lv_draw_rect_border_corner>:
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                       lv_opa_t opa_scale)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b0a0      	sub	sp, #128	; 0x80
 800e66e:	af02      	add	r7, sp, #8
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	60b9      	str	r1, [r7, #8]
 800e674:	607a      	str	r2, [r7, #4]
 800e676:	70fb      	strb	r3, [r7, #3]
    uint16_t radius       = style->body.radius;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e67e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800e682:	f7f9 f90f 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800e686:	4603      	mov	r3, r0
 800e688:	4618      	mov	r0, r3
 800e68a:	f003 ffdb 	bl	8012644 <lv_disp_get_antialiasing>
 800e68e:	4603      	mov	r3, r0
 800e690:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    lv_coord_t bwidth     = style->body.border.width;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	899b      	ldrh	r3, [r3, #12]
 800e698:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    lv_color_t color      = style->body.border.color;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	895b      	ldrh	r3, [r3, #10]
 800e6a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    lv_border_part_t part = style->body.border.part;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7b9b      	ldrb	r3, [r3, #14]
 800e6a8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	2bff      	cmp	r3, #255	; 0xff
 800e6b0:	d102      	bne.n	800e6b8 <lv_draw_rect_border_corner+0x4e>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7bdb      	ldrb	r3, [r3, #15]
 800e6b6:	e00a      	b.n	800e6ce <lv_draw_rect_border_corner+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7bdb      	ldrb	r3, [r3, #15]
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	78fb      	ldrb	r3, [r7, #3]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	fb12 f303 	smulbb	r3, r2, r3
 800e6c6:	b29b      	uxth	r3, r3
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800e6c8:	0a1b      	lsrs	r3, r3, #8
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    /*0 px border width drawn as 1 px, so decrement the bwidth*/
    bwidth--;
 800e6d2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if LV_ANTIALIAS
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800e6e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <lv_draw_rect_border_corner+0x8c>
 800e6e8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
#endif

    lv_coord_t width  = lv_area_get_width(coords);
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f7fe fa4f 	bl	800cb9a <lv_area_get_width>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    lv_coord_t height = lv_area_get_height(coords);
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f7fe fa60 	bl	800cbc8 <lv_area_get_height>
 800e708:	4603      	mov	r3, r0
 800e70a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800e70e:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800e712:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 800e716:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e71a:	4618      	mov	r0, r3
 800e71c:	f002 f8e4 	bl	80108e8 <lv_draw_cont_radius_corr>
 800e720:	4603      	mov	r3, r0
 800e722:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e732:	4413      	add	r3, r2
 800e734:	b29a      	uxth	r2, r3
 800e736:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	4413      	add	r3, r2
 800e73e:	b29b      	uxth	r3, r3
 800e740:	b21b      	sxth	r3, r3
 800e742:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lt_origo.y = coords->y1 + radius + aa;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e752:	4413      	add	r3, r2
 800e754:	b29a      	uxth	r2, r3
 800e756:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	4413      	add	r3, r2
 800e75e:	b29b      	uxth	r3, r3
 800e760:	b21b      	sxth	r3, r3
 800e762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lb_origo.x = coords->x1 + radius + aa;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e772:	4413      	add	r3, r2
 800e774:	b29a      	uxth	r2, r3
 800e776:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4413      	add	r3, r2
 800e77e:	b29b      	uxth	r3, r3
 800e780:	b21b      	sxth	r3, r3
 800e782:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lb_origo.y = coords->y2 - radius - aa;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	b29a      	uxth	r2, r3
 800e794:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e798:	b29b      	uxth	r3, r3
 800e79a:	1ad3      	subs	r3, r2, r3
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	b21b      	sxth	r3, r3
 800e7a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    rt_origo.x = coords->x2 - radius - aa;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	b21b      	sxth	r3, r3
 800e7be:	873b      	strh	r3, [r7, #56]	; 0x38
    rt_origo.y = coords->y1 + radius + aa;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7cc:	4413      	add	r3, r2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	4413      	add	r3, r2
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	b21b      	sxth	r3, r3
 800e7dc:	877b      	strh	r3, [r7, #58]	; 0x3a

    rb_origo.x = coords->x2 - radius - aa;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	b21b      	sxth	r3, r3
 800e7fa:	86bb      	strh	r3, [r7, #52]	; 0x34
    rb_origo.y = coords->y2 - radius - aa;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e802:	b29a      	uxth	r2, r3
 800e804:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e810:	b29b      	uxth	r3, r3
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	b29b      	uxth	r3, r3
 800e816:	b21b      	sxth	r3, r3
 800e818:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_point_t cir_out;
    lv_coord_t tmp_out;
    lv_circ_init(&cir_out, &tmp_out, radius);
 800e81a:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800e81e:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 800e822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e826:	4618      	mov	r0, r3
 800e828:	f004 fbd3 	bl	8012fd2 <lv_circ_init>

    lv_point_t cir_in;
    lv_coord_t tmp_in;
    lv_coord_t radius_in = radius - bwidth;
 800e82c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e830:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	b29b      	uxth	r3, r3
 800e838:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

    if(radius_in < 0) {
 800e83c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800e840:	2b00      	cmp	r3, #0
 800e842:	da02      	bge.n	800e84a <lv_draw_rect_border_corner+0x1e0>
        radius_in = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    }

    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800e84a:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800e84e:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800e852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e856:	4618      	mov	r0, r3
 800e858:	f004 fbbb 	bl	8012fd2 <lv_circ_init>
    lv_coord_t act_w1;
    lv_coord_t act_w2;

#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    lv_coord_t out_y_seg_end   = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t out_x_last      = radius;
 800e868:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e86c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    lv_coord_t in_y_seg_start = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    lv_coord_t in_y_seg_end   = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t in_x_last      = radius - bwidth;
 800e87c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e880:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	b29b      	uxth	r3, r3
 800e888:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#endif

    while(cir_out.y <= cir_out.x) {
 800e88c:	f000 bd74 	b.w	800f378 <lv_draw_rect_border_corner+0xd0e>

        /*Calculate the actual width to avoid overwriting pixels*/
        if(cir_in.y < cir_in.x) {
 800e890:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800e894:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e898:	429a      	cmp	r2, r3
 800e89a:	da0e      	bge.n	800e8ba <lv_draw_rect_border_corner+0x250>
            act_w1 = cir_out.x - cir_in.x;
 800e89c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1;
 800e8b0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800e8b4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800e8b8:	e00f      	b.n	800e8da <lv_draw_rect_border_corner+0x270>
        } else {
            act_w1 = cir_out.x - cir_out.y;
 800e8ba:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1 - 1;
 800e8ce:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

#if LV_ANTIALIAS
        if(aa) {
 800e8da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 8340 	beq.w	800ef64 <lv_draw_rect_border_corner+0x8fa>
            /*New step in y on the outter circle*/
            if(out_x_last != cir_out.x) {
 800e8e4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e8e8:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	f000 817b 	beq.w	800ebe8 <lv_draw_rect_border_corner+0x57e>
                out_y_seg_end       = cir_out.y;
 800e8f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e8f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800e8f8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800e8fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	b29b      	uxth	r3, r3
 800e904:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800e908:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e90c:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800e90e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e912:	837b      	strh	r3, [r7, #26]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800e914:	2300      	movs	r3, #0
 800e916:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e91a:	e157      	b.n	800ebcc <lv_draw_rect_border_corner+0x562>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800e91c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e920:	2b01      	cmp	r3, #1
 800e922:	dd0c      	ble.n	800e93e <lv_draw_rect_border_corner+0x2d4>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800e924:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800e928:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800e92c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e930:	4618      	mov	r0, r3
 800e932:	f002 f81b 	bl	801096c <antialias_get_opa_circ>
 800e936:	4603      	mov	r3, r0
 800e938:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800e93c:	e00f      	b.n	800e95e <lv_draw_rect_border_corner+0x2f4>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800e93e:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800e942:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800e946:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7f9 ff6e 	bl	800882c <lv_draw_aa_get_opa>
 800e950:	4603      	mov	r3, r0
 800e952:	461a      	mov	r2, r3
 800e954:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e958:	1a9b      	subs	r3, r3, r2
 800e95a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e95e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e962:	f003 0301 	and.w	r3, r3, #1
 800e966:	2b00      	cmp	r3, #0
 800e968:	d045      	beq.n	800e9f6 <lv_draw_rect_border_corner+0x38c>
 800e96a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e96e:	f003 0308 	and.w	r3, r3, #8
 800e972:	2b00      	cmp	r3, #0
 800e974:	d03f      	beq.n	800e9f6 <lv_draw_rect_border_corner+0x38c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800e976:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e980:	b29b      	uxth	r3, r3
 800e982:	4413      	add	r3, r2
 800e984:	b29b      	uxth	r3, r3
 800e986:	3301      	adds	r3, #1
 800e988:	b29b      	uxth	r3, r3
 800e98a:	b218      	sxth	r0, r3
 800e98c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e990:	b29a      	uxth	r2, r3
 800e992:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e996:	b29b      	uxth	r3, r3
 800e998:	4413      	add	r3, r2
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e9a0:	4413      	add	r3, r2
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	b219      	sxth	r1, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e9ac:	9200      	str	r2, [sp, #0]
 800e9ae:	895b      	ldrh	r3, [r3, #10]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	f7fa fc62 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800e9b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	4413      	add	r3, r2
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e9ca:	4413      	add	r3, r2
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	b218      	sxth	r0, r3
 800e9d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4413      	add	r3, r2
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	b219      	sxth	r1, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e9ec:	9200      	str	r2, [sp, #0]
 800e9ee:	895b      	ldrh	r3, [r3, #10]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	f7fa fc42 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800e9f6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d045      	beq.n	800ea8e <lv_draw_rect_border_corner+0x424>
 800ea02:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ea06:	f003 0304 	and.w	r3, r3, #4
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d03f      	beq.n	800ea8e <lv_draw_rect_border_corner+0x424>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800ea0e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	b218      	sxth	r0, r3
 800ea28:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	4413      	add	r3, r2
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	3301      	adds	r3, #1
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	b219      	sxth	r1, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ea44:	9200      	str	r2, [sp, #0]
 800ea46:	895b      	ldrh	r3, [r3, #10]
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	f7fa fc16 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ea4e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ea52:	b29a      	uxth	r2, r3
 800ea54:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	b218      	sxth	r0, r3
 800ea64:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	4413      	add	r3, r2
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ea78:	4413      	add	r3, r2
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	b219      	sxth	r1, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ea84:	9200      	str	r2, [sp, #0]
 800ea86:	895b      	ldrh	r3, [r3, #10]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	f7fa fbf6 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ea8e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ea92:	f003 0302 	and.w	r3, r3, #2
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d045      	beq.n	800eb26 <lv_draw_rect_border_corner+0x4bc>
 800ea9a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ea9e:	f003 0304 	and.w	r3, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d03f      	beq.n	800eb26 <lv_draw_rect_border_corner+0x4bc>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800eaa6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	3b01      	subs	r3, #1
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	b218      	sxth	r0, r3
 800eabc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	b219      	sxth	r1, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800eadc:	9200      	str	r2, [sp, #0]
 800eade:	895b      	ldrh	r3, [r3, #10]
 800eae0:	68ba      	ldr	r2, [r7, #8]
 800eae2:	f7fa fbca 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800eae6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	b218      	sxth	r0, r3
 800eb00:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	3b01      	subs	r3, #1
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	b219      	sxth	r1, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800eb1c:	9200      	str	r2, [sp, #0]
 800eb1e:	895b      	ldrh	r3, [r3, #10]
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	f7fa fbaa 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800eb26:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eb2a:	f003 0302 	and.w	r3, r3, #2
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d045      	beq.n	800ebbe <lv_draw_rect_border_corner+0x554>
 800eb32:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eb36:	f003 0308 	and.w	r3, r3, #8
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d03f      	beq.n	800ebbe <lv_draw_rect_border_corner+0x554>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800eb3e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eb52:	4413      	add	r3, r2
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	b218      	sxth	r0, r3
 800eb58:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	1ad3      	subs	r3, r2, r3
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	b219      	sxth	r1, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800eb74:	9200      	str	r2, [sp, #0]
 800eb76:	895b      	ldrh	r3, [r3, #10]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	f7fa fb7e 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800eb7e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	4413      	add	r3, r2
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	3301      	adds	r3, #1
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	b218      	sxth	r0, r3
 800eb94:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	b219      	sxth	r1, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ebb4:	9200      	str	r2, [sp, #0]
 800ebb6:	895b      	ldrh	r3, [r3, #10]
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	f7fa fb5e 	bl	800927a <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800ebbe:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ebcc:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800ebd0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	f6ff aea1 	blt.w	800e91c <lv_draw_rect_border_corner+0x2b2>
                                   style->body.border.color, aa_opa);
                    }
                }

                out_x_last      = cir_out.x;
 800ebda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ebdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                out_y_seg_start = out_y_seg_end;
 800ebe0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ebe4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            }

            /*New step in y on the inner circle*/
            if(in_x_last != cir_in.x) {
 800ebe8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ebec:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	f000 81b7 	beq.w	800ef64 <lv_draw_rect_border_corner+0x8fa>
                in_y_seg_end        = cir_out.y;
 800ebf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ebf8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800ebfc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ec00:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                lv_point_t aa_p;

                aa_p.x = in_x_last;
 800ec0c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800ec10:	82bb      	strh	r3, [r7, #20]
                aa_p.y = in_y_seg_start;
 800ec12:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800ec16:	82fb      	strh	r3, [r7, #22]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ec1e:	e193      	b.n	800ef48 <lv_draw_rect_border_corner+0x8de>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800ec20:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	dd10      	ble.n	800ec4a <lv_draw_rect_border_corner+0x5e0>
                                                                           on the first segment*/
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800ec28:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800ec2c:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 800ec30:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec34:	4618      	mov	r0, r3
 800ec36:	f001 fe99 	bl	801096c <antialias_get_opa_circ>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800ec42:	1a9b      	subs	r3, r3, r2
 800ec44:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800ec48:	e00b      	b.n	800ec62 <lv_draw_rect_border_corner+0x5f8>
                    } else {
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ec4a:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800ec4e:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 800ec52:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f9 fde8 	bl	800882c <lv_draw_aa_get_opa>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ec62:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ec66:	f003 0301 	and.w	r3, r3, #1
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d025      	beq.n	800ecba <lv_draw_rect_border_corner+0x650>
 800ec6e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d01f      	beq.n	800ecba <lv_draw_rect_border_corner+0x650>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ec7a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	4413      	add	r3, r2
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	b218      	sxth	r0, r3
 800ec90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4413      	add	r3, r2
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800eca4:	4413      	add	r3, r2
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	b219      	sxth	r1, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ecb0:	9200      	str	r2, [sp, #0]
 800ecb2:	895b      	ldrh	r3, [r3, #10]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	f7fa fae0 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ecba:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ecbe:	f003 0301 	and.w	r3, r3, #1
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d025      	beq.n	800ed12 <lv_draw_rect_border_corner+0x6a8>
 800ecc6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ecca:	f003 0304 	and.w	r3, r3, #4
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d01f      	beq.n	800ed12 <lv_draw_rect_border_corner+0x6a8>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800ecd2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	b218      	sxth	r0, r3
 800ecec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	4413      	add	r3, r2
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	b219      	sxth	r1, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ed08:	9200      	str	r2, [sp, #0]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	f7fa fab4 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ed12:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed16:	f003 0302 	and.w	r3, r3, #2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d025      	beq.n	800ed6a <lv_draw_rect_border_corner+0x700>
 800ed1e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed22:	f003 0304 	and.w	r3, r3, #4
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d01f      	beq.n	800ed6a <lv_draw_rect_border_corner+0x700>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ed2a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	b218      	sxth	r0, r3
 800ed40:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed54:	1ad3      	subs	r3, r2, r3
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	b219      	sxth	r1, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ed60:	9200      	str	r2, [sp, #0]
 800ed62:	895b      	ldrh	r3, [r3, #10]
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	f7fa fa88 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ed6a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed6e:	f003 0302 	and.w	r3, r3, #2
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d025      	beq.n	800edc2 <lv_draw_rect_border_corner+0x758>
 800ed76:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed7a:	f003 0308 	and.w	r3, r3, #8
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d01f      	beq.n	800edc2 <lv_draw_rect_border_corner+0x758>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800ed82:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	4413      	add	r3, r2
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed96:	4413      	add	r3, r2
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	b218      	sxth	r0, r3
 800ed9c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	b29b      	uxth	r3, r3
 800edac:	3301      	adds	r3, #1
 800edae:	b29b      	uxth	r3, r3
 800edb0:	b219      	sxth	r1, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800edb8:	9200      	str	r2, [sp, #0]
 800edba:	895b      	ldrh	r3, [r3, #10]
 800edbc:	68ba      	ldr	r2, [r7, #8]
 800edbe:	f7fa fa5c 	bl	800927a <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    /*Be sure the pixels on the middle are not drawn twice*/
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800edc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800edc6:	1e5a      	subs	r2, r3, #1
 800edc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edcc:	4619      	mov	r1, r3
 800edce:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800edd2:	440b      	add	r3, r1
 800edd4:	429a      	cmp	r2, r3
 800edd6:	f000 80b0 	beq.w	800ef3a <lv_draw_rect_border_corner+0x8d0>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800edda:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d025      	beq.n	800ee32 <lv_draw_rect_border_corner+0x7c8>
 800ede6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800edea:	f003 0308 	and.w	r3, r3, #8
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d01f      	beq.n	800ee32 <lv_draw_rect_border_corner+0x7c8>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800edf2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	4413      	add	r3, r2
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ee06:	4413      	add	r3, r2
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	b218      	sxth	r0, r3
 800ee0c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	4413      	add	r3, r2
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	b219      	sxth	r1, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ee28:	9200      	str	r2, [sp, #0]
 800ee2a:	895b      	ldrh	r3, [r3, #10]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	f7fa fa24 	bl	800927a <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ee32:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d025      	beq.n	800ee8a <lv_draw_rect_border_corner+0x820>
 800ee3e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee42:	f003 0304 	and.w	r3, r3, #4
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d01f      	beq.n	800ee8a <lv_draw_rect_border_corner+0x820>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800ee4a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	b218      	sxth	r0, r3
 800ee60:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	4413      	add	r3, r2
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ee74:	4413      	add	r3, r2
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	b219      	sxth	r1, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ee80:	9200      	str	r2, [sp, #0]
 800ee82:	895b      	ldrh	r3, [r3, #10]
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	f7fa f9f8 	bl	800927a <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ee8a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d025      	beq.n	800eee2 <lv_draw_rect_border_corner+0x878>
 800ee96:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee9a:	f003 0304 	and.w	r3, r3, #4
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d01f      	beq.n	800eee2 <lv_draw_rect_border_corner+0x878>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800eea2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	b218      	sxth	r0, r3
 800eebc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	3301      	adds	r3, #1
 800eece:	b29b      	uxth	r3, r3
 800eed0:	b219      	sxth	r1, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800eed8:	9200      	str	r2, [sp, #0]
 800eeda:	895b      	ldrh	r3, [r3, #10]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	f7fa f9cc 	bl	800927a <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800eee2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eee6:	f003 0302 	and.w	r3, r3, #2
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d025      	beq.n	800ef3a <lv_draw_rect_border_corner+0x8d0>
 800eeee:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eef2:	f003 0308 	and.w	r3, r3, #8
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d01f      	beq.n	800ef3a <lv_draw_rect_border_corner+0x8d0>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800eefa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	4413      	add	r3, r2
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	b218      	sxth	r0, r3
 800ef10:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	b219      	sxth	r1, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ef30:	9200      	str	r2, [sp, #0]
 800ef32:	895b      	ldrh	r3, [r3, #10]
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	f7fa f9a0 	bl	800927a <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800ef3a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3301      	adds	r3, #1
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ef48:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ef4c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ef50:	429a      	cmp	r2, r3
 800ef52:	f6ff ae65 	blt.w	800ec20 <lv_draw_rect_border_corner+0x5b6>
                                       mask, style->body.border.color, aa_opa);
                        }
                    }
                }

                in_x_last      = cir_in.x;
 800ef56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                in_y_seg_start = in_y_seg_end;
 800ef5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ef60:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
            }
        }
#endif

        /*Draw the octets to the right bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ef64:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ef68:	f003 0301 	and.w	r3, r3, #1
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d06f      	beq.n	800f050 <lv_draw_rect_border_corner+0x9e6>
 800ef70:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ef74:	f003 0308 	and.w	r3, r3, #8
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d069      	beq.n	800f050 <lv_draw_rect_border_corner+0x9e6>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800ef7c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4413      	add	r3, r2
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	b21b      	sxth	r3, r3
 800ef96:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800ef98:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	4413      	add	r3, r2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	b21b      	sxth	r3, r3
 800efaa:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800efac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	4413      	add	r3, r2
 800efba:	b29b      	uxth	r3, r3
 800efbc:	b21b      	sxth	r3, r3
 800efbe:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800efc0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4413      	add	r3, r2
 800efce:	b29b      	uxth	r3, r3
 800efd0:	b21b      	sxth	r3, r3
 800efd2:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800efd4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800efd8:	f107 001c 	add.w	r0, r7, #28
 800efdc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800efe0:	68b9      	ldr	r1, [r7, #8]
 800efe2:	f7fa f9e2 	bl	80093aa <lv_draw_fill>

            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800efe6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800efea:	b29a      	uxth	r2, r3
 800efec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	4413      	add	r3, r2
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	b21b      	sxth	r3, r3
 800eff8:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800effa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800effe:	b29a      	uxth	r2, r3
 800f000:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f004:	b29b      	uxth	r3, r3
 800f006:	4413      	add	r3, r2
 800f008:	b29b      	uxth	r3, r3
 800f00a:	b21b      	sxth	r3, r3
 800f00c:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800f00e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f012:	b29a      	uxth	r2, r3
 800f014:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	b29b      	uxth	r3, r3
 800f026:	b21b      	sxth	r3, r3
 800f028:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800f02a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f02e:	b29a      	uxth	r2, r3
 800f030:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f034:	b29b      	uxth	r3, r3
 800f036:	4413      	add	r3, r2
 800f038:	b29b      	uxth	r3, r3
 800f03a:	b21b      	sxth	r3, r3
 800f03c:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f03e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f042:	f107 001c 	add.w	r0, r7, #28
 800f046:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f04a:	68b9      	ldr	r1, [r7, #8]
 800f04c:	f7fa f9ad 	bl	80093aa <lv_draw_fill>
        }

        /*Draw the octets to the left bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f050:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d06f      	beq.n	800f13c <lv_draw_rect_border_corner+0xad2>
 800f05c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f060:	f003 0304 	and.w	r3, r3, #4
 800f064:	2b00      	cmp	r3, #0
 800f066:	d069      	beq.n	800f13c <lv_draw_rect_border_corner+0xad2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800f068:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f072:	b29b      	uxth	r3, r3
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	b29b      	uxth	r3, r3
 800f078:	b21b      	sxth	r3, r3
 800f07a:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800f07c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f080:	b29a      	uxth	r2, r3
 800f082:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f086:	b29b      	uxth	r3, r3
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800f090:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f094:	b29a      	uxth	r2, r3
 800f096:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	4413      	add	r3, r2
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800f0ac:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	4413      	add	r3, r2
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	b21b      	sxth	r3, r3
 800f0be:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f0c0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f0c4:	f107 001c 	add.w	r0, r7, #28
 800f0c8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f0cc:	68b9      	ldr	r1, [r7, #8]
 800f0ce:	f7fa f96c 	bl	80093aa <lv_draw_fill>

            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800f0d2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	b21b      	sxth	r3, r3
 800f0e4:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800f0e6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f0fa:	4413      	add	r3, r2
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	b21b      	sxth	r3, r3
 800f100:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800f102:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f106:	b29a      	uxth	r2, r3
 800f108:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	4413      	add	r3, r2
 800f110:	b29b      	uxth	r3, r3
 800f112:	b21b      	sxth	r3, r3
 800f114:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800f116:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f120:	b29b      	uxth	r3, r3
 800f122:	4413      	add	r3, r2
 800f124:	b29b      	uxth	r3, r3
 800f126:	b21b      	sxth	r3, r3
 800f128:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f12a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f12e:	f107 001c 	add.w	r0, r7, #28
 800f132:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f136:	68b9      	ldr	r1, [r7, #8]
 800f138:	f7fa f937 	bl	80093aa <lv_draw_fill>
        }

        /*Draw the octets to the left top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f13c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f140:	f003 0302 	and.w	r3, r3, #2
 800f144:	2b00      	cmp	r3, #0
 800f146:	d07d      	beq.n	800f244 <lv_draw_rect_border_corner+0xbda>
 800f148:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f14c:	f003 0304 	and.w	r3, r3, #4
 800f150:	2b00      	cmp	r3, #0
 800f152:	d077      	beq.n	800f244 <lv_draw_rect_border_corner+0xbda>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800f154:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f158:	461a      	mov	r2, r3
 800f15a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f15e:	441a      	add	r2, r3
 800f160:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f164:	4619      	mov	r1, r3
 800f166:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f16a:	1acb      	subs	r3, r1, r3
 800f16c:	429a      	cmp	r2, r3
 800f16e:	dd34      	ble.n	800f1da <lv_draw_rect_border_corner+0xb70>
                /*Don't draw if the lines are common in the middle*/
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800f170:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f174:	b29a      	uxth	r2, r3
 800f176:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	b29b      	uxth	r3, r3
 800f180:	b21b      	sxth	r3, r3
 800f182:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800f184:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f188:	b29a      	uxth	r2, r3
 800f18a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f18e:	b29b      	uxth	r3, r3
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	b29a      	uxth	r2, r3
 800f194:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f198:	4413      	add	r3, r2
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	b21b      	sxth	r3, r3
 800f19e:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800f1a0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	1ad3      	subs	r3, r2, r3
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	b21b      	sxth	r3, r3
 800f1b2:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800f1b4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	b21b      	sxth	r3, r3
 800f1c6:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800f1c8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f1cc:	f107 001c 	add.w	r0, r7, #28
 800f1d0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	f7fa f8e8 	bl	80093aa <lv_draw_fill>
            }

            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800f1da:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	b21b      	sxth	r3, r3
 800f1ec:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800f1ee:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	b21b      	sxth	r3, r3
 800f200:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800f202:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f206:	b29a      	uxth	r2, r3
 800f208:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	b29b      	uxth	r3, r3
 800f212:	b21b      	sxth	r3, r3
 800f214:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800f216:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f21a:	b29a      	uxth	r2, r3
 800f21c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f220:	b29b      	uxth	r3, r3
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	b29a      	uxth	r2, r3
 800f226:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f22a:	4413      	add	r3, r2
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	b21b      	sxth	r3, r3
 800f230:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f232:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f236:	f107 001c 	add.w	r0, r7, #28
 800f23a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f23e:	68b9      	ldr	r1, [r7, #8]
 800f240:	f7fa f8b3 	bl	80093aa <lv_draw_fill>
        }

        /*Draw the octets to the right top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f244:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f248:	f003 0302 	and.w	r3, r3, #2
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d07d      	beq.n	800f34c <lv_draw_rect_border_corner+0xce2>
 800f250:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f254:	f003 0308 	and.w	r3, r3, #8
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d077      	beq.n	800f34c <lv_draw_rect_border_corner+0xce2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800f25c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f260:	b29a      	uxth	r2, r3
 800f262:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f266:	b29b      	uxth	r3, r3
 800f268:	4413      	add	r3, r2
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	b21b      	sxth	r3, r3
 800f26e:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800f270:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f274:	b29a      	uxth	r2, r3
 800f276:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	4413      	add	r3, r2
 800f27e:	b29b      	uxth	r3, r3
 800f280:	b21b      	sxth	r3, r3
 800f282:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800f284:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f288:	b29a      	uxth	r2, r3
 800f28a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f28e:	b29b      	uxth	r3, r3
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	b29b      	uxth	r3, r3
 800f294:	b21b      	sxth	r3, r3
 800f296:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800f298:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f2ac:	4413      	add	r3, r2
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f2b4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f2b8:	f107 001c 	add.w	r0, r7, #28
 800f2bc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f2c0:	68b9      	ldr	r1, [r7, #8]
 800f2c2:	f7fa f872 	bl	80093aa <lv_draw_fill>

            /*Don't draw if the lines are common in the middle*/
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800f2c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f2d0:	441a      	add	r2, r3
 800f2d2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f2dc:	1acb      	subs	r3, r1, r3
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	dd34      	ble.n	800f34c <lv_draw_rect_border_corner+0xce2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800f2e2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	b21b      	sxth	r3, r3
 800f2fc:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800f2fe:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f302:	b29a      	uxth	r2, r3
 800f304:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f308:	b29b      	uxth	r3, r3
 800f30a:	4413      	add	r3, r2
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	b21b      	sxth	r3, r3
 800f310:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800f312:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f316:	b29a      	uxth	r2, r3
 800f318:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	b29b      	uxth	r3, r3
 800f322:	b21b      	sxth	r3, r3
 800f324:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800f326:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f330:	b29b      	uxth	r3, r3
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	b29b      	uxth	r3, r3
 800f336:	b21b      	sxth	r3, r3
 800f338:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800f33a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f33e:	f107 001c 	add.w	r0, r7, #28
 800f342:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	f7fa f82f 	bl	80093aa <lv_draw_fill>
            }
        }
        lv_circ_next(&cir_out, &tmp_out);
 800f34c:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800f350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f003 fe6a 	bl	8013030 <lv_circ_next>

        /*The internal circle will be ready faster
         * so check it! */
        if(cir_in.y < cir_in.x) {
 800f35c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800f360:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f364:	429a      	cmp	r2, r3
 800f366:	da07      	bge.n	800f378 <lv_draw_rect_border_corner+0xd0e>
            lv_circ_next(&cir_in, &tmp_in);
 800f368:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800f36c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f003 fe5c 	bl	8013030 <lv_circ_next>
    while(cir_out.y <= cir_out.x) {
 800f378:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800f37c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f380:	429a      	cmp	r2, r3
 800f382:	f77f aa85 	ble.w	800e890 <lv_draw_rect_border_corner+0x226>
        }
    }

#if LV_ANTIALIAS
    if(aa) {
 800f386:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 83b0 	beq.w	800faf0 <lv_draw_rect_border_corner+0x1486>
        /*Last parts of the outer anti-alias*/
        out_y_seg_end       = cir_out.y;
 800f390:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f396:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800f39a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800f3a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f3aa:	823b      	strh	r3, [r7, #16]
        aa_p.y = out_y_seg_start;
 800f3ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f3b0:	827b      	strh	r3, [r7, #18]

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f3b8:	e146      	b.n	800f648 <lv_draw_rect_border_corner+0xfde>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800f3ba:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800f3be:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 800f3c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7f9 fa30 	bl	800882c <lv_draw_aa_get_opa>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f3d4:	1a9b      	subs	r3, r3, r2
 800f3d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f3da:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d045      	beq.n	800f472 <lv_draw_rect_border_corner+0xe08>
 800f3e6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f3ea:	f003 0308 	and.w	r3, r3, #8
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d03f      	beq.n	800f472 <lv_draw_rect_border_corner+0xe08>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800f3f2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	4413      	add	r3, r2
 800f400:	b29b      	uxth	r3, r3
 800f402:	3301      	adds	r3, #1
 800f404:	b29b      	uxth	r3, r3
 800f406:	b218      	sxth	r0, r3
 800f408:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f412:	b29b      	uxth	r3, r3
 800f414:	4413      	add	r3, r2
 800f416:	b29a      	uxth	r2, r3
 800f418:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f41c:	4413      	add	r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	b219      	sxth	r1, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f428:	9200      	str	r2, [sp, #0]
 800f42a:	895b      	ldrh	r3, [r3, #10]
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	f7f9 ff24 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800f432:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f436:	b29a      	uxth	r2, r3
 800f438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	4413      	add	r3, r2
 800f440:	b29a      	uxth	r2, r3
 800f442:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f446:	4413      	add	r3, r2
 800f448:	b29b      	uxth	r3, r3
 800f44a:	b218      	sxth	r0, r3
 800f44c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f450:	b29a      	uxth	r2, r3
 800f452:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f456:	b29b      	uxth	r3, r3
 800f458:	4413      	add	r3, r2
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	3301      	adds	r3, #1
 800f45e:	b29b      	uxth	r3, r3
 800f460:	b219      	sxth	r1, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f468:	9200      	str	r2, [sp, #0]
 800f46a:	895b      	ldrh	r3, [r3, #10]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	f7f9 ff04 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f472:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d045      	beq.n	800f50a <lv_draw_rect_border_corner+0xea0>
 800f47e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f482:	f003 0304 	and.w	r3, r3, #4
 800f486:	2b00      	cmp	r3, #0
 800f488:	d03f      	beq.n	800f50a <lv_draw_rect_border_corner+0xea0>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800f48a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f48e:	b29a      	uxth	r2, r3
 800f490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f494:	b29b      	uxth	r3, r3
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	b29a      	uxth	r2, r3
 800f49a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	b218      	sxth	r0, r3
 800f4a4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	b219      	sxth	r1, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f4c0:	9200      	str	r2, [sp, #0]
 800f4c2:	895b      	ldrh	r3, [r3, #10]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	f7f9 fed8 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800f4ca:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	b218      	sxth	r0, r3
 800f4e0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	4413      	add	r3, r2
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f4f4:	4413      	add	r3, r2
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	b219      	sxth	r1, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f500:	9200      	str	r2, [sp, #0]
 800f502:	895b      	ldrh	r3, [r3, #10]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	f7f9 feb8 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f50a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f50e:	f003 0302 	and.w	r3, r3, #2
 800f512:	2b00      	cmp	r3, #0
 800f514:	d045      	beq.n	800f5a2 <lv_draw_rect_border_corner+0xf38>
 800f516:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f51a:	f003 0304 	and.w	r3, r3, #4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d03f      	beq.n	800f5a2 <lv_draw_rect_border_corner+0xf38>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800f522:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f526:	b29a      	uxth	r2, r3
 800f528:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	b29b      	uxth	r3, r3
 800f532:	3b01      	subs	r3, #1
 800f534:	b29b      	uxth	r3, r3
 800f536:	b218      	sxth	r0, r3
 800f538:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f542:	b29b      	uxth	r3, r3
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	b29a      	uxth	r2, r3
 800f548:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f54c:	1ad3      	subs	r3, r2, r3
 800f54e:	b29b      	uxth	r3, r3
 800f550:	b219      	sxth	r1, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f558:	9200      	str	r2, [sp, #0]
 800f55a:	895b      	ldrh	r3, [r3, #10]
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	f7f9 fe8c 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800f562:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f566:	b29a      	uxth	r2, r3
 800f568:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	b29a      	uxth	r2, r3
 800f572:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	b29b      	uxth	r3, r3
 800f57a:	b218      	sxth	r0, r3
 800f57c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f580:	b29a      	uxth	r2, r3
 800f582:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f586:	b29b      	uxth	r3, r3
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	3b01      	subs	r3, #1
 800f58e:	b29b      	uxth	r3, r3
 800f590:	b219      	sxth	r1, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f598:	9200      	str	r2, [sp, #0]
 800f59a:	895b      	ldrh	r3, [r3, #10]
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	f7f9 fe6c 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f5a2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f5a6:	f003 0302 	and.w	r3, r3, #2
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d045      	beq.n	800f63a <lv_draw_rect_border_corner+0xfd0>
 800f5ae:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f5b2:	f003 0308 	and.w	r3, r3, #8
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d03f      	beq.n	800f63a <lv_draw_rect_border_corner+0xfd0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800f5ba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	4413      	add	r3, r2
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f5ce:	4413      	add	r3, r2
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	b218      	sxth	r0, r3
 800f5d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	b219      	sxth	r1, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f5f0:	9200      	str	r2, [sp, #0]
 800f5f2:	895b      	ldrh	r3, [r3, #10]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	f7f9 fe40 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800f5fa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f604:	b29b      	uxth	r3, r3
 800f606:	4413      	add	r3, r2
 800f608:	b29b      	uxth	r3, r3
 800f60a:	3301      	adds	r3, #1
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	b218      	sxth	r0, r3
 800f610:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f614:	b29a      	uxth	r2, r3
 800f616:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	b29a      	uxth	r2, r3
 800f620:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	b29b      	uxth	r3, r3
 800f628:	b219      	sxth	r1, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f630:	9200      	str	r2, [sp, #0]
 800f632:	895b      	ldrh	r3, [r3, #10]
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	f7f9 fe20 	bl	800927a <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800f63a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800f63e:	b29b      	uxth	r3, r3
 800f640:	3301      	adds	r3, #1
 800f642:	b29b      	uxth	r3, r3
 800f644:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f648:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800f64c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f650:	429a      	cmp	r2, r3
 800f652:	f6ff aeb2 	blt.w	800f3ba <lv_draw_rect_border_corner+0xd50>
                           style->body.border.color, aa_opa);
            }
        }

        /*In some cases the last pixel in the outer middle is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800f656:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f65a:	461a      	mov	r2, r3
 800f65c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f666:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f66a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f66e:	429a      	cmp	r2, r3
 800f670:	f040 80a3 	bne.w	800f7ba <lv_draw_rect_border_corner+0x1150>
            aa_p.x = out_x_last;
 800f674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f678:	823b      	strh	r3, [r7, #16]
            aa_p.y = out_x_last;
 800f67a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f67e:	827b      	strh	r3, [r7, #18]

            lv_opa_t aa_opa = opa >> 1;
 800f680:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f684:	085b      	lsrs	r3, r3, #1
 800f686:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f68a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f68e:	f003 0301 	and.w	r3, r3, #1
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01f      	beq.n	800f6d6 <lv_draw_rect_border_corner+0x106c>
 800f696:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f69a:	f003 0308 	and.w	r3, r3, #8
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d019      	beq.n	800f6d6 <lv_draw_rect_border_corner+0x106c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800f6a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f6a6:	b29a      	uxth	r2, r3
 800f6a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	4413      	add	r3, r2
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	b218      	sxth	r0, r3
 800f6b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	4413      	add	r3, r2
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	b219      	sxth	r1, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f6cc:	9200      	str	r2, [sp, #0]
 800f6ce:	895b      	ldrh	r3, [r3, #10]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	f7f9 fdd2 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f6d6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d01f      	beq.n	800f722 <lv_draw_rect_border_corner+0x10b8>
 800f6e2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f6e6:	f003 0304 	and.w	r3, r3, #4
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d019      	beq.n	800f722 <lv_draw_rect_border_corner+0x10b8>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800f6ee:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	1ad3      	subs	r3, r2, r3
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	b218      	sxth	r0, r3
 800f700:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f704:	b29a      	uxth	r2, r3
 800f706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	4413      	add	r3, r2
 800f70e:	b29b      	uxth	r3, r3
 800f710:	b219      	sxth	r1, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f718:	9200      	str	r2, [sp, #0]
 800f71a:	895b      	ldrh	r3, [r3, #10]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	f7f9 fdac 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f722:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d01f      	beq.n	800f76e <lv_draw_rect_border_corner+0x1104>
 800f72e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f732:	f003 0304 	and.w	r3, r3, #4
 800f736:	2b00      	cmp	r3, #0
 800f738:	d019      	beq.n	800f76e <lv_draw_rect_border_corner+0x1104>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800f73a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f73e:	b29a      	uxth	r2, r3
 800f740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f744:	b29b      	uxth	r3, r3
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	b29b      	uxth	r3, r3
 800f74a:	b218      	sxth	r0, r3
 800f74c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f750:	b29a      	uxth	r2, r3
 800f752:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f756:	b29b      	uxth	r3, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	b219      	sxth	r1, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f764:	9200      	str	r2, [sp, #0]
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	f7f9 fd86 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f76e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f772:	f003 0302 	and.w	r3, r3, #2
 800f776:	2b00      	cmp	r3, #0
 800f778:	d01f      	beq.n	800f7ba <lv_draw_rect_border_corner+0x1150>
 800f77a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f77e:	f003 0308 	and.w	r3, r3, #8
 800f782:	2b00      	cmp	r3, #0
 800f784:	d019      	beq.n	800f7ba <lv_draw_rect_border_corner+0x1150>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800f786:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f790:	b29b      	uxth	r3, r3
 800f792:	4413      	add	r3, r2
 800f794:	b29b      	uxth	r3, r3
 800f796:	b218      	sxth	r0, r3
 800f798:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	b219      	sxth	r1, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f7b0:	9200      	str	r2, [sp, #0]
 800f7b2:	895b      	ldrh	r3, [r3, #10]
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	f7f9 fd60 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }
        }

        /*Last parts of the inner anti-alias*/
        in_y_seg_end = cir_in.y;
 800f7ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        aa_p.x       = in_x_last;
 800f7c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800f7c4:	823b      	strh	r3, [r7, #16]
        aa_p.y       = in_y_seg_start;
 800f7c6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800f7ca:	827b      	strh	r3, [r7, #18]
        seg_size     = in_y_seg_end - in_y_seg_start;
 800f7cc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800f7d0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        for(i = 0; i < seg_size; i++) {
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f7e2:	e17e      	b.n	800fae2 <lv_draw_rect_border_corner+0x1478>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800f7e4:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800f7e8:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 800f7ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7f9 f81b 	bl	800882c <lv_draw_aa_get_opa>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f7fc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f800:	f003 0301 	and.w	r3, r3, #1
 800f804:	2b00      	cmp	r3, #0
 800f806:	d025      	beq.n	800f854 <lv_draw_rect_border_corner+0x11ea>
 800f808:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f80c:	f003 0308 	and.w	r3, r3, #8
 800f810:	2b00      	cmp	r3, #0
 800f812:	d01f      	beq.n	800f854 <lv_draw_rect_border_corner+0x11ea>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800f814:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f818:	b29a      	uxth	r2, r3
 800f81a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f81e:	b29b      	uxth	r3, r3
 800f820:	4413      	add	r3, r2
 800f822:	b29b      	uxth	r3, r3
 800f824:	3b01      	subs	r3, #1
 800f826:	b29b      	uxth	r3, r3
 800f828:	b218      	sxth	r0, r3
 800f82a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f82e:	b29a      	uxth	r2, r3
 800f830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f834:	b29b      	uxth	r3, r3
 800f836:	4413      	add	r3, r2
 800f838:	b29a      	uxth	r2, r3
 800f83a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f83e:	4413      	add	r3, r2
 800f840:	b29b      	uxth	r3, r3
 800f842:	b219      	sxth	r1, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f84a:	9200      	str	r2, [sp, #0]
 800f84c:	895b      	ldrh	r3, [r3, #10]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	f7f9 fd13 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f854:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d025      	beq.n	800f8ac <lv_draw_rect_border_corner+0x1242>
 800f860:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f864:	f003 0304 	and.w	r3, r3, #4
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01f      	beq.n	800f8ac <lv_draw_rect_border_corner+0x1242>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800f86c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f870:	b29a      	uxth	r2, r3
 800f872:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f876:	b29b      	uxth	r3, r3
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	b29b      	uxth	r3, r3
 800f884:	b218      	sxth	r0, r3
 800f886:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f890:	b29b      	uxth	r3, r3
 800f892:	4413      	add	r3, r2
 800f894:	b29b      	uxth	r3, r3
 800f896:	3b01      	subs	r3, #1
 800f898:	b29b      	uxth	r3, r3
 800f89a:	b219      	sxth	r1, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f8a2:	9200      	str	r2, [sp, #0]
 800f8a4:	895b      	ldrh	r3, [r3, #10]
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	f7f9 fce7 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f8ac:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d025      	beq.n	800f904 <lv_draw_rect_border_corner+0x129a>
 800f8b8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f8bc:	f003 0304 	and.w	r3, r3, #4
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d01f      	beq.n	800f904 <lv_draw_rect_border_corner+0x129a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800f8c4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	b218      	sxth	r0, r3
 800f8da:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	b219      	sxth	r1, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f8fa:	9200      	str	r2, [sp, #0]
 800f8fc:	895b      	ldrh	r3, [r3, #10]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	f7f9 fcbb 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f904:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f908:	f003 0302 	and.w	r3, r3, #2
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d025      	beq.n	800f95c <lv_draw_rect_border_corner+0x12f2>
 800f910:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f914:	f003 0308 	and.w	r3, r3, #8
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01f      	beq.n	800f95c <lv_draw_rect_border_corner+0x12f2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800f91c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f920:	b29a      	uxth	r2, r3
 800f922:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f926:	b29b      	uxth	r3, r3
 800f928:	4413      	add	r3, r2
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f930:	4413      	add	r3, r2
 800f932:	b29b      	uxth	r3, r3
 800f934:	b218      	sxth	r0, r3
 800f936:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f940:	b29b      	uxth	r3, r3
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	b29b      	uxth	r3, r3
 800f946:	3301      	adds	r3, #1
 800f948:	b29b      	uxth	r3, r3
 800f94a:	b219      	sxth	r1, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f952:	9200      	str	r2, [sp, #0]
 800f954:	895b      	ldrh	r3, [r3, #10]
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	f7f9 fc8f 	bl	800927a <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800f95c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f960:	1e5a      	subs	r2, r3, #1
 800f962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f966:	4619      	mov	r1, r3
 800f968:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800f96c:	440b      	add	r3, r1
 800f96e:	429a      	cmp	r2, r3
 800f970:	f000 80b0 	beq.w	800fad4 <lv_draw_rect_border_corner+0x146a>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f974:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f978:	f003 0301 	and.w	r3, r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d025      	beq.n	800f9cc <lv_draw_rect_border_corner+0x1362>
 800f980:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f984:	f003 0308 	and.w	r3, r3, #8
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d01f      	beq.n	800f9cc <lv_draw_rect_border_corner+0x1362>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800f98c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f990:	b29a      	uxth	r2, r3
 800f992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f996:	b29b      	uxth	r3, r3
 800f998:	4413      	add	r3, r2
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f9a0:	4413      	add	r3, r2
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	b218      	sxth	r0, r3
 800f9a6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f9aa:	b29a      	uxth	r2, r3
 800f9ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	4413      	add	r3, r2
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	b219      	sxth	r1, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f9c2:	9200      	str	r2, [sp, #0]
 800f9c4:	895b      	ldrh	r3, [r3, #10]
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	f7f9 fc57 	bl	800927a <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f9cc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d025      	beq.n	800fa24 <lv_draw_rect_border_corner+0x13ba>
 800f9d8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f9dc:	f003 0304 	and.w	r3, r3, #4
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d01f      	beq.n	800fa24 <lv_draw_rect_border_corner+0x13ba>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800f9e4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	b218      	sxth	r0, r3
 800f9fa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	4413      	add	r3, r2
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fa0e:	4413      	add	r3, r2
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	b219      	sxth	r1, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	895b      	ldrh	r3, [r3, #10]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	f7f9 fc2b 	bl	800927a <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800fa24:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa28:	f003 0302 	and.w	r3, r3, #2
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d025      	beq.n	800fa7c <lv_draw_rect_border_corner+0x1412>
 800fa30:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa34:	f003 0304 	and.w	r3, r3, #4
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d01f      	beq.n	800fa7c <lv_draw_rect_border_corner+0x1412>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800fa3c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	b218      	sxth	r0, r3
 800fa56:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	3301      	adds	r3, #1
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	b219      	sxth	r1, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800fa72:	9200      	str	r2, [sp, #0]
 800fa74:	895b      	ldrh	r3, [r3, #10]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	f7f9 fbff 	bl	800927a <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800fa7c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa80:	f003 0302 	and.w	r3, r3, #2
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d025      	beq.n	800fad4 <lv_draw_rect_border_corner+0x146a>
 800fa88:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa8c:	f003 0308 	and.w	r3, r3, #8
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d01f      	beq.n	800fad4 <lv_draw_rect_border_corner+0x146a>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800fa94:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4413      	add	r3, r2
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	3b01      	subs	r3, #1
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	b218      	sxth	r0, r3
 800faaa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800faae:	b29a      	uxth	r2, r3
 800fab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	b29a      	uxth	r2, r3
 800faba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	b219      	sxth	r1, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800faca:	9200      	str	r2, [sp, #0]
 800facc:	895b      	ldrh	r3, [r3, #10]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	f7f9 fbd3 	bl	800927a <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800fad4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800fad8:	b29b      	uxth	r3, r3
 800fada:	3301      	adds	r3, #1
 800fadc:	b29b      	uxth	r3, r3
 800fade:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800fae2:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800fae6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800faea:	429a      	cmp	r2, r3
 800faec:	f6ff ae7a 	blt.w	800f7e4 <lv_draw_rect_border_corner+0x117a>
                }
            }
        }
    }
#endif
}
 800faf0:	bf00      	nop
 800faf2:	3778      	adds	r7, #120	; 0x78
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <lv_draw_shadow>:
 * @param mask pointer to a mask area (from the design functions)
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_shadow(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b088      	sub	sp, #32
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
 800fb04:	70fb      	strb	r3, [r7, #3]
    /* If mask is in the middle of cords do not draw shadow*/
    lv_coord_t radius = style->body.radius;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	88db      	ldrh	r3, [r3, #6]
 800fb0a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t width  = lv_area_get_width(coords);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7fd f844 	bl	800cb9a <lv_area_get_width>
 800fb12:	4603      	mov	r3, r0
 800fb14:	83bb      	strh	r3, [r7, #28]
    lv_coord_t height = lv_area_get_height(coords);
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7fd f856 	bl	800cbc8 <lv_area_get_height>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	837b      	strh	r3, [r7, #26]
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 800fb20:	8bfb      	ldrh	r3, [r7, #30]
 800fb22:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fb26:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f000 fedc 	bl	80108e8 <lv_draw_cont_radius_corr>
 800fb30:	4603      	mov	r3, r0
 800fb32:	83fb      	strh	r3, [r7, #30]
    lv_area_t area_tmp;

    /*Check horizontally without radius*/
    lv_area_copy(&area_tmp, coords);
 800fb34:	f107 0310 	add.w	r3, r7, #16
 800fb38:	68f9      	ldr	r1, [r7, #12]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fd f81f 	bl	800cb7e <lv_area_copy>
    area_tmp.x1 += radius;
 800fb40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	8bfb      	ldrh	r3, [r7, #30]
 800fb48:	4413      	add	r3, r2
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	b21b      	sxth	r3, r3
 800fb4e:	823b      	strh	r3, [r7, #16]
    area_tmp.x2 -= radius;
 800fb50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	8bfb      	ldrh	r3, [r7, #30]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	b21b      	sxth	r3, r3
 800fb5e:	82bb      	strh	r3, [r7, #20]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fb60:	f107 0310 	add.w	r3, r7, #16
 800fb64:	4619      	mov	r1, r3
 800fb66:	68b8      	ldr	r0, [r7, #8]
 800fb68:	f003 fa03 	bl	8012f72 <lv_area_is_in>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d134      	bne.n	800fbdc <lv_draw_shadow+0xe4>

    /*Check vertically without radius*/
    lv_area_copy(&area_tmp, coords);
 800fb72:	f107 0310 	add.w	r3, r7, #16
 800fb76:	68f9      	ldr	r1, [r7, #12]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fd f800 	bl	800cb7e <lv_area_copy>
    area_tmp.y1 += radius;
 800fb7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	8bfb      	ldrh	r3, [r7, #30]
 800fb86:	4413      	add	r3, r2
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	b21b      	sxth	r3, r3
 800fb8c:	827b      	strh	r3, [r7, #18]
    area_tmp.y2 -= radius;
 800fb8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	8bfb      	ldrh	r3, [r7, #30]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	b21b      	sxth	r3, r3
 800fb9c:	82fb      	strh	r3, [r7, #22]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fb9e:	f107 0310 	add.w	r3, r7, #16
 800fba2:	4619      	mov	r1, r3
 800fba4:	68b8      	ldr	r0, [r7, #8]
 800fba6:	f003 f9e4 	bl	8012f72 <lv_area_is_in>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d117      	bne.n	800fbe0 <lv_draw_shadow+0xe8>

    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d106      	bne.n	800fbc6 <lv_draw_shadow+0xce>
        lv_draw_shadow_full(coords, mask, style, opa_scale);
 800fbb8:	78fb      	ldrb	r3, [r7, #3]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	68b9      	ldr	r1, [r7, #8]
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f000 f812 	bl	800fbe8 <lv_draw_shadow_full>
 800fbc4:	e00d      	b.n	800fbe2 <lv_draw_shadow+0xea>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	7d1b      	ldrb	r3, [r3, #20]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d109      	bne.n	800fbe2 <lv_draw_shadow+0xea>
        lv_draw_shadow_bottom(coords, mask, style, opa_scale);
 800fbce:	78fb      	ldrb	r3, [r7, #3]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	68b9      	ldr	r1, [r7, #8]
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 fb2e 	bl	8010236 <lv_draw_shadow_bottom>
 800fbda:	e002      	b.n	800fbe2 <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fbdc:	bf00      	nop
 800fbde:	e000      	b.n	800fbe2 <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fbe0:	bf00      	nop
    }
}
 800fbe2:	3720      	adds	r7, #32
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <lv_draw_shadow_full>:

static void lv_draw_shadow_full(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                lv_opa_t opa_scale)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b0a0      	sub	sp, #128	; 0x80
 800fbec:	af02      	add	r7, sp, #8
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	70fb      	strb	r3, [r7, #3]
     * radius means smaller average shadow opacity. The solution should be to start `line` from `-
     * swidth` and handle if the straight part is short (or zero) and the value is taken from the
     * other corner. `col` also should start from `- swidth`
     */

    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800fbf6:	f7f7 fe55 	bl	80078a4 <lv_refr_get_disp_refreshing>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f002 fd21 	bl	8012644 <lv_disp_get_antialiasing>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    lv_coord_t radius = style->body.radius;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	88db      	ldrh	r3, [r3, #6]
 800fc0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_coord_t swidth = style->body.shadow.width;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8a5b      	ldrh	r3, [r3, #18]
 800fc14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    lv_coord_t width  = lv_area_get_width(coords);
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f7fc ffbe 	bl	800cb9a <lv_area_get_width>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_coord_t height = lv_area_get_height(coords);
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f7fc ffcf 	bl	800cbc8 <lv_area_get_height>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800fc30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fc34:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800fc38:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fe53 	bl	80108e8 <lv_draw_cont_radius_corr>
 800fc42:	4603      	mov	r3, r0
 800fc44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    radius += aa;
 800fc48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fc52:	4413      	add	r3, r2
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    /*Allocate a draw buffer the buffer required to draw the shadow*/
    int16_t filter_width = 2 * swidth + 1;
 800fc5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	3301      	adds	r3, #1
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800fc6a:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fc6e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800fc72:	4413      	add	r3, r2
 800fc74:	3304      	adds	r3, #4
 800fc76:	f023 0303 	bic.w	r3, r3, #3
 800fc7a:	65bb      	str	r3, [r7, #88]	; 0x58
    curve_x_size *= sizeof(lv_coord_t);
 800fc7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800fc82:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fc86:	3303      	adds	r3, #3
 800fc88:	f023 0303 	bic.w	r3, r3, #3
 800fc8c:	657b      	str	r3, [r7, #84]	; 0x54
    line_1d_blur_size *= sizeof(uint32_t);
 800fc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t line_2d_blur_size = ((radius + swidth + 1) + 3) & ~0x3;     /*Round to 4*/
 800fc94:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fc98:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800fc9c:	4413      	add	r3, r2
 800fc9e:	3304      	adds	r3, #4
 800fca0:	f023 0303 	bic.w	r3, r3, #3
 800fca4:	653b      	str	r3, [r7, #80]	; 0x50
    line_2d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800fca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcaa:	441a      	add	r2, r3
 800fcac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcae:	4413      	add	r3, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f8 fd69 	bl	8008788 <lv_draw_get_buf>
 800fcb6:	64f8      	str	r0, [r7, #76]	; 0x4c

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 800fcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcba:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 800fcbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcc0:	4413      	add	r3, r2
 800fcc2:	647b      	str	r3, [r7, #68]	; 0x44
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800fcc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcc8:	4413      	add	r3, r2
 800fcca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fccc:	4413      	add	r3, r2
 800fcce:	643b      	str	r3, [r7, #64]	; 0x40

    memset(curve_x, 0, curve_x_size);
 800fcd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fcd6:	f017 fa6e 	bl	80271b6 <memset>
    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 800fcda:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fcde:	f107 0136 	add.w	r1, r7, #54	; 0x36
 800fce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fce6:	4618      	mov	r0, r3
 800fce8:	f003 f973 	bl	8012fd2 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800fcec:	e017      	b.n	800fd1e <lv_draw_shadow_full+0x136>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800fcee:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800fcfc:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800fcfe:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd06:	4413      	add	r3, r2
 800fd08:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800fd0c:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 800fd0e:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800fd12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd16:	4611      	mov	r1, r2
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f003 f989 	bl	8013030 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800fd1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd22:	4618      	mov	r0, r3
 800fd24:	f003 f96f 	bl	8013006 <lv_circ_cont>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1df      	bne.n	800fcee <lv_draw_shadow_full+0x106>
    }
    int16_t line;
    /*1D Blur horizontally*/
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800fd2e:	78fb      	ldrb	r3, [r7, #3]
 800fd30:	2bff      	cmp	r3, #255	; 0xff
 800fd32:	d102      	bne.n	800fd3a <lv_draw_shadow_full+0x152>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	7a1b      	ldrb	r3, [r3, #8]
 800fd38:	e00a      	b.n	800fd50 <lv_draw_shadow_full+0x168>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	7a1b      	ldrb	r3, [r3, #8]
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	fb12 f303 	smulbb	r3, r2, r3
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	0a1b      	lsrs	r3, r3, #8
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for(line = 0; line < filter_width; line++) {
 800fd54:	2300      	movs	r3, #0
 800fd56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fd5a:	e021      	b.n	800fda0 <lv_draw_shadow_full+0x1b8>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800fd5c:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800fd60:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	461a      	mov	r2, r3
 800fd68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd6c:	fb03 f302 	mul.w	r3, r3, r2
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	021a      	lsls	r2, r3, #8
                             (filter_width * filter_width);
 800fd74:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fd78:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 800fd7c:	fb01 f303 	mul.w	r3, r1, r3
 800fd80:	4618      	mov	r0, r3
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800fd82:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd8a:	440b      	add	r3, r1
 800fd8c:	fbb2 f2f0 	udiv	r2, r2, r0
 800fd90:	601a      	str	r2, [r3, #0]
    for(line = 0; line < filter_width; line++) {
 800fd92:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	3301      	adds	r3, #1
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fda0:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fda4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	dbd7      	blt.n	800fd5c <lv_draw_shadow_full+0x174>
    lv_point_t point_lb;
    lv_point_t ofs_rb;
    lv_point_t ofs_rt;
    lv_point_t ofs_lb;
    lv_point_t ofs_lt;
    ofs_rb.x = coords->x2 - radius - aa;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	1ad3      	subs	r3, r2, r3
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	b21b      	sxth	r3, r3
 800fdc8:	843b      	strh	r3, [r7, #32]
    ofs_rb.y = coords->y2 - radius - aa;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	b21b      	sxth	r3, r3
 800fde6:	847b      	strh	r3, [r7, #34]	; 0x22

    ofs_rt.x = coords->x2 - radius - aa;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	b21b      	sxth	r3, r3
 800fe04:	83bb      	strh	r3, [r7, #28]
    ofs_rt.y = coords->y1 + radius + aa;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe12:	4413      	add	r3, r2
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4413      	add	r3, r2
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	b21b      	sxth	r3, r3
 800fe22:	83fb      	strh	r3, [r7, #30]

    ofs_lb.x = coords->x1 + radius + aa;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe30:	4413      	add	r3, r2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	b21b      	sxth	r3, r3
 800fe40:	833b      	strh	r3, [r7, #24]
    ofs_lb.y = coords->y2 - radius - aa;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	b21b      	sxth	r3, r3
 800fe5e:	837b      	strh	r3, [r7, #26]

    ofs_lt.x = coords->x1 + radius + aa;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe6c:	4413      	add	r3, r2
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	4413      	add	r3, r2
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	b21b      	sxth	r3, r3
 800fe7c:	82bb      	strh	r3, [r7, #20]
    ofs_lt.y = coords->y1 + radius + aa;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe8a:	4413      	add	r3, r2
 800fe8c:	b29a      	uxth	r2, r3
 800fe8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	4413      	add	r3, r2
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	b21b      	sxth	r3, r3
 800fe9a:	82fb      	strh	r3, [r7, #22]
    bool line_ready;
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fea2:	e1ba      	b.n	801021a <lv_draw_shadow_full+0x632>
        line_ready = false;
 800fea4:	2300      	movs	r3, #0
 800fea6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800feaa:	2300      	movs	r3, #0
 800feac:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800feb0:	e098      	b.n	800ffe4 <lv_draw_shadow_full+0x3fc>
                                                         shadow pixel (radius + swidth))*/

            /*Sum the opacities from the lines above and below this 'row'*/
            int16_t line_rel;
            uint32_t px_opa_sum = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800feb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800feba:	425b      	negs	r3, r3
 800febc:	b29b      	uxth	r3, r3
 800febe:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800fec2:	e06e      	b.n	800ffa2 <lv_draw_shadow_full+0x3ba>
                /*Get the relative x position of the 'line_rel' to 'line'*/
                int16_t col_rel;
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800fec4:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fec8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800fecc:	4413      	add	r3, r2
 800fece:	2b00      	cmp	r3, #0
 800fed0:	da12      	bge.n	800fef8 <lv_draw_shadow_full+0x310>
                    col_rel = radius - curve_x[line] - col;
 800fed2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800fed6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fede:	440b      	add	r3, r1
 800fee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29a      	uxth	r2, r3
 800feea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800feee:	1ad3      	subs	r3, r2, r3
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800fef6:	e023      	b.n	800ff40 <lv_draw_shadow_full+0x358>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800fef8:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fefc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ff00:	441a      	add	r2, r3
 800ff02:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800ff06:	429a      	cmp	r2, r3
 800ff08:	dc52      	bgt.n	800ffb0 <lv_draw_shadow_full+0x3c8>
                    break;
                } else { /*Blur from the curve*/
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800ff0a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800ff0e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ff12:	4413      	add	r3, r2
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff18:	4413      	add	r3, r2
 800ff1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff28:	440b      	add	r3, r1
 800ff2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
                }

                /*Add the value of the 1D blur on 'col_rel' position*/
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800ff40:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800ff44:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff48:	425b      	negs	r3, r3
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	da0a      	bge.n	800ff64 <lv_draw_shadow_full+0x37c>
                    if(line_rel == -swidth)
 800ff4e:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800ff52:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff56:	425b      	negs	r3, r3
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d12b      	bne.n	800ffb4 <lv_draw_shadow_full+0x3cc>
                        line_ready = true; /*If no data even on the very first line then it wont't
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                                              be anything else in this line*/
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800ff62:	e027      	b.n	800ffb4 <lv_draw_shadow_full+0x3cc>
                } else if(col_rel > swidth)
 800ff64:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800ff68:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	dd05      	ble.n	800ff7c <lv_draw_shadow_full+0x394>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800ff70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff76:	4413      	add	r3, r2
 800ff78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff7a:	e00b      	b.n	800ff94 <lv_draw_shadow_full+0x3ac>
                else
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800ff7c:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ff80:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff8a:	4413      	add	r3, r2
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff90:	4413      	add	r3, r2
 800ff92:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800ff94:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800ffa2:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800ffa6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	dd8a      	ble.n	800fec4 <lv_draw_shadow_full+0x2dc>
 800ffae:	e002      	b.n	800ffb6 <lv_draw_shadow_full+0x3ce>
                    break;
 800ffb0:	bf00      	nop
 800ffb2:	e000      	b.n	800ffb6 <lv_draw_shadow_full+0x3ce>
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800ffb4:	bf00      	nop
            }

            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800ffb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb8:	0a19      	lsrs	r1, r3, #8
 800ffba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffc0:	4413      	add	r3, r2
 800ffc2:	b2ca      	uxtb	r2, r1
 800ffc4:	701a      	strb	r2, [r3, #0]
            if(line_ready) {
 800ffc6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d005      	beq.n	800ffda <lv_draw_shadow_full+0x3f2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800ffce:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                break;
 800ffd8:	e00e      	b.n	800fff8 <lv_draw_shadow_full+0x410>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800ffda:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffde:	3301      	adds	r3, #1
 800ffe0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ffe4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ffe8:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 800ffec:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800fff0:	440b      	add	r3, r1
 800fff2:	429a      	cmp	r2, r3
 800fff4:	f77f af5d 	ble.w	800feb2 <lv_draw_shadow_full+0x2ca>
            }
        }

        /*Flush the line*/
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800fff8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010000:	4413      	add	r3, r2
 8010002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010006:	b29a      	uxth	r2, r3
 8010008:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801000c:	b29b      	uxth	r3, r3
 801000e:	4413      	add	r3, r2
 8010010:	b29b      	uxth	r3, r3
 8010012:	3301      	adds	r3, #1
 8010014:	b29b      	uxth	r3, r3
 8010016:	b21b      	sxth	r3, r3
 8010018:	863b      	strh	r3, [r7, #48]	; 0x30
        point_rt.y = ofs_rt.y - line;
 801001a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801001e:	b29a      	uxth	r2, r3
 8010020:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	b29b      	uxth	r3, r3
 8010028:	b21b      	sxth	r3, r3
 801002a:	867b      	strh	r3, [r7, #50]	; 0x32

        point_rb.x = curve_x[line] + ofs_rb.x + 1;
 801002c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010030:	005b      	lsls	r3, r3, #1
 8010032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010034:	4413      	add	r3, r2
 8010036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801003a:	b29a      	uxth	r2, r3
 801003c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010040:	b29b      	uxth	r3, r3
 8010042:	4413      	add	r3, r2
 8010044:	b29b      	uxth	r3, r3
 8010046:	3301      	adds	r3, #1
 8010048:	b29b      	uxth	r3, r3
 801004a:	b21b      	sxth	r3, r3
 801004c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        point_rb.y = ofs_rb.y + line;
 801004e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010052:	b29a      	uxth	r2, r3
 8010054:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010058:	4413      	add	r3, r2
 801005a:	b29b      	uxth	r3, r3
 801005c:	b21b      	sxth	r3, r3
 801005e:	85fb      	strh	r3, [r7, #46]	; 0x2e

        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8010060:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010064:	b29a      	uxth	r2, r3
 8010066:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801006e:	440b      	add	r3, r1
 8010070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010074:	b29b      	uxth	r3, r3
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29b      	uxth	r3, r3
 801007a:	3b01      	subs	r3, #1
 801007c:	b29b      	uxth	r3, r3
 801007e:	b21b      	sxth	r3, r3
 8010080:	853b      	strh	r3, [r7, #40]	; 0x28
        point_lt.y = ofs_lt.y - line;
 8010082:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010086:	b29a      	uxth	r2, r3
 8010088:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	b29b      	uxth	r3, r3
 8010090:	b21b      	sxth	r3, r3
 8010092:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_lb.x = ofs_lb.x - curve_x[line] - 1;
 8010094:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010098:	b29a      	uxth	r2, r3
 801009a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100a2:	440b      	add	r3, r1
 80100a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	3b01      	subs	r3, #1
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	b21b      	sxth	r3, r3
 80100b4:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_lb.y = ofs_lb.y + line;
 80100b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80100c0:	4413      	add	r3, r2
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	b21b      	sxth	r3, r3
 80100c6:	84fb      	strh	r3, [r7, #38]	; 0x26

        uint16_t d;
        for(d = 1; d < col; d++) {
 80100c8:	2301      	movs	r3, #1
 80100ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80100ce:	e08c      	b.n	80101ea <lv_draw_shadow_full+0x602>

            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 80100d0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80100d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80100d8:	429a      	cmp	r2, r3
 80100da:	da14      	bge.n	8010106 <lv_draw_shadow_full+0x51e>
 80100dc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80100e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	da0e      	bge.n	8010106 <lv_draw_shadow_full+0x51e>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80100e8:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 80100ec:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80100f0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80100f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100f6:	4413      	add	r3, r2
 80100f8:	781a      	ldrb	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	9200      	str	r2, [sp, #0]
 80100fe:	8a1b      	ldrh	r3, [r3, #16]
 8010100:	68ba      	ldr	r2, [r7, #8]
 8010102:	f7f9 f8ba 	bl	800927a <lv_draw_px>
            }

            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8010106:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 801010a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801010e:	429a      	cmp	r2, r3
 8010110:	da14      	bge.n	801013c <lv_draw_shadow_full+0x554>
 8010112:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010116:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801011a:	429a      	cmp	r2, r3
 801011c:	dd0e      	ble.n	801013c <lv_draw_shadow_full+0x554>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801011e:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8010122:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8010126:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801012a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801012c:	4413      	add	r3, r2
 801012e:	781a      	ldrb	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	9200      	str	r2, [sp, #0]
 8010134:	8a1b      	ldrh	r3, [r3, #16]
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	f7f9 f89f 	bl	800927a <lv_draw_px>
            }

            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 801013c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8010140:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010144:	429a      	cmp	r2, r3
 8010146:	dd14      	ble.n	8010172 <lv_draw_shadow_full+0x58a>
 8010148:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801014c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010150:	429a      	cmp	r2, r3
 8010152:	da0e      	bge.n	8010172 <lv_draw_shadow_full+0x58a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8010154:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 8010158:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 801015c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010162:	4413      	add	r3, r2
 8010164:	781a      	ldrb	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	9200      	str	r2, [sp, #0]
 801016a:	8a1b      	ldrh	r3, [r3, #16]
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	f7f9 f884 	bl	800927a <lv_draw_px>
            }

            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8010172:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8010176:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801017a:	429a      	cmp	r2, r3
 801017c:	dd14      	ble.n	80101a8 <lv_draw_shadow_full+0x5c0>
 801017e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8010182:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010186:	429a      	cmp	r2, r3
 8010188:	dd0e      	ble.n	80101a8 <lv_draw_shadow_full+0x5c0>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801018a:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 801018e:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8010192:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010198:	4413      	add	r3, r2
 801019a:	781a      	ldrb	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	9200      	str	r2, [sp, #0]
 80101a0:	8a1b      	ldrh	r3, [r3, #16]
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	f7f9 f869 	bl	800927a <lv_draw_px>
            }

            point_rb.x++;
 80101a8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	3301      	adds	r3, #1
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	b21b      	sxth	r3, r3
 80101b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
            point_lb.x--;
 80101b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	3b01      	subs	r3, #1
 80101be:	b29b      	uxth	r3, r3
 80101c0:	b21b      	sxth	r3, r3
 80101c2:	84bb      	strh	r3, [r7, #36]	; 0x24

            point_rt.x++;
 80101c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	3301      	adds	r3, #1
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	b21b      	sxth	r3, r3
 80101d0:	863b      	strh	r3, [r7, #48]	; 0x30
            point_lt.x--;
 80101d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	3b01      	subs	r3, #1
 80101da:	b29b      	uxth	r3, r3
 80101dc:	b21b      	sxth	r3, r3
 80101de:	853b      	strh	r3, [r7, #40]	; 0x28
        for(d = 1; d < col; d++) {
 80101e0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80101e4:	3301      	adds	r3, #1
 80101e6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80101ea:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80101ee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80101f2:	429a      	cmp	r2, r3
 80101f4:	f4ff af6c 	bcc.w	80100d0 <lv_draw_shadow_full+0x4e8>
        }

        /* Put the first line to the edges too.
         * It is not correct because blur should be done below the corner too
         * but is is simple, fast and gives a good enough result*/
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 80101f8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d105      	bne.n	801020c <lv_draw_shadow_full+0x624>
 8010200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	68b9      	ldr	r1, [r7, #8]
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f000 fa17 	bl	801063a <lv_draw_shadow_full_straight>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 801020c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010210:	b29b      	uxth	r3, r3
 8010212:	3301      	adds	r3, #1
 8010214:	b29b      	uxth	r3, r3
 8010216:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 801021a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 801021e:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8010222:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8010226:	440b      	add	r3, r1
 8010228:	429a      	cmp	r2, r3
 801022a:	f77f ae3b 	ble.w	800fea4 <lv_draw_shadow_full+0x2bc>
    }
}
 801022e:	bf00      	nop
 8010230:	3778      	adds	r7, #120	; 0x78
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <lv_draw_shadow_bottom>:

static void lv_draw_shadow_bottom(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b09a      	sub	sp, #104	; 0x68
 801023a:	af02      	add	r7, sp, #8
 801023c:	60f8      	str	r0, [r7, #12]
 801023e:	60b9      	str	r1, [r7, #8]
 8010240:	607a      	str	r2, [r7, #4]
 8010242:	70fb      	strb	r3, [r7, #3]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010244:	f7f7 fb2e 	bl	80078a4 <lv_refr_get_disp_refreshing>
 8010248:	4603      	mov	r3, r0
 801024a:	4618      	mov	r0, r3
 801024c:	f002 f9fa 	bl	8012644 <lv_disp_get_antialiasing>
 8010250:	4603      	mov	r3, r0
 8010252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_coord_t radius = style->body.radius;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	88db      	ldrh	r3, [r3, #6]
 801025a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t swidth = style->body.shadow.width;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	8a5b      	ldrh	r3, [r3, #18]
 8010262:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t width  = lv_area_get_width(coords);
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7fc fc97 	bl	800cb9a <lv_area_get_width>
 801026c:	4603      	mov	r3, r0
 801026e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t height = lv_area_get_height(coords);
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f7fc fca8 	bl	800cbc8 <lv_area_get_height>
 8010278:	4603      	mov	r3, r0
 801027a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 801027e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010282:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8010286:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 801028a:	4618      	mov	r0, r3
 801028c:	f000 fb2c 	bl	80108e8 <lv_draw_cont_radius_corr>
 8010290:	4603      	mov	r3, r0
 8010292:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8010296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801029a:	b29b      	uxth	r3, r3
 801029c:	461a      	mov	r2, r3
 801029e:	0052      	lsls	r2, r2, #1
 80102a0:	4413      	add	r3, r2
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80102a8:	4413      	add	r3, r2
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    swidth += aa;
 80102b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80102ba:	4413      	add	r3, r2
 80102bc:	b29b      	uxth	r3, r3
 80102be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 80102c2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80102c6:	3304      	adds	r3, #4
 80102c8:	f023 0303 	bic.w	r3, r3, #3
 80102cc:	64bb      	str	r3, [r7, #72]	; 0x48
    curve_x_size *= sizeof(lv_coord_t);
 80102ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 80102d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	3303      	adds	r3, #3
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	f023 0303 	bic.w	r3, r3, #3
 80102e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    line_1d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80102e6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80102ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102ec:	4413      	add	r3, r2
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7f8 fa4a 	bl	8008788 <lv_draw_get_buf>
 80102f4:	6438      	str	r0, [r7, #64]	; 0x40

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 80102f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 80102fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102fe:	4413      	add	r3, r2
 8010300:	63bb      	str	r3, [r7, #56]	; 0x38

    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 8010302:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8010306:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 801030a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801030e:	4618      	mov	r0, r3
 8010310:	f002 fe5f 	bl	8012fd2 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8010314:	e017      	b.n	8010346 <lv_draw_shadow_bottom+0x110>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8010316:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801031e:	4413      	add	r3, r2
 8010320:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8010324:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8010326:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801032e:	4413      	add	r3, r2
 8010330:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8010334:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 8010336:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801033a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801033e:	4611      	mov	r1, r2
 8010340:	4618      	mov	r0, r3
 8010342:	f002 fe75 	bl	8013030 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 8010346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801034a:	4618      	mov	r0, r3
 801034c:	f002 fe5b 	bl	8013006 <lv_circ_cont>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1df      	bne.n	8010316 <lv_draw_shadow_bottom+0xe0>
    }

    int16_t col;

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	2bff      	cmp	r3, #255	; 0xff
 801035a:	d102      	bne.n	8010362 <lv_draw_shadow_bottom+0x12c>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7a1b      	ldrb	r3, [r3, #8]
 8010360:	e00a      	b.n	8010378 <lv_draw_shadow_bottom+0x142>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	7a1b      	ldrb	r3, [r3, #8]
 8010366:	b29a      	uxth	r2, r3
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	b29b      	uxth	r3, r3
 801036c:	fb12 f303 	smulbb	r3, r2, r3
 8010370:	b29b      	uxth	r3, r3
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	b29b      	uxth	r3, r3
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for(col = 0; col < swidth; col++) {
 801037c:	2300      	movs	r3, #0
 801037e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8010382:	e01b      	b.n	80103bc <lv_draw_shadow_bottom+0x186>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 8010384:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8010388:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	461a      	mov	r2, r3
 8010390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010394:	fb03 f302 	mul.w	r3, r3, r2
 8010398:	085a      	lsrs	r2, r3, #1
 801039a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801039e:	fbb2 f1f3 	udiv	r1, r2, r3
 80103a2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80103a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103a8:	4413      	add	r3, r2
 80103aa:	b2ca      	uxtb	r2, r1
 80103ac:	701a      	strb	r2, [r3, #0]
    for(col = 0; col < swidth; col++) {
 80103ae:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	3301      	adds	r3, #1
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80103bc:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80103c0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80103c4:	429a      	cmp	r2, r3
 80103c6:	dbdd      	blt.n	8010384 <lv_draw_shadow_bottom+0x14e>
    lv_point_t point_r;
    lv_area_t area_mid;
    lv_point_t ofs_l;
    lv_point_t ofs_r;

    ofs_l.x = coords->x1 + radius;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80103d4:	4413      	add	r3, r2
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	b21b      	sxth	r3, r3
 80103da:	833b      	strh	r3, [r7, #24]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	3301      	adds	r3, #1
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	b21b      	sxth	r3, r3
 80103fc:	837b      	strh	r3, [r7, #26]

    ofs_r.x = coords->x2 - radius;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010404:	b29a      	uxth	r2, r3
 8010406:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	b29b      	uxth	r3, r3
 801040e:	b21b      	sxth	r3, r3
 8010410:	82bb      	strh	r3, [r7, #20]
    ofs_r.y = coords->y2 - radius + 1 - aa;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010418:	b29a      	uxth	r2, r3
 801041a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	b29a      	uxth	r2, r3
 8010422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010426:	b29b      	uxth	r3, r3
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	b29b      	uxth	r3, r3
 801042c:	3301      	adds	r3, #1
 801042e:	b29b      	uxth	r3, r3
 8010430:	b21b      	sxth	r3, r3
 8010432:	82fb      	strh	r3, [r7, #22]

    for(col = 0; col <= radius; col++) {
 8010434:	2300      	movs	r3, #0
 8010436:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801043a:	e0b0      	b.n	801059e <lv_draw_shadow_bottom+0x368>
        point_l.x = ofs_l.x - col;
 801043c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010440:	b29a      	uxth	r2, r3
 8010442:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	b29b      	uxth	r3, r3
 801044a:	b21b      	sxth	r3, r3
 801044c:	853b      	strh	r3, [r7, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 801044e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010452:	b29a      	uxth	r2, r3
 8010454:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801045c:	440b      	add	r3, r1
 801045e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010462:	b29b      	uxth	r3, r3
 8010464:	4413      	add	r3, r2
 8010466:	b29b      	uxth	r3, r3
 8010468:	b21b      	sxth	r3, r3
 801046a:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_r.x = ofs_r.x + col;
 801046c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010470:	b29a      	uxth	r2, r3
 8010472:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8010476:	4413      	add	r3, r2
 8010478:	b29b      	uxth	r3, r3
 801047a:	b21b      	sxth	r3, r3
 801047c:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_r.y = ofs_r.y + curve_x[col];
 801047e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010482:	b29a      	uxth	r2, r3
 8010484:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010488:	005b      	lsls	r3, r3, #1
 801048a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801048c:	440b      	add	r3, r1
 801048e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010492:	b29b      	uxth	r3, r3
 8010494:	4413      	add	r3, r2
 8010496:	b29b      	uxth	r3, r3
 8010498:	b21b      	sxth	r3, r3
 801049a:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_opa_t px_opa;
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 801049c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d016      	beq.n	80104d2 <lv_draw_shadow_bottom+0x29c>
 80104a4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80104a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104ac:	3b01      	subs	r3, #1
 80104ae:	005b      	lsls	r3, r3, #1
 80104b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104b2:	4413      	add	r3, r2
 80104b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104c2:	440b      	add	r3, r1
 80104c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	b21b      	sxth	r3, r3
 80104d0:	e000      	b.n	80104d4 <lv_draw_shadow_bottom+0x29e>
 80104d2:	2300      	movs	r3, #0
 80104d4:	86bb      	strh	r3, [r7, #52]	; 0x34
        uint16_t d;
        for(d = 0; d < swidth; d++) {
 80104d6:	2300      	movs	r3, #0
 80104d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80104dc:	e052      	b.n	8010584 <lv_draw_shadow_bottom+0x34e>
            /*When stepping a pixel in y calculate the average with the pixel from the prev. column
             * to make a blur */
            if(diff == 0) {
 80104de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d107      	bne.n	80104f6 <lv_draw_shadow_bottom+0x2c0>
                px_opa = line_1d_blur[d];
 80104e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80104ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104ec:	4413      	add	r3, r2
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80104f4:	e015      	b.n	8010522 <lv_draw_shadow_bottom+0x2ec>
            } else {
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 80104f6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80104fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104fc:	4413      	add	r3, r2
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	b29a      	uxth	r2, r3
 8010502:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8010506:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801050a:	1acb      	subs	r3, r1, r3
 801050c:	4619      	mov	r1, r3
 801050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010510:	440b      	add	r3, r1
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	b29b      	uxth	r3, r3
 8010516:	4413      	add	r3, r2
 8010518:	b29b      	uxth	r3, r3
 801051a:	085b      	lsrs	r3, r3, #1
 801051c:	b29b      	uxth	r3, r3
 801051e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            }
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8010522:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8010526:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8010530:	9200      	str	r2, [sp, #0]
 8010532:	8a1b      	ldrh	r3, [r3, #16]
 8010534:	68ba      	ldr	r2, [r7, #8]
 8010536:	f7f8 fea0 	bl	800927a <lv_draw_px>
            point_l.y++;
 801053a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801053e:	b29b      	uxth	r3, r3
 8010540:	3301      	adds	r3, #1
 8010542:	b29b      	uxth	r3, r3
 8010544:	b21b      	sxth	r3, r3
 8010546:	857b      	strh	r3, [r7, #42]	; 0x2a

            /*Don't overdraw the pixel on the middle*/
            if(point_r.x > ofs_l.x) {
 8010548:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 801054c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010550:	429a      	cmp	r2, r3
 8010552:	dd0b      	ble.n	801056c <lv_draw_shadow_bottom+0x336>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8010554:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8010558:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8010562:	9200      	str	r2, [sp, #0]
 8010564:	8a1b      	ldrh	r3, [r3, #16]
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	f7f8 fe87 	bl	800927a <lv_draw_px>
            }
            point_r.y++;
 801056c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010570:	b29b      	uxth	r3, r3
 8010572:	3301      	adds	r3, #1
 8010574:	b29b      	uxth	r3, r3
 8010576:	b21b      	sxth	r3, r3
 8010578:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(d = 0; d < swidth; d++) {
 801057a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801057e:	3301      	adds	r3, #1
 8010580:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010584:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8010588:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801058c:	429a      	cmp	r2, r3
 801058e:	dba6      	blt.n	80104de <lv_draw_shadow_bottom+0x2a8>
    for(col = 0; col <= radius; col++) {
 8010590:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010594:	b29b      	uxth	r3, r3
 8010596:	3301      	adds	r3, #1
 8010598:	b29b      	uxth	r3, r3
 801059a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801059e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80105a2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80105a6:	429a      	cmp	r2, r3
 80105a8:	f77f af48 	ble.w	801043c <lv_draw_shadow_bottom+0x206>
        }
    }

    area_mid.x1 = ofs_l.x + 1;
 80105ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	3301      	adds	r3, #1
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	b21b      	sxth	r3, r3
 80105b8:	83bb      	strh	r3, [r7, #28]
    area_mid.y1 = ofs_l.y + radius;
 80105ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80105be:	b29a      	uxth	r2, r3
 80105c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80105c4:	4413      	add	r3, r2
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	b21b      	sxth	r3, r3
 80105ca:	83fb      	strh	r3, [r7, #30]
    area_mid.x2 = ofs_r.x - 1;
 80105cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	3b01      	subs	r3, #1
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	b21b      	sxth	r3, r3
 80105d8:	843b      	strh	r3, [r7, #32]
    area_mid.y2 = area_mid.y1;
 80105da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80105de:	847b      	strh	r3, [r7, #34]	; 0x22

    uint16_t d;
    for(d = 0; d < swidth; d++) {
 80105e0:	2300      	movs	r3, #0
 80105e2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80105e6:	e01e      	b.n	8010626 <lv_draw_shadow_bottom+0x3f0>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 80105e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80105ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ee:	4413      	add	r3, r2
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	f107 001c 	add.w	r0, r7, #28
 80105f8:	8a12      	ldrh	r2, [r2, #16]
 80105fa:	68b9      	ldr	r1, [r7, #8]
 80105fc:	f7f8 fed5 	bl	80093aa <lv_draw_fill>
        area_mid.y1++;
 8010600:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010604:	b29b      	uxth	r3, r3
 8010606:	3301      	adds	r3, #1
 8010608:	b29b      	uxth	r3, r3
 801060a:	b21b      	sxth	r3, r3
 801060c:	83fb      	strh	r3, [r7, #30]
        area_mid.y2++;
 801060e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010612:	b29b      	uxth	r3, r3
 8010614:	3301      	adds	r3, #1
 8010616:	b29b      	uxth	r3, r3
 8010618:	b21b      	sxth	r3, r3
 801061a:	847b      	strh	r3, [r7, #34]	; 0x22
    for(d = 0; d < swidth; d++) {
 801061c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8010620:	3301      	adds	r3, #1
 8010622:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010626:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801062a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801062e:	429a      	cmp	r2, r3
 8010630:	dbda      	blt.n	80105e8 <lv_draw_shadow_bottom+0x3b2>
    }
}
 8010632:	bf00      	nop
 8010634:	3760      	adds	r7, #96	; 0x60
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <lv_draw_shadow_full_straight>:

static void lv_draw_shadow_full_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         const lv_opa_t * map)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b090      	sub	sp, #64	; 0x40
 801063e:	af00      	add	r7, sp, #0
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	60b9      	str	r1, [r7, #8]
 8010644:	607a      	str	r2, [r7, #4]
 8010646:	603b      	str	r3, [r7, #0]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010648:	f7f7 f92c 	bl	80078a4 <lv_refr_get_disp_refreshing>
 801064c:	4603      	mov	r3, r0
 801064e:	4618      	mov	r0, r3
 8010650:	f001 fff8 	bl	8012644 <lv_disp_get_antialiasing>
 8010654:	4603      	mov	r3, r0
 8010656:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    lv_coord_t radius = style->body.radius;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	88db      	ldrh	r3, [r3, #6]
 801065e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t swidth = style->body.shadow.width;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	8a5b      	ldrh	r3, [r3, #18]
 8010664:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t width  = lv_area_get_width(coords);
 8010666:	68f8      	ldr	r0, [r7, #12]
 8010668:	f7fc fa97 	bl	800cb9a <lv_area_get_width>
 801066c:	4603      	mov	r3, r0
 801066e:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_coord_t height = lv_area_get_height(coords);
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f7fc faa9 	bl	800cbc8 <lv_area_get_height>
 8010676:	4603      	mov	r3, r0
 8010678:	86bb      	strh	r3, [r7, #52]	; 0x34

    radius = lv_draw_cont_radius_corr(radius, width, height);
 801067a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801067c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010680:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8010684:	4618      	mov	r0, r3
 8010686:	f000 f92f 	bl	80108e8 <lv_draw_cont_radius_corr>
 801068a:	4603      	mov	r3, r0
 801068c:	877b      	strh	r3, [r7, #58]	; 0x3a
    radius += aa;
 801068e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010692:	b29a      	uxth	r2, r3
 8010694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010696:	4413      	add	r3, r2
 8010698:	b29b      	uxth	r3, r3
 801069a:	877b      	strh	r3, [r7, #58]	; 0x3a

    lv_area_t right_area;
    right_area.x1 = coords->x2 + 1 - aa;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	3301      	adds	r3, #1
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	b21b      	sxth	r3, r3
 80106b4:	853b      	strh	r3, [r7, #40]	; 0x28
    right_area.y1 = coords->y1 + radius + aa;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80106bc:	b29a      	uxth	r2, r3
 80106be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106c0:	4413      	add	r3, r2
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	4413      	add	r3, r2
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	b21b      	sxth	r3, r3
 80106d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    right_area.x2 = right_area.x1;
 80106d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80106d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    right_area.y2 = coords->y2 - radius - aa;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80106de:	b29a      	uxth	r2, r3
 80106e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	b21b      	sxth	r3, r3
 80106f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    lv_area_t left_area;
    left_area.x1 = coords->x1 - 1 + aa;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010700:	b29b      	uxth	r3, r3
 8010702:	4413      	add	r3, r2
 8010704:	b29b      	uxth	r3, r3
 8010706:	3b01      	subs	r3, #1
 8010708:	b29b      	uxth	r3, r3
 801070a:	b21b      	sxth	r3, r3
 801070c:	843b      	strh	r3, [r7, #32]
    left_area.y1 = coords->y1 + radius + aa;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010714:	b29a      	uxth	r2, r3
 8010716:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010718:	4413      	add	r3, r2
 801071a:	b29a      	uxth	r2, r3
 801071c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010720:	b29b      	uxth	r3, r3
 8010722:	4413      	add	r3, r2
 8010724:	b29b      	uxth	r3, r3
 8010726:	b21b      	sxth	r3, r3
 8010728:	847b      	strh	r3, [r7, #34]	; 0x22
    left_area.x2 = left_area.x1;
 801072a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801072e:	84bb      	strh	r3, [r7, #36]	; 0x24
    left_area.y2 = coords->y2 - radius - aa;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010736:	b29a      	uxth	r2, r3
 8010738:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	b29a      	uxth	r2, r3
 801073e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010742:	b29b      	uxth	r3, r3
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	b21b      	sxth	r3, r3
 801074a:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t top_area;
    top_area.x1 = coords->x1 + radius + aa;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010752:	b29a      	uxth	r2, r3
 8010754:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010756:	4413      	add	r3, r2
 8010758:	b29a      	uxth	r2, r3
 801075a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801075e:	b29b      	uxth	r3, r3
 8010760:	4413      	add	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	b21b      	sxth	r3, r3
 8010766:	833b      	strh	r3, [r7, #24]
    top_area.y1 = coords->y1 - 1 + aa;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801076e:	b29a      	uxth	r2, r3
 8010770:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010774:	b29b      	uxth	r3, r3
 8010776:	4413      	add	r3, r2
 8010778:	b29b      	uxth	r3, r3
 801077a:	3b01      	subs	r3, #1
 801077c:	b29b      	uxth	r3, r3
 801077e:	b21b      	sxth	r3, r3
 8010780:	837b      	strh	r3, [r7, #26]
    top_area.x2 = coords->x2 - radius - aa;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010788:	b29a      	uxth	r2, r3
 801078a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	b29a      	uxth	r2, r3
 8010790:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010794:	b29b      	uxth	r3, r3
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	b29b      	uxth	r3, r3
 801079a:	b21b      	sxth	r3, r3
 801079c:	83bb      	strh	r3, [r7, #28]
    top_area.y2 = top_area.y1;
 801079e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80107a2:	83fb      	strh	r3, [r7, #30]

    lv_area_t bottom_area;
    bottom_area.x1 = coords->x1 + radius + aa;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107ae:	4413      	add	r3, r2
 80107b0:	b29a      	uxth	r2, r3
 80107b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4413      	add	r3, r2
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	b21b      	sxth	r3, r3
 80107be:	823b      	strh	r3, [r7, #16]
    bottom_area.y1 = coords->y2 + 1 - aa;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	3301      	adds	r3, #1
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	b21b      	sxth	r3, r3
 80107d8:	827b      	strh	r3, [r7, #18]
    bottom_area.x2 = coords->x2 - radius - aa;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	b21b      	sxth	r3, r3
 80107f4:	82bb      	strh	r3, [r7, #20]
    bottom_area.y2 = bottom_area.y1;
 80107f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107fa:	82fb      	strh	r3, [r7, #22]

    lv_opa_t opa_act;
    int16_t d;
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80107fc:	2301      	movs	r3, #1
 80107fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010800:	e068      	b.n	80108d4 <lv_draw_shadow_full_straight+0x29a>
        opa_act = map[d];
 8010802:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8010806:	683a      	ldr	r2, [r7, #0]
 8010808:	4413      	add	r3, r2
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8010810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801081a:	8a12      	ldrh	r2, [r2, #16]
 801081c:	68b9      	ldr	r1, [r7, #8]
 801081e:	f7f8 fdc4 	bl	80093aa <lv_draw_fill>
        right_area.x1++;
 8010822:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010826:	b29b      	uxth	r3, r3
 8010828:	3301      	adds	r3, #1
 801082a:	b29b      	uxth	r3, r3
 801082c:	b21b      	sxth	r3, r3
 801082e:	853b      	strh	r3, [r7, #40]	; 0x28
        right_area.x2++;
 8010830:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010834:	b29b      	uxth	r3, r3
 8010836:	3301      	adds	r3, #1
 8010838:	b29b      	uxth	r3, r3
 801083a:	b21b      	sxth	r3, r3
 801083c:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 801083e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	f107 0020 	add.w	r0, r7, #32
 8010848:	8a12      	ldrh	r2, [r2, #16]
 801084a:	68b9      	ldr	r1, [r7, #8]
 801084c:	f7f8 fdad 	bl	80093aa <lv_draw_fill>
        left_area.x1--;
 8010850:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010854:	b29b      	uxth	r3, r3
 8010856:	3b01      	subs	r3, #1
 8010858:	b29b      	uxth	r3, r3
 801085a:	b21b      	sxth	r3, r3
 801085c:	843b      	strh	r3, [r7, #32]
        left_area.x2--;
 801085e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010862:	b29b      	uxth	r3, r3
 8010864:	3b01      	subs	r3, #1
 8010866:	b29b      	uxth	r3, r3
 8010868:	b21b      	sxth	r3, r3
 801086a:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 801086c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	f107 0018 	add.w	r0, r7, #24
 8010876:	8a12      	ldrh	r2, [r2, #16]
 8010878:	68b9      	ldr	r1, [r7, #8]
 801087a:	f7f8 fd96 	bl	80093aa <lv_draw_fill>
        top_area.y1--;
 801087e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010882:	b29b      	uxth	r3, r3
 8010884:	3b01      	subs	r3, #1
 8010886:	b29b      	uxth	r3, r3
 8010888:	b21b      	sxth	r3, r3
 801088a:	837b      	strh	r3, [r7, #26]
        top_area.y2--;
 801088c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010890:	b29b      	uxth	r3, r3
 8010892:	3b01      	subs	r3, #1
 8010894:	b29b      	uxth	r3, r3
 8010896:	b21b      	sxth	r3, r3
 8010898:	83fb      	strh	r3, [r7, #30]

        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 801089a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	f107 0010 	add.w	r0, r7, #16
 80108a4:	8a12      	ldrh	r2, [r2, #16]
 80108a6:	68b9      	ldr	r1, [r7, #8]
 80108a8:	f7f8 fd7f 	bl	80093aa <lv_draw_fill>
        bottom_area.y1++;
 80108ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	3301      	adds	r3, #1
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	b21b      	sxth	r3, r3
 80108b8:	827b      	strh	r3, [r7, #18]
        bottom_area.y2++;
 80108ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108be:	b29b      	uxth	r3, r3
 80108c0:	3301      	adds	r3, #1
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	b21b      	sxth	r3, r3
 80108c6:	82fb      	strh	r3, [r7, #22]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80108c8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	3301      	adds	r3, #1
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80108d4:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80108d8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80108dc:	429a      	cmp	r2, r3
 80108de:	dd90      	ble.n	8010802 <lv_draw_shadow_full_straight+0x1c8>
    }
}
 80108e0:	bf00      	nop
 80108e2:	3740      	adds	r7, #64	; 0x40
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <lv_draw_cont_radius_corr>:

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	80fb      	strh	r3, [r7, #6]
 80108f2:	460b      	mov	r3, r1
 80108f4:	80bb      	strh	r3, [r7, #4]
 80108f6:	4613      	mov	r3, r2
 80108f8:	807b      	strh	r3, [r7, #2]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80108fa:	f7f6 ffd3 	bl	80078a4 <lv_refr_get_disp_refreshing>
 80108fe:	4603      	mov	r3, r0
 8010900:	4618      	mov	r0, r3
 8010902:	f001 fe9f 	bl	8012644 <lv_disp_get_antialiasing>
 8010906:	4603      	mov	r3, r0
 8010908:	73fb      	strb	r3, [r7, #15]

    if(r >= (w >> 1)) {
 801090a:	88fb      	ldrh	r3, [r7, #6]
 801090c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010910:	1052      	asrs	r2, r2, #1
 8010912:	b212      	sxth	r2, r2
 8010914:	4293      	cmp	r3, r2
 8010916:	db0a      	blt.n	801092e <lv_draw_cont_radius_corr+0x46>
        r = (w >> 1);
 8010918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801091c:	105b      	asrs	r3, r3, #1
 801091e:	b21b      	sxth	r3, r3
 8010920:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 8010922:	88fb      	ldrh	r3, [r7, #6]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <lv_draw_cont_radius_corr+0x46>
 8010928:	88fb      	ldrh	r3, [r7, #6]
 801092a:	3b01      	subs	r3, #1
 801092c:	80fb      	strh	r3, [r7, #6]
    }
    if(r >= (h >> 1)) {
 801092e:	88fb      	ldrh	r3, [r7, #6]
 8010930:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010934:	1052      	asrs	r2, r2, #1
 8010936:	b212      	sxth	r2, r2
 8010938:	4293      	cmp	r3, r2
 801093a:	db0a      	blt.n	8010952 <lv_draw_cont_radius_corr+0x6a>
        r = (h >> 1);
 801093c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010940:	105b      	asrs	r3, r3, #1
 8010942:	b21b      	sxth	r3, r3
 8010944:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 8010946:	88fb      	ldrh	r3, [r7, #6]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <lv_draw_cont_radius_corr+0x6a>
 801094c:	88fb      	ldrh	r3, [r7, #6]
 801094e:	3b01      	subs	r3, #1
 8010950:	80fb      	strh	r3, [r7, #6]
    }

    if(r > 0) r -= aa;
 8010952:	88fb      	ldrh	r3, [r7, #6]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d004      	beq.n	8010962 <lv_draw_cont_radius_corr+0x7a>
 8010958:	7bfb      	ldrb	r3, [r7, #15]
 801095a:	b29b      	uxth	r3, r3
 801095c:	88fa      	ldrh	r2, [r7, #6]
 801095e:	1ad3      	subs	r3, r2, r3
 8010960:	80fb      	strh	r3, [r7, #6]

    return r;
 8010962:	88fb      	ldrh	r3, [r7, #6]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	4603      	mov	r3, r0
 8010974:	80fb      	strh	r3, [r7, #6]
 8010976:	460b      	mov	r3, r1
 8010978:	80bb      	strh	r3, [r7, #4]
 801097a:	4613      	mov	r3, r2
 801097c:	70fb      	strb	r3, [r7, #3]
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 801097e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010982:	2b02      	cmp	r3, #2
 8010984:	d10a      	bne.n	801099c <antialias_get_opa_circ+0x30>
 8010986:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801098a:	4a20      	ldr	r2, [pc, #128]	; (8010a0c <antialias_get_opa_circ+0xa0>)
 801098c:	5cd3      	ldrb	r3, [r2, r3]
 801098e:	461a      	mov	r2, r3
 8010990:	78fb      	ldrb	r3, [r7, #3]
 8010992:	fb03 f302 	mul.w	r3, r3, r2
 8010996:	121b      	asrs	r3, r3, #8
 8010998:	b2db      	uxtb	r3, r3
 801099a:	e031      	b.n	8010a00 <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 801099c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	d10a      	bne.n	80109ba <antialias_get_opa_circ+0x4e>
 80109a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109a8:	4a19      	ldr	r2, [pc, #100]	; (8010a10 <antialias_get_opa_circ+0xa4>)
 80109aa:	5cd3      	ldrb	r3, [r2, r3]
 80109ac:	461a      	mov	r2, r3
 80109ae:	78fb      	ldrb	r3, [r7, #3]
 80109b0:	fb03 f302 	mul.w	r3, r3, r2
 80109b4:	121b      	asrs	r3, r3, #8
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	e022      	b.n	8010a00 <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80109ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109be:	2b04      	cmp	r3, #4
 80109c0:	d10a      	bne.n	80109d8 <antialias_get_opa_circ+0x6c>
 80109c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109c6:	4a13      	ldr	r2, [pc, #76]	; (8010a14 <antialias_get_opa_circ+0xa8>)
 80109c8:	5cd3      	ldrb	r3, [r2, r3]
 80109ca:	461a      	mov	r2, r3
 80109cc:	78fb      	ldrb	r3, [r7, #3]
 80109ce:	fb03 f302 	mul.w	r3, r3, r2
 80109d2:	121b      	asrs	r3, r3, #8
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	e013      	b.n	8010a00 <antialias_get_opa_circ+0x94>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80109d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80109dc:	4613      	mov	r3, r2
 80109de:	00db      	lsls	r3, r3, #3
 80109e0:	1a9b      	subs	r3, r3, r2
 80109e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109e6:	3a01      	subs	r2, #1
 80109e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80109ec:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	4a09      	ldr	r2, [pc, #36]	; (8010a18 <antialias_get_opa_circ+0xac>)
 80109f2:	5cd3      	ldrb	r3, [r2, r3]
 80109f4:	461a      	mov	r2, r3
 80109f6:	78fb      	ldrb	r3, [r7, #3]
 80109f8:	fb03 f302 	mul.w	r3, r3, r2
 80109fc:	0a1b      	lsrs	r3, r3, #8
 80109fe:	b2db      	uxtb	r3, r3
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3714      	adds	r7, #20
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr
 8010a0c:	0802a52c 	.word	0x0802a52c
 8010a10:	0802a530 	.word	0x0802a530
 8010a14:	0802a534 	.word	0x0802a534
 8010a18:	0802a538 	.word	0x0802a538

08010a1c <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b088      	sub	sp, #32
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
    if(entry_cnt == 0) {
 8010a26:	4b6b      	ldr	r3, [pc, #428]	; (8010bd4 <lv_img_cache_open+0x1b8>)
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d101      	bne.n	8010a32 <lv_img_cache_open+0x16>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	e0cc      	b.n	8010bcc <lv_img_cache_open+0x1b0>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8010a32:	4b69      	ldr	r3, [pc, #420]	; (8010bd8 <lv_img_cache_open+0x1bc>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010a38:	2300      	movs	r3, #0
 8010a3a:	83fb      	strh	r3, [r7, #30]
 8010a3c:	e021      	b.n	8010a82 <lv_img_cache_open+0x66>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8010a3e:	8bfa      	ldrh	r2, [r7, #30]
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	461a      	mov	r2, r3
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a50:	4a62      	ldr	r2, [pc, #392]	; (8010bdc <lv_img_cache_open+0x1c0>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	db12      	blt.n	8010a7c <lv_img_cache_open+0x60>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8010a56:	8bfa      	ldrh	r2, [r7, #30]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	461a      	mov	r2, r3
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	4413      	add	r3, r2
 8010a66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a68:	8bfa      	ldrh	r2, [r7, #30]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	4413      	add	r3, r2
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	461a      	mov	r2, r3
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	4413      	add	r3, r2
 8010a78:	1e4a      	subs	r2, r1, #1
 8010a7a:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8010a7c:	8bfb      	ldrh	r3, [r7, #30]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	83fb      	strh	r3, [r7, #30]
 8010a82:	4b54      	ldr	r3, [pc, #336]	; (8010bd4 <lv_img_cache_open+0x1b8>)
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	8bfa      	ldrh	r2, [r7, #30]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d3d8      	bcc.n	8010a3e <lv_img_cache_open+0x22>
        }
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < entry_cnt; i++) {
 8010a90:	2300      	movs	r3, #0
 8010a92:	83fb      	strh	r3, [r7, #30]
 8010a94:	e02a      	b.n	8010aec <lv_img_cache_open+0xd0>
        if(cache[i].dec_dsc.src == src) {
 8010a96:	8bfa      	ldrh	r2, [r7, #30]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	00db      	lsls	r3, r3, #3
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d11b      	bne.n	8010ae6 <lv_img_cache_open+0xca>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8010aae:	8bfa      	ldrh	r2, [r7, #30]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	461a      	mov	r2, r3
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	4413      	add	r3, r2
 8010abe:	61bb      	str	r3, [r7, #24]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	699b      	ldr	r3, [r3, #24]
 8010aca:	4413      	add	r3, r2
 8010acc:	461a      	mov	r2, r3
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010ada:	dd0d      	ble.n	8010af8 <lv_img_cache_open+0xdc>
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ae2:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8010ae4:	e008      	b.n	8010af8 <lv_img_cache_open+0xdc>
    for(i = 0; i < entry_cnt; i++) {
 8010ae6:	8bfb      	ldrh	r3, [r7, #30]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	83fb      	strh	r3, [r7, #30]
 8010aec:	4b39      	ldr	r3, [pc, #228]	; (8010bd4 <lv_img_cache_open+0x1b8>)
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	8bfa      	ldrh	r2, [r7, #30]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d3cf      	bcc.n	8010a96 <lv_img_cache_open+0x7a>
 8010af6:	e000      	b.n	8010afa <lv_img_cache_open+0xde>
            break;
 8010af8:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d164      	bne.n	8010bca <lv_img_cache_open+0x1ae>
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8010b04:	2301      	movs	r3, #1
 8010b06:	83fb      	strh	r3, [r7, #30]
 8010b08:	e018      	b.n	8010b3c <lv_img_cache_open+0x120>
            if(cache[i].life < cached_src->life) {
 8010b0a:	8bfa      	ldrh	r2, [r7, #30]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4413      	add	r3, r2
 8010b12:	00db      	lsls	r3, r3, #3
 8010b14:	461a      	mov	r2, r3
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	4413      	add	r3, r2
 8010b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b20:	429a      	cmp	r2, r3
 8010b22:	da08      	bge.n	8010b36 <lv_img_cache_open+0x11a>
                cached_src = &cache[i];
 8010b24:	8bfa      	ldrh	r2, [r7, #30]
 8010b26:	4613      	mov	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	461a      	mov	r2, r3
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	4413      	add	r3, r2
 8010b34:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8010b36:	8bfb      	ldrh	r3, [r7, #30]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	83fb      	strh	r3, [r7, #30]
 8010b3c:	4b25      	ldr	r3, [pc, #148]	; (8010bd4 <lv_img_cache_open+0x1b8>)
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	8bfa      	ldrh	r2, [r7, #30]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d3e1      	bcc.n	8010b0a <lv_img_cache_open+0xee>
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d003      	beq.n	8010b56 <lv_img_cache_open+0x13a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 fa21 	bl	8010f98 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
 8010b56:	f001 fe15 	bl	8012784 <lv_tick_get>
 8010b5a:	6138      	str	r0, [r7, #16]
        cached_src->dec_dsc.time_to_open = 0;
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	619a      	str	r2, [r3, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	6879      	ldr	r1, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f987 	bl	8010e7c <lv_img_decoder_open>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	73fb      	strb	r3, [r7, #15]
        if(open_res == LV_RES_INV) {
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d114      	bne.n	8010ba2 <lv_img_cache_open+0x186>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f000 fa0c 	bl	8010f98 <lv_img_decoder_close>
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	2224      	movs	r2, #36	; 0x24
 8010b84:	2100      	movs	r1, #0
 8010b86:	4618      	mov	r0, r3
 8010b88:	f016 fb15 	bl	80271b6 <memset>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 8010b8c:	2228      	movs	r2, #40	; 0x28
 8010b8e:	2100      	movs	r1, #0
 8010b90:	69b8      	ldr	r0, [r7, #24]
 8010b92:	f016 fb10 	bl	80271b6 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b9c:	625a      	str	r2, [r3, #36]	; 0x24
            return NULL;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e014      	b.n	8010bcc <lv_img_cache_open+0x1b0>
        }

        cached_src->life = 0;
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	625a      	str	r2, [r3, #36]	; 0x24

        /*If `time_to_open` was not set in the open function set it here*/
        if(cached_src->dec_dsc.time_to_open == 0) {
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	699b      	ldr	r3, [r3, #24]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d105      	bne.n	8010bbc <lv_img_cache_open+0x1a0>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8010bb0:	6938      	ldr	r0, [r7, #16]
 8010bb2:	f001 fe01 	bl	80127b8 <lv_tick_elaps>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	619a      	str	r2, [r3, #24]
        }

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8010bbc:	69bb      	ldr	r3, [r7, #24]
 8010bbe:	699b      	ldr	r3, [r3, #24]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d102      	bne.n	8010bca <lv_img_cache_open+0x1ae>
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	619a      	str	r2, [r3, #24]
    }

    return cached_src;
 8010bca:	69bb      	ldr	r3, [r7, #24]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	20002a70 	.word	0x20002a70
 8010bd8:	20006dd8 	.word	0x20006dd8
 8010bdc:	80000002 	.word	0x80000002

08010be0 <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8010bea:	4b27      	ldr	r3, [pc, #156]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d007      	beq.n	8010c02 <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	f000 f84c 	bl	8010c90 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8010bf8:	4b23      	ldr	r3, [pc, #140]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f002 ff27 	bl	8013a50 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8010c02:	88fa      	ldrh	r2, [r7, #6]
 8010c04:	4613      	mov	r3, r2
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f002 fedf 	bl	80139d0 <lv_mem_alloc>
 8010c12:	4602      	mov	r2, r0
 8010c14:	4b1c      	ldr	r3, [pc, #112]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010c16:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8010c18:	4b1b      	ldr	r3, [pc, #108]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d100      	bne.n	8010c22 <lv_img_cache_set_size+0x42>
 8010c20:	e7fe      	b.n	8010c20 <lv_img_cache_set_size+0x40>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8010c22:	4b19      	ldr	r3, [pc, #100]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d103      	bne.n	8010c32 <lv_img_cache_set_size+0x52>
        entry_cnt = 0;
 8010c2a:	4b18      	ldr	r3, [pc, #96]	; (8010c8c <lv_img_cache_set_size+0xac>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	801a      	strh	r2, [r3, #0]
        return;
 8010c30:	e027      	b.n	8010c82 <lv_img_cache_set_size+0xa2>
    }
    entry_cnt = new_entry_cnt;
 8010c32:	4a16      	ldr	r2, [pc, #88]	; (8010c8c <lv_img_cache_set_size+0xac>)
 8010c34:	88fb      	ldrh	r3, [r7, #6]
 8010c36:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010c38:	2300      	movs	r3, #0
 8010c3a:	81fb      	strh	r3, [r7, #14]
 8010c3c:	e01c      	b.n	8010c78 <lv_img_cache_set_size+0x98>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010c3e:	4b12      	ldr	r3, [pc, #72]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010c40:	6819      	ldr	r1, [r3, #0]
 8010c42:	89fa      	ldrh	r2, [r7, #14]
 8010c44:	4613      	mov	r3, r2
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	4413      	add	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	440b      	add	r3, r1
 8010c4e:	2224      	movs	r2, #36	; 0x24
 8010c50:	2100      	movs	r1, #0
 8010c52:	4618      	mov	r0, r3
 8010c54:	f016 faaf 	bl	80271b6 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 8010c58:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <lv_img_cache_set_size+0xa8>)
 8010c5a:	6819      	ldr	r1, [r3, #0]
 8010c5c:	89fa      	ldrh	r2, [r7, #14]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	00db      	lsls	r3, r3, #3
 8010c66:	440b      	add	r3, r1
 8010c68:	2228      	movs	r2, #40	; 0x28
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f016 faa2 	bl	80271b6 <memset>
    for(i = 0; i < entry_cnt; i++) {
 8010c72:	89fb      	ldrh	r3, [r7, #14]
 8010c74:	3301      	adds	r3, #1
 8010c76:	81fb      	strh	r3, [r7, #14]
 8010c78:	4b04      	ldr	r3, [pc, #16]	; (8010c8c <lv_img_cache_set_size+0xac>)
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	89fa      	ldrh	r2, [r7, #14]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d3dd      	bcc.n	8010c3e <lv_img_cache_set_size+0x5e>
    }
}
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	20006dd8 	.word	0x20006dd8
 8010c8c:	20002a70 	.word	0x20002a70

08010c90 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8010c98:	4b28      	ldr	r3, [pc, #160]	; (8010d3c <lv_img_cache_invalidate_src+0xac>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	81fb      	strh	r3, [r7, #14]
 8010ca2:	e041      	b.n	8010d28 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8010ca4:	89fa      	ldrh	r2, [r7, #14]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	461a      	mov	r2, r3
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d002      	beq.n	8010cc2 <lv_img_cache_invalidate_src+0x32>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d12f      	bne.n	8010d22 <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 8010cc2:	89fa      	ldrh	r2, [r7, #14]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	4413      	add	r3, r2
 8010cca:	00db      	lsls	r3, r3, #3
 8010ccc:	461a      	mov	r2, r3
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00a      	beq.n	8010cee <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8010cd8:	89fa      	ldrh	r2, [r7, #14]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	00db      	lsls	r3, r3, #3
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 f955 	bl	8010f98 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010cee:	89fa      	ldrh	r2, [r7, #14]
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	4413      	add	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	2224      	movs	r2, #36	; 0x24
 8010d00:	2100      	movs	r1, #0
 8010d02:	4618      	mov	r0, r3
 8010d04:	f016 fa57 	bl	80271b6 <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8010d08:	89fa      	ldrh	r2, [r7, #14]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	461a      	mov	r2, r3
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	4413      	add	r3, r2
 8010d18:	2228      	movs	r2, #40	; 0x28
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f016 fa4a 	bl	80271b6 <memset>
    for(i = 0; i < entry_cnt; i++) {
 8010d22:	89fb      	ldrh	r3, [r7, #14]
 8010d24:	3301      	adds	r3, #1
 8010d26:	81fb      	strh	r3, [r7, #14]
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <lv_img_cache_invalidate_src+0xb0>)
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	89fa      	ldrh	r2, [r7, #14]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d3b8      	bcc.n	8010ca4 <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 8010d32:	bf00      	nop
 8010d34:	3710      	adds	r7, #16
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	20006dd8 	.word	0x20006dd8
 8010d40:	20002a70 	.word	0x20002a70

08010d44 <lv_color_make>:
{
 8010d44:	b480      	push	{r7}
 8010d46:	b085      	sub	sp, #20
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	71fb      	strb	r3, [r7, #7]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	71bb      	strb	r3, [r7, #6]
 8010d52:	4613      	mov	r3, r2
 8010d54:	717b      	strb	r3, [r7, #5]
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8010d56:	79bb      	ldrb	r3, [r7, #6]
 8010d58:	095b      	lsrs	r3, r3, #5
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	f003 0307 	and.w	r3, r3, #7
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	7b3b      	ldrb	r3, [r7, #12]
 8010d64:	f362 0302 	bfi	r3, r2, #0, #3
 8010d68:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	08db      	lsrs	r3, r3, #3
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	f003 031f 	and.w	r3, r3, #31
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	7b3b      	ldrb	r3, [r7, #12]
 8010d78:	f362 03c7 	bfi	r3, r2, #3, #5
 8010d7c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8010d7e:	797b      	ldrb	r3, [r7, #5]
 8010d80:	08db      	lsrs	r3, r3, #3
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 031f 	and.w	r3, r3, #31
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	7b7b      	ldrb	r3, [r7, #13]
 8010d8c:	f362 0304 	bfi	r3, r2, #0, #5
 8010d90:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8010d92:	79bb      	ldrb	r3, [r7, #6]
 8010d94:	089b      	lsrs	r3, r3, #2
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	f003 0307 	and.w	r3, r3, #7
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	7b7b      	ldrb	r3, [r7, #13]
 8010da0:	f362 1347 	bfi	r3, r2, #5, #3
 8010da4:	737b      	strb	r3, [r7, #13]
    return color;
 8010da6:	89bb      	ldrh	r3, [r7, #12]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3714      	adds	r7, #20
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8010dba:	2114      	movs	r1, #20
 8010dbc:	4810      	ldr	r0, [pc, #64]	; (8010e00 <lv_img_decoder_init+0x4c>)
 8010dbe:	f002 fb05 	bl	80133cc <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8010dc2:	f000 f8ff 	bl	8010fc4 <lv_img_decoder_create>
 8010dc6:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d103      	bne.n	8010dd6 <lv_img_decoder_init+0x22>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        lv_mem_assert(decoder);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d111      	bne.n	8010df8 <lv_img_decoder_init+0x44>
 8010dd4:	e7fe      	b.n	8010dd4 <lv_img_decoder_init+0x20>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8010dd6:	490b      	ldr	r1, [pc, #44]	; (8010e04 <lv_img_decoder_init+0x50>)
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f90f 	bl	8010ffc <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8010dde:	490a      	ldr	r1, [pc, #40]	; (8010e08 <lv_img_decoder_init+0x54>)
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 f919 	bl	8011018 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8010de6:	4909      	ldr	r1, [pc, #36]	; (8010e0c <lv_img_decoder_init+0x58>)
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 f923 	bl	8011034 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8010dee:	4908      	ldr	r1, [pc, #32]	; (8010e10 <lv_img_decoder_init+0x5c>)
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f92d 	bl	8011050 <lv_img_decoder_set_close_cb>
 8010df6:	e000      	b.n	8010dfa <lv_img_decoder_init+0x46>
        return;
 8010df8:	bf00      	nop
}
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	20006dbc 	.word	0x20006dbc
 8010e04:	0801106d 	.word	0x0801106d
 8010e08:	08011171 	.word	0x08011171
 8010e0c:	080113c9 	.word	0x080113c9
 8010e10:	080114ed 	.word	0x080114ed

08010e14 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 8010e1e:	683a      	ldr	r2, [r7, #0]
 8010e20:	7813      	ldrb	r3, [r2, #0]
 8010e22:	f36f 1347 	bfc	r3, #5, #3
 8010e26:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010e2c:	4812      	ldr	r0, [pc, #72]	; (8010e78 <lv_img_decoder_get_info+0x64>)
 8010e2e:	f002 fc4f 	bl	80136d0 <lv_ll_get_head>
 8010e32:	60b8      	str	r0, [r7, #8]
 8010e34:	e015      	b.n	8010e62 <lv_img_decoder_get_info+0x4e>
    {
        res = LV_RES_INV;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00a      	beq.n	8010e58 <lv_img_decoder_get_info+0x44>
            res = d->info_cb(d, src, header);
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	6879      	ldr	r1, [r7, #4]
 8010e4a:	68b8      	ldr	r0, [r7, #8]
 8010e4c:	4798      	blx	r3
 8010e4e:	4603      	mov	r3, r0
 8010e50:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 8010e52:	7bfb      	ldrb	r3, [r7, #15]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d008      	beq.n	8010e6a <lv_img_decoder_get_info+0x56>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010e58:	68b9      	ldr	r1, [r7, #8]
 8010e5a:	4807      	ldr	r0, [pc, #28]	; (8010e78 <lv_img_decoder_get_info+0x64>)
 8010e5c:	f002 fc5e 	bl	801371c <lv_ll_get_next>
 8010e60:	60b8      	str	r0, [r7, #8]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1e6      	bne.n	8010e36 <lv_img_decoder_get_info+0x22>
 8010e68:	e000      	b.n	8010e6c <lv_img_decoder_get_info+0x58>
            if(res == LV_RES_OK) break;
 8010e6a:	bf00      	nop
        }
    }

    return res;
 8010e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	20006dbc 	.word	0x20006dbc

08010e7c <lv_img_decoder_open>:
 * @param style the style of the image
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, const lv_style_t * style)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
    dsc->style     = style;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	609a      	str	r2, [r3, #8]
    dsc->src       = src;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	605a      	str	r2, [r3, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 8010e94:	68b8      	ldr	r0, [r7, #8]
 8010e96:	f7f9 fa71 	bl	800a37c <lv_img_src_get_type>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	621a      	str	r2, [r3, #32]

    lv_res_t res = LV_RES_INV;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	75fb      	strb	r3, [r7, #23]

    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010eac:	4823      	ldr	r0, [pc, #140]	; (8010f3c <lv_img_decoder_open+0xc0>)
 8010eae:	f002 fc0f 	bl	80136d0 <lv_ll_get_head>
 8010eb2:	6138      	str	r0, [r7, #16]
 8010eb4:	e02f      	b.n	8010f16 <lv_img_decoder_open+0x9a>
    {
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d023      	beq.n	8010f06 <lv_img_decoder_open+0x8a>
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d01f      	beq.n	8010f06 <lv_img_decoder_open+0x8a>

        res = d->info_cb(d, src, &dsc->header);
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	68fa      	ldr	r2, [r7, #12]
 8010ecc:	3210      	adds	r2, #16
 8010ece:	68b9      	ldr	r1, [r7, #8]
 8010ed0:	6938      	ldr	r0, [r7, #16]
 8010ed2:	4798      	blx	r3
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) continue;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d115      	bne.n	8010f0a <lv_img_decoder_open+0x8e>

        dsc->error_msg = NULL;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	693a      	ldr	r2, [r7, #16]
 8010eee:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	68f9      	ldr	r1, [r7, #12]
 8010ef6:	6938      	ldr	r0, [r7, #16]
 8010ef8:	4798      	blx	r3
 8010efa:	4603      	mov	r3, r0
 8010efc:	75fb      	strb	r3, [r7, #23]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 8010efe:	7dfb      	ldrb	r3, [r7, #23]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d00c      	beq.n	8010f1e <lv_img_decoder_open+0xa2>
 8010f04:	e002      	b.n	8010f0c <lv_img_decoder_open+0x90>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8010f06:	bf00      	nop
 8010f08:	e000      	b.n	8010f0c <lv_img_decoder_open+0x90>
        if(res != LV_RES_OK) continue;
 8010f0a:	bf00      	nop
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010f0c:	6939      	ldr	r1, [r7, #16]
 8010f0e:	480b      	ldr	r0, [pc, #44]	; (8010f3c <lv_img_decoder_open+0xc0>)
 8010f10:	f002 fc04 	bl	801371c <lv_ll_get_next>
 8010f14:	6138      	str	r0, [r7, #16]
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1cc      	bne.n	8010eb6 <lv_img_decoder_open+0x3a>
 8010f1c:	e000      	b.n	8010f20 <lv_img_decoder_open+0xa4>
        if(res == LV_RES_OK) break;
 8010f1e:	bf00      	nop
    }

    if(res == LV_RES_INV) {
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d104      	bne.n	8010f30 <lv_img_decoder_open+0xb4>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010f26:	2224      	movs	r2, #36	; 0x24
 8010f28:	2100      	movs	r1, #0
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f016 f943 	bl	80271b6 <memset>
    }

    return res;
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3718      	adds	r7, #24
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	20006dbc 	.word	0x20006dbc

08010f40 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8010f40:	b590      	push	{r4, r7, lr}
 8010f42:	b089      	sub	sp, #36	; 0x24
 8010f44:	af02      	add	r7, sp, #8
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	4608      	mov	r0, r1
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	4603      	mov	r3, r0
 8010f50:	817b      	strh	r3, [r7, #10]
 8010f52:	460b      	mov	r3, r1
 8010f54:	813b      	strh	r3, [r7, #8]
 8010f56:	4613      	mov	r3, r2
 8010f58:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d012      	beq.n	8010f8e <lv_img_decoder_read_line+0x4e>
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	689c      	ldr	r4, [r3, #8]
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6818      	ldr	r0, [r3, #0]
 8010f72:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8010f76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	9301      	str	r3, [sp, #4]
 8010f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	460b      	mov	r3, r1
 8010f86:	68f9      	ldr	r1, [r7, #12]
 8010f88:	47a0      	blx	r4
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	75fb      	strb	r3, [r7, #23]

    return res;
 8010f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}

08010f98 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <lv_img_decoder_close+0x22>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	6812      	ldr	r2, [r2, #0]
 8010fb4:	6879      	ldr	r1, [r7, #4]
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	4798      	blx	r3
}
 8010fba:	bf00      	nop
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
	...

08010fc4 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8010fca:	480b      	ldr	r0, [pc, #44]	; (8010ff8 <lv_img_decoder_create+0x34>)
 8010fcc:	f002 fa1e 	bl	801340c <lv_ll_ins_head>
 8010fd0:	6078      	str	r0, [r7, #4]
    lv_mem_assert(decoder);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d100      	bne.n	8010fda <lv_img_decoder_create+0x16>
 8010fd8:	e7fe      	b.n	8010fd8 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <lv_img_decoder_create+0x20>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e005      	b.n	8010ff0 <lv_img_decoder_create+0x2c>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8010fe4:	2214      	movs	r2, #20
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f016 f8e4 	bl	80271b6 <memset>

    return decoder;
 8010fee:	687b      	ldr	r3, [r7, #4]
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20006dbc 	.word	0x20006dbc

08010ffc <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	683a      	ldr	r2, [r7, #0]
 801100a:	601a      	str	r2, [r3, #0]
}
 801100c:	bf00      	nop
 801100e:	370c      	adds	r7, #12
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr

08011018 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	605a      	str	r2, [r3, #4]
}
 8011028:	bf00      	nop
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	609a      	str	r2, [r3, #8]
}
 8011044:	bf00      	nop
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	60da      	str	r2, [r3, #12]
}
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <lv_img_decoder_built_in_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011078:	68b8      	ldr	r0, [r7, #8]
 801107a:	f7f9 f97f 	bl	800a37c <lv_img_src_get_type>
 801107e:	4603      	mov	r3, r0
 8011080:	77bb      	strb	r3, [r7, #30]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8011082:	7fbb      	ldrb	r3, [r7, #30]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d11e      	bne.n	80110c6 <lv_img_decoder_built_in_info+0x5a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011090:	b299      	uxth	r1, r3
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	6813      	ldr	r3, [r2, #0]
 8011096:	f361 2394 	bfi	r3, r1, #10, #11
 801109a:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	885b      	ldrh	r3, [r3, #2]
 80110a0:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80110a4:	b299      	uxth	r1, r3
 80110a6:	687a      	ldr	r2, [r7, #4]
 80110a8:	8853      	ldrh	r3, [r2, #2]
 80110aa:	f361 134f 	bfi	r3, r1, #5, #11
 80110ae:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80110b8:	b2d9      	uxtb	r1, r3
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	7813      	ldrb	r3, [r2, #0]
 80110be:	f361 0304 	bfi	r3, r1, #0, #5
 80110c2:	7013      	strb	r3, [r2, #0]
 80110c4:	e04e      	b.n	8011164 <lv_img_decoder_built_in_info+0xf8>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 80110c6:	7fbb      	ldrb	r3, [r7, #30]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d133      	bne.n	8011134 <lv_img_decoder_built_in_info+0xc8>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80110cc:	f107 0314 	add.w	r3, r7, #20
 80110d0:	2202      	movs	r2, #2
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f001 ffff 	bl	80130d8 <lv_fs_open>
 80110da:	4603      	mov	r3, r0
 80110dc:	77fb      	strb	r3, [r7, #31]
        if(res == LV_FS_RES_OK) {
 80110de:	7ffb      	ldrb	r3, [r7, #31]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d10e      	bne.n	8011102 <lv_img_decoder_built_in_info+0x96>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 80110e4:	f107 0310 	add.w	r3, r7, #16
 80110e8:	f107 0014 	add.w	r0, r7, #20
 80110ec:	2204      	movs	r2, #4
 80110ee:	6879      	ldr	r1, [r7, #4]
 80110f0:	f002 f8a1 	bl	8013236 <lv_fs_read>
 80110f4:	4603      	mov	r3, r0
 80110f6:	77fb      	strb	r3, [r7, #31]
            lv_fs_close(&file);
 80110f8:	f107 0314 	add.w	r3, r7, #20
 80110fc:	4618      	mov	r0, r3
 80110fe:	f002 f86b 	bl	80131d8 <lv_fs_close>
        }

        /*Create a dummy header on fs error*/
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8011102:	7ffb      	ldrb	r3, [r7, #31]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d102      	bne.n	801110e <lv_img_decoder_built_in_info+0xa2>
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	2b04      	cmp	r3, #4
 801110c:	d02a      	beq.n	8011164 <lv_img_decoder_built_in_info+0xf8>
            header->w  = LV_DPI;
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	6813      	ldr	r3, [r2, #0]
 8011112:	2164      	movs	r1, #100	; 0x64
 8011114:	f361 2394 	bfi	r3, r1, #10, #11
 8011118:	6013      	str	r3, [r2, #0]
            header->h  = LV_DPI;
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	8853      	ldrh	r3, [r2, #2]
 801111e:	2164      	movs	r1, #100	; 0x64
 8011120:	f361 134f 	bfi	r3, r1, #5, #11
 8011124:	8053      	strh	r3, [r2, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	7813      	ldrb	r3, [r2, #0]
 801112a:	f36f 0304 	bfc	r3, #0, #5
 801112e:	7013      	strb	r3, [r2, #0]
            return LV_RES_INV;
 8011130:	2300      	movs	r3, #0
 8011132:	e018      	b.n	8011166 <lv_img_decoder_built_in_info+0xfa>
        }
    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8011134:	7fbb      	ldrb	r3, [r7, #30]
 8011136:	2b02      	cmp	r3, #2
 8011138:	d112      	bne.n	8011160 <lv_img_decoder_built_in_info+0xf4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	6813      	ldr	r3, [r2, #0]
 801113e:	2101      	movs	r1, #1
 8011140:	f361 2394 	bfi	r3, r1, #10, #11
 8011144:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	8853      	ldrh	r3, [r2, #2]
 801114a:	2101      	movs	r1, #1
 801114c:	f361 134f 	bfi	r3, r1, #5, #11
 8011150:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	7813      	ldrb	r3, [r2, #0]
 8011156:	210b      	movs	r1, #11
 8011158:	f361 0304 	bfi	r3, r1, #0, #5
 801115c:	7013      	strb	r3, [r2, #0]
 801115e:	e001      	b.n	8011164 <lv_img_decoder_built_in_info+0xf8>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8011160:	2300      	movs	r3, #0
 8011162:	e000      	b.n	8011166 <lv_img_decoder_built_in_info+0xfa>
    }
    return LV_RES_OK;
 8011164:	2301      	movs	r3, #1
}
 8011166:	4618      	mov	r0, r3
 8011168:	3720      	adds	r7, #32
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
	...

08011170 <lv_img_decoder_built_in_open>:

static lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8011170:	b5b0      	push	{r4, r5, r7, lr}
 8011172:	b08c      	sub	sp, #48	; 0x30
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	7b1b      	ldrb	r3, [r3, #12]
 801117e:	2b01      	cmp	r3, #1
 8011180:	d153      	bne.n	801122a <lv_img_decoder_built_in_open+0xba>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	4618      	mov	r0, r3
 8011188:	f002 f8ae 	bl	80132e8 <lv_fs_get_ext>
 801118c:	4603      	mov	r3, r0
 801118e:	498d      	ldr	r1, [pc, #564]	; (80113c4 <lv_img_decoder_built_in_open+0x254>)
 8011190:	4618      	mov	r0, r3
 8011192:	f7ef f81d 	bl	80001d0 <strcmp>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <lv_img_decoder_built_in_open+0x30>
 801119c:	2300      	movs	r3, #0
 801119e:	e10d      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	6859      	ldr	r1, [r3, #4]
 80111a4:	f107 030c 	add.w	r3, r7, #12
 80111a8:	2202      	movs	r2, #2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f001 ff94 	bl	80130d8 <lv_fs_open>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if(res != LV_FS_RES_OK) {
 80111b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80111be:	2300      	movs	r3, #0
 80111c0:	e0fc      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d115      	bne.n	80111f6 <lv_img_decoder_built_in_open+0x86>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80111ca:	2008      	movs	r0, #8
 80111cc:	f002 fc00 	bl	80139d0 <lv_mem_alloc>
 80111d0:	4602      	mov	r2, r0
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	6a1b      	ldr	r3, [r3, #32]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d104      	bne.n	80111e8 <lv_img_decoder_built_in_open+0x78>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d100      	bne.n	80111e8 <lv_img_decoder_built_in_open+0x78>
 80111e6:	e7fe      	b.n	80111e6 <lv_img_decoder_built_in_open+0x76>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	6a1b      	ldr	r3, [r3, #32]
 80111ec:	2208      	movs	r2, #8
 80111ee:	2100      	movs	r1, #0
 80111f0:	4618      	mov	r0, r3
 80111f2:	f015 ffe0 	bl	80271b6 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	6a1b      	ldr	r3, [r3, #32]
 80111fa:	627b      	str	r3, [r7, #36]	; 0x24
        user_data->f                               = lv_mem_alloc(sizeof(f));
 80111fc:	2008      	movs	r0, #8
 80111fe:	f002 fbe7 	bl	80139d0 <lv_mem_alloc>
 8011202:	4602      	mov	r2, r0
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d104      	bne.n	801121a <lv_img_decoder_built_in_open+0xaa>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_mem_assert(user_data->f);
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d100      	bne.n	801121a <lv_img_decoder_built_in_open+0xaa>
 8011218:	e7fe      	b.n	8011218 <lv_img_decoder_built_in_open+0xa8>
        }

        memcpy(user_data->f, &f, sizeof(f));
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f107 010c 	add.w	r1, r7, #12
 8011222:	2208      	movs	r2, #8
 8011224:	4618      	mov	r0, r3
 8011226:	f015 ffbb 	bl	80271a0 <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	7c1b      	ldrb	r3, [r3, #16]
 801122e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011232:	b2db      	uxtb	r3, r3
 8011234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8011238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801123c:	2b04      	cmp	r3, #4
 801123e:	d007      	beq.n	8011250 <lv_img_decoder_built_in_open+0xe0>
 8011240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011244:	2b05      	cmp	r3, #5
 8011246:	d003      	beq.n	8011250 <lv_img_decoder_built_in_open+0xe0>
 8011248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801124c:	2b06      	cmp	r3, #6
 801124e:	d10f      	bne.n	8011270 <lv_img_decoder_built_in_open+0x100>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	7b1b      	ldrb	r3, [r3, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d106      	bne.n	8011266 <lv_img_decoder_built_in_open+0xf6>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	689a      	ldr	r2, [r3, #8]
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 8011262:	2301      	movs	r3, #1
 8011264:	e0aa      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2200      	movs	r2, #0
 801126a:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 801126c:	2301      	movs	r3, #1
 801126e:	e0a5      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8011270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011274:	2b07      	cmp	r3, #7
 8011276:	d00b      	beq.n	8011290 <lv_img_decoder_built_in_open+0x120>
 8011278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801127c:	2b08      	cmp	r3, #8
 801127e:	d007      	beq.n	8011290 <lv_img_decoder_built_in_open+0x120>
 8011280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011284:	2b09      	cmp	r3, #9
 8011286:	d003      	beq.n	8011290 <lv_img_decoder_built_in_open+0x120>
 8011288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801128c:	2b0a      	cmp	r3, #10
 801128e:	d17b      	bne.n	8011388 <lv_img_decoder_built_in_open+0x218>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8011290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011294:	4618      	mov	r0, r3
 8011296:	f7f8 ffd3 	bl	800a240 <lv_img_color_format_get_px_size>
 801129a:	4603      	mov	r3, r0
 801129c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        uint32_t palette_size = 1 << px_size;
 80112a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80112a4:	2201      	movs	r2, #1
 80112a6:	fa02 f303 	lsl.w	r3, r2, r3
 80112aa:	61fb      	str	r3, [r7, #28]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	6a1b      	ldr	r3, [r3, #32]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d115      	bne.n	80112e0 <lv_img_decoder_built_in_open+0x170>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80112b4:	2008      	movs	r0, #8
 80112b6:	f002 fb8b 	bl	80139d0 <lv_mem_alloc>
 80112ba:	4602      	mov	r2, r0
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	6a1b      	ldr	r3, [r3, #32]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d104      	bne.n	80112d2 <lv_img_decoder_built_in_open+0x162>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	6a1b      	ldr	r3, [r3, #32]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d100      	bne.n	80112d2 <lv_img_decoder_built_in_open+0x162>
 80112d0:	e7fe      	b.n	80112d0 <lv_img_decoder_built_in_open+0x160>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	6a1b      	ldr	r3, [r3, #32]
 80112d6:	2208      	movs	r2, #8
 80112d8:	2100      	movs	r1, #0
 80112da:	4618      	mov	r0, r3
 80112dc:	f015 ff6b 	bl	80271b6 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	6a1b      	ldr	r3, [r3, #32]
 80112e4:	61bb      	str	r3, [r7, #24]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4618      	mov	r0, r3
 80112ec:	f002 fb70 	bl	80139d0 <lv_mem_alloc>
 80112f0:	4602      	mov	r2, r0
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	605a      	str	r2, [r3, #4]
        if(user_data->palette == NULL) {
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d104      	bne.n	8011308 <lv_img_decoder_built_in_open+0x198>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            lv_mem_assert(user_data->f);
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d100      	bne.n	8011308 <lv_img_decoder_built_in_open+0x198>
 8011306:	e7fe      	b.n	8011306 <lv_img_decoder_built_in_open+0x196>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	7b1b      	ldrb	r3, [r3, #12]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d10f      	bne.n	8011330 <lv_img_decoder_built_in_open+0x1c0>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2104      	movs	r1, #4
 8011316:	4618      	mov	r0, r3
 8011318:	f001 ffc3 	bl	80132a2 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	6818      	ldr	r0, [r3, #0]
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	6859      	ldr	r1, [r3, #4]
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	005a      	lsls	r2, r3, #1
 8011328:	2300      	movs	r3, #0
 801132a:	f001 ff84 	bl	8013236 <lv_fs_read>
 801132e:	e026      	b.n	801137e <lv_img_decoder_built_in_open+0x20e>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	617b      	str	r3, [r7, #20]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8011338:	2300      	movs	r3, #0
 801133a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801133c:	e01b      	b.n	8011376 <lv_img_decoder_built_in_open+0x206>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	697a      	ldr	r2, [r7, #20]
 8011344:	4413      	add	r3, r2
 8011346:	7898      	ldrb	r0, [r3, #2]
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	4413      	add	r3, r2
 8011350:	7859      	ldrb	r1, [r3, #1]
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	4413      	add	r3, r2
 801135a:	781d      	ldrb	r5, [r3, #0]
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	005b      	lsls	r3, r3, #1
 8011364:	18d4      	adds	r4, r2, r3
 8011366:	462a      	mov	r2, r5
 8011368:	f7ff fcec 	bl	8010d44 <lv_color_make>
 801136c:	4603      	mov	r3, r0
 801136e:	8023      	strh	r3, [r4, #0]
            for(i = 0; i < palette_size; i++) {
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	3301      	adds	r3, #1
 8011374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	429a      	cmp	r2, r3
 801137c:	d3df      	bcc.n	801133e <lv_img_decoder_built_in_open+0x1ce>
            }
        }

        dsc->img_data = NULL;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2200      	movs	r2, #0
 8011382:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 8011384:	2301      	movs	r3, #1
 8011386:	e019      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8011388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801138c:	2b0b      	cmp	r3, #11
 801138e:	d00b      	beq.n	80113a8 <lv_img_decoder_built_in_open+0x238>
 8011390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011394:	2b0c      	cmp	r3, #12
 8011396:	d007      	beq.n	80113a8 <lv_img_decoder_built_in_open+0x238>
 8011398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801139c:	2b0d      	cmp	r3, #13
 801139e:	d003      	beq.n	80113a8 <lv_img_decoder_built_in_open+0x238>
 80113a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80113a4:	2b0e      	cmp	r3, #14
 80113a6:	d104      	bne.n	80113b2 <lv_img_decoder_built_in_open+0x242>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2200      	movs	r2, #0
 80113ac:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 80113ae:	2301      	movs	r3, #1
 80113b0:	e004      	b.n	80113bc <lv_img_decoder_built_in_open+0x24c>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 f899 	bl	80114ec <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 80113ba:	2300      	movs	r3, #0
    }
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3730      	adds	r7, #48	; 0x30
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bdb0      	pop	{r4, r5, r7, pc}
 80113c4:	08029c3c 	.word	0x08029c3c

080113c8 <lv_img_decoder_built_in_read_line>:

static lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b088      	sub	sp, #32
 80113cc:	af02      	add	r7, sp, #8
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	4611      	mov	r1, r2
 80113d4:	461a      	mov	r2, r3
 80113d6:	460b      	mov	r3, r1
 80113d8:	80fb      	strh	r3, [r7, #6]
 80113da:	4613      	mov	r3, r2
 80113dc:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 80113de:	2300      	movs	r3, #0
 80113e0:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	7c1b      	ldrb	r3, [r3, #16]
 80113e6:	f003 031f 	and.w	r3, r3, #31
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	2b04      	cmp	r3, #4
 80113ee:	d00d      	beq.n	801140c <lv_img_decoder_built_in_read_line+0x44>
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	7c1b      	ldrb	r3, [r3, #16]
 80113f4:	f003 031f 	and.w	r3, r3, #31
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	2b05      	cmp	r3, #5
 80113fc:	d006      	beq.n	801140c <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	7c1b      	ldrb	r3, [r3, #16]
 8011402:	f003 031f 	and.w	r3, r3, #31
 8011406:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011408:	2b06      	cmp	r3, #6
 801140a:	d112      	bne.n	8011432 <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	7b1b      	ldrb	r3, [r3, #12]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d166      	bne.n	80114e2 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8011414:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8011418:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801141c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	4603      	mov	r3, r0
 8011426:	68b8      	ldr	r0, [r7, #8]
 8011428:	f000 f88c 	bl	8011544 <lv_img_decoder_built_in_line_true_color>
 801142c:	4603      	mov	r3, r0
 801142e:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011430:	e057      	b.n	80114e2 <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	7c1b      	ldrb	r3, [r3, #16]
 8011436:	f003 031f 	and.w	r3, r3, #31
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b0b      	cmp	r3, #11
 801143e:	d014      	beq.n	801146a <lv_img_decoder_built_in_read_line+0xa2>
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	7c1b      	ldrb	r3, [r3, #16]
 8011444:	f003 031f 	and.w	r3, r3, #31
 8011448:	b2db      	uxtb	r3, r3
 801144a:	2b0c      	cmp	r3, #12
 801144c:	d00d      	beq.n	801146a <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	7c1b      	ldrb	r3, [r3, #16]
 8011452:	f003 031f 	and.w	r3, r3, #31
 8011456:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8011458:	2b0d      	cmp	r3, #13
 801145a:	d006      	beq.n	801146a <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	7c1b      	ldrb	r3, [r3, #16]
 8011460:	f003 031f 	and.w	r3, r3, #31
 8011464:	b2db      	uxtb	r3, r3
 8011466:	2b0e      	cmp	r3, #14
 8011468:	d10e      	bne.n	8011488 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 801146a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801146e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011472:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	4603      	mov	r3, r0
 801147c:	68b8      	ldr	r0, [r7, #8]
 801147e:	f000 f8bf 	bl	8011600 <lv_img_decoder_built_in_line_alpha>
 8011482:	4603      	mov	r3, r0
 8011484:	75fb      	strb	r3, [r7, #23]
 8011486:	e02c      	b.n	80114e2 <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	7c1b      	ldrb	r3, [r3, #16]
 801148c:	f003 031f 	and.w	r3, r3, #31
 8011490:	b2db      	uxtb	r3, r3
 8011492:	2b07      	cmp	r3, #7
 8011494:	d014      	beq.n	80114c0 <lv_img_decoder_built_in_read_line+0xf8>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	7c1b      	ldrb	r3, [r3, #16]
 801149a:	f003 031f 	and.w	r3, r3, #31
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b08      	cmp	r3, #8
 80114a2:	d00d      	beq.n	80114c0 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	7c1b      	ldrb	r3, [r3, #16]
 80114a8:	f003 031f 	and.w	r3, r3, #31
 80114ac:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80114ae:	2b09      	cmp	r3, #9
 80114b0:	d006      	beq.n	80114c0 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	7c1b      	ldrb	r3, [r3, #16]
 80114b6:	f003 031f 	and.w	r3, r3, #31
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b0a      	cmp	r3, #10
 80114be:	d10e      	bne.n	80114de <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 80114c0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80114c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80114c8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	4603      	mov	r3, r0
 80114d2:	68b8      	ldr	r0, [r7, #8]
 80114d4:	f000 faaa 	bl	8011a2c <lv_img_decoder_built_in_line_indexed>
 80114d8:	4603      	mov	r3, r0
 80114da:	75fb      	strb	r3, [r7, #23]
 80114dc:	e001      	b.n	80114e2 <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 80114de:	2300      	movs	r3, #0
 80114e0:	e000      	b.n	80114e4 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 80114e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3718      	adds	r7, #24
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <lv_img_decoder_built_in_close>:

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	6a1b      	ldr	r3, [r3, #32]
 80114fa:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d01c      	beq.n	801153c <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d009      	beq.n	801151e <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4618      	mov	r0, r3
 8011510:	f001 fe62 	bl	80131d8 <lv_fs_close>
            lv_mem_free(user_data->f);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4618      	mov	r0, r3
 801151a:	f002 fa99 	bl	8013a50 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d004      	beq.n	8011530 <lv_img_decoder_built_in_close+0x44>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f002 fa90 	bl	8013a50 <lv_mem_free>

        lv_mem_free(user_data);
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f002 fa8d 	bl	8013a50 <lv_mem_free>

        dsc->user_data = NULL;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	2200      	movs	r2, #0
 801153a:	621a      	str	r2, [r3, #32]
    }
}
 801153c:	bf00      	nop
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <lv_img_decoder_built_in_line_true_color>:

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08a      	sub	sp, #40	; 0x28
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	4608      	mov	r0, r1
 801154e:	4611      	mov	r1, r2
 8011550:	461a      	mov	r2, r3
 8011552:	4603      	mov	r3, r0
 8011554:	817b      	strh	r3, [r7, #10]
 8011556:	460b      	mov	r3, r1
 8011558:	813b      	strh	r3, [r7, #8]
 801155a:	4613      	mov	r3, r2
 801155c:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6a1b      	ldr	r3, [r3, #32]
 8011562:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	7c1b      	ldrb	r3, [r3, #16]
 8011568:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801156c:	b2db      	uxtb	r3, r3
 801156e:	4618      	mov	r0, r3
 8011570:	f7f8 fe66 	bl	800a240 <lv_img_color_format_get_px_size>
 8011574:	4603      	mov	r3, r0
 8011576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 801157a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	6912      	ldr	r2, [r2, #16]
 8011582:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8011586:	b292      	uxth	r2, r2
 8011588:	fb02 f203 	mul.w	r2, r2, r3
 801158c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011590:	4413      	add	r3, r2
 8011592:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8011596:	fb02 f303 	mul.w	r3, r2, r3
 801159a:	10db      	asrs	r3, r3, #3
 801159c:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	3304      	adds	r3, #4
 80115a2:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	69f9      	ldr	r1, [r7, #28]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f001 fe79 	bl	80132a2 <lv_fs_seek>
 80115b0:	4603      	mov	r3, r0
 80115b2:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 80115b4:	7efb      	ldrb	r3, [r7, #27]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d001      	beq.n	80115be <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 80115ba:	2300      	movs	r3, #0
 80115bc:	e01c      	b.n	80115f8 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 80115be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80115c6:	08d2      	lsrs	r2, r2, #3
 80115c8:	b2d2      	uxtb	r2, r2
 80115ca:	fb02 f303 	mul.w	r3, r2, r3
 80115ce:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 80115d0:	2300      	movs	r3, #0
 80115d2:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 80115d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	f107 0310 	add.w	r3, r7, #16
 80115dc:	697a      	ldr	r2, [r7, #20]
 80115de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115e0:	f001 fe29 	bl	8013236 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 80115e4:	7efb      	ldrb	r3, [r7, #27]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d103      	bne.n	80115f2 <lv_img_decoder_built_in_line_true_color+0xae>
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d001      	beq.n	80115f6 <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 80115f2:	2300      	movs	r3, #0
 80115f4:	e000      	b.n	80115f8 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 80115f6:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3728      	adds	r7, #40	; 0x28
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b0d1      	sub	sp, #324	; 0x144
 8011604:	af00      	add	r7, sp, #0
 8011606:	f107 040c 	add.w	r4, r7, #12
 801160a:	6020      	str	r0, [r4, #0]
 801160c:	460c      	mov	r4, r1
 801160e:	4610      	mov	r0, r2
 8011610:	4619      	mov	r1, r3
 8011612:	f107 030a 	add.w	r3, r7, #10
 8011616:	4622      	mov	r2, r4
 8011618:	801a      	strh	r2, [r3, #0]
 801161a:	f107 0308 	add.w	r3, r7, #8
 801161e:	4602      	mov	r2, r0
 8011620:	801a      	strh	r2, [r3, #0]
 8011622:	1dbb      	adds	r3, r7, #6
 8011624:	460a      	mov	r2, r1
 8011626:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011628:	2300      	movs	r3, #0
 801162a:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 801162e:	23ff      	movs	r3, #255	; 0xff
 8011630:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8011634:	4bcc      	ldr	r3, [pc, #816]	; (8011968 <lv_img_decoder_built_in_line_alpha+0x368>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801163c:	4bcb      	ldr	r3, [pc, #812]	; (801196c <lv_img_decoder_built_in_line_alpha+0x36c>)
 801163e:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8011642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8011648:	f107 030c 	add.w	r3, r7, #12
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011652:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8011656:	2300      	movs	r3, #0
 8011658:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 801165c:	e022      	b.n	80116a4 <lv_img_decoder_built_in_line_alpha+0xa4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 801165e:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8011662:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8011666:	4613      	mov	r3, r2
 8011668:	005b      	lsls	r3, r3, #1
 801166a:	4413      	add	r3, r2
 801166c:	461a      	mov	r2, r3
 801166e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011672:	4413      	add	r3, r2
 8011674:	b2ca      	uxtb	r2, r1
 8011676:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8011678:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 801167c:	0a1b      	lsrs	r3, r3, #8
 801167e:	b299      	uxth	r1, r3
 8011680:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8011684:	4613      	mov	r3, r2
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	4413      	add	r3, r2
 801168a:	3301      	adds	r3, #1
 801168c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011690:	4413      	add	r3, r2
 8011692:	b2ca      	uxtb	r2, r1
 8011694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8011696:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 801169a:	b29b      	uxth	r3, r3
 801169c:	3301      	adds	r3, #1
 801169e:	b29b      	uxth	r3, r3
 80116a0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80116a4:	1dbb      	adds	r3, r7, #6
 80116a6:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 80116aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	dbd5      	blt.n	801165e <lv_img_decoder_built_in_line_alpha+0x5e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 80116b8:	f107 030c 	add.w	r3, r7, #12
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	7c1b      	ldrb	r3, [r3, #16]
 80116c0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f8 fdba 	bl	800a240 <lv_img_color_format_get_px_size>
 80116cc:	4603      	mov	r3, r0
 80116ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80116d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80116d6:	2201      	movs	r2, #1
 80116d8:	fa02 f303 	lsl.w	r3, r2, r3
 80116dc:	b29b      	uxth	r3, r3
 80116de:	3b01      	subs	r3, #1
 80116e0:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    lv_coord_t w = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    uint32_t ofs = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    int8_t pos   = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    switch(dsc->header.cf) {
 80116f6:	f107 030c 	add.w	r3, r7, #12
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	7c1b      	ldrb	r3, [r3, #16]
 80116fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011702:	b2db      	uxtb	r3, r3
 8011704:	3b0b      	subs	r3, #11
 8011706:	2b03      	cmp	r3, #3
 8011708:	f200 80f0 	bhi.w	80118ec <lv_img_decoder_built_in_line_alpha+0x2ec>
 801170c:	a201      	add	r2, pc, #4	; (adr r2, 8011714 <lv_img_decoder_built_in_line_alpha+0x114>)
 801170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011712:	bf00      	nop
 8011714:	08011725 	.word	0x08011725
 8011718:	080117a5 	.word	0x080117a5
 801171c:	08011829 	.word	0x08011829
 8011720:	080118ad 	.word	0x080118ad
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011724:	f107 030c 	add.w	r3, r7, #12
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	691b      	ldr	r3, [r3, #16]
 801172c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011730:	b29b      	uxth	r3, r3
 8011732:	10db      	asrs	r3, r3, #3
 8011734:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x7) w++;
 8011738:	f107 030c 	add.w	r3, r7, #12
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	691b      	ldr	r3, [r3, #16]
 8011740:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011744:	b29b      	uxth	r3, r3
 8011746:	f003 0307 	and.w	r3, r3, #7
 801174a:	2b00      	cmp	r3, #0
 801174c:	d006      	beq.n	801175c <lv_img_decoder_built_in_line_alpha+0x15c>
 801174e:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8011752:	b29b      	uxth	r3, r3
 8011754:	3301      	adds	r3, #1
 8011756:	b29b      	uxth	r3, r3
 8011758:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 3); /*First pixel*/
 801175c:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8011760:	f107 0208 	add.w	r2, r7, #8
 8011764:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011768:	fb02 f303 	mul.w	r3, r2, r3
 801176c:	f107 020a 	add.w	r2, r7, #10
 8011770:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011774:	10d2      	asrs	r2, r2, #3
 8011776:	b212      	sxth	r2, r2
 8011778:	4413      	add	r3, r2
 801177a:	461a      	mov	r2, r3
 801177c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011780:	4413      	add	r3, r2
 8011782:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 7 - (x & 0x7);
 8011786:	f107 030a 	add.w	r3, r7, #10
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	b25b      	sxtb	r3, r3
 801178e:	43db      	mvns	r3, r3
 8011790:	b25b      	sxtb	r3, r3
 8011792:	f003 0307 	and.w	r3, r3, #7
 8011796:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha1_opa_table;
 801179a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801179e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 80117a2:	e0a3      	b.n	80118ec <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80117a4:	f107 030c 	add.w	r3, r7, #12
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	109b      	asrs	r3, r3, #2
 80117b4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x3) w++;
 80117b8:	f107 030c 	add.w	r3, r7, #12
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	691b      	ldr	r3, [r3, #16]
 80117c0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	f003 0303 	and.w	r3, r3, #3
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d006      	beq.n	80117dc <lv_img_decoder_built_in_line_alpha+0x1dc>
 80117ce:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	3301      	adds	r3, #1
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 2); /*First pixel*/
 80117dc:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80117e0:	f107 0208 	add.w	r2, r7, #8
 80117e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117e8:	fb02 f303 	mul.w	r3, r2, r3
 80117ec:	f107 020a 	add.w	r2, r7, #10
 80117f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117f4:	1092      	asrs	r2, r2, #2
 80117f6:	b212      	sxth	r2, r2
 80117f8:	4413      	add	r3, r2
 80117fa:	461a      	mov	r2, r3
 80117fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011800:	4413      	add	r3, r2
 8011802:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 6 - ((x & 0x3) * 2);
 8011806:	f107 030a 	add.w	r3, r7, #10
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	43db      	mvns	r3, r3
 801180e:	b2db      	uxtb	r3, r3
 8011810:	f003 0303 	and.w	r3, r3, #3
 8011814:	b2db      	uxtb	r3, r3
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha2_opa_table;
 801181e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8011822:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 8011826:	e061      	b.n	80118ec <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011828:	f107 030c 	add.w	r3, r7, #12
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011834:	b29b      	uxth	r3, r3
 8011836:	105b      	asrs	r3, r3, #1
 8011838:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x1) w++;
 801183c:	f107 030c 	add.w	r3, r7, #12
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011848:	b29b      	uxth	r3, r3
 801184a:	f003 0301 	and.w	r3, r3, #1
 801184e:	2b00      	cmp	r3, #0
 8011850:	d006      	beq.n	8011860 <lv_img_decoder_built_in_line_alpha+0x260>
 8011852:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8011856:	b29b      	uxth	r3, r3
 8011858:	3301      	adds	r3, #1
 801185a:	b29b      	uxth	r3, r3
 801185c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 1); /*First pixel*/
 8011860:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8011864:	f107 0208 	add.w	r2, r7, #8
 8011868:	f9b2 2000 	ldrsh.w	r2, [r2]
 801186c:	fb02 f303 	mul.w	r3, r2, r3
 8011870:	f107 020a 	add.w	r2, r7, #10
 8011874:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011878:	1052      	asrs	r2, r2, #1
 801187a:	b212      	sxth	r2, r2
 801187c:	4413      	add	r3, r2
 801187e:	461a      	mov	r2, r3
 8011880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011884:	4413      	add	r3, r2
 8011886:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 4 - ((x & 0x1) * 4);
 801188a:	f107 030a 	add.w	r3, r7, #10
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	f003 0301 	and.w	r3, r3, #1
 8011894:	2b00      	cmp	r3, #0
 8011896:	d101      	bne.n	801189c <lv_img_decoder_built_in_line_alpha+0x29c>
 8011898:	2304      	movs	r3, #4
 801189a:	e000      	b.n	801189e <lv_img_decoder_built_in_line_alpha+0x29e>
 801189c:	2300      	movs	r3, #0
 801189e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha4_opa_table;
 80118a2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80118a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 80118aa:	e01f      	b.n	80118ec <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80118ac:	f107 030c 	add.w	r3, r7, #12
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + x;  /*First pixel*/
 80118be:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80118c2:	f107 0208 	add.w	r2, r7, #8
 80118c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80118ca:	fb02 f203 	mul.w	r2, r2, r3
 80118ce:	f107 030a 	add.w	r3, r7, #10
 80118d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118d6:	4413      	add	r3, r2
 80118d8:	461a      	mov	r2, r3
 80118da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80118de:	4413      	add	r3, r2
 80118e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos = 0;
 80118e4:	2300      	movs	r3, #0
 80118e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80118ea:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80118ec:	f107 030c 	add.w	r3, r7, #12
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	6a1b      	ldr	r3, [r3, #32]
 80118f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 80118f8:	2300      	movs	r3, #0
 80118fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80118fe:	f107 030c 	add.w	r3, r7, #12
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	7b1b      	ldrb	r3, [r3, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10e      	bne.n	8011928 <lv_img_decoder_built_in_line_alpha+0x328>
        const lv_img_dsc_t * img_dsc = dsc->src;
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        data_tmp = img_dsc->data + ofs;
 8011916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801191a:	689a      	ldr	r2, [r3, #8]
 801191c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011920:	4413      	add	r3, r2
 8011922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011926:	e017      	b.n	8011958 <lv_img_decoder_built_in_line_alpha+0x358>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011928:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011932:	3304      	adds	r3, #4
 8011934:	4619      	mov	r1, r3
 8011936:	4610      	mov	r0, r2
 8011938:	f001 fcb3 	bl	80132a2 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 801193c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011940:	6818      	ldr	r0, [r3, #0]
 8011942:	f9b7 2136 	ldrsh.w	r2, [r7, #310]	; 0x136
 8011946:	f107 0110 	add.w	r1, r7, #16
 801194a:	2300      	movs	r3, #0
 801194c:	f001 fc73 	bl	8013236 <lv_fs_read>
        data_tmp = fs_buf;
 8011950:	f107 0310 	add.w	r3, r7, #16
 8011954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8011958:	2300      	movs	r3, #0
 801195a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 801195e:	2300      	movs	r3, #0
 8011960:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8011964:	e054      	b.n	8011a10 <lv_img_decoder_built_in_line_alpha+0x410>
 8011966:	bf00      	nop
 8011968:	08029c40 	.word	0x08029c40
 801196c:	08029c44 	.word	0x08029c44
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8011970:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8011974:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011978:	4413      	add	r3, r2
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	4619      	mov	r1, r3
 801197e:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 8011982:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8011986:	fa02 f303 	lsl.w	r3, r2, r3
 801198a:	ea01 0203 	and.w	r2, r1, r3
 801198e:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8011992:	fa42 f303 	asr.w	r3, r2, r3
 8011996:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801199a:	f107 030c 	add.w	r3, r7, #12
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	7c1b      	ldrb	r3, [r3, #16]
 80119a2:	f003 031f 	and.w	r3, r3, #31
 80119a6:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80119a8:	2b0e      	cmp	r3, #14
 80119aa:	d006      	beq.n	80119ba <lv_img_decoder_built_in_line_alpha+0x3ba>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80119ac:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80119b0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80119b4:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80119b6:	781a      	ldrb	r2, [r3, #0]
 80119b8:	e001      	b.n	80119be <lv_img_decoder_built_in_line_alpha+0x3be>
 80119ba:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 80119be:	f9b7 113e 	ldrsh.w	r1, [r7, #318]	; 0x13e
 80119c2:	460b      	mov	r3, r1
 80119c4:	005b      	lsls	r3, r3, #1
 80119c6:	440b      	add	r3, r1
 80119c8:	3302      	adds	r3, #2
 80119ca:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80119ce:	440b      	add	r3, r1
 80119d0:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 80119d2:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80119d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if(pos < 0) {
 80119e2:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	da0b      	bge.n	8011a02 <lv_img_decoder_built_in_line_alpha+0x402>
            pos = 8 - px_size;
 80119ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119ee:	f1c3 0308 	rsb	r3, r3, #8
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            data_tmp++;
 80119f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119fc:	3301      	adds	r3, #1
 80119fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for(i = 0; i < len; i++) {
 8011a02:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	3301      	adds	r3, #1
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8011a10:	1dbb      	adds	r3, r7, #6
 8011a12:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8011a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	dba8      	blt.n	8011970 <lv_img_decoder_built_in_line_alpha+0x370>
        }
    }

    return LV_RES_OK;
 8011a1e:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd90      	pop	{r4, r7, pc}
 8011a2a:	bf00      	nop

08011a2c <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8011a2c:	b590      	push	{r4, r7, lr}
 8011a2e:	b0cb      	sub	sp, #300	; 0x12c
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	f107 040c 	add.w	r4, r7, #12
 8011a36:	6020      	str	r0, [r4, #0]
 8011a38:	460c      	mov	r4, r1
 8011a3a:	4610      	mov	r0, r2
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	f107 030a 	add.w	r3, r7, #10
 8011a42:	4622      	mov	r2, r4
 8011a44:	801a      	strh	r2, [r3, #0]
 8011a46:	f107 0308 	add.w	r3, r7, #8
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	801a      	strh	r2, [r3, #0]
 8011a4e:	1dbb      	adds	r3, r7, #6
 8011a50:	460a      	mov	r2, r1
 8011a52:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8011a54:	f107 030c 	add.w	r3, r7, #12
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	7c1b      	ldrb	r3, [r3, #16]
 8011a5c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7f8 fbec 	bl	800a240 <lv_img_color_format_get_px_size>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011a6e:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011a72:	2201      	movs	r2, #1
 8011a74:	fa02 f303 	lsl.w	r3, r2, r3
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

    lv_coord_t w = 0;
 8011a80:	2300      	movs	r3, #0
 8011a82:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    int8_t pos   = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
    uint32_t ofs = 0;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    switch(dsc->header.cf) {
 8011a92:	f107 030c 	add.w	r3, r7, #12
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	7c1b      	ldrb	r3, [r3, #16]
 8011a9a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	3b07      	subs	r3, #7
 8011aa2:	2b03      	cmp	r3, #3
 8011aa4:	f200 80f9 	bhi.w	8011c9a <lv_img_decoder_built_in_line_indexed+0x26e>
 8011aa8:	a201      	add	r2, pc, #4	; (adr r2, 8011ab0 <lv_img_decoder_built_in_line_indexed+0x84>)
 8011aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aae:	bf00      	nop
 8011ab0:	08011ac1 	.word	0x08011ac1
 8011ab4:	08011b43 	.word	0x08011b43
 8011ab8:	08011bc9 	.word	0x08011bc9
 8011abc:	08011c4f 	.word	0x08011c4f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011ac0:	f107 030c 	add.w	r3, r7, #12
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	10db      	asrs	r3, r3, #3
 8011ad0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x7) w++;
 8011ad4:	f107 030c 	add.w	r3, r7, #12
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	691b      	ldr	r3, [r3, #16]
 8011adc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	f003 0307 	and.w	r3, r3, #7
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <lv_img_decoder_built_in_line_indexed+0xcc>
 8011aea:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	3301      	adds	r3, #1
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 3); /*First pixel*/
 8011af8:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011afc:	f107 0208 	add.w	r2, r7, #8
 8011b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b04:	fb02 f303 	mul.w	r3, r2, r3
 8011b08:	f107 020a 	add.w	r2, r7, #10
 8011b0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b10:	10d2      	asrs	r2, r2, #3
 8011b12:	b212      	sxth	r2, r2
 8011b14:	4413      	add	r3, r2
 8011b16:	461a      	mov	r2, r3
 8011b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b1c:	4413      	add	r3, r2
 8011b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 8;                /*Skip the palette*/
 8011b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b26:	3308      	adds	r3, #8
 8011b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 7 - (x & 0x7);
 8011b2c:	f107 030a 	add.w	r3, r7, #10
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	b25b      	sxtb	r3, r3
 8011b34:	43db      	mvns	r3, r3
 8011b36:	b25b      	sxtb	r3, r3
 8011b38:	f003 0307 	and.w	r3, r3, #7
 8011b3c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011b40:	e0ab      	b.n	8011c9a <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011b42:	f107 030c 	add.w	r3, r7, #12
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	109b      	asrs	r3, r3, #2
 8011b52:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x3) w++;
 8011b56:	f107 030c 	add.w	r3, r7, #12
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	f003 0303 	and.w	r3, r3, #3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <lv_img_decoder_built_in_line_indexed+0x14e>
 8011b6c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	3301      	adds	r3, #1
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 2); /*First pixel*/
 8011b7a:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011b7e:	f107 0208 	add.w	r2, r7, #8
 8011b82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b86:	fb02 f303 	mul.w	r3, r2, r3
 8011b8a:	f107 020a 	add.w	r2, r7, #10
 8011b8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b92:	1092      	asrs	r2, r2, #2
 8011b94:	b212      	sxth	r2, r2
 8011b96:	4413      	add	r3, r2
 8011b98:	461a      	mov	r2, r3
 8011b9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 16;               /*Skip the palette*/
 8011ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011ba8:	3310      	adds	r3, #16
 8011baa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 6 - ((x & 0x3) * 2);
 8011bae:	f107 030a 	add.w	r3, r7, #10
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	43db      	mvns	r3, r3
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	f003 0303 	and.w	r3, r3, #3
 8011bbc:	b2db      	uxtb	r3, r3
 8011bbe:	005b      	lsls	r3, r3, #1
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011bc6:	e068      	b.n	8011c9a <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011bc8:	f107 030c 	add.w	r3, r7, #12
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	105b      	asrs	r3, r3, #1
 8011bd8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x1) w++;
 8011bdc:	f107 030c 	add.w	r3, r7, #12
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	691b      	ldr	r3, [r3, #16]
 8011be4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	f003 0301 	and.w	r3, r3, #1
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d006      	beq.n	8011c00 <lv_img_decoder_built_in_line_indexed+0x1d4>
 8011bf2:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 1); /*First pixel*/
 8011c00:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011c04:	f107 0208 	add.w	r2, r7, #8
 8011c08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c0c:	fb02 f303 	mul.w	r3, r2, r3
 8011c10:	f107 020a 	add.w	r2, r7, #10
 8011c14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c18:	1052      	asrs	r2, r2, #1
 8011c1a:	b212      	sxth	r2, r2
 8011c1c:	4413      	add	r3, r2
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c24:	4413      	add	r3, r2
 8011c26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 64;               /*Skip the palette*/
 8011c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c2e:	3340      	adds	r3, #64	; 0x40
 8011c30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 4 - ((x & 0x1) * 4);
 8011c34:	f107 030a 	add.w	r3, r7, #10
 8011c38:	881b      	ldrh	r3, [r3, #0]
 8011c3a:	f003 0301 	and.w	r3, r3, #1
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d101      	bne.n	8011c46 <lv_img_decoder_built_in_line_indexed+0x21a>
 8011c42:	2304      	movs	r3, #4
 8011c44:	e000      	b.n	8011c48 <lv_img_decoder_built_in_line_indexed+0x21c>
 8011c46:	2300      	movs	r3, #0
 8011c48:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011c4c:	e025      	b.n	8011c9a <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8011c4e:	f107 030c 	add.w	r3, r7, #12
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	691b      	ldr	r3, [r3, #16]
 8011c56:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + x;  /*First pixel*/
 8011c60:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011c64:	f107 0208 	add.w	r2, r7, #8
 8011c68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c6c:	fb02 f203 	mul.w	r2, r2, r3
 8011c70:	f107 030a 	add.w	r3, r7, #10
 8011c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c78:	4413      	add	r3, r2
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c80:	4413      	add	r3, r2
 8011c82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 1024;       /*Skip the palette*/
 8011c86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011c98:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011c9a:	f107 030c 	add.w	r3, r7, #12
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	6a1b      	ldr	r3, [r3, #32]
 8011ca2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011cac:	f107 030c 	add.w	r3, r7, #12
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	7b1b      	ldrb	r3, [r3, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10e      	bne.n	8011cd6 <lv_img_decoder_built_in_line_indexed+0x2aa>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8011cb8:	f107 030c 	add.w	r3, r7, #12
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        data_tmp                     = img_dsc->data + ofs;
 8011cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011cc8:	689a      	ldr	r2, [r3, #8]
 8011cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011cce:	4413      	add	r3, r2
 8011cd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8011cd4:	e017      	b.n	8011d06 <lv_img_decoder_built_in_line_indexed+0x2da>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	f001 fadc 	bl	80132a2 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8011cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8011cf4:	f107 0110 	add.w	r1, r7, #16
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f001 fa9c 	bl	8013236 <lv_fs_read>
        data_tmp = fs_buf;
 8011cfe:	f107 0310 	add.w	r3, r7, #16
 8011d02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8011d06:	2300      	movs	r3, #0
 8011d08:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
 8011d0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    for(i = 0; i < len; i++) {
 8011d14:	2300      	movs	r3, #0
 8011d16:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8011d1a:	e042      	b.n	8011da2 <lv_img_decoder_built_in_line_indexed+0x376>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8011d1c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8011d20:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8011d24:	4413      	add	r3, r2
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8011d2e:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d32:	fa02 f303 	lsl.w	r3, r2, r3
 8011d36:	ea01 0203 	and.w	r2, r1, r3
 8011d3a:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d3e:	fa42 f303 	asr.w	r3, r2, r3
 8011d42:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cbuf[i] = user_data->palette[val_act];
 8011d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011d4a:	685a      	ldr	r2, [r3, #4]
 8011d4c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	441a      	add	r2, r3
 8011d54:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8011d5e:	440b      	add	r3, r1
 8011d60:	8812      	ldrh	r2, [r2, #0]
 8011d62:	801a      	strh	r2, [r3, #0]

        pos -= px_size;
 8011d64:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 8011d68:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011d6c:	1ad3      	subs	r3, r2, r3
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
        if(pos < 0) {
 8011d74:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	da0b      	bge.n	8011d94 <lv_img_decoder_built_in_line_indexed+0x368>
            pos = 8 - px_size;
 8011d7c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011d80:	f1c3 0308 	rsb	r3, r3, #8
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            data_tmp++;
 8011d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011d8e:	3301      	adds	r3, #1
 8011d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(i = 0; i < len; i++) {
 8011d94:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8011da2:	1dbb      	adds	r3, r7, #6
 8011da4:	f9b7 211a 	ldrsh.w	r2, [r7, #282]	; 0x11a
 8011da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	dbb5      	blt.n	8011d1c <lv_img_decoder_built_in_line_indexed+0x2f0>
        }
    }

    return LV_RES_OK;
 8011db0:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd90      	pop	{r4, r7, pc}

08011dbc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	4798      	blx	r3
 8011dd0:	4603      	mov	r3, r0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8011dda:	b590      	push	{r4, r7, lr}
 8011ddc:	b085      	sub	sp, #20
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	607a      	str	r2, [r7, #4]
 8011de6:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681c      	ldr	r4, [r3, #0]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	68b9      	ldr	r1, [r7, #8]
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	47a0      	blx	r4
 8011df6:	4603      	mov	r3, r0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3714      	adds	r7, #20
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd90      	pop	{r4, r7, pc}

08011e00 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b088      	sub	sp, #32
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8011e0c:	f107 0114 	add.w	r1, r7, #20
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f7ff ffe0 	bl	8011dda <lv_font_get_glyph_dsc>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 8011e1e:	7ffb      	ldrb	r3, [r7, #31]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d001      	beq.n	8011e28 <lv_font_get_glyph_width+0x28>
 8011e24:	8abb      	ldrh	r3, [r7, #20]
 8011e26:	e000      	b.n	8011e2a <lv_font_get_glyph_width+0x2a>
    else return 0;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3720      	adds	r7, #32
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b086      	sub	sp, #24
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e42:	6839      	ldr	r1, [r7, #0]
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f000 f883 	bl	8011f50 <get_glyph_dsc_id>
 8011e4a:	6138      	str	r0, [r7, #16]
    if(!gid) return false;
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d101      	bne.n	8011e56 <lv_font_get_bitmap_fmt_txt+0x24>
 8011e52:	2300      	movs	r3, #0
 8011e54:	e011      	b.n	8011e7a <lv_font_get_bitmap_fmt_txt+0x48>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	685a      	ldr	r2, [r3, #4]
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	00db      	lsls	r3, r3, #3
 8011e5e:	4413      	add	r3, r2
 8011e60:	60fb      	str	r3, [r7, #12]

    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d007      	beq.n	8011e78 <lv_font_get_bitmap_fmt_txt+0x46>
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	6812      	ldr	r2, [r2, #0]
 8011e70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011e74:	4413      	add	r3, r2
 8011e76:	e000      	b.n	8011e7a <lv_font_get_bitmap_fmt_txt+0x48>

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3718      	adds	r7, #24
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b08a      	sub	sp, #40	; 0x28
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	60f8      	str	r0, [r7, #12]
 8011e8a:	60b9      	str	r1, [r7, #8]
 8011e8c:	607a      	str	r2, [r7, #4]
 8011e8e:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e96:	6879      	ldr	r1, [r7, #4]
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f000 f859 	bl	8011f50 <get_glyph_dsc_id>
 8011e9e:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d101      	bne.n	8011eaa <lv_font_get_glyph_dsc_fmt_txt+0x28>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e04e      	b.n	8011f48 <lv_font_get_glyph_dsc_fmt_txt+0xc6>

    int8_t kvalue = 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(fdsc->kern_dsc) {
 8011eb0:	6a3b      	ldr	r3, [r7, #32]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00f      	beq.n	8011ed8 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 f848 	bl	8011f50 <get_glyph_dsc_id>
 8011ec0:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d007      	beq.n	8011ed8 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	69f9      	ldr	r1, [r7, #28]
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	f000 f97b 	bl	80121c8 <get_kern_value>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	685a      	ldr	r2, [r3, #4]
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	00db      	lsls	r3, r3, #3
 8011ee0:	4413      	add	r3, r2
 8011ee2:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	885b      	ldrh	r3, [r3, #2]
 8011ee8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	4619      	mov	r1, r3
 8011ef0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011ef4:	6a3a      	ldr	r2, [r7, #32]
 8011ef6:	8a12      	ldrh	r2, [r2, #16]
 8011ef8:	fb02 f303 	mul.w	r3, r2, r3
 8011efc:	111b      	asrs	r3, r3, #4
 8011efe:	440b      	add	r3, r1
 8011f00:	613b      	str	r3, [r7, #16]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	3308      	adds	r3, #8
 8011f06:	091b      	lsrs	r3, r3, #4
 8011f08:	613b      	str	r3, [r7, #16]

    dsc_out->adv_w = adv_w;
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	795a      	ldrb	r2, [r3, #5]
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	791a      	ldrb	r2, [r3, #4]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	79db      	ldrb	r3, [r3, #7]
 8011f30:	b25a      	sxtb	r2, r3
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = fdsc->bpp;
 8011f36:	6a3b      	ldr	r3, [r7, #32]
 8011f38:	7cdb      	ldrb	r3, [r3, #19]
 8011f3a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	461a      	mov	r2, r3
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	719a      	strb	r2, [r3, #6]

    return true;
 8011f46:	2301      	movs	r3, #1
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3728      	adds	r7, #40	; 0x28
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8011f50:	b590      	push	{r4, r7, lr}
 8011f52:	b08f      	sub	sp, #60	; 0x3c
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d101      	bne.n	8011f64 <get_glyph_dsc_id+0x14>
 8011f60:	2300      	movs	r3, #0
 8011f62:	e12a      	b.n	80121ba <get_glyph_dsc_id+0x26a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	627b      	str	r3, [r7, #36]	; 0x24

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6c:	695b      	ldr	r3, [r3, #20]
 8011f6e:	683a      	ldr	r2, [r7, #0]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d102      	bne.n	8011f7a <get_glyph_dsc_id+0x2a>
 8011f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f76:	699b      	ldr	r3, [r3, #24]
 8011f78:	e11f      	b.n	80121ba <get_glyph_dsc_id+0x26a>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011f7e:	e10b      	b.n	8012198 <get_glyph_dsc_id+0x248>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	6899      	ldr	r1, [r3, #8]
 8011f84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f86:	4613      	mov	r3, r2
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	009b      	lsls	r3, r3, #2
 8011f8e:	440b      	add	r3, r1
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	683a      	ldr	r2, [r7, #0]
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9a:	6899      	ldr	r1, [r3, #8]
 8011f9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	889b      	ldrh	r3, [r3, #4]
 8011faa:	461a      	mov	r2, r3
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d203      	bcs.n	8011fba <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011fb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011fb8:	e0ee      	b.n	8012198 <get_glyph_dsc_id+0x248>
        uint32_t glyph_id = 0;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc0:	6899      	ldr	r1, [r3, #8]
 8011fc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	4413      	add	r3, r2
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	440b      	add	r3, r1
 8011fce:	7c9b      	ldrb	r3, [r3, #18]
 8011fd0:	f003 0303 	and.w	r3, r3, #3
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10d      	bne.n	8011ff6 <get_glyph_dsc_id+0xa6>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	6899      	ldr	r1, [r3, #8]
 8011fde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	440b      	add	r3, r1
 8011fea:	88db      	ldrh	r3, [r3, #6]
 8011fec:	461a      	mov	r2, r3
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ff4:	e0c8      	b.n	8012188 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	6899      	ldr	r1, [r3, #8]
 8011ffa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	4413      	add	r3, r2
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	440b      	add	r3, r1
 8012006:	7c9b      	ldrb	r3, [r3, #18]
 8012008:	f003 0303 	and.w	r3, r3, #3
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b01      	cmp	r3, #1
 8012010:	d11a      	bne.n	8012048 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	6899      	ldr	r1, [r3, #8]
 8012016:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012018:	4613      	mov	r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	440b      	add	r3, r1
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	6899      	ldr	r1, [r3, #8]
 801202a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801202c:	4613      	mov	r3, r2
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	4413      	add	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	440b      	add	r3, r1
 8012036:	88db      	ldrh	r3, [r3, #6]
 8012038:	4619      	mov	r1, r3
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	4413      	add	r3, r2
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	440b      	add	r3, r1
 8012044:	62bb      	str	r3, [r7, #40]	; 0x28
 8012046:	e09f      	b.n	8012188 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	6899      	ldr	r1, [r3, #8]
 801204c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801204e:	4613      	mov	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	440b      	add	r3, r1
 8012058:	7c9b      	ldrb	r3, [r3, #18]
 801205a:	f003 0303 	and.w	r3, r3, #3
 801205e:	b2db      	uxtb	r3, r3
 8012060:	2b02      	cmp	r3, #2
 8012062:	d13b      	bne.n	80120dc <get_glyph_dsc_id+0x18c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	6899      	ldr	r1, [r3, #8]
 8012068:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801206a:	4613      	mov	r3, r2
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	4413      	add	r3, r2
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	440b      	add	r3, r1
 8012074:	689c      	ldr	r4, [r3, #8]
 8012076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012078:	6899      	ldr	r1, [r3, #8]
 801207a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801207c:	4613      	mov	r3, r2
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	4413      	add	r3, r2
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	440b      	add	r3, r1
 8012086:	8a1b      	ldrh	r3, [r3, #16]
 8012088:	461a      	mov	r2, r3
 801208a:	f107 0008 	add.w	r0, r7, #8
 801208e:	4b4d      	ldr	r3, [pc, #308]	; (80121c4 <get_glyph_dsc_id+0x274>)
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	2302      	movs	r3, #2
 8012094:	4621      	mov	r1, r4
 8012096:	f002 fbfb 	bl	8014890 <lv_utils_bsearch>
 801209a:	6178      	str	r0, [r7, #20]

            if(p) {
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d072      	beq.n	8012188 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 80120a2:	6979      	ldr	r1, [r7, #20]
 80120a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a6:	6898      	ldr	r0, [r3, #8]
 80120a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120aa:	4613      	mov	r3, r2
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	4413      	add	r3, r2
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	4403      	add	r3, r0
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	1acb      	subs	r3, r1, r3
 80120b8:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	085b      	lsrs	r3, r3, #1
 80120be:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80120c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c2:	6899      	ldr	r1, [r3, #8]
 80120c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120c6:	4613      	mov	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	4413      	add	r3, r2
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	440b      	add	r3, r1
 80120d0:	88db      	ldrh	r3, [r3, #6]
 80120d2:	461a      	mov	r2, r3
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	4413      	add	r3, r2
 80120d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80120da:	e055      	b.n	8012188 <get_glyph_dsc_id+0x238>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	6899      	ldr	r1, [r3, #8]
 80120e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120e2:	4613      	mov	r3, r2
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	4413      	add	r3, r2
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	440b      	add	r3, r1
 80120ec:	7c9b      	ldrb	r3, [r3, #18]
 80120ee:	f003 0303 	and.w	r3, r3, #3
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	2b03      	cmp	r3, #3
 80120f6:	d147      	bne.n	8012188 <get_glyph_dsc_id+0x238>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80120f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fa:	6899      	ldr	r1, [r3, #8]
 80120fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120fe:	4613      	mov	r3, r2
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	4413      	add	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	440b      	add	r3, r1
 8012108:	689c      	ldr	r4, [r3, #8]
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	6899      	ldr	r1, [r3, #8]
 801210e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012110:	4613      	mov	r3, r2
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	4413      	add	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	440b      	add	r3, r1
 801211a:	8a1b      	ldrh	r3, [r3, #16]
 801211c:	461a      	mov	r2, r3
 801211e:	f107 0008 	add.w	r0, r7, #8
 8012122:	4b28      	ldr	r3, [pc, #160]	; (80121c4 <get_glyph_dsc_id+0x274>)
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	2302      	movs	r3, #2
 8012128:	4621      	mov	r1, r4
 801212a:	f002 fbb1 	bl	8014890 <lv_utils_bsearch>
 801212e:	6238      	str	r0, [r7, #32]

            if(p) {
 8012130:	6a3b      	ldr	r3, [r7, #32]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d028      	beq.n	8012188 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8012136:	6a39      	ldr	r1, [r7, #32]
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	6898      	ldr	r0, [r3, #8]
 801213c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801213e:	4613      	mov	r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	4403      	add	r3, r0
 8012148:	689b      	ldr	r3, [r3, #8]
 801214a:	1acb      	subs	r3, r1, r3
 801214c:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	085b      	lsrs	r3, r3, #1
 8012152:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8012154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012156:	6899      	ldr	r1, [r3, #8]
 8012158:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801215a:	4613      	mov	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	4413      	add	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	440b      	add	r3, r1
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	6899      	ldr	r1, [r3, #8]
 801216c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801216e:	4613      	mov	r3, r2
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	4413      	add	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	440b      	add	r3, r1
 8012178:	88db      	ldrh	r3, [r3, #6]
 801217a:	4619      	mov	r1, r3
 801217c:	69ba      	ldr	r2, [r7, #24]
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	4413      	add	r3, r2
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	440b      	add	r3, r1
 8012186:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	683a      	ldr	r2, [r7, #0]
 801218c:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012192:	619a      	str	r2, [r3, #24]
        return glyph_id;
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	e010      	b.n	80121ba <get_glyph_dsc_id+0x26a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8012198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219a:	8a5b      	ldrh	r3, [r3, #18]
 801219c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	461a      	mov	r2, r3
 80121a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121a6:	4293      	cmp	r3, r2
 80121a8:	f4ff aeea 	bcc.w	8011f80 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	683a      	ldr	r2, [r7, #0]
 80121b0:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	2200      	movs	r2, #0
 80121b6:	619a      	str	r2, [r3, #24]
    return 0;
 80121b8:	2300      	movs	r3, #0

}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3734      	adds	r7, #52	; 0x34
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd90      	pop	{r4, r7, pc}
 80121c2:	bf00      	nop
 80121c4:	080123b1 	.word	0x080123b1

080121c8 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b094      	sub	sp, #80	; 0x50
 80121cc:	af02      	add	r7, sp, #8
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 80121e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121e2:	7cdb      	ldrb	r3, [r3, #19]
 80121e4:	f003 0320 	and.w	r3, r3, #32
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d164      	bne.n	80122b8 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 80121ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 80121f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f6:	7adb      	ldrb	r3, [r3, #11]
 80121f8:	f003 0303 	and.w	r3, r3, #3
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d12b      	bne.n	801225a <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 8012202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	b29b      	uxth	r3, r3
 801220c:	021b      	lsls	r3, r3, #8
 801220e:	b29a      	uxth	r2, r3
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	b29b      	uxth	r3, r3
 8012214:	4413      	add	r3, r2
 8012216:	b29b      	uxth	r3, r3
 8012218:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012222:	461a      	mov	r2, r3
 8012224:	f107 001a 	add.w	r0, r7, #26
 8012228:	4b3b      	ldr	r3, [pc, #236]	; (8012318 <get_kern_value+0x150>)
 801222a:	9300      	str	r3, [sp, #0]
 801222c:	2302      	movs	r3, #2
 801222e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012230:	f002 fb2e 	bl	8014890 <lv_utils_bsearch>
 8012234:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d067      	beq.n	801230c <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 801223c:	6a3a      	ldr	r2, [r7, #32]
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	085b      	lsrs	r3, r3, #1
 8012248:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	4413      	add	r3, r2
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012258:	e058      	b.n	801230c <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 801225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225c:	7adb      	ldrb	r3, [r3, #11]
 801225e:	f003 0303 	and.w	r3, r3, #3
 8012262:	b2db      	uxtb	r3, r3
 8012264:	2b01      	cmp	r3, #1
 8012266:	d151      	bne.n	801230c <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 8012268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	021a      	lsls	r2, r3, #8
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	4413      	add	r3, r2
 8012276:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8012278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012280:	461a      	mov	r2, r3
 8012282:	f107 0014 	add.w	r0, r7, #20
 8012286:	4b25      	ldr	r3, [pc, #148]	; (801231c <get_kern_value+0x154>)
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	2304      	movs	r3, #4
 801228c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801228e:	f002 faff 	bl	8014890 <lv_utils_bsearch>
 8012292:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8012294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012296:	2b00      	cmp	r3, #0
 8012298:	d038      	beq.n	801230c <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 801229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	62bb      	str	r3, [r7, #40]	; 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 80122a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a4:	091b      	lsrs	r3, r3, #4
 80122a6:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 80122a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ae:	4413      	add	r3, r2
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80122b6:	e029      	b.n	801230c <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 80122b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80122be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c0:	685a      	ldr	r2, [r3, #4]
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	4413      	add	r3, r2
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 80122cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	4413      	add	r3, r2
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 80122da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d014      	beq.n	801230c <get_kern_value+0x144>
 80122e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d010      	beq.n	801230c <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 80122ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80122f2:	3a01      	subs	r2, #1
 80122f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122f6:	7b49      	ldrb	r1, [r1, #13]
 80122f8:	fb01 f102 	mul.w	r1, r1, r2
 80122fc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8012300:	3a01      	subs	r2, #1
 8012302:	440a      	add	r2, r1
 8012304:	4413      	add	r3, r2
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801230c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012310:	4618      	mov	r0, r3
 8012312:	3748      	adds	r7, #72	; 0x48
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	08012321 	.word	0x08012321
 801231c:	08012369 	.word	0x08012369

08012320 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	781a      	ldrb	r2, [r3, #0]
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	429a      	cmp	r2, r3
 801233c:	d006      	beq.n	801234c <kern_pair_8_compare+0x2c>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	e007      	b.n	801235c <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	3301      	adds	r3, #1
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	3301      	adds	r3, #1
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	1ad3      	subs	r3, r2, r3

}
 801235c:	4618      	mov	r0, r3
 801235e:	3714      	adds	r7, #20
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	881a      	ldrh	r2, [r3, #0]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	429a      	cmp	r2, r3
 8012384:	d006      	beq.n	8012394 <kern_pair_16_compare+0x2c>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	461a      	mov	r2, r3
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	1ad3      	subs	r3, r2, r3
 8012392:	e007      	b.n	80123a4 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	3302      	adds	r3, #2
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	461a      	mov	r2, r3
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	3302      	adds	r3, #2
 80123a0:	881b      	ldrh	r3, [r3, #0]
 80123a2:	1ad3      	subs	r3, r2, r3
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3714      	adds	r7, #20
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	461a      	mov	r2, r3
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	1ad3      	subs	r3, r2, r3
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr

080123d2 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b082      	sub	sp, #8
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_disp_drv_t));
 80123da:	2224      	movs	r2, #36	; 0x24
 80123dc:	2100      	movs	r1, #0
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f014 fee9 	bl	80271b6 <memset>

    driver->flush_cb         = NULL;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	22f0      	movs	r2, #240	; 0xf0
 80123ee:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	22f0      	movs	r2, #240	; 0xf0
 80123f4:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	7a13      	ldrb	r3, [r2, #8]
 8012400:	f36f 0341 	bfc	r3, #1, #1
 8012404:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	7f13      	ldrb	r3, [r2, #28]
 801240a:	f043 0307 	orr.w	r3, r3, #7
 801240e:	7713      	strb	r3, [r2, #28]
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	7f13      	ldrb	r3, [r2, #28]
 8012414:	f36f 03c7 	bfc	r3, #3, #5
 8012418:	7713      	strb	r3, [r2, #28]
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	7f53      	ldrb	r3, [r2, #29]
 801241e:	f36f 0304 	bfc	r3, #0, #5
 8012422:	7753      	strb	r3, [r2, #29]
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	7f53      	ldrb	r3, [r2, #29]
 8012428:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801242c:	7753      	strb	r3, [r2, #29]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	7a13      	ldrb	r3, [r2, #8]
 8012432:	f043 0301 	orr.w	r3, r3, #1
 8012436:	7213      	strb	r3, [r2, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	621a      	str	r2, [r3, #32]
#endif

    driver->set_px_cb = NULL;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2200      	movs	r2, #0
 8012442:	615a      	str	r2, [r3, #20]
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 801245a:	221c      	movs	r2, #28
 801245c:	2100      	movs	r1, #0
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f014 fea9 	bl	80271b6 <memset>

    disp_buf->buf1    = buf1;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	683a      	ldr	r2, [r7, #0]
 801247c:	60da      	str	r2, [r3, #12]
}
 801247e:	bf00      	nop
 8012480:	3710      	adds	r7, #16
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
	...

08012488 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8012490:	4841      	ldr	r0, [pc, #260]	; (8012598 <lv_disp_drv_register+0x110>)
 8012492:	f000 ffbb 	bl	801340c <lv_ll_ins_head>
 8012496:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d105      	bne.n	80124aa <lv_disp_drv_register+0x22>
        lv_mem_assert(disp);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d100      	bne.n	80124a6 <lv_disp_drv_register+0x1e>
 80124a4:	e7fe      	b.n	80124a4 <lv_disp_drv_register+0x1c>
        return NULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	e072      	b.n	8012590 <lv_disp_drv_register+0x108>
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2224      	movs	r2, #36	; 0x24
 80124ae:	6879      	ldr	r1, [r7, #4]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f014 fe75 	bl	80271a0 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80124bc:	2220      	movs	r2, #32
 80124be:	2100      	movs	r1, #0
 80124c0:	4618      	mov	r0, r3
 80124c2:	f014 fe78 	bl	80271b6 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	3340      	adds	r3, #64	; 0x40
 80124ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124ce:	2100      	movs	r1, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f014 fe70 	bl	80271b6 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	3328      	adds	r3, #40	; 0x28
 80124da:	2148      	movs	r1, #72	; 0x48
 80124dc:	4618      	mov	r0, r3
 80124de:	f000 ff75 	bl	80133cc <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 80124e2:	4b2e      	ldr	r3, [pc, #184]	; (801259c <lv_disp_drv_register+0x114>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d102      	bne.n	80124f0 <lv_disp_drv_register+0x68>
 80124ea:	4a2c      	ldr	r2, [pc, #176]	; (801259c <lv_disp_drv_register+0x114>)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 80124f0:	4b2a      	ldr	r3, [pc, #168]	; (801259c <lv_disp_drv_register+0x114>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80124f6:	4a29      	ldr	r2, [pc, #164]	; (801259c <lv_disp_drv_register+0x114>)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6013      	str	r3, [r2, #0]
                                        new display*/

    disp->inv_p = 0;
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8012502:	f36f 0309 	bfc	r3, #0, #10
 8012506:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 801250a:	2100      	movs	r1, #0
 801250c:	2000      	movs	r0, #0
 801250e:	f7f3 f955 	bl	80057bc <lv_obj_create>
 8012512:	4602      	mov	r2, r0
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	635a      	str	r2, [r3, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012518:	2100      	movs	r1, #0
 801251a:	2000      	movs	r0, #0
 801251c:	f7f3 f94e 	bl	80057bc <lv_obj_create>
 8012520:	4602      	mov	r2, r0
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	639a      	str	r2, [r3, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012526:	2100      	movs	r1, #0
 8012528:	2000      	movs	r0, #0
 801252a:	f7f3 f947 	bl	80057bc <lv_obj_create>
 801252e:	4602      	mov	r2, r0
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	63da      	str	r2, [r3, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012538:	4919      	ldr	r1, [pc, #100]	; (80125a0 <lv_disp_drv_register+0x118>)
 801253a:	4618      	mov	r0, r3
 801253c:	f7f4 fb77 	bl	8006c2e <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012544:	4916      	ldr	r1, [pc, #88]	; (80125a0 <lv_disp_drv_register+0x118>)
 8012546:	4618      	mov	r0, r3
 8012548:	f7f4 fb71 	bl	8006c2e <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012550:	4618      	mov	r0, r3
 8012552:	f7f3 fc70 	bl	8005e36 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 8012556:	4a11      	ldr	r2, [pc, #68]	; (801259c <lv_disp_drv_register+0x114>)
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	6013      	str	r3, [r2, #0]

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	2203      	movs	r2, #3
 8012560:	211e      	movs	r1, #30
 8012562:	4810      	ldr	r0, [pc, #64]	; (80125a4 <lv_disp_drv_register+0x11c>)
 8012564:	f001 fc64 	bl	8013e30 <lv_task_create>
 8012568:	4602      	mov	r2, r0
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	625a      	str	r2, [r3, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012572:	2b00      	cmp	r3, #0
 8012574:	d100      	bne.n	8012578 <lv_disp_drv_register+0xf0>
 8012576:	e7fe      	b.n	8012576 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257c:	2b00      	cmp	r3, #0
 801257e:	d101      	bne.n	8012584 <lv_disp_drv_register+0xfc>
 8012580:	2300      	movs	r3, #0
 8012582:	e005      	b.n	8012590 <lv_disp_drv_register+0x108>

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012588:	4618      	mov	r0, r3
 801258a:	f001 fcff 	bl	8013f8c <lv_task_ready>

    return disp;
 801258e:	68fb      	ldr	r3, [r7, #12]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20006db0 	.word	0x20006db0
 801259c:	20002a74 	.word	0x20002a74
 80125a0:	20006ac4 	.word	0x20006ac4
 80125a4:	080078bd 	.word	0x080078bd

080125a8 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 80125a8:	b480      	push	{r7}
 80125aa:	af00      	add	r7, sp, #0
    return disp_def;
 80125ac:	4b03      	ldr	r3, [pc, #12]	; (80125bc <lv_disp_get_default+0x14>)
 80125ae:	681b      	ldr	r3, [r3, #0]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop
 80125bc:	20002a74 	.word	0x20002a74

080125c0 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <lv_disp_get_hor_res+0x14>
 80125ce:	f7ff ffeb 	bl	80125a8 <lv_disp_get_default>
 80125d2:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d101      	bne.n	80125de <lv_disp_get_hor_res+0x1e>
        return LV_HOR_RES_MAX;
 80125da:	23f0      	movs	r3, #240	; 0xf0
 80125dc:	e00d      	b.n	80125fa <lv_disp_get_hor_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	7a1b      	ldrb	r3, [r3, #8]
 80125e2:	f003 0302 	and.w	r3, r3, #2
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d103      	bne.n	80125f4 <lv_disp_get_hor_res+0x34>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125f2:	e002      	b.n	80125fa <lv_disp_get_hor_res+0x3a>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3708      	adds	r7, #8
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d102      	bne.n	8012616 <lv_disp_get_ver_res+0x14>
 8012610:	f7ff ffca 	bl	80125a8 <lv_disp_get_default>
 8012614:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d101      	bne.n	8012620 <lv_disp_get_ver_res+0x1e>
        return LV_VER_RES_MAX;
 801261c:	23f0      	movs	r3, #240	; 0xf0
 801261e:	e00d      	b.n	801263c <lv_disp_get_ver_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	7a1b      	ldrb	r3, [r3, #8]
 8012624:	f003 0302 	and.w	r3, r3, #2
 8012628:	b2db      	uxtb	r3, r3
 801262a:	2b00      	cmp	r3, #0
 801262c:	d103      	bne.n	8012636 <lv_disp_get_ver_res+0x34>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012634:	e002      	b.n	801263c <lv_disp_get_ver_res+0x3a>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d102      	bne.n	8012658 <lv_disp_get_antialiasing+0x14>
 8012652:	f7ff ffa9 	bl	80125a8 <lv_disp_get_default>
 8012656:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return false;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d101      	bne.n	8012662 <lv_disp_get_antialiasing+0x1e>
 801265e:	2300      	movs	r3, #0
 8012660:	e008      	b.n	8012674 <lv_disp_get_antialiasing+0x30>

    return disp->driver.antialiasing ? true : false;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	7a1b      	ldrb	r3, [r3, #8]
 8012666:	f003 0301 	and.w	r3, r3, #1
 801266a:	2b00      	cmp	r3, #0
 801266c:	bf14      	ite	ne
 801266e:	2301      	movne	r3, #1
 8012670:	2300      	moveq	r3, #0
 8012672:	b2db      	uxtb	r3, r3
#endif
}
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
    disp_drv->buffer->flushing = 0;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	7e13      	ldrb	r3, [r2, #24]
 801268a:	f36f 0300 	bfc	r3, #0, #1
 801268e:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	685b      	ldr	r3, [r3, #4]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	370c      	adds	r7, #12
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr

080126b4 <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d006      	beq.n	80126d4 <lv_disp_is_double_buf+0x20>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d001      	beq.n	80126d4 <lv_disp_is_double_buf+0x20>
        return true;
 80126d0:	2301      	movs	r3, #1
 80126d2:	e000      	b.n	80126d6 <lv_disp_is_double_buf+0x22>
    else
        return false;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b084      	sub	sp, #16
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126f0:	461a      	mov	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80126f8:	fb03 f302 	mul.w	r3, r3, r2
 80126fc:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7ff ffd8 	bl	80126b4 <lv_disp_is_double_buf>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	d007      	beq.n	801271a <lv_disp_is_true_double_buf+0x38>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	68fa      	ldr	r2, [r7, #12]
 8012712:	429a      	cmp	r2, r3
 8012714:	d101      	bne.n	801271a <lv_disp_is_true_double_buf+0x38>
        return true;
 8012716:	2301      	movs	r3, #1
 8012718:	e000      	b.n	801271c <lv_disp_is_true_double_buf+0x3a>
    } else {
        return false;
 801271a:	2300      	movs	r3, #0
    }
}
 801271c:	4618      	mov	r0, r3
 801271e:	3710      	adds	r7, #16
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d104      	bne.n	801273c <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8012732:	4807      	ldr	r0, [pc, #28]	; (8012750 <lv_indev_get_next+0x2c>)
 8012734:	f000 ffcc 	bl	80136d0 <lv_ll_get_head>
 8012738:	4603      	mov	r3, r0
 801273a:	e004      	b.n	8012746 <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801273c:	6879      	ldr	r1, [r7, #4]
 801273e:	4804      	ldr	r0, [pc, #16]	; (8012750 <lv_indev_get_next+0x2c>)
 8012740:	f000 ffec 	bl	801371c <lv_ll_get_next>
 8012744:	4603      	mov	r3, r0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	20006da0 	.word	0x20006da0

08012754 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801275c:	4b07      	ldr	r3, [pc, #28]	; (801277c <lv_tick_inc+0x28>)
 801275e:	2200      	movs	r2, #0
 8012760:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8012762:	4b07      	ldr	r3, [pc, #28]	; (8012780 <lv_tick_inc+0x2c>)
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4413      	add	r3, r2
 801276a:	4a05      	ldr	r2, [pc, #20]	; (8012780 <lv_tick_inc+0x2c>)
 801276c:	6013      	str	r3, [r2, #0]
}
 801276e:	bf00      	nop
 8012770:	370c      	adds	r7, #12
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr
 801277a:	bf00      	nop
 801277c:	20002a7c 	.word	0x20002a7c
 8012780:	20002a78 	.word	0x20002a78

08012784 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801278a:	4b09      	ldr	r3, [pc, #36]	; (80127b0 <lv_tick_get+0x2c>)
 801278c:	2201      	movs	r2, #1
 801278e:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 8012790:	4b08      	ldr	r3, [pc, #32]	; (80127b4 <lv_tick_get+0x30>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8012796:	4b06      	ldr	r3, [pc, #24]	; (80127b0 <lv_tick_get+0x2c>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	b2db      	uxtb	r3, r3
 801279c:	2b00      	cmp	r3, #0
 801279e:	d0f4      	beq.n	801278a <lv_tick_get+0x6>
                                Continue until make a non interrupted cycle */

    return result;
 80127a0:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	370c      	adds	r7, #12
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	20002a7c 	.word	0x20002a7c
 80127b4:	20002a78 	.word	0x20002a78

080127b8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 80127c0:	f7ff ffe0 	bl	8012784 <lv_tick_get>
 80127c4:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 80127c6:	68fa      	ldr	r2, [r7, #12]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d304      	bcc.n	80127d8 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	607b      	str	r3, [r7, #4]
 80127d6:	e006      	b.n	80127e6 <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	425b      	negs	r3, r3
 80127dc:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	4413      	add	r3, r2
 80127e4:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 80127e6:	687b      	ldr	r3, [r7, #4]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 80127f4:	2128      	movs	r1, #40	; 0x28
 80127f6:	4808      	ldr	r0, [pc, #32]	; (8012818 <lv_anim_core_init+0x28>)
 80127f8:	f000 fde8 	bl	80133cc <lv_ll_init>
    last_task_run = lv_tick_get();
 80127fc:	f7ff ffc2 	bl	8012784 <lv_tick_get>
 8012800:	4602      	mov	r2, r0
 8012802:	4b06      	ldr	r3, [pc, #24]	; (801281c <lv_anim_core_init+0x2c>)
 8012804:	601a      	str	r2, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8012806:	2300      	movs	r3, #0
 8012808:	2203      	movs	r2, #3
 801280a:	211e      	movs	r1, #30
 801280c:	4804      	ldr	r0, [pc, #16]	; (8012820 <lv_anim_core_init+0x30>)
 801280e:	f001 fb0f 	bl	8013e30 <lv_task_create>
}
 8012812:	bf00      	nop
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	20006ddc 	.word	0x20006ddc
 801281c:	20002a80 	.word	0x20002a80
 8012820:	080129d9 	.word	0x080129d9

08012824 <lv_anim_create>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_create(lv_anim_t * a)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the  same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d007      	beq.n	8012844 <lv_anim_create+0x20>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	4619      	mov	r1, r3
 801283e:	4610      	mov	r0, r2
 8012840:	f000 f830 	bl	80128a4 <lv_anim_del>

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8012844:	4815      	ldr	r0, [pc, #84]	; (801289c <lv_anim_create+0x78>)
 8012846:	f000 fde1 	bl	801340c <lv_ll_ins_head>
 801284a:	60f8      	str	r0, [r7, #12]
    lv_mem_assert(new_anim);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d100      	bne.n	8012854 <lv_anim_create+0x30>
 8012852:	e7fe      	b.n	8012852 <lv_anim_create+0x2e>
    if(new_anim == NULL) return;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d01c      	beq.n	8012894 <lv_anim_create+0x70>

    /*Initialize the animation descriptor*/
    a->playback_now = 0;
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012860:	f36f 0382 	bfc	r3, #2, #1
 8012864:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8012868:	2228      	movs	r2, #40	; 0x28
 801286a:	6879      	ldr	r1, [r7, #4]
 801286c:	68f8      	ldr	r0, [r7, #12]
 801286e:	f014 fc97 	bl	80271a0 <memcpy>

    /*Set the start value*/
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d008      	beq.n	801288c <lv_anim_create+0x68>
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	6810      	ldr	r0, [r2, #0]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	6912      	ldr	r2, [r2, #16]
 8012886:	b212      	sxth	r2, r2
 8012888:	4611      	mov	r1, r2
 801288a:	4798      	blx	r3

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_list_changed = true;
 801288c:	4b04      	ldr	r3, [pc, #16]	; (80128a0 <lv_anim_create+0x7c>)
 801288e:	2201      	movs	r2, #1
 8012890:	701a      	strb	r2, [r3, #0]
 8012892:	e000      	b.n	8012896 <lv_anim_create+0x72>
    if(new_anim == NULL) return;
 8012894:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	20006ddc 	.word	0x20006ddc
 80128a0:	20002a84 	.word	0x20002a84

080128a4 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 80128ae:	2300      	movs	r3, #0
 80128b0:	74fb      	strb	r3, [r7, #19]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80128b2:	4816      	ldr	r0, [pc, #88]	; (801290c <lv_anim_del+0x68>)
 80128b4:	f000 ff0c 	bl	80136d0 <lv_ll_get_head>
 80128b8:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 80128ba:	e01f      	b.n	80128fc <lv_anim_del+0x58>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80128bc:	6979      	ldr	r1, [r7, #20]
 80128be:	4813      	ldr	r0, [pc, #76]	; (801290c <lv_anim_del+0x68>)
 80128c0:	f000 ff2c 	bl	801371c <lv_ll_get_next>
 80128c4:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d113      	bne.n	80128f8 <lv_anim_del+0x54>
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d002      	beq.n	80128e0 <lv_anim_del+0x3c>
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d10b      	bne.n	80128f8 <lv_anim_del+0x54>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80128e0:	6979      	ldr	r1, [r7, #20]
 80128e2:	480a      	ldr	r0, [pc, #40]	; (801290c <lv_anim_del+0x68>)
 80128e4:	f000 fe46 	bl	8013574 <lv_ll_rem>
            lv_mem_free(a);
 80128e8:	6978      	ldr	r0, [r7, #20]
 80128ea:	f001 f8b1 	bl	8013a50 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 80128ee:	4b08      	ldr	r3, [pc, #32]	; (8012910 <lv_anim_del+0x6c>)
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
                                         the linked list*/
            del = true;
 80128f4:	2301      	movs	r3, #1
 80128f6:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1dc      	bne.n	80128bc <lv_anim_del+0x18>
    }

    return del;
 8012902:	7cfb      	ldrb	r3, [r7, #19]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	20006ddc 	.word	0x20006ddc
 8012910:	20002a84 	.word	0x20002a84

08012914 <lv_anim_speed_to_time>:
 * @param start start value of the animation
 * @param end end value of the animation
 * @return the required time [ms] for the animation with the given parameters
 */
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)
{
 8012914:	b480      	push	{r7}
 8012916:	b085      	sub	sp, #20
 8012918:	af00      	add	r7, sp, #0
 801291a:	4603      	mov	r3, r0
 801291c:	80fb      	strh	r3, [r7, #6]
 801291e:	460b      	mov	r3, r1
 8012920:	80bb      	strh	r3, [r7, #4]
 8012922:	4613      	mov	r3, r2
 8012924:	807b      	strh	r3, [r7, #2]
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8012926:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801292a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	bfb8      	it	lt
 8012934:	425b      	neglt	r3, r3
 8012936:	60bb      	str	r3, [r7, #8]
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801293e:	fb02 f203 	mul.w	r2, r2, r3
 8012942:	88fb      	ldrh	r3, [r7, #6]
 8012944:	fb92 f3f3 	sdiv	r3, r2, r3
 8012948:	60fb      	str	r3, [r7, #12]

    if(time > UINT16_MAX) time = UINT16_MAX;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012950:	d302      	bcc.n	8012958 <lv_anim_speed_to_time+0x44>
 8012952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012956:	60fb      	str	r3, [r7, #12]

    if(time == 0) {
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d102      	bne.n	8012964 <lv_anim_speed_to_time+0x50>
        time++;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	3301      	adds	r3, #1
 8012962:	60fb      	str	r3, [r7, #12]
    }

    return time;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	b29b      	uxth	r3, r3
}
 8012968:	4618      	mov	r0, r3
 801296a:	3714      	adds	r7, #20
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 8012974:	b480      	push	{r7}
 8012976:	b085      	sub	sp, #20
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	8b1b      	ldrh	r3, [r3, #24]
 8012980:	461a      	mov	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012988:	429a      	cmp	r2, r3
 801298a:	d103      	bne.n	8012994 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 801298c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e008      	b.n	80129a6 <lv_anim_path_linear+0x32>
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801299a:	029b      	lsls	r3, r3, #10
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	8b12      	ldrh	r2, [r2, #24]
 80129a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80129a4:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	695a      	ldr	r2, [r3, #20]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	691b      	ldr	r3, [r3, #16]
 80129ae:	1ad3      	subs	r3, r2, r3
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	fb02 f303 	mul.w	r3, r2, r3
 80129b6:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	129b      	asrs	r3, r3, #10
 80129bc:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	68ba      	ldr	r2, [r7, #8]
 80129c4:	4413      	add	r3, r2
 80129c6:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	b21b      	sxth	r3, r3
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3714      	adds	r7, #20
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80129e0:	4842      	ldr	r0, [pc, #264]	; (8012aec <anim_task+0x114>)
 80129e2:	f000 fe75 	bl	80136d0 <lv_ll_get_head>
 80129e6:	6178      	str	r0, [r7, #20]
 80129e8:	e00b      	b.n	8012a02 <anim_task+0x2a>
    {
        a->has_run = 0;
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80129f0:	f36f 03c3 	bfc	r3, #3, #1
 80129f4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80129f8:	6979      	ldr	r1, [r7, #20]
 80129fa:	483c      	ldr	r0, [pc, #240]	; (8012aec <anim_task+0x114>)
 80129fc:	f000 fe8e 	bl	801371c <lv_ll_get_next>
 8012a00:	6178      	str	r0, [r7, #20]
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1f0      	bne.n	80129ea <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8012a08:	4b39      	ldr	r3, [pc, #228]	; (8012af0 <anim_task+0x118>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7ff fed3 	bl	80127b8 <lv_tick_elaps>
 8012a12:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012a14:	4835      	ldr	r0, [pc, #212]	; (8012aec <anim_task+0x114>)
 8012a16:	f000 fe5b 	bl	80136d0 <lv_ll_get_head>
 8012a1a:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 8012a1c:	e059      	b.n	8012ad2 <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8012a1e:	4b35      	ldr	r3, [pc, #212]	; (8012af4 <anim_task+0x11c>)
 8012a20:	2200      	movs	r2, #0
 8012a22:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012a2a:	f003 0308 	and.w	r3, r3, #8
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d140      	bne.n	8012ab6 <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8012a34:	697a      	ldr	r2, [r7, #20]
 8012a36:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012a3a:	f043 0308 	orr.w	r3, r3, #8
 8012a3e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            a->act_time += elaps;
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a48:	b29a      	uxth	r2, r3
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	4413      	add	r3, r2
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	b21a      	sxth	r2, r3
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	db29      	blt.n	8012ab6 <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a68:	461a      	mov	r2, r3
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	8b1b      	ldrh	r3, [r3, #24]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	dd04      	ble.n	8012a7c <anim_task+0xa4>
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	8b1b      	ldrh	r3, [r3, #24]
 8012a76:	b21a      	sxth	r2, r3
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	6978      	ldr	r0, [r7, #20]
 8012a82:	4798      	blx	r3
 8012a84:	4603      	mov	r3, r0
 8012a86:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d007      	beq.n	8012aa0 <anim_task+0xc8>
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	697a      	ldr	r2, [r7, #20]
 8012a96:	6812      	ldr	r2, [r2, #0]
 8012a98:	68f9      	ldr	r1, [r7, #12]
 8012a9a:	b209      	sxth	r1, r1
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	8b1b      	ldrh	r3, [r3, #24]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	db02      	blt.n	8012ab6 <anim_task+0xde>
                    anim_ready_handler(a);
 8012ab0:	6978      	ldr	r0, [r7, #20]
 8012ab2:	f000 f821 	bl	8012af8 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8012ab6:	4b0f      	ldr	r3, [pc, #60]	; (8012af4 <anim_task+0x11c>)
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d004      	beq.n	8012ac8 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012abe:	480b      	ldr	r0, [pc, #44]	; (8012aec <anim_task+0x114>)
 8012ac0:	f000 fe06 	bl	80136d0 <lv_ll_get_head>
 8012ac4:	6178      	str	r0, [r7, #20]
 8012ac6:	e004      	b.n	8012ad2 <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012ac8:	6979      	ldr	r1, [r7, #20]
 8012aca:	4808      	ldr	r0, [pc, #32]	; (8012aec <anim_task+0x114>)
 8012acc:	f000 fe26 	bl	801371c <lv_ll_get_next>
 8012ad0:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1a2      	bne.n	8012a1e <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 8012ad8:	f7ff fe54 	bl	8012784 <lv_tick_get>
 8012adc:	4602      	mov	r2, r0
 8012ade:	4b04      	ldr	r3, [pc, #16]	; (8012af0 <anim_task+0x118>)
 8012ae0:	601a      	str	r2, [r3, #0]
}
 8012ae2:	bf00      	nop
 8012ae4:	3718      	adds	r7, #24
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	20006ddc 	.word	0x20006ddc
 8012af0:	20002a80 	.word	0x20002a80
 8012af4:	20002a84 	.word	0x20002a84

08012af8 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b08e      	sub	sp, #56	; 0x38
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b06:	f003 0302 	and.w	r3, r3, #2
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d107      	bne.n	8012b20 <anim_ready_handler+0x28>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d017      	beq.n	8012b50 <anim_ready_handler+0x58>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d129      	bne.n	8012b84 <anim_ready_handler+0x8c>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b36:	f003 0301 	and.w	r3, r3, #1
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d021      	beq.n	8012b84 <anim_ready_handler+0x8c>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b46:	f003 0304 	and.w	r3, r3, #4
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d019      	beq.n	8012b84 <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8012b50:	f107 030c 	add.w	r3, r7, #12
 8012b54:	2228      	movs	r2, #40	; 0x28
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f014 fb21 	bl	80271a0 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8012b5e:	6879      	ldr	r1, [r7, #4]
 8012b60:	4829      	ldr	r0, [pc, #164]	; (8012c08 <anim_ready_handler+0x110>)
 8012b62:	f000 fd07 	bl	8013574 <lv_ll_rem>
        lv_mem_free(a);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f000 ff72 	bl	8013a50 <lv_mem_free>
        anim_list_changed = true;
 8012b6c:	4b27      	ldr	r3, [pc, #156]	; (8012c0c <anim_ready_handler+0x114>)
 8012b6e:	2201      	movs	r2, #1
 8012b70:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d040      	beq.n	8012bfa <anim_ready_handler+0x102>
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	f107 020c 	add.w	r2, r7, #12
 8012b7e:	4610      	mov	r0, r2
 8012b80:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012b82:	e03a      	b.n	8012bfa <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	8bdb      	ldrh	r3, [r3, #30]
 8012b88:	425b      	negs	r3, r3
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	b21a      	sxth	r2, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d02c      	beq.n	8012bfc <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012ba8:	f003 0304 	and.w	r3, r3, #4
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d106      	bne.n	8012bc0 <anim_ready_handler+0xc8>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	8b9b      	ldrh	r3, [r3, #28]
 8012bb6:	425b      	negs	r3, r3
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	b21a      	sxth	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012bc6:	f003 0304 	and.w	r3, r3, #4
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	bf0c      	ite	eq
 8012bd0:	2301      	moveq	r3, #1
 8012bd2:	2300      	movne	r3, #0
 8012bd4:	b2d9      	uxtb	r1, r3
 8012bd6:	687a      	ldr	r2, [r7, #4]
 8012bd8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012bdc:	f361 0382 	bfi	r3, r1, #2, #1
 8012be0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	691b      	ldr	r3, [r3, #16]
 8012be8:	637b      	str	r3, [r7, #52]	; 0x34
            a->start = a->end;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	695a      	ldr	r2, [r3, #20]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bf6:	615a      	str	r2, [r3, #20]
 8012bf8:	e000      	b.n	8012bfc <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012bfa:	bf00      	nop
        }
    }

    return anim_list_changed;
 8012bfc:	4b03      	ldr	r3, [pc, #12]	; (8012c0c <anim_ready_handler+0x114>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3738      	adds	r7, #56	; 0x38
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	20006ddc 	.word	0x20006ddc
 8012c0c:	20002a84 	.word	0x20002a84

08012c10 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	b21b      	sxth	r3, r3
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	370c      	adds	r7, #12
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr

08012c3e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8012c3e:	b480      	push	{r7}
 8012c40:	b083      	sub	sp, #12
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	1ad3      	subs	r3, r2, r3
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	b21b      	sxth	r3, r3
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b085      	sub	sp, #20
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	4608      	mov	r0, r1
 8012c76:	4611      	mov	r1, r2
 8012c78:	461a      	mov	r2, r3
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	817b      	strh	r3, [r7, #10]
 8012c7e:	460b      	mov	r3, r1
 8012c80:	813b      	strh	r3, [r7, #8]
 8012c82:	4613      	mov	r3, r2
 8012c84:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	897a      	ldrh	r2, [r7, #10]
 8012c8a:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	893a      	ldrh	r2, [r7, #8]
 8012c90:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	88fa      	ldrh	r2, [r7, #6]
 8012c96:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	8b3a      	ldrh	r2, [r7, #24]
 8012c9c:	80da      	strh	r2, [r3, #6]
}
 8012c9e:	bf00      	nop
 8012ca0:	3714      	adds	r7, #20
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <lv_area_set_width>:
 * Set the width of an area
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
 8012caa:	b480      	push	{r7}
 8012cac:	b083      	sub	sp, #12
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	807b      	strh	r3, [r7, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	887b      	ldrh	r3, [r7, #2]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	b21a      	sxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	809a      	strh	r2, [r3, #4]
}
 8012cce:	bf00      	nop
 8012cd0:	370c      	adds	r7, #12
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr

08012cda <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 8012cda:	b480      	push	{r7}
 8012cdc:	b083      	sub	sp, #12
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	887b      	ldrh	r3, [r7, #2]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	b21a      	sxth	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	80da      	strh	r2, [r3, #6]
}
 8012cfe:	bf00      	nop
 8012d00:	370c      	adds	r7, #12
 8012d02:	46bd      	mov	sp, r7
 8012d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d08:	4770      	bx	lr

08012d0a <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	460b      	mov	r3, r1
 8012d14:	807b      	strh	r3, [r7, #2]
 8012d16:	4613      	mov	r3, r2
 8012d18:	803b      	strh	r3, [r7, #0]
    lv_coord_t w = lv_area_get_width(area_p);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff ff78 	bl	8012c10 <lv_area_get_width>
 8012d20:	4603      	mov	r3, r0
 8012d22:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_area_get_height(area_p);
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7ff ff8a 	bl	8012c3e <lv_area_get_height>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	81bb      	strh	r3, [r7, #12]
    area_p->x1   = x;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	887a      	ldrh	r2, [r7, #2]
 8012d32:	801a      	strh	r2, [r3, #0]
    area_p->y1   = y;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	883a      	ldrh	r2, [r7, #0]
 8012d38:	805a      	strh	r2, [r3, #2]
    lv_area_set_width(area_p, w);
 8012d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d3e:	4619      	mov	r1, r3
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7ff ffb2 	bl	8012caa <lv_area_set_width>
    lv_area_set_height(area_p, h);
 8012d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7ff ffc4 	bl	8012cda <lv_area_set_height>
}
 8012d52:	bf00      	nop
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 8012d5a:	b480      	push	{r7}
 8012d5c:	b085      	sub	sp, #20
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	3301      	adds	r3, #1
 8012d74:	461a      	mov	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d84:	1acb      	subs	r3, r1, r3
 8012d86:	3301      	adds	r3, #1
 8012d88:	fb03 f302 	mul.w	r3, r3, r2
 8012d8c:	60fb      	str	r3, [r7, #12]

    return size;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3714      	adds	r7, #20
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr

08012d9c <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b087      	sub	sp, #28
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	60f8      	str	r0, [r7, #12]
 8012da4:	60b9      	str	r1, [r7, #8]
 8012da6:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012db4:	4293      	cmp	r3, r2
 8012db6:	bfb8      	it	lt
 8012db8:	4613      	movlt	r3, r2
 8012dba:	b21a      	sxth	r2, r3
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	bfb8      	it	lt
 8012dd0:	4613      	movlt	r3, r2
 8012dd2:	b21a      	sxth	r2, r3
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012de4:	4293      	cmp	r3, r2
 8012de6:	bfa8      	it	ge
 8012de8:	4613      	movge	r3, r2
 8012dea:	b21a      	sxth	r2, r3
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	bfa8      	it	ge
 8012e00:	4613      	movge	r3, r2
 8012e02:	b21a      	sxth	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8012e08:	2301      	movs	r3, #1
 8012e0a:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	dc07      	bgt.n	8012e2c <lv_area_intersect+0x90>
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	dd01      	ble.n	8012e30 <lv_area_intersect+0x94>
        union_ok = false;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 8012e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	371c      	adds	r7, #28
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr

08012e3e <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012e3e:	b480      	push	{r7}
 8012e40:	b085      	sub	sp, #20
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	60f8      	str	r0, [r7, #12]
 8012e46:	60b9      	str	r1, [r7, #8]
 8012e48:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e56:	4293      	cmp	r3, r2
 8012e58:	bfa8      	it	ge
 8012e5a:	4613      	movge	r3, r2
 8012e5c:	b21a      	sxth	r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	bfa8      	it	ge
 8012e72:	4613      	movge	r3, r2
 8012e74:	b21a      	sxth	r2, r3
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e86:	4293      	cmp	r3, r2
 8012e88:	bfb8      	it	lt
 8012e8a:	4613      	movlt	r3, r2
 8012e8c:	b21a      	sxth	r2, r3
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	bfb8      	it	lt
 8012ea2:	4613      	movlt	r3, r2
 8012ea4:	b21a      	sxth	r2, r3
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	80da      	strh	r2, [r3, #6]
}
 8012eaa:	bf00      	nop
 8012eac:	3714      	adds	r7, #20
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <lv_area_is_point_on>:
 * @param a_p pointer to an area
 * @param p_p pointer to a point
 * @return false:the point is out of the area
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
 8012eb6:	b480      	push	{r7}
 8012eb8:	b085      	sub	sp, #20
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	6039      	str	r1, [r7, #0]
    bool is_on = false;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	73fb      	strb	r3, [r7, #15]

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	db19      	blt.n	8012f08 <lv_area_is_point_on+0x52>
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	dc11      	bgt.n	8012f08 <lv_area_is_point_on+0x52>
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	db09      	blt.n	8012f08 <lv_area_is_point_on+0x52>
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	dc01      	bgt.n	8012f08 <lv_area_is_point_on+0x52>
        is_on = true;
 8012f04:	2301      	movs	r3, #1
 8012f06:	73fb      	strb	r3, [r7, #15]
    }

    return is_on;
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3714      	adds	r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012f16:	b480      	push	{r7}
 8012f18:	b083      	sub	sp, #12
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
 8012f1e:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	dc19      	bgt.n	8012f64 <lv_area_is_on+0x4e>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	db11      	blt.n	8012f64 <lv_area_is_on+0x4e>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	dc09      	bgt.n	8012f64 <lv_area_is_on+0x4e>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	db01      	blt.n	8012f64 <lv_area_is_on+0x4e>
        return true;
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <lv_area_is_on+0x50>
    } else {
        return false;
 8012f64:	2300      	movs	r3, #0
    }
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
    bool is_in = false;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	73fb      	strb	r3, [r7, #15]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	db19      	blt.n	8012fc4 <lv_area_is_in+0x52>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	db11      	blt.n	8012fc4 <lv_area_is_in+0x52>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	dc09      	bgt.n	8012fc4 <lv_area_is_in+0x52>
       ain_p->y2 <= aholder_p->y2) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	dc01      	bgt.n	8012fc4 <lv_area_is_in+0x52>
        is_in = true;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	73fb      	strb	r3, [r7, #15]
    }

    return is_in;
 8012fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3714      	adds	r7, #20
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr

08012fd2 <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8012fd2:	b480      	push	{r7}
 8012fd4:	b085      	sub	sp, #20
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	60f8      	str	r0, [r7, #12]
 8012fda:	60b9      	str	r1, [r7, #8]
 8012fdc:	4613      	mov	r3, r2
 8012fde:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	88fa      	ldrh	r2, [r7, #6]
 8012fe4:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2200      	movs	r2, #0
 8012fea:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8012fec:	88fb      	ldrh	r3, [r7, #6]
 8012fee:	f1c3 0301 	rsb	r3, r3, #1
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	b21a      	sxth	r2, r3
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	801a      	strh	r2, [r3, #0]
}
 8012ffa:	bf00      	nop
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013004:	4770      	bx	lr

08013006 <lv_circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
 8013006:	b480      	push	{r7}
 8013008:	b083      	sub	sp, #12
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801301a:	429a      	cmp	r2, r3
 801301c:	bfd4      	ite	le
 801301e:	2301      	movle	r3, #1
 8013020:	2300      	movgt	r3, #0
 8013022:	b2db      	uxtb	r3, r3
}
 8013024:	4618      	mov	r0, r3
 8013026:	370c      	adds	r7, #12
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <lv_circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
    c->y++;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013040:	b29b      	uxth	r3, r3
 8013042:	3301      	adds	r3, #1
 8013044:	b29b      	uxth	r3, r3
 8013046:	b21a      	sxth	r2, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	805a      	strh	r2, [r3, #2]

    if(*tmp <= 0) {
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013052:	2b00      	cmp	r3, #0
 8013054:	dc11      	bgt.n	801307a <lv_circ_next+0x4a>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	f9b3 3000 	ldrsh.w	r3, [r3]
 801305c:	b29a      	uxth	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013064:	b29b      	uxth	r3, r3
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	b29b      	uxth	r3, r3
 801306a:	4413      	add	r3, r2
 801306c:	b29b      	uxth	r3, r3
 801306e:	3301      	adds	r3, #1
 8013070:	b29b      	uxth	r3, r3
 8013072:	b21a      	sxth	r2, r3
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	801a      	strh	r2, [r3, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
    }
}
 8013078:	e01e      	b.n	80130b8 <lv_circ_next+0x88>
        c->x--;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013080:	b29b      	uxth	r3, r3
 8013082:	3b01      	subs	r3, #1
 8013084:	b29b      	uxth	r3, r3
 8013086:	b21a      	sxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	801a      	strh	r2, [r3, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013092:	b29a      	uxth	r2, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801309a:	4619      	mov	r1, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130a2:	1acb      	subs	r3, r1, r3
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	4413      	add	r3, r2
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	3301      	adds	r3, #1
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	b21a      	sxth	r2, r3
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	801a      	strh	r2, [r3, #0]
}
 80130b8:	bf00      	nop
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr

080130c4 <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 80130c8:	2148      	movs	r1, #72	; 0x48
 80130ca:	4802      	ldr	r0, [pc, #8]	; (80130d4 <lv_fs_init+0x10>)
 80130cc:	f000 f97e 	bl	80133cc <lv_ll_init>
}
 80130d0:	bf00      	nop
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	20006dc8 	.word	0x20006dc8

080130d8 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 80130d8:	b590      	push	{r4, r7, lr}
 80130da:	b089      	sub	sp, #36	; 0x24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4613      	mov	r3, r2
 80130e4:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2200      	movs	r2, #0
 80130ea:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d101      	bne.n	80130fc <lv_fs_open+0x24>
 80130f8:	230b      	movs	r3, #11
 80130fa:	e069      	b.n	80131d0 <lv_fs_open+0xf8>

    char letter = path[0];
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 8013102:	7ffb      	ldrb	r3, [r7, #31]
 8013104:	4618      	mov	r0, r3
 8013106:	f000 f941 	bl	801338c <lv_fs_get_drv>
 801310a:	4602      	mov	r2, r0
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d104      	bne.n	8013122 <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 801311e:	2303      	movs	r3, #3
 8013120:	e056      	b.n	80131d0 <lv_fs_open+0xf8>
    }

    if(file_p->drv->ready_cb != NULL) {
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	689b      	ldr	r3, [r3, #8]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d014      	beq.n	8013156 <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	689b      	ldr	r3, [r3, #8]
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	6852      	ldr	r2, [r2, #4]
 8013136:	4610      	mov	r0, r2
 8013138:	4798      	blx	r3
 801313a:	4603      	mov	r3, r0
 801313c:	f083 0301 	eor.w	r3, r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d007      	beq.n	8013156 <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2200      	movs	r2, #0
 801314a:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2200      	movs	r2, #0
 8013150:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 8013152:	2301      	movs	r3, #1
 8013154:	e03c      	b.n	80131d0 <lv_fs_open+0xf8>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	885b      	ldrh	r3, [r3, #2]
 801315c:	4618      	mov	r0, r3
 801315e:	f000 fc37 	bl	80139d0 <lv_mem_alloc>
 8013162:	4602      	mov	r2, r0
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	601a      	str	r2, [r3, #0]
    lv_mem_assert(file_p->file_d);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d100      	bne.n	8013172 <lv_fs_open+0x9a>
 8013170:	e7fe      	b.n	8013170 <lv_fs_open+0x98>
    if(file_p->file_d == NULL) {
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d104      	bne.n	8013184 <lv_fs_open+0xac>
        file_p->drv = NULL;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2200      	movs	r2, #0
 801317e:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 8013180:	230a      	movs	r3, #10
 8013182:	e025      	b.n	80131d0 <lv_fs_open+0xf8>
    }

    if(file_p->drv->open_cb == NULL) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d101      	bne.n	8013192 <lv_fs_open+0xba>
        return LV_FS_RES_NOT_IMP;
 801318e:	2309      	movs	r3, #9
 8013190:	e01e      	b.n	80131d0 <lv_fs_open+0xf8>
    }

    const char * real_path = lv_fs_get_real_path(path);
 8013192:	68b8      	ldr	r0, [r7, #8]
 8013194:	f000 f8d8 	bl	8013348 <lv_fs_get_real_path>
 8013198:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	68dc      	ldr	r4, [r3, #12]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	6858      	ldr	r0, [r3, #4]
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	6819      	ldr	r1, [r3, #0]
 80131a8:	79fb      	ldrb	r3, [r7, #7]
 80131aa:	69ba      	ldr	r2, [r7, #24]
 80131ac:	47a0      	blx	r4
 80131ae:	4603      	mov	r3, r0
 80131b0:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 80131b2:	7dfb      	ldrb	r3, [r7, #23]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00a      	beq.n	80131ce <lv_fs_open+0xf6>
        lv_mem_free(file_p->file_d);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4618      	mov	r0, r3
 80131be:	f000 fc47 	bl	8013a50 <lv_mem_free>
        file_p->file_d = NULL;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2200      	movs	r2, #0
 80131cc:	605a      	str	r2, [r3, #4]
    }

    return res;
 80131ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3724      	adds	r7, #36	; 0x24
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd90      	pop	{r4, r7, pc}

080131d8 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d101      	bne.n	80131ec <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 80131e8:	230b      	movs	r3, #11
 80131ea:	e020      	b.n	801322e <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d101      	bne.n	80131fa <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 80131f6:	2309      	movs	r3, #9
 80131f8:	e019      	b.n	801322e <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	691b      	ldr	r3, [r3, #16]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	6850      	ldr	r0, [r2, #4]
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	6812      	ldr	r2, [r2, #0]
 8013208:	4611      	mov	r1, r2
 801320a:	4798      	blx	r3
 801320c:	4603      	mov	r3, r0
 801320e:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4618      	mov	r0, r3
 8013216:	f000 fc1b 	bl	8013a50 <lv_mem_free>
    file_p->file_d = NULL;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	601a      	str	r2, [r3, #0]

    return res;
 801322c:	7bfb      	ldrb	r3, [r7, #15]
}
 801322e:	4618      	mov	r0, r3
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8013236:	b590      	push	{r4, r7, lr}
 8013238:	b089      	sub	sp, #36	; 0x24
 801323a:	af02      	add	r7, sp, #8
 801323c:	60f8      	str	r0, [r7, #12]
 801323e:	60b9      	str	r1, [r7, #8]
 8013240:	607a      	str	r2, [r7, #4]
 8013242:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <lv_fs_read+0x1a>
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	2200      	movs	r2, #0
 801324e:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <lv_fs_read+0x26>
 8013258:	230b      	movs	r3, #11
 801325a:	e01e      	b.n	801329a <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	699b      	ldr	r3, [r3, #24]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d101      	bne.n	801326a <lv_fs_read+0x34>
 8013266:	2309      	movs	r3, #9
 8013268:	e017      	b.n	801329a <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 801326a:	2300      	movs	r3, #0
 801326c:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	699c      	ldr	r4, [r3, #24]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	6858      	ldr	r0, [r3, #4]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	6819      	ldr	r1, [r3, #0]
 801327c:	f107 0310 	add.w	r3, r7, #16
 8013280:	9300      	str	r3, [sp, #0]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	68ba      	ldr	r2, [r7, #8]
 8013286:	47a0      	blx	r4
 8013288:	4603      	mov	r3, r0
 801328a:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d002      	beq.n	8013298 <lv_fs_read+0x62>
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	601a      	str	r2, [r3, #0]

    return res;
 8013298:	7dfb      	ldrb	r3, [r7, #23]
}
 801329a:	4618      	mov	r0, r3
 801329c:	371c      	adds	r7, #28
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd90      	pop	{r4, r7, pc}

080132a2 <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d101      	bne.n	80132b8 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 80132b4:	230b      	movs	r3, #11
 80132b6:	e012      	b.n	80132de <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	6a1b      	ldr	r3, [r3, #32]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d101      	bne.n	80132c6 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 80132c2:	2309      	movs	r3, #9
 80132c4:	e00b      	b.n	80132de <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	6a1b      	ldr	r3, [r3, #32]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	6850      	ldr	r0, [r2, #4]
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	6811      	ldr	r1, [r2, #0]
 80132d4:	683a      	ldr	r2, [r7, #0]
 80132d6:	4798      	blx	r3
 80132d8:	4603      	mov	r3, r0
 80132da:	73fb      	strb	r3, [r7, #15]

    return res;
 80132dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = strlen(fn); i > 0; i--) {
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7ec ff77 	bl	80001e4 <strlen>
 80132f6:	4603      	mov	r3, r0
 80132f8:	81fb      	strh	r3, [r7, #14]
 80132fa:	e01b      	b.n	8013334 <lv_fs_get_ext+0x4c>
        if(fn[i] == '.') {
 80132fc:	89fb      	ldrh	r3, [r7, #14]
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	4413      	add	r3, r2
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	2b2e      	cmp	r3, #46	; 0x2e
 8013306:	d104      	bne.n	8013312 <lv_fs_get_ext+0x2a>
            return &fn[i + 1];
 8013308:	89fb      	ldrh	r3, [r7, #14]
 801330a:	3301      	adds	r3, #1
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	4413      	add	r3, r2
 8013310:	e014      	b.n	801333c <lv_fs_get_ext+0x54>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 8013312:	89fb      	ldrh	r3, [r7, #14]
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	4413      	add	r3, r2
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	2b2f      	cmp	r3, #47	; 0x2f
 801331c:	d005      	beq.n	801332a <lv_fs_get_ext+0x42>
 801331e:	89fb      	ldrh	r3, [r7, #14]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	4413      	add	r3, r2
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	2b5c      	cmp	r3, #92	; 0x5c
 8013328:	d101      	bne.n	801332e <lv_fs_get_ext+0x46>
            return ""; /*No extension if a '\' or '/' found*/
 801332a:	4b06      	ldr	r3, [pc, #24]	; (8013344 <lv_fs_get_ext+0x5c>)
 801332c:	e006      	b.n	801333c <lv_fs_get_ext+0x54>
    for(i = strlen(fn); i > 0; i--) {
 801332e:	89fb      	ldrh	r3, [r7, #14]
 8013330:	3b01      	subs	r3, #1
 8013332:	81fb      	strh	r3, [r7, #14]
 8013334:	89fb      	ldrh	r3, [r7, #14]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1e0      	bne.n	80132fc <lv_fs_get_ext+0x14>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 801333a:	4b02      	ldr	r3, [pc, #8]	; (8013344 <lv_fs_get_ext+0x5c>)
}
 801333c:	4618      	mov	r0, r3
 801333e:	3710      	adds	r7, #16
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	08029c54 	.word	0x08029c54

08013348 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	3301      	adds	r3, #1
 8013354:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 8013356:	e00e      	b.n	8013376 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	2b3a      	cmp	r3, #58	; 0x3a
 801335e:	d007      	beq.n	8013370 <lv_fs_get_real_path+0x28>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	2b5c      	cmp	r3, #92	; 0x5c
 8013366:	d003      	beq.n	8013370 <lv_fs_get_real_path+0x28>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	2b2f      	cmp	r3, #47	; 0x2f
 801336e:	d106      	bne.n	801337e <lv_fs_get_real_path+0x36>
            path++;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3301      	adds	r3, #1
 8013374:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d1ec      	bne.n	8013358 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 801337e:	687b      	ldr	r3, [r7, #4]
}
 8013380:	4618      	mov	r0, r3
 8013382:	370c      	adds	r7, #12
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr

0801338c <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	4603      	mov	r3, r0
 8013394:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8013396:	480c      	ldr	r0, [pc, #48]	; (80133c8 <lv_fs_get_drv+0x3c>)
 8013398:	f000 f99a 	bl	80136d0 <lv_ll_get_head>
 801339c:	60f8      	str	r0, [r7, #12]
 801339e:	e00b      	b.n	80133b8 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	79fa      	ldrb	r2, [r7, #7]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d101      	bne.n	80133ae <lv_fs_get_drv+0x22>
            return drv;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	e008      	b.n	80133c0 <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 80133ae:	68f9      	ldr	r1, [r7, #12]
 80133b0:	4805      	ldr	r0, [pc, #20]	; (80133c8 <lv_fs_get_drv+0x3c>)
 80133b2:	f000 f9b3 	bl	801371c <lv_ll_get_next>
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d1f0      	bne.n	80133a0 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 80133be:	2300      	movs	r3, #0
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3710      	adds	r7, #16
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	20006dc8 	.word	0x20006dc8

080133cc <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2200      	movs	r2, #0
 80133da:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2200      	movs	r2, #0
 80133e0:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	f003 0303 	and.w	r3, r3, #3
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d006      	beq.n	80133fa <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	f023 0303 	bic.w	r3, r3, #3
 80133f2:	603b      	str	r3, [r7, #0]
        node_size += 4;
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	3304      	adds	r3, #4
 80133f8:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	683a      	ldr	r2, [r7, #0]
 80133fe:	601a      	str	r2, [r3, #0]
}
 8013400:	bf00      	nop
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr

0801340c <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	3308      	adds	r3, #8
 801341a:	4618      	mov	r0, r3
 801341c:	f000 fad8 	bl	80139d0 <lv_mem_alloc>
 8013420:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d020      	beq.n	801346a <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8013428:	2200      	movs	r2, #0
 801342a:	68f9      	ldr	r1, [r7, #12]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 fa08 	bl	8013842 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	461a      	mov	r2, r3
 8013438:	68f9      	ldr	r1, [r7, #12]
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f000 fa27 	bl	801388e <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d006      	beq.n	8013456 <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	4619      	mov	r1, r3
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f000 f9f6 	bl	8013842 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	689b      	ldr	r3, [r3, #8]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d102      	bne.n	801346a <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	68fa      	ldr	r2, [r7, #12]
 8013468:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801346a:	68fb      	ldr	r3, [r7, #12]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3710      	adds	r7, #16
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b084      	sub	sp, #16
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <lv_ll_ins_prev+0x16>
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <lv_ll_ins_prev+0x1a>
 801348a:	2300      	movs	r3, #0
 801348c:	e035      	b.n	80134fa <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 f91e 	bl	80136d0 <lv_ll_get_head>
 8013494:	4602      	mov	r2, r0
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	4293      	cmp	r3, r2
 801349a:	d108      	bne.n	80134ae <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7ff ffb5 	bl	801340c <lv_ll_ins_head>
 80134a2:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d126      	bne.n	80134f8 <lv_ll_ins_prev+0x84>
 80134aa:	2300      	movs	r3, #0
 80134ac:	e025      	b.n	80134fa <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3308      	adds	r3, #8
 80134b4:	4618      	mov	r0, r3
 80134b6:	f000 fa8b 	bl	80139d0 <lv_mem_alloc>
 80134ba:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d101      	bne.n	80134c6 <lv_ll_ins_prev+0x52>
 80134c2:	2300      	movs	r3, #0
 80134c4:	e019      	b.n	80134fa <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 80134c6:	6839      	ldr	r1, [r7, #0]
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f000 f941 	bl	8013750 <lv_ll_get_prev>
 80134ce:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	68b9      	ldr	r1, [r7, #8]
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 f9da 	bl	801388e <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 80134da:	68ba      	ldr	r2, [r7, #8]
 80134dc:	68f9      	ldr	r1, [r7, #12]
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 f9af 	bl	8013842 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 80134e4:	68fa      	ldr	r2, [r7, #12]
 80134e6:	6839      	ldr	r1, [r7, #0]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 f9aa 	bl	8013842 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	68f9      	ldr	r1, [r7, #12]
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 f9cb 	bl	801388e <node_set_next>
    }

    return n_new;
 80134f8:	68fb      	ldr	r3, [r7, #12]
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3710      	adds	r7, #16
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8013502:	b580      	push	{r7, lr}
 8013504:	b084      	sub	sp, #16
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	3308      	adds	r3, #8
 8013510:	4618      	mov	r0, r3
 8013512:	f000 fa5d 	bl	80139d0 <lv_mem_alloc>
 8013516:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d101      	bne.n	8013522 <lv_ll_ins_tail+0x20>
 801351e:	2300      	movs	r3, #0
 8013520:	e024      	b.n	801356c <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d020      	beq.n	801356a <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8013528:	2200      	movs	r2, #0
 801352a:	68f9      	ldr	r1, [r7, #12]
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 f9ae 	bl	801388e <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	689b      	ldr	r3, [r3, #8]
 8013536:	461a      	mov	r2, r3
 8013538:	68f9      	ldr	r1, [r7, #12]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 f981 	bl	8013842 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d006      	beq.n	8013556 <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	689b      	ldr	r3, [r3, #8]
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	4619      	mov	r1, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f000 f99c 	bl	801388e <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d102      	bne.n	801356a <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	68fa      	ldr	r2, [r7, #12]
 8013568:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801356a:	68fb      	ldr	r3, [r7, #12]
}
 801356c:	4618      	mov	r0, r3
 801356e:	3710      	adds	r7, #16
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 f8a6 	bl	80136d0 <lv_ll_get_head>
 8013584:	4602      	mov	r2, r0
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	4293      	cmp	r3, r2
 801358a:	d116      	bne.n	80135ba <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801358c:	6839      	ldr	r1, [r7, #0]
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f000 f8c4 	bl	801371c <lv_ll_get_next>
 8013594:	4602      	mov	r2, r0
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d103      	bne.n	80135aa <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2200      	movs	r2, #0
 80135a6:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 80135a8:	e039      	b.n	801361e <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	2200      	movs	r2, #0
 80135b0:	4619      	mov	r1, r3
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 f945 	bl	8013842 <node_set_prev>
}
 80135b8:	e031      	b.n	801361e <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 f89b 	bl	80136f6 <lv_ll_get_tail>
 80135c0:	4602      	mov	r2, r0
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d116      	bne.n	80135f6 <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80135c8:	6839      	ldr	r1, [r7, #0]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f000 f8c0 	bl	8013750 <lv_ll_get_prev>
 80135d0:	4602      	mov	r2, r0
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d103      	bne.n	80135e6 <lv_ll_rem+0x72>
            ll_p->head = NULL;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2200      	movs	r2, #0
 80135e2:	605a      	str	r2, [r3, #4]
}
 80135e4:	e01b      	b.n	801361e <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	689b      	ldr	r3, [r3, #8]
 80135ea:	2200      	movs	r2, #0
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f000 f94d 	bl	801388e <node_set_next>
}
 80135f4:	e013      	b.n	801361e <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 80135f6:	6839      	ldr	r1, [r7, #0]
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f000 f8a9 	bl	8013750 <lv_ll_get_prev>
 80135fe:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 f88a 	bl	801371c <lv_ll_get_next>
 8013608:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	68f9      	ldr	r1, [r7, #12]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f000 f93d 	bl	801388e <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8013614:	68fa      	ldr	r2, [r7, #12]
 8013616:	68b9      	ldr	r1, [r7, #8]
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f000 f912 	bl	8013842 <node_set_prev>
}
 801361e:	bf00      	nop
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b084      	sub	sp, #16
 801362a:	af00      	add	r7, sp, #0
 801362c:	60f8      	str	r0, [r7, #12]
 801362e:	60b9      	str	r1, [r7, #8]
 8013630:	607a      	str	r2, [r7, #4]
 8013632:	70fb      	strb	r3, [r7, #3]
    lv_ll_rem(ll_ori_p, node);
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7ff ff9c 	bl	8013574 <lv_ll_rem>

    if(head) {
 801363c:	78fb      	ldrb	r3, [r7, #3]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d021      	beq.n	8013686 <lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 8013642:	2200      	movs	r2, #0
 8013644:	6879      	ldr	r1, [r7, #4]
 8013646:	68b8      	ldr	r0, [r7, #8]
 8013648:	f000 f8fb 	bl	8013842 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	461a      	mov	r2, r3
 8013652:	6879      	ldr	r1, [r7, #4]
 8013654:	68b8      	ldr	r0, [r7, #8]
 8013656:	f000 f91a 	bl	801388e <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d006      	beq.n	8013670 <lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	4619      	mov	r1, r3
 801366a:	68b8      	ldr	r0, [r7, #8]
 801366c:	f000 f8e9 	bl	8013842 <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d124      	bne.n	80136c8 <lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 8013684:	e020      	b.n	80136c8 <lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	689b      	ldr	r3, [r3, #8]
 801368a:	461a      	mov	r2, r3
 801368c:	6879      	ldr	r1, [r7, #4]
 801368e:	68b8      	ldr	r0, [r7, #8]
 8013690:	f000 f8d7 	bl	8013842 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 8013694:	2200      	movs	r2, #0
 8013696:	6879      	ldr	r1, [r7, #4]
 8013698:	68b8      	ldr	r0, [r7, #8]
 801369a:	f000 f8f8 	bl	801388e <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d006      	beq.n	80136b4 <lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	4619      	mov	r1, r3
 80136ae:	68b8      	ldr	r0, [r7, #8]
 80136b0:	f000 f8ed 	bl	801388e <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d102      	bne.n	80136c8 <lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	605a      	str	r2, [r3, #4]
}
 80136c8:	bf00      	nop
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 80136d8:	2300      	movs	r3, #0
 80136da:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <lv_ll_get_head+0x18>
        head = ll_p->head;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	60fb      	str	r3, [r7, #12]
    }

    return head;
 80136e8:	68fb      	ldr	r3, [r7, #12]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3714      	adds	r7, #20
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr

080136f6 <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 80136f6:	b480      	push	{r7}
 80136f8:	b085      	sub	sp, #20
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 80136fe:	2300      	movs	r3, #0
 8013700:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	689b      	ldr	r3, [r3, #8]
 801370c:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 801370e:	68fb      	ldr	r3, [r7, #12]
}
 8013710:	4618      	mov	r0, r3
 8013712:	3714      	adds	r7, #20
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801371c:	b480      	push	{r7}
 801371e:	b085      	sub	sp, #20
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 8013726:	2300      	movs	r3, #0
 8013728:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d008      	beq.n	8013742 <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	3304      	adds	r3, #4
 801373a:	68fa      	ldr	r2, [r7, #12]
 801373c:	4413      	add	r3, r2
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	60bb      	str	r3, [r7, #8]
    }

    return next;
 8013742:	68bb      	ldr	r3, [r7, #8]
}
 8013744:	4618      	mov	r0, r3
 8013746:	3714      	adds	r7, #20
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr

08013750 <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8013750:	b480      	push	{r7}
 8013752:	b085      	sub	sp, #20
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 801375a:	2300      	movs	r3, #0
 801375c:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d007      	beq.n	8013774 <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	4413      	add	r3, r2
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 8013774:	68bb      	ldr	r3, [r7, #8]
}
 8013776:	4618      	mov	r0, r3
 8013778:	3714      	adds	r7, #20
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr

08013782 <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 8013782:	b580      	push	{r7, lr}
 8013784:	b086      	sub	sp, #24
 8013786:	af00      	add	r7, sp, #0
 8013788:	60f8      	str	r0, [r7, #12]
 801378a:	60b9      	str	r1, [r7, #8]
 801378c:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	429a      	cmp	r2, r3
 8013794:	d035      	beq.n	8013802 <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d005      	beq.n	80137a8 <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 801379c:	6879      	ldr	r1, [r7, #4]
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	f7ff ffd6 	bl	8013750 <lv_ll_get_prev>
 80137a4:	6178      	str	r0, [r7, #20]
 80137a6:	e003      	b.n	80137b0 <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ff ffa4 	bl	80136f6 <lv_ll_get_tail>
 80137ae:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d026      	beq.n	8013806 <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 80137b8:	68b9      	ldr	r1, [r7, #8]
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	f7ff feda 	bl	8013574 <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 80137c0:	68ba      	ldr	r2, [r7, #8]
 80137c2:	6979      	ldr	r1, [r7, #20]
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f000 f862 	bl	801388e <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 80137ca:	697a      	ldr	r2, [r7, #20]
 80137cc:	68b9      	ldr	r1, [r7, #8]
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	f000 f837 	bl	8013842 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	6879      	ldr	r1, [r7, #4]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f000 f832 	bl	8013842 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	68b9      	ldr	r1, [r7, #8]
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	f000 f853 	bl	801388e <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <lv_ll_move_before+0x72>
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	68ba      	ldr	r2, [r7, #8]
 80137f2:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d106      	bne.n	8013808 <lv_ll_move_before+0x86>
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	68ba      	ldr	r2, [r7, #8]
 80137fe:	605a      	str	r2, [r3, #4]
 8013800:	e002      	b.n	8013808 <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 8013802:	bf00      	nop
 8013804:	e000      	b.n	8013808 <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8013806:	bf00      	nop
}
 8013808:	3718      	adds	r7, #24
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}

0801380e <lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool lv_ll_is_empty(lv_ll_t * ll_p)
{
 801380e:	b480      	push	{r7}
 8013810:	b083      	sub	sp, #12
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <lv_ll_is_empty+0x12>
 801381c:	2301      	movs	r3, #1
 801381e:	e00a      	b.n	8013836 <lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d105      	bne.n	8013834 <lv_ll_is_empty+0x26>
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	689b      	ldr	r3, [r3, #8]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d101      	bne.n	8013834 <lv_ll_is_empty+0x26>
 8013830:	2301      	movs	r3, #1
 8013832:	e000      	b.n	8013836 <lv_ll_is_empty+0x28>

    return false;
 8013834:	2300      	movs	r3, #0
}
 8013836:	4618      	mov	r0, r3
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr

08013842 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b086      	sub	sp, #24
 8013846:	af00      	add	r7, sp, #0
 8013848:	60f8      	str	r0, [r7, #12]
 801384a:	60b9      	str	r1, [r7, #8]
 801384c:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d018      	beq.n	8013886 <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 8013854:	2304      	movs	r3, #4
 8013856:	617b      	str	r3, [r7, #20]
    if(prev)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d009      	beq.n	8013872 <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	4413      	add	r3, r2
 8013866:	1d39      	adds	r1, r7, #4
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	4618      	mov	r0, r3
 801386c:	f013 fc98 	bl	80271a0 <memcpy>
 8013870:	e00a      	b.n	8013888 <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	68ba      	ldr	r2, [r7, #8]
 8013878:	4413      	add	r3, r2
 801387a:	697a      	ldr	r2, [r7, #20]
 801387c:	2100      	movs	r1, #0
 801387e:	4618      	mov	r0, r3
 8013880:	f013 fc99 	bl	80271b6 <memset>
 8013884:	e000      	b.n	8013888 <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8013886:	bf00      	nop
}
 8013888:	3718      	adds	r7, #24
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b086      	sub	sp, #24
 8013892:	af00      	add	r7, sp, #0
 8013894:	60f8      	str	r0, [r7, #12]
 8013896:	60b9      	str	r1, [r7, #8]
 8013898:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d01a      	beq.n	80138d6 <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 80138a0:	2304      	movs	r3, #4
 80138a2:	617b      	str	r3, [r7, #20]
    if(next)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00a      	beq.n	80138c0 <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	3304      	adds	r3, #4
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	4413      	add	r3, r2
 80138b4:	1d39      	adds	r1, r7, #4
 80138b6:	697a      	ldr	r2, [r7, #20]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f013 fc71 	bl	80271a0 <memcpy>
 80138be:	e00b      	b.n	80138d8 <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	3304      	adds	r3, #4
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	4413      	add	r3, r2
 80138ca:	697a      	ldr	r2, [r7, #20]
 80138cc:	2100      	movs	r1, #0
 80138ce:	4618      	mov	r0, r3
 80138d0:	f013 fc71 	bl	80271b6 <memset>
 80138d4:	e000      	b.n	80138d8 <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80138d6:	bf00      	nop
}
 80138d8:	3718      	adds	r7, #24
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
	...

080138e0 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t lv_trigo_sin(int16_t angle)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	4603      	mov	r3, r0
 80138e8:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 80138ea:	2300      	movs	r3, #0
 80138ec:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 80138ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80138f2:	4a31      	ldr	r2, [pc, #196]	; (80139b8 <lv_trigo_sin+0xd8>)
 80138f4:	fb82 1203 	smull	r1, r2, r2, r3
 80138f8:	441a      	add	r2, r3
 80138fa:	1211      	asrs	r1, r2, #8
 80138fc:	17da      	asrs	r2, r3, #31
 80138fe:	1a8a      	subs	r2, r1, r2
 8013900:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8013904:	fb01 f202 	mul.w	r2, r1, r2
 8013908:	1a9b      	subs	r3, r3, r2
 801390a:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 801390c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013910:	2b00      	cmp	r3, #0
 8013912:	da04      	bge.n	801391e <lv_trigo_sin+0x3e>
 8013914:	88fb      	ldrh	r3, [r7, #6]
 8013916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801391a:	b29b      	uxth	r3, r3
 801391c:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 801391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013922:	2b59      	cmp	r3, #89	; 0x59
 8013924:	dc06      	bgt.n	8013934 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8013926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801392a:	4a24      	ldr	r2, [pc, #144]	; (80139bc <lv_trigo_sin+0xdc>)
 801392c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013930:	81fb      	strh	r3, [r7, #14]
 8013932:	e038      	b.n	80139a6 <lv_trigo_sin+0xc6>
    } else if(angle >= 90 && angle < 180) {
 8013934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013938:	2b59      	cmp	r3, #89	; 0x59
 801393a:	dd0f      	ble.n	801395c <lv_trigo_sin+0x7c>
 801393c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013940:	2bb3      	cmp	r3, #179	; 0xb3
 8013942:	dc0b      	bgt.n	801395c <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8013944:	88fb      	ldrh	r3, [r7, #6]
 8013946:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 801394a:	b29b      	uxth	r3, r3
 801394c:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801394e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013952:	4a1a      	ldr	r2, [pc, #104]	; (80139bc <lv_trigo_sin+0xdc>)
 8013954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013958:	81fb      	strh	r3, [r7, #14]
 801395a:	e024      	b.n	80139a6 <lv_trigo_sin+0xc6>
    } else if(angle >= 180 && angle < 270) {
 801395c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013960:	2bb3      	cmp	r3, #179	; 0xb3
 8013962:	dd12      	ble.n	801398a <lv_trigo_sin+0xaa>
 8013964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013968:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801396c:	da0d      	bge.n	801398a <lv_trigo_sin+0xaa>
        angle = angle - 180;
 801396e:	88fb      	ldrh	r3, [r7, #6]
 8013970:	3bb4      	subs	r3, #180	; 0xb4
 8013972:	b29b      	uxth	r3, r3
 8013974:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8013976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801397a:	4a10      	ldr	r2, [pc, #64]	; (80139bc <lv_trigo_sin+0xdc>)
 801397c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013980:	b29b      	uxth	r3, r3
 8013982:	425b      	negs	r3, r3
 8013984:	b29b      	uxth	r3, r3
 8013986:	81fb      	strh	r3, [r7, #14]
 8013988:	e00d      	b.n	80139a6 <lv_trigo_sin+0xc6>
    } else { /*angle >=270*/
        angle = 360 - angle;
 801398a:	88fb      	ldrh	r3, [r7, #6]
 801398c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8013990:	b29b      	uxth	r3, r3
 8013992:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8013994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013998:	4a08      	ldr	r2, [pc, #32]	; (80139bc <lv_trigo_sin+0xdc>)
 801399a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	425b      	negs	r3, r3
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 80139a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop
 80139b8:	b60b60b7 	.word	0xb60b60b7
 80139bc:	200026e0 	.word	0x200026e0

080139c0 <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 80139c0:	b480      	push	{r7}
 80139c2:	af00      	add	r7, sp, #0
    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
    full->header.s.used = 0;
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
#endif
}
 80139c4:	bf00      	nop
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr
	...

080139d0 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d101      	bne.n	80139e2 <lv_mem_alloc+0x12>
        return &zero_mem;
 80139de:	4b1b      	ldr	r3, [pc, #108]	; (8013a4c <lv_mem_alloc+0x7c>)
 80139e0:	e030      	b.n	8013a44 <lv_mem_alloc+0x74>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f003 0303 	and.w	r3, r3, #3
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d006      	beq.n	80139fa <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f023 0303 	bic.w	r3, r3, #3
 80139f2:	607b      	str	r3, [r7, #4]
        size += 4;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	3304      	adds	r3, #4
 80139f8:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	60fb      	str	r3, [r7, #12]
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	3304      	adds	r3, #4
 8013a02:	4618      	mov	r0, r3
 8013a04:	f013 fbbc 	bl	8027180 <malloc>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	60fb      	str	r3, [r7, #12]
    if(alloc != NULL) {
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00f      	beq.n	8013a32 <lv_mem_alloc+0x62>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	6813      	ldr	r3, [r2, #0]
 8013a1c:	f361 035f 	bfi	r3, r1, #1, #31
 8013a20:	6013      	str	r3, [r2, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
 8013a22:	68fa      	ldr	r2, [r7, #12]
 8013a24:	7813      	ldrb	r3, [r2, #0]
 8013a26:	f043 0301 	orr.w	r3, r3, #1
 8013a2a:	7013      	strb	r3, [r2, #0]

        alloc = &((lv_mem_ent_t *)alloc)->first_data;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3304      	adds	r3, #4
 8013a30:	60fb      	str	r3, [r7, #12]
    }
#endif                /* LV_ENABLE_GC */
#endif                /* LV_MEM_CUSTOM */

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) memset(alloc, 0xaa, size);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d004      	beq.n	8013a42 <lv_mem_alloc+0x72>
 8013a38:	687a      	ldr	r2, [r7, #4]
 8013a3a:	21aa      	movs	r1, #170	; 0xaa
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f013 fbba 	bl	80271b6 <memset>
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 8013a42:	68fb      	ldr	r3, [r7, #12]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3710      	adds	r7, #16
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	20002a88 	.word	0x20002a88

08013a50 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	4a10      	ldr	r2, [pc, #64]	; (8013a9c <lv_mem_free+0x4c>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d017      	beq.n	8013a90 <lv_mem_free+0x40>
    if(data == NULL) return;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d016      	beq.n	8013a94 <lv_mem_free+0x44>

#if LV_MEM_ADD_JUNK
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 f858 	bl	8013b1c <lv_mem_get_size>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	461a      	mov	r2, r3
 8013a70:	21bb      	movs	r1, #187	; 0xbb
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f013 fb9f 	bl	80271b6 <memset>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3b04      	subs	r3, #4
 8013a7c:	60fb      	str	r3, [r7, #12]
    e->header.s.used = 0;
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	7813      	ldrb	r3, [r2, #0]
 8013a82:	f36f 0300 	bfc	r3, #0, #1
 8013a86:	7013      	strb	r3, [r2, #0]
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f013 fb81 	bl	8027190 <free>
 8013a8e:	e002      	b.n	8013a96 <lv_mem_free+0x46>
    if(data == &zero_mem) return;
 8013a90:	bf00      	nop
 8013a92:	e000      	b.n	8013a96 <lv_mem_free+0x46>
    if(data == NULL) return;
 8013a94:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	20002a88 	.word	0x20002a88

08013aa0 <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, uint32_t new_size)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b086      	sub	sp, #24
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00b      	beq.n	8013ac8 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3b04      	subs	r3, #4
 8013ab4:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	f003 0301 	and.w	r3, r3, #1
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d101      	bne.n	8013ac8 <lv_mem_realloc+0x28>
            data_p = NULL;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 f827 	bl	8013b1c <lv_mem_get_size>
 8013ace:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013ad0:	693a      	ldr	r2, [r7, #16]
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d101      	bne.n	8013adc <lv_mem_realloc+0x3c>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	e01a      	b.n	8013b12 <lv_mem_realloc+0x72>
        return &e->first_data;
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 8013adc:	6838      	ldr	r0, [r7, #0]
 8013ade:	f7ff ff77 	bl	80139d0 <lv_mem_alloc>
 8013ae2:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d012      	beq.n	8013b10 <lv_mem_realloc+0x70>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00f      	beq.n	8013b10 <lv_mem_realloc+0x70>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d00c      	beq.n	8013b10 <lv_mem_realloc+0x70>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8013af6:	693a      	ldr	r2, [r7, #16]
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	4293      	cmp	r3, r2
 8013afc:	bf28      	it	cs
 8013afe:	4613      	movcs	r3, r2
 8013b00:	461a      	mov	r2, r3
 8013b02:	6879      	ldr	r1, [r7, #4]
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f013 fb4b 	bl	80271a0 <memcpy>
            lv_mem_free(data_p);
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f7ff ffa0 	bl	8013a50 <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 8013b10:	68fb      	ldr	r3, [r7, #12]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3718      	adds	r7, #24
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
	...

08013b1c <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b085      	sub	sp, #20
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d101      	bne.n	8013b2e <lv_mem_get_size+0x12>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e00c      	b.n	8013b48 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4a08      	ldr	r2, [pc, #32]	; (8013b54 <lv_mem_get_size+0x38>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d101      	bne.n	8013b3a <lv_mem_get_size+0x1e>
 8013b36:	2300      	movs	r3, #0
 8013b38:	e006      	b.n	8013b48 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3b04      	subs	r3, #4
 8013b3e:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3714      	adds	r7, #20
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr
 8013b54:	20002a88 	.word	0x20002a88

08013b58 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8013b5c:	2114      	movs	r1, #20
 8013b5e:	4804      	ldr	r0, [pc, #16]	; (8013b70 <lv_task_core_init+0x18>)
 8013b60:	f7ff fc34 	bl	80133cc <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 8013b64:	2001      	movs	r0, #1
 8013b66:	f000 fa23 	bl	8013fb0 <lv_task_enable>
}
 8013b6a:	bf00      	nop
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	20006d94 	.word	0x20006d94

08013b74 <lv_task_handler>:

/**
 * Call it  periodically to handle lv_tasks.
 */
LV_ATTRIBUTE_TASK_HANDLER void lv_task_handler(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool task_handler_mutex = false;
    if(task_handler_mutex) return;
 8013b7a:	4b6b      	ldr	r3, [pc, #428]	; (8013d28 <lv_task_handler+0x1b4>)
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f040 80cd 	bne.w	8013d1e <lv_task_handler+0x1aa>
    task_handler_mutex = true;
 8013b84:	4b68      	ldr	r3, [pc, #416]	; (8013d28 <lv_task_handler+0x1b4>)
 8013b86:	2201      	movs	r2, #1
 8013b88:	701a      	strb	r2, [r3, #0]

    static uint32_t idle_period_start = 0;
    static uint32_t handler_start     = 0;
    static uint32_t busy_time         = 0;

    if(lv_task_run == false) {
 8013b8a:	4b68      	ldr	r3, [pc, #416]	; (8013d2c <lv_task_handler+0x1b8>)
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	f083 0301 	eor.w	r3, r3, #1
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d003      	beq.n	8013ba0 <lv_task_handler+0x2c>
        task_handler_mutex = false; /*Release mutex*/
 8013b98:	4b63      	ldr	r3, [pc, #396]	; (8013d28 <lv_task_handler+0x1b4>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	701a      	strb	r2, [r3, #0]
        return;
 8013b9e:	e0bf      	b.n	8013d20 <lv_task_handler+0x1ac>
    }

    handler_start = lv_tick_get();
 8013ba0:	f7fe fdf0 	bl	8012784 <lv_tick_get>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	4b62      	ldr	r3, [pc, #392]	; (8013d30 <lv_task_handler+0x1bc>)
 8013ba8:	601a      	str	r2, [r3, #0]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	60fb      	str	r3, [r7, #12]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	72fb      	strb	r3, [r7, #11]
        task_deleted             = false;
 8013bb2:	4b60      	ldr	r3, [pc, #384]	; (8013d34 <lv_task_handler+0x1c0>)
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 8013bb8:	4b5f      	ldr	r3, [pc, #380]	; (8013d38 <lv_task_handler+0x1c4>)
 8013bba:	2200      	movs	r2, #0
 8013bbc:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013bbe:	485f      	ldr	r0, [pc, #380]	; (8013d3c <lv_task_handler+0x1c8>)
 8013bc0:	f7ff fd86 	bl	80136d0 <lv_ll_get_head>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	4b5e      	ldr	r3, [pc, #376]	; (8013d40 <lv_task_handler+0x1cc>)
 8013bc8:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8013bca:	e05e      	b.n	8013c8a <lv_task_handler+0x116>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8013bcc:	4b5c      	ldr	r3, [pc, #368]	; (8013d40 <lv_task_handler+0x1cc>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	485a      	ldr	r0, [pc, #360]	; (8013d3c <lv_task_handler+0x1c8>)
 8013bd4:	f7ff fda2 	bl	801371c <lv_ll_get_next>
 8013bd8:	6078      	str	r0, [r7, #4]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8013bda:	4b59      	ldr	r3, [pc, #356]	; (8013d40 <lv_task_handler+0x1cc>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	7c1b      	ldrb	r3, [r3, #16]
 8013be0:	f003 0307 	and.w	r3, r3, #7
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d054      	beq.n	8013c94 <lv_task_handler+0x120>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8013bea:	4b55      	ldr	r3, [pc, #340]	; (8013d40 <lv_task_handler+0x1cc>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d105      	bne.n	8013c00 <lv_task_handler+0x8c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	60fb      	str	r3, [r7, #12]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 8013bf8:	4a51      	ldr	r2, [pc, #324]	; (8013d40 <lv_task_handler+0x1cc>)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 8013bfe:	e044      	b.n	8013c8a <lv_task_handler+0x116>
            }

            /*Just try to run the tasks with highest priority.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8013c00:	4b4f      	ldr	r3, [pc, #316]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	7c1b      	ldrb	r3, [r3, #16]
 8013c06:	f003 0307 	and.w	r3, r3, #7
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	2b05      	cmp	r3, #5
 8013c0e:	d105      	bne.n	8013c1c <lv_task_handler+0xa8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8013c10:	4b4b      	ldr	r3, [pc, #300]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4618      	mov	r0, r3
 8013c16:	f000 f9db 	bl	8013fd0 <lv_task_exec>
 8013c1a:	e02b      	b.n	8013c74 <lv_task_handler+0x100>
            }
            /*Tasks with higher priority then the interrupted shall be run in every case*/
            else if(task_interrupter) {
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d01a      	beq.n	8013c58 <lv_task_handler+0xe4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8013c22:	4b47      	ldr	r3, [pc, #284]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	7c1b      	ldrb	r3, [r3, #16]
 8013c28:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013c2c:	b2da      	uxtb	r2, r3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	7c1b      	ldrb	r3, [r3, #16]
 8013c32:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d91b      	bls.n	8013c74 <lv_task_handler+0x100>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8013c3c:	4b40      	ldr	r3, [pc, #256]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 f9c5 	bl	8013fd0 <lv_task_exec>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d013      	beq.n	8013c74 <lv_task_handler+0x100>
                        task_interrupter =
 8013c4c:	4b3c      	ldr	r3, [pc, #240]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	60fb      	str	r3, [r7, #12]
                            LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
                        end_flag = false;
 8013c52:	2300      	movs	r3, #0
 8013c54:	72fb      	strb	r3, [r7, #11]
                        break;
 8013c56:	e022      	b.n	8013c9e <lv_task_handler+0x12a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8013c58:	4b39      	ldr	r3, [pc, #228]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f000 f9b7 	bl	8013fd0 <lv_task_exec>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d005      	beq.n	8013c74 <lv_task_handler+0x100>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8013c68:	4b35      	ldr	r3, [pc, #212]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	60fb      	str	r3, [r7, #12]
                    end_flag         = false;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	72fb      	strb	r3, [r7, #11]
                    break;
 8013c72:	e014      	b.n	8013c9e <lv_task_handler+0x12a>
                }
            }

            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8013c74:	4b2f      	ldr	r3, [pc, #188]	; (8013d34 <lv_task_handler+0x1c0>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d10d      	bne.n	8013c98 <lv_task_handler+0x124>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8013c7c:	4b2e      	ldr	r3, [pc, #184]	; (8013d38 <lv_task_handler+0x1c4>)
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10b      	bne.n	8013c9c <lv_task_handler+0x128>

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8013c84:	4a2e      	ldr	r2, [pc, #184]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8013c8a:	4b2d      	ldr	r3, [pc, #180]	; (8013d40 <lv_task_handler+0x1cc>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d19c      	bne.n	8013bcc <lv_task_handler+0x58>
 8013c92:	e004      	b.n	8013c9e <lv_task_handler+0x12a>
                break;
 8013c94:	bf00      	nop
 8013c96:	e002      	b.n	8013c9e <lv_task_handler+0x12a>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8013c98:	bf00      	nop
 8013c9a:	e000      	b.n	8013c9e <lv_task_handler+0x12a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8013c9c:	bf00      	nop
        }
    } while(!end_flag);
 8013c9e:	7afb      	ldrb	r3, [r7, #11]
 8013ca0:	f083 0301 	eor.w	r3, r3, #1
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d181      	bne.n	8013bae <lv_task_handler+0x3a>

    busy_time += lv_tick_elaps(handler_start);
 8013caa:	4b21      	ldr	r3, [pc, #132]	; (8013d30 <lv_task_handler+0x1bc>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fe fd82 	bl	80127b8 <lv_tick_elaps>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	4b23      	ldr	r3, [pc, #140]	; (8013d44 <lv_task_handler+0x1d0>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4413      	add	r3, r2
 8013cbc:	4a21      	ldr	r2, [pc, #132]	; (8013d44 <lv_task_handler+0x1d0>)
 8013cbe:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8013cc0:	4b21      	ldr	r3, [pc, #132]	; (8013d48 <lv_task_handler+0x1d4>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fe fd77 	bl	80127b8 <lv_tick_elaps>
 8013cca:	6038      	str	r0, [r7, #0]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013cd2:	d320      	bcc.n	8013d16 <lv_task_handler+0x1a2>

        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8013cd4:	4b1b      	ldr	r3, [pc, #108]	; (8013d44 <lv_task_handler+0x1d0>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	2264      	movs	r2, #100	; 0x64
 8013cda:	fb02 f303 	mul.w	r3, r2, r3
 8013cde:	4a1b      	ldr	r2, [pc, #108]	; (8013d4c <lv_task_handler+0x1d8>)
 8013ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce4:	095b      	lsrs	r3, r3, #5
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	4b19      	ldr	r3, [pc, #100]	; (8013d50 <lv_task_handler+0x1dc>)
 8013cea:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8013cec:	4b18      	ldr	r3, [pc, #96]	; (8013d50 <lv_task_handler+0x1dc>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	2b64      	cmp	r3, #100	; 0x64
 8013cf2:	d805      	bhi.n	8013d00 <lv_task_handler+0x18c>
 8013cf4:	4b16      	ldr	r3, [pc, #88]	; (8013d50 <lv_task_handler+0x1dc>)
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	e000      	b.n	8013d02 <lv_task_handler+0x18e>
 8013d00:	2300      	movs	r3, #0
 8013d02:	4a13      	ldr	r2, [pc, #76]	; (8013d50 <lv_task_handler+0x1dc>)
 8013d04:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8013d06:	4b0f      	ldr	r3, [pc, #60]	; (8013d44 <lv_task_handler+0x1d0>)
 8013d08:	2200      	movs	r2, #0
 8013d0a:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8013d0c:	f7fe fd3a 	bl	8012784 <lv_tick_get>
 8013d10:	4602      	mov	r2, r0
 8013d12:	4b0d      	ldr	r3, [pc, #52]	; (8013d48 <lv_task_handler+0x1d4>)
 8013d14:	601a      	str	r2, [r3, #0]
    }

    task_handler_mutex = false; /*Release the mutex*/
 8013d16:	4b04      	ldr	r3, [pc, #16]	; (8013d28 <lv_task_handler+0x1b4>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	701a      	strb	r2, [r3, #0]
 8013d1c:	e000      	b.n	8013d20 <lv_task_handler+0x1ac>
    if(task_handler_mutex) return;
 8013d1e:	bf00      	nop

    LV_LOG_TRACE("lv_task_handler ready");
}
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	20002a90 	.word	0x20002a90
 8013d2c:	20002a8c 	.word	0x20002a8c
 8013d30:	20002a94 	.word	0x20002a94
 8013d34:	20002a8e 	.word	0x20002a8e
 8013d38:	20002a8f 	.word	0x20002a8f
 8013d3c:	20006d94 	.word	0x20006d94
 8013d40:	20006dd4 	.word	0x20006dd4
 8013d44:	20002a98 	.word	0x20002a98
 8013d48:	20002a9c 	.word	0x20002a9c
 8013d4c:	10624dd3 	.word	0x10624dd3
 8013d50:	20002a8d 	.word	0x20002a8d

08013d54 <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013d5e:	4832      	ldr	r0, [pc, #200]	; (8013e28 <lv_task_create_basic+0xd4>)
 8013d60:	f7ff fcb6 	bl	80136d0 <lv_ll_get_head>
 8013d64:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10c      	bne.n	8013d86 <lv_task_create_basic+0x32>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8013d6c:	482e      	ldr	r0, [pc, #184]	; (8013e28 <lv_task_create_basic+0xd4>)
 8013d6e:	f7ff fb4d 	bl	801340c <lv_ll_ins_head>
 8013d72:	6078      	str	r0, [r7, #4]
        lv_mem_assert(new_task);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d100      	bne.n	8013d7c <lv_task_create_basic+0x28>
 8013d7a:	e7fe      	b.n	8013d7a <lv_task_create_basic+0x26>
        if(new_task == NULL) return NULL;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d130      	bne.n	8013de4 <lv_task_create_basic+0x90>
 8013d82:	2300      	movs	r3, #0
 8013d84:	e04c      	b.n	8013e20 <lv_task_create_basic+0xcc>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	7c1b      	ldrb	r3, [r3, #16]
 8013d8a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b03      	cmp	r3, #3
 8013d92:	d80d      	bhi.n	8013db0 <lv_task_create_basic+0x5c>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013d94:	6839      	ldr	r1, [r7, #0]
 8013d96:	4824      	ldr	r0, [pc, #144]	; (8013e28 <lv_task_create_basic+0xd4>)
 8013d98:	f7ff fb6c 	bl	8013474 <lv_ll_ins_prev>
 8013d9c:	6078      	str	r0, [r7, #4]
                lv_mem_assert(new_task);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d100      	bne.n	8013da6 <lv_task_create_basic+0x52>
 8013da4:	e7fe      	b.n	8013da4 <lv_task_create_basic+0x50>
                if(new_task == NULL) return NULL;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10a      	bne.n	8013dc2 <lv_task_create_basic+0x6e>
 8013dac:	2300      	movs	r3, #0
 8013dae:	e037      	b.n	8013e20 <lv_task_create_basic+0xcc>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013db0:	6839      	ldr	r1, [r7, #0]
 8013db2:	481d      	ldr	r0, [pc, #116]	; (8013e28 <lv_task_create_basic+0xd4>)
 8013db4:	f7ff fcb2 	bl	801371c <lv_ll_get_next>
 8013db8:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1e2      	bne.n	8013d86 <lv_task_create_basic+0x32>
 8013dc0:	e000      	b.n	8013dc4 <lv_task_create_basic+0x70>
                break;
 8013dc2:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d10c      	bne.n	8013de4 <lv_task_create_basic+0x90>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8013dca:	4817      	ldr	r0, [pc, #92]	; (8013e28 <lv_task_create_basic+0xd4>)
 8013dcc:	f7ff fb99 	bl	8013502 <lv_ll_ins_tail>
 8013dd0:	6078      	str	r0, [r7, #4]
            lv_mem_assert(new_task);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d100      	bne.n	8013dda <lv_task_create_basic+0x86>
 8013dd8:	e7fe      	b.n	8013dd8 <lv_task_create_basic+0x84>
            if(new_task == NULL) return NULL;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d101      	bne.n	8013de4 <lv_task_create_basic+0x90>
 8013de0:	2300      	movs	r3, #0
 8013de2:	e01d      	b.n	8013e20 <lv_task_create_basic+0xcc>
        }
    }

    new_task->period  = DEF_PERIOD;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013dea:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2200      	movs	r2, #0
 8013df0:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	7c13      	ldrb	r3, [r2, #16]
 8013df6:	2103      	movs	r1, #3
 8013df8:	f361 0302 	bfi	r3, r1, #0, #3
 8013dfc:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	7c13      	ldrb	r3, [r2, #16]
 8013e02:	f36f 03c3 	bfc	r3, #3, #1
 8013e06:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 8013e08:	f7fe fcbc 	bl	8012784 <lv_tick_get>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	60da      	str	r2, [r3, #12]

    task_created = true;
 8013e18:	4b04      	ldr	r3, [pc, #16]	; (8013e2c <lv_task_create_basic+0xd8>)
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	701a      	strb	r2, [r3, #0]

    return new_task;
 8013e1e:	687b      	ldr	r3, [r7, #4]
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	20006d94 	.word	0x20006d94
 8013e2c:	20002a8f 	.word	0x20002a8f

08013e30 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b086      	sub	sp, #24
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	603b      	str	r3, [r7, #0]
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 8013e40:	f7ff ff88 	bl	8013d54 <lv_task_create_basic>
 8013e44:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_task);
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d100      	bne.n	8013e4e <lv_task_create+0x1e>
 8013e4c:	e7fe      	b.n	8013e4c <lv_task_create+0x1c>
    if(new_task == NULL) return NULL;
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d101      	bne.n	8013e58 <lv_task_create+0x28>
 8013e54:	2300      	movs	r3, #0
 8013e56:	e010      	b.n	8013e7a <lv_task_create+0x4a>

    lv_task_set_cb(new_task, task_cb);
 8013e58:	68f9      	ldr	r1, [r7, #12]
 8013e5a:	6978      	ldr	r0, [r7, #20]
 8013e5c:	f000 f811 	bl	8013e82 <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	6978      	ldr	r0, [r7, #20]
 8013e64:	f000 f884 	bl	8013f70 <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 8013e68:	79fb      	ldrb	r3, [r7, #7]
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	6978      	ldr	r0, [r7, #20]
 8013e6e:	f000 f835 	bl	8013edc <lv_task_set_prio>
    new_task->user_data = user_data;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	60da      	str	r2, [r3, #12]

    return new_task;
 8013e78:	697b      	ldr	r3, [r7, #20]
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3718      	adds	r7, #24
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 8013e82:	b480      	push	{r7}
 8013e84:	b083      	sub	sp, #12
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	683a      	ldr	r2, [r7, #0]
 8013e90:	609a      	str	r2, [r3, #8]
}
 8013e92:	bf00      	nop
 8013e94:	370c      	adds	r7, #12
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
	...

08013ea0 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8013ea8:	6879      	ldr	r1, [r7, #4]
 8013eaa:	4809      	ldr	r0, [pc, #36]	; (8013ed0 <lv_task_del+0x30>)
 8013eac:	f7ff fb62 	bl	8013574 <lv_ll_rem>

    lv_mem_free(task);
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7ff fdcd 	bl	8013a50 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8013eb6:	4b07      	ldr	r3, [pc, #28]	; (8013ed4 <lv_task_del+0x34>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d102      	bne.n	8013ec6 <lv_task_del+0x26>
 8013ec0:	4b05      	ldr	r3, [pc, #20]	; (8013ed8 <lv_task_del+0x38>)
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	701a      	strb	r2, [r3, #0]
}
 8013ec6:	bf00      	nop
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	20006d94 	.word	0x20006d94
 8013ed4:	20006dd4 	.word	0x20006dd4
 8013ed8:	20002a8e 	.word	0x20002a8e

08013edc <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b084      	sub	sp, #16
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	7c1b      	ldrb	r3, [r3, #16]
 8013eec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	78fb      	ldrb	r3, [r7, #3]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d033      	beq.n	8013f62 <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8013efa:	481c      	ldr	r0, [pc, #112]	; (8013f6c <lv_task_set_prio+0x90>)
 8013efc:	f7ff fbe8 	bl	80136d0 <lv_ll_get_head>
 8013f00:	60f8      	str	r0, [r7, #12]
 8013f02:	e017      	b.n	8013f34 <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	7c1b      	ldrb	r3, [r3, #16]
 8013f08:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	461a      	mov	r2, r3
 8013f10:	78fb      	ldrb	r3, [r7, #3]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	dc09      	bgt.n	8013f2a <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d00e      	beq.n	8013f3c <lv_task_set_prio+0x60>
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	6879      	ldr	r1, [r7, #4]
 8013f22:	4812      	ldr	r0, [pc, #72]	; (8013f6c <lv_task_set_prio+0x90>)
 8013f24:	f7ff fc2d 	bl	8013782 <lv_ll_move_before>
            break;
 8013f28:	e008      	b.n	8013f3c <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8013f2a:	68f9      	ldr	r1, [r7, #12]
 8013f2c:	480f      	ldr	r0, [pc, #60]	; (8013f6c <lv_task_set_prio+0x90>)
 8013f2e:	f7ff fbf5 	bl	801371c <lv_ll_get_next>
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1e4      	bne.n	8013f04 <lv_task_set_prio+0x28>
 8013f3a:	e000      	b.n	8013f3e <lv_task_set_prio+0x62>
            break;
 8013f3c:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d104      	bne.n	8013f4e <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8013f44:	2200      	movs	r2, #0
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	4808      	ldr	r0, [pc, #32]	; (8013f6c <lv_task_set_prio+0x90>)
 8013f4a:	f7ff fc1a 	bl	8013782 <lv_ll_move_before>
    }

    task->prio = prio;
 8013f4e:	78fb      	ldrb	r3, [r7, #3]
 8013f50:	f003 0307 	and.w	r3, r3, #7
 8013f54:	b2d9      	uxtb	r1, r3
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	7c13      	ldrb	r3, [r2, #16]
 8013f5a:	f361 0302 	bfi	r3, r1, #0, #3
 8013f5e:	7413      	strb	r3, [r2, #16]
 8013f60:	e000      	b.n	8013f64 <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 8013f62:	bf00      	nop
}
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	20006d94 	.word	0x20006d94

08013f70 <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
    task->period = period;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	683a      	ldr	r2, [r7, #0]
 8013f7e:	601a      	str	r2, [r3, #0]
}
 8013f80:	bf00      	nop
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 8013f94:	f7fe fbf6 	bl	8012784 <lv_tick_get>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	1ad3      	subs	r3, r2, r3
 8013fa0:	1e5a      	subs	r2, r3, #1
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	605a      	str	r2, [r3, #4]
}
 8013fa6:	bf00      	nop
 8013fa8:	3708      	adds	r7, #8
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
	...

08013fb0 <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 8013fba:	4a04      	ldr	r2, [pc, #16]	; (8013fcc <lv_task_enable+0x1c>)
 8013fbc:	79fb      	ldrb	r3, [r7, #7]
 8013fbe:	7013      	strb	r3, [r2, #0]
}
 8013fc0:	bf00      	nop
 8013fc2:	370c      	adds	r7, #12
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fca:	4770      	bx	lr
 8013fcc:	20002a8c 	.word	0x20002a8c

08013fd0 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
    bool exec = false;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	73fb      	strb	r3, [r7, #15]

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe fbe9 	bl	80127b8 <lv_tick_elaps>
 8013fe6:	60b8      	str	r0, [r7, #8]
    if(elp >= task->period) {
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d325      	bcc.n	801403e <lv_task_exec+0x6e>
        task->last_run = lv_tick_get();
 8013ff2:	f7fe fbc7 	bl	8012784 <lv_tick_get>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	605a      	str	r2, [r3, #4]
        task_deleted   = false;
 8013ffc:	4b12      	ldr	r3, [pc, #72]	; (8014048 <lv_task_exec+0x78>)
 8013ffe:	2200      	movs	r2, #0
 8014000:	701a      	strb	r2, [r3, #0]
        task_created   = false;
 8014002:	4b12      	ldr	r3, [pc, #72]	; (801404c <lv_task_exec+0x7c>)
 8014004:	2200      	movs	r2, #0
 8014006:	701a      	strb	r2, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d003      	beq.n	8014018 <lv_task_exec+0x48>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	689b      	ldr	r3, [r3, #8]
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8014018:	4b0b      	ldr	r3, [pc, #44]	; (8014048 <lv_task_exec+0x78>)
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	f083 0301 	eor.w	r3, r3, #1
 8014020:	b2db      	uxtb	r3, r3
 8014022:	2b00      	cmp	r3, #0
 8014024:	d009      	beq.n	801403a <lv_task_exec+0x6a>
            if(task->once != 0) {
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	7c1b      	ldrb	r3, [r3, #16]
 801402a:	f003 0308 	and.w	r3, r3, #8
 801402e:	b2db      	uxtb	r3, r3
 8014030:	2b00      	cmp	r3, #0
 8014032:	d002      	beq.n	801403a <lv_task_exec+0x6a>
                lv_task_del(task);
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7ff ff33 	bl	8013ea0 <lv_task_del>
            }
        }
        exec = true;
 801403a:	2301      	movs	r3, #1
 801403c:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 801403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3710      	adds	r7, #16
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	20002a8e 	.word	0x20002a8e
 801404c:	20002a8f 	.word	0x20002a8f

08014050 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	7a1b      	ldrb	r3, [r3, #8]
}
 801405c:	4618      	mov	r0, r3
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b08a      	sub	sp, #40	; 0x28
 801406c:	af02      	add	r7, sp, #8
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
 8014074:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2200      	movs	r2, #0
 801407a:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 809a 	beq.w	80141be <lv_txt_get_size+0x156>
    if(font == NULL) return;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	f000 8098 	beq.w	80141c2 <lv_txt_get_size+0x15a>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014092:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014096:	f003 0302 	and.w	r3, r3, #2
 801409a:	2b00      	cmp	r3, #0
 801409c:	d002      	beq.n	80140a4 <lv_txt_get_size+0x3c>
 801409e:	f647 4318 	movw	r3, #31768	; 0x7c18
 80140a2:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 80140a4:	2300      	movs	r3, #0
 80140a6:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	61bb      	str	r3, [r7, #24]
    lv_coord_t act_line_length;
    uint8_t letter_height = lv_font_get_line_height(font);
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ffcf 	bl	8014050 <lv_font_get_line_height>
 80140b2:	4603      	mov	r3, r0
 80140b4:	75fb      	strb	r3, [r7, #23]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 80140b6:	e048      	b.n	801414a <lv_txt_get_size+0xe2>
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80140b8:	68ba      	ldr	r2, [r7, #8]
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	18d0      	adds	r0, r2, r3
 80140be:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80140c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80140c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	460b      	mov	r3, r1
 80140ce:	6879      	ldr	r1, [r7, #4]
 80140d0:	f000 f87c 	bl	80141cc <lv_txt_get_next_line>
 80140d4:	4603      	mov	r3, r0
 80140d6:	461a      	mov	r2, r3
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	4413      	add	r3, r2
 80140dc:	61bb      	str	r3, [r7, #24]
        size_res->y += letter_height;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140e4:	b29a      	uxth	r2, r3
 80140e6:	7dfb      	ldrb	r3, [r7, #23]
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	4413      	add	r3, r2
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	b21a      	sxth	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	805a      	strh	r2, [r3, #2]
        size_res->y += line_space;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80140fe:	4413      	add	r3, r2
 8014100:	b29b      	uxth	r3, r3
 8014102:	b21a      	sxth	r2, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	805a      	strh	r2, [r3, #2]

        /*Calculate the the longest line*/
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	18d0      	adds	r0, r2, r3
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	b29a      	uxth	r2, r3
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	b29b      	uxth	r3, r3
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	b299      	uxth	r1, r3
 801411a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801411e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	4613      	mov	r3, r2
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	f000 f902 	bl	8014330 <lv_txt_get_width>
 801412c:	4603      	mov	r3, r0
 801412e:	82bb      	strh	r3, [r7, #20]

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014136:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801413a:	4293      	cmp	r3, r2
 801413c:	bfb8      	it	lt
 801413e:	4613      	movlt	r3, r2
 8014140:	b21a      	sxth	r2, r3
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	4413      	add	r3, r2
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1b0      	bne.n	80140b8 <lv_txt_get_size+0x50>
    }

    /*Ma ke the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d01b      	beq.n	8014194 <lv_txt_get_size+0x12c>
 801415c:	69fb      	ldr	r3, [r7, #28]
 801415e:	3b01      	subs	r3, #1
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	4413      	add	r3, r2
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	2b0a      	cmp	r3, #10
 8014168:	d006      	beq.n	8014178 <lv_txt_get_size+0x110>
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	3b01      	subs	r3, #1
 801416e:	68ba      	ldr	r2, [r7, #8]
 8014170:	4413      	add	r3, r2
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	2b0d      	cmp	r3, #13
 8014176:	d10d      	bne.n	8014194 <lv_txt_get_size+0x12c>
        size_res->y += letter_height + line_space;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801417e:	b29a      	uxth	r2, r3
 8014180:	7dfb      	ldrb	r3, [r7, #23]
 8014182:	b299      	uxth	r1, r3
 8014184:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014186:	440b      	add	r3, r1
 8014188:	b29b      	uxth	r3, r3
 801418a:	4413      	add	r3, r2
 801418c:	b29b      	uxth	r3, r3
 801418e:	b21a      	sxth	r2, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d104      	bne.n	80141a8 <lv_txt_get_size+0x140>
        size_res->y = letter_height;
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	b21a      	sxth	r2, r3
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	805a      	strh	r2, [r3, #2]
 80141a6:	e00d      	b.n	80141c4 <lv_txt_get_size+0x15c>
    else
        size_res->y -= line_space;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141ae:	b29a      	uxth	r2, r3
 80141b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	b21a      	sxth	r2, r3
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	805a      	strh	r2, [r3, #2]
 80141bc:	e002      	b.n	80141c4 <lv_txt_get_size+0x15c>
    if(text == NULL) return;
 80141be:	bf00      	nop
 80141c0:	e000      	b.n	80141c4 <lv_txt_get_size+0x15c>
    if(font == NULL) return;
 80141c2:	bf00      	nop
}
 80141c4:	3720      	adds	r7, #32
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}
	...

080141cc <lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08c      	sub	sp, #48	; 0x30
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	4611      	mov	r1, r2
 80141d8:	461a      	mov	r2, r3
 80141da:	460b      	mov	r3, r1
 80141dc:	80fb      	strh	r3, [r7, #6]
 80141de:	4613      	mov	r3, r2
 80141e0:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d101      	bne.n	80141ec <lv_txt_get_next_line+0x20>
 80141e8:	2300      	movs	r3, #0
 80141ea:	e099      	b.n	8014320 <lv_txt_get_next_line+0x154>
    if(font == NULL) return 0;
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d101      	bne.n	80141f6 <lv_txt_get_next_line+0x2a>
 80141f2:	2300      	movs	r3, #0
 80141f4:	e094      	b.n	8014320 <lv_txt_get_next_line+0x154>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80141f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80141fa:	f003 0302 	and.w	r3, r3, #2
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d002      	beq.n	8014208 <lv_txt_get_next_line+0x3c>
 8014202:	f647 4318 	movw	r3, #31768	; 0x7c18
 8014206:	80bb      	strh	r3, [r7, #4]

    uint32_t i                   = 0;
 8014208:	2300      	movs	r3, #0
 801420a:	61bb      	str	r3, [r7, #24]
    uint32_t i_next              = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	617b      	str	r3, [r7, #20]
    lv_coord_t cur_w             = 0;
 8014210:	2300      	movs	r3, #0
 8014212:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t last_break          = NO_BREAK_FOUND;
 8014214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014218:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801421a:	2300      	movs	r3, #0
 801421c:	74fb      	strb	r3, [r7, #19]
    uint32_t letter_w;
    uint32_t letter      = 0;
 801421e:	2300      	movs	r3, #0
 8014220:	623b      	str	r3, [r7, #32]
    uint32_t letter_next = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	627b      	str	r3, [r7, #36]	; 0x24

    letter_next = lv_txt_encoded_next(txt, &i_next);
 8014226:	4b40      	ldr	r3, [pc, #256]	; (8014328 <lv_txt_get_next_line+0x15c>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f107 0214 	add.w	r2, r7, #20
 801422e:	4611      	mov	r1, r2
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	4798      	blx	r3
 8014234:	6278      	str	r0, [r7, #36]	; 0x24

    while(txt[i] != '\0') {
 8014236:	e06b      	b.n	8014310 <lv_txt_get_next_line+0x144>
        letter      = letter_next;
 8014238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423a:	623b      	str	r3, [r7, #32]
        i           = i_next;
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	61bb      	str	r3, [r7, #24]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014240:	4b39      	ldr	r3, [pc, #228]	; (8014328 <lv_txt_get_next_line+0x15c>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f107 0214 	add.w	r2, r7, #20
 8014248:	4611      	mov	r1, r2
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	4798      	blx	r3
 801424e:	6278      	str	r0, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014250:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014254:	f003 0301 	and.w	r3, r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	d009      	beq.n	8014270 <lv_txt_get_next_line+0xa4>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 801425c:	f107 0313 	add.w	r3, r7, #19
 8014260:	6a39      	ldr	r1, [r7, #32]
 8014262:	4618      	mov	r0, r3
 8014264:	f000 f8ce 	bl	8014404 <lv_txt_is_cmd>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d000      	beq.n	8014270 <lv_txt_get_next_line+0xa4>
                continue; /*Skip the letter is it is part of a command*/
 801426e:	e04f      	b.n	8014310 <lv_txt_get_next_line+0x144>
            }
        }

        /*Check for new line chars*/
        if(letter == '\n' || letter == '\r') {
 8014270:	6a3b      	ldr	r3, [r7, #32]
 8014272:	2b0a      	cmp	r3, #10
 8014274:	d002      	beq.n	801427c <lv_txt_get_next_line+0xb0>
 8014276:	6a3b      	ldr	r3, [r7, #32]
 8014278:	2b0d      	cmp	r3, #13
 801427a:	d10b      	bne.n	8014294 <lv_txt_get_next_line+0xc8>
            /*Return with the first letter of the next line*/
            if(letter == '\r' && letter_next == '\n')
 801427c:	6a3b      	ldr	r3, [r7, #32]
 801427e:	2b0d      	cmp	r3, #13
 8014280:	d105      	bne.n	801428e <lv_txt_get_next_line+0xc2>
 8014282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014284:	2b0a      	cmp	r3, #10
 8014286:	d102      	bne.n	801428e <lv_txt_get_next_line+0xc2>
                return i_next;
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	b29b      	uxth	r3, r3
 801428c:	e048      	b.n	8014320 <lv_txt_get_next_line+0x154>
            else
                return i;
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	b29b      	uxth	r3, r3
 8014292:	e045      	b.n	8014320 <lv_txt_get_next_line+0x154>
        } else { /*Check the actual length*/
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8014294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014296:	6a39      	ldr	r1, [r7, #32]
 8014298:	68b8      	ldr	r0, [r7, #8]
 801429a:	f7fd fdb1 	bl	8011e00 <lv_font_get_glyph_width>
 801429e:	4603      	mov	r3, r0
 80142a0:	61fb      	str	r3, [r7, #28]
            cur_w += letter_w;
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142a8:	4413      	add	r3, r2
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*If the txt is too long then finish, this is the line end*/
            if(cur_w > max_width) {
 80142ae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80142b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	dd1a      	ble.n	80142f0 <lv_txt_get_next_line+0x124>
                /*If a break character was already found break there*/
                if(last_break != NO_BREAK_FOUND) {
 80142ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142c0:	d002      	beq.n	80142c8 <lv_txt_get_next_line+0xfc>
                    i = last_break;
 80142c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c4:	61bb      	str	r3, [r7, #24]
 80142c6:	e006      	b.n	80142d6 <lv_txt_get_next_line+0x10a>
                } else {
                    /* Now this character is out of the area so it will be first character of the next line*/
                    /* But 'i' already points to the next character (because of lv_txt_utf8_next) step beck one*/
                    lv_txt_encoded_prev(txt, &i);
 80142c8:	4b18      	ldr	r3, [pc, #96]	; (801432c <lv_txt_get_next_line+0x160>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f107 0218 	add.w	r2, r7, #24
 80142d0:	4611      	mov	r1, r2
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	4798      	blx	r3
                }

                /* Do not let to return without doing nothing.
                 * Find at least one character (Avoid infinite loop )*/
                if(i == 0) lv_txt_encoded_next(txt, &i);
 80142d6:	69bb      	ldr	r3, [r7, #24]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d106      	bne.n	80142ea <lv_txt_get_next_line+0x11e>
 80142dc:	4b12      	ldr	r3, [pc, #72]	; (8014328 <lv_txt_get_next_line+0x15c>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f107 0218 	add.w	r2, r7, #24
 80142e4:	4611      	mov	r1, r2
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	4798      	blx	r3

                return i;
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	b29b      	uxth	r3, r3
 80142ee:	e017      	b.n	8014320 <lv_txt_get_next_line+0x154>
            }
            /*If this char still can fit to this line then check if
             * txt can be broken here later */
            else if(is_break_char(letter)) {
 80142f0:	6a38      	ldr	r0, [r7, #32]
 80142f2:	f000 faa9 	bl	8014848 <is_break_char>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d001      	beq.n	8014300 <lv_txt_get_next_line+0x134>
                last_break = i; /*Save the first char index after break*/
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        if(letter_w > 0) {
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d004      	beq.n	8014310 <lv_txt_get_next_line+0x144>
            cur_w += letter_space;
 8014306:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014308:	88fb      	ldrh	r3, [r7, #6]
 801430a:	4413      	add	r3, r2
 801430c:	b29b      	uxth	r3, r3
 801430e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(txt[i] != '\0') {
 8014310:	69bb      	ldr	r3, [r7, #24]
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	4413      	add	r3, r2
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d18d      	bne.n	8014238 <lv_txt_get_next_line+0x6c>
        }
    }

    return i;
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	b29b      	uxth	r3, r3
}
 8014320:	4618      	mov	r0, r3
 8014322:	3730      	adds	r7, #48	; 0x30
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	2000279c 	.word	0x2000279c
 801432c:	200027a0 	.word	0x200027a0

08014330 <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08a      	sub	sp, #40	; 0x28
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	607a      	str	r2, [r7, #4]
 801433a:	461a      	mov	r2, r3
 801433c:	460b      	mov	r3, r1
 801433e:	817b      	strh	r3, [r7, #10]
 8014340:	4613      	mov	r3, r2
 8014342:	813b      	strh	r3, [r7, #8]
    if(txt == NULL) return 0;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d101      	bne.n	801434e <lv_txt_get_width+0x1e>
 801434a:	2300      	movs	r3, #0
 801434c:	e053      	b.n	80143f6 <lv_txt_get_width+0xc6>
    if(font == NULL) return 0;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d101      	bne.n	8014358 <lv_txt_get_width+0x28>
 8014354:	2300      	movs	r3, #0
 8014356:	e04e      	b.n	80143f6 <lv_txt_get_width+0xc6>

    uint32_t i                   = 0;
 8014358:	2300      	movs	r3, #0
 801435a:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 801435c:	2300      	movs	r3, #0
 801435e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014360:	2300      	movs	r3, #0
 8014362:	74fb      	strb	r3, [r7, #19]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
 8014364:	897b      	ldrh	r3, [r7, #10]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d043      	beq.n	80143f2 <lv_txt_get_width+0xc2>
        while(i < length) {
 801436a:	e035      	b.n	80143d8 <lv_txt_get_width+0xa8>
            letter      = lv_txt_encoded_next(txt, &i);
 801436c:	4b24      	ldr	r3, [pc, #144]	; (8014400 <lv_txt_get_width+0xd0>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f107 0214 	add.w	r2, r7, #20
 8014374:	4611      	mov	r1, r2
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	4798      	blx	r3
 801437a:	6238      	str	r0, [r7, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 801437c:	4b20      	ldr	r3, [pc, #128]	; (8014400 <lv_txt_get_width+0xd0>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	697a      	ldr	r2, [r7, #20]
 8014382:	68f9      	ldr	r1, [r7, #12]
 8014384:	440a      	add	r2, r1
 8014386:	2100      	movs	r1, #0
 8014388:	4610      	mov	r0, r2
 801438a:	4798      	blx	r3
 801438c:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801438e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014392:	f003 0301 	and.w	r3, r3, #1
 8014396:	2b00      	cmp	r3, #0
 8014398:	d009      	beq.n	80143ae <lv_txt_get_width+0x7e>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 801439a:	f107 0313 	add.w	r3, r7, #19
 801439e:	6a39      	ldr	r1, [r7, #32]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 f82f 	bl	8014404 <lv_txt_is_cmd>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d000      	beq.n	80143ae <lv_txt_get_width+0x7e>
                    continue;
 80143ac:	e014      	b.n	80143d8 <lv_txt_get_width+0xa8>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80143ae:	69fa      	ldr	r2, [r7, #28]
 80143b0:	6a39      	ldr	r1, [r7, #32]
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7fd fd24 	bl	8011e00 <lv_font_get_glyph_width>
 80143b8:	4603      	mov	r3, r0
 80143ba:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 80143bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	dd09      	ble.n	80143d8 <lv_txt_get_width+0xa8>
                width += char_width;
 80143c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143c6:	8b7b      	ldrh	r3, [r7, #26]
 80143c8:	4413      	add	r3, r2
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 80143ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143d0:	893b      	ldrh	r3, [r7, #8]
 80143d2:	4413      	add	r3, r2
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 80143d8:	897a      	ldrh	r2, [r7, #10]
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d8c5      	bhi.n	801436c <lv_txt_get_width+0x3c>
            }
        }

        if(width > 0) {
 80143e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	dd04      	ble.n	80143f2 <lv_txt_get_width+0xc2>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80143e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143ea:	893b      	ldrh	r3, [r7, #8]
 80143ec:	1ad3      	subs	r3, r2, r3
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 80143f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3728      	adds	r7, #40	; 0x28
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	2000279c 	.word	0x2000279c

08014404 <lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 8014404:	b480      	push	{r7}
 8014406:	b085      	sub	sp, #20
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 801440e:	2300      	movs	r3, #0
 8014410:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014412:	2323      	movs	r3, #35	; 0x23
 8014414:	461a      	mov	r2, r3
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	4293      	cmp	r3, r2
 801441a:	d11a      	bne.n	8014452 <lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d105      	bne.n	8014430 <lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2201      	movs	r2, #1
 8014428:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801442a:	2301      	movs	r3, #1
 801442c:	73fb      	strb	r3, [r7, #15]
 801442e:	e010      	b.n	8014452 <lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d103      	bne.n	8014440 <lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2200      	movs	r2, #0
 801443c:	701a      	strb	r2, [r3, #0]
 801443e:	e008      	b.n	8014452 <lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	2b02      	cmp	r3, #2
 8014446:	d104      	bne.n	8014452 <lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801444e:	2301      	movs	r3, #1
 8014450:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	2b01      	cmp	r3, #1
 8014458:	d107      	bne.n	801446a <lv_txt_is_cmd+0x66>
        if(c == ' ') {
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	2b20      	cmp	r3, #32
 801445e:	d102      	bne.n	8014466 <lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2202      	movs	r2, #2
 8014464:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8014466:	2301      	movs	r3, #1
 8014468:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 801446a:	7bfb      	ldrb	r3, [r7, #15]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3714      	adds	r7, #20
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
    if((str[0] & 0x80) == 0)
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	b25b      	sxtb	r3, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	db01      	blt.n	801448e <lv_txt_utf8_size+0x16>
        return 1;
 801448a:	2301      	movs	r3, #1
 801448c:	e018      	b.n	80144c0 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xE0) == 0xC0)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014496:	2bc0      	cmp	r3, #192	; 0xc0
 8014498:	d101      	bne.n	801449e <lv_txt_utf8_size+0x26>
        return 2;
 801449a:	2302      	movs	r3, #2
 801449c:	e010      	b.n	80144c0 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF0) == 0xE0)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144a6:	2be0      	cmp	r3, #224	; 0xe0
 80144a8:	d101      	bne.n	80144ae <lv_txt_utf8_size+0x36>
        return 3;
 80144aa:	2303      	movs	r3, #3
 80144ac:	e008      	b.n	80144c0 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF8) == 0xF0)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80144b6:	2bf0      	cmp	r3, #240	; 0xf0
 80144b8:	d101      	bne.n	80144be <lv_txt_utf8_size+0x46>
        return 4;
 80144ba:	2304      	movs	r3, #4
 80144bc:	e000      	b.n	80144c0 <lv_txt_utf8_size+0x48>
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 80144be:	2301      	movs	r3, #1
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	370c      	adds	r7, #12
 80144c4:	46bd      	mov	sp, r7
 80144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ca:	4770      	bx	lr

080144cc <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80144cc:	b480      	push	{r7}
 80144ce:	b085      	sub	sp, #20
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 80144d6:	2300      	movs	r3, #0
 80144d8:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <lv_txt_utf8_next+0x1e>
 80144e4:	f107 0308 	add.w	r3, r7, #8
 80144e8:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	4413      	add	r3, r2
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	b25b      	sxtb	r3, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	db0b      	blt.n	8014512 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	4413      	add	r3, r2
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	1c5a      	adds	r2, r3, #1
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	601a      	str	r2, [r3, #0]
 8014510:	e0ea      	b.n	80146e8 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	4413      	add	r3, r2
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014520:	2bc0      	cmp	r3, #192	; 0xc0
 8014522:	d128      	bne.n	8014576 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	4413      	add	r3, r2
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	019b      	lsls	r3, r3, #6
 8014530:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8014534:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	1c5a      	adds	r2, r3, #1
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	4413      	add	r3, r2
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801454e:	2b80      	cmp	r3, #128	; 0x80
 8014550:	d001      	beq.n	8014556 <lv_txt_utf8_next+0x8a>
 8014552:	2300      	movs	r3, #0
 8014554:	e0c9      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	4413      	add	r3, r2
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014564:	68fa      	ldr	r2, [r7, #12]
 8014566:	4413      	add	r3, r2
 8014568:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	1c5a      	adds	r2, r3, #1
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	e0b8      	b.n	80146e8 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	4413      	add	r3, r2
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014584:	2be0      	cmp	r3, #224	; 0xe0
 8014586:	d142      	bne.n	801460e <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	4413      	add	r3, r2
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	031b      	lsls	r3, r3, #12
 8014594:	b29b      	uxth	r3, r3
 8014596:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	4413      	add	r3, r2
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80145b0:	2b80      	cmp	r3, #128	; 0x80
 80145b2:	d001      	beq.n	80145b8 <lv_txt_utf8_next+0xec>
 80145b4:	2300      	movs	r3, #0
 80145b6:	e098      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	4413      	add	r3, r2
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	019b      	lsls	r3, r3, #6
 80145c4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80145c8:	68fa      	ldr	r2, [r7, #12]
 80145ca:	4413      	add	r3, r2
 80145cc:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	1c5a      	adds	r2, r3, #1
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	4413      	add	r3, r2
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80145e6:	2b80      	cmp	r3, #128	; 0x80
 80145e8:	d001      	beq.n	80145ee <lv_txt_utf8_next+0x122>
 80145ea:	2300      	movs	r3, #0
 80145ec:	e07d      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	4413      	add	r3, r2
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80145fc:	68fa      	ldr	r2, [r7, #12]
 80145fe:	4413      	add	r3, r2
 8014600:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	1c5a      	adds	r2, r3, #1
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	601a      	str	r2, [r3, #0]
 801460c:	e06c      	b.n	80146e8 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	4413      	add	r3, r2
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801461c:	2bf0      	cmp	r3, #240	; 0xf0
 801461e:	d15e      	bne.n	80146de <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	4413      	add	r3, r2
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	049b      	lsls	r3, r3, #18
 801462c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8014630:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	1c5a      	adds	r2, r3, #1
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	4413      	add	r3, r2
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801464a:	2b80      	cmp	r3, #128	; 0x80
 801464c:	d001      	beq.n	8014652 <lv_txt_utf8_next+0x186>
 801464e:	2300      	movs	r3, #0
 8014650:	e04b      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4413      	add	r3, r2
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	031b      	lsls	r3, r3, #12
 801465e:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	4413      	add	r3, r2
 8014666:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	1c5a      	adds	r2, r3, #1
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	4413      	add	r3, r2
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014680:	2b80      	cmp	r3, #128	; 0x80
 8014682:	d001      	beq.n	8014688 <lv_txt_utf8_next+0x1bc>
 8014684:	2300      	movs	r3, #0
 8014686:	e030      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	4413      	add	r3, r2
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	019b      	lsls	r3, r3, #6
 8014694:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	4413      	add	r3, r2
 801469c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	1c5a      	adds	r2, r3, #1
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	4413      	add	r3, r2
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80146b6:	2b80      	cmp	r3, #128	; 0x80
 80146b8:	d001      	beq.n	80146be <lv_txt_utf8_next+0x1f2>
 80146ba:	2300      	movs	r3, #0
 80146bc:	e015      	b.n	80146ea <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	4413      	add	r3, r2
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80146cc:	68fa      	ldr	r2, [r7, #12]
 80146ce:	4413      	add	r3, r2
 80146d0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	1c5a      	adds	r2, r3, #1
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	601a      	str	r2, [r3, #0]
 80146dc:	e004      	b.n	80146e8 <lv_txt_utf8_next+0x21c>
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 80146e8:	68fb      	ldr	r3, [r7, #12]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3714      	adds	r7, #20
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
	...

080146f8 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8014702:	2300      	movs	r3, #0
 8014704:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	1e5a      	subs	r2, r3, #1
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	2b03      	cmp	r3, #3
 8014714:	d901      	bls.n	801471a <lv_txt_utf8_prev+0x22>
 8014716:	2300      	movs	r3, #0
 8014718:	e02a      	b.n	8014770 <lv_txt_utf8_prev+0x78>

        c_size = lv_txt_encoded_size(&txt[*i]);
 801471a:	4b17      	ldr	r3, [pc, #92]	; (8014778 <lv_txt_utf8_prev+0x80>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	6812      	ldr	r2, [r2, #0]
 8014722:	6879      	ldr	r1, [r7, #4]
 8014724:	440a      	add	r2, r1
 8014726:	4610      	mov	r0, r2
 8014728:	4798      	blx	r3
 801472a:	4603      	mov	r3, r0
 801472c:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 801472e:	7dbb      	ldrb	r3, [r7, #22]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d10b      	bne.n	801474c <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d005      	beq.n	8014748 <lv_txt_utf8_prev+0x50>
                (*i)--;
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	1e5a      	subs	r2, r3, #1
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	e001      	b.n	801474c <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8014748:	2300      	movs	r3, #0
 801474a:	e011      	b.n	8014770 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 801474c:	7dfb      	ldrb	r3, [r7, #23]
 801474e:	3301      	adds	r3, #1
 8014750:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8014752:	7dbb      	ldrb	r3, [r7, #22]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d0db      	beq.n	8014710 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	60fb      	str	r3, [r7, #12]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 801475e:	4b07      	ldr	r3, [pc, #28]	; (801477c <lv_txt_utf8_prev+0x84>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f107 020c 	add.w	r2, r7, #12
 8014766:	4611      	mov	r1, r2
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	4798      	blx	r3
 801476c:	6138      	str	r0, [r7, #16]

    return letter;
 801476e:	693b      	ldr	r3, [r7, #16]
}
 8014770:	4618      	mov	r0, r3
 8014772:	3718      	adds	r7, #24
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	20002798 	.word	0x20002798
 801477c:	2000279c 	.word	0x2000279c

08014780 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 801478a:	2300      	movs	r3, #0
 801478c:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 801478e:	2300      	movs	r3, #0
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	e00e      	b.n	80147b2 <lv_txt_utf8_get_byte_id+0x32>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8014794:	4b0b      	ldr	r3, [pc, #44]	; (80147c4 <lv_txt_utf8_get_byte_id+0x44>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	6879      	ldr	r1, [r7, #4]
 801479a:	68ba      	ldr	r2, [r7, #8]
 801479c:	440a      	add	r2, r1
 801479e:	4610      	mov	r0, r2
 80147a0:	4798      	blx	r3
 80147a2:	4603      	mov	r3, r0
 80147a4:	461a      	mov	r2, r3
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	4413      	add	r3, r2
 80147aa:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	3301      	adds	r3, #1
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	68fa      	ldr	r2, [r7, #12]
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d3ec      	bcc.n	8014794 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 80147ba:	68bb      	ldr	r3, [r7, #8]
}
 80147bc:	4618      	mov	r0, r3
 80147be:	3710      	adds	r7, #16
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	20002798 	.word	0x20002798

080147c8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 80147da:	e009      	b.n	80147f0 <lv_txt_utf8_get_char_id+0x28>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80147dc:	4b09      	ldr	r3, [pc, #36]	; (8014804 <lv_txt_utf8_get_char_id+0x3c>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f107 0208 	add.w	r2, r7, #8
 80147e4:	4611      	mov	r1, r2
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	4798      	blx	r3
        char_cnt++;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	3301      	adds	r3, #1
 80147ee:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	683a      	ldr	r2, [r7, #0]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d8f1      	bhi.n	80147dc <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 80147f8:	68fb      	ldr	r3, [r7, #12]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3710      	adds	r7, #16
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	2000279c 	.word	0x2000279c

08014808 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8014810:	2300      	movs	r3, #0
 8014812:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8014814:	2300      	movs	r3, #0
 8014816:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8014818:	e009      	b.n	801482e <lv_txt_utf8_get_length+0x26>
        lv_txt_encoded_next(txt, &i);
 801481a:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <lv_txt_utf8_get_length+0x3c>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f107 0208 	add.w	r2, r7, #8
 8014822:	4611      	mov	r1, r2
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	4798      	blx	r3
        len++;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	3301      	adds	r3, #1
 801482c:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	4413      	add	r3, r2
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1ef      	bne.n	801481a <lv_txt_utf8_get_length+0x12>
    }

    return len;
 801483a:	68fb      	ldr	r3, [r7, #12]
}
 801483c:	4618      	mov	r0, r3
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	2000279c 	.word	0x2000279c

08014848 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8014850:	2300      	movs	r3, #0
 8014852:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8014854:	2300      	movs	r3, #0
 8014856:	73fb      	strb	r3, [r7, #15]
 8014858:	e00c      	b.n	8014874 <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801485a:	7bfb      	ldrb	r3, [r7, #15]
 801485c:	4a0b      	ldr	r2, [pc, #44]	; (801488c <is_break_char+0x44>)
 801485e:	5cd3      	ldrb	r3, [r2, r3]
 8014860:	461a      	mov	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4293      	cmp	r3, r2
 8014866:	d102      	bne.n	801486e <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 8014868:	2301      	movs	r3, #1
 801486a:	73bb      	strb	r3, [r7, #14]
            break;
 801486c:	e007      	b.n	801487e <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801486e:	7bfb      	ldrb	r3, [r7, #15]
 8014870:	3301      	adds	r3, #1
 8014872:	73fb      	strb	r3, [r7, #15]
 8014874:	7bfb      	ldrb	r3, [r7, #15]
 8014876:	4a05      	ldr	r2, [pc, #20]	; (801488c <is_break_char+0x44>)
 8014878:	5cd3      	ldrb	r3, [r2, r3]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d1ed      	bne.n	801485a <is_break_char+0x12>
        }
    }

    return ret;
 801487e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014880:	4618      	mov	r0, r3
 8014882:	3714      	adds	r7, #20
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr
 801488c:	08029c58 	.word	0x08029c58

08014890 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af00      	add	r7, sp, #0
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	60b9      	str	r1, [r7, #8]
 801489a:	607a      	str	r2, [r7, #4]
 801489c:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	617b      	str	r3, [r7, #20]
 80148a2:	e02d      	b.n	8014900 <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	085b      	lsrs	r3, r3, #1
 80148a8:	683a      	ldr	r2, [r7, #0]
 80148aa:	fb02 f303 	mul.w	r3, r2, r3
 80148ae:	697a      	ldr	r2, [r7, #20]
 80148b0:	4413      	add	r3, r2
 80148b2:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	6979      	ldr	r1, [r7, #20]
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	4798      	blx	r3
 80148bc:	6138      	str	r0, [r7, #16]
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	dd12      	ble.n	80148ea <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	085b      	lsrs	r3, r3, #1
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	f002 0201 	and.w	r2, r2, #1
 80148ce:	2a00      	cmp	r2, #0
 80148d0:	bf0c      	ite	eq
 80148d2:	2201      	moveq	r2, #1
 80148d4:	2200      	movne	r2, #0
 80148d6:	b2d2      	uxtb	r2, r2
 80148d8:	1a9b      	subs	r3, r3, r2
 80148da:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	4413      	add	r3, r2
 80148e2:	617b      	str	r3, [r7, #20]
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	60bb      	str	r3, [r7, #8]
 80148e8:	e00a      	b.n	8014900 <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	da05      	bge.n	80148fc <lv_utils_bsearch+0x6c>
            n /= 2;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	085b      	lsrs	r3, r3, #1
 80148f4:	607b      	str	r3, [r7, #4]
            middle = base;
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	617b      	str	r3, [r7, #20]
 80148fa:	e001      	b.n	8014900 <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	e003      	b.n	8014908 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1ce      	bne.n	80148a4 <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8014906:	2300      	movs	r3, #0
}
 8014908:	4618      	mov	r0, r3
 801490a:	3718      	adds	r7, #24
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}

08014910 <lv_arc_create>:
 * @param par pointer to an object, it will be the parent of the new arc
 * @param copy pointer to a arc object, if not NULL then the new object will be copied from it
 * @return pointer to the created arc
 */
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("arc create started");

    /*Create the ancestor of arc*/
    lv_obj_t * new_arc = lv_obj_create(par, copy);
 801491a:	6839      	ldr	r1, [r7, #0]
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7f0 ff4d 	bl	80057bc <lv_obj_create>
 8014922:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_arc);
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d100      	bne.n	801492c <lv_arc_create+0x1c>
 801492a:	e7fe      	b.n	801492a <lv_arc_create+0x1a>
    if(new_arc == NULL) return NULL;
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <lv_arc_create+0x26>
 8014932:	2300      	movs	r3, #0
 8014934:	e059      	b.n	80149ea <lv_arc_create+0xda>

    /*Allocate the arc type specific extended data*/
    lv_arc_ext_t * ext = lv_obj_allocate_ext_attr(new_arc, sizeof(lv_arc_ext_t));
 8014936:	2104      	movs	r1, #4
 8014938:	6978      	ldr	r0, [r7, #20]
 801493a:	f7f2 fadb 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801493e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d100      	bne.n	8014948 <lv_arc_create+0x38>
 8014946:	e7fe      	b.n	8014946 <lv_arc_create+0x36>
    if(ext == NULL) return NULL;
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d101      	bne.n	8014952 <lv_arc_create+0x42>
 801494e:	2300      	movs	r3, #0
 8014950:	e04b      	b.n	80149ea <lv_arc_create+0xda>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_arc);
 8014952:	4b28      	ldr	r3, [pc, #160]	; (80149f4 <lv_arc_create+0xe4>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d105      	bne.n	8014966 <lv_arc_create+0x56>
 801495a:	6978      	ldr	r0, [r7, #20]
 801495c:	f7f2 fc7f 	bl	800725e <lv_obj_get_signal_cb>
 8014960:	4602      	mov	r2, r0
 8014962:	4b24      	ldr	r3, [pc, #144]	; (80149f4 <lv_arc_create+0xe4>)
 8014964:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_arc);
 8014966:	4b24      	ldr	r3, [pc, #144]	; (80149f8 <lv_arc_create+0xe8>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d105      	bne.n	801497a <lv_arc_create+0x6a>
 801496e:	6978      	ldr	r0, [r7, #20]
 8014970:	f7f2 fc81 	bl	8007276 <lv_obj_get_design_cb>
 8014974:	4602      	mov	r2, r0
 8014976:	4b20      	ldr	r3, [pc, #128]	; (80149f8 <lv_arc_create+0xe8>)
 8014978:	601a      	str	r2, [r3, #0]

    /*Initialize the allocated 'ext' */
    ext->angle_start = 45;
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	222d      	movs	r2, #45	; 0x2d
 801497e:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = 315;
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	f240 123b 	movw	r2, #315	; 0x13b
 8014986:	805a      	strh	r2, [r3, #2]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_arc, lv_arc_signal);
 8014988:	491c      	ldr	r1, [pc, #112]	; (80149fc <lv_arc_create+0xec>)
 801498a:	6978      	ldr	r0, [r7, #20]
 801498c:	f7f2 fa96 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_arc, lv_arc_design);
 8014990:	491b      	ldr	r1, [pc, #108]	; (8014a00 <lv_arc_create+0xf0>)
 8014992:	6978      	ldr	r0, [r7, #20]
 8014994:	f7f2 faa0 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new arc arc*/
    if(copy == NULL) {
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d113      	bne.n	80149c6 <lv_arc_create+0xb6>
        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801499e:	f00a faf9 	bl	801ef94 <lv_theme_get_current>
 80149a2:	60b8      	str	r0, [r7, #8]
        if(th) {
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d007      	beq.n	80149ba <lv_arc_create+0xaa>
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, th->style.arc);
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149ae:	461a      	mov	r2, r3
 80149b0:	2100      	movs	r1, #0
 80149b2:	6978      	ldr	r0, [r7, #20]
 80149b4:	f000 f851 	bl	8014a5a <lv_arc_set_style>
 80149b8:	e016      	b.n	80149e8 <lv_arc_create+0xd8>
        } else {
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, &lv_style_plain_color);
 80149ba:	4a12      	ldr	r2, [pc, #72]	; (8014a04 <lv_arc_create+0xf4>)
 80149bc:	2100      	movs	r1, #0
 80149be:	6978      	ldr	r0, [r7, #20]
 80149c0:	f000 f84b 	bl	8014a5a <lv_arc_set_style>
 80149c4:	e010      	b.n	80149e8 <lv_arc_create+0xd8>
        }

    }
    /*Copy an existing arc*/
    else {
        lv_arc_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80149c6:	6838      	ldr	r0, [r7, #0]
 80149c8:	f7f2 fc61 	bl	800728e <lv_obj_get_ext_attr>
 80149cc:	60f8      	str	r0, [r7, #12]
        ext->angle_start        = copy_ext->angle_start;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	801a      	strh	r2, [r3, #0]
        ext->angle_end          = copy_ext->angle_end;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	805a      	strh	r2, [r3, #2]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_arc);
 80149e2:	6978      	ldr	r0, [r7, #20]
 80149e4:	f7f2 f935 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("arc created");

    return new_arc;
 80149e8:	697b      	ldr	r3, [r7, #20]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3718      	adds	r7, #24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	20002aa0 	.word	0x20002aa0
 80149f8:	20002aa4 	.word	0x20002aa4
 80149fc:	08014d81 	.word	0x08014d81
 8014a00:	08014ab5 	.word	0x08014ab5
 8014a04:	20006d58 	.word	0x20006d58

08014a08 <lv_arc_set_angles>:
 * @param arc pointer to an arc object
 * @param start the start angle [0..360]
 * @param end the end angle [0..360]
 */
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	460b      	mov	r3, r1
 8014a12:	807b      	strh	r3, [r7, #2]
 8014a14:	4613      	mov	r3, r2
 8014a16:	803b      	strh	r3, [r7, #0]
    lv_arc_ext_t * ext = lv_obj_get_ext_attr(arc);
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7f2 fc38 	bl	800728e <lv_obj_get_ext_attr>
 8014a1e:	60f8      	str	r0, [r7, #12]

    if(start > 360) start = 360;
 8014a20:	887b      	ldrh	r3, [r7, #2]
 8014a22:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014a26:	d902      	bls.n	8014a2e <lv_arc_set_angles+0x26>
 8014a28:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014a2c:	807b      	strh	r3, [r7, #2]
    if(end > 360) end = 360;
 8014a2e:	883b      	ldrh	r3, [r7, #0]
 8014a30:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014a34:	d902      	bls.n	8014a3c <lv_arc_set_angles+0x34>
 8014a36:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014a3a:	803b      	strh	r3, [r7, #0]

    ext->angle_start = start;
 8014a3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = end;
 8014a44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	805a      	strh	r2, [r3, #2]

    lv_obj_invalidate(arc);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7f1 f9f2 	bl	8005e36 <lv_obj_invalidate>
}
 8014a52:	bf00      	nop
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <lv_arc_set_style>:
 * @param arc pointer to arc object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_arc_set_style(lv_obj_t * arc, lv_arc_style_t type, const lv_style_t * style)
{
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b084      	sub	sp, #16
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	60f8      	str	r0, [r7, #12]
 8014a62:	460b      	mov	r3, r1
 8014a64:	607a      	str	r2, [r7, #4]
 8014a66:	72fb      	strb	r3, [r7, #11]
    switch(type) {
 8014a68:	7afb      	ldrb	r3, [r7, #11]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d000      	beq.n	8014a70 <lv_arc_set_style+0x16>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
    }
}
 8014a6e:	e004      	b.n	8014a7a <lv_arc_set_style+0x20>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
 8014a70:	6879      	ldr	r1, [r7, #4]
 8014a72:	68f8      	ldr	r0, [r7, #12]
 8014a74:	f7f2 f8db 	bl	8006c2e <lv_obj_set_style>
 8014a78:	bf00      	nop
}
 8014a7a:	bf00      	nop
 8014a7c:	3710      	adds	r7, #16
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}

08014a82 <lv_arc_get_style>:
 * @param arc pointer to arc object
 * @param type which style should be get
 * @return style pointer to the style
 *  */
const lv_style_t * lv_arc_get_style(const lv_obj_t * arc, lv_arc_style_t type)
{
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b084      	sub	sp, #16
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	460b      	mov	r3, r1
 8014a8c:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	60fb      	str	r3, [r7, #12]

    switch(type) {
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d104      	bne.n	8014aa2 <lv_arc_get_style+0x20>
        case LV_ARC_STYLE_MAIN: style = lv_obj_get_style(arc); break;
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7f2 fb3d 	bl	8007118 <lv_obj_get_style>
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	e002      	b.n	8014aa8 <lv_arc_get_style+0x26>
        default: style = NULL; break;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	60fb      	str	r3, [r7, #12]
 8014aa6:	bf00      	nop
    }

    return style;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3710      	adds	r7, #16
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
	...

08014ab4 <lv_arc_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_arc_design(lv_obj_t * arc, const lv_area_t * mask, lv_design_mode_t mode)
{
 8014ab4:	b5b0      	push	{r4, r5, r7, lr}
 8014ab6:	b0a0      	sub	sp, #128	; 0x80
 8014ab8:	af04      	add	r7, sp, #16
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8014ac2:	79fb      	ldrb	r3, [r7, #7]
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	d101      	bne.n	8014acc <lv_arc_design+0x18>
        return false;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e152      	b.n	8014d72 <lv_arc_design+0x2be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014acc:	79fb      	ldrb	r3, [r7, #7]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	f040 814e 	bne.w	8014d70 <lv_arc_design+0x2bc>
        lv_arc_ext_t * ext       = lv_obj_get_ext_attr(arc);
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f7f2 fbda 	bl	800728e <lv_obj_get_ext_attr>
 8014ada:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * style = lv_arc_get_style(arc, LV_ARC_STYLE_MAIN);
 8014adc:	2100      	movs	r1, #0
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f7ff ffcf 	bl	8014a82 <lv_arc_get_style>
 8014ae4:	66b8      	str	r0, [r7, #104]	; 0x68

        lv_coord_t r       = (LV_MATH_MIN(lv_obj_get_width(arc), lv_obj_get_height(arc))) / 2;
 8014ae6:	68f8      	ldr	r0, [r7, #12]
 8014ae8:	f7f2 fae6 	bl	80070b8 <lv_obj_get_width>
 8014aec:	4603      	mov	r3, r0
 8014aee:	461c      	mov	r4, r3
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f7f2 faef 	bl	80070d4 <lv_obj_get_height>
 8014af6:	4603      	mov	r3, r0
 8014af8:	429c      	cmp	r4, r3
 8014afa:	da08      	bge.n	8014b0e <lv_arc_design+0x5a>
 8014afc:	68f8      	ldr	r0, [r7, #12]
 8014afe:	f7f2 fadb 	bl	80070b8 <lv_obj_get_width>
 8014b02:	4603      	mov	r3, r0
 8014b04:	0fda      	lsrs	r2, r3, #31
 8014b06:	4413      	add	r3, r2
 8014b08:	105b      	asrs	r3, r3, #1
 8014b0a:	b21b      	sxth	r3, r3
 8014b0c:	e007      	b.n	8014b1e <lv_arc_design+0x6a>
 8014b0e:	68f8      	ldr	r0, [r7, #12]
 8014b10:	f7f2 fae0 	bl	80070d4 <lv_obj_get_height>
 8014b14:	4603      	mov	r3, r0
 8014b16:	0fda      	lsrs	r2, r3, #31
 8014b18:	4413      	add	r3, r2
 8014b1a:	105b      	asrs	r3, r3, #1
 8014b1c:	b21b      	sxth	r3, r3
 8014b1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_coord_t x       = arc->coords.x1 + lv_obj_get_width(arc) / 2;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014b28:	b29c      	uxth	r4, r3
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f7f2 fac4 	bl	80070b8 <lv_obj_get_width>
 8014b30:	4603      	mov	r3, r0
 8014b32:	0fda      	lsrs	r2, r3, #31
 8014b34:	4413      	add	r3, r2
 8014b36:	105b      	asrs	r3, r3, #1
 8014b38:	b21b      	sxth	r3, r3
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	4423      	add	r3, r4
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        lv_coord_t y       = arc->coords.y1 + lv_obj_get_height(arc) / 2;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014b4a:	b29c      	uxth	r4, r3
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7f2 fac1 	bl	80070d4 <lv_obj_get_height>
 8014b52:	4603      	mov	r3, r0
 8014b54:	0fda      	lsrs	r2, r3, #31
 8014b56:	4413      	add	r3, r2
 8014b58:	105b      	asrs	r3, r3, #1
 8014b5a:	b21b      	sxth	r3, r3
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	4423      	add	r3, r4
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        lv_opa_t opa_scale = lv_obj_get_opa_scale(arc);
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f7f2 fb43 	bl	80071f2 <lv_obj_get_opa_scale>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        lv_draw_arc(x, y, r, mask, ext->angle_start, ext->angle_end, style, opa_scale);
 8014b72:	f8b7 5066 	ldrh.w	r5, [r7, #102]	; 0x66
 8014b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014b80:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014b84:	b292      	uxth	r2, r2
 8014b86:	f9b7 4062 	ldrsh.w	r4, [r7, #98]	; 0x62
 8014b8a:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 8014b8e:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
 8014b92:	9103      	str	r1, [sp, #12]
 8014b94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014b96:	9102      	str	r1, [sp, #8]
 8014b98:	9201      	str	r2, [sp, #4]
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	462a      	mov	r2, r5
 8014ba0:	4621      	mov	r1, r4
 8014ba2:	f7f3 ff0f 	bl	80089c4 <lv_draw_arc>

        /*Draw circle on the ends if enabled */
        if(style->line.rounded) {
 8014ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014bac:	f003 0301 	and.w	r3, r3, #1
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 80dc 	beq.w	8014d70 <lv_arc_design+0x2bc>
            lv_coord_t thick_half = style->line.width / 2;
 8014bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014bbe:	0fda      	lsrs	r2, r3, #31
 8014bc0:	4413      	add	r3, r2
 8014bc2:	105b      	asrs	r3, r3, #1
 8014bc4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t cir_x      = ((r - thick_half) * lv_trigo_sin(ext->angle_start) >> LV_TRIGO_SHIFT);
 8014bc8:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014bcc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014bd0:	1ad4      	subs	r4, r2, r3
 8014bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fe fe81 	bl	80138e0 <lv_trigo_sin>
 8014bde:	4603      	mov	r3, r0
 8014be0:	fb03 f304 	mul.w	r3, r3, r4
 8014be4:	13db      	asrs	r3, r3, #15
 8014be6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t cir_y      = ((r - thick_half) * lv_trigo_sin(ext->angle_start + 90) >> LV_TRIGO_SHIFT);
 8014bea:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014bee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014bf2:	1ad4      	subs	r4, r2, r3
 8014bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	335a      	adds	r3, #90	; 0x5a
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	b21b      	sxth	r3, r3
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7fe fe6c 	bl	80138e0 <lv_trigo_sin>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	fb03 f304 	mul.w	r3, r3, r4
 8014c0e:	13db      	asrs	r3, r3, #15
 8014c10:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_style_t cir_style;
            lv_style_copy(&cir_style, &lv_style_plain);
 8014c14:	f107 0314 	add.w	r3, r7, #20
 8014c18:	4958      	ldr	r1, [pc, #352]	; (8014d7c <lv_arc_design+0x2c8>)
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7f3 fda6 	bl	800876c <lv_style_copy>
            cir_style.body.grad_color = style->line.color;
 8014c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8014c24:	833b      	strh	r3, [r7, #24]
            cir_style.body.main_color = cir_style.body.grad_color;
 8014c26:	8b3b      	ldrh	r3, [r7, #24]
 8014c28:	82fb      	strh	r3, [r7, #22]
            cir_style.body.radius     = LV_RADIUS_CIRCLE;
 8014c2a:	f647 4318 	movw	r3, #31768	; 0x7c18
 8014c2e:	837b      	strh	r3, [r7, #26]
            lv_area_t cir_area;
            cir_area.x1 = cir_x + x - thick_half;
 8014c30:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014c34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014c38:	4413      	add	r3, r2
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c40:	1ad3      	subs	r3, r2, r3
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	b21b      	sxth	r3, r3
 8014c46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 8014c4a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014c4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014c52:	4413      	add	r3, r2
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	b29b      	uxth	r3, r3
 8014c5e:	b21b      	sxth	r3, r3
 8014c60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 8014c64:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014c68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c74:	4413      	add	r3, r2
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	b21b      	sxth	r3, r3
 8014c7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 8014c7e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014c82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014c86:	4413      	add	r3, r2
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c8e:	4413      	add	r3, r2
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	b21b      	sxth	r3, r3
 8014c94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 8014c98:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014c9c:	f107 0214 	add.w	r2, r7, #20
 8014ca0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014ca4:	68b9      	ldr	r1, [r7, #8]
 8014ca6:	f7f7 ffa6 	bl	800cbf6 <lv_draw_rect>

            cir_x = ((r - thick_half) * lv_trigo_sin(ext->angle_end) >> LV_TRIGO_SHIFT);
 8014caa:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014cae:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014cb2:	1ad4      	subs	r4, r2, r3
 8014cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fe10 	bl	80138e0 <lv_trigo_sin>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	fb03 f304 	mul.w	r3, r3, r4
 8014cc6:	13db      	asrs	r3, r3, #15
 8014cc8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            cir_y = ((r - thick_half) * lv_trigo_sin(ext->angle_end + 90) >> LV_TRIGO_SHIFT);
 8014ccc:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014cd0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014cd4:	1ad4      	subs	r4, r2, r3
 8014cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	335a      	adds	r3, #90	; 0x5a
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	b21b      	sxth	r3, r3
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fe fdfb 	bl	80138e0 <lv_trigo_sin>
 8014cea:	4603      	mov	r3, r0
 8014cec:	fb03 f304 	mul.w	r3, r3, r4
 8014cf0:	13db      	asrs	r3, r3, #15
 8014cf2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            cir_area.x1 = cir_x + x - thick_half;
 8014cf6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014cfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014cfe:	4413      	add	r3, r2
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	b21b      	sxth	r3, r3
 8014d0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 8014d10:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014d14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014d18:	4413      	add	r3, r2
 8014d1a:	b29a      	uxth	r2, r3
 8014d1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	b21b      	sxth	r3, r3
 8014d26:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 8014d2a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014d2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014d32:	4413      	add	r3, r2
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d3a:	4413      	add	r3, r2
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	b21b      	sxth	r3, r3
 8014d40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 8014d44:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014d48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014d4c:	4413      	add	r3, r2
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d54:	4413      	add	r3, r2
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	b21b      	sxth	r3, r3
 8014d5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 8014d5e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014d62:	f107 0214 	add.w	r2, r7, #20
 8014d66:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014d6a:	68b9      	ldr	r1, [r7, #8]
 8014d6c:	f7f7 ff43 	bl	800cbf6 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 8014d70:	2301      	movs	r3, #1
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3770      	adds	r7, #112	; 0x70
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	20006c68 	.word	0x20006c68

08014d80 <lv_arc_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_arc_signal(lv_obj_t * arc, lv_signal_t sign, void * param)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b086      	sub	sp, #24
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	460b      	mov	r3, r1
 8014d8a:	607a      	str	r2, [r7, #4]
 8014d8c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(arc, sign, param);
 8014d8e:	4b18      	ldr	r3, [pc, #96]	; (8014df0 <lv_arc_signal+0x70>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	7af9      	ldrb	r1, [r7, #11]
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	68f8      	ldr	r0, [r7, #12]
 8014d98:	4798      	blx	r3
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 8014d9e:	7dbb      	ldrb	r3, [r7, #22]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d001      	beq.n	8014da8 <lv_arc_signal+0x28>
 8014da4:	7dbb      	ldrb	r3, [r7, #22]
 8014da6:	e01e      	b.n	8014de6 <lv_arc_signal+0x66>

    if(sign == LV_SIGNAL_CLEANUP) {
 8014da8:	7afb      	ldrb	r3, [r7, #11]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d01a      	beq.n	8014de4 <lv_arc_signal+0x64>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014dae:	7afb      	ldrb	r3, [r7, #11]
 8014db0:	2b06      	cmp	r3, #6
 8014db2:	d117      	bne.n	8014de4 <lv_arc_signal+0x64>
        lv_obj_type_t * buf = param;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014db8:	2300      	movs	r3, #0
 8014dba:	75fb      	strb	r3, [r7, #23]
 8014dbc:	e008      	b.n	8014dd0 <lv_arc_signal+0x50>
            if(buf->type[i] == NULL) break;
 8014dbe:	7dfa      	ldrb	r2, [r7, #23]
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d006      	beq.n	8014dd8 <lv_arc_signal+0x58>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014dca:	7dfb      	ldrb	r3, [r7, #23]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	75fb      	strb	r3, [r7, #23]
 8014dd0:	7dfb      	ldrb	r3, [r7, #23]
 8014dd2:	2b06      	cmp	r3, #6
 8014dd4:	d9f3      	bls.n	8014dbe <lv_arc_signal+0x3e>
 8014dd6:	e000      	b.n	8014dda <lv_arc_signal+0x5a>
            if(buf->type[i] == NULL) break;
 8014dd8:	bf00      	nop
        }
        buf->type[i] = "lv_arc";
 8014dda:	7dfa      	ldrb	r2, [r7, #23]
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	4905      	ldr	r1, [pc, #20]	; (8014df4 <lv_arc_signal+0x74>)
 8014de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8014de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3718      	adds	r7, #24
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	20002aa0 	.word	0x20002aa0
 8014df4:	08029c60 	.word	0x08029c60

08014df8 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8014e02:	2208      	movs	r2, #8
 8014e04:	6839      	ldr	r1, [r7, #0]
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f012 f9ca 	bl	80271a0 <memcpy>
}
 8014e0c:	bf00      	nop
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b083      	sub	sp, #12
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	3301      	adds	r3, #1
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	b21b      	sxth	r3, r3
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	370c      	adds	r7, #12
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr

08014e42 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8014e42:	b480      	push	{r7}
 8014e44:	b083      	sub	sp, #12
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	1ad3      	subs	r3, r2, r3
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	3301      	adds	r3, #1
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	b21b      	sxth	r3, r3
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	370c      	adds	r7, #12
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <lv_bar_create>:
 * @param par pointer to an object, it will be the parent of the new bar
 * @param copy pointer to a bar object, if not NULL then the new object will be copied from it
 * @return pointer to the created bar
 */
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("lv_bar create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7f0 fc9d 	bl	80057bc <lv_obj_create>
 8014e82:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_bar);
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d100      	bne.n	8014e8c <lv_bar_create+0x1c>
 8014e8a:	e7fe      	b.n	8014e8a <lv_bar_create+0x1a>
    if(new_bar == NULL) return NULL;
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <lv_bar_create+0x26>
 8014e92:	2300      	movs	r3, #0
 8014e94:	e0a2      	b.n	8014fdc <lv_bar_create+0x16c>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 8014e96:	4b53      	ldr	r3, [pc, #332]	; (8014fe4 <lv_bar_create+0x174>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d105      	bne.n	8014eaa <lv_bar_create+0x3a>
 8014e9e:	6978      	ldr	r0, [r7, #20]
 8014ea0:	f7f2 f9dd 	bl	800725e <lv_obj_get_signal_cb>
 8014ea4:	4602      	mov	r2, r0
 8014ea6:	4b4f      	ldr	r3, [pc, #316]	; (8014fe4 <lv_bar_create+0x174>)
 8014ea8:	601a      	str	r2, [r3, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8014eaa:	4b4f      	ldr	r3, [pc, #316]	; (8014fe8 <lv_bar_create+0x178>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d105      	bne.n	8014ebe <lv_bar_create+0x4e>
 8014eb2:	6978      	ldr	r0, [r7, #20]
 8014eb4:	f7f2 f9df 	bl	8007276 <lv_obj_get_design_cb>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	4b4b      	ldr	r3, [pc, #300]	; (8014fe8 <lv_bar_create+0x178>)
 8014ebc:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8014ebe:	2114      	movs	r1, #20
 8014ec0:	6978      	ldr	r0, [r7, #20]
 8014ec2:	f7f2 f817 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 8014ec6:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d100      	bne.n	8014ed0 <lv_bar_create+0x60>
 8014ece:	e7fe      	b.n	8014ece <lv_bar_create+0x5e>
    if(ext == NULL) return NULL;
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d101      	bne.n	8014eda <lv_bar_create+0x6a>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	e080      	b.n	8014fdc <lv_bar_create+0x16c>

    ext->min_value = 0;
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	2200      	movs	r2, #0
 8014ede:	805a      	strh	r2, [r3, #2]
    ext->max_value = 100;
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	2264      	movs	r2, #100	; 0x64
 8014ee4:	809a      	strh	r2, [r3, #4]
    ext->cur_value = 0;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	801a      	strh	r2, [r3, #0]
#if LV_USE_ANIMATION
    ext->anim_time  = 200;
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	22c8      	movs	r2, #200	; 0xc8
 8014ef0:	819a      	strh	r2, [r3, #12]
    ext->anim_start = 0;
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	80da      	strh	r2, [r3, #6]
    ext->anim_end   = 0;
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	2200      	movs	r2, #0
 8014efc:	811a      	strh	r2, [r3, #8]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f04:	815a      	strh	r2, [r3, #10]
#endif
    ext->sym         = 0;
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	7b93      	ldrb	r3, [r2, #14]
 8014f0a:	f36f 0300 	bfc	r3, #0, #1
 8014f0e:	7393      	strb	r3, [r2, #14]
    ext->style_indic = &lv_style_pretty_color;
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	4a36      	ldr	r2, [pc, #216]	; (8014fec <lv_bar_create+0x17c>)
 8014f14:	611a      	str	r2, [r3, #16]

    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8014f16:	4936      	ldr	r1, [pc, #216]	; (8014ff0 <lv_bar_create+0x180>)
 8014f18:	6978      	ldr	r0, [r7, #20]
 8014f1a:	f7f1 ffcf 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 8014f1e:	4935      	ldr	r1, [pc, #212]	; (8014ff4 <lv_bar_create+0x184>)
 8014f20:	6978      	ldr	r0, [r7, #20]
 8014f22:	f7f1 ffd9 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new  bar object*/
    if(copy == NULL) {
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d12a      	bne.n	8014f82 <lv_bar_create+0x112>
        lv_obj_set_click(new_bar, false);
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	6978      	ldr	r0, [r7, #20]
 8014f30:	f7f1 fea3 	bl	8006c7a <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8014f34:	2221      	movs	r2, #33	; 0x21
 8014f36:	21c8      	movs	r1, #200	; 0xc8
 8014f38:	6978      	ldr	r0, [r7, #20]
 8014f3a:	f7f1 f930 	bl	800619e <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f44:	2200      	movs	r2, #0
 8014f46:	4619      	mov	r1, r3
 8014f48:	6978      	ldr	r0, [r7, #20]
 8014f4a:	f000 f857 	bl	8014ffc <lv_bar_set_value>

        lv_theme_t * th = lv_theme_get_current();
 8014f4e:	f00a f821 	bl	801ef94 <lv_theme_get_current>
 8014f52:	60b8      	str	r0, [r7, #8]
        if(th) {
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d00e      	beq.n	8014f78 <lv_bar_create+0x108>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f5e:	461a      	mov	r2, r3
 8014f60:	2100      	movs	r1, #0
 8014f62:	6978      	ldr	r0, [r7, #20]
 8014f64:	f000 f91a 	bl	801519c <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	2101      	movs	r1, #1
 8014f70:	6978      	ldr	r0, [r7, #20]
 8014f72:	f000 f913 	bl	801519c <lv_bar_set_style>
 8014f76:	e030      	b.n	8014fda <lv_bar_create+0x16a>
        } else {
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8014f78:	491f      	ldr	r1, [pc, #124]	; (8014ff8 <lv_bar_create+0x188>)
 8014f7a:	6978      	ldr	r0, [r7, #20]
 8014f7c:	f7f1 fe57 	bl	8006c2e <lv_obj_set_style>
 8014f80:	e02b      	b.n	8014fda <lv_bar_create+0x16a>
        }
    } else {
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8014f82:	6838      	ldr	r0, [r7, #0]
 8014f84:	f7f2 f983 	bl	800728e <lv_obj_get_ext_attr>
 8014f88:	60f8      	str	r0, [r7, #12]
        ext->min_value          = ext_copy->min_value;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	805a      	strh	r2, [r3, #2]
        ext->max_value          = ext_copy->max_value;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	809a      	strh	r2, [r3, #4]
        ext->cur_value          = ext_copy->cur_value;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	801a      	strh	r2, [r3, #0]
        ext->style_indic        = ext_copy->style_indic;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	691a      	ldr	r2, [r3, #16]
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	611a      	str	r2, [r3, #16]
        ext->sym                = ext_copy->sym;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	7b9b      	ldrb	r3, [r3, #14]
 8014fb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014fb8:	b2d9      	uxtb	r1, r3
 8014fba:	693a      	ldr	r2, [r7, #16]
 8014fbc:	7b93      	ldrb	r3, [r2, #14]
 8014fbe:	f361 0300 	bfi	r3, r1, #0, #1
 8014fc2:	7393      	strb	r3, [r2, #14]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_bar);
 8014fc4:	6978      	ldr	r0, [r7, #20]
 8014fc6:	f7f1 fe44 	bl	8006c52 <lv_obj_refresh_style>

        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	6978      	ldr	r0, [r7, #20]
 8014fd6:	f000 f811 	bl	8014ffc <lv_bar_set_value>
    }

    LV_LOG_INFO("bar created");

    return new_bar;
 8014fda:	697b      	ldr	r3, [r7, #20]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3718      	adds	r7, #24
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	20002aac 	.word	0x20002aac
 8014fe8:	20002aa8 	.word	0x20002aa8
 8014fec:	20006a88 	.word	0x20006a88
 8014ff0:	08015725 	.word	0x08015725
 8014ff4:	08015295 	.word	0x08015295
 8014ff8:	20006b78 	.word	0x20006b78

08014ffc <lv_bar_set_value>:
 * @param bar pointer to a bar object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediatelly
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b08e      	sub	sp, #56	; 0x38
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	460b      	mov	r3, r1
 8015006:	807b      	strh	r3, [r7, #2]
 8015008:	4613      	mov	r3, r2
 801500a:	707b      	strb	r3, [r7, #1]
#if LV_USE_ANIMATION == 0
    anim = false;
#endif
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f7f2 f93e 	bl	800728e <lv_obj_get_ext_attr>
 8015012:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->cur_value == value) return;
 8015014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801501a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801501e:	429a      	cmp	r2, r3
 8015020:	d063      	beq.n	80150ea <lv_bar_set_value+0xee>

    int16_t new_value;
    new_value = value > ext->max_value ? ext->max_value : value;
 8015022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015028:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801502c:	4293      	cmp	r3, r2
 801502e:	bfa8      	it	ge
 8015030:	4613      	movge	r3, r2
 8015032:	867b      	strh	r3, [r7, #50]	; 0x32
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8015034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801503a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801503e:	4293      	cmp	r3, r2
 8015040:	bfb8      	it	lt
 8015042:	4613      	movlt	r3, r2
 8015044:	867b      	strh	r3, [r7, #50]	; 0x32

    if(ext->cur_value == new_value) return;
 8015046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015048:	f9b3 3000 	ldrsh.w	r3, [r3]
 801504c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015050:	429a      	cmp	r2, r3
 8015052:	d04c      	beq.n	80150ee <lv_bar_set_value+0xf2>

    if(anim == LV_ANIM_OFF) {
 8015054:	787b      	ldrb	r3, [r7, #1]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d106      	bne.n	8015068 <lv_bar_set_value+0x6c>
        ext->cur_value = new_value;
 801505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801505c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801505e:	801a      	strh	r2, [r3, #0]
        lv_obj_invalidate(bar);
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7f0 fee8 	bl	8005e36 <lv_obj_invalidate>
 8015066:	e043      	b.n	80150f0 <lv_bar_set_value+0xf4>
    } else {
#if LV_USE_ANIMATION
        /*No animation in progress -> simply set the values*/
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8015068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801506a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801506e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015072:	d108      	bne.n	8015086 <lv_bar_set_value+0x8a>
            ext->anim_start = ext->cur_value;
 8015074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015076:	f9b3 2000 	ldrsh.w	r2, [r3]
 801507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801507c:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 801507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015080:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015082:	811a      	strh	r2, [r3, #8]
 8015084:	e007      	b.n	8015096 <lv_bar_set_value+0x9a>
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            ext->anim_start = ext->anim_end;
 8015086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015088:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801508e:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 8015090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015092:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015094:	811a      	strh	r2, [r3, #8]
        }

        lv_anim_t a;
        a.var            = bar;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	60bb      	str	r3, [r7, #8]
        a.start          = LV_BAR_ANIM_STATE_START;
 801509a:	2300      	movs	r3, #0
 801509c:	61bb      	str	r3, [r7, #24]
        a.end            = LV_BAR_ANIM_STATE_END;
 801509e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80150a2:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 80150a4:	4b14      	ldr	r3, [pc, #80]	; (80150f8 <lv_bar_set_value+0xfc>)
 80150a6:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 80150a8:	4b14      	ldr	r3, [pc, #80]	; (80150fc <lv_bar_set_value+0x100>)
 80150aa:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_bar_anim_ready;
 80150ac:	4b14      	ldr	r3, [pc, #80]	; (8015100 <lv_bar_set_value+0x104>)
 80150ae:	617b      	str	r3, [r7, #20]
        a.act_time       = 0;
 80150b0:	2300      	movs	r3, #0
 80150b2:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = ext->anim_time;
 80150b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 80150be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150c2:	f36f 0300 	bfc	r3, #0, #1
 80150c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 80150ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150d2:	f36f 0341 	bfc	r3, #1, #1
 80150d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 80150da:	2300      	movs	r3, #0
 80150dc:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_anim_create(&a);
 80150de:	f107 0308 	add.w	r3, r7, #8
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fd fb9e 	bl	8012824 <lv_anim_create>
 80150e8:	e002      	b.n	80150f0 <lv_bar_set_value+0xf4>
    if(ext->cur_value == value) return;
 80150ea:	bf00      	nop
 80150ec:	e000      	b.n	80150f0 <lv_bar_set_value+0xf4>
    if(ext->cur_value == new_value) return;
 80150ee:	bf00      	nop
#endif
    }
}
 80150f0:	3738      	adds	r7, #56	; 0x38
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	080157c1 	.word	0x080157c1
 80150fc:	08012975 	.word	0x08012975
 8015100:	080157e9 	.word	0x080157e9

08015104 <lv_bar_set_range>:
 * @param bar pointer to the bar object
 * @param min minimum value
 * @param max maximum value
 */
void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	460b      	mov	r3, r1
 801510e:	807b      	strh	r3, [r7, #2]
 8015110:	4613      	mov	r3, r2
 8015112:	803b      	strh	r3, [r7, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7f2 f8ba 	bl	800728e <lv_obj_get_ext_attr>
 801511a:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015122:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015126:	429a      	cmp	r2, r3
 8015128:	d106      	bne.n	8015138 <lv_bar_set_range+0x34>
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015130:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015134:	429a      	cmp	r2, r3
 8015136:	d02d      	beq.n	8015194 <lv_bar_set_range+0x90>

    ext->max_value = max;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	883a      	ldrh	r2, [r7, #0]
 801513c:	809a      	strh	r2, [r3, #4]
    ext->min_value = min;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	887a      	ldrh	r2, [r7, #2]
 8015142:	805a      	strh	r2, [r3, #2]
    if(ext->cur_value > max) {
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f9b3 3000 	ldrsh.w	r3, [r3]
 801514a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801514e:	429a      	cmp	r2, r3
 8015150:	da0a      	bge.n	8015168 <lv_bar_set_range+0x64>
        ext->cur_value = max;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	883a      	ldrh	r2, [r7, #0]
 8015156:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801515e:	2200      	movs	r2, #0
 8015160:	4619      	mov	r1, r3
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7ff ff4a 	bl	8014ffc <lv_bar_set_value>
    }
    if(ext->cur_value < min) {
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801516e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015172:	429a      	cmp	r2, r3
 8015174:	dd0a      	ble.n	801518c <lv_bar_set_range+0x88>
        ext->cur_value = min;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	887a      	ldrh	r2, [r7, #2]
 801517a:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015182:	2200      	movs	r2, #0
 8015184:	4619      	mov	r1, r3
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7ff ff38 	bl	8014ffc <lv_bar_set_value>
    }
    lv_obj_invalidate(bar);
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7f0 fe52 	bl	8005e36 <lv_obj_invalidate>
 8015192:	e000      	b.n	8015196 <lv_bar_set_range+0x92>
    if(ext->min_value == min && ext->max_value == max) return;
 8015194:	bf00      	nop
}
 8015196:	3710      	adds	r7, #16
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <lv_bar_set_style>:
 * @param bar pointer to a bar object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_bar_set_style(lv_obj_t * bar, lv_bar_style_t type, const lv_style_t * style)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b086      	sub	sp, #24
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	460b      	mov	r3, r1
 80151a6:	607a      	str	r2, [r7, #4]
 80151a8:	72fb      	strb	r3, [r7, #11]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	f7f2 f86f 	bl	800728e <lv_obj_get_ext_attr>
 80151b0:	6178      	str	r0, [r7, #20]

    switch(type) {
 80151b2:	7afb      	ldrb	r3, [r7, #11]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d002      	beq.n	80151be <lv_bar_set_style+0x22>
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d005      	beq.n	80151c8 <lv_bar_set_style+0x2c>
        case LV_BAR_STYLE_INDIC:
            ext->style_indic = style;
            lv_obj_refresh_ext_draw_pad(bar);
            break;
    }
}
 80151bc:	e00b      	b.n	80151d6 <lv_bar_set_style+0x3a>
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 80151be:	6879      	ldr	r1, [r7, #4]
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f7f1 fd34 	bl	8006c2e <lv_obj_set_style>
 80151c6:	e006      	b.n	80151d6 <lv_bar_set_style+0x3a>
            ext->style_indic = style;
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	611a      	str	r2, [r3, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f7f1 fea6 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
            break;
 80151d4:	bf00      	nop
}
 80151d6:	bf00      	nop
 80151d8:	3718      	adds	r7, #24
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <lv_bar_get_value>:
 * Get the value of a bar
 * @param bar pointer to a bar object
 * @return the value of the bar
 */
int16_t lv_bar_get_value(const lv_obj_t * bar)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f7f2 f851 	bl	800728e <lv_obj_get_ext_attr>
 80151ec:	60f8      	str	r0, [r7, #12]
    /*If animated tell that it's already at the end value*/
#if LV_USE_ANIMATION
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80151f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151f8:	d003      	beq.n	8015202 <lv_bar_get_value+0x24>
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015200:	e002      	b.n	8015208 <lv_bar_get_value+0x2a>
#endif
    /*No animation, simple return the current value*/
    return ext->cur_value;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8015208:	4618      	mov	r0, r3
 801520a:	3710      	adds	r7, #16
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <lv_bar_get_min_value>:
 * Get the minimum value of a bar
 * @param bar pointer to a bar object
 * @return the minimum value of the bar
 */
int16_t lv_bar_get_min_value(const lv_obj_t * bar)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7f2 f838 	bl	800728e <lv_obj_get_ext_attr>
 801521e:	60f8      	str	r0, [r7, #12]
    return ext->min_value;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <lv_bar_get_max_value>:
 * Get the maximum value of a bar
 * @param bar pointer to a bar object
 * @return the maximum value of the bar
 */
int16_t lv_bar_get_max_value(const lv_obj_t * bar)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b084      	sub	sp, #16
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7f2 f829 	bl	800728e <lv_obj_get_ext_attr>
 801523c:	60f8      	str	r0, [r7, #12]
    return ext->max_value;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8015244:	4618      	mov	r0, r3
 8015246:	3710      	adds	r7, #16
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <lv_bar_get_style>:
 * @param bar pointer to a bar object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_bar_get_style(const lv_obj_t * bar, lv_bar_style_t type)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	460b      	mov	r3, r1
 8015256:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8015258:	2300      	movs	r3, #0
 801525a:	60fb      	str	r3, [r7, #12]
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f7f2 f816 	bl	800728e <lv_obj_get_ext_attr>
 8015262:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8015264:	78fb      	ldrb	r3, [r7, #3]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d002      	beq.n	8015270 <lv_bar_get_style+0x24>
 801526a:	2b01      	cmp	r3, #1
 801526c:	d005      	beq.n	801527a <lv_bar_get_style+0x2e>
 801526e:	e008      	b.n	8015282 <lv_bar_get_style+0x36>
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7f1 ff51 	bl	8007118 <lv_obj_get_style>
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	e006      	b.n	8015288 <lv_bar_get_style+0x3c>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	691b      	ldr	r3, [r3, #16]
 801527e:	60fb      	str	r3, [r7, #12]
 8015280:	e002      	b.n	8015288 <lv_bar_get_style+0x3c>
        default: style = NULL; break;
 8015282:	2300      	movs	r3, #0
 8015284:	60fb      	str	r3, [r7, #12]
 8015286:	bf00      	nop
    }

    return style;
 8015288:	68fb      	ldr	r3, [r7, #12]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
	...

08015294 <lv_bar_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b0a0      	sub	sp, #128	; 0x80
 8015298:	af00      	add	r7, sp, #0
 801529a:	60f8      	str	r0, [r7, #12]
 801529c:	60b9      	str	r1, [r7, #8]
 801529e:	4613      	mov	r3, r2
 80152a0:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80152a2:	79fb      	ldrb	r3, [r7, #7]
 80152a4:	2b02      	cmp	r3, #2
 80152a6:	d107      	bne.n	80152b8 <lv_bar_design+0x24>
        /*Return false if the object is not covers the mask area*/
        return ancestor_design_f(bar, mask, mode);
 80152a8:	4bab      	ldr	r3, [pc, #684]	; (8015558 <lv_bar_design+0x2c4>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	79fa      	ldrb	r2, [r7, #7]
 80152ae:	68b9      	ldr	r1, [r7, #8]
 80152b0:	68f8      	ldr	r0, [r7, #12]
 80152b2:	4798      	blx	r3
 80152b4:	4603      	mov	r3, r0
 80152b6:	e231      	b.n	801571c <lv_bar_design+0x488>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80152b8:	79fb      	ldrb	r3, [r7, #7]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f040 8205 	bne.w	80156ca <lv_bar_design+0x436>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f7f1 ff96 	bl	80071f2 <lv_obj_get_opa_scale>
 80152c6:	4603      	mov	r3, r0
 80152c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        ancestor_design_f(bar, mask, mode);
#else
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(bar)) {
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f7f1 fff6 	bl	80072be <lv_obj_is_focused>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d017      	beq.n	8015308 <lv_bar_design+0x74>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80152d8:	2100      	movs	r1, #0
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f7ff ffb6 	bl	801524c <lv_bar_get_style>
 80152e0:	6738      	str	r0, [r7, #112]	; 0x70
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80152e2:	f107 0314 	add.w	r3, r7, #20
 80152e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7f3 fa3f 	bl	800876c <lv_style_copy>
            style_tmp.body.border.width = 0;
 80152ee:	2300      	movs	r3, #0
 80152f0:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f103 0010 	add.w	r0, r3, #16
 80152f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80152fc:	f107 0214 	add.w	r2, r7, #20
 8015300:	68b9      	ldr	r1, [r7, #8]
 8015302:	f7f7 fc78 	bl	800cbf6 <lv_draw_rect>
 8015306:	e005      	b.n	8015314 <lv_bar_design+0x80>
        } else {
            ancestor_design_f(bar, mask, mode);
 8015308:	4b93      	ldr	r3, [pc, #588]	; (8015558 <lv_bar_design+0x2c4>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	79fa      	ldrb	r2, [r7, #7]
 801530e:	68b9      	ldr	r1, [r7, #8]
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	4798      	blx	r3
        }
#endif
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f7f1 ffba 	bl	800728e <lv_obj_get_ext_attr>
 801531a:	66f8      	str	r0, [r7, #108]	; 0x6c

        if(ext->cur_value != ext->min_value || ext->sym
 801531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801531e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015328:	429a      	cmp	r2, r3
 801532a:	d10d      	bne.n	8015348 <lv_bar_design+0xb4>
 801532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801532e:	7b9b      	ldrb	r3, [r3, #14]
 8015330:	f003 0301 	and.w	r3, r3, #1
 8015334:	b2db      	uxtb	r3, r3
 8015336:	2b00      	cmp	r3, #0
 8015338:	d106      	bne.n	8015348 <lv_bar_design+0xb4>
#if LV_USE_ANIMATION
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 801533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801533c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015344:	f000 81e9 	beq.w	801571a <lv_bar_design+0x486>
#endif
        ) {
            const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8015348:	2101      	movs	r1, #1
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f7ff ff7e 	bl	801524c <lv_bar_get_style>
 8015350:	66b8      	str	r0, [r7, #104]	; 0x68
            lv_area_t indic_area;
            lv_area_copy(&indic_area, &bar->coords);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f103 0210 	add.w	r2, r3, #16
 8015358:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801535c:	4611      	mov	r1, r2
 801535e:	4618      	mov	r0, r3
 8015360:	f7ff fd4a 	bl	8014df8 <lv_area_copy>
            indic_area.x1 += style_indic->body.padding.left;
 8015364:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8015368:	b29a      	uxth	r2, r3
 801536a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801536c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015370:	b29b      	uxth	r3, r3
 8015372:	4413      	add	r3, r2
 8015374:	b29b      	uxth	r3, r3
 8015376:	b21b      	sxth	r3, r3
 8015378:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            indic_area.x2 -= style_indic->body.padding.right;
 801537c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8015380:	b29a      	uxth	r2, r3
 8015382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015384:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015388:	b29b      	uxth	r3, r3
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	b29b      	uxth	r3, r3
 801538e:	b21b      	sxth	r3, r3
 8015390:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            indic_area.y1 += style_indic->body.padding.top;
 8015394:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8015398:	b29a      	uxth	r2, r3
 801539a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801539c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	4413      	add	r3, r2
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	b21b      	sxth	r3, r3
 80153a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            indic_area.y2 -= style_indic->body.padding.bottom;
 80153ac:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153b4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	b29b      	uxth	r3, r3
 80153be:	b21b      	sxth	r3, r3
 80153c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_coord_t w = lv_area_get_width(&indic_area);
 80153c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7ff fd23 	bl	8014e14 <lv_area_get_width>
 80153ce:	4603      	mov	r3, r0
 80153d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            lv_coord_t h = lv_area_get_height(&indic_area);
 80153d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153d8:	4618      	mov	r0, r3
 80153da:	f7ff fd32 	bl	8014e42 <lv_area_get_height>
 80153de:	4603      	mov	r3, r0
 80153e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            if(w >= h) {
 80153e4:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80153e8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80153ec:	429a      	cmp	r2, r3
 80153ee:	f2c0 80b5 	blt.w	801555c <lv_bar_design+0x2c8>
                /*Horizontal*/
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 80153f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80153f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153fc:	d043      	beq.n	8015486 <lv_bar_design+0x1f2>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 80153fe:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015402:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015404:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8015408:	4611      	mov	r1, r2
 801540a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801540c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015410:	1a8a      	subs	r2, r1, r2
 8015412:	fb02 f203 	mul.w	r2, r2, r3
 8015416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801541c:	4619      	mov	r1, r3
 801541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015420:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015424:	1acb      	subs	r3, r1, r3
 8015426:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 801542a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801542e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015434:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8015438:	4611      	mov	r1, r2
 801543a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801543c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015440:	1a8a      	subs	r2, r1, r2
 8015442:	fb02 f203 	mul.w	r2, r2, r3
 8015446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015448:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801544c:	4619      	mov	r1, r3
 801544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015454:	1acb      	subs	r3, r1, r3
 8015456:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 801545a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.x2 =
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 801545e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8015462:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801546a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801546e:	fb02 f303 	mul.w	r3, r2, r3
 8015472:	121b      	asrs	r3, r3, #8
 8015474:	b29a      	uxth	r2, r3
 8015476:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801547a:	4413      	add	r3, r2
 801547c:	b29b      	uxth	r3, r3
 801547e:	b21b      	sxth	r3, r3
                    indic_area.x2 =
 8015480:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8015484:	e018      	b.n	80154b8 <lv_bar_design+0x224>
                } else
#endif
                {
                    indic_area.x2 =
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8015486:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801548a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801548c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015490:	4611      	mov	r1, r2
 8015492:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015494:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015498:	1a8a      	subs	r2, r1, r2
 801549a:	fb02 f203 	mul.w	r2, r2, r3
 801549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154a4:	4619      	mov	r1, r3
 80154a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80154ac:	1acb      	subs	r3, r1, r3
 80154ae:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.x2 =
 80154b2:	b21b      	sxth	r3, r3
 80154b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                }

                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80154b8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80154bc:	b29a      	uxth	r2, r3
 80154be:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	4413      	add	r3, r2
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	3b01      	subs	r3, #1
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	b21b      	sxth	r3, r3
 80154ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80154d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154d4:	7b9b      	ldrb	r3, [r3, #14]
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f000 80eb 	beq.w	80156b8 <lv_bar_design+0x424>
 80154e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f280 80e5 	bge.w	80156b8 <lv_bar_design+0x424>
 80154ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	f340 80df 	ble.w	80156b8 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 80154fa:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80154fe:	b29a      	uxth	r2, r3
 8015500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015502:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015506:	425b      	negs	r3, r3
 8015508:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 801550c:	fb01 f103 	mul.w	r1, r1, r3
 8015510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015512:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015516:	4618      	mov	r0, r3
 8015518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801551a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801551e:	1ac3      	subs	r3, r0, r3
 8015520:	fb91 f3f3 	sdiv	r3, r1, r3
 8015524:	b29b      	uxth	r3, r3
 8015526:	4413      	add	r3, r2
 8015528:	b29b      	uxth	r3, r3
 801552a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    if(indic_area.x2 > zero)
 801552e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8015532:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8015536:	429a      	cmp	r2, r3
 8015538:	da04      	bge.n	8015544 <lv_bar_design+0x2b0>
                        indic_area.x1 = zero;
 801553a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801553e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8015542:	e0b9      	b.n	80156b8 <lv_bar_design+0x424>
                    else {
                        indic_area.x1 = indic_area.x2;
 8015544:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8015548:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                        indic_area.x2 = zero;
 801554c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8015550:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8015554:	e0b0      	b.n	80156b8 <lv_bar_design+0x424>
 8015556:	bf00      	nop
 8015558:	20002aa8 	.word	0x20002aa8
                    }
                }
            } else {
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 801555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801555e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015566:	d043      	beq.n	80155f0 <lv_bar_design+0x35c>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_y =
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015568:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801556c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801556e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8015572:	4611      	mov	r1, r2
 8015574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015576:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801557a:	1a8a      	subs	r2, r1, r2
 801557c:	fb02 f203 	mul.w	r2, r2, r3
 8015580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015582:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015586:	4619      	mov	r1, r3
 8015588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801558a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801558e:	1acb      	subs	r3, r1, r3
 8015590:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_y =
 8015594:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                    lv_coord_t anim_end_y =
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015598:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801559c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801559e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80155a2:	4611      	mov	r1, r2
 80155a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155a6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80155aa:	1a8a      	subs	r2, r1, r2
 80155ac:	fb02 f203 	mul.w	r2, r2, r3
 80155b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80155b6:	4619      	mov	r1, r3
 80155b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80155be:	1acb      	subs	r3, r1, r3
 80155c0:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_y =
 80155c4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.y1 =
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 80155c8:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 80155cc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80155d0:	1ad3      	subs	r3, r2, r3
 80155d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155d4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80155d8:	fb02 f303 	mul.w	r3, r2, r3
 80155dc:	121b      	asrs	r3, r3, #8
 80155de:	b29a      	uxth	r2, r3
 80155e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80155e4:	4413      	add	r3, r2
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	b21b      	sxth	r3, r3
                    indic_area.y1 =
 80155ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80155ee:	e018      	b.n	8015622 <lv_bar_design+0x38e>
                } else
#endif
                {
                    indic_area.y1 =
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80155f0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80155f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155fa:	4611      	mov	r1, r2
 80155fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015602:	1a8a      	subs	r2, r1, r2
 8015604:	fb02 f203 	mul.w	r2, r2, r3
 8015608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801560a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801560e:	4619      	mov	r1, r3
 8015610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015616:	1acb      	subs	r3, r1, r3
 8015618:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.y1 =
 801561c:	b21b      	sxth	r3, r3
 801561e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }

                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8015622:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8015626:	b29a      	uxth	r2, r3
 8015628:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801562c:	b29b      	uxth	r3, r3
 801562e:	1ad3      	subs	r3, r2, r3
 8015630:	b29b      	uxth	r3, r3
 8015632:	3301      	adds	r3, #1
 8015634:	b29b      	uxth	r3, r3
 8015636:	b21b      	sxth	r3, r3
 8015638:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 801563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801563e:	7b9b      	ldrb	r3, [r3, #14]
 8015640:	f003 0301 	and.w	r3, r3, #1
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d036      	beq.n	80156b8 <lv_bar_design+0x424>
 801564a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801564c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015650:	2b00      	cmp	r3, #0
 8015652:	da31      	bge.n	80156b8 <lv_bar_design+0x424>
 8015654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015656:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	dd2c      	ble.n	80156b8 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 801565e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8015662:	b29a      	uxth	r2, r3
 8015664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801566a:	425b      	negs	r3, r3
 801566c:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8015670:	fb01 f103 	mul.w	r1, r1, r3
 8015674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015676:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801567e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015682:	1ac3      	subs	r3, r0, r3
 8015684:	fb91 f3f3 	sdiv	r3, r1, r3
 8015688:	b29b      	uxth	r3, r3
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	b29b      	uxth	r3, r3
 801568e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                    if(indic_area.y1 < zero)
 8015692:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8015696:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801569a:	429a      	cmp	r2, r3
 801569c:	dd04      	ble.n	80156a8 <lv_bar_design+0x414>
                        indic_area.y2 = zero;
 801569e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80156a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80156a6:	e007      	b.n	80156b8 <lv_bar_design+0x424>
                    else {
                        indic_area.y2 = indic_area.y1;
 80156a8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80156ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                        indic_area.y1 = zero;
 80156b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80156b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
            }

            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 80156b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80156bc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80156c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80156c2:	68b9      	ldr	r1, [r7, #8]
 80156c4:	f7f7 fa97 	bl	800cbf6 <lv_draw_rect>
 80156c8:	e027      	b.n	801571a <lv_bar_design+0x486>
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80156ca:	79fb      	ldrb	r3, [r7, #7]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d124      	bne.n	801571a <lv_bar_design+0x486>
#if LV_USE_GROUP
        /*Draw the border*/
        if(lv_obj_is_focused(bar)) {
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f7f1 fdf4 	bl	80072be <lv_obj_is_focused>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d01e      	beq.n	801571a <lv_bar_design+0x486>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7f1 fd88 	bl	80071f2 <lv_obj_get_opa_scale>
 80156e2:	4603      	mov	r3, r0
 80156e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80156e8:	2100      	movs	r1, #0
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	f7ff fdae 	bl	801524c <lv_bar_get_style>
 80156f0:	67b8      	str	r0, [r7, #120]	; 0x78
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80156f2:	f107 0314 	add.w	r3, r7, #20
 80156f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f3 f837 	bl	800876c <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 80156fe:	2300      	movs	r3, #0
 8015700:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 8015702:	2300      	movs	r3, #0
 8015704:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f103 0010 	add.w	r0, r3, #16
 801570c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015710:	f107 0214 	add.w	r2, r7, #20
 8015714:	68b9      	ldr	r1, [r7, #8]
 8015716:	f7f7 fa6e 	bl	800cbf6 <lv_draw_rect>
        }
#endif
    }
    return true;
 801571a:	2301      	movs	r3, #1
}
 801571c:	4618      	mov	r0, r3
 801571e:	3780      	adds	r7, #128	; 0x80
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b088      	sub	sp, #32
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	460b      	mov	r3, r1
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 8015732:	4b21      	ldr	r3, [pc, #132]	; (80157b8 <lv_bar_signal+0x94>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	7af9      	ldrb	r1, [r7, #11]
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	68f8      	ldr	r0, [r7, #12]
 801573c:	4798      	blx	r3
 801573e:	4603      	mov	r3, r0
 8015740:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 8015742:	7fbb      	ldrb	r3, [r7, #30]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d001      	beq.n	801574c <lv_bar_signal+0x28>
 8015748:	7fbb      	ldrb	r3, [r7, #30]
 801574a:	e031      	b.n	80157b0 <lv_bar_signal+0x8c>

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801574c:	7afb      	ldrb	r3, [r7, #11]
 801574e:	2b05      	cmp	r3, #5
 8015750:	d112      	bne.n	8015778 <lv_bar_signal+0x54>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8015752:	2101      	movs	r1, #1
 8015754:	68f8      	ldr	r0, [r7, #12]
 8015756:	f7ff fd79 	bl	801524c <lv_bar_get_style>
 801575a:	6178      	str	r0, [r7, #20]
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8015768:	429a      	cmp	r2, r3
 801576a:	dd20      	ble.n	80157ae <lv_bar_signal+0x8a>
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	869a      	strh	r2, [r3, #52]	; 0x34
 8015776:	e01a      	b.n	80157ae <lv_bar_signal+0x8a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015778:	7afb      	ldrb	r3, [r7, #11]
 801577a:	2b06      	cmp	r3, #6
 801577c:	d117      	bne.n	80157ae <lv_bar_signal+0x8a>
        lv_obj_type_t * buf = param;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015782:	2300      	movs	r3, #0
 8015784:	77fb      	strb	r3, [r7, #31]
 8015786:	e008      	b.n	801579a <lv_bar_signal+0x76>
            if(buf->type[i] == NULL) break;
 8015788:	7ffa      	ldrb	r2, [r7, #31]
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d006      	beq.n	80157a2 <lv_bar_signal+0x7e>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015794:	7ffb      	ldrb	r3, [r7, #31]
 8015796:	3301      	adds	r3, #1
 8015798:	77fb      	strb	r3, [r7, #31]
 801579a:	7ffb      	ldrb	r3, [r7, #31]
 801579c:	2b06      	cmp	r3, #6
 801579e:	d9f3      	bls.n	8015788 <lv_bar_signal+0x64>
 80157a0:	e000      	b.n	80157a4 <lv_bar_signal+0x80>
            if(buf->type[i] == NULL) break;
 80157a2:	bf00      	nop
        }
        buf->type[i] = "lv_bar";
 80157a4:	7ffa      	ldrb	r2, [r7, #31]
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	4904      	ldr	r1, [pc, #16]	; (80157bc <lv_bar_signal+0x98>)
 80157aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80157ae:	7fbb      	ldrb	r3, [r7, #30]
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3720      	adds	r7, #32
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	20002aac 	.word	0x20002aac
 80157bc:	08029c68 	.word	0x08029c68

080157c0 <lv_bar_anim>:

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	460b      	mov	r3, r1
 80157ca:	807b      	strh	r3, [r7, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f7f1 fd5e 	bl	800728e <lv_obj_get_ext_attr>
 80157d2:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = value;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	887a      	ldrh	r2, [r7, #2]
 80157d8:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(bar);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7f0 fb2b 	bl	8005e36 <lv_obj_invalidate>
}
 80157e0:	bf00      	nop
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7f1 fd4a 	bl	800728e <lv_obj_get_ext_attr>
 80157fa:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015802:	815a      	strh	r2, [r3, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6818      	ldr	r0, [r3, #0]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801580e:	2200      	movs	r2, #0
 8015810:	4619      	mov	r1, r3
 8015812:	f7ff fbf3 	bl	8014ffc <lv_bar_set_value>
}
 8015816:	bf00      	nop
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <lv_btn_set_layout>:
 * Set the layout on a button
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b082      	sub	sp, #8
 8015822:	af00      	add	r7, sp, #0
 8015824:	6078      	str	r0, [r7, #4]
 8015826:	460b      	mov	r3, r1
 8015828:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 801582a:	78fb      	ldrb	r3, [r7, #3]
 801582c:	4619      	mov	r1, r3
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f002 fb72 	bl	8017f18 <lv_cont_set_layout>
}
 8015834:	bf00      	nop
 8015836:	3708      	adds	r7, #8
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <lv_btn_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b086      	sub	sp, #24
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button create started");

    lv_obj_t * new_btn;

    new_btn = lv_cont_create(par, copy);
 8015846:	6839      	ldr	r1, [r7, #0]
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f002 fabb 	bl	8017dc4 <lv_cont_create>
 801584e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btn);
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d100      	bne.n	8015858 <lv_btn_create+0x1c>
 8015856:	e7fe      	b.n	8015856 <lv_btn_create+0x1a>
    if(new_btn == NULL) return NULL;
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d101      	bne.n	8015862 <lv_btn_create+0x26>
 801585e:	2300      	movs	r3, #0
 8015860:	e0a5      	b.n	80159ae <lv_btn_create+0x172>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8015862:	4b55      	ldr	r3, [pc, #340]	; (80159b8 <lv_btn_create+0x17c>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d105      	bne.n	8015876 <lv_btn_create+0x3a>
 801586a:	6978      	ldr	r0, [r7, #20]
 801586c:	f7f1 fcf7 	bl	800725e <lv_obj_get_signal_cb>
 8015870:	4602      	mov	r2, r0
 8015872:	4b51      	ldr	r3, [pc, #324]	; (80159b8 <lv_btn_create+0x17c>)
 8015874:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8015876:	4b51      	ldr	r3, [pc, #324]	; (80159bc <lv_btn_create+0x180>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d105      	bne.n	801588a <lv_btn_create+0x4e>
 801587e:	6978      	ldr	r0, [r7, #20]
 8015880:	f7f1 fcf9 	bl	8007276 <lv_obj_get_design_cb>
 8015884:	4602      	mov	r2, r0
 8015886:	4b4d      	ldr	r3, [pc, #308]	; (80159bc <lv_btn_create+0x180>)
 8015888:	601a      	str	r2, [r3, #0]

    /*Allocate the extended data*/
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 801588a:	211c      	movs	r1, #28
 801588c:	6978      	ldr	r0, [r7, #20]
 801588e:	f7f1 fb31 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 8015892:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d100      	bne.n	801589c <lv_btn_create+0x60>
 801589a:	e7fe      	b.n	801589a <lv_btn_create+0x5e>
    if(ext == NULL) return NULL;
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d101      	bne.n	80158a6 <lv_btn_create+0x6a>
 80158a2:	2300      	movs	r3, #0
 80158a4:	e083      	b.n	80159ae <lv_btn_create+0x172>

    ext->state = LV_BTN_STATE_REL;
 80158a6:	693a      	ldr	r2, [r7, #16]
 80158a8:	7e13      	ldrb	r3, [r2, #24]
 80158aa:	f36f 0302 	bfc	r3, #0, #3
 80158ae:	7613      	strb	r3, [r2, #24]

    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	4a43      	ldr	r2, [pc, #268]	; (80159c0 <lv_btn_create+0x184>)
 80158b4:	605a      	str	r2, [r3, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	4a42      	ldr	r2, [pc, #264]	; (80159c4 <lv_btn_create+0x188>)
 80158ba:	609a      	str	r2, [r3, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	4a42      	ldr	r2, [pc, #264]	; (80159c8 <lv_btn_create+0x18c>)
 80158c0:	60da      	str	r2, [r3, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	4a41      	ldr	r2, [pc, #260]	; (80159cc <lv_btn_create+0x190>)
 80158c6:	611a      	str	r2, [r3, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	4a41      	ldr	r2, [pc, #260]	; (80159d0 <lv_btn_create+0x194>)
 80158cc:	615a      	str	r2, [r3, #20]

    ext->toggle = 0;
 80158ce:	693a      	ldr	r2, [r7, #16]
 80158d0:	7e13      	ldrb	r3, [r2, #24]
 80158d2:	f36f 03c3 	bfc	r3, #3, #1
 80158d6:	7613      	strb	r3, [r2, #24]
    ext->ink_in_time   = 0;
    ext->ink_wait_time = 0;
    ext->ink_out_time  = 0;
#endif

    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 80158d8:	493e      	ldr	r1, [pc, #248]	; (80159d4 <lv_btn_create+0x198>)
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f7f1 faee 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 80158e0:	493d      	ldr	r1, [pc, #244]	; (80159d8 <lv_btn_create+0x19c>)
 80158e2:	6978      	ldr	r0, [r7, #20]
 80158e4:	f7f1 faf8 	bl	8006ed8 <lv_obj_set_design_cb>

    /*If no copy do the basic initialization*/
    if(copy == NULL) {
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d13b      	bne.n	8015966 <lv_btn_create+0x12a>
        /*Set layout if the button is not a screen*/
        if(par != NULL) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d003      	beq.n	80158fc <lv_btn_create+0xc0>
            lv_btn_set_layout(new_btn, LV_LAYOUT_CENTER);
 80158f4:	2101      	movs	r1, #1
 80158f6:	6978      	ldr	r0, [r7, #20]
 80158f8:	f7ff ff91 	bl	801581e <lv_btn_set_layout>
        }

        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 80158fc:	2101      	movs	r1, #1
 80158fe:	6978      	ldr	r0, [r7, #20]
 8015900:	f7f1 f9bb 	bl	8006c7a <lv_obj_set_click>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8015904:	f009 fb46 	bl	801ef94 <lv_theme_get_current>
 8015908:	60b8      	str	r0, [r7, #8]
        if(th) {
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d023      	beq.n	8015958 <lv_btn_create+0x11c>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	691b      	ldr	r3, [r3, #16]
 8015914:	461a      	mov	r2, r3
 8015916:	2100      	movs	r1, #0
 8015918:	6978      	ldr	r0, [r7, #20]
 801591a:	f000 f89d 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	695b      	ldr	r3, [r3, #20]
 8015922:	461a      	mov	r2, r3
 8015924:	2101      	movs	r1, #1
 8015926:	6978      	ldr	r0, [r7, #20]
 8015928:	f000 f896 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	699b      	ldr	r3, [r3, #24]
 8015930:	461a      	mov	r2, r3
 8015932:	2102      	movs	r1, #2
 8015934:	6978      	ldr	r0, [r7, #20]
 8015936:	f000 f88f 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	69db      	ldr	r3, [r3, #28]
 801593e:	461a      	mov	r2, r3
 8015940:	2103      	movs	r1, #3
 8015942:	6978      	ldr	r0, [r7, #20]
 8015944:	f000 f888 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	6a1b      	ldr	r3, [r3, #32]
 801594c:	461a      	mov	r2, r3
 801594e:	2104      	movs	r1, #4
 8015950:	6978      	ldr	r0, [r7, #20]
 8015952:	f000 f881 	bl	8015a58 <lv_btn_set_style>
 8015956:	e029      	b.n	80159ac <lv_btn_create+0x170>
        } else {
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	4619      	mov	r1, r3
 801595e:	6978      	ldr	r0, [r7, #20]
 8015960:	f7f1 f965 	bl	8006c2e <lv_obj_set_style>
 8015964:	e022      	b.n	80159ac <lv_btn_create+0x170>
        }
    }
    /*Copy 'copy'*/
    else {
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8015966:	6838      	ldr	r0, [r7, #0]
 8015968:	f7f1 fc91 	bl	800728e <lv_obj_get_ext_attr>
 801596c:	60f8      	str	r0, [r7, #12]
        ext->state              = copy_ext->state;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	7e1b      	ldrb	r3, [r3, #24]
 8015972:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015976:	b2d9      	uxtb	r1, r3
 8015978:	693a      	ldr	r2, [r7, #16]
 801597a:	7e13      	ldrb	r3, [r2, #24]
 801597c:	f361 0302 	bfi	r3, r1, #0, #3
 8015980:	7613      	strb	r3, [r2, #24]
        ext->toggle             = copy_ext->toggle;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	7e1b      	ldrb	r3, [r3, #24]
 8015986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801598a:	b2d9      	uxtb	r1, r3
 801598c:	693a      	ldr	r2, [r7, #16]
 801598e:	7e13      	ldrb	r3, [r2, #24]
 8015990:	f361 03c3 	bfi	r3, r1, #3, #1
 8015994:	7613      	strb	r3, [r2, #24]
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
        ext->ink_in_time   = copy_ext->ink_in_time;
        ext->ink_wait_time = copy_ext->ink_wait_time;
        ext->ink_out_time  = copy_ext->ink_out_time;
#endif
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	1d18      	adds	r0, r3, #4
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	3304      	adds	r3, #4
 801599e:	2214      	movs	r2, #20
 80159a0:	4619      	mov	r1, r3
 80159a2:	f011 fbfd 	bl	80271a0 <memcpy>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_btn);
 80159a6:	6978      	ldr	r0, [r7, #20]
 80159a8:	f7f1 f953 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("button created");

    return new_btn;
 80159ac:	697b      	ldr	r3, [r7, #20]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3718      	adds	r7, #24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	20002ab0 	.word	0x20002ab0
 80159bc:	20002ab4 	.word	0x20002ab4
 80159c0:	20006b00 	.word	0x20006b00
 80159c4:	20006b3c 	.word	0x20006b3c
 80159c8:	20006ca4 	.word	0x20006ca4
 80159cc:	20006d1c 	.word	0x20006d1c
 80159d0:	20006bf0 	.word	0x20006bf0
 80159d4:	08015b79 	.word	0x08015b79
 80159d8:	08015b2d 	.word	0x08015b2d

080159dc <lv_btn_set_toggle>:
 * Enable the toggled states
 * @param btn pointer to a button object
 * @param tgl true: enable toggled states, false: disable
 */
void lv_btn_set_toggle(lv_obj_t * btn, bool tgl)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	460b      	mov	r3, r1
 80159e6:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f7f1 fc50 	bl	800728e <lv_obj_get_ext_attr>
 80159ee:	60f8      	str	r0, [r7, #12]

    ext->toggle = tgl != false ? 1 : 0;
 80159f0:	78f9      	ldrb	r1, [r7, #3]
 80159f2:	68fa      	ldr	r2, [r7, #12]
 80159f4:	7e13      	ldrb	r3, [r2, #24]
 80159f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80159fa:	7613      	strb	r3, [r2, #24]
}
 80159fc:	bf00      	nop
 80159fe:	3710      	adds	r7, #16
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <lv_btn_set_state>:
 * Set the state of the button
 * @param btn pointer to a button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	460b      	mov	r3, r1
 8015a0e:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f7f1 fc3c 	bl	800728e <lv_obj_get_ext_attr>
 8015a16:	60f8      	str	r0, [r7, #12]
    if(ext->state != state) {
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	7e1b      	ldrb	r3, [r3, #24]
 8015a1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	461a      	mov	r2, r3
 8015a24:	78fb      	ldrb	r3, [r7, #3]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d011      	beq.n	8015a4e <lv_btn_set_state+0x4a>
        ext->state = state;
 8015a2a:	78fb      	ldrb	r3, [r7, #3]
 8015a2c:	f003 0307 	and.w	r3, r3, #7
 8015a30:	b2d9      	uxtb	r1, r3
 8015a32:	68fa      	ldr	r2, [r7, #12]
 8015a34:	7e13      	ldrb	r3, [r2, #24]
 8015a36:	f361 0302 	bfi	r3, r1, #0, #3
 8015a3a:	7613      	strb	r3, [r2, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 8015a3c:	78fb      	ldrb	r3, [r7, #3]
 8015a3e:	68fa      	ldr	r2, [r7, #12]
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	4413      	add	r3, r2
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	4619      	mov	r1, r3
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7f1 f8f0 	bl	8006c2e <lv_obj_set_style>
    }
}
 8015a4e:	bf00      	nop
 8015a50:	3710      	adds	r7, #16
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
	...

08015a58 <lv_btn_set_style>:
 * @param btn pointer to a button object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btn_set_style(lv_obj_t * btn, lv_btn_style_t type, const lv_style_t * style)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	460b      	mov	r3, r1
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	72fb      	strb	r3, [r7, #11]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7f1 fc11 	bl	800728e <lv_obj_get_ext_attr>
 8015a6c:	6178      	str	r0, [r7, #20]

    switch(type) {
 8015a6e:	7afb      	ldrb	r3, [r7, #11]
 8015a70:	2b04      	cmp	r3, #4
 8015a72:	d821      	bhi.n	8015ab8 <lv_btn_set_style+0x60>
 8015a74:	a201      	add	r2, pc, #4	; (adr r2, 8015a7c <lv_btn_set_style+0x24>)
 8015a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a7a:	bf00      	nop
 8015a7c:	08015a91 	.word	0x08015a91
 8015a80:	08015a99 	.word	0x08015a99
 8015a84:	08015aa1 	.word	0x08015aa1
 8015a88:	08015aa9 	.word	0x08015aa9
 8015a8c:	08015ab1 	.word	0x08015ab1
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	605a      	str	r2, [r3, #4]
 8015a96:	e00f      	b.n	8015ab8 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	609a      	str	r2, [r3, #8]
 8015a9e:	e00b      	b.n	8015ab8 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	60da      	str	r2, [r3, #12]
 8015aa6:	e007      	b.n	8015ab8 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	611a      	str	r2, [r3, #16]
 8015aae:	e003      	b.n	8015ab8 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	687a      	ldr	r2, [r7, #4]
 8015ab4:	615a      	str	r2, [r3, #20]
 8015ab6:	bf00      	nop
    }

    /*Refresh the object with the new style*/
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	7e1b      	ldrb	r3, [r3, #24]
 8015abc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	697a      	ldr	r2, [r7, #20]
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	4619      	mov	r1, r3
 8015acc:	68f8      	ldr	r0, [r7, #12]
 8015ace:	f7f1 f8ae 	bl	8006c2e <lv_obj_set_style>
}
 8015ad2:	bf00      	nop
 8015ad4:	3718      	adds	r7, #24
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop

08015adc <lv_btn_get_state>:
 * Get the current state of the button
 * @param btn pointer to a button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7f1 fbd2 	bl	800728e <lv_obj_get_ext_attr>
 8015aea:	60f8      	str	r0, [r7, #12]
    return ext->state;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	7e1b      	ldrb	r3, [r3, #24]
 8015af0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015af4:	b2db      	uxtb	r3, r3
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3710      	adds	r7, #16
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}

08015afe <lv_btn_get_toggle>:
 * Get the toggle enable attribute of the button
 * @param btn pointer to a button object
 * @return ture: toggle enabled, false: disabled
 */
bool lv_btn_get_toggle(const lv_obj_t * btn)
{
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b084      	sub	sp, #16
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7f1 fbc1 	bl	800728e <lv_obj_get_ext_attr>
 8015b0c:	60f8      	str	r0, [r7, #12]

    return ext->toggle != 0 ? true : false;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	7e1b      	ldrb	r3, [r3, #24]
 8015b12:	08db      	lsrs	r3, r3, #3
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	f003 0301 	and.w	r3, r3, #1
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	bf14      	ite	ne
 8015b1e:	2301      	movne	r3, #1
 8015b20:	2300      	moveq	r3, #0
 8015b22:	b2db      	uxtb	r3, r3
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	4613      	mov	r3, r2
 8015b38:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8015b3a:	79fb      	ldrb	r3, [r7, #7]
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d101      	bne.n	8015b44 <lv_btn_design+0x18>
        return false;
 8015b40:	2300      	movs	r3, #0
 8015b42:	e013      	b.n	8015b6c <lv_btn_design+0x40>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8015b44:	79fb      	ldrb	r3, [r7, #7]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <lv_btn_design+0x2c>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
            }
        }
#else
        ancestor_design(btn, mask, mode);
 8015b4a:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <lv_btn_design+0x48>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	79fa      	ldrb	r2, [r7, #7]
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	4798      	blx	r3
 8015b56:	e008      	b.n	8015b6a <lv_btn_design+0x3e>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8015b58:	79fb      	ldrb	r3, [r7, #7]
 8015b5a:	2b01      	cmp	r3, #1
 8015b5c:	d105      	bne.n	8015b6a <lv_btn_design+0x3e>
        ancestor_design(btn, mask, mode);
 8015b5e:	4b05      	ldr	r3, [pc, #20]	; (8015b74 <lv_btn_design+0x48>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	79fa      	ldrb	r2, [r7, #7]
 8015b64:	68b9      	ldr	r1, [r7, #8]
 8015b66:	68f8      	ldr	r0, [r7, #12]
 8015b68:	4798      	blx	r3
    }

    return true;
 8015b6a:	2301      	movs	r3, #1
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	3710      	adds	r7, #16
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	20002ab4 	.word	0x20002ab4

08015b78 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08c      	sub	sp, #48	; 0x30
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	460b      	mov	r3, r1
 8015b82:	607a      	str	r2, [r7, #4]
 8015b84:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8015b86:	4bb4      	ldr	r3, [pc, #720]	; (8015e58 <lv_btn_signal+0x2e0>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	7af9      	ldrb	r1, [r7, #11]
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	68f8      	ldr	r0, [r7, #12]
 8015b90:	4798      	blx	r3
 8015b92:	4603      	mov	r3, r0
 8015b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(res != LV_RES_OK) return res;
 8015b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b9c:	2b01      	cmp	r3, #1
 8015b9e:	d002      	beq.n	8015ba6 <lv_btn_signal+0x2e>
 8015ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ba4:	e165      	b.n	8015e72 <lv_btn_signal+0x2fa>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f7f1 fb71 	bl	800728e <lv_obj_get_ext_attr>
 8015bac:	62b8      	str	r0, [r7, #40]	; 0x28
    bool tgl           = lv_btn_get_toggle(btn);
 8015bae:	68f8      	ldr	r0, [r7, #12]
 8015bb0:	f7ff ffa5 	bl	8015afe <lv_btn_get_toggle>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(sign == LV_SIGNAL_PRESSED) {
 8015bba:	7afb      	ldrb	r3, [r7, #11]
 8015bbc:	2b07      	cmp	r3, #7
 8015bbe:	d118      	bne.n	8015bf2 <lv_btn_signal+0x7a>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 8015bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc2:	7e1b      	ldrb	r3, [r3, #24]
 8015bc4:	f003 0307 	and.w	r3, r3, #7
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d104      	bne.n	8015bd8 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 8015bce:	2101      	movs	r1, #1
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	f7ff ff17 	bl	8015a04 <lv_btn_set_state>
 8015bd6:	e14a      	b.n	8015e6e <lv_btn_signal+0x2f6>
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
            ink_bg_state  = LV_BTN_STATE_REL;
            ink_top_state = LV_BTN_STATE_PR;
#endif
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8015bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bda:	7e1b      	ldrb	r3, [r3, #24]
 8015bdc:	f003 0307 	and.w	r3, r3, #7
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	2b02      	cmp	r3, #2
 8015be4:	f040 8143 	bne.w	8015e6e <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 8015be8:	2103      	movs	r1, #3
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f7ff ff0a 	bl	8015a04 <lv_btn_set_state>
 8015bf0:	e13d      	b.n	8015e6e <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 8015bf2:	7afb      	ldrb	r3, [r7, #11]
 8015bf4:	2b09      	cmp	r3, #9
 8015bf6:	d118      	bne.n	8015c2a <lv_btn_signal+0xb2>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
 8015bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfa:	7e1b      	ldrb	r3, [r3, #24]
 8015bfc:	f003 0307 	and.w	r3, r3, #7
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d104      	bne.n	8015c10 <lv_btn_signal+0x98>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015c06:	2100      	movs	r1, #0
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	f7ff fefb 	bl	8015a04 <lv_btn_set_state>
 8015c0e:	e12e      	b.n	8015e6e <lv_btn_signal+0x2f6>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 8015c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c12:	7e1b      	ldrb	r3, [r3, #24]
 8015c14:	f003 0307 	and.w	r3, r3, #7
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b03      	cmp	r3, #3
 8015c1c:	f040 8127 	bne.w	8015e6e <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015c20:	2102      	movs	r1, #2
 8015c22:	68f8      	ldr	r0, [r7, #12]
 8015c24:	f7ff feee 	bl	8015a04 <lv_btn_set_state>
 8015c28:	e121      	b.n	8015e6e <lv_btn_signal+0x2f6>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8015c2a:	7afb      	ldrb	r3, [r7, #11]
 8015c2c:	2b08      	cmp	r3, #8
 8015c2e:	d11f      	bne.n	8015c70 <lv_btn_signal+0xf8>
        /*When the button begins to drag revert pressed states to released*/
        if(lv_indev_is_dragging(param) != false) {
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7ef fcf9 	bl	8005628 <lv_indev_is_dragging>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f000 8118 	beq.w	8015e6e <lv_btn_signal+0x2f6>
            if(ext->state == LV_BTN_STATE_PR)
 8015c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c40:	7e1b      	ldrb	r3, [r3, #24]
 8015c42:	f003 0307 	and.w	r3, r3, #7
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d104      	bne.n	8015c56 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	68f8      	ldr	r0, [r7, #12]
 8015c50:	f7ff fed8 	bl	8015a04 <lv_btn_set_state>
 8015c54:	e10b      	b.n	8015e6e <lv_btn_signal+0x2f6>
            else if(ext->state == LV_BTN_STATE_TGL_PR)
 8015c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c58:	7e1b      	ldrb	r3, [r3, #24]
 8015c5a:	f003 0307 	and.w	r3, r3, #7
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	f040 8104 	bne.w	8015e6e <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015c66:	2102      	movs	r1, #2
 8015c68:	68f8      	ldr	r0, [r7, #12]
 8015c6a:	f7ff fecb 	bl	8015a04 <lv_btn_set_state>
 8015c6e:	e0fe      	b.n	8015e6e <lv_btn_signal+0x2f6>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 8015c70:	7afb      	ldrb	r3, [r7, #11]
 8015c72:	2b0a      	cmp	r3, #10
 8015c74:	f040 8087 	bne.w	8015d86 <lv_btn_signal+0x20e>
        /*If not dragged and it was not long press action then
         *change state and run the action*/
        if(lv_indev_is_dragging(param) == false) {
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7ef fcd5 	bl	8005628 <lv_indev_is_dragging>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	f083 0301 	eor.w	r3, r3, #1
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d065      	beq.n	8015d56 <lv_btn_signal+0x1de>
            uint32_t toggled = 0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	61bb      	str	r3, [r7, #24]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8015c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c90:	7e1b      	ldrb	r3, [r3, #24]
 8015c92:	f003 0307 	and.w	r3, r3, #7
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d10d      	bne.n	8015cb8 <lv_btn_signal+0x140>
 8015c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ca0:	f083 0301 	eor.w	r3, r3, #1
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d006      	beq.n	8015cb8 <lv_btn_signal+0x140>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015caa:	2100      	movs	r1, #0
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff fea9 	bl	8015a04 <lv_btn_set_state>
                toggled = 0;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	61bb      	str	r3, [r7, #24]
 8015cb6:	e037      	b.n	8015d28 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8015cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cba:	7e1b      	ldrb	r3, [r3, #24]
 8015cbc:	f003 0307 	and.w	r3, r3, #7
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	2b03      	cmp	r3, #3
 8015cc4:	d10d      	bne.n	8015ce2 <lv_btn_signal+0x16a>
 8015cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cca:	f083 0301 	eor.w	r3, r3, #1
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d006      	beq.n	8015ce2 <lv_btn_signal+0x16a>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015cd4:	2102      	movs	r1, #2
 8015cd6:	68f8      	ldr	r0, [r7, #12]
 8015cd8:	f7ff fe94 	bl	8015a04 <lv_btn_set_state>
                toggled = 1;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	61bb      	str	r3, [r7, #24]
 8015ce0:	e022      	b.n	8015d28 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_PR && tgl == true) {
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	7e1b      	ldrb	r3, [r3, #24]
 8015ce6:	f003 0307 	and.w	r3, r3, #7
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d10a      	bne.n	8015d06 <lv_btn_signal+0x18e>
 8015cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d006      	beq.n	8015d06 <lv_btn_signal+0x18e>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015cf8:	2102      	movs	r1, #2
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7ff fe82 	bl	8015a04 <lv_btn_set_state>
                toggled = 1;
 8015d00:	2301      	movs	r3, #1
 8015d02:	61bb      	str	r3, [r7, #24]
 8015d04:	e010      	b.n	8015d28 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == true) {
 8015d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d08:	7e1b      	ldrb	r3, [r3, #24]
 8015d0a:	f003 0307 	and.w	r3, r3, #7
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	2b03      	cmp	r3, #3
 8015d12:	d109      	bne.n	8015d28 <lv_btn_signal+0x1b0>
 8015d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d005      	beq.n	8015d28 <lv_btn_signal+0x1b0>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015d1c:	2100      	movs	r1, #0
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	f7ff fe70 	bl	8015a04 <lv_btn_set_state>
                toggled = 0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	61bb      	str	r3, [r7, #24]
            }

            if(tgl) {
 8015d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	f000 809e 	beq.w	8015e6e <lv_btn_signal+0x2f6>
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8015d32:	f107 0318 	add.w	r3, r7, #24
 8015d36:	461a      	mov	r2, r3
 8015d38:	210e      	movs	r1, #14
 8015d3a:	68f8      	ldr	r0, [r7, #12]
 8015d3c:	f7f1 f82d 	bl	8006d9a <lv_event_send>
 8015d40:	4603      	mov	r3, r0
 8015d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	f000 808f 	beq.w	8015e6e <lv_btn_signal+0x2f6>
 8015d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d54:	e08d      	b.n	8015e72 <lv_btn_signal+0x2fa>
            }

        } else { /*If dragged change back the state*/
            if(ext->state == LV_BTN_STATE_PR) {
 8015d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d58:	7e1b      	ldrb	r3, [r3, #24]
 8015d5a:	f003 0307 	and.w	r3, r3, #7
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d104      	bne.n	8015d6e <lv_btn_signal+0x1f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015d64:	2100      	movs	r1, #0
 8015d66:	68f8      	ldr	r0, [r7, #12]
 8015d68:	f7ff fe4c 	bl	8015a04 <lv_btn_set_state>
 8015d6c:	e07f      	b.n	8015e6e <lv_btn_signal+0x2f6>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 8015d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d70:	7e1b      	ldrb	r3, [r3, #24]
 8015d72:	f003 0307 	and.w	r3, r3, #7
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	2b03      	cmp	r3, #3
 8015d7a:	d178      	bne.n	8015e6e <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015d7c:	2102      	movs	r1, #2
 8015d7e:	68f8      	ldr	r0, [r7, #12]
 8015d80:	f7ff fe40 	bl	8015a04 <lv_btn_set_state>
 8015d84:	e073      	b.n	8015e6e <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_CONTROL) {
 8015d86:	7afb      	ldrb	r3, [r7, #11]
 8015d88:	2b11      	cmp	r3, #17
 8015d8a:	d148      	bne.n	8015e1e <lv_btn_signal+0x2a6>
        char c = *((char *)param);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	77fb      	strb	r3, [r7, #31]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8015d92:	7ffb      	ldrb	r3, [r7, #31]
 8015d94:	2b13      	cmp	r3, #19
 8015d96:	d002      	beq.n	8015d9e <lv_btn_signal+0x226>
 8015d98:	7ffb      	ldrb	r3, [r7, #31]
 8015d9a:	2b11      	cmp	r3, #17
 8015d9c:	d11c      	bne.n	8015dd8 <lv_btn_signal+0x260>
            if(lv_btn_get_toggle(btn)) {
 8015d9e:	68f8      	ldr	r0, [r7, #12]
 8015da0:	f7ff fead 	bl	8015afe <lv_btn_get_toggle>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d060      	beq.n	8015e6c <lv_btn_signal+0x2f4>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015daa:	2102      	movs	r1, #2
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f7ff fe29 	bl	8015a04 <lv_btn_set_state>

                uint32_t state = 1;
 8015db2:	2301      	movs	r3, #1
 8015db4:	617b      	str	r3, [r7, #20]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8015db6:	f107 0314 	add.w	r3, r7, #20
 8015dba:	461a      	mov	r2, r3
 8015dbc:	210e      	movs	r1, #14
 8015dbe:	68f8      	ldr	r0, [r7, #12]
 8015dc0:	f7f0 ffeb 	bl	8006d9a <lv_event_send>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dce:	2b01      	cmp	r3, #1
 8015dd0:	d04c      	beq.n	8015e6c <lv_btn_signal+0x2f4>
 8015dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dd6:	e04c      	b.n	8015e72 <lv_btn_signal+0x2fa>
            }

        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8015dd8:	7ffb      	ldrb	r3, [r7, #31]
 8015dda:	2b14      	cmp	r3, #20
 8015ddc:	d002      	beq.n	8015de4 <lv_btn_signal+0x26c>
 8015dde:	7ffb      	ldrb	r3, [r7, #31]
 8015de0:	2b12      	cmp	r3, #18
 8015de2:	d144      	bne.n	8015e6e <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f7ff fe8a 	bl	8015afe <lv_btn_get_toggle>
 8015dea:	4603      	mov	r3, r0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d03e      	beq.n	8015e6e <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015df0:	2100      	movs	r1, #0
 8015df2:	68f8      	ldr	r0, [r7, #12]
 8015df4:	f7ff fe06 	bl	8015a04 <lv_btn_set_state>

                uint32_t state = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	613b      	str	r3, [r7, #16]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8015dfc:	f107 0310 	add.w	r3, r7, #16
 8015e00:	461a      	mov	r2, r3
 8015e02:	210e      	movs	r1, #14
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f7f0 ffc8 	bl	8006d9a <lv_event_send>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e14:	2b01      	cmp	r3, #1
 8015e16:	d02a      	beq.n	8015e6e <lv_btn_signal+0x2f6>
 8015e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e1c:	e029      	b.n	8015e72 <lv_btn_signal+0x2fa>
            }
        }
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8015e1e:	7afb      	ldrb	r3, [r7, #11]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d024      	beq.n	8015e6e <lv_btn_signal+0x2f6>
        if(btn == ink_obj) {
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
            ink_obj = NULL;
        }
#endif
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015e24:	7afb      	ldrb	r3, [r7, #11]
 8015e26:	2b06      	cmp	r3, #6
 8015e28:	d121      	bne.n	8015e6e <lv_btn_signal+0x2f6>
        lv_obj_type_t * buf = param;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	623b      	str	r3, [r7, #32]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015e2e:	2300      	movs	r3, #0
 8015e30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8015e34:	e00b      	b.n	8015e4e <lv_btn_signal+0x2d6>
            if(buf->type[i] == NULL) break;
 8015e36:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015e3a:	6a3b      	ldr	r3, [r7, #32]
 8015e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d00b      	beq.n	8015e5c <lv_btn_signal+0x2e4>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015e48:	3301      	adds	r3, #1
 8015e4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8015e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015e52:	2b06      	cmp	r3, #6
 8015e54:	d9ef      	bls.n	8015e36 <lv_btn_signal+0x2be>
 8015e56:	e002      	b.n	8015e5e <lv_btn_signal+0x2e6>
 8015e58:	20002ab0 	.word	0x20002ab0
            if(buf->type[i] == NULL) break;
 8015e5c:	bf00      	nop
        }
        buf->type[i] = "lv_btn";
 8015e5e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015e62:	6a3b      	ldr	r3, [r7, #32]
 8015e64:	4905      	ldr	r1, [pc, #20]	; (8015e7c <lv_btn_signal+0x304>)
 8015e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015e6a:	e000      	b.n	8015e6e <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8015e6c:	bf00      	nop
    }

    return res;
 8015e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3730      	adds	r7, #48	; 0x30
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	08029c70 	.word	0x08029c70

08015e80 <lv_area_copy>:
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8015e8a:	2208      	movs	r2, #8
 8015e8c:	6839      	ldr	r1, [r7, #0]
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f011 f986 	bl	80271a0 <memcpy>
}
 8015e94:	bf00      	nop
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <lv_area_get_width>:
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015eaa:	b29a      	uxth	r2, r3
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	1ad3      	subs	r3, r2, r3
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	3301      	adds	r3, #1
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	b21b      	sxth	r3, r3
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	370c      	adds	r7, #12
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec8:	4770      	bx	lr

08015eca <lv_area_get_height>:
{
 8015eca:	b480      	push	{r7}
 8015ecc:	b083      	sub	sp, #12
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015ed8:	b29a      	uxth	r2, r3
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	b29b      	uxth	r3, r3
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	b21b      	sxth	r3, r3
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	370c      	adds	r7, #12
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef6:	4770      	bx	lr

08015ef8 <lv_btnm_create>:
 * @param copy pointer to a button matrix object, if not NULL then the new object will be copied
 * from it
 * @return pointer to the created button matrix
 */
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b086      	sub	sp, #24
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button matrix create started");

    /*Create the ancestor object*/
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 8015f02:	6839      	ldr	r1, [r7, #0]
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7ef fc59 	bl	80057bc <lv_obj_create>
 8015f0a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btnm);
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d100      	bne.n	8015f14 <lv_btnm_create+0x1c>
 8015f12:	e7fe      	b.n	8015f12 <lv_btnm_create+0x1a>
    if(new_btnm == NULL) return NULL;
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d101      	bne.n	8015f1e <lv_btnm_create+0x26>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	e0b9      	b.n	8016092 <lv_btnm_create+0x19a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 8015f1e:	4b5f      	ldr	r3, [pc, #380]	; (801609c <lv_btnm_create+0x1a4>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d105      	bne.n	8015f32 <lv_btnm_create+0x3a>
 8015f26:	6978      	ldr	r0, [r7, #20]
 8015f28:	f7f1 f999 	bl	800725e <lv_obj_get_signal_cb>
 8015f2c:	4602      	mov	r2, r0
 8015f2e:	4b5b      	ldr	r3, [pc, #364]	; (801609c <lv_btnm_create+0x1a4>)
 8015f30:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8015f32:	2128      	movs	r1, #40	; 0x28
 8015f34:	6978      	ldr	r0, [r7, #20]
 8015f36:	f7f0 ffdd 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 8015f3a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d100      	bne.n	8015f44 <lv_btnm_create+0x4c>
 8015f42:	e7fe      	b.n	8015f42 <lv_btnm_create+0x4a>
    if(ext == NULL) return NULL;
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d101      	bne.n	8015f4e <lv_btnm_create+0x56>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	e0a1      	b.n	8016092 <lv_btnm_create+0x19a>

    ext->btn_cnt                          = 0;
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	2200      	movs	r2, #0
 8015f52:	841a      	strh	r2, [r3, #32]
    ext->btn_id_pr                        = LV_BTNM_BTN_NONE;
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f5a:	845a      	strh	r2, [r3, #34]	; 0x22
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f62:	849a      	strh	r2, [r3, #36]	; 0x24
    ext->button_areas                     = NULL;
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	2200      	movs	r2, #0
 8015f68:	605a      	str	r2, [r3, #4]
    ext->ctrl_bits                        = NULL;
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	609a      	str	r2, [r3, #8]
    ext->map_p                            = NULL;
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	2200      	movs	r2, #0
 8015f74:	601a      	str	r2, [r3, #0]
    ext->recolor                          = 0;
 8015f76:	693a      	ldr	r2, [r7, #16]
 8015f78:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015f7c:	f36f 0300 	bfc	r3, #0, #1
 8015f80:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->one_toggle                       = 0;
 8015f84:	693a      	ldr	r2, [r7, #16]
 8015f86:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015f8a:	f36f 0341 	bfc	r3, #1, #1
 8015f8e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	4a42      	ldr	r2, [pc, #264]	; (80160a0 <lv_btnm_create+0x1a8>)
 8015f96:	60da      	str	r2, [r3, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	4a42      	ldr	r2, [pc, #264]	; (80160a4 <lv_btnm_create+0x1ac>)
 8015f9c:	611a      	str	r2, [r3, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	4a41      	ldr	r2, [pc, #260]	; (80160a8 <lv_btnm_create+0x1b0>)
 8015fa2:	615a      	str	r2, [r3, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	4a41      	ldr	r2, [pc, #260]	; (80160ac <lv_btnm_create+0x1b4>)
 8015fa8:	619a      	str	r2, [r3, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	4a40      	ldr	r2, [pc, #256]	; (80160b0 <lv_btnm_create+0x1b8>)
 8015fae:	61da      	str	r2, [r3, #28]

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 8015fb0:	4b40      	ldr	r3, [pc, #256]	; (80160b4 <lv_btnm_create+0x1bc>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d105      	bne.n	8015fc4 <lv_btnm_create+0xcc>
 8015fb8:	6978      	ldr	r0, [r7, #20]
 8015fba:	f7f1 f95c 	bl	8007276 <lv_obj_get_design_cb>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	4b3c      	ldr	r3, [pc, #240]	; (80160b4 <lv_btnm_create+0x1bc>)
 8015fc2:	601a      	str	r2, [r3, #0]

    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 8015fc4:	493c      	ldr	r1, [pc, #240]	; (80160b8 <lv_btnm_create+0x1c0>)
 8015fc6:	6978      	ldr	r0, [r7, #20]
 8015fc8:	f7f0 ff78 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 8015fcc:	493b      	ldr	r1, [pc, #236]	; (80160bc <lv_btnm_create+0x1c4>)
 8015fce:	6978      	ldr	r0, [r7, #20]
 8015fd0:	f7f0 ff82 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new button matrix object*/
    if(copy == NULL) {
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d145      	bne.n	8016066 <lv_btnm_create+0x16e>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 8015fda:	22c8      	movs	r2, #200	; 0xc8
 8015fdc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8015fe0:	6978      	ldr	r0, [r7, #20]
 8015fe2:	f7f0 f8dc 	bl	800619e <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8015fe6:	4936      	ldr	r1, [pc, #216]	; (80160c0 <lv_btnm_create+0x1c8>)
 8015fe8:	6978      	ldr	r0, [r7, #20]
 8015fea:	f000 f86d 	bl	80160c8 <lv_btnm_set_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8015fee:	f008 ffd1 	bl	801ef94 <lv_theme_get_current>
 8015ff2:	60b8      	str	r0, [r7, #8]
        if(th) {
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d030      	beq.n	801605c <lv_btnm_create+0x164>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016000:	461a      	mov	r2, r3
 8016002:	2100      	movs	r1, #0
 8016004:	6978      	ldr	r0, [r7, #20]
 8016006:	f000 fa09 	bl	801641c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016010:	461a      	mov	r2, r3
 8016012:	2101      	movs	r1, #1
 8016014:	6978      	ldr	r0, [r7, #20]
 8016016:	f000 fa01 	bl	801641c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016020:	461a      	mov	r2, r3
 8016022:	2102      	movs	r1, #2
 8016024:	6978      	ldr	r0, [r7, #20]
 8016026:	f000 f9f9 	bl	801641c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016030:	461a      	mov	r2, r3
 8016032:	2103      	movs	r1, #3
 8016034:	6978      	ldr	r0, [r7, #20]
 8016036:	f000 f9f1 	bl	801641c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8016040:	461a      	mov	r2, r3
 8016042:	2104      	movs	r1, #4
 8016044:	6978      	ldr	r0, [r7, #20]
 8016046:	f000 f9e9 	bl	801641c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8016050:	461a      	mov	r2, r3
 8016052:	2105      	movs	r1, #5
 8016054:	6978      	ldr	r0, [r7, #20]
 8016056:	f000 f9e1 	bl	801641c <lv_btnm_set_style>
 801605a:	e019      	b.n	8016090 <lv_btnm_create+0x198>
        } else {
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 801605c:	4919      	ldr	r1, [pc, #100]	; (80160c4 <lv_btnm_create+0x1cc>)
 801605e:	6978      	ldr	r0, [r7, #20]
 8016060:	f7f0 fde5 	bl	8006c2e <lv_obj_set_style>
 8016064:	e014      	b.n	8016090 <lv_btnm_create+0x198>
        }
    }
    /*Copy an existing object*/
    else {
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016066:	6838      	ldr	r0, [r7, #0]
 8016068:	f7f1 f911 	bl	800728e <lv_obj_get_ext_attr>
 801606c:	60f8      	str	r0, [r7, #12]
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	f103 000c 	add.w	r0, r3, #12
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	330c      	adds	r3, #12
 8016078:	2214      	movs	r2, #20
 801607a:	4619      	mov	r1, r3
 801607c:	f011 f890 	bl	80271a0 <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 8016080:	6838      	ldr	r0, [r7, #0]
 8016082:	f000 faac 	bl	80165de <lv_btnm_get_map_array>
 8016086:	4603      	mov	r3, r0
 8016088:	4619      	mov	r1, r3
 801608a:	6978      	ldr	r0, [r7, #20]
 801608c:	f000 f81c 	bl	80160c8 <lv_btnm_set_map>
    }

    LV_LOG_INFO("button matrix created");

    return new_btnm;
 8016090:	697b      	ldr	r3, [r7, #20]
}
 8016092:	4618      	mov	r0, r3
 8016094:	3718      	adds	r7, #24
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	20002abc 	.word	0x20002abc
 80160a0:	20006b00 	.word	0x20006b00
 80160a4:	20006b3c 	.word	0x20006b3c
 80160a8:	20006ca4 	.word	0x20006ca4
 80160ac:	20006d1c 	.word	0x20006d1c
 80160b0:	20006bf0 	.word	0x20006bf0
 80160b4:	20002ab8 	.word	0x20002ab8
 80160b8:	08016b49 	.word	0x08016b49
 80160bc:	080166e1 	.word	0x080166e1
 80160c0:	200027b0 	.word	0x200027b0
 80160c4:	20006b78 	.word	0x20006b78

080160c8 <lv_btnm_set_map>:
 * be deallocated during the life of the matrix.
 * @param btnm pointer to a button matrix object
 * @param map pointer a string array. The last string has to be: "". Use "\n" to make a line break.
 */
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
{
 80160c8:	b590      	push	{r4, r7, lr}
 80160ca:	b091      	sub	sp, #68	; 0x44
 80160cc:	af02      	add	r7, sp, #8
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
    if(map == NULL) return;
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	f000 819a 	beq.w	801640e <lv_btnm_set_map+0x346>
     * to hidden/longpress/disabled states after the map was originally set.
     *
     * TODO: separate all map set/allocation from layout code below and skip
     * set/allocation when map hasn't changed.
     */
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f7f1 f8d7 	bl	800728e <lv_obj_get_ext_attr>
 80160e0:	61f8      	str	r0, [r7, #28]
    if(!maps_are_identical(ext->map_p, map)) {
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f001 fab3 	bl	8017654 <maps_are_identical>
 80160ee:	4603      	mov	r3, r0
 80160f0:	f083 0301 	eor.w	r3, r3, #1
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d003      	beq.n	8016102 <lv_btnm_set_map+0x3a>

        /*Analyze the map and create the required number of buttons*/
        allocate_btn_areas_and_controls(btnm, map);
 80160fa:	6839      	ldr	r1, [r7, #0]
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f001 f8e9 	bl	80172d4 <allocate_btn_areas_and_controls>
    }
    ext->map_p = map;
 8016102:	69fb      	ldr	r3, [r7, #28]
 8016104:	683a      	ldr	r2, [r7, #0]
 8016106:	601a      	str	r2, [r3, #0]

    /*Set size and positions of the buttons*/
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8016108:	2100      	movs	r1, #0
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 faa8 	bl	8016660 <lv_btnm_get_style>
 8016110:	61b8      	str	r0, [r7, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f7f0 ffd0 	bl	80070b8 <lv_obj_get_width>
 8016118:	4603      	mov	r3, r0
 801611a:	b29a      	uxth	r2, r3
 801611c:	69bb      	ldr	r3, [r7, #24]
 801611e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8016122:	b29b      	uxth	r3, r3
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	b29a      	uxth	r2, r3
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801612e:	b29b      	uxth	r3, r3
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	b29b      	uxth	r3, r3
 8016134:	82fb      	strh	r3, [r7, #22]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7f0 ffcc 	bl	80070d4 <lv_obj_get_height>
 801613c:	4603      	mov	r3, r0
 801613e:	b29a      	uxth	r2, r3
 8016140:	69bb      	ldr	r3, [r7, #24]
 8016142:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016146:	b29b      	uxth	r3, r3
 8016148:	1ad3      	subs	r3, r2, r3
 801614a:	b29a      	uxth	r2, r3
 801614c:	69bb      	ldr	r3, [r7, #24]
 801614e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016152:	b29b      	uxth	r3, r3
 8016154:	1ad3      	subs	r3, r2, r3
 8016156:	b29b      	uxth	r3, r3
 8016158:	82bb      	strh	r3, [r7, #20]
    lv_coord_t act_y            = style_bg->body.padding.top;
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	8adb      	ldrh	r3, [r3, #22]
 801615e:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*Count the lines to calculate button height*/
    uint8_t line_cnt = 1;
 8016160:	2301      	movs	r3, #1
 8016162:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t li;
    for(li = 0; strlen(map[li]) != 0; li++) {
 8016166:	2300      	movs	r3, #0
 8016168:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 801616c:	e016      	b.n	801619c <lv_btnm_set_map+0xd4>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 801616e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	683a      	ldr	r2, [r7, #0]
 8016176:	4413      	add	r3, r2
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	49a7      	ldr	r1, [pc, #668]	; (8016418 <lv_btnm_set_map+0x350>)
 801617c:	4618      	mov	r0, r3
 801617e:	f7ea f827 	bl	80001d0 <strcmp>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	d104      	bne.n	8016192 <lv_btnm_set_map+0xca>
 8016188:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801618c:	3301      	adds	r3, #1
 801618e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for(li = 0; strlen(map[li]) != 0; li++) {
 8016192:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016196:	3301      	adds	r3, #1
 8016198:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 801619c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80161a0:	009b      	lsls	r3, r3, #2
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	4413      	add	r3, r2
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d1df      	bne.n	801616e <lv_btnm_set_map+0xa6>
    }

    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 80161ae:	8aba      	ldrh	r2, [r7, #20]
 80161b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80161b4:	3b01      	subs	r3, #1
 80161b6:	b299      	uxth	r1, r3
 80161b8:	69bb      	ldr	r3, [r7, #24]
 80161ba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80161be:	b29b      	uxth	r3, r3
 80161c0:	fb11 f303 	smulbb	r3, r1, r3
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	1ad3      	subs	r3, r2, r3
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h            = btn_h / line_cnt;
 80161cc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80161d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80161d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80161d8:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 80161da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80161de:	b29b      	uxth	r3, r3
 80161e0:	3b01      	subs	r3, #1
 80161e2:	b29b      	uxth	r3, r3
 80161e4:	867b      	strh	r3, [r7, #50]	; 0x32
    /* Count the units and the buttons in a line
     * (A button can be 1,2,3... unit wide)*/
    uint16_t unit_cnt;           /*Number of units in a row*/
    uint16_t unit_act_cnt;       /*Number of units currently put in a row*/
    uint16_t btn_cnt;            /*Number of buttons in a row*/
    uint16_t i_tot          = 0; /*Act. index in the str map*/
 80161e6:	2300      	movs	r3, #0
 80161e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 80161ea:	2300      	movs	r3, #0
 80161ec:	853b      	strh	r3, [r7, #40]	; 0x28
    const char ** map_p_tmp = map;
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	627b      	str	r3, [r7, #36]	; 0x24

    /*Count the units and the buttons in a line*/
    while(1) {
        unit_cnt = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	863b      	strh	r3, [r7, #48]	; 0x30
        btn_cnt  = 0;
 80161f6:	2300      	movs	r3, #0
 80161f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        /*Count the buttons in a line*/
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 80161fa:	e012      	b.n	8016222 <lv_btnm_set_map+0x15a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	689a      	ldr	r2, [r3, #8]
 8016200:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8016202:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016204:	440b      	add	r3, r1
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	4618      	mov	r0, r3
 801620e:	f001 f8d7 	bl	80173c0 <get_button_width>
 8016212:	4603      	mov	r3, r0
 8016214:	b29a      	uxth	r2, r3
 8016216:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016218:	4413      	add	r3, r2
 801621a:	863b      	strh	r3, [r7, #48]	; 0x30
            btn_cnt++;
 801621c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801621e:	3301      	adds	r3, #1
 8016220:	85bb      	strh	r3, [r7, #44]	; 0x2c
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8016222:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016228:	4413      	add	r3, r2
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	497a      	ldr	r1, [pc, #488]	; (8016418 <lv_btnm_set_map+0x350>)
 801622e:	4618      	mov	r0, r3
 8016230:	f7e9 ffce 	bl	80001d0 <strcmp>
 8016234:	4603      	mov	r3, r0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d007      	beq.n	801624a <lv_btnm_set_map+0x182>
 801623a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016240:	4413      	add	r3, r2
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d1d8      	bne.n	80161fc <lv_btnm_set_map+0x134>
        }

        /*Make sure the last row is at the bottom of 'btnm'*/
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 801624a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016250:	4413      	add	r3, r2
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	781b      	ldrb	r3, [r3, #0]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d10c      	bne.n	8016274 <lv_btnm_set_map+0x1ac>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 801625a:	8aba      	ldrh	r2, [r7, #20]
 801625c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801625e:	1ad3      	subs	r3, r2, r3
 8016260:	b29a      	uxth	r2, r3
 8016262:	69bb      	ldr	r3, [r7, #24]
 8016264:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016268:	b29b      	uxth	r3, r3
 801626a:	4413      	add	r3, r2
 801626c:	b29b      	uxth	r3, r3
 801626e:	3b01      	subs	r3, #1
 8016270:	b29b      	uxth	r3, r3
 8016272:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        /*Only deal with the non empty lines*/
        if(btn_cnt != 0) {
 8016274:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016276:	2b00      	cmp	r3, #0
 8016278:	f000 80a7 	beq.w	80163ca <lv_btnm_set_map+0x302>
            /*Calculate the width of all units*/
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 801627c:	8afa      	ldrh	r2, [r7, #22]
 801627e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016280:	3b01      	subs	r3, #1
 8016282:	b299      	uxth	r1, r3
 8016284:	69bb      	ldr	r3, [r7, #24]
 8016286:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801628a:	b29b      	uxth	r3, r3
 801628c:	fb11 f303 	smulbb	r3, r1, r3
 8016290:	b29b      	uxth	r3, r3
 8016292:	1ad3      	subs	r3, r2, r3
 8016294:	b29b      	uxth	r3, r3
 8016296:	827b      	strh	r3, [r7, #18]

            /*Set the button size and positions and set the texts*/
            uint16_t i;
            lv_coord_t act_x = style_bg->body.padding.left;
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	8b5b      	ldrh	r3, [r3, #26]
 801629c:	823b      	strh	r3, [r7, #16]
            lv_coord_t act_unit_w;
            unit_act_cnt = 0;
 801629e:	2300      	movs	r3, #0
 80162a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(i = 0; i < btn_cnt; i++) {
 80162a2:	2300      	movs	r3, #0
 80162a4:	847b      	strh	r3, [r7, #34]	; 0x22
 80162a6:	e08b      	b.n	80163c0 <lv_btnm_set_map+0x2f8>
                /* one_unit_w = all_unit_w / unit_cnt
                 * act_unit_w = one_unit_w * button_width
                 * do this two operations but the multiply first to divide a greater number */
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 80162a8:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	689a      	ldr	r2, [r3, #8]
 80162b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	4413      	add	r3, r2
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f001 f881 	bl	80173c0 <get_button_width>
 80162be:	4603      	mov	r3, r0
 80162c0:	fb03 f204 	mul.w	r2, r3, r4
 80162c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80162c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80162ca:	81fb      	strh	r3, [r7, #14]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 80162cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	3b01      	subs	r3, #1
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	81fb      	strh	r3, [r7, #14]

                /*Always recalculate act_x because of rounding errors */
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 80162d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80162da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80162de:	fb02 f203 	mul.w	r2, r2, r3
 80162e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80162e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80162e8:	b29a      	uxth	r2, r3
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80162f4:	fb11 f303 	smulbb	r3, r1, r3
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	4413      	add	r3, r2
 80162fc:	b29a      	uxth	r2, r3
                        style_bg->body.padding.left;
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8016304:	b29b      	uxth	r3, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8016306:	4413      	add	r3, r2
 8016308:	b29b      	uxth	r3, r3
 801630a:	823b      	strh	r3, [r7, #16]

                /* Set the button's area.
                 * If inner padding is zero then use the prev. button x2 as x1 to avoid rounding
                 * errors*/
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d126      	bne.n	8016364 <lv_btnm_set_map+0x29c>
 8016316:	69bb      	ldr	r3, [r7, #24]
 8016318:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801631c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016320:	429a      	cmp	r2, r3
 8016322:	d01f      	beq.n	8016364 <lv_btnm_set_map+0x29c>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8016324:	69fb      	ldr	r3, [r7, #28]
 8016326:	685a      	ldr	r2, [r3, #4]
 8016328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801632a:	00db      	lsls	r3, r3, #3
 801632c:	18d0      	adds	r0, r2, r3
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	685a      	ldr	r2, [r3, #4]
 8016332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016334:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8016338:	3b01      	subs	r3, #1
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	4413      	add	r3, r2
 801633e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016342:	8a3a      	ldrh	r2, [r7, #16]
 8016344:	89fb      	ldrh	r3, [r7, #14]
 8016346:	4413      	add	r3, r2
 8016348:	b29b      	uxth	r3, r3
 801634a:	b21c      	sxth	r4, r3
                                act_y + btn_h);
 801634c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801634e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016350:	4413      	add	r3, r2
 8016352:	b29b      	uxth	r3, r3
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8016354:	b21b      	sxth	r3, r3
 8016356:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	4623      	mov	r3, r4
 801635e:	f7fc fc85 	bl	8012c6c <lv_area_set>
 8016362:	e016      	b.n	8016392 <lv_btnm_set_map+0x2ca>
                } else {
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	685a      	ldr	r2, [r3, #4]
 8016368:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	18d0      	adds	r0, r2, r3
 801636e:	8a3a      	ldrh	r2, [r7, #16]
 8016370:	89fb      	ldrh	r3, [r7, #14]
 8016372:	4413      	add	r3, r2
 8016374:	b29b      	uxth	r3, r3
 8016376:	b21c      	sxth	r4, r3
 8016378:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801637a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801637c:	4413      	add	r3, r2
 801637e:	b29b      	uxth	r3, r3
 8016380:	b21b      	sxth	r3, r3
 8016382:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8016386:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801638a:	9300      	str	r3, [sp, #0]
 801638c:	4623      	mov	r3, r4
 801638e:	f7fc fc6d 	bl	8012c6c <lv_area_set>
                }

                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	689a      	ldr	r2, [r3, #8]
 8016396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016398:	005b      	lsls	r3, r3, #1
 801639a:	4413      	add	r3, r2
 801639c:	881b      	ldrh	r3, [r3, #0]
 801639e:	4618      	mov	r0, r3
 80163a0:	f001 f80e 	bl	80173c0 <get_button_width>
 80163a4:	4603      	mov	r3, r0
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80163aa:	4413      	add	r3, r2
 80163ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

                i_tot++;
 80163ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163b0:	3301      	adds	r3, #1
 80163b2:	857b      	strh	r3, [r7, #42]	; 0x2a
                btn_i++;
 80163b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80163b6:	3301      	adds	r3, #1
 80163b8:	853b      	strh	r3, [r7, #40]	; 0x28
            for(i = 0; i < btn_cnt; i++) {
 80163ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163bc:	3301      	adds	r3, #1
 80163be:	847b      	strh	r3, [r7, #34]	; 0x22
 80163c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80163c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163c4:	429a      	cmp	r2, r3
 80163c6:	f4ff af6f 	bcc.w	80162a8 <lv_btnm_set_map+0x1e0>
            }
        }
        act_y += btn_h + style_bg->body.padding.inner;
 80163ca:	69bb      	ldr	r3, [r7, #24]
 80163cc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80163d0:	b29a      	uxth	r2, r3
 80163d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80163d4:	4413      	add	r3, r2
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80163da:	4413      	add	r3, r2
 80163dc:	b29b      	uxth	r3, r3
 80163de:	86fb      	strh	r3, [r7, #54]	; 0x36

        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80163e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163e6:	4413      	add	r3, r2
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d009      	beq.n	8016404 <lv_btnm_set_map+0x33c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 80163f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163f2:	3301      	adds	r3, #1
 80163f4:	009b      	lsls	r3, r3, #2
 80163f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163f8:	4413      	add	r3, r2
 80163fa:	627b      	str	r3, [r7, #36]	; 0x24
        i_tot++;                                   /*Skip the '\n'*/
 80163fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163fe:	3301      	adds	r3, #1
 8016400:	857b      	strh	r3, [r7, #42]	; 0x2a
        unit_cnt = 0;
 8016402:	e6f6      	b.n	80161f2 <lv_btnm_set_map+0x12a>
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8016404:	bf00      	nop
    }

    lv_obj_invalidate(btnm);
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f7ef fd15 	bl	8005e36 <lv_obj_invalidate>
 801640c:	e000      	b.n	8016410 <lv_btnm_set_map+0x348>
    if(map == NULL) return;
 801640e:	bf00      	nop
}
 8016410:	373c      	adds	r7, #60	; 0x3c
 8016412:	46bd      	mov	sp, r7
 8016414:	bd90      	pop	{r4, r7, pc}
 8016416:	bf00      	nop
 8016418:	08029c90 	.word	0x08029c90

0801641c <lv_btnm_set_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	460b      	mov	r3, r1
 8016426:	607a      	str	r2, [r7, #4]
 8016428:	72fb      	strb	r3, [r7, #11]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801642a:	68f8      	ldr	r0, [r7, #12]
 801642c:	f7f0 ff2f 	bl	800728e <lv_obj_get_ext_attr>
 8016430:	6178      	str	r0, [r7, #20]

    switch(type) {
 8016432:	7afb      	ldrb	r3, [r7, #11]
 8016434:	2b05      	cmp	r3, #5
 8016436:	d837      	bhi.n	80164a8 <lv_btnm_set_style+0x8c>
 8016438:	a201      	add	r2, pc, #4	; (adr r2, 8016440 <lv_btnm_set_style+0x24>)
 801643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801643e:	bf00      	nop
 8016440:	08016459 	.word	0x08016459
 8016444:	08016463 	.word	0x08016463
 8016448:	08016471 	.word	0x08016471
 801644c:	0801647f 	.word	0x0801647f
 8016450:	0801648d 	.word	0x0801648d
 8016454:	0801649b 	.word	0x0801649b
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 8016458:	6879      	ldr	r1, [r7, #4]
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f7f0 fbe7 	bl	8006c2e <lv_obj_set_style>
 8016460:	e022      	b.n	80164a8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_REL:
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8016462:	697b      	ldr	r3, [r7, #20]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	60da      	str	r2, [r3, #12]
            lv_obj_invalidate(btnm);
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f7ef fce4 	bl	8005e36 <lv_obj_invalidate>
            break;
 801646e:	e01b      	b.n	80164a8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_PR:
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	611a      	str	r2, [r3, #16]
            lv_obj_invalidate(btnm);
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f7ef fcdd 	bl	8005e36 <lv_obj_invalidate>
            break;
 801647c:	e014      	b.n	80164a8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_REL:
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	615a      	str	r2, [r3, #20]
            lv_obj_invalidate(btnm);
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f7ef fcd6 	bl	8005e36 <lv_obj_invalidate>
            break;
 801648a:	e00d      	b.n	80164a8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_PR:
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 801648c:	697b      	ldr	r3, [r7, #20]
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	619a      	str	r2, [r3, #24]
            lv_obj_invalidate(btnm);
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f7ef fccf 	bl	8005e36 <lv_obj_invalidate>
            break;
 8016498:	e006      	b.n	80164a8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_INA:
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	61da      	str	r2, [r3, #28]
            lv_obj_invalidate(btnm);
 80164a0:	68f8      	ldr	r0, [r7, #12]
 80164a2:	f7ef fcc8 	bl	8005e36 <lv_obj_invalidate>
            break;
 80164a6:	bf00      	nop
    }
}
 80164a8:	bf00      	nop
 80164aa:	3718      	adds	r7, #24
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bd80      	pop	{r7, pc}

080164b0 <lv_btnm_set_btn_ctrl>:
 * Set the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b084      	sub	sp, #16
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	460b      	mov	r3, r1
 80164ba:	807b      	strh	r3, [r7, #2]
 80164bc:	4613      	mov	r3, r2
 80164be:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7f0 fee4 	bl	800728e <lv_obj_get_ext_attr>
 80164c6:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	8c1b      	ldrh	r3, [r3, #32]
 80164cc:	887a      	ldrh	r2, [r7, #2]
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d214      	bcs.n	80164fc <lv_btnm_set_btn_ctrl+0x4c>

    ext->ctrl_bits[btn_id] |= ctrl;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	689a      	ldr	r2, [r3, #8]
 80164d6:	887b      	ldrh	r3, [r7, #2]
 80164d8:	005b      	lsls	r3, r3, #1
 80164da:	4413      	add	r3, r2
 80164dc:	8819      	ldrh	r1, [r3, #0]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	689a      	ldr	r2, [r3, #8]
 80164e2:	887b      	ldrh	r3, [r7, #2]
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	4413      	add	r3, r2
 80164e8:	883a      	ldrh	r2, [r7, #0]
 80164ea:	430a      	orrs	r2, r1
 80164ec:	b292      	uxth	r2, r2
 80164ee:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 80164f0:	887b      	ldrh	r3, [r7, #2]
 80164f2:	4619      	mov	r1, r3
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f001 f856 	bl	80175a6 <invalidate_button_area>
 80164fa:	e000      	b.n	80164fe <lv_btnm_set_btn_ctrl+0x4e>
    if(btn_id >= ext->btn_cnt) return;
 80164fc:	bf00      	nop
}
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}

08016504 <lv_btnm_clear_btn_ctrl>:
 * Clear the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	460b      	mov	r3, r1
 801650e:	807b      	strh	r3, [r7, #2]
 8016510:	4613      	mov	r3, r2
 8016512:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7f0 feba 	bl	800728e <lv_obj_get_ext_attr>
 801651a:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	8c1b      	ldrh	r3, [r3, #32]
 8016520:	887a      	ldrh	r2, [r7, #2]
 8016522:	429a      	cmp	r2, r3
 8016524:	d219      	bcs.n	801655a <lv_btnm_clear_btn_ctrl+0x56>

    ext->ctrl_bits[btn_id] &= (~ctrl);
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	689a      	ldr	r2, [r3, #8]
 801652a:	887b      	ldrh	r3, [r7, #2]
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	881b      	ldrh	r3, [r3, #0]
 8016532:	b21a      	sxth	r2, r3
 8016534:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016538:	43db      	mvns	r3, r3
 801653a:	b21b      	sxth	r3, r3
 801653c:	4013      	ands	r3, r2
 801653e:	b219      	sxth	r1, r3
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	689a      	ldr	r2, [r3, #8]
 8016544:	887b      	ldrh	r3, [r7, #2]
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	4413      	add	r3, r2
 801654a:	b28a      	uxth	r2, r1
 801654c:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 801654e:	887b      	ldrh	r3, [r7, #2]
 8016550:	4619      	mov	r1, r3
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f001 f827 	bl	80175a6 <invalidate_button_area>
 8016558:	e000      	b.n	801655c <lv_btnm_clear_btn_ctrl+0x58>
    if(btn_id >= ext->btn_cnt) return;
 801655a:	bf00      	nop
}
 801655c:	3710      	adds	r7, #16
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <lv_btnm_set_btn_ctrl_all>:
 * Set the attributes of all buttons of a button matrix
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 */
void lv_btnm_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b084      	sub	sp, #16
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
 801656a:	460b      	mov	r3, r1
 801656c:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7f0 fe8d 	bl	800728e <lv_obj_get_ext_attr>
 8016574:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8016576:	2300      	movs	r3, #0
 8016578:	81fb      	strh	r3, [r7, #14]
 801657a:	e008      	b.n	801658e <lv_btnm_set_btn_ctrl_all+0x2c>
        lv_btnm_set_btn_ctrl(btnm, i, ctrl);
 801657c:	887a      	ldrh	r2, [r7, #2]
 801657e:	89fb      	ldrh	r3, [r7, #14]
 8016580:	4619      	mov	r1, r3
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f7ff ff94 	bl	80164b0 <lv_btnm_set_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8016588:	89fb      	ldrh	r3, [r7, #14]
 801658a:	3301      	adds	r3, #1
 801658c:	81fb      	strh	r3, [r7, #14]
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	8c1b      	ldrh	r3, [r3, #32]
 8016592:	89fa      	ldrh	r2, [r7, #14]
 8016594:	429a      	cmp	r2, r3
 8016596:	d3f1      	bcc.n	801657c <lv_btnm_set_btn_ctrl_all+0x1a>
    }
}
 8016598:	bf00      	nop
 801659a:	3710      	adds	r7, #16
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <lv_btnm_clear_btn_ctrl_all>:
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 * @param en true: set the attributes; false: clear the attributes
 */
void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f7f0 fe6e 	bl	800728e <lv_obj_get_ext_attr>
 80165b2:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 80165b4:	2300      	movs	r3, #0
 80165b6:	81fb      	strh	r3, [r7, #14]
 80165b8:	e008      	b.n	80165cc <lv_btnm_clear_btn_ctrl_all+0x2c>
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 80165ba:	887a      	ldrh	r2, [r7, #2]
 80165bc:	89fb      	ldrh	r3, [r7, #14]
 80165be:	4619      	mov	r1, r3
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f7ff ff9f 	bl	8016504 <lv_btnm_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 80165c6:	89fb      	ldrh	r3, [r7, #14]
 80165c8:	3301      	adds	r3, #1
 80165ca:	81fb      	strh	r3, [r7, #14]
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	8c1b      	ldrh	r3, [r3, #32]
 80165d0:	89fa      	ldrh	r2, [r7, #14]
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d3f1      	bcc.n	80165ba <lv_btnm_clear_btn_ctrl_all+0x1a>
    }
}
 80165d6:	bf00      	nop
 80165d8:	3710      	adds	r7, #16
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}

080165de <lv_btnm_get_map_array>:
 * Get the current map of a button matrix
 * @param btnm pointer to a button matrix object
 * @return the current map
 */
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm)
{
 80165de:	b580      	push	{r7, lr}
 80165e0:	b084      	sub	sp, #16
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f7f0 fe51 	bl	800728e <lv_obj_get_ext_attr>
 80165ec:	60f8      	str	r0, [r7, #12]
    return ext->map_p;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681b      	ldr	r3, [r3, #0]
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	3710      	adds	r7, #16
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}

080165fa <lv_btnm_get_active_btn>:
 * Useful in the the `event_cb` to get the text of the button, check if hidden etc.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm)
{
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b084      	sub	sp, #16
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f0 fe43 	bl	800728e <lv_obj_get_ext_attr>
 8016608:	60f8      	str	r0, [r7, #12]
    return ext->btn_id_act;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 801660e:	4618      	mov	r0, r3
 8016610:	3710      	adds	r7, #16
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}

08016616 <lv_btnm_get_btn_ctrl>:
 * lv_btnm_get_pressed/released)
 * @param ctrl control values to check (ORed value can be used)
 * @return true: long press repeat is disabled; false: long press repeat enabled
 */
bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8016616:	b580      	push	{r7, lr}
 8016618:	b084      	sub	sp, #16
 801661a:	af00      	add	r7, sp, #0
 801661c:	6078      	str	r0, [r7, #4]
 801661e:	460b      	mov	r3, r1
 8016620:	807b      	strh	r3, [r7, #2]
 8016622:	4613      	mov	r3, r2
 8016624:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7f0 fe31 	bl	800728e <lv_obj_get_ext_attr>
 801662c:	60f8      	str	r0, [r7, #12]
    if(btn_id >= ext->btn_cnt) return false;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	8c1b      	ldrh	r3, [r3, #32]
 8016632:	887a      	ldrh	r2, [r7, #2]
 8016634:	429a      	cmp	r2, r3
 8016636:	d301      	bcc.n	801663c <lv_btnm_get_btn_ctrl+0x26>
 8016638:	2300      	movs	r3, #0
 801663a:	e00d      	b.n	8016658 <lv_btnm_get_btn_ctrl+0x42>

    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	689a      	ldr	r2, [r3, #8]
 8016640:	887b      	ldrh	r3, [r7, #2]
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	881a      	ldrh	r2, [r3, #0]
 8016648:	883b      	ldrh	r3, [r7, #0]
 801664a:	4013      	ands	r3, r2
 801664c:	b29b      	uxth	r3, r3
 801664e:	2b00      	cmp	r3, #0
 8016650:	bf14      	ite	ne
 8016652:	2301      	movne	r3, #1
 8016654:	2300      	moveq	r3, #0
 8016656:	b2db      	uxtb	r3, r3
}
 8016658:	4618      	mov	r0, r3
 801665a:	3710      	adds	r7, #16
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}

08016660 <lv_btnm_get_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b084      	sub	sp, #16
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	460b      	mov	r3, r1
 801666a:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801666c:	2300      	movs	r3, #0
 801666e:	60fb      	str	r3, [r7, #12]
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7f0 fe0c 	bl	800728e <lv_obj_get_ext_attr>
 8016676:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8016678:	78fb      	ldrb	r3, [r7, #3]
 801667a:	2b05      	cmp	r3, #5
 801667c:	d827      	bhi.n	80166ce <lv_btnm_get_style+0x6e>
 801667e:	a201      	add	r2, pc, #4	; (adr r2, 8016684 <lv_btnm_get_style+0x24>)
 8016680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016684:	0801669d 	.word	0x0801669d
 8016688:	080166a7 	.word	0x080166a7
 801668c:	080166af 	.word	0x080166af
 8016690:	080166b7 	.word	0x080166b7
 8016694:	080166bf 	.word	0x080166bf
 8016698:	080166c7 	.word	0x080166c7
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7f0 fd3b 	bl	8007118 <lv_obj_get_style>
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	e016      	b.n	80166d4 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	e012      	b.n	80166d4 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	e00e      	b.n	80166d4 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	695b      	ldr	r3, [r3, #20]
 80166ba:	60fb      	str	r3, [r7, #12]
 80166bc:	e00a      	b.n	80166d4 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	699b      	ldr	r3, [r3, #24]
 80166c2:	60fb      	str	r3, [r7, #12]
 80166c4:	e006      	b.n	80166d4 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	69db      	ldr	r3, [r3, #28]
 80166ca:	60fb      	str	r3, [r7, #12]
 80166cc:	e002      	b.n	80166d4 <lv_btnm_get_style+0x74>
        default: style = NULL; break;
 80166ce:	2300      	movs	r3, #0
 80166d0:	60fb      	str	r3, [r7, #12]
 80166d2:	bf00      	nop
    }

    return style;
 80166d4:	68fb      	ldr	r3, [r7, #12]
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3710      	adds	r7, #16
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop

080166e0 <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 80166e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166e2:	b0a7      	sub	sp, #156	; 0x9c
 80166e4:	af06      	add	r7, sp, #24
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	60b9      	str	r1, [r7, #8]
 80166ea:	4613      	mov	r3, r2
 80166ec:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80166ee:	79fb      	ldrb	r3, [r7, #7]
 80166f0:	2b02      	cmp	r3, #2
 80166f2:	d107      	bne.n	8016704 <lv_btnm_design+0x24>
        return ancestor_design_f(btnm, mask, mode);
 80166f4:	4ba5      	ldr	r3, [pc, #660]	; (801698c <lv_btnm_design+0x2ac>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	79fa      	ldrb	r2, [r7, #7]
 80166fa:	68b9      	ldr	r1, [r7, #8]
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	4798      	blx	r3
 8016700:	4603      	mov	r3, r0
 8016702:	e21b      	b.n	8016b3c <lv_btnm_design+0x45c>
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016704:	79fb      	ldrb	r3, [r7, #7]
 8016706:	2b00      	cmp	r3, #0
 8016708:	f040 8217 	bne.w	8016b3a <lv_btnm_design+0x45a>

        ancestor_design_f(btnm, mask, mode);
 801670c:	4b9f      	ldr	r3, [pc, #636]	; (801698c <lv_btnm_design+0x2ac>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	79fa      	ldrb	r2, [r7, #7]
 8016712:	68b9      	ldr	r1, [r7, #8]
 8016714:	68f8      	ldr	r0, [r7, #12]
 8016716:	4798      	blx	r3

        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f7f0 fdb8 	bl	800728e <lv_obj_get_ext_attr>
 801671e:	6738      	str	r0, [r7, #112]	; 0x70
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f7f0 fcf9 	bl	8007118 <lv_obj_get_style>
 8016726:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * btn_style;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8016728:	68f8      	ldr	r0, [r7, #12]
 801672a:	f7f0 fd62 	bl	80071f2 <lv_obj_get_opa_scale>
 801672e:	4603      	mov	r3, r0
 8016730:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);
 8016734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016738:	4619      	mov	r1, r3
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7f0 fc7b 	bl	8007036 <lv_obj_get_coords>

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
 8016740:	2300      	movs	r3, #0
 8016742:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        uint16_t txt_i = 0;
 8016746:	2300      	movs	r3, #0
 8016748:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        lv_style_t style_tmp;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 801674c:	2300      	movs	r3, #0
 801674e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 8016752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016754:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016758:	f003 0301 	and.w	r3, r3, #1
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b00      	cmp	r3, #0
 8016760:	d002      	beq.n	8016768 <lv_btnm_design+0x88>
 8016762:	2301      	movs	r3, #1
 8016764:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8016768:	2300      	movs	r3, #0
 801676a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 801676e:	e1dd      	b.n	8016b2c <lv_btnm_design+0x44c>
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
 8016770:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016774:	3301      	adds	r3, #1
 8016776:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 801677a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801677c:	681a      	ldr	r2, [r3, #0]
 801677e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016782:	009b      	lsls	r3, r3, #2
 8016784:	4413      	add	r3, r2
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4981      	ldr	r1, [pc, #516]	; (8016990 <lv_btnm_design+0x2b0>)
 801678a:	4618      	mov	r0, r3
 801678c:	f7e9 fd20 	bl	80001d0 <strcmp>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	d0ec      	beq.n	8016770 <lv_btnm_design+0x90>
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8016796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016798:	689a      	ldr	r2, [r3, #8]
 801679a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801679e:	005b      	lsls	r3, r3, #1
 80167a0:	4413      	add	r3, r2
 80167a2:	881b      	ldrh	r3, [r3, #0]
 80167a4:	4618      	mov	r0, r3
 80167a6:	f000 fe21 	bl	80173ec <button_is_hidden>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f040 81b2 	bne.w	8016b16 <lv_btnm_design+0x436>

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 80167b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167b4:	685a      	ldr	r2, [r3, #4]
 80167b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80167ba:	00db      	lsls	r3, r3, #3
 80167bc:	441a      	add	r2, r3
 80167be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80167c2:	4611      	mov	r1, r2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ff fb5b 	bl	8015e80 <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
 80167ca:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	4413      	add	r3, r2
 80167d8:	b29b      	uxth	r3, r3
 80167da:	b21b      	sxth	r3, r3
 80167dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += area_btnm.y1;
 80167e0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80167e4:	b29a      	uxth	r2, r3
 80167e6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	4413      	add	r3, r2
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	b21b      	sxth	r3, r3
 80167f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 += area_btnm.x1;
 80167f6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8016800:	b29b      	uxth	r3, r3
 8016802:	4413      	add	r3, r2
 8016804:	b29b      	uxth	r3, r3
 8016806:	b21b      	sxth	r3, r3
 8016808:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 += area_btnm.y1;
 801680c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8016810:	b29a      	uxth	r2, r3
 8016812:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8016816:	b29b      	uxth	r3, r3
 8016818:	4413      	add	r3, r2
 801681a:	b29b      	uxth	r3, r3
 801681c:	b21b      	sxth	r3, r3
 801681e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            btn_w = lv_area_get_width(&area_tmp);
 8016822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016826:	4618      	mov	r0, r3
 8016828:	f7ff fb38 	bl	8015e9c <lv_area_get_width>
 801682c:	4603      	mov	r3, r0
 801682e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
            btn_h = lv_area_get_height(&area_tmp);
 8016832:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016836:	4618      	mov	r0, r3
 8016838:	f7ff fb47 	bl	8015eca <lv_area_get_height>
 801683c:	4603      	mov	r3, r0
 801683e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            /*Load the style*/
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 8016842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016844:	689a      	ldr	r2, [r3, #8]
 8016846:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	4413      	add	r3, r2
 801684e:	881b      	ldrh	r3, [r3, #0]
 8016850:	4618      	mov	r0, r3
 8016852:	f000 fe2f 	bl	80174b4 <button_get_tgl_state>
 8016856:	4603      	mov	r3, r0
 8016858:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 801685c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801685e:	689a      	ldr	r2, [r3, #8]
 8016860:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	4413      	add	r3, r2
 8016868:	881b      	ldrh	r3, [r3, #0]
 801686a:	4618      	mov	r0, r3
 801686c:	f000 fde6 	bl	801743c <button_is_inactive>
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	d005      	beq.n	8016882 <lv_btnm_design+0x1a2>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8016876:	2105      	movs	r1, #5
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f7ff fef1 	bl	8016660 <lv_btnm_get_style>
 801687e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8016880:	e04a      	b.n	8016918 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 8016882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016884:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016886:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801688a:	429a      	cmp	r2, r3
 801688c:	d00c      	beq.n	80168a8 <lv_btnm_design+0x1c8>
 801688e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016892:	f083 0301 	eor.w	r3, r3, #1
 8016896:	b2db      	uxtb	r3, r3
 8016898:	2b00      	cmp	r3, #0
 801689a:	d005      	beq.n	80168a8 <lv_btnm_design+0x1c8>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 801689c:	2101      	movs	r1, #1
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f7ff fede 	bl	8016660 <lv_btnm_get_style>
 80168a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80168a6:	e037      	b.n	8016918 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 80168a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168ac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d10c      	bne.n	80168ce <lv_btnm_design+0x1ee>
 80168b4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168b8:	f083 0301 	eor.w	r3, r3, #1
 80168bc:	b2db      	uxtb	r3, r3
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d005      	beq.n	80168ce <lv_btnm_design+0x1ee>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 80168c2:	2102      	movs	r1, #2
 80168c4:	68f8      	ldr	r0, [r7, #12]
 80168c6:	f7ff fecb 	bl	8016660 <lv_btnm_get_style>
 80168ca:	67f8      	str	r0, [r7, #124]	; 0x7c
 80168cc:	e024      	b.n	8016918 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == true)
 80168ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168d2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d009      	beq.n	80168ee <lv_btnm_design+0x20e>
 80168da:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d005      	beq.n	80168ee <lv_btnm_design+0x20e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 80168e2:	2103      	movs	r1, #3
 80168e4:	68f8      	ldr	r0, [r7, #12]
 80168e6:	f7ff febb 	bl	8016660 <lv_btnm_get_style>
 80168ea:	67f8      	str	r0, [r7, #124]	; 0x7c
 80168ec:	e014      	b.n	8016918 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == true)
 80168ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168f2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d109      	bne.n	801690e <lv_btnm_design+0x22e>
 80168fa:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d005      	beq.n	801690e <lv_btnm_design+0x22e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 8016902:	2104      	movs	r1, #4
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f7ff feab 	bl	8016660 <lv_btnm_get_style>
 801690a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801690c:	e004      	b.n	8016918 <lv_btnm_design+0x238>
            else
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL); /*Not possible option, just to be sure*/
 801690e:	2101      	movs	r1, #1
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff fea5 	bl	8016660 <lv_btnm_get_style>
 8016916:	67f8      	str	r0, [r7, #124]	; 0x7c

            lv_style_copy(&style_tmp, btn_style);
 8016918:	f107 0310 	add.w	r3, r7, #16
 801691c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801691e:	4618      	mov	r0, r3
 8016920:	f7f1 ff24 	bl	800876c <lv_style_copy>

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 8016924:	7fbb      	ldrb	r3, [r7, #30]
 8016926:	f003 0310 	and.w	r3, r3, #16
 801692a:	2b00      	cmp	r3, #0
 801692c:	d067      	beq.n	80169fe <lv_btnm_design+0x31e>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 801692e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016932:	461a      	mov	r2, r3
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801693a:	4619      	mov	r1, r3
 801693c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801693e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016942:	440b      	add	r3, r1
 8016944:	429a      	cmp	r2, r3
 8016946:	d104      	bne.n	8016952 <lv_btnm_design+0x272>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8016948:	7fbb      	ldrb	r3, [r7, #30]
 801694a:	f023 0302 	bic.w	r3, r3, #2
 801694e:	b2db      	uxtb	r3, r3
 8016950:	77bb      	strb	r3, [r7, #30]
                }
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 8016952:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8016956:	461a      	mov	r2, r3
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801695e:	4619      	mov	r1, r3
 8016960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016962:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016966:	1acb      	subs	r3, r1, r3
 8016968:	429a      	cmp	r2, r3
 801696a:	d104      	bne.n	8016976 <lv_btnm_design+0x296>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 801696c:	7fbb      	ldrb	r3, [r7, #30]
 801696e:	f023 0301 	bic.w	r3, r3, #1
 8016972:	b2db      	uxtb	r3, r3
 8016974:	77bb      	strb	r3, [r7, #30]
                }

                if(txt_i == 0) {
 8016976:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801697a:	2b00      	cmp	r3, #0
 801697c:	d10a      	bne.n	8016994 <lv_btnm_design+0x2b4>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 801697e:	7fbb      	ldrb	r3, [r7, #30]
 8016980:	f023 0304 	bic.w	r3, r3, #4
 8016984:	b2db      	uxtb	r3, r3
 8016986:	77bb      	strb	r3, [r7, #30]
 8016988:	e01a      	b.n	80169c0 <lv_btnm_design+0x2e0>
 801698a:	bf00      	nop
 801698c:	20002ab8 	.word	0x20002ab8
 8016990:	08029c90 	.word	0x08029c90
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 8016994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801699c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80169a0:	3b01      	subs	r3, #1
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	4413      	add	r3, r2
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	4966      	ldr	r1, [pc, #408]	; (8016b44 <lv_btnm_design+0x464>)
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7e9 fc10 	bl	80001d0 <strcmp>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d104      	bne.n	80169c0 <lv_btnm_design+0x2e0>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 80169b6:	7fbb      	ldrb	r3, [r7, #30]
 80169b8:	f023 0304 	bic.w	r3, r3, #4
 80169bc:	b2db      	uxtb	r3, r3
 80169be:	77bb      	strb	r3, [r7, #30]
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 80169c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169c2:	681a      	ldr	r2, [r3, #0]
 80169c4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80169c8:	3301      	adds	r3, #1
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	4413      	add	r3, r2
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d00e      	beq.n	80169f4 <lv_btnm_design+0x314>
 80169d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80169de:	3301      	adds	r3, #1
 80169e0:	009b      	lsls	r3, r3, #2
 80169e2:	4413      	add	r3, r2
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	4957      	ldr	r1, [pc, #348]	; (8016b44 <lv_btnm_design+0x464>)
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7e9 fbf1 	bl	80001d0 <strcmp>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d104      	bne.n	80169fe <lv_btnm_design+0x31e>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 80169f4:	7fbb      	ldrb	r3, [r7, #30]
 80169f6:	f023 0308 	bic.w	r3, r3, #8
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	77bb      	strb	r3, [r7, #30]
                }
            }
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 80169fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8016a02:	f107 0210 	add.w	r2, r7, #16
 8016a06:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8016a0a:	68b9      	ldr	r1, [r7, #8]
 8016a0c:	f7f6 f8f3 	bl	800cbf6 <lv_draw_rect>

            /*Calculate the size of the text*/
            if(btn_style->glass) btn_style = bg_style;
 8016a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	f003 0301 	and.w	r3, r3, #1
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <lv_btnm_design+0x342>
 8016a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a20:	67fb      	str	r3, [r7, #124]	; 0x7c
            const lv_font_t * font = btn_style->text.font;
 8016a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a26:	663b      	str	r3, [r7, #96]	; 0x60
            lv_point_t txt_size;
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 8016a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a2a:	681a      	ldr	r2, [r3, #0]
 8016a2c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016a30:	009b      	lsls	r3, r3, #2
 8016a32:	4413      	add	r3, r2
 8016a34:	681d      	ldr	r5, [r3, #0]
 8016a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a38:	f9b3 6028 	ldrsh.w	r6, [r3, #40]	; 0x28
 8016a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a3e:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8016a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7ff fa28 	bl	8015e9c <lv_area_get_width>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8016a54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8016a58:	9302      	str	r3, [sp, #8]
 8016a5a:	9201      	str	r2, [sp, #4]
 8016a5c:	9400      	str	r4, [sp, #0]
 8016a5e:	4633      	mov	r3, r6
 8016a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a62:	4629      	mov	r1, r5
 8016a64:	f7fd fb00 	bl	8014068 <lv_txt_get_size>
                            btn_style->text.line_space, lv_area_get_width(&area_btnm), txt_flag);

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8016a68:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8016a72:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8016a76:	1a5b      	subs	r3, r3, r1
 8016a78:	0fd9      	lsrs	r1, r3, #31
 8016a7a:	440b      	add	r3, r1
 8016a7c:	105b      	asrs	r3, r3, #1
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	4413      	add	r3, r2
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	b21b      	sxth	r3, r3
 8016a86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8016a8a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016a94:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8016a98:	1a5b      	subs	r3, r3, r1
 8016a9a:	0fd9      	lsrs	r1, r3, #31
 8016a9c:	440b      	add	r3, r1
 8016a9e:	105b      	asrs	r3, r3, #1
 8016aa0:	b29b      	uxth	r3, r3
 8016aa2:	4413      	add	r3, r2
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	b21b      	sxth	r3, r3
 8016aa8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8016aac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8016ab0:	b29a      	uxth	r2, r3
 8016ab2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	4413      	add	r3, r2
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	b21b      	sxth	r3, r3
 8016abe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8016ac2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016ac6:	b29a      	uxth	r2, r3
 8016ac8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016acc:	b29b      	uxth	r3, r3
 8016ace:	4413      	add	r3, r2
 8016ad0:	b29b      	uxth	r3, r3
 8016ad2:	b21b      	sxth	r3, r3
 8016ad4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8016ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ada:	681a      	ldr	r2, [r3, #0]
 8016adc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016ae0:	009b      	lsls	r3, r3, #2
 8016ae2:	4413      	add	r3, r2
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8016aea:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8016aee:	2200      	movs	r2, #0
 8016af0:	9205      	str	r2, [sp, #20]
 8016af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016af6:	9204      	str	r2, [sp, #16]
 8016af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016afc:	9203      	str	r2, [sp, #12]
 8016afe:	2200      	movs	r2, #0
 8016b00:	9202      	str	r2, [sp, #8]
 8016b02:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8016b06:	9201      	str	r2, [sp, #4]
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	460b      	mov	r3, r1
 8016b0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b0e:	68b9      	ldr	r1, [r7, #8]
 8016b10:	f7f3 fdd8 	bl	800a6c4 <lv_draw_label>
 8016b14:	e000      	b.n	8016b18 <lv_btnm_design+0x438>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8016b16:	bf00      	nop
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8016b18:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8016b22:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016b26:	3301      	adds	r3, #1
 8016b28:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b2e:	8c1b      	ldrh	r3, [r3, #32]
 8016b30:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016b34:	429a      	cmp	r2, r3
 8016b36:	f4ff ae20 	bcc.w	801677a <lv_btnm_design+0x9a>
        }
    }
    return true;
 8016b3a:	2301      	movs	r3, #1
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3784      	adds	r7, #132	; 0x84
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b44:	08029c90 	.word	0x08029c90

08016b48 <lv_btnm_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btnm_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)
{
 8016b48:	b590      	push	{r4, r7, lr}
 8016b4a:	b09b      	sub	sp, #108	; 0x6c
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	60f8      	str	r0, [r7, #12]
 8016b50:	460b      	mov	r3, r1
 8016b52:	607a      	str	r2, [r7, #4]
 8016b54:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btnm, sign, param);
 8016b56:	4b93      	ldr	r3, [pc, #588]	; (8016da4 <lv_btnm_signal+0x25c>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	7af9      	ldrb	r1, [r7, #11]
 8016b5c:	687a      	ldr	r2, [r7, #4]
 8016b5e:	68f8      	ldr	r0, [r7, #12]
 8016b60:	4798      	blx	r3
 8016b62:	4603      	mov	r3, r0
 8016b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(res != LV_RES_OK) return res;
 8016b68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016b6c:	2b01      	cmp	r3, #1
 8016b6e:	d002      	beq.n	8016b76 <lv_btnm_signal+0x2e>
 8016b70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016b74:	e3a7      	b.n	80172c6 <lv_btnm_signal+0x77e>

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016b76:	68f8      	ldr	r0, [r7, #12]
 8016b78:	f7f0 fb89 	bl	800728e <lv_obj_get_ext_attr>
 8016b7c:	65f8      	str	r0, [r7, #92]	; 0x5c
    lv_point_t p;
    if(sign == LV_SIGNAL_CLEANUP) {
 8016b7e:	7afb      	ldrb	r3, [r7, #11]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d10a      	bne.n	8016b9a <lv_btnm_signal+0x52>
        lv_mem_free(ext->button_areas);
 8016b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7fc ff61 	bl	8013a50 <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 8016b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b90:	689b      	ldr	r3, [r3, #8]
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7fc ff5c 	bl	8013a50 <lv_mem_free>
 8016b98:	e393      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 8016b9a:	7afb      	ldrb	r3, [r7, #11]
 8016b9c:	2b04      	cmp	r3, #4
 8016b9e:	d002      	beq.n	8016ba6 <lv_btnm_signal+0x5e>
 8016ba0:	7afb      	ldrb	r3, [r7, #11]
 8016ba2:	2b02      	cmp	r3, #2
 8016ba4:	d106      	bne.n	8016bb4 <lv_btnm_signal+0x6c>
        lv_btnm_set_map(btnm, ext->map_p);
 8016ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4619      	mov	r1, r3
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	f7ff fa8b 	bl	80160c8 <lv_btnm_set_map>
 8016bb2:	e386      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8016bb4:	7afb      	ldrb	r3, [r7, #11]
 8016bb6:	2b07      	cmp	r3, #7
 8016bb8:	d176      	bne.n	8016ca8 <lv_btnm_signal+0x160>
        lv_indev_t * indev = lv_indev_get_act();
 8016bba:	f7ee fcb3 	bl	8005524 <lv_indev_get_act>
 8016bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bc2:	f7ee fcbb 	bl	800553c <lv_indev_get_type>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d005      	beq.n	8016bd8 <lv_btnm_signal+0x90>
 8016bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bce:	f7ee fcb5 	bl	800553c <lv_indev_get_type>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b03      	cmp	r3, #3
 8016bd6:	d11f      	bne.n	8016c18 <lv_btnm_signal+0xd0>
            uint16_t btn_pr;
            /*Search the pressed area*/
            lv_indev_get_point(param, &p);
 8016bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7ee fcfc 	bl	80055dc <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 8016be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016be8:	4619      	mov	r1, r3
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	f000 fc76 	bl	80174dc <get_button_from_point>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	857b      	strh	r3, [r7, #42]	; 0x2a

            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 8016bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	68f8      	ldr	r0, [r7, #12]
 8016bfc:	f000 fcd3 	bl	80175a6 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 8016c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c02:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016c04:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = btn_pr;
 8016c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c08:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016c0a:	849a      	strh	r2, [r3, #36]	; 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 8016c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c0e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016c10:	4619      	mov	r1, r3
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f000 fcc7 	bl	80175a6 <invalidate_button_area>
        }
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8016c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c20:	4293      	cmp	r3, r2
 8016c22:	f000 834e 	beq.w	80172c2 <lv_btnm_signal+0x77a>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c28:	689a      	ldr	r2, [r3, #8]
 8016c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c2e:	005b      	lsls	r3, r3, #1
 8016c30:	4413      	add	r3, r2
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	4618      	mov	r0, r3
 8016c36:	f000 fc15 	bl	8017464 <button_is_click_trig>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	f083 0301 	eor.w	r3, r3, #1
 8016c40:	b2db      	uxtb	r3, r3
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	f000 833d 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c4a:	689a      	ldr	r2, [r3, #8]
 8016c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c50:	005b      	lsls	r3, r3, #1
 8016c52:	4413      	add	r3, r2
 8016c54:	881b      	ldrh	r3, [r3, #0]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f000 fbf0 	bl	801743c <button_is_inactive>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	f083 0301 	eor.w	r3, r3, #1
 8016c62:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f000 832c 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c6c:	689a      	ldr	r2, [r3, #8]
 8016c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c72:	005b      	lsls	r3, r3, #1
 8016c74:	4413      	add	r3, r2
 8016c76:	881b      	ldrh	r3, [r3, #0]
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f000 fbb7 	bl	80173ec <button_is_hidden>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	f083 0301 	eor.w	r3, r3, #1
 8016c84:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 831b 	beq.w	80172c2 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c90:	623b      	str	r3, [r7, #32]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016c92:	f107 0320 	add.w	r3, r7, #32
 8016c96:	461a      	mov	r2, r3
 8016c98:	210e      	movs	r1, #14
 8016c9a:	68f8      	ldr	r0, [r7, #12]
 8016c9c:	f7f0 f87d 	bl	8006d9a <lv_event_send>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016ca6:	e30c      	b.n	80172c2 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING) {
 8016ca8:	7afb      	ldrb	r3, [r7, #11]
 8016caa:	2b08      	cmp	r3, #8
 8016cac:	d143      	bne.n	8016d36 <lv_btnm_signal+0x1ee>
        uint16_t btn_pr;
        /*Search the pressed area*/
        lv_indev_get_point(param, &p);
 8016cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016cb2:	4619      	mov	r1, r3
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f7ee fc91 	bl	80055dc <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 8016cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	68f8      	ldr	r0, [r7, #12]
 8016cc2:	f000 fc0b 	bl	80174dc <get_button_from_point>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	867b      	strh	r3, [r7, #50]	; 0x32
        /*Invalidate to old and the new areas*/;
        if(btn_pr != ext->btn_id_pr) {
 8016cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ccc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016cce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d029      	beq.n	8016d28 <lv_btnm_signal+0x1e0>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f7ee fc68 	bl	80055aa <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8016cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cdc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ce2:	4293      	cmp	r3, r2
 8016ce4:	d005      	beq.n	8016cf2 <lv_btnm_signal+0x1aa>
                invalidate_button_area(btnm, ext->btn_id_pr);
 8016ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ce8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016cea:	4619      	mov	r1, r3
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f000 fc5a 	bl	80175a6 <invalidate_button_area>
            }
            if(btn_pr != LV_BTNM_BTN_NONE) {
 8016cf2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d015      	beq.n	8016d28 <lv_btnm_signal+0x1e0>
                uint32_t b = ext->btn_id_act;
 8016cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d00:	61fb      	str	r3, [r7, #28]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016d02:	f107 031c 	add.w	r3, r7, #28
 8016d06:	461a      	mov	r2, r3
 8016d08:	210e      	movs	r1, #14
 8016d0a:	68f8      	ldr	r0, [r7, #12]
 8016d0c:	f7f0 f845 	bl	8006d9a <lv_event_send>
 8016d10:	4603      	mov	r3, r0
 8016d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                if(res == LV_RES_OK) {
 8016d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d1a:	2b01      	cmp	r3, #1
 8016d1c:	d104      	bne.n	8016d28 <lv_btnm_signal+0x1e0>
                    invalidate_button_area(btnm, btn_pr);
 8016d1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016d20:	4619      	mov	r1, r3
 8016d22:	68f8      	ldr	r0, [r7, #12]
 8016d24:	f000 fc3f 	bl	80175a6 <invalidate_button_area>
                }
            }
        }

        ext->btn_id_pr  = btn_pr;
 8016d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d2a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016d2c:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = btn_pr;
 8016d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d30:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016d32:	849a      	strh	r2, [r3, #36]	; 0x24
 8016d34:	e2c5      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8016d36:	7afb      	ldrb	r3, [r7, #11]
 8016d38:	2b0a      	cmp	r3, #10
 8016d3a:	f040 80a7 	bne.w	8016e8c <lv_btnm_signal+0x344>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8016d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d40:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d46:	4293      	cmp	r3, r2
 8016d48:	f000 82bb 	beq.w	80172c2 <lv_btnm_signal+0x77a>
            /*Toggle the button if enabled*/
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 8016d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d4e:	689a      	ldr	r2, [r3, #8]
 8016d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d52:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d54:	005b      	lsls	r3, r3, #1
 8016d56:	4413      	add	r3, r2
 8016d58:	881b      	ldrh	r3, [r3, #0]
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f000 fb96 	bl	801748c <button_is_tgl_enabled>
 8016d60:	4603      	mov	r3, r0
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d03f      	beq.n	8016de6 <lv_btnm_signal+0x29e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 8016d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d68:	689a      	ldr	r2, [r3, #8]
 8016d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d6c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	4413      	add	r3, r2
 8016d72:	881b      	ldrh	r3, [r3, #0]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f000 fb9d 	bl	80174b4 <button_get_tgl_state>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d013      	beq.n	8016da8 <lv_btnm_signal+0x260>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 8016d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d82:	689a      	ldr	r2, [r3, #8]
 8016d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d86:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d88:	005b      	lsls	r3, r3, #1
 8016d8a:	4413      	add	r3, r2
 8016d8c:	881a      	ldrh	r2, [r3, #0]
 8016d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d90:	6899      	ldr	r1, [r3, #8]
 8016d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d94:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	440b      	add	r3, r1
 8016d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d9e:	b292      	uxth	r2, r2
 8016da0:	801a      	strh	r2, [r3, #0]
 8016da2:	e012      	b.n	8016dca <lv_btnm_signal+0x282>
 8016da4:	20002abc 	.word	0x20002abc
                } else {
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 8016da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016daa:	689a      	ldr	r2, [r3, #8]
 8016dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016dae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	881a      	ldrh	r2, [r3, #0]
 8016db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016db8:	6899      	ldr	r1, [r3, #8]
 8016dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016dbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	440b      	add	r3, r1
 8016dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016dc6:	b292      	uxth	r2, r2
 8016dc8:	801a      	strh	r2, [r3, #0]
                }
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 8016dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016dcc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016dd0:	f003 0302 	and.w	r3, r3, #2
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d005      	beq.n	8016de6 <lv_btnm_signal+0x29e>
 8016dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ddc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016dde:	4619      	mov	r1, r3
 8016de0:	68f8      	ldr	r0, [r7, #12]
 8016de2:	f000 fc92 	bl	801770a <make_one_button_toggled>
            }

            /*Invalidate to old pressed area*/;
            invalidate_button_area(btnm, ext->btn_id_pr);
 8016de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016de8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016dea:	4619      	mov	r1, r3
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f000 fbda 	bl	80175a6 <invalidate_button_area>

#if LV_USE_GROUP
            /*Leave the clicked button when releases if this not the focused object in a group*/
            lv_group_t * g = lv_obj_get_group(btnm);
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	f7f0 fa57 	bl	80072a6 <lv_obj_get_group>
 8016df8:	6378      	str	r0, [r7, #52]	; 0x34
            if(lv_group_get_focused(g) != btnm) {
 8016dfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016dfc:	f7ee fa35 	bl	800526a <lv_group_get_focused>
 8016e00:	4602      	mov	r2, r0
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	4293      	cmp	r3, r2
 8016e06:	d003      	beq.n	8016e10 <lv_btnm_signal+0x2c8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8016e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e0e:	845a      	strh	r2, [r3, #34]	; 0x22
            }
#else
            ext->btn_id_pr = LV_BTNM_BTN_NONE;
#endif

            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8016e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e12:	689a      	ldr	r2, [r3, #8]
 8016e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e18:	005b      	lsls	r3, r3, #1
 8016e1a:	4413      	add	r3, r2
 8016e1c:	881b      	ldrh	r3, [r3, #0]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f000 fb20 	bl	8017464 <button_is_click_trig>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	f000 824b 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e2e:	689a      	ldr	r2, [r3, #8]
 8016e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	881b      	ldrh	r3, [r3, #0]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f000 fafe 	bl	801743c <button_is_inactive>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f083 0301 	eor.w	r3, r3, #1
 8016e46:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f000 823a 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e50:	689a      	ldr	r2, [r3, #8]
 8016e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	4413      	add	r3, r2
 8016e5a:	881b      	ldrh	r3, [r3, #0]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f000 fac5 	bl	80173ec <button_is_hidden>
 8016e62:	4603      	mov	r3, r0
 8016e64:	f083 0301 	eor.w	r3, r3, #1
 8016e68:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f000 8229 	beq.w	80172c2 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e74:	61bb      	str	r3, [r7, #24]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016e76:	f107 0318 	add.w	r3, r7, #24
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	210e      	movs	r1, #14
 8016e7e:	68f8      	ldr	r0, [r7, #12]
 8016e80:	f7ef ff8b 	bl	8006d9a <lv_event_send>
 8016e84:	4603      	mov	r3, r0
 8016e86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016e8a:	e21a      	b.n	80172c2 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8016e8c:	7afb      	ldrb	r3, [r7, #11]
 8016e8e:	2b0c      	cmp	r3, #12
 8016e90:	d147      	bne.n	8016f22 <lv_btnm_signal+0x3da>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8016e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	f000 8211 	beq.w	80172c2 <lv_btnm_signal+0x77a>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ea2:	689a      	ldr	r2, [r3, #8]
 8016ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ea6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	4413      	add	r3, r2
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f000 fab0 	bl	8017414 <button_is_repeat_disabled>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	f083 0301 	eor.w	r3, r3, #1
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	f000 8200 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec4:	689a      	ldr	r2, [r3, #8]
 8016ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016eca:	005b      	lsls	r3, r3, #1
 8016ecc:	4413      	add	r3, r2
 8016ece:	881b      	ldrh	r3, [r3, #0]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f000 fab3 	bl	801743c <button_is_inactive>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	f083 0301 	eor.w	r3, r3, #1
 8016edc:	b2db      	uxtb	r3, r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	f000 81ef 	beq.w	80172c2 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ee6:	689a      	ldr	r2, [r3, #8]
 8016ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016eea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	4413      	add	r3, r2
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f000 fa7a 	bl	80173ec <button_is_hidden>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	f083 0301 	eor.w	r3, r3, #1
 8016efe:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	f000 81de 	beq.w	80172c2 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f0a:	617b      	str	r3, [r7, #20]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016f0c:	f107 0314 	add.w	r3, r7, #20
 8016f10:	461a      	mov	r2, r3
 8016f12:	210e      	movs	r1, #14
 8016f14:	68f8      	ldr	r0, [r7, #12]
 8016f16:	f7ef ff40 	bl	8006d9a <lv_event_send>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016f20:	e1cf      	b.n	80172c2 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8016f22:	7afb      	ldrb	r3, [r7, #11]
 8016f24:	2b09      	cmp	r3, #9
 8016f26:	d002      	beq.n	8016f2e <lv_btnm_signal+0x3e6>
 8016f28:	7afb      	ldrb	r3, [r7, #11]
 8016f2a:	2b10      	cmp	r3, #16
 8016f2c:	d10b      	bne.n	8016f46 <lv_btnm_signal+0x3fe>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 8016f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f34:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = LV_BTNM_BTN_NONE;
 8016f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f3c:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	f7ee ff79 	bl	8005e36 <lv_obj_invalidate>
 8016f44:	e1bd      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8016f46:	7afb      	ldrb	r3, [r7, #11]
 8016f48:	2b0f      	cmp	r3, #15
 8016f4a:	d140      	bne.n	8016fce <lv_btnm_signal+0x486>
#if LV_USE_GROUP
        lv_indev_t * indev         = lv_indev_get_act();
 8016f4c:	f7ee faea 	bl	8005524 <lv_indev_get_act>
 8016f50:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8016f52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f54:	f7ee faf2 	bl	800553c <lv_indev_get_type>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8016f5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016f62:	2b01      	cmp	r3, #1
 8016f64:	d111      	bne.n	8016f8a <lv_btnm_signal+0x442>
            /*Select the clicked button*/
            lv_point_t p1;
            lv_indev_get_point(indev, &p1);
 8016f66:	f107 0310 	add.w	r3, r7, #16
 8016f6a:	4619      	mov	r1, r3
 8016f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f6e:	f7ee fb35 	bl	80055dc <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 8016f72:	f107 0310 	add.w	r3, r7, #16
 8016f76:	4619      	mov	r1, r3
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	f000 faaf 	bl	80174dc <get_button_from_point>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	873b      	strh	r3, [r7, #56]	; 0x38
            ext->btn_id_pr = btn_i;
 8016f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f86:	845a      	strh	r2, [r3, #34]	; 0x22
 8016f88:	e019      	b.n	8016fbe <lv_btnm_signal+0x476>

        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016f8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016f8e:	2b04      	cmp	r3, #4
 8016f90:	d112      	bne.n	8016fb8 <lv_btnm_signal+0x470>
            /*In navigation mode don't select any button but in edit mode select the fist*/
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 8016f92:	68f8      	ldr	r0, [r7, #12]
 8016f94:	f7f0 f987 	bl	80072a6 <lv_obj_get_group>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7ee f97d 	bl	800529a <lv_group_get_editing>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d003      	beq.n	8016fae <lv_btnm_signal+0x466>
                ext->btn_id_pr = 0;
 8016fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fa8:	2200      	movs	r2, #0
 8016faa:	845a      	strh	r2, [r3, #34]	; 0x22
 8016fac:	e007      	b.n	8016fbe <lv_btnm_signal+0x476>
            else
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8016fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fb4:	845a      	strh	r2, [r3, #34]	; 0x22
 8016fb6:	e002      	b.n	8016fbe <lv_btnm_signal+0x476>
        } else {
            ext->btn_id_pr = 0;
 8016fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fba:	2200      	movs	r2, #0
 8016fbc:	845a      	strh	r2, [r3, #34]	; 0x22
        }
#else
        ext->btn_id_pr = 0;
#endif

        ext->btn_id_act = ext->btn_id_pr;
 8016fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fc0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8016fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fc4:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8016fc6:	68f8      	ldr	r0, [r7, #12]
 8016fc8:	f7ee ff35 	bl	8005e36 <lv_obj_invalidate>
 8016fcc:	e179      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8016fce:	7afb      	ldrb	r3, [r7, #11]
 8016fd0:	2b11      	cmp	r3, #17
 8016fd2:	f040 814c 	bne.w	801726e <lv_btnm_signal+0x726>
        char c = *((char *)param);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if(c == LV_KEY_RIGHT) {
 8016fde:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016fe2:	2b13      	cmp	r3, #19
 8016fe4:	d125      	bne.n	8017032 <lv_btnm_signal+0x4ea>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 8016fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fe8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	d103      	bne.n	8016ffa <lv_btnm_signal+0x4b2>
                ext->btn_id_pr = 0;
 8016ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	845a      	strh	r2, [r3, #34]	; 0x22
 8016ff8:	e005      	b.n	8017006 <lv_btnm_signal+0x4be>
            else
                ext->btn_id_pr++;
 8016ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ffc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016ffe:	3301      	adds	r3, #1
 8017000:	b29a      	uxth	r2, r3
 8017002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017004:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 8017006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017008:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801700a:	461a      	mov	r2, r3
 801700c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801700e:	8c1b      	ldrh	r3, [r3, #32]
 8017010:	3b01      	subs	r3, #1
 8017012:	429a      	cmp	r2, r3
 8017014:	db05      	blt.n	8017022 <lv_btnm_signal+0x4da>
 8017016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017018:	8c1b      	ldrh	r3, [r3, #32]
 801701a:	3b01      	subs	r3, #1
 801701c:	b29a      	uxth	r2, r3
 801701e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017020:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8017022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017024:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017028:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801702a:	68f8      	ldr	r0, [r7, #12]
 801702c:	f7ee ff03 	bl	8005e36 <lv_obj_invalidate>
 8017030:	e147      	b.n	80172c2 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_LEFT) {
 8017032:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017036:	2b14      	cmp	r3, #20
 8017038:	d11a      	bne.n	8017070 <lv_btnm_signal+0x528>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 801703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801703c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801703e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017042:	4293      	cmp	r3, r2
 8017044:	d102      	bne.n	801704c <lv_btnm_signal+0x504>
 8017046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017048:	2200      	movs	r2, #0
 801704a:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 801704c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801704e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017050:	2b00      	cmp	r3, #0
 8017052:	d005      	beq.n	8017060 <lv_btnm_signal+0x518>
 8017054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017056:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017058:	3b01      	subs	r3, #1
 801705a:	b29a      	uxth	r2, r3
 801705c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801705e:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8017060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017062:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017066:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f7ee fee4 	bl	8005e36 <lv_obj_invalidate>
 801706e:	e128      	b.n	80172c2 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_DOWN) {
 8017070:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017074:	2b12      	cmp	r3, #18
 8017076:	d17b      	bne.n	8017170 <lv_btnm_signal+0x628>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8017078:	2100      	movs	r1, #0
 801707a:	68f8      	ldr	r0, [r7, #12]
 801707c:	f7ff faf0 	bl	8016660 <lv_btnm_get_style>
 8017080:	6478      	str	r0, [r7, #68]	; 0x44
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8017082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017084:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801708a:	4293      	cmp	r3, r2
 801708c:	d103      	bne.n	8017096 <lv_btnm_signal+0x54e>
                ext->btn_id_pr = 0;
 801708e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017090:	2200      	movs	r2, #0
 8017092:	845a      	strh	r2, [r3, #34]	; 0x22
 8017094:	e064      	b.n	8017160 <lv_btnm_signal+0x618>
            } else {
                uint16_t area_below;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8017096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017098:	685a      	ldr	r2, [r3, #4]
 801709a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801709c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801709e:	00db      	lsls	r3, r3, #3
 80170a0:	4413      	add	r3, r2
 80170a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a6:	b29c      	uxth	r4, r3
 80170a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170aa:	685a      	ldr	r2, [r3, #4]
 80170ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170b0:	00db      	lsls	r3, r3, #3
 80170b2:	4413      	add	r3, r2
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7fe fef1 	bl	8015e9c <lv_area_get_width>
 80170ba:	4603      	mov	r3, r0
 80170bc:	105b      	asrs	r3, r3, #1
 80170be:	b21b      	sxth	r3, r3
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	4423      	add	r3, r4
 80170c4:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 80170c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 80170ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80170d2:	e033      	b.n	801713c <lv_btnm_signal+0x5f4>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 80170d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170d6:	685a      	ldr	r2, [r3, #4]
 80170d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80170dc:	00db      	lsls	r3, r3, #3
 80170de:	4413      	add	r3, r2
 80170e0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80170e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170e6:	6859      	ldr	r1, [r3, #4]
 80170e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	440b      	add	r3, r1
 80170f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	dd1c      	ble.n	8017132 <lv_btnm_signal+0x5ea>
                       pr_center >= ext->button_areas[area_below].x1 &&
 80170f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170fa:	685a      	ldr	r2, [r3, #4]
 80170fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017100:	00db      	lsls	r3, r3, #3
 8017102:	4413      	add	r3, r2
 8017104:	f9b3 3000 	ldrsh.w	r3, [r3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8017108:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801710c:	429a      	cmp	r2, r3
 801710e:	db10      	blt.n	8017132 <lv_btnm_signal+0x5ea>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 8017110:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017116:	6859      	ldr	r1, [r3, #4]
 8017118:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801711c:	00db      	lsls	r3, r3, #3
 801711e:	440b      	add	r3, r1
 8017120:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017124:	4619      	mov	r1, r3
 8017126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017128:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801712c:	440b      	add	r3, r1
                       pr_center >= ext->button_areas[area_below].x1 &&
 801712e:	429a      	cmp	r2, r3
 8017130:	dd0b      	ble.n	801714a <lv_btnm_signal+0x602>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8017132:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017136:	3301      	adds	r3, #1
 8017138:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801713c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801713e:	8c1b      	ldrh	r3, [r3, #32]
 8017140:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8017144:	429a      	cmp	r2, r3
 8017146:	d3c5      	bcc.n	80170d4 <lv_btnm_signal+0x58c>
 8017148:	e000      	b.n	801714c <lv_btnm_signal+0x604>
                        break;
 801714a:	bf00      	nop
                    }
                }

                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 801714c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801714e:	8c1b      	ldrh	r3, [r3, #32]
 8017150:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8017154:	429a      	cmp	r2, r3
 8017156:	d203      	bcs.n	8017160 <lv_btnm_signal+0x618>
 8017158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801715a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801715e:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8017160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017162:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017166:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017168:	68f8      	ldr	r0, [r7, #12]
 801716a:	f7ee fe64 	bl	8005e36 <lv_obj_invalidate>
 801716e:	e0a8      	b.n	80172c2 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_UP) {
 8017170:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017174:	2b11      	cmp	r3, #17
 8017176:	f040 80a4 	bne.w	80172c2 <lv_btnm_signal+0x77a>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 801717a:	2100      	movs	r1, #0
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f7ff fa6f 	bl	8016660 <lv_btnm_get_style>
 8017182:	64f8      	str	r0, [r7, #76]	; 0x4c
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8017184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017186:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801718c:	4293      	cmp	r3, r2
 801718e:	d103      	bne.n	8017198 <lv_btnm_signal+0x650>
                ext->btn_id_pr = 0;
 8017190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017192:	2200      	movs	r2, #0
 8017194:	845a      	strh	r2, [r3, #34]	; 0x22
 8017196:	e062      	b.n	801725e <lv_btnm_signal+0x716>
            } else {
                int16_t area_above;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8017198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801719a:	685a      	ldr	r2, [r3, #4]
 801719c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801719e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	4413      	add	r3, r2
 80171a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171a8:	b29c      	uxth	r4, r3
 80171aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171ac:	685a      	ldr	r2, [r3, #4]
 80171ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171b2:	00db      	lsls	r3, r3, #3
 80171b4:	4413      	add	r3, r2
 80171b6:	4618      	mov	r0, r3
 80171b8:	f7fe fe70 	bl	8015e9c <lv_area_get_width>
 80171bc:	4603      	mov	r3, r0
 80171be:	105b      	asrs	r3, r3, #1
 80171c0:	b21b      	sxth	r3, r3
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	4423      	add	r3, r4
 80171c6:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 80171c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80171cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80171d4:	e035      	b.n	8017242 <lv_btnm_signal+0x6fa>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 80171d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171d8:	685a      	ldr	r2, [r3, #4]
 80171da:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80171de:	00db      	lsls	r3, r3, #3
 80171e0:	4413      	add	r3, r2
 80171e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80171e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171e8:	6859      	ldr	r1, [r3, #4]
 80171ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171ee:	00db      	lsls	r3, r3, #3
 80171f0:	440b      	add	r3, r1
 80171f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171f6:	429a      	cmp	r2, r3
 80171f8:	da1c      	bge.n	8017234 <lv_btnm_signal+0x6ec>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80171fa:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80171fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017200:	6859      	ldr	r1, [r3, #4]
 8017202:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	440b      	add	r3, r1
 801720a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801720e:	4619      	mov	r1, r3
 8017210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017212:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017216:	1acb      	subs	r3, r1, r3
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8017218:	429a      	cmp	r2, r3
 801721a:	db0b      	blt.n	8017234 <lv_btnm_signal+0x6ec>
                       pr_center <= ext->button_areas[area_above].x2) {
 801721c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801721e:	685a      	ldr	r2, [r3, #4]
 8017220:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017224:	00db      	lsls	r3, r3, #3
 8017226:	4413      	add	r3, r2
 8017228:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 801722c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8017230:	429a      	cmp	r2, r3
 8017232:	dd0b      	ble.n	801724c <lv_btnm_signal+0x704>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 8017234:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017238:	b29b      	uxth	r3, r3
 801723a:	3b01      	subs	r3, #1
 801723c:	b29b      	uxth	r3, r3
 801723e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8017242:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017246:	2b00      	cmp	r3, #0
 8017248:	dac5      	bge.n	80171d6 <lv_btnm_signal+0x68e>
 801724a:	e000      	b.n	801724e <lv_btnm_signal+0x706>
                        break;
 801724c:	bf00      	nop
                    }
                }
                if(area_above >= 0) ext->btn_id_pr = area_above;
 801724e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017252:	2b00      	cmp	r3, #0
 8017254:	db03      	blt.n	801725e <lv_btnm_signal+0x716>
 8017256:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 801725a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801725c:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 801725e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017260:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017264:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017266:	68f8      	ldr	r0, [r7, #12]
 8017268:	f7ee fde5 	bl	8005e36 <lv_obj_invalidate>
 801726c:	e029      	b.n	80172c2 <lv_btnm_signal+0x77a>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801726e:	7afb      	ldrb	r3, [r7, #11]
 8017270:	2b12      	cmp	r3, #18
 8017272:	d105      	bne.n	8017280 <lv_btnm_signal+0x738>
        bool * editable = (bool *)param;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	657b      	str	r3, [r7, #84]	; 0x54
        *editable       = true;
 8017278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801727a:	2201      	movs	r2, #1
 801727c:	701a      	strb	r2, [r3, #0]
 801727e:	e020      	b.n	80172c2 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8017280:	7afb      	ldrb	r3, [r7, #11]
 8017282:	2b06      	cmp	r3, #6
 8017284:	d11d      	bne.n	80172c2 <lv_btnm_signal+0x77a>
        lv_obj_type_t * buf = param;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	65bb      	str	r3, [r7, #88]	; 0x58
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801728a:	2300      	movs	r3, #0
 801728c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8017290:	e00b      	b.n	80172aa <lv_btnm_signal+0x762>
            if(buf->type[i] == NULL) break;
 8017292:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8017296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d009      	beq.n	80172b4 <lv_btnm_signal+0x76c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80172a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80172a4:	3301      	adds	r3, #1
 80172a6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80172aa:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80172ae:	2b06      	cmp	r3, #6
 80172b0:	d9ef      	bls.n	8017292 <lv_btnm_signal+0x74a>
 80172b2:	e000      	b.n	80172b6 <lv_btnm_signal+0x76e>
            if(buf->type[i] == NULL) break;
 80172b4:	bf00      	nop
        }
        buf->type[i] = "lv_btnm";
 80172b6:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80172ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172bc:	4904      	ldr	r1, [pc, #16]	; (80172d0 <lv_btnm_signal+0x788>)
 80172be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80172c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	376c      	adds	r7, #108	; 0x6c
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd90      	pop	{r4, r7, pc}
 80172ce:	bf00      	nop
 80172d0:	08029ca8 	.word	0x08029ca8

080172d4 <allocate_btn_areas_and_controls>:
 * Create the required number of buttons and control bytes according to a map
 * @param btnm pointer to button matrix object
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	81fb      	strh	r3, [r7, #14]
    uint16_t i       = 0;
 80172e2:	2300      	movs	r3, #0
 80172e4:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 80172e6:	e011      	b.n	801730c <allocate_btn_areas_and_controls+0x38>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80172e8:	89bb      	ldrh	r3, [r7, #12]
 80172ea:	009b      	lsls	r3, r3, #2
 80172ec:	683a      	ldr	r2, [r7, #0]
 80172ee:	4413      	add	r3, r2
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	4932      	ldr	r1, [pc, #200]	; (80173bc <allocate_btn_areas_and_controls+0xe8>)
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7e8 ff6b 	bl	80001d0 <strcmp>
 80172fa:	4603      	mov	r3, r0
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d002      	beq.n	8017306 <allocate_btn_areas_and_controls+0x32>
            btn_cnt++;
 8017300:	89fb      	ldrh	r3, [r7, #14]
 8017302:	3301      	adds	r3, #1
 8017304:	81fb      	strh	r3, [r7, #14]
        }
        i++;
 8017306:	89bb      	ldrh	r3, [r7, #12]
 8017308:	3301      	adds	r3, #1
 801730a:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 801730c:	89bb      	ldrh	r3, [r7, #12]
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	683a      	ldr	r2, [r7, #0]
 8017312:	4413      	add	r3, r2
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d1e5      	bne.n	80172e8 <allocate_btn_areas_and_controls+0x14>
    }

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f7ef ffb6 	bl	800728e <lv_obj_get_ext_attr>
 8017322:	60b8      	str	r0, [r7, #8]

    if(ext->button_areas != NULL) {
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d007      	beq.n	801733c <allocate_btn_areas_and_controls+0x68>
        lv_mem_free(ext->button_areas);
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	4618      	mov	r0, r3
 8017332:	f7fc fb8d 	bl	8013a50 <lv_mem_free>
        ext->button_areas = NULL;
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	2200      	movs	r2, #0
 801733a:	605a      	str	r2, [r3, #4]
    }
    if(ext->ctrl_bits != NULL) {
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	689b      	ldr	r3, [r3, #8]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d007      	beq.n	8017354 <allocate_btn_areas_and_controls+0x80>
        lv_mem_free(ext->ctrl_bits);
 8017344:	68bb      	ldr	r3, [r7, #8]
 8017346:	689b      	ldr	r3, [r3, #8]
 8017348:	4618      	mov	r0, r3
 801734a:	f7fc fb81 	bl	8013a50 <lv_mem_free>
        ext->ctrl_bits = NULL;
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	2200      	movs	r2, #0
 8017352:	609a      	str	r2, [r3, #8]
    }

    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8017354:	89fb      	ldrh	r3, [r7, #14]
 8017356:	00db      	lsls	r3, r3, #3
 8017358:	4618      	mov	r0, r3
 801735a:	f7fc fb39 	bl	80139d0 <lv_mem_alloc>
 801735e:	4602      	mov	r2, r0
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	605a      	str	r2, [r3, #4]
    lv_mem_assert(ext->button_areas);
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d100      	bne.n	801736e <allocate_btn_areas_and_controls+0x9a>
 801736c:	e7fe      	b.n	801736c <allocate_btn_areas_and_controls+0x98>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 801736e:	89fb      	ldrh	r3, [r7, #14]
 8017370:	005b      	lsls	r3, r3, #1
 8017372:	4618      	mov	r0, r3
 8017374:	f7fc fb2c 	bl	80139d0 <lv_mem_alloc>
 8017378:	4602      	mov	r2, r0
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	609a      	str	r2, [r3, #8]
    lv_mem_assert(ext->ctrl_bits);
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	689b      	ldr	r3, [r3, #8]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d100      	bne.n	8017388 <allocate_btn_areas_and_controls+0xb4>
 8017386:	e7fe      	b.n	8017386 <allocate_btn_areas_and_controls+0xb2>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d003      	beq.n	8017398 <allocate_btn_areas_and_controls+0xc4>
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	689b      	ldr	r3, [r3, #8]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d101      	bne.n	801739c <allocate_btn_areas_and_controls+0xc8>
 8017398:	2300      	movs	r3, #0
 801739a:	81fb      	strh	r3, [r7, #14]

    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	6898      	ldr	r0, [r3, #8]
 80173a0:	89fb      	ldrh	r3, [r7, #14]
 80173a2:	005b      	lsls	r3, r3, #1
 80173a4:	461a      	mov	r2, r3
 80173a6:	2100      	movs	r1, #0
 80173a8:	f00f ff05 	bl	80271b6 <memset>

    ext->btn_cnt = btn_cnt;
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	89fa      	ldrh	r2, [r7, #14]
 80173b0:	841a      	strh	r2, [r3, #32]
}
 80173b2:	bf00      	nop
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	08029c90 	.word	0x08029c90

080173c0 <get_button_width>:
 * Get the width of a button in units (default is 1).
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnm_ctrl_t ctrl_bits)
{
 80173c0:	b480      	push	{r7}
 80173c2:	b085      	sub	sp, #20
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	4603      	mov	r3, r0
 80173c8:	80fb      	strh	r3, [r7, #6]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 80173ca:	88fb      	ldrh	r3, [r7, #6]
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	f003 0307 	and.w	r3, r3, #7
 80173d2:	73fb      	strb	r3, [r7, #15]
    return w != 0 ? w : 1;
 80173d4:	7bfb      	ldrb	r3, [r7, #15]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d001      	beq.n	80173de <get_button_width+0x1e>
 80173da:	7bfb      	ldrb	r3, [r7, #15]
 80173dc:	e000      	b.n	80173e0 <get_button_width+0x20>
 80173de:	2301      	movs	r3, #1
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3714      	adds	r7, #20
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr

080173ec <button_is_hidden>:

static bool button_is_hidden(lv_btnm_ctrl_t ctrl_bits)
{
 80173ec:	b480      	push	{r7}
 80173ee:	b083      	sub	sp, #12
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	4603      	mov	r3, r0
 80173f4:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 80173f6:	88fb      	ldrh	r3, [r7, #6]
 80173f8:	10db      	asrs	r3, r3, #3
 80173fa:	f003 0301 	and.w	r3, r3, #1
 80173fe:	2b00      	cmp	r3, #0
 8017400:	bf14      	ite	ne
 8017402:	2301      	movne	r3, #1
 8017404:	2300      	moveq	r3, #0
 8017406:	b2db      	uxtb	r3, r3
}
 8017408:	4618      	mov	r0, r3
 801740a:	370c      	adds	r7, #12
 801740c:	46bd      	mov	sp, r7
 801740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017412:	4770      	bx	lr

08017414 <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnm_ctrl_t ctrl_bits)
{
 8017414:	b480      	push	{r7}
 8017416:	b083      	sub	sp, #12
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 801741e:	88fb      	ldrh	r3, [r7, #6]
 8017420:	111b      	asrs	r3, r3, #4
 8017422:	f003 0301 	and.w	r3, r3, #1
 8017426:	2b00      	cmp	r3, #0
 8017428:	bf14      	ite	ne
 801742a:	2301      	movne	r3, #1
 801742c:	2300      	moveq	r3, #0
 801742e:	b2db      	uxtb	r3, r3
}
 8017430:	4618      	mov	r0, r3
 8017432:	370c      	adds	r7, #12
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr

0801743c <button_is_inactive>:

static bool button_is_inactive(lv_btnm_ctrl_t ctrl_bits)
{
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_INACTIVE ? true : false;
 8017446:	88fb      	ldrh	r3, [r7, #6]
 8017448:	115b      	asrs	r3, r3, #5
 801744a:	f003 0301 	and.w	r3, r3, #1
 801744e:	2b00      	cmp	r3, #0
 8017450:	bf14      	ite	ne
 8017452:	2301      	movne	r3, #1
 8017454:	2300      	moveq	r3, #0
 8017456:	b2db      	uxtb	r3, r3
}
 8017458:	4618      	mov	r0, r3
 801745a:	370c      	adds	r7, #12
 801745c:	46bd      	mov	sp, r7
 801745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017462:	4770      	bx	lr

08017464 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnm_ctrl_t ctrl_bits)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	4603      	mov	r3, r0
 801746c:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 801746e:	88fb      	ldrh	r3, [r7, #6]
 8017470:	121b      	asrs	r3, r3, #8
 8017472:	f003 0301 	and.w	r3, r3, #1
 8017476:	2b00      	cmp	r3, #0
 8017478:	bf14      	ite	ne
 801747a:	2301      	movne	r3, #1
 801747c:	2300      	moveq	r3, #0
 801747e:	b2db      	uxtb	r3, r3
}
 8017480:	4618      	mov	r0, r3
 8017482:	370c      	adds	r7, #12
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr

0801748c <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnm_ctrl_t ctrl_bits)
{
 801748c:	b480      	push	{r7}
 801748e:	b083      	sub	sp, #12
 8017490:	af00      	add	r7, sp, #0
 8017492:	4603      	mov	r3, r0
 8017494:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
 8017496:	88fb      	ldrh	r3, [r7, #6]
 8017498:	119b      	asrs	r3, r3, #6
 801749a:	f003 0301 	and.w	r3, r3, #1
 801749e:	2b00      	cmp	r3, #0
 80174a0:	bf14      	ite	ne
 80174a2:	2301      	movne	r3, #1
 80174a4:	2300      	moveq	r3, #0
 80174a6:	b2db      	uxtb	r3, r3
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	4603      	mov	r3, r0
 80174bc:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 80174be:	88fb      	ldrh	r3, [r7, #6]
 80174c0:	11db      	asrs	r3, r3, #7
 80174c2:	f003 0301 	and.w	r3, r3, #1
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	bf14      	ite	ne
 80174ca:	2301      	movne	r3, #1
 80174cc:	2300      	moveq	r3, #0
 80174ce:	b2db      	uxtb	r3, r3
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	370c      	adds	r7, #12
 80174d4:	46bd      	mov	sp, r7
 80174d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174da:	4770      	bx	lr

080174dc <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNM_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b088      	sub	sp, #32
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f7ef fed1 	bl	800728e <lv_obj_get_ext_attr>
 80174ec:	61b8      	str	r0, [r7, #24]
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 80174ee:	f107 0310 	add.w	r3, r7, #16
 80174f2:	4619      	mov	r1, r3
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7ef fd9e 	bl	8007036 <lv_obj_get_coords>

    for(i = 0; i < ext->btn_cnt; i++) {
 80174fa:	2300      	movs	r3, #0
 80174fc:	83fb      	strh	r3, [r7, #30]
 80174fe:	e03e      	b.n	801757e <get_button_from_point+0xa2>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8017500:	69bb      	ldr	r3, [r7, #24]
 8017502:	685a      	ldr	r2, [r3, #4]
 8017504:	8bfb      	ldrh	r3, [r7, #30]
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	441a      	add	r2, r3
 801750a:	f107 0308 	add.w	r3, r7, #8
 801750e:	4611      	mov	r1, r2
 8017510:	4618      	mov	r0, r3
 8017512:	f7fe fcb5 	bl	8015e80 <lv_area_copy>
        btn_area.x1 += btnm_cords.x1;
 8017516:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801751a:	b29a      	uxth	r2, r3
 801751c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017520:	b29b      	uxth	r3, r3
 8017522:	4413      	add	r3, r2
 8017524:	b29b      	uxth	r3, r3
 8017526:	b21b      	sxth	r3, r3
 8017528:	813b      	strh	r3, [r7, #8]
        btn_area.y1 += btnm_cords.y1;
 801752a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801752e:	b29a      	uxth	r2, r3
 8017530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017534:	b29b      	uxth	r3, r3
 8017536:	4413      	add	r3, r2
 8017538:	b29b      	uxth	r3, r3
 801753a:	b21b      	sxth	r3, r3
 801753c:	817b      	strh	r3, [r7, #10]
        btn_area.x2 += btnm_cords.x1;
 801753e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017542:	b29a      	uxth	r2, r3
 8017544:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017548:	b29b      	uxth	r3, r3
 801754a:	4413      	add	r3, r2
 801754c:	b29b      	uxth	r3, r3
 801754e:	b21b      	sxth	r3, r3
 8017550:	81bb      	strh	r3, [r7, #12]
        btn_area.y2 += btnm_cords.y1;
 8017552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017556:	b29a      	uxth	r2, r3
 8017558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801755c:	b29b      	uxth	r3, r3
 801755e:	4413      	add	r3, r2
 8017560:	b29b      	uxth	r3, r3
 8017562:	b21b      	sxth	r3, r3
 8017564:	81fb      	strh	r3, [r7, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8017566:	f107 0308 	add.w	r3, r7, #8
 801756a:	6839      	ldr	r1, [r7, #0]
 801756c:	4618      	mov	r0, r3
 801756e:	f7fb fca2 	bl	8012eb6 <lv_area_is_point_on>
 8017572:	4603      	mov	r3, r0
 8017574:	2b00      	cmp	r3, #0
 8017576:	d108      	bne.n	801758a <get_button_from_point+0xae>
    for(i = 0; i < ext->btn_cnt; i++) {
 8017578:	8bfb      	ldrh	r3, [r7, #30]
 801757a:	3301      	adds	r3, #1
 801757c:	83fb      	strh	r3, [r7, #30]
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	8c1b      	ldrh	r3, [r3, #32]
 8017582:	8bfa      	ldrh	r2, [r7, #30]
 8017584:	429a      	cmp	r2, r3
 8017586:	d3bb      	bcc.n	8017500 <get_button_from_point+0x24>
 8017588:	e000      	b.n	801758c <get_button_from_point+0xb0>
            break;
 801758a:	bf00      	nop
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	8c1b      	ldrh	r3, [r3, #32]
 8017590:	8bfa      	ldrh	r2, [r7, #30]
 8017592:	429a      	cmp	r2, r3
 8017594:	d102      	bne.n	801759c <get_button_from_point+0xc0>
 8017596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801759a:	83fb      	strh	r3, [r7, #30]

    return i;
 801759c:	8bfb      	ldrh	r3, [r7, #30]
}
 801759e:	4618      	mov	r0, r3
 80175a0:	3720      	adds	r7, #32
 80175a2:	46bd      	mov	sp, r7
 80175a4:	bd80      	pop	{r7, pc}

080175a6 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
 80175a6:	b580      	push	{r7, lr}
 80175a8:	b088      	sub	sp, #32
 80175aa:	af00      	add	r7, sp, #0
 80175ac:	6078      	str	r0, [r7, #4]
 80175ae:	460b      	mov	r3, r1
 80175b0:	807b      	strh	r3, [r7, #2]
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 80175b2:	887b      	ldrh	r3, [r7, #2]
 80175b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175b8:	4293      	cmp	r3, r2
 80175ba:	d047      	beq.n	801764c <invalidate_button_area+0xa6>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f7ef fe66 	bl	800728e <lv_obj_get_ext_attr>
 80175c2:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	685a      	ldr	r2, [r3, #4]
 80175c8:	887b      	ldrh	r3, [r7, #2]
 80175ca:	00db      	lsls	r3, r3, #3
 80175cc:	441a      	add	r2, r3
 80175ce:	f107 0314 	add.w	r3, r7, #20
 80175d2:	4611      	mov	r1, r2
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7fe fc53 	bl	8015e80 <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
 80175da:	f107 030c 	add.w	r3, r7, #12
 80175de:	4619      	mov	r1, r3
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f7ef fd28 	bl	8007036 <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 80175e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80175ea:	b29a      	uxth	r2, r3
 80175ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80175f0:	b29b      	uxth	r3, r3
 80175f2:	4413      	add	r3, r2
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	b21b      	sxth	r3, r3
 80175f8:	82bb      	strh	r3, [r7, #20]
    btn_area.y1 += btnm_area.y1;
 80175fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80175fe:	b29a      	uxth	r2, r3
 8017600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017604:	b29b      	uxth	r3, r3
 8017606:	4413      	add	r3, r2
 8017608:	b29b      	uxth	r3, r3
 801760a:	b21b      	sxth	r3, r3
 801760c:	82fb      	strh	r3, [r7, #22]
    btn_area.x2 += btnm_area.x1;
 801760e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8017612:	b29a      	uxth	r2, r3
 8017614:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017618:	b29b      	uxth	r3, r3
 801761a:	4413      	add	r3, r2
 801761c:	b29b      	uxth	r3, r3
 801761e:	b21b      	sxth	r3, r3
 8017620:	833b      	strh	r3, [r7, #24]
    btn_area.y2 += btnm_area.y1;
 8017622:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017626:	b29a      	uxth	r2, r3
 8017628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801762c:	b29b      	uxth	r3, r3
 801762e:	4413      	add	r3, r2
 8017630:	b29b      	uxth	r3, r3
 8017632:	b21b      	sxth	r3, r3
 8017634:	837b      	strh	r3, [r7, #26]

    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	f7ef fc9a 	bl	8006f70 <lv_obj_get_disp>
 801763c:	4602      	mov	r2, r0
 801763e:	f107 0314 	add.w	r3, r7, #20
 8017642:	4619      	mov	r1, r3
 8017644:	4610      	mov	r0, r2
 8017646:	f7f0 f87b 	bl	8007740 <lv_inv_area>
 801764a:	e000      	b.n	801764e <invalidate_button_area+0xa8>
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 801764c:	bf00      	nop
}
 801764e:	3720      	adds	r7, #32
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <maps_are_identical>:
 * @param map1 map to compare
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
 801765c:	6039      	str	r1, [r7, #0]
    if(map1 == map2) return true;
 801765e:	687a      	ldr	r2, [r7, #4]
 8017660:	683b      	ldr	r3, [r7, #0]
 8017662:	429a      	cmp	r2, r3
 8017664:	d101      	bne.n	801766a <maps_are_identical+0x16>
 8017666:	2301      	movs	r3, #1
 8017668:	e04b      	b.n	8017702 <maps_are_identical+0xae>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d002      	beq.n	8017676 <maps_are_identical+0x22>
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d107      	bne.n	8017686 <maps_are_identical+0x32>
 8017676:	687a      	ldr	r2, [r7, #4]
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	429a      	cmp	r2, r3
 801767c:	bf0c      	ite	eq
 801767e:	2301      	moveq	r3, #1
 8017680:	2300      	movne	r3, #0
 8017682:	b2db      	uxtb	r3, r3
 8017684:	e03d      	b.n	8017702 <maps_are_identical+0xae>

    uint16_t i = 0;
 8017686:	2300      	movs	r3, #0
 8017688:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 801768a:	e014      	b.n	80176b6 <maps_are_identical+0x62>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 801768c:	89fb      	ldrh	r3, [r7, #14]
 801768e:	009b      	lsls	r3, r3, #2
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	4413      	add	r3, r2
 8017694:	6818      	ldr	r0, [r3, #0]
 8017696:	89fb      	ldrh	r3, [r7, #14]
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	683a      	ldr	r2, [r7, #0]
 801769c:	4413      	add	r3, r2
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	4619      	mov	r1, r3
 80176a2:	f7e8 fd95 	bl	80001d0 <strcmp>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d001      	beq.n	80176b0 <maps_are_identical+0x5c>
 80176ac:	2300      	movs	r3, #0
 80176ae:	e028      	b.n	8017702 <maps_are_identical+0xae>
        i++;
 80176b0:	89fb      	ldrh	r3, [r7, #14]
 80176b2:	3301      	adds	r3, #1
 80176b4:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 80176b6:	89fb      	ldrh	r3, [r7, #14]
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	4413      	add	r3, r2
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d007      	beq.n	80176d6 <maps_are_identical+0x82>
 80176c6:	89fb      	ldrh	r3, [r7, #14]
 80176c8:	009b      	lsls	r3, r3, #2
 80176ca:	683a      	ldr	r2, [r7, #0]
 80176cc:	4413      	add	r3, r2
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d1da      	bne.n	801768c <maps_are_identical+0x38>
    }
    return map1[i][0] == '\0' && map2[i][0] == '\0';
 80176d6:	89fb      	ldrh	r3, [r7, #14]
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	687a      	ldr	r2, [r7, #4]
 80176dc:	4413      	add	r3, r2
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	781b      	ldrb	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d109      	bne.n	80176fa <maps_are_identical+0xa6>
 80176e6:	89fb      	ldrh	r3, [r7, #14]
 80176e8:	009b      	lsls	r3, r3, #2
 80176ea:	683a      	ldr	r2, [r7, #0]
 80176ec:	4413      	add	r3, r2
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d101      	bne.n	80176fa <maps_are_identical+0xa6>
 80176f6:	2301      	movs	r3, #1
 80176f8:	e000      	b.n	80176fc <maps_are_identical+0xa8>
 80176fa:	2300      	movs	r3, #0
 80176fc:	f003 0301 	and.w	r3, r3, #1
 8017700:	b2db      	uxtb	r3, r3
}
 8017702:	4618      	mov	r0, r3
 8017704:	3710      	adds	r7, #16
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}

0801770a <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 801770a:	b580      	push	{r7, lr}
 801770c:	b084      	sub	sp, #16
 801770e:	af00      	add	r7, sp, #0
 8017710:	6078      	str	r0, [r7, #4]
 8017712:	460b      	mov	r3, r1
 8017714:	807b      	strh	r3, [r7, #2]
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8017716:	887b      	ldrh	r3, [r7, #2]
 8017718:	2280      	movs	r2, #128	; 0x80
 801771a:	4619      	mov	r1, r3
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f7fe ff7a 	bl	8016616 <lv_btnm_get_btn_ctrl>
 8017722:	4603      	mov	r3, r0
 8017724:	73fb      	strb	r3, [r7, #15]

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 8017726:	2180      	movs	r1, #128	; 0x80
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f7fe ff39 	bl	80165a0 <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801772e:	7bfb      	ldrb	r3, [r7, #15]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d005      	beq.n	8017740 <make_one_button_toggled+0x36>
 8017734:	887b      	ldrh	r3, [r7, #2]
 8017736:	2280      	movs	r2, #128	; 0x80
 8017738:	4619      	mov	r1, r3
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7fe feb8 	bl	80164b0 <lv_btnm_set_btn_ctrl>
}
 8017740:	bf00      	nop
 8017742:	3710      	adds	r7, #16
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}

08017748 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8017748:	b480      	push	{r7}
 801774a:	b083      	sub	sp, #12
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	7a1b      	ldrb	r3, [r3, #8]
}
 8017754:	4618      	mov	r0, r3
 8017756:	370c      	adds	r7, #12
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <lv_cont_set_fit>:
 * It tell how to change the container's size automatically.
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af02      	add	r7, sp, #8
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	460b      	mov	r3, r1
 801776a:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801776c:	78f8      	ldrb	r0, [r7, #3]
 801776e:	78fa      	ldrb	r2, [r7, #3]
 8017770:	78f9      	ldrb	r1, [r7, #3]
 8017772:	78fb      	ldrb	r3, [r7, #3]
 8017774:	9300      	str	r3, [sp, #0]
 8017776:	4603      	mov	r3, r0
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f000 fbf4 	bl	8017f66 <lv_cont_set_fit4>
}
 801777e:	bf00      	nop
 8017780:	3708      	adds	r7, #8
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}

08017786 <lv_btn_set_layout>:
{
 8017786:	b580      	push	{r7, lr}
 8017788:	b082      	sub	sp, #8
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
 801778e:	460b      	mov	r3, r1
 8017790:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 8017792:	78fb      	ldrb	r3, [r7, #3]
 8017794:	4619      	mov	r1, r3
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f000 fbbe 	bl	8017f18 <lv_cont_set_layout>
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <lv_btn_set_fit>:
 * It tell how to change the button size automatically.
 * @param btn pointer to a button object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_btn_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	460b      	mov	r3, r1
 80177ae:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit(cont, fit);
 80177b0:	78fb      	ldrb	r3, [r7, #3]
 80177b2:	4619      	mov	r1, r3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7ff ffd3 	bl	8017760 <lv_cont_set_fit>
}
 80177ba:	bf00      	nop
 80177bc:	3708      	adds	r7, #8
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b082      	sub	sp, #8
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
 80177ca:	460b      	mov	r3, r1
 80177cc:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ef fca2 	bl	8007118 <lv_obj_get_style>
 80177d4:	4603      	mov	r3, r0
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3708      	adds	r7, #8
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
	...

080177e0 <lv_cb_create>:
 * @param par pointer to an object, it will be the parent of the new check box
 * @param copy pointer to a check box object, if not NULL then the new object will be copied from it
 * @return pointer to the created check box
 */
lv_obj_t * lv_cb_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b086      	sub	sp, #24
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("check box create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_cb = lv_btn_create(par, copy);
 80177ea:	6839      	ldr	r1, [r7, #0]
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f7fe f825 	bl	801583c <lv_btn_create>
 80177f2:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cb);
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d100      	bne.n	80177fc <lv_cb_create+0x1c>
 80177fa:	e7fe      	b.n	80177fa <lv_cb_create+0x1a>
    if(new_cb == NULL) return NULL;
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d101      	bne.n	8017806 <lv_cb_create+0x26>
 8017802:	2300      	movs	r3, #0
 8017804:	e0c8      	b.n	8017998 <lv_cb_create+0x1b8>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cb);
 8017806:	4b66      	ldr	r3, [pc, #408]	; (80179a0 <lv_cb_create+0x1c0>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d105      	bne.n	801781a <lv_cb_create+0x3a>
 801780e:	6978      	ldr	r0, [r7, #20]
 8017810:	f7ef fd25 	bl	800725e <lv_obj_get_signal_cb>
 8017814:	4602      	mov	r2, r0
 8017816:	4b62      	ldr	r3, [pc, #392]	; (80179a0 <lv_cb_create+0x1c0>)
 8017818:	601a      	str	r2, [r3, #0]
    if(ancestor_bg_design == NULL) ancestor_bg_design = lv_obj_get_design_cb(new_cb);
 801781a:	4b62      	ldr	r3, [pc, #392]	; (80179a4 <lv_cb_create+0x1c4>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d105      	bne.n	801782e <lv_cb_create+0x4e>
 8017822:	6978      	ldr	r0, [r7, #20]
 8017824:	f7ef fd27 	bl	8007276 <lv_obj_get_design_cb>
 8017828:	4602      	mov	r2, r0
 801782a:	4b5e      	ldr	r3, [pc, #376]	; (80179a4 <lv_cb_create+0x1c4>)
 801782c:	601a      	str	r2, [r3, #0]

    lv_cb_ext_t * ext = lv_obj_allocate_ext_attr(new_cb, sizeof(lv_cb_ext_t));
 801782e:	2124      	movs	r1, #36	; 0x24
 8017830:	6978      	ldr	r0, [r7, #20]
 8017832:	f7ef fb5f 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 8017836:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8017838:	693b      	ldr	r3, [r7, #16]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d100      	bne.n	8017840 <lv_cb_create+0x60>
 801783e:	e7fe      	b.n	801783e <lv_cb_create+0x5e>
    if(ext == NULL) return NULL;
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d101      	bne.n	801784a <lv_cb_create+0x6a>
 8017846:	2300      	movs	r3, #0
 8017848:	e0a6      	b.n	8017998 <lv_cb_create+0x1b8>

    ext->bullet = NULL;
 801784a:	693b      	ldr	r3, [r7, #16]
 801784c:	2200      	movs	r2, #0
 801784e:	61da      	str	r2, [r3, #28]
    ext->label  = NULL;
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	2200      	movs	r2, #0
 8017854:	621a      	str	r2, [r3, #32]

    lv_obj_set_signal_cb(new_cb, lv_cb_signal);
 8017856:	4954      	ldr	r1, [pc, #336]	; (80179a8 <lv_cb_create+0x1c8>)
 8017858:	6978      	ldr	r0, [r7, #20]
 801785a:	f7ef fb2f 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_cb, lv_cb_design);
 801785e:	4953      	ldr	r1, [pc, #332]	; (80179ac <lv_cb_create+0x1cc>)
 8017860:	6978      	ldr	r0, [r7, #20]
 8017862:	f7ef fb39 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new checkbox object*/
    if(copy == NULL) {
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d175      	bne.n	8017958 <lv_cb_create+0x178>
        ext->bullet = lv_btn_create(new_cb, NULL);
 801786c:	2100      	movs	r1, #0
 801786e:	6978      	ldr	r0, [r7, #20]
 8017870:	f7fd ffe4 	bl	801583c <lv_btn_create>
 8017874:	4602      	mov	r2, r0
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	61da      	str	r2, [r3, #28]
        if(ancestor_bullet_design == NULL) ancestor_bullet_design = lv_obj_get_design_cb(ext->bullet);
 801787a:	4b4d      	ldr	r3, [pc, #308]	; (80179b0 <lv_cb_create+0x1d0>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d107      	bne.n	8017892 <lv_cb_create+0xb2>
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	69db      	ldr	r3, [r3, #28]
 8017886:	4618      	mov	r0, r3
 8017888:	f7ef fcf5 	bl	8007276 <lv_obj_get_design_cb>
 801788c:	4602      	mov	r2, r0
 801788e:	4b48      	ldr	r3, [pc, #288]	; (80179b0 <lv_cb_create+0x1d0>)
 8017890:	601a      	str	r2, [r3, #0]
        lv_obj_set_click(ext->bullet, false);
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	69db      	ldr	r3, [r3, #28]
 8017896:	2100      	movs	r1, #0
 8017898:	4618      	mov	r0, r3
 801789a:	f7ef f9ee 	bl	8006c7a <lv_obj_set_click>

        ext->label = lv_label_create(new_cb, NULL);
 801789e:	2100      	movs	r1, #0
 80178a0:	6978      	ldr	r0, [r7, #20]
 80178a2:	f001 fe37 	bl	8019514 <lv_label_create>
 80178a6:	4602      	mov	r2, r0
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	621a      	str	r2, [r3, #32]

        lv_cb_set_text(new_cb, "Check box");
 80178ac:	4941      	ldr	r1, [pc, #260]	; (80179b4 <lv_cb_create+0x1d4>)
 80178ae:	6978      	ldr	r0, [r7, #20]
 80178b0:	f000 f888 	bl	80179c4 <lv_cb_set_text>
        lv_btn_set_layout(new_cb, LV_LAYOUT_ROW_M);
 80178b4:	2106      	movs	r1, #6
 80178b6:	6978      	ldr	r0, [r7, #20]
 80178b8:	f7ff ff65 	bl	8017786 <lv_btn_set_layout>
        lv_btn_set_fit(new_cb, LV_FIT_TIGHT);
 80178bc:	2101      	movs	r1, #1
 80178be:	6978      	ldr	r0, [r7, #20]
 80178c0:	f7ff ff70 	bl	80177a4 <lv_btn_set_fit>
        lv_btn_set_toggle(new_cb, true);
 80178c4:	2101      	movs	r1, #1
 80178c6:	6978      	ldr	r0, [r7, #20]
 80178c8:	f7fe f888 	bl	80159dc <lv_btn_set_toggle>
        lv_obj_set_protect(new_cb, LV_PROTECT_PRESS_LOST);
 80178cc:	2110      	movs	r1, #16
 80178ce:	6978      	ldr	r0, [r7, #20]
 80178d0:	f7ef fa28 	bl	8006d24 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80178d4:	f007 fb5e 	bl	801ef94 <lv_theme_get_current>
 80178d8:	60b8      	str	r0, [r7, #8]
        if(th) {
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d030      	beq.n	8017942 <lv_cb_create+0x162>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, th->style.cb.bg);
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80178e6:	461a      	mov	r2, r3
 80178e8:	2100      	movs	r1, #0
 80178ea:	6978      	ldr	r0, [r7, #20]
 80178ec:	f000 f87e 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, th->style.cb.box.rel);
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80178f6:	461a      	mov	r2, r3
 80178f8:	2101      	movs	r1, #1
 80178fa:	6978      	ldr	r0, [r7, #20]
 80178fc:	f000 f876 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_PR, th->style.cb.box.pr);
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017906:	461a      	mov	r2, r3
 8017908:	2102      	movs	r1, #2
 801790a:	6978      	ldr	r0, [r7, #20]
 801790c:	f000 f86e 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_REL, th->style.cb.box.tgl_rel);
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017916:	461a      	mov	r2, r3
 8017918:	2103      	movs	r1, #3
 801791a:	6978      	ldr	r0, [r7, #20]
 801791c:	f000 f866 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_PR, th->style.cb.box.tgl_pr);
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017926:	461a      	mov	r2, r3
 8017928:	2104      	movs	r1, #4
 801792a:	6978      	ldr	r0, [r7, #20]
 801792c:	f000 f85e 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_INA, th->style.cb.box.ina);
 8017930:	68bb      	ldr	r3, [r7, #8]
 8017932:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017936:	461a      	mov	r2, r3
 8017938:	2105      	movs	r1, #5
 801793a:	6978      	ldr	r0, [r7, #20]
 801793c:	f000 f856 	bl	80179ec <lv_cb_set_style>
 8017940:	e023      	b.n	801798a <lv_cb_create+0x1aa>
        } else {
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, &lv_style_transp);
 8017942:	4a1d      	ldr	r2, [pc, #116]	; (80179b8 <lv_cb_create+0x1d8>)
 8017944:	2100      	movs	r1, #0
 8017946:	6978      	ldr	r0, [r7, #20]
 8017948:	f000 f850 	bl	80179ec <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, &lv_style_pretty);
 801794c:	4a1b      	ldr	r2, [pc, #108]	; (80179bc <lv_cb_create+0x1dc>)
 801794e:	2101      	movs	r1, #1
 8017950:	6978      	ldr	r0, [r7, #20]
 8017952:	f000 f84b 	bl	80179ec <lv_cb_set_style>
 8017956:	e018      	b.n	801798a <lv_cb_create+0x1aa>
        }
    } else {
        lv_cb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017958:	6838      	ldr	r0, [r7, #0]
 801795a:	f7ef fc98 	bl	800728e <lv_obj_get_ext_attr>
 801795e:	60f8      	str	r0, [r7, #12]
        ext->bullet            = lv_btn_create(new_cb, copy_ext->bullet);
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	69db      	ldr	r3, [r3, #28]
 8017964:	4619      	mov	r1, r3
 8017966:	6978      	ldr	r0, [r7, #20]
 8017968:	f7fd ff68 	bl	801583c <lv_btn_create>
 801796c:	4602      	mov	r2, r0
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	61da      	str	r2, [r3, #28]
        ext->label             = lv_label_create(new_cb, copy_ext->label);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6a1b      	ldr	r3, [r3, #32]
 8017976:	4619      	mov	r1, r3
 8017978:	6978      	ldr	r0, [r7, #20]
 801797a:	f001 fdcb 	bl	8019514 <lv_label_create>
 801797e:	4602      	mov	r2, r0
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	621a      	str	r2, [r3, #32]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cb);
 8017984:	6978      	ldr	r0, [r7, #20]
 8017986:	f7ef f964 	bl	8006c52 <lv_obj_refresh_style>
    }

    lv_obj_set_design_cb(ext->bullet, lv_bullet_design);
 801798a:	693b      	ldr	r3, [r7, #16]
 801798c:	69db      	ldr	r3, [r3, #28]
 801798e:	490c      	ldr	r1, [pc, #48]	; (80179c0 <lv_cb_create+0x1e0>)
 8017990:	4618      	mov	r0, r3
 8017992:	f7ef faa1 	bl	8006ed8 <lv_obj_set_design_cb>

    LV_LOG_INFO("check box created");

    return new_cb;
 8017996:	697b      	ldr	r3, [r7, #20]
}
 8017998:	4618      	mov	r0, r3
 801799a:	3718      	adds	r7, #24
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	20002ac8 	.word	0x20002ac8
 80179a4:	20002ac0 	.word	0x20002ac0
 80179a8:	08017be9 	.word	0x08017be9
 80179ac:	08017ab5 	.word	0x08017ab5
 80179b0:	20002ac4 	.word	0x20002ac4
 80179b4:	08029cb0 	.word	0x08029cb0
 80179b8:	20006ac4 	.word	0x20006ac4
 80179bc:	20006b78 	.word	0x20006b78
 80179c0:	08017b45 	.word	0x08017b45

080179c4 <lv_cb_set_text>:
 * after this function returns.
 * @param cb pointer to a check box
 * @param txt the text of the check box. NULL to refresh with the current text.
 */
void lv_cb_set_text(lv_obj_t * cb, const char * txt)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b084      	sub	sp, #16
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	6039      	str	r1, [r7, #0]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f7ef fc5d 	bl	800728e <lv_obj_get_ext_attr>
 80179d4:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->label, txt);
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6a1b      	ldr	r3, [r3, #32]
 80179da:	6839      	ldr	r1, [r7, #0]
 80179dc:	4618      	mov	r0, r3
 80179de:	f001 fecb 	bl	8019778 <lv_label_set_text>
}
 80179e2:	bf00      	nop
 80179e4:	3710      	adds	r7, #16
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
	...

080179ec <lv_cb_set_style>:
 * @param cb pointer to check box object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_cb_set_style(lv_obj_t * cb, lv_cb_style_t type, const lv_style_t * style)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b086      	sub	sp, #24
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	60f8      	str	r0, [r7, #12]
 80179f4:	460b      	mov	r3, r1
 80179f6:	607a      	str	r2, [r7, #4]
 80179f8:	72fb      	strb	r3, [r7, #11]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 80179fa:	68f8      	ldr	r0, [r7, #12]
 80179fc:	f7ef fc47 	bl	800728e <lv_obj_get_ext_attr>
 8017a00:	6178      	str	r0, [r7, #20]

    switch(type) {
 8017a02:	7afb      	ldrb	r3, [r7, #11]
 8017a04:	2b05      	cmp	r3, #5
 8017a06:	d851      	bhi.n	8017aac <lv_cb_set_style+0xc0>
 8017a08:	a201      	add	r2, pc, #4	; (adr r2, 8017a10 <lv_cb_set_style+0x24>)
 8017a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a0e:	bf00      	nop
 8017a10:	08017a29 	.word	0x08017a29
 8017a14:	08017a5d 	.word	0x08017a5d
 8017a18:	08017a6d 	.word	0x08017a6d
 8017a1c:	08017a7d 	.word	0x08017a7d
 8017a20:	08017a8d 	.word	0x08017a8d
 8017a24:	08017a9d 	.word	0x08017a9d
        case LV_CB_STYLE_BG:
            lv_btn_set_style(cb, LV_BTN_STYLE_REL, style);
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	68f8      	ldr	r0, [r7, #12]
 8017a2e:	f7fe f813 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_PR, style);
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	2101      	movs	r1, #1
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7fe f80e 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_REL, style);
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	2102      	movs	r1, #2
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f7fe f809 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_PR, style);
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	2103      	movs	r1, #3
 8017a4a:	68f8      	ldr	r0, [r7, #12]
 8017a4c:	f7fe f804 	bl	8015a58 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_INA, style);
 8017a50:	687a      	ldr	r2, [r7, #4]
 8017a52:	2104      	movs	r1, #4
 8017a54:	68f8      	ldr	r0, [r7, #12]
 8017a56:	f7fd ffff 	bl	8015a58 <lv_btn_set_style>
            break;
 8017a5a:	e027      	b.n	8017aac <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_REL, style); break;
 8017a5c:	697b      	ldr	r3, [r7, #20]
 8017a5e:	69db      	ldr	r3, [r3, #28]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	2100      	movs	r1, #0
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7fd fff7 	bl	8015a58 <lv_btn_set_style>
 8017a6a:	e01f      	b.n	8017aac <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_PR, style); break;
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	69db      	ldr	r3, [r3, #28]
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	2101      	movs	r1, #1
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7fd ffef 	bl	8015a58 <lv_btn_set_style>
 8017a7a:	e017      	b.n	8017aac <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_REL, style); break;
 8017a7c:	697b      	ldr	r3, [r7, #20]
 8017a7e:	69db      	ldr	r3, [r3, #28]
 8017a80:	687a      	ldr	r2, [r7, #4]
 8017a82:	2102      	movs	r1, #2
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7fd ffe7 	bl	8015a58 <lv_btn_set_style>
 8017a8a:	e00f      	b.n	8017aac <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_PR, style); break;
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	69db      	ldr	r3, [r3, #28]
 8017a90:	687a      	ldr	r2, [r7, #4]
 8017a92:	2103      	movs	r1, #3
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7fd ffdf 	bl	8015a58 <lv_btn_set_style>
 8017a9a:	e007      	b.n	8017aac <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_INA: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_INA, style); break;
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	69db      	ldr	r3, [r3, #28]
 8017aa0:	687a      	ldr	r2, [r7, #4]
 8017aa2:	2104      	movs	r1, #4
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7fd ffd7 	bl	8015a58 <lv_btn_set_style>
 8017aaa:	bf00      	nop
    }
}
 8017aac:	bf00      	nop
 8017aae:	3718      	adds	r7, #24
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}

08017ab4 <lv_cb_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_cb_design(lv_obj_t * cb, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b088      	sub	sp, #32
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	4613      	mov	r3, r2
 8017ac0:	71fb      	strb	r3, [r7, #7]
    bool result = true;
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	77fb      	strb	r3, [r7, #31]

    if(mode == LV_DESIGN_COVER_CHK) {
 8017ac6:	79fb      	ldrb	r3, [r7, #7]
 8017ac8:	2b02      	cmp	r3, #2
 8017aca:	d108      	bne.n	8017ade <lv_cb_design+0x2a>
        /*Return false if the object is not covers the mask_p area*/
        result = ancestor_bg_design(cb, mask, mode);
 8017acc:	4b1c      	ldr	r3, [pc, #112]	; (8017b40 <lv_cb_design+0x8c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	79fa      	ldrb	r2, [r7, #7]
 8017ad2:	68b9      	ldr	r1, [r7, #8]
 8017ad4:	68f8      	ldr	r0, [r7, #12]
 8017ad6:	4798      	blx	r3
 8017ad8:	4603      	mov	r3, r0
 8017ada:	77fb      	strb	r3, [r7, #31]
 8017adc:	e02a      	b.n	8017b34 <lv_cb_design+0x80>
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 8017ade:	79fb      	ldrb	r3, [r7, #7]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d002      	beq.n	8017aea <lv_cb_design+0x36>
 8017ae4:	79fb      	ldrb	r3, [r7, #7]
 8017ae6:	2b01      	cmp	r3, #1
 8017ae8:	d11c      	bne.n	8017b24 <lv_cb_design+0x70>
        lv_cb_ext_t * cb_ext      = lv_obj_get_ext_attr(cb);
 8017aea:	68f8      	ldr	r0, [r7, #12]
 8017aec:	f7ef fbcf 	bl	800728e <lv_obj_get_ext_attr>
 8017af0:	61b8      	str	r0, [r7, #24]
        lv_btn_ext_t * bullet_ext = lv_obj_get_ext_attr(cb_ext->bullet);
 8017af2:	69bb      	ldr	r3, [r7, #24]
 8017af4:	69db      	ldr	r3, [r3, #28]
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7ef fbc9 	bl	800728e <lv_obj_get_ext_attr>
 8017afc:	6178      	str	r0, [r7, #20]

        /*Be sure the state of the bullet is the same as the parent button*/
        bullet_ext->state = cb_ext->bg_btn.state;
 8017afe:	69bb      	ldr	r3, [r7, #24]
 8017b00:	7e1b      	ldrb	r3, [r3, #24]
 8017b02:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017b06:	b2d9      	uxtb	r1, r3
 8017b08:	697a      	ldr	r2, [r7, #20]
 8017b0a:	7e13      	ldrb	r3, [r2, #24]
 8017b0c:	f361 0302 	bfi	r3, r1, #0, #3
 8017b10:	7613      	strb	r3, [r2, #24]

        result = ancestor_bg_design(cb, mask, mode);
 8017b12:	4b0b      	ldr	r3, [pc, #44]	; (8017b40 <lv_cb_design+0x8c>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	79fa      	ldrb	r2, [r7, #7]
 8017b18:	68b9      	ldr	r1, [r7, #8]
 8017b1a:	68f8      	ldr	r0, [r7, #12]
 8017b1c:	4798      	blx	r3
 8017b1e:	4603      	mov	r3, r0
 8017b20:	77fb      	strb	r3, [r7, #31]
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 8017b22:	e007      	b.n	8017b34 <lv_cb_design+0x80>

    } else {
        result = ancestor_bg_design(cb, mask, mode);
 8017b24:	4b06      	ldr	r3, [pc, #24]	; (8017b40 <lv_cb_design+0x8c>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	79fa      	ldrb	r2, [r7, #7]
 8017b2a:	68b9      	ldr	r1, [r7, #8]
 8017b2c:	68f8      	ldr	r0, [r7, #12]
 8017b2e:	4798      	blx	r3
 8017b30:	4603      	mov	r3, r0
 8017b32:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8017b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3720      	adds	r7, #32
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	20002ac0 	.word	0x20002ac0

08017b44 <lv_bullet_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bullet_design(lv_obj_t * bullet, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b08a      	sub	sp, #40	; 0x28
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	60f8      	str	r0, [r7, #12]
 8017b4c:	60b9      	str	r1, [r7, #8]
 8017b4e:	4613      	mov	r3, r2
 8017b50:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8017b52:	79fb      	ldrb	r3, [r7, #7]
 8017b54:	2b02      	cmp	r3, #2
 8017b56:	d107      	bne.n	8017b68 <lv_bullet_design+0x24>
        return ancestor_bullet_design(bullet, mask, mode);
 8017b58:	4b22      	ldr	r3, [pc, #136]	; (8017be4 <lv_bullet_design+0xa0>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	79fa      	ldrb	r2, [r7, #7]
 8017b5e:	68b9      	ldr	r1, [r7, #8]
 8017b60:	68f8      	ldr	r0, [r7, #12]
 8017b62:	4798      	blx	r3
 8017b64:	4603      	mov	r3, r0
 8017b66:	e039      	b.n	8017bdc <lv_bullet_design+0x98>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017b68:	79fb      	ldrb	r3, [r7, #7]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d12c      	bne.n	8017bc8 <lv_bullet_design+0x84>
#if LV_USE_GROUP
        /* If the check box is the active in a group and
         * the background is not visible (transparent)
         * then activate the style of the bullet*/
        const lv_style_t * style_ori  = lv_obj_get_style(bullet);
 8017b6e:	68f8      	ldr	r0, [r7, #12]
 8017b70:	f7ef fad2 	bl	8007118 <lv_obj_get_style>
 8017b74:	6278      	str	r0, [r7, #36]	; 0x24
        lv_obj_t * bg                 = lv_obj_get_parent(bullet);
 8017b76:	68f8      	ldr	r0, [r7, #12]
 8017b78:	f7ef fa34 	bl	8006fe4 <lv_obj_get_parent>
 8017b7c:	6238      	str	r0, [r7, #32]
        const lv_style_t * style_page = lv_obj_get_style(bg);
 8017b7e:	6a38      	ldr	r0, [r7, #32]
 8017b80:	f7ef faca 	bl	8007118 <lv_obj_get_style>
 8017b84:	61f8      	str	r0, [r7, #28]
        lv_group_t * g                = lv_obj_get_group(bg);
 8017b86:	6a38      	ldr	r0, [r7, #32]
 8017b88:	f7ef fb8d 	bl	80072a6 <lv_obj_get_group>
 8017b8c:	61b8      	str	r0, [r7, #24]
        if(style_page->body.opa == LV_OPA_TRANSP) { /*Is the Background visible?*/
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	7a1b      	ldrb	r3, [r3, #8]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d10e      	bne.n	8017bb4 <lv_bullet_design+0x70>
            if(lv_group_get_focused(g) == bg) {
 8017b96:	69b8      	ldr	r0, [r7, #24]
 8017b98:	f7ed fb67 	bl	800526a <lv_group_get_focused>
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	6a3b      	ldr	r3, [r7, #32]
 8017ba0:	4293      	cmp	r3, r2
 8017ba2:	d107      	bne.n	8017bb4 <lv_bullet_design+0x70>
                lv_style_t * style_mod;
                style_mod       = lv_group_mod_style(g, style_ori);
 8017ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ba6:	69b8      	ldr	r0, [r7, #24]
 8017ba8:	f7ed fb2f 	bl	800520a <lv_group_mod_style>
 8017bac:	6178      	str	r0, [r7, #20]
                bullet->style_p = style_mod; /*Temporally change the style to the activated */
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	697a      	ldr	r2, [r7, #20]
 8017bb2:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_bullet_design(bullet, mask, mode);
 8017bb4:	4b0b      	ldr	r3, [pc, #44]	; (8017be4 <lv_bullet_design+0xa0>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	79fa      	ldrb	r2, [r7, #7]
 8017bba:	68b9      	ldr	r1, [r7, #8]
 8017bbc:	68f8      	ldr	r0, [r7, #12]
 8017bbe:	4798      	blx	r3

#if LV_USE_GROUP
        bullet->style_p = style_ori; /*Revert the style*/
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8017bc6:	e008      	b.n	8017bda <lv_bullet_design+0x96>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017bc8:	79fb      	ldrb	r3, [r7, #7]
 8017bca:	2b01      	cmp	r3, #1
 8017bcc:	d105      	bne.n	8017bda <lv_bullet_design+0x96>
        ancestor_bullet_design(bullet, mask, mode);
 8017bce:	4b05      	ldr	r3, [pc, #20]	; (8017be4 <lv_bullet_design+0xa0>)
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	79fa      	ldrb	r2, [r7, #7]
 8017bd4:	68b9      	ldr	r1, [r7, #8]
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	4798      	blx	r3
    }

    return true;
 8017bda:	2301      	movs	r3, #1
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3728      	adds	r7, #40	; 0x28
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	20002ac4 	.word	0x20002ac4

08017be8 <lv_cb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cb_signal(lv_obj_t * cb, lv_signal_t sign, void * param)
{
 8017be8:	b5b0      	push	{r4, r5, r7, lr}
 8017bea:	b08a      	sub	sp, #40	; 0x28
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	460b      	mov	r3, r1
 8017bf2:	607a      	str	r2, [r7, #4]
 8017bf4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cb, sign, param);
 8017bf6:	4b4b      	ldr	r3, [pc, #300]	; (8017d24 <lv_cb_signal+0x13c>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	7af9      	ldrb	r1, [r7, #11]
 8017bfc:	687a      	ldr	r2, [r7, #4]
 8017bfe:	68f8      	ldr	r0, [r7, #12]
 8017c00:	4798      	blx	r3
 8017c02:	4603      	mov	r3, r0
 8017c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(res != LV_RES_OK) return res;
 8017c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c0c:	2b01      	cmp	r3, #1
 8017c0e:	d002      	beq.n	8017c16 <lv_cb_signal+0x2e>
 8017c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c14:	e081      	b.n	8017d1a <lv_cb_signal+0x132>

    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	f7ef fb39 	bl	800728e <lv_obj_get_ext_attr>
 8017c1c:	6238      	str	r0, [r7, #32]

    if(sign == LV_SIGNAL_STYLE_CHG) {
 8017c1e:	7afb      	ldrb	r3, [r7, #11]
 8017c20:	2b04      	cmp	r3, #4
 8017c22:	d126      	bne.n	8017c72 <lv_cb_signal+0x8a>
        const lv_style_t * label_style = lv_label_get_style(ext->label, LV_LABEL_STYLE_MAIN);
 8017c24:	6a3b      	ldr	r3, [r7, #32]
 8017c26:	6a1b      	ldr	r3, [r3, #32]
 8017c28:	2100      	movs	r1, #0
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7ff fdc9 	bl	80177c2 <lv_label_get_style>
 8017c30:	6178      	str	r0, [r7, #20]
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 8017c32:	6a3b      	ldr	r3, [r7, #32]
 8017c34:	69dc      	ldr	r4, [r3, #28]
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7ff fd84 	bl	8017748 <lv_font_get_line_height>
 8017c40:	4603      	mov	r3, r0
 8017c42:	b21d      	sxth	r5, r3
                        lv_font_get_line_height(label_style->text.font));
 8017c44:	697b      	ldr	r3, [r7, #20]
 8017c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7ff fd7d 	bl	8017748 <lv_font_get_line_height>
 8017c4e:	4603      	mov	r3, r0
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 8017c50:	b21b      	sxth	r3, r3
 8017c52:	461a      	mov	r2, r3
 8017c54:	4629      	mov	r1, r5
 8017c56:	4620      	mov	r0, r4
 8017c58:	f7ee faa1 	bl	800619e <lv_obj_set_size>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017c5c:	6a3b      	ldr	r3, [r7, #32]
 8017c5e:	69dc      	ldr	r4, [r3, #28]
 8017c60:	68f8      	ldr	r0, [r7, #12]
 8017c62:	f7fd ff3b 	bl	8015adc <lv_btn_get_state>
 8017c66:	4603      	mov	r3, r0
 8017c68:	4619      	mov	r1, r3
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f7fd feca 	bl	8015a04 <lv_btn_set_state>
 8017c70:	e051      	b.n	8017d16 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8017c72:	7afb      	ldrb	r3, [r7, #11]
 8017c74:	2b07      	cmp	r3, #7
 8017c76:	d005      	beq.n	8017c84 <lv_cb_signal+0x9c>
 8017c78:	7afb      	ldrb	r3, [r7, #11]
 8017c7a:	2b0a      	cmp	r3, #10
 8017c7c:	d002      	beq.n	8017c84 <lv_cb_signal+0x9c>
 8017c7e:	7afb      	ldrb	r3, [r7, #11]
 8017c80:	2b09      	cmp	r3, #9
 8017c82:	d10a      	bne.n	8017c9a <lv_cb_signal+0xb2>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017c84:	6a3b      	ldr	r3, [r7, #32]
 8017c86:	69dc      	ldr	r4, [r3, #28]
 8017c88:	68f8      	ldr	r0, [r7, #12]
 8017c8a:	f7fd ff27 	bl	8015adc <lv_btn_get_state>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	4619      	mov	r1, r3
 8017c92:	4620      	mov	r0, r4
 8017c94:	f7fd feb6 	bl	8015a04 <lv_btn_set_state>
 8017c98:	e03d      	b.n	8017d16 <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8017c9a:	7afb      	ldrb	r3, [r7, #11]
 8017c9c:	2b11      	cmp	r3, #17
 8017c9e:	d119      	bne.n	8017cd4 <lv_cb_signal+0xec>
        char c = *((char *)param);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	76fb      	strb	r3, [r7, #27]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN || c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8017ca6:	7efb      	ldrb	r3, [r7, #27]
 8017ca8:	2b13      	cmp	r3, #19
 8017caa:	d008      	beq.n	8017cbe <lv_cb_signal+0xd6>
 8017cac:	7efb      	ldrb	r3, [r7, #27]
 8017cae:	2b12      	cmp	r3, #18
 8017cb0:	d005      	beq.n	8017cbe <lv_cb_signal+0xd6>
 8017cb2:	7efb      	ldrb	r3, [r7, #27]
 8017cb4:	2b14      	cmp	r3, #20
 8017cb6:	d002      	beq.n	8017cbe <lv_cb_signal+0xd6>
 8017cb8:	7efb      	ldrb	r3, [r7, #27]
 8017cba:	2b11      	cmp	r3, #17
 8017cbc:	d12b      	bne.n	8017d16 <lv_cb_signal+0x12e>
            /*Follow the backgrounds state with the bullet*/
            lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017cbe:	6a3b      	ldr	r3, [r7, #32]
 8017cc0:	69dc      	ldr	r4, [r3, #28]
 8017cc2:	68f8      	ldr	r0, [r7, #12]
 8017cc4:	f7fd ff0a 	bl	8015adc <lv_btn_get_state>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	4619      	mov	r1, r3
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f7fd fe99 	bl	8015a04 <lv_btn_set_state>
 8017cd2:	e020      	b.n	8017d16 <lv_cb_signal+0x12e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8017cd4:	7afb      	ldrb	r3, [r7, #11]
 8017cd6:	2b06      	cmp	r3, #6
 8017cd8:	d11d      	bne.n	8017d16 <lv_cb_signal+0x12e>
        lv_obj_type_t * buf = param;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	61fb      	str	r3, [r7, #28]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ce4:	e00b      	b.n	8017cfe <lv_cb_signal+0x116>
            if(buf->type[i] == NULL) break;
 8017ce6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d009      	beq.n	8017d08 <lv_cb_signal+0x120>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d02:	2b06      	cmp	r3, #6
 8017d04:	d9ef      	bls.n	8017ce6 <lv_cb_signal+0xfe>
 8017d06:	e000      	b.n	8017d0a <lv_cb_signal+0x122>
            if(buf->type[i] == NULL) break;
 8017d08:	bf00      	nop
        }
        buf->type[i] = "lv_cb";
 8017d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	4905      	ldr	r1, [pc, #20]	; (8017d28 <lv_cb_signal+0x140>)
 8017d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8017d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3728      	adds	r7, #40	; 0x28
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bdb0      	pop	{r4, r5, r7, pc}
 8017d22:	bf00      	nop
 8017d24:	20002ac8 	.word	0x20002ac8
 8017d28:	08029cbc 	.word	0x08029cbc

08017d2c <lv_area_copy>:
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b082      	sub	sp, #8
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
 8017d34:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8017d36:	2208      	movs	r2, #8
 8017d38:	6839      	ldr	r1, [r7, #0]
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f00f fa30 	bl	80271a0 <memcpy>
}
 8017d40:	bf00      	nop
 8017d42:	3708      	adds	r7, #8
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd80      	pop	{r7, pc}

08017d48 <lv_area_get_width>:
{
 8017d48:	b480      	push	{r7}
 8017d4a:	b083      	sub	sp, #12
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	1ad3      	subs	r3, r2, r3
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	3301      	adds	r3, #1
 8017d66:	b29b      	uxth	r3, r3
 8017d68:	b21b      	sxth	r3, r3
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	370c      	adds	r7, #12
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d74:	4770      	bx	lr

08017d76 <lv_area_get_height>:
{
 8017d76:	b480      	push	{r7}
 8017d78:	b083      	sub	sp, #12
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017d84:	b29a      	uxth	r2, r3
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	1ad3      	subs	r3, r2, r3
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	3301      	adds	r3, #1
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	b21b      	sxth	r3, r3
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	370c      	adds	r7, #12
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <lv_cont_set_style>:
 * @param cont pointer to a container object
 * @param type which style should be set (can be only `LV_CONT_STYLE_MAIN`)
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b084      	sub	sp, #16
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	460b      	mov	r3, r1
 8017dae:	607a      	str	r2, [r7, #4]
 8017db0:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 8017db2:	6879      	ldr	r1, [r7, #4]
 8017db4:	68f8      	ldr	r0, [r7, #12]
 8017db6:	f7ee ff3a 	bl	8006c2e <lv_obj_set_style>
}
 8017dba:	bf00      	nop
 8017dbc:	3710      	adds	r7, #16
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd80      	pop	{r7, pc}
	...

08017dc4 <lv_cont_create>:
 * @param par pointer to an object, it will be the parent of the new container
 * @param copy pointer to a container object, if not NULL then the new object will be copied from it
 * @return pointer to the created container
 */
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b086      	sub	sp, #24
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("container create started");

    /*Create a basic object*/
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8017dce:	6839      	ldr	r1, [r7, #0]
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f7ed fcf3 	bl	80057bc <lv_obj_create>
 8017dd6:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cont);
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d100      	bne.n	8017de0 <lv_cont_create+0x1c>
 8017dde:	e7fe      	b.n	8017dde <lv_cont_create+0x1a>
    if(new_cont == NULL) return NULL;
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d101      	bne.n	8017dea <lv_cont_create+0x26>
 8017de6:	2300      	movs	r3, #0
 8017de8:	e08b      	b.n	8017f02 <lv_cont_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8017dea:	4b48      	ldr	r3, [pc, #288]	; (8017f0c <lv_cont_create+0x148>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d105      	bne.n	8017dfe <lv_cont_create+0x3a>
 8017df2:	6978      	ldr	r0, [r7, #20]
 8017df4:	f7ef fa33 	bl	800725e <lv_obj_get_signal_cb>
 8017df8:	4602      	mov	r2, r0
 8017dfa:	4b44      	ldr	r3, [pc, #272]	; (8017f0c <lv_cont_create+0x148>)
 8017dfc:	601a      	str	r2, [r3, #0]

    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8017dfe:	2102      	movs	r1, #2
 8017e00:	6978      	ldr	r0, [r7, #20]
 8017e02:	f7ef f877 	bl	8006ef4 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8017e06:	6978      	ldr	r0, [r7, #20]
 8017e08:	f7ef fa41 	bl	800728e <lv_obj_get_ext_attr>
 8017e0c:	6138      	str	r0, [r7, #16]
    if(ext == NULL) return NULL;
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d101      	bne.n	8017e18 <lv_cont_create+0x54>
 8017e14:	2300      	movs	r3, #0
 8017e16:	e074      	b.n	8017f02 <lv_cont_create+0x13e>

    lv_mem_assert(ext);
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d100      	bne.n	8017e20 <lv_cont_create+0x5c>
 8017e1e:	e7fe      	b.n	8017e1e <lv_cont_create+0x5a>
    ext->fit_left   = LV_FIT_NONE;
 8017e20:	693a      	ldr	r2, [r7, #16]
 8017e22:	7813      	ldrb	r3, [r2, #0]
 8017e24:	f36f 1305 	bfc	r3, #4, #2
 8017e28:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = LV_FIT_NONE;
 8017e2a:	693a      	ldr	r2, [r7, #16]
 8017e2c:	7813      	ldrb	r3, [r2, #0]
 8017e2e:	f36f 1387 	bfc	r3, #6, #2
 8017e32:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = LV_FIT_NONE;
 8017e34:	693a      	ldr	r2, [r7, #16]
 8017e36:	7853      	ldrb	r3, [r2, #1]
 8017e38:	f36f 0301 	bfc	r3, #0, #2
 8017e3c:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = LV_FIT_NONE;
 8017e3e:	693a      	ldr	r2, [r7, #16]
 8017e40:	7853      	ldrb	r3, [r2, #1]
 8017e42:	f36f 0383 	bfc	r3, #2, #2
 8017e46:	7053      	strb	r3, [r2, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8017e48:	693a      	ldr	r2, [r7, #16]
 8017e4a:	7813      	ldrb	r3, [r2, #0]
 8017e4c:	f36f 0303 	bfc	r3, #0, #4
 8017e50:	7013      	strb	r3, [r2, #0]

    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8017e52:	492f      	ldr	r1, [pc, #188]	; (8017f10 <lv_cont_create+0x14c>)
 8017e54:	6978      	ldr	r0, [r7, #20]
 8017e56:	f7ef f831 	bl	8006ebc <lv_obj_set_signal_cb>

    /*Init the new container*/
    if(copy == NULL) {
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d116      	bne.n	8017e8e <lv_cont_create+0xca>
        /*Set the default styles if it's not screen*/
        if(par != NULL) {
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d04c      	beq.n	8017f00 <lv_cont_create+0x13c>
            lv_theme_t * th = lv_theme_get_current();
 8017e66:	f007 f895 	bl	801ef94 <lv_theme_get_current>
 8017e6a:	60b8      	str	r0, [r7, #8]
            if(th) {
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d007      	beq.n	8017e82 <lv_cont_create+0xbe>
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, th->style.cont);
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	68db      	ldr	r3, [r3, #12]
 8017e76:	461a      	mov	r2, r3
 8017e78:	2100      	movs	r1, #0
 8017e7a:	6978      	ldr	r0, [r7, #20]
 8017e7c:	f7ff ff92 	bl	8017da4 <lv_cont_set_style>
 8017e80:	e03e      	b.n	8017f00 <lv_cont_create+0x13c>
            } else {
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, &lv_style_pretty);
 8017e82:	4a24      	ldr	r2, [pc, #144]	; (8017f14 <lv_cont_create+0x150>)
 8017e84:	2100      	movs	r1, #0
 8017e86:	6978      	ldr	r0, [r7, #20]
 8017e88:	f7ff ff8c 	bl	8017da4 <lv_cont_set_style>
 8017e8c:	e038      	b.n	8017f00 <lv_cont_create+0x13c>
            }
        }
    }
    /*Copy an existing object*/
    else {
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017e8e:	6838      	ldr	r0, [r7, #0]
 8017e90:	f7ef f9fd 	bl	800728e <lv_obj_get_ext_attr>
 8017e94:	60f8      	str	r0, [r7, #12]
        ext->fit_left            = copy_ext->fit_left;
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	781b      	ldrb	r3, [r3, #0]
 8017e9a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8017e9e:	b2d9      	uxtb	r1, r3
 8017ea0:	693a      	ldr	r2, [r7, #16]
 8017ea2:	7813      	ldrb	r3, [r2, #0]
 8017ea4:	f361 1305 	bfi	r3, r1, #4, #2
 8017ea8:	7013      	strb	r3, [r2, #0]
        ext->fit_right           = copy_ext->fit_right;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	781b      	ldrb	r3, [r3, #0]
 8017eae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017eb2:	b2d9      	uxtb	r1, r3
 8017eb4:	693a      	ldr	r2, [r7, #16]
 8017eb6:	7813      	ldrb	r3, [r2, #0]
 8017eb8:	f361 1387 	bfi	r3, r1, #6, #2
 8017ebc:	7013      	strb	r3, [r2, #0]
        ext->fit_top             = copy_ext->fit_top;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	785b      	ldrb	r3, [r3, #1]
 8017ec2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017ec6:	b2d9      	uxtb	r1, r3
 8017ec8:	693a      	ldr	r2, [r7, #16]
 8017eca:	7853      	ldrb	r3, [r2, #1]
 8017ecc:	f361 0301 	bfi	r3, r1, #0, #2
 8017ed0:	7053      	strb	r3, [r2, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	785b      	ldrb	r3, [r3, #1]
 8017ed6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017eda:	b2d9      	uxtb	r1, r3
 8017edc:	693a      	ldr	r2, [r7, #16]
 8017ede:	7853      	ldrb	r3, [r2, #1]
 8017ee0:	f361 0383 	bfi	r3, r1, #2, #2
 8017ee4:	7053      	strb	r3, [r2, #1]
        ext->layout              = copy_ext->layout;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017eee:	b2d9      	uxtb	r1, r3
 8017ef0:	693a      	ldr	r2, [r7, #16]
 8017ef2:	7813      	ldrb	r3, [r2, #0]
 8017ef4:	f361 0303 	bfi	r3, r1, #0, #4
 8017ef8:	7013      	strb	r3, [r2, #0]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cont);
 8017efa:	6978      	ldr	r0, [r7, #20]
 8017efc:	f7ee fea9 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("container created");

    return new_cont;
 8017f00:	697b      	ldr	r3, [r7, #20]
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3718      	adds	r7, #24
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	20002acc 	.word	0x20002acc
 8017f10:	0801809d 	.word	0x0801809d
 8017f14:	20006b78 	.word	0x20006b78

08017f18 <lv_cont_set_layout>:
 * Set a layout on a container
 * @param cont pointer to a container object
 * @param layout a layout from 'lv_cont_layout_t'
 */
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	460b      	mov	r3, r1
 8017f22:	70fb      	strb	r3, [r7, #3]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f7ef f9b2 	bl	800728e <lv_obj_get_ext_attr>
 8017f2a:	60f8      	str	r0, [r7, #12]
    if(ext->layout == layout) return;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017f34:	b2db      	uxtb	r3, r3
 8017f36:	461a      	mov	r2, r3
 8017f38:	78fb      	ldrb	r3, [r7, #3]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d00f      	beq.n	8017f5e <lv_cont_set_layout+0x46>

    ext->layout = layout;
 8017f3e:	78fb      	ldrb	r3, [r7, #3]
 8017f40:	f003 030f 	and.w	r3, r3, #15
 8017f44:	b2d9      	uxtb	r1, r3
 8017f46:	68fa      	ldr	r2, [r7, #12]
 8017f48:	7813      	ldrb	r3, [r2, #0]
 8017f4a:	f361 0303 	bfi	r3, r1, #0, #4
 8017f4e:	7013      	strb	r3, [r2, #0]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	69db      	ldr	r3, [r3, #28]
 8017f54:	2200      	movs	r2, #0
 8017f56:	2101      	movs	r1, #1
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	4798      	blx	r3
 8017f5c:	e000      	b.n	8017f60 <lv_cont_set_layout+0x48>
    if(ext->layout == layout) return;
 8017f5e:	bf00      	nop
}
 8017f60:	3710      	adds	r7, #16
 8017f62:	46bd      	mov	sp, r7
 8017f64:	bd80      	pop	{r7, pc}

08017f66 <lv_cont_set_fit4>:
 * @param right right fit policy from `lv_fit_t`
 * @param top bottom fit policy from `lv_fit_t`
 * @param bottom bottom fit policy from `lv_fit_t`
 */
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
 8017f66:	b580      	push	{r7, lr}
 8017f68:	b084      	sub	sp, #16
 8017f6a:	af00      	add	r7, sp, #0
 8017f6c:	6078      	str	r0, [r7, #4]
 8017f6e:	4608      	mov	r0, r1
 8017f70:	4611      	mov	r1, r2
 8017f72:	461a      	mov	r2, r3
 8017f74:	4603      	mov	r3, r0
 8017f76:	70fb      	strb	r3, [r7, #3]
 8017f78:	460b      	mov	r3, r1
 8017f7a:	70bb      	strb	r3, [r7, #2]
 8017f7c:	4613      	mov	r3, r2
 8017f7e:	707b      	strb	r3, [r7, #1]
    lv_obj_invalidate(cont);
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7ed ff58 	bl	8005e36 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f7ef f981 	bl	800728e <lv_obj_get_ext_attr>
 8017f8c:	60f8      	str	r0, [r7, #12]
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8017f96:	b2db      	uxtb	r3, r3
 8017f98:	461a      	mov	r2, r3
 8017f9a:	78fb      	ldrb	r3, [r7, #3]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d11a      	bne.n	8017fd6 <lv_cont_set_fit4+0x70>
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	461a      	mov	r2, r3
 8017fac:	78bb      	ldrb	r3, [r7, #2]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d111      	bne.n	8017fd6 <lv_cont_set_fit4+0x70>
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	785b      	ldrb	r3, [r3, #1]
 8017fb6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	787b      	ldrb	r3, [r7, #1]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d108      	bne.n	8017fd6 <lv_cont_set_fit4+0x70>
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	785b      	ldrb	r3, [r3, #1]
 8017fc8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017fcc:	b2db      	uxtb	r3, r3
 8017fce:	461a      	mov	r2, r3
 8017fd0:	7e3b      	ldrb	r3, [r7, #24]
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d02a      	beq.n	801802c <lv_cont_set_fit4+0xc6>
        return;
    }

    ext->fit_left   = left;
 8017fd6:	78fb      	ldrb	r3, [r7, #3]
 8017fd8:	f003 0303 	and.w	r3, r3, #3
 8017fdc:	b2d9      	uxtb	r1, r3
 8017fde:	68fa      	ldr	r2, [r7, #12]
 8017fe0:	7813      	ldrb	r3, [r2, #0]
 8017fe2:	f361 1305 	bfi	r3, r1, #4, #2
 8017fe6:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = right;
 8017fe8:	78bb      	ldrb	r3, [r7, #2]
 8017fea:	f003 0303 	and.w	r3, r3, #3
 8017fee:	b2d9      	uxtb	r1, r3
 8017ff0:	68fa      	ldr	r2, [r7, #12]
 8017ff2:	7813      	ldrb	r3, [r2, #0]
 8017ff4:	f361 1387 	bfi	r3, r1, #6, #2
 8017ff8:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = top;
 8017ffa:	787b      	ldrb	r3, [r7, #1]
 8017ffc:	f003 0303 	and.w	r3, r3, #3
 8018000:	b2d9      	uxtb	r1, r3
 8018002:	68fa      	ldr	r2, [r7, #12]
 8018004:	7853      	ldrb	r3, [r2, #1]
 8018006:	f361 0301 	bfi	r3, r1, #0, #2
 801800a:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = bottom;
 801800c:	7e3b      	ldrb	r3, [r7, #24]
 801800e:	f003 0303 	and.w	r3, r3, #3
 8018012:	b2d9      	uxtb	r1, r3
 8018014:	68fa      	ldr	r2, [r7, #12]
 8018016:	7853      	ldrb	r3, [r2, #1]
 8018018:	f361 0383 	bfi	r3, r1, #2, #2
 801801c:	7053      	strb	r3, [r2, #1]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	69db      	ldr	r3, [r3, #28]
 8018022:	2200      	movs	r2, #0
 8018024:	2101      	movs	r1, #1
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	4798      	blx	r3
 801802a:	e000      	b.n	801802e <lv_cont_set_fit4+0xc8>
        return;
 801802c:	bf00      	nop
}
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <lv_cont_get_layout>:
 * Get the layout of a container
 * @param cont pointer to container object
 * @return the layout from 'lv_cont_layout_t'
 */
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b084      	sub	sp, #16
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f7ef f926 	bl	800728e <lv_obj_get_ext_attr>
 8018042:	60f8      	str	r0, [r7, #12]
    return ext->layout;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801804c:	b2db      	uxtb	r3, r3
}
 801804e:	4618      	mov	r0, r3
 8018050:	3710      	adds	r7, #16
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}

08018056 <lv_cont_get_fit_left>:
 * Get left fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)
{
 8018056:	b580      	push	{r7, lr}
 8018058:	b084      	sub	sp, #16
 801805a:	af00      	add	r7, sp, #0
 801805c:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7ef f915 	bl	800728e <lv_obj_get_ext_attr>
 8018064:	60f8      	str	r0, [r7, #12]
    return ext->fit_left;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801806e:	b2db      	uxtb	r3, r3
}
 8018070:	4618      	mov	r0, r3
 8018072:	3710      	adds	r7, #16
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <lv_cont_get_fit_top>:
 * Get top fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b084      	sub	sp, #16
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f7ef f904 	bl	800728e <lv_obj_get_ext_attr>
 8018086:	60f8      	str	r0, [r7, #12]
    return ext->fit_top;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	785b      	ldrb	r3, [r3, #1]
 801808c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018090:	b2db      	uxtb	r3, r3
}
 8018092:	4618      	mov	r0, r3
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
	...

0801809c <lv_cont_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)
{
 801809c:	b590      	push	{r4, r7, lr}
 801809e:	b087      	sub	sp, #28
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	460b      	mov	r3, r1
 80180a6:	607a      	str	r2, [r7, #4]
 80180a8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cont, sign, param);
 80180aa:	4b34      	ldr	r3, [pc, #208]	; (801817c <lv_cont_signal+0xe0>)
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	7af9      	ldrb	r1, [r7, #11]
 80180b0:	687a      	ldr	r2, [r7, #4]
 80180b2:	68f8      	ldr	r0, [r7, #12]
 80180b4:	4798      	blx	r3
 80180b6:	4603      	mov	r3, r0
 80180b8:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 80180ba:	7dbb      	ldrb	r3, [r7, #22]
 80180bc:	2b01      	cmp	r3, #1
 80180be:	d001      	beq.n	80180c4 <lv_cont_signal+0x28>
 80180c0:	7dbb      	ldrb	r3, [r7, #22]
 80180c2:	e056      	b.n	8018172 <lv_cont_signal+0xd6>

    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 80180c4:	7afb      	ldrb	r3, [r7, #11]
 80180c6:	2b04      	cmp	r3, #4
 80180c8:	d106      	bne.n	80180d8 <lv_cont_signal+0x3c>
        lv_cont_refr_layout(cont);
 80180ca:	68f8      	ldr	r0, [r7, #12]
 80180cc:	f000 f85a 	bl	8018184 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80180d0:	68f8      	ldr	r0, [r7, #12]
 80180d2:	f000 fc94 	bl	80189fe <lv_cont_refr_autofit>
 80180d6:	e04b      	b.n	8018170 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80180d8:	7afb      	ldrb	r3, [r7, #11]
 80180da:	2b01      	cmp	r3, #1
 80180dc:	d106      	bne.n	80180ec <lv_cont_signal+0x50>
        lv_cont_refr_layout(cont);
 80180de:	68f8      	ldr	r0, [r7, #12]
 80180e0:	f000 f850 	bl	8018184 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80180e4:	68f8      	ldr	r0, [r7, #12]
 80180e6:	f000 fc8a 	bl	80189fe <lv_cont_refr_autofit>
 80180ea:	e041      	b.n	8018170 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80180ec:	7afb      	ldrb	r3, [r7, #11]
 80180ee:	2b02      	cmp	r3, #2
 80180f0:	d11c      	bne.n	801812c <lv_cont_signal+0x90>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 80180f2:	68f8      	ldr	r0, [r7, #12]
 80180f4:	f7ee ffe0 	bl	80070b8 <lv_obj_get_width>
 80180f8:	4603      	mov	r3, r0
 80180fa:	461c      	mov	r4, r3
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f7ff fe23 	bl	8017d48 <lv_area_get_width>
 8018102:	4603      	mov	r3, r0
 8018104:	429c      	cmp	r4, r3
 8018106:	d10a      	bne.n	801811e <lv_cont_signal+0x82>
 8018108:	68f8      	ldr	r0, [r7, #12]
 801810a:	f7ee ffe3 	bl	80070d4 <lv_obj_get_height>
 801810e:	4603      	mov	r3, r0
 8018110:	461c      	mov	r4, r3
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f7ff fe2f 	bl	8017d76 <lv_area_get_height>
 8018118:	4603      	mov	r3, r0
 801811a:	429c      	cmp	r4, r3
 801811c:	d028      	beq.n	8018170 <lv_cont_signal+0xd4>
            lv_cont_refr_layout(cont);
 801811e:	68f8      	ldr	r0, [r7, #12]
 8018120:	f000 f830 	bl	8018184 <lv_cont_refr_layout>
            lv_cont_refr_autofit(cont);
 8018124:	68f8      	ldr	r0, [r7, #12]
 8018126:	f000 fc6a 	bl	80189fe <lv_cont_refr_autofit>
 801812a:	e021      	b.n	8018170 <lv_cont_signal+0xd4>
        }
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 801812c:	7afb      	ldrb	r3, [r7, #11]
 801812e:	2b03      	cmp	r3, #3
 8018130:	d103      	bne.n	801813a <lv_cont_signal+0x9e>
        /*FLOOD and FILL fit needs to be refreshed if the parent size has changed*/
        lv_cont_refr_autofit(cont);
 8018132:	68f8      	ldr	r0, [r7, #12]
 8018134:	f000 fc63 	bl	80189fe <lv_cont_refr_autofit>
 8018138:	e01a      	b.n	8018170 <lv_cont_signal+0xd4>

    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801813a:	7afb      	ldrb	r3, [r7, #11]
 801813c:	2b06      	cmp	r3, #6
 801813e:	d117      	bne.n	8018170 <lv_cont_signal+0xd4>
        lv_obj_type_t * buf = param;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018144:	2300      	movs	r3, #0
 8018146:	75fb      	strb	r3, [r7, #23]
 8018148:	e008      	b.n	801815c <lv_cont_signal+0xc0>
            if(buf->type[i] == NULL) break;
 801814a:	7dfa      	ldrb	r2, [r7, #23]
 801814c:	693b      	ldr	r3, [r7, #16]
 801814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d006      	beq.n	8018164 <lv_cont_signal+0xc8>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018156:	7dfb      	ldrb	r3, [r7, #23]
 8018158:	3301      	adds	r3, #1
 801815a:	75fb      	strb	r3, [r7, #23]
 801815c:	7dfb      	ldrb	r3, [r7, #23]
 801815e:	2b06      	cmp	r3, #6
 8018160:	d9f3      	bls.n	801814a <lv_cont_signal+0xae>
 8018162:	e000      	b.n	8018166 <lv_cont_signal+0xca>
            if(buf->type[i] == NULL) break;
 8018164:	bf00      	nop
        }
        buf->type[i] = "lv_cont";
 8018166:	7dfa      	ldrb	r2, [r7, #23]
 8018168:	693b      	ldr	r3, [r7, #16]
 801816a:	4905      	ldr	r1, [pc, #20]	; (8018180 <lv_cont_signal+0xe4>)
 801816c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8018170:	7dbb      	ldrb	r3, [r7, #22]
}
 8018172:	4618      	mov	r0, r3
 8018174:	371c      	adds	r7, #28
 8018176:	46bd      	mov	sp, r7
 8018178:	bd90      	pop	{r4, r7, pc}
 801817a:	bf00      	nop
 801817c:	20002acc 	.word	0x20002acc
 8018180:	08029cc4 	.word	0x08029cc4

08018184 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7ff ff51 	bl	8018034 <lv_cont_get_layout>
 8018192:	4603      	mov	r3, r0
 8018194:	73fb      	strb	r3, [r7, #15]

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8018196:	2100      	movs	r1, #0
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7ee ff2f 	bl	8006ffc <lv_obj_get_child>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d031      	beq.n	8018208 <lv_cont_refr_layout+0x84>

    if(type == LV_LAYOUT_OFF) return;
 80181a4:	7bfb      	ldrb	r3, [r7, #15]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d030      	beq.n	801820c <lv_cont_refr_layout+0x88>

    if(type == LV_LAYOUT_CENTER) {
 80181aa:	7bfb      	ldrb	r3, [r7, #15]
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d103      	bne.n	80181b8 <lv_cont_refr_layout+0x34>
        lv_cont_layout_center(cont);
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f000 f91b 	bl	80183ec <lv_cont_layout_center>
 80181b6:	e02a      	b.n	801820e <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 80181b8:	7bfb      	ldrb	r3, [r7, #15]
 80181ba:	2b02      	cmp	r3, #2
 80181bc:	d005      	beq.n	80181ca <lv_cont_refr_layout+0x46>
 80181be:	7bfb      	ldrb	r3, [r7, #15]
 80181c0:	2b03      	cmp	r3, #3
 80181c2:	d002      	beq.n	80181ca <lv_cont_refr_layout+0x46>
 80181c4:	7bfb      	ldrb	r3, [r7, #15]
 80181c6:	2b04      	cmp	r3, #4
 80181c8:	d103      	bne.n	80181d2 <lv_cont_refr_layout+0x4e>
        lv_cont_layout_col(cont);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f000 f822 	bl	8018214 <lv_cont_layout_col>
 80181d0:	e01d      	b.n	801820e <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 80181d2:	7bfb      	ldrb	r3, [r7, #15]
 80181d4:	2b05      	cmp	r3, #5
 80181d6:	d005      	beq.n	80181e4 <lv_cont_refr_layout+0x60>
 80181d8:	7bfb      	ldrb	r3, [r7, #15]
 80181da:	2b06      	cmp	r3, #6
 80181dc:	d002      	beq.n	80181e4 <lv_cont_refr_layout+0x60>
 80181de:	7bfb      	ldrb	r3, [r7, #15]
 80181e0:	2b07      	cmp	r3, #7
 80181e2:	d103      	bne.n	80181ec <lv_cont_refr_layout+0x68>
        lv_cont_layout_row(cont);
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f000 f88b 	bl	8018300 <lv_cont_layout_row>
 80181ea:	e010      	b.n	801820e <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_PRETTY) {
 80181ec:	7bfb      	ldrb	r3, [r7, #15]
 80181ee:	2b08      	cmp	r3, #8
 80181f0:	d103      	bne.n	80181fa <lv_cont_refr_layout+0x76>
        lv_cont_layout_pretty(cont);
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f000 f99c 	bl	8018530 <lv_cont_layout_pretty>
 80181f8:	e009      	b.n	801820e <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_GRID) {
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	2b09      	cmp	r3, #9
 80181fe:	d106      	bne.n	801820e <lv_cont_refr_layout+0x8a>
        lv_cont_layout_grid(cont);
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f000 fb35 	bl	8018870 <lv_cont_layout_grid>
 8018206:	e002      	b.n	801820e <lv_cont_refr_layout+0x8a>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8018208:	bf00      	nop
 801820a:	e000      	b.n	801820e <lv_cont_refr_layout+0x8a>
    if(type == LV_LAYOUT_OFF) return;
 801820c:	bf00      	nop
    }
}
 801820e:	3710      	adds	r7, #16
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <lv_cont_layout_col>:
/**
 * Handle column type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_col(lv_obj_t * cont)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b088      	sub	sp, #32
 8018218:	af02      	add	r7, sp, #8
 801821a:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 801821c:	6878      	ldr	r0, [r7, #4]
 801821e:	f7ff ff09 	bl	8018034 <lv_cont_get_layout>
 8018222:	4603      	mov	r3, r0
 8018224:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f7ee ff76 	bl	8007118 <lv_obj_get_style>
 801822c:	60b8      	str	r0, [r7, #8]
    lv_coord_t hpad_corr;

    switch(type) {
 801822e:	7b7b      	ldrb	r3, [r7, #13]
 8018230:	2b03      	cmp	r3, #3
 8018232:	d009      	beq.n	8018248 <lv_cont_layout_col+0x34>
 8018234:	2b04      	cmp	r3, #4
 8018236:	d00c      	beq.n	8018252 <lv_cont_layout_col+0x3e>
 8018238:	2b02      	cmp	r3, #2
 801823a:	d114      	bne.n	8018266 <lv_cont_layout_col+0x52>
        case LV_LAYOUT_COL_L:
            hpad_corr = style->body.padding.left;
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	8b5b      	ldrh	r3, [r3, #26]
 8018240:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8018242:	2301      	movs	r3, #1
 8018244:	74fb      	strb	r3, [r7, #19]
            break;
 8018246:	e013      	b.n	8018270 <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_M:
            hpad_corr = 0;
 8018248:	2300      	movs	r3, #0
 801824a:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_MID;
 801824c:	2302      	movs	r3, #2
 801824e:	74fb      	strb	r3, [r7, #19]
            break;
 8018250:	e00e      	b.n	8018270 <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_R:
            hpad_corr = -style->body.padding.right;
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018258:	b29b      	uxth	r3, r3
 801825a:	425b      	negs	r3, r3
 801825c:	b29b      	uxth	r3, r3
 801825e:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8018260:	2303      	movs	r3, #3
 8018262:	74fb      	strb	r3, [r7, #19]
            break;
 8018264:	e004      	b.n	8018270 <lv_cont_layout_col+0x5c>
        default:
            hpad_corr = 0;
 8018266:	2300      	movs	r3, #0
 8018268:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801826a:	2301      	movs	r3, #1
 801826c:	74fb      	strb	r3, [r7, #19]
            break;
 801826e:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018270:	2101      	movs	r1, #1
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f7ee fd56 	bl	8006d24 <lv_obj_set_protect>
    /* Align the children */
    lv_coord_t last_cord = style->body.padding.top;
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	8adb      	ldrh	r3, [r3, #22]
 801827c:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	3304      	adds	r3, #4
 8018282:	4618      	mov	r0, r3
 8018284:	f7fb fa37 	bl	80136f6 <lv_ll_get_tail>
 8018288:	6178      	str	r0, [r7, #20]
 801828a:	e02e      	b.n	80182ea <lv_cont_layout_col+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801828c:	6978      	ldr	r0, [r7, #20]
 801828e:	f7ee ff9b 	bl	80071c8 <lv_obj_get_hidden>
 8018292:	4603      	mov	r3, r0
 8018294:	2b00      	cmp	r3, #0
 8018296:	d120      	bne.n	80182da <lv_cont_layout_col+0xc6>
 8018298:	2104      	movs	r1, #4
 801829a:	6978      	ldr	r0, [r7, #20]
 801829c:	f7ee ffc8 	bl	8007230 <lv_obj_is_protected>
 80182a0:	4603      	mov	r3, r0
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d119      	bne.n	80182da <lv_cont_layout_col+0xc6>

        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 80182a6:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80182aa:	7cfa      	ldrb	r2, [r7, #19]
 80182ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	460b      	mov	r3, r1
 80182b4:	6879      	ldr	r1, [r7, #4]
 80182b6:	6978      	ldr	r0, [r7, #20]
 80182b8:	f7ee f814 	bl	80062e4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80182bc:	6978      	ldr	r0, [r7, #20]
 80182be:	f7ee ff09 	bl	80070d4 <lv_obj_get_height>
 80182c2:	4603      	mov	r3, r0
 80182c4:	461a      	mov	r2, r3
 80182c6:	68bb      	ldr	r3, [r7, #8]
 80182c8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80182cc:	4413      	add	r3, r2
 80182ce:	b29a      	uxth	r2, r3
 80182d0:	89fb      	ldrh	r3, [r7, #14]
 80182d2:	4413      	add	r3, r2
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	81fb      	strh	r3, [r7, #14]
 80182d8:	e000      	b.n	80182dc <lv_cont_layout_col+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80182da:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	3304      	adds	r3, #4
 80182e0:	6979      	ldr	r1, [r7, #20]
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7fb fa34 	bl	8013750 <lv_ll_get_prev>
 80182e8:	6178      	str	r0, [r7, #20]
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d1cd      	bne.n	801828c <lv_cont_layout_col+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80182f0:	2101      	movs	r1, #1
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	f7ee fd2b 	bl	8006d4e <lv_obj_clear_protect>
}
 80182f8:	bf00      	nop
 80182fa:	3718      	adds	r7, #24
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}

08018300 <lv_cont_layout_row>:
/**
 * Handle row type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_row(lv_obj_t * cont)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b088      	sub	sp, #32
 8018304:	af02      	add	r7, sp, #8
 8018306:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7ff fe93 	bl	8018034 <lv_cont_get_layout>
 801830e:	4603      	mov	r3, r0
 8018310:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ee ff00 	bl	8007118 <lv_obj_get_style>
 8018318:	60b8      	str	r0, [r7, #8]
    lv_coord_t vpad_corr;

    switch(type) {
 801831a:	7b7b      	ldrb	r3, [r7, #13]
 801831c:	2b06      	cmp	r3, #6
 801831e:	d009      	beq.n	8018334 <lv_cont_layout_row+0x34>
 8018320:	2b07      	cmp	r3, #7
 8018322:	d00c      	beq.n	801833e <lv_cont_layout_row+0x3e>
 8018324:	2b05      	cmp	r3, #5
 8018326:	d114      	bne.n	8018352 <lv_cont_layout_row+0x52>
        case LV_LAYOUT_ROW_T:
            vpad_corr = style->body.padding.top;
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	8adb      	ldrh	r3, [r3, #22]
 801832c:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801832e:	2301      	movs	r3, #1
 8018330:	74fb      	strb	r3, [r7, #19]
            break;
 8018332:	e013      	b.n	801835c <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_M:
            vpad_corr = 0;
 8018334:	2300      	movs	r3, #0
 8018336:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_LEFT_MID;
 8018338:	2307      	movs	r3, #7
 801833a:	74fb      	strb	r3, [r7, #19]
            break;
 801833c:	e00e      	b.n	801835c <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_B:
            vpad_corr = -style->body.padding.bottom;
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018344:	b29b      	uxth	r3, r3
 8018346:	425b      	negs	r3, r3
 8018348:	b29b      	uxth	r3, r3
 801834a:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 801834c:	2304      	movs	r3, #4
 801834e:	74fb      	strb	r3, [r7, #19]
            break;
 8018350:	e004      	b.n	801835c <lv_cont_layout_row+0x5c>
        default:
            vpad_corr = 0;
 8018352:	2300      	movs	r3, #0
 8018354:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8018356:	2301      	movs	r3, #1
 8018358:	74fb      	strb	r3, [r7, #19]
            break;
 801835a:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801835c:	2101      	movs	r1, #1
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f7ee fce0 	bl	8006d24 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = style->body.padding.left;
 8018364:	68bb      	ldr	r3, [r7, #8]
 8018366:	8b5b      	ldrh	r3, [r3, #26]
 8018368:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	3304      	adds	r3, #4
 801836e:	4618      	mov	r0, r3
 8018370:	f7fb f9c1 	bl	80136f6 <lv_ll_get_tail>
 8018374:	6178      	str	r0, [r7, #20]
 8018376:	e02e      	b.n	80183d6 <lv_cont_layout_row+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018378:	6978      	ldr	r0, [r7, #20]
 801837a:	f7ee ff25 	bl	80071c8 <lv_obj_get_hidden>
 801837e:	4603      	mov	r3, r0
 8018380:	2b00      	cmp	r3, #0
 8018382:	d120      	bne.n	80183c6 <lv_cont_layout_row+0xc6>
 8018384:	2104      	movs	r1, #4
 8018386:	6978      	ldr	r0, [r7, #20]
 8018388:	f7ee ff52 	bl	8007230 <lv_obj_is_protected>
 801838c:	4603      	mov	r3, r0
 801838e:	2b00      	cmp	r3, #0
 8018390:	d119      	bne.n	80183c6 <lv_cont_layout_row+0xc6>

        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8018392:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8018396:	7cfa      	ldrb	r2, [r7, #19]
 8018398:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	460b      	mov	r3, r1
 80183a0:	6879      	ldr	r1, [r7, #4]
 80183a2:	6978      	ldr	r0, [r7, #20]
 80183a4:	f7ed ff9e 	bl	80062e4 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 80183a8:	6978      	ldr	r0, [r7, #20]
 80183aa:	f7ee fe85 	bl	80070b8 <lv_obj_get_width>
 80183ae:	4603      	mov	r3, r0
 80183b0:	461a      	mov	r2, r3
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80183b8:	4413      	add	r3, r2
 80183ba:	b29a      	uxth	r2, r3
 80183bc:	89fb      	ldrh	r3, [r7, #14]
 80183be:	4413      	add	r3, r2
 80183c0:	b29b      	uxth	r3, r3
 80183c2:	81fb      	strh	r3, [r7, #14]
 80183c4:	e000      	b.n	80183c8 <lv_cont_layout_row+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80183c6:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	3304      	adds	r3, #4
 80183cc:	6979      	ldr	r1, [r7, #20]
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fb f9be 	bl	8013750 <lv_ll_get_prev>
 80183d4:	6178      	str	r0, [r7, #20]
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d1cd      	bne.n	8018378 <lv_cont_layout_row+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80183dc:	2101      	movs	r1, #1
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7ee fcb5 	bl	8006d4e <lv_obj_clear_protect>
}
 80183e4:	bf00      	nop
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}

080183ec <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b088      	sub	sp, #32
 80183f0:	af02      	add	r7, sp, #8
 80183f2:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7ee fe8f 	bl	8007118 <lv_obj_get_style>
 80183fa:	60b8      	str	r0, [r7, #8]
    uint32_t obj_num         = 0;
 80183fc:	2300      	movs	r3, #0
 80183fe:	613b      	str	r3, [r7, #16]
    lv_coord_t h_tot         = 0;
 8018400:	2300      	movs	r3, #0
 8018402:	81fb      	strh	r3, [r7, #14]

    LV_LL_READ(cont->child_ll, child)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	3304      	adds	r3, #4
 8018408:	4618      	mov	r0, r3
 801840a:	f7fb f961 	bl	80136d0 <lv_ll_get_head>
 801840e:	6178      	str	r0, [r7, #20]
 8018410:	e026      	b.n	8018460 <lv_cont_layout_center+0x74>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018412:	6978      	ldr	r0, [r7, #20]
 8018414:	f7ee fed8 	bl	80071c8 <lv_obj_get_hidden>
 8018418:	4603      	mov	r3, r0
 801841a:	2b00      	cmp	r3, #0
 801841c:	d118      	bne.n	8018450 <lv_cont_layout_center+0x64>
 801841e:	2104      	movs	r1, #4
 8018420:	6978      	ldr	r0, [r7, #20]
 8018422:	f7ee ff05 	bl	8007230 <lv_obj_is_protected>
 8018426:	4603      	mov	r3, r0
 8018428:	2b00      	cmp	r3, #0
 801842a:	d111      	bne.n	8018450 <lv_cont_layout_center+0x64>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 801842c:	6978      	ldr	r0, [r7, #20]
 801842e:	f7ee fe51 	bl	80070d4 <lv_obj_get_height>
 8018432:	4603      	mov	r3, r0
 8018434:	461a      	mov	r2, r3
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801843c:	4413      	add	r3, r2
 801843e:	b29a      	uxth	r2, r3
 8018440:	89fb      	ldrh	r3, [r7, #14]
 8018442:	4413      	add	r3, r2
 8018444:	b29b      	uxth	r3, r3
 8018446:	81fb      	strh	r3, [r7, #14]
        obj_num++;
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	3301      	adds	r3, #1
 801844c:	613b      	str	r3, [r7, #16]
 801844e:	e000      	b.n	8018452 <lv_cont_layout_center+0x66>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018450:	bf00      	nop
    LV_LL_READ(cont->child_ll, child)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	3304      	adds	r3, #4
 8018456:	6979      	ldr	r1, [r7, #20]
 8018458:	4618      	mov	r0, r3
 801845a:	f7fb f95f 	bl	801371c <lv_ll_get_next>
 801845e:	6178      	str	r0, [r7, #20]
 8018460:	697b      	ldr	r3, [r7, #20]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d1d5      	bne.n	8018412 <lv_cont_layout_center+0x26>
    }

    if(obj_num == 0) return;
 8018466:	693b      	ldr	r3, [r7, #16]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d05c      	beq.n	8018526 <lv_cont_layout_center+0x13a>

    h_tot -= style->body.padding.inner;
 801846c:	89fa      	ldrh	r2, [r7, #14]
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018474:	b29b      	uxth	r3, r3
 8018476:	1ad3      	subs	r3, r2, r3
 8018478:	b29b      	uxth	r3, r3
 801847a:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801847c:	2101      	movs	r1, #1
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f7ee fc50 	bl	8006d24 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = -(h_tot / 2);
 8018484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018488:	0fda      	lsrs	r2, r3, #31
 801848a:	4413      	add	r3, r2
 801848c:	105b      	asrs	r3, r3, #1
 801848e:	b21b      	sxth	r3, r3
 8018490:	b29b      	uxth	r3, r3
 8018492:	425b      	negs	r3, r3
 8018494:	b29b      	uxth	r3, r3
 8018496:	81bb      	strh	r3, [r7, #12]
    LV_LL_READ_BACK(cont->child_ll, child)
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	3304      	adds	r3, #4
 801849c:	4618      	mov	r0, r3
 801849e:	f7fb f92a 	bl	80136f6 <lv_ll_get_tail>
 80184a2:	6178      	str	r0, [r7, #20]
 80184a4:	e037      	b.n	8018516 <lv_cont_layout_center+0x12a>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80184a6:	6978      	ldr	r0, [r7, #20]
 80184a8:	f7ee fe8e 	bl	80071c8 <lv_obj_get_hidden>
 80184ac:	4603      	mov	r3, r0
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d129      	bne.n	8018506 <lv_cont_layout_center+0x11a>
 80184b2:	2104      	movs	r1, #4
 80184b4:	6978      	ldr	r0, [r7, #20]
 80184b6:	f7ee febb 	bl	8007230 <lv_obj_is_protected>
 80184ba:	4603      	mov	r3, r0
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d122      	bne.n	8018506 <lv_cont_layout_center+0x11a>

        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 80184c0:	6978      	ldr	r0, [r7, #20]
 80184c2:	f7ee fe07 	bl	80070d4 <lv_obj_get_height>
 80184c6:	4603      	mov	r3, r0
 80184c8:	0fda      	lsrs	r2, r3, #31
 80184ca:	4413      	add	r3, r2
 80184cc:	105b      	asrs	r3, r3, #1
 80184ce:	b21b      	sxth	r3, r3
 80184d0:	b29a      	uxth	r2, r3
 80184d2:	89bb      	ldrh	r3, [r7, #12]
 80184d4:	4413      	add	r3, r2
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	b21b      	sxth	r3, r3
 80184da:	9300      	str	r3, [sp, #0]
 80184dc:	2300      	movs	r3, #0
 80184de:	2200      	movs	r2, #0
 80184e0:	6879      	ldr	r1, [r7, #4]
 80184e2:	6978      	ldr	r0, [r7, #20]
 80184e4:	f7ed fefe 	bl	80062e4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80184e8:	6978      	ldr	r0, [r7, #20]
 80184ea:	f7ee fdf3 	bl	80070d4 <lv_obj_get_height>
 80184ee:	4603      	mov	r3, r0
 80184f0:	461a      	mov	r2, r3
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80184f8:	4413      	add	r3, r2
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	89bb      	ldrh	r3, [r7, #12]
 80184fe:	4413      	add	r3, r2
 8018500:	b29b      	uxth	r3, r3
 8018502:	81bb      	strh	r3, [r7, #12]
 8018504:	e000      	b.n	8018508 <lv_cont_layout_center+0x11c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018506:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	3304      	adds	r3, #4
 801850c:	6979      	ldr	r1, [r7, #20]
 801850e:	4618      	mov	r0, r3
 8018510:	f7fb f91e 	bl	8013750 <lv_ll_get_prev>
 8018514:	6178      	str	r0, [r7, #20]
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d1c4      	bne.n	80184a6 <lv_cont_layout_center+0xba>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801851c:	2101      	movs	r1, #1
 801851e:	6878      	ldr	r0, [r7, #4]
 8018520:	f7ee fc15 	bl	8006d4e <lv_obj_clear_protect>
 8018524:	e000      	b.n	8018528 <lv_cont_layout_center+0x13c>
    if(obj_num == 0) return;
 8018526:	bf00      	nop
}
 8018528:	3718      	adds	r7, #24
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}
	...

08018530 <lv_cont_layout_pretty>:
 * Handle the pretty layout. Put as many object as possible in row
 * then begin a new row
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_pretty(lv_obj_t * cont)
{
 8018530:	b5b0      	push	{r4, r5, r7, lr}
 8018532:	b090      	sub	sp, #64	; 0x40
 8018534:	af02      	add	r7, sp, #8
 8018536:	6078      	str	r0, [r7, #4]
    lv_obj_t * child_rs;  /* Row starter child */
    lv_obj_t * child_rc;  /* Row closer child */
    lv_obj_t * child_tmp; /* Temporary child */
    const lv_style_t * style = lv_obj_get_style(cont);
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ee fded 	bl	8007118 <lv_obj_get_style>
 801853e:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f7ee fdb9 	bl	80070b8 <lv_obj_get_width>
 8018546:	4603      	mov	r3, r0
 8018548:	82fb      	strh	r3, [r7, #22]
    lv_coord_t act_y         = style->body.padding.top;
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	8adb      	ldrh	r3, [r3, #22]
 801854e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/

    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	3304      	adds	r3, #4
 8018554:	4618      	mov	r0, r3
 8018556:	f7fb f8ce 	bl	80136f6 <lv_ll_get_tail>
 801855a:	6378      	str	r0, [r7, #52]	; 0x34
    if(child_rs == NULL) return;                /*Return if no child*/
 801855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801855e:	2b00      	cmp	r3, #0
 8018560:	f000 8180 	beq.w	8018864 <lv_cont_layout_pretty+0x334>

    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018564:	2101      	movs	r1, #1
 8018566:	6878      	ldr	r0, [r7, #4]
 8018568:	f7ee fbdc 	bl	8006d24 <lv_obj_set_protect>

    child_rc = child_rs; /*Initially the the row starter and closer is the same*/
 801856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801856e:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 8018570:	e16d      	b.n	801884e <lv_cont_layout_pretty+0x31e>
        lv_coord_t h_row = 0;
 8018572:	2300      	movs	r3, #0
 8018574:	853b      	strh	r3, [r7, #40]	; 0x28
        lv_coord_t w_row =
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8018576:	69bb      	ldr	r3, [r7, #24]
 8018578:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801857c:	b29a      	uxth	r2, r3
 801857e:	69bb      	ldr	r3, [r7, #24]
 8018580:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018584:	b29b      	uxth	r3, r3
 8018586:	4413      	add	r3, r2
 8018588:	b29b      	uxth	r3, r3
        lv_coord_t w_row =
 801858a:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint32_t obj_num = 0;
 801858c:	2300      	movs	r3, #0
 801858e:	623b      	str	r3, [r7, #32]

        /*Find the row closer object and collect some data*/
        do {
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8018590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018592:	f7ee fe19 	bl	80071c8 <lv_obj_get_hidden>
 8018596:	4603      	mov	r3, r0
 8018598:	f083 0301 	eor.w	r3, r3, #1
 801859c:	b2db      	uxtb	r3, r3
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d04b      	beq.n	801863a <lv_cont_layout_pretty+0x10a>
 80185a2:	2104      	movs	r1, #4
 80185a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185a6:	f7ee fe43 	bl	8007230 <lv_obj_is_protected>
 80185aa:	4603      	mov	r3, r0
 80185ac:	f083 0301 	eor.w	r3, r3, #1
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d041      	beq.n	801863a <lv_cont_layout_pretty+0x10a>
                /*If this object is already not fit then break*/
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80185b6:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 80185ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185bc:	f7ee fd7c 	bl	80070b8 <lv_obj_get_width>
 80185c0:	4603      	mov	r3, r0
 80185c2:	18e2      	adds	r2, r4, r3
 80185c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185c8:	429a      	cmp	r2, r3
 80185ca:	dd0d      	ble.n	80185e8 <lv_cont_layout_pretty+0xb8>
                    /*Step back one child because the last already not fit, so the previous is the
                     * closer*/
                    if(child_rc != NULL && obj_num != 0) {
 80185cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d043      	beq.n	801865a <lv_cont_layout_pretty+0x12a>
 80185d2:	6a3b      	ldr	r3, [r7, #32]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d040      	beq.n	801865a <lv_cont_layout_pretty+0x12a>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	3304      	adds	r3, #4
 80185dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80185de:	4618      	mov	r0, r3
 80185e0:	f7fb f89c 	bl	801371c <lv_ll_get_next>
 80185e4:	6338      	str	r0, [r7, #48]	; 0x30
                    }
                    break;
 80185e6:	e038      	b.n	801865a <lv_cont_layout_pretty+0x12a>
                }
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80185e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185ea:	f7ee fd65 	bl	80070b8 <lv_obj_get_width>
 80185ee:	4603      	mov	r3, r0
 80185f0:	461a      	mov	r2, r3
 80185f2:	69bb      	ldr	r3, [r7, #24]
 80185f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80185f8:	4413      	add	r3, r2
 80185fa:	b29a      	uxth	r2, r3
 80185fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80185fe:	4413      	add	r3, r2
 8018600:	b29b      	uxth	r3, r3
 8018602:	84fb      	strh	r3, [r7, #38]	; 0x26
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8018604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018606:	f7ee fd65 	bl	80070d4 <lv_obj_get_height>
 801860a:	4603      	mov	r3, r0
 801860c:	461a      	mov	r2, r3
 801860e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8018612:	4293      	cmp	r3, r2
 8018614:	dc04      	bgt.n	8018620 <lv_cont_layout_pretty+0xf0>
 8018616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018618:	f7ee fd5c 	bl	80070d4 <lv_obj_get_height>
 801861c:	4603      	mov	r3, r0
 801861e:	e001      	b.n	8018624 <lv_cont_layout_pretty+0xf4>
 8018620:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8018624:	853b      	strh	r3, [r7, #40]	; 0x28
                obj_num++;
 8018626:	6a3b      	ldr	r3, [r7, #32]
 8018628:	3301      	adds	r3, #1
 801862a:	623b      	str	r3, [r7, #32]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801862c:	2108      	movs	r1, #8
 801862e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018630:	f7ee fdfe 	bl	8007230 <lv_obj_is_protected>
 8018634:	4603      	mov	r3, r0
 8018636:	2b00      	cmp	r3, #0
 8018638:	d111      	bne.n	801865e <lv_cont_layout_pretty+0x12e>
                    break; /*If can not be followed by an other object then break here*/
            }
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	3304      	adds	r3, #4
 801863e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018640:	4618      	mov	r0, r3
 8018642:	f7fb f885 	bl	8013750 <lv_ll_get_prev>
 8018646:	6338      	str	r0, [r7, #48]	; 0x30
            if(obj_num == 0)
 8018648:	6a3b      	ldr	r3, [r7, #32]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d101      	bne.n	8018652 <lv_cont_layout_pretty+0x122>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
 801864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018650:	637b      	str	r3, [r7, #52]	; 0x34
                                        next as first */
        } while(child_rc != NULL);
 8018652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018654:	2b00      	cmp	r3, #0
 8018656:	d19b      	bne.n	8018590 <lv_cont_layout_pretty+0x60>
 8018658:	e002      	b.n	8018660 <lv_cont_layout_pretty+0x130>
                    break;
 801865a:	bf00      	nop
 801865c:	e000      	b.n	8018660 <lv_cont_layout_pretty+0x130>
                    break; /*If can not be followed by an other object then break here*/
 801865e:	bf00      	nop

        /*If the object is too long  then align it to the middle*/
        if(obj_num == 0) {
 8018660:	6a3b      	ldr	r3, [r7, #32]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d112      	bne.n	801868c <lv_cont_layout_pretty+0x15c>
            if(child_rc != NULL) {
 8018666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018668:	2b00      	cmp	r3, #0
 801866a:	f000 80d9 	beq.w	8018820 <lv_cont_layout_pretty+0x2f0>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801866e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8018672:	9300      	str	r3, [sp, #0]
 8018674:	2300      	movs	r3, #0
 8018676:	2202      	movs	r2, #2
 8018678:	6879      	ldr	r1, [r7, #4]
 801867a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801867c:	f7ed fe32 	bl	80062e4 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8018680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018682:	f7ee fd27 	bl	80070d4 <lv_obj_get_height>
 8018686:	4603      	mov	r3, r0
 8018688:	853b      	strh	r3, [r7, #40]	; 0x28
 801868a:	e0c9      	b.n	8018820 <lv_cont_layout_pretty+0x2f0>
            }
        }
        /*If there is only one object in the row then align it to the middle*/
        else if(obj_num == 1) {
 801868c:	6a3b      	ldr	r3, [r7, #32]
 801868e:	2b01      	cmp	r3, #1
 8018690:	d109      	bne.n	80186a6 <lv_cont_layout_pretty+0x176>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8018692:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8018696:	9300      	str	r3, [sp, #0]
 8018698:	2300      	movs	r3, #0
 801869a:	2202      	movs	r2, #2
 801869c:	6879      	ldr	r1, [r7, #4]
 801869e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80186a0:	f7ed fe20 	bl	80062e4 <lv_obj_align>
 80186a4:	e0bc      	b.n	8018820 <lv_cont_layout_pretty+0x2f0>
        }
        /*If there are two object in the row then align them proportionally*/
        else if(obj_num == 2) {
 80186a6:	6a3b      	ldr	r3, [r7, #32]
 80186a8:	2b02      	cmp	r3, #2
 80186aa:	d153      	bne.n	8018754 <lv_cont_layout_pretty+0x224>
            lv_obj_t * obj1 = child_rs;
 80186ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186ae:	613b      	str	r3, [r7, #16]
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	3304      	adds	r3, #4
 80186b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7fb f84a 	bl	8013750 <lv_ll_get_prev>
 80186bc:	60f8      	str	r0, [r7, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 80186be:	6938      	ldr	r0, [r7, #16]
 80186c0:	f7ee fcfa 	bl	80070b8 <lv_obj_get_width>
 80186c4:	4603      	mov	r3, r0
 80186c6:	b29c      	uxth	r4, r3
 80186c8:	68f8      	ldr	r0, [r7, #12]
 80186ca:	f7ee fcf5 	bl	80070b8 <lv_obj_get_width>
 80186ce:	4603      	mov	r3, r0
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	4423      	add	r3, r4
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t pad  = (w_obj - w_row) / 3;
 80186d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80186e0:	1ad3      	subs	r3, r2, r3
 80186e2:	4a62      	ldr	r2, [pc, #392]	; (801886c <lv_cont_layout_pretty+0x33c>)
 80186e4:	fb82 1203 	smull	r1, r2, r2, r3
 80186e8:	17db      	asrs	r3, r3, #31
 80186ea:	1ad3      	subs	r3, r2, r3
 80186ec:	817b      	strh	r3, [r7, #10]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80186ee:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80186f2:	6938      	ldr	r0, [r7, #16]
 80186f4:	f7ee fcee 	bl	80070d4 <lv_obj_get_height>
 80186f8:	4603      	mov	r3, r0
 80186fa:	1ae3      	subs	r3, r4, r3
 80186fc:	0fda      	lsrs	r2, r3, #31
 80186fe:	4413      	add	r3, r2
 8018700:	105b      	asrs	r3, r3, #1
 8018702:	b29a      	uxth	r2, r3
 8018704:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018706:	4413      	add	r3, r2
 8018708:	b29b      	uxth	r3, r3
 801870a:	b21b      	sxth	r3, r3
 801870c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	4613      	mov	r3, r2
 8018714:	2201      	movs	r2, #1
 8018716:	6879      	ldr	r1, [r7, #4]
 8018718:	6938      	ldr	r0, [r7, #16]
 801871a:	f7ed fde3 	bl	80062e4 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801871e:	897b      	ldrh	r3, [r7, #10]
 8018720:	425b      	negs	r3, r3
 8018722:	b29b      	uxth	r3, r3
 8018724:	b21d      	sxth	r5, r3
 8018726:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f7ee fcd2 	bl	80070d4 <lv_obj_get_height>
 8018730:	4603      	mov	r3, r0
 8018732:	1ae3      	subs	r3, r4, r3
 8018734:	0fda      	lsrs	r2, r3, #31
 8018736:	4413      	add	r3, r2
 8018738:	105b      	asrs	r3, r3, #1
 801873a:	b29a      	uxth	r2, r3
 801873c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801873e:	4413      	add	r3, r2
 8018740:	b29b      	uxth	r3, r3
 8018742:	b21b      	sxth	r3, r3
 8018744:	9300      	str	r3, [sp, #0]
 8018746:	462b      	mov	r3, r5
 8018748:	2203      	movs	r2, #3
 801874a:	6879      	ldr	r1, [r7, #4]
 801874c:	68f8      	ldr	r0, [r7, #12]
 801874e:	f7ed fdc9 	bl	80062e4 <lv_obj_align>
 8018752:	e065      	b.n	8018820 <lv_cont_layout_pretty+0x2f0>
        }
        /* Align the children (from child_rs to child_rc)*/
        else {
            w_row -= style->body.padding.inner * obj_num;
 8018754:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801875c:	b299      	uxth	r1, r3
 801875e:	6a3b      	ldr	r3, [r7, #32]
 8018760:	b29b      	uxth	r3, r3
 8018762:	fb11 f303 	smulbb	r3, r1, r3
 8018766:	b29b      	uxth	r3, r3
 8018768:	1ad3      	subs	r3, r2, r3
 801876a:	b29b      	uxth	r3, r3
 801876c:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 801876e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018772:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018776:	1ad3      	subs	r3, r2, r3
 8018778:	461a      	mov	r2, r3
 801877a:	6a3b      	ldr	r3, [r7, #32]
 801877c:	3b01      	subs	r3, #1
 801877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018782:	82bb      	strh	r3, [r7, #20]
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	8b5b      	ldrh	r3, [r3, #26]
 8018788:	83fb      	strh	r3, [r7, #30]
            child_tmp           = child_rs;
 801878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801878c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801878e:	e042      	b.n	8018816 <lv_cont_layout_pretty+0x2e6>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8018790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018792:	f7ee fd19 	bl	80071c8 <lv_obj_get_hidden>
 8018796:	4603      	mov	r3, r0
 8018798:	f083 0301 	eor.w	r3, r3, #1
 801879c:	b2db      	uxtb	r3, r3
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d02e      	beq.n	8018800 <lv_cont_layout_pretty+0x2d0>
 80187a2:	2104      	movs	r1, #4
 80187a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187a6:	f7ee fd43 	bl	8007230 <lv_obj_is_protected>
 80187aa:	4603      	mov	r3, r0
 80187ac:	f083 0301 	eor.w	r3, r3, #1
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d024      	beq.n	8018800 <lv_cont_layout_pretty+0x2d0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 80187b6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80187ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187bc:	f7ee fc8a 	bl	80070d4 <lv_obj_get_height>
 80187c0:	4603      	mov	r3, r0
 80187c2:	1ae3      	subs	r3, r4, r3
 80187c4:	0fda      	lsrs	r2, r3, #31
 80187c6:	4413      	add	r3, r2
 80187c8:	105b      	asrs	r3, r3, #1
 80187ca:	b29a      	uxth	r2, r3
 80187cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80187ce:	4413      	add	r3, r2
 80187d0:	b29b      	uxth	r3, r3
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 80187d2:	b21b      	sxth	r3, r3
 80187d4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	4613      	mov	r3, r2
 80187dc:	2201      	movs	r2, #1
 80187de:	6879      	ldr	r1, [r7, #4]
 80187e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187e2:	f7ed fd7f 	bl	80062e4 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 80187e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187e8:	f7ee fc66 	bl	80070b8 <lv_obj_get_width>
 80187ec:	4603      	mov	r3, r0
 80187ee:	461a      	mov	r2, r3
 80187f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80187f4:	4413      	add	r3, r2
 80187f6:	b29a      	uxth	r2, r3
 80187f8:	8bfb      	ldrh	r3, [r7, #30]
 80187fa:	4413      	add	r3, r2
 80187fc:	b29b      	uxth	r3, r3
 80187fe:	83fb      	strh	r3, [r7, #30]
                }
                if(child_tmp == child_rc) break;
 8018800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018804:	429a      	cmp	r2, r3
 8018806:	d00a      	beq.n	801881e <lv_cont_layout_pretty+0x2ee>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	3304      	adds	r3, #4
 801880c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801880e:	4618      	mov	r0, r3
 8018810:	f7fa ff9e 	bl	8013750 <lv_ll_get_prev>
 8018814:	62f8      	str	r0, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 8018816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018818:	2b00      	cmp	r3, #0
 801881a:	d1b9      	bne.n	8018790 <lv_cont_layout_pretty+0x260>
 801881c:	e000      	b.n	8018820 <lv_cont_layout_pretty+0x2f0>
                if(child_tmp == child_rc) break;
 801881e:	bf00      	nop
            }
        }

        if(child_rc == NULL) break;
 8018820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018822:	2b00      	cmp	r3, #0
 8018824:	d018      	beq.n	8018858 <lv_cont_layout_pretty+0x328>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8018826:	69bb      	ldr	r3, [r7, #24]
 8018828:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801882c:	b29a      	uxth	r2, r3
 801882e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018830:	4413      	add	r3, r2
 8018832:	b29a      	uxth	r2, r3
 8018834:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018836:	4413      	add	r3, r2
 8018838:	b29b      	uxth	r3, r3
 801883a:	857b      	strh	r3, [r7, #42]	; 0x2a
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	3304      	adds	r3, #4
 8018840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018842:	4618      	mov	r0, r3
 8018844:	f7fa ff84 	bl	8013750 <lv_ll_get_prev>
 8018848:	6378      	str	r0, [r7, #52]	; 0x34
        child_rc = child_rs;
 801884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801884c:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 801884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018850:	2b00      	cmp	r3, #0
 8018852:	f47f ae8e 	bne.w	8018572 <lv_cont_layout_pretty+0x42>
 8018856:	e000      	b.n	801885a <lv_cont_layout_pretty+0x32a>
        if(child_rc == NULL) break;
 8018858:	bf00      	nop
    }
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801885a:	2101      	movs	r1, #1
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7ee fa76 	bl	8006d4e <lv_obj_clear_protect>
 8018862:	e000      	b.n	8018866 <lv_cont_layout_pretty+0x336>
    if(child_rs == NULL) return;                /*Return if no child*/
 8018864:	bf00      	nop
}
 8018866:	3738      	adds	r7, #56	; 0x38
 8018868:	46bd      	mov	sp, r7
 801886a:	bdb0      	pop	{r4, r5, r7, pc}
 801886c:	55555556 	.word	0x55555556

08018870 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b08a      	sub	sp, #40	; 0x28
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f7ee fc4d 	bl	8007118 <lv_obj_get_style>
 801887e:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7ee fc19 	bl	80070b8 <lv_obj_get_width>
 8018886:	4603      	mov	r3, r0
 8018888:	82fb      	strh	r3, [r7, #22]
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801888a:	2100      	movs	r1, #0
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	f7ee fbb5 	bl	8006ffc <lv_obj_get_child>
 8018892:	4603      	mov	r3, r0
 8018894:	4618      	mov	r0, r3
 8018896:	f7ee fc0f 	bl	80070b8 <lv_obj_get_width>
 801889a:	4603      	mov	r3, r0
 801889c:	82bb      	strh	r3, [r7, #20]
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801889e:	2100      	movs	r1, #0
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7ee fbab 	bl	8006ffc <lv_obj_get_child>
 80188a6:	4603      	mov	r3, r0
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7ee fc13 	bl	80070d4 <lv_obj_get_height>
 80188ae:	4603      	mov	r3, r0
 80188b0:	827b      	strh	r3, [r7, #18]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 80188b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80188b6:	69ba      	ldr	r2, [r7, #24]
 80188b8:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80188bc:	1a9b      	subs	r3, r3, r2
 80188be:	69ba      	ldr	r2, [r7, #24]
 80188c0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80188c4:	1a9a      	subs	r2, r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 80188c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80188ca:	69b9      	ldr	r1, [r7, #24]
 80188cc:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 80188d0:	440b      	add	r3, r1
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 80188d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80188d6:	823b      	strh	r3, [r7, #16]
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 80188d8:	8a3b      	ldrh	r3, [r7, #16]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	d918      	bls.n	8018910 <lv_cont_layout_grid+0xa0>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 80188de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80188e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80188e6:	69b9      	ldr	r1, [r7, #24]
 80188e8:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80188ec:	1a5b      	subs	r3, r3, r1
 80188ee:	69b9      	ldr	r1, [r7, #24]
 80188f0:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 80188f4:	1a5b      	subs	r3, r3, r1
 80188f6:	441a      	add	r2, r3
 80188f8:	8a3b      	ldrh	r3, [r7, #16]
 80188fa:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80188fe:	fb01 f303 	mul.w	r3, r1, r3
 8018902:	1ad2      	subs	r2, r2, r3
                (obj_row - 1);
 8018904:	8a3b      	ldrh	r3, [r7, #16]
 8018906:	3b01      	subs	r3, #1
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 8018908:	fb92 f3f3 	sdiv	r3, r2, r3
 801890c:	847b      	strh	r3, [r7, #34]	; 0x22
 801890e:	e010      	b.n	8018932 <lv_cont_layout_grid+0xc2>
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
 8018910:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018914:	0fda      	lsrs	r2, r3, #31
 8018916:	4413      	add	r3, r2
 8018918:	105b      	asrs	r3, r3, #1
 801891a:	b21b      	sxth	r3, r3
 801891c:	b29a      	uxth	r2, r3
 801891e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018922:	0fd9      	lsrs	r1, r3, #31
 8018924:	440b      	add	r3, r1
 8018926:	105b      	asrs	r3, r3, #1
 8018928:	b21b      	sxth	r3, r3
 801892a:	b29b      	uxth	r3, r3
 801892c:	1ad3      	subs	r3, r2, r3
 801892e:	b29b      	uxth	r3, r3
 8018930:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018938:	b29a      	uxth	r2, r3
 801893a:	8a7b      	ldrh	r3, [r7, #18]
 801893c:	4413      	add	r3, r2
 801893e:	b29b      	uxth	r3, r3
 8018940:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018942:	2101      	movs	r1, #1
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f7ee f9ed 	bl	8006d24 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t act_x = style->body.padding.left;
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	8b5b      	ldrh	r3, [r3, #26]
 801894e:	843b      	strh	r3, [r7, #32]
    lv_coord_t act_y = style->body.padding.top;
 8018950:	69bb      	ldr	r3, [r7, #24]
 8018952:	8adb      	ldrh	r3, [r3, #22]
 8018954:	83fb      	strh	r3, [r7, #30]
    uint16_t obj_cnt = 0;
 8018956:	2300      	movs	r3, #0
 8018958:	83bb      	strh	r3, [r7, #28]
    LV_LL_READ_BACK(cont->child_ll, child)
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	3304      	adds	r3, #4
 801895e:	4618      	mov	r0, r3
 8018960:	f7fa fec9 	bl	80136f6 <lv_ll_get_tail>
 8018964:	6278      	str	r0, [r7, #36]	; 0x24
 8018966:	e03f      	b.n	80189e8 <lv_cont_layout_grid+0x178>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801896a:	f7ee fc2d 	bl	80071c8 <lv_obj_get_hidden>
 801896e:	4603      	mov	r3, r0
 8018970:	2b00      	cmp	r3, #0
 8018972:	d131      	bne.n	80189d8 <lv_cont_layout_grid+0x168>
 8018974:	2104      	movs	r1, #4
 8018976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018978:	f7ee fc5a 	bl	8007230 <lv_obj_is_protected>
 801897c:	4603      	mov	r3, r0
 801897e:	2b00      	cmp	r3, #0
 8018980:	d12a      	bne.n	80189d8 <lv_cont_layout_grid+0x168>

        if(obj_row > 1) {
 8018982:	8a3b      	ldrh	r3, [r7, #16]
 8018984:	2b01      	cmp	r3, #1
 8018986:	d90d      	bls.n	80189a4 <lv_cont_layout_grid+0x134>
            lv_obj_set_pos(child, act_x, act_y);
 8018988:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801898c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018990:	4619      	mov	r1, r3
 8018992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018994:	f7ed fb4e 	bl	8006034 <lv_obj_set_pos>
            act_x += x_ofs;
 8018998:	8c3a      	ldrh	r2, [r7, #32]
 801899a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801899c:	4413      	add	r3, r2
 801899e:	b29b      	uxth	r3, r3
 80189a0:	843b      	strh	r3, [r7, #32]
 80189a2:	e007      	b.n	80189b4 <lv_cont_layout_grid+0x144>
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
 80189a4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80189a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80189ac:	4619      	mov	r1, r3
 80189ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189b0:	f7ed fb40 	bl	8006034 <lv_obj_set_pos>
        }
        obj_cnt++;
 80189b4:	8bbb      	ldrh	r3, [r7, #28]
 80189b6:	3301      	adds	r3, #1
 80189b8:	83bb      	strh	r3, [r7, #28]

        if(obj_cnt >= obj_row) {
 80189ba:	8bba      	ldrh	r2, [r7, #28]
 80189bc:	8a3b      	ldrh	r3, [r7, #16]
 80189be:	429a      	cmp	r2, r3
 80189c0:	d30b      	bcc.n	80189da <lv_cont_layout_grid+0x16a>
            obj_cnt = 0;
 80189c2:	2300      	movs	r3, #0
 80189c4:	83bb      	strh	r3, [r7, #28]
            act_x   = style->body.padding.left;
 80189c6:	69bb      	ldr	r3, [r7, #24]
 80189c8:	8b5b      	ldrh	r3, [r3, #26]
 80189ca:	843b      	strh	r3, [r7, #32]
            act_y += y_ofs;
 80189cc:	8bfa      	ldrh	r2, [r7, #30]
 80189ce:	89fb      	ldrh	r3, [r7, #14]
 80189d0:	4413      	add	r3, r2
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	83fb      	strh	r3, [r7, #30]
 80189d6:	e000      	b.n	80189da <lv_cont_layout_grid+0x16a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80189d8:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	3304      	adds	r3, #4
 80189de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7fa feb5 	bl	8013750 <lv_ll_get_prev>
 80189e6:	6278      	str	r0, [r7, #36]	; 0x24
 80189e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d1bc      	bne.n	8018968 <lv_cont_layout_grid+0xf8>
        }
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80189ee:	2101      	movs	r1, #1
 80189f0:	6878      	ldr	r0, [r7, #4]
 80189f2:	f7ee f9ac 	bl	8006d4e <lv_obj_clear_protect>
}
 80189f6:	bf00      	nop
 80189f8:	3728      	adds	r7, #40	; 0x28
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}

080189fe <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 80189fe:	b580      	push	{r7, lr}
 8018a00:	b090      	sub	sp, #64	; 0x40
 8018a02:	af00      	add	r7, sp, #0
 8018a04:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f7ee fc41 	bl	800728e <lv_obj_get_ext_attr>
 8018a0c:	63b8      	str	r0, [r7, #56]	; 0x38

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8018a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d115      	bne.n	8018a48 <lv_cont_refr_autofit+0x4a>
 8018a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d10e      	bne.n	8018a48 <lv_cont_refr_autofit+0x4a>
 8018a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2c:	785b      	ldrb	r3, [r3, #1]
 8018a2e:	f003 0303 	and.w	r3, r3, #3
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d107      	bne.n	8018a48 <lv_cont_refr_autofit+0x4a>
       ext->fit_bottom == LV_FIT_NONE) {
 8018a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3a:	785b      	ldrb	r3, [r3, #1]
 8018a3c:	f003 030c 	and.w	r3, r3, #12
 8018a40:	b2db      	uxtb	r3, r3
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	f000 81c8 	beq.w	8018dd8 <lv_cont_refr_autofit+0x3da>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7ee fb65 	bl	8007118 <lv_obj_get_style>
 8018a4e:	6378      	str	r0, [r7, #52]	; 0x34
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 8018a50:	6878      	ldr	r0, [r7, #4]
 8018a52:	f7ee fac7 	bl	8006fe4 <lv_obj_get_parent>
 8018a56:	6338      	str	r0, [r7, #48]	; 0x30
    const lv_style_t * par_style = lv_obj_get_style(par);
 8018a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a5a:	f7ee fb5d 	bl	8007118 <lv_obj_get_style>
 8018a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
 8018a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a62:	f103 0210 	add.w	r2, r3, #16
 8018a66:	f107 0310 	add.w	r3, r7, #16
 8018a6a:	4611      	mov	r1, r2
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7ff f95d 	bl	8017d2c <lv_area_copy>
    flood_area.x1 += par_style->body.padding.left;
 8018a72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	4413      	add	r3, r2
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	b21b      	sxth	r3, r3
 8018a86:	823b      	strh	r3, [r7, #16]
    flood_area.x2 -= par_style->body.padding.right;
 8018a88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018a8c:	b29a      	uxth	r2, r3
 8018a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a90:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018a94:	b29b      	uxth	r3, r3
 8018a96:	1ad3      	subs	r3, r2, r3
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	b21b      	sxth	r3, r3
 8018a9c:	82bb      	strh	r3, [r7, #20]
    flood_area.y1 += par_style->body.padding.top;
 8018a9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	4413      	add	r3, r2
 8018aae:	b29b      	uxth	r3, r3
 8018ab0:	b21b      	sxth	r3, r3
 8018ab2:	827b      	strh	r3, [r7, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 8018ab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018abc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	1ad3      	subs	r3, r2, r3
 8018ac4:	b29b      	uxth	r3, r3
 8018ac6:	b21b      	sxth	r3, r3
 8018ac8:	82fb      	strh	r3, [r7, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 8018aca:	f107 0318 	add.w	r3, r7, #24
 8018ace:	4619      	mov	r1, r3
 8018ad0:	6878      	ldr	r0, [r7, #4]
 8018ad2:	f7ee fab0 	bl	8007036 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 8018ad6:	f107 0320 	add.w	r3, r7, #32
 8018ada:	4619      	mov	r1, r3
 8018adc:	6878      	ldr	r0, [r7, #4]
 8018ade:	f7ee faaa 	bl	8007036 <lv_obj_get_coords>

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	3304      	adds	r3, #4
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7fa fe91 	bl	801380e <lv_ll_is_empty>
 8018aec:	4603      	mov	r3, r0
 8018aee:	f083 0301 	eor.w	r3, r3, #1
 8018af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(has_children) {
 8018af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d078      	beq.n	8018bf0 <lv_cont_refr_autofit+0x1f2>
        tight_area.x1 = LV_COORD_MAX;
 8018afe:	f647 4318 	movw	r3, #31768	; 0x7c18
 8018b02:	843b      	strh	r3, [r7, #32]
        tight_area.y1 = LV_COORD_MAX;
 8018b04:	f647 4318 	movw	r3, #31768	; 0x7c18
 8018b08:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.x2 = LV_COORD_MIN;
 8018b0a:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8018b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y2 = LV_COORD_MIN;
 8018b10:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8018b14:	84fb      	strh	r3, [r7, #38]	; 0x26

        LV_LL_READ(cont->child_ll, child_i)
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	3304      	adds	r3, #4
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7fa fdd8 	bl	80136d0 <lv_ll_get_head>
 8018b20:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018b22:	e036      	b.n	8018b92 <lv_cont_refr_autofit+0x194>
        {
            if(lv_obj_get_hidden(child_i) != false) continue;
 8018b24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018b26:	f7ee fb4f 	bl	80071c8 <lv_obj_get_hidden>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d128      	bne.n	8018b82 <lv_cont_refr_autofit+0x184>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8018b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b32:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8018b36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b3a:	4293      	cmp	r3, r2
 8018b3c:	bfa8      	it	ge
 8018b3e:	4613      	movge	r3, r2
 8018b40:	b21b      	sxth	r3, r3
 8018b42:	843b      	strh	r3, [r7, #32]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8018b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b46:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018b4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	bfa8      	it	ge
 8018b52:	4613      	movge	r3, r2
 8018b54:	b21b      	sxth	r3, r3
 8018b56:	847b      	strh	r3, [r7, #34]	; 0x22
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8018b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b5a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8018b5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018b62:	4293      	cmp	r3, r2
 8018b64:	bfb8      	it	lt
 8018b66:	4613      	movlt	r3, r2
 8018b68:	b21b      	sxth	r3, r3
 8018b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8018b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b6e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8018b72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018b76:	4293      	cmp	r3, r2
 8018b78:	bfb8      	it	lt
 8018b7a:	4613      	movlt	r3, r2
 8018b7c:	b21b      	sxth	r3, r3
 8018b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018b80:	e000      	b.n	8018b84 <lv_cont_refr_autofit+0x186>
            if(lv_obj_get_hidden(child_i) != false) continue;
 8018b82:	bf00      	nop
        LV_LL_READ(cont->child_ll, child_i)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	3304      	adds	r3, #4
 8018b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7fa fdc6 	bl	801371c <lv_ll_get_next>
 8018b90:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d1c5      	bne.n	8018b24 <lv_cont_refr_autofit+0x126>
        }

        tight_area.x1 -= style->body.padding.left;
 8018b98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b9c:	b29a      	uxth	r2, r3
 8018b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ba0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	1ad3      	subs	r3, r2, r3
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	b21b      	sxth	r3, r3
 8018bac:	843b      	strh	r3, [r7, #32]
        tight_area.x2 += style->body.padding.right;
 8018bae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018bb2:	b29a      	uxth	r2, r3
 8018bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bb6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	4413      	add	r3, r2
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	b21b      	sxth	r3, r3
 8018bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y1 -= style->body.padding.top;
 8018bc4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018bc8:	b29a      	uxth	r2, r3
 8018bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bcc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	1ad3      	subs	r3, r2, r3
 8018bd4:	b29b      	uxth	r3, r3
 8018bd6:	b21b      	sxth	r3, r3
 8018bd8:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.y2 += style->body.padding.bottom;
 8018bda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018bde:	b29a      	uxth	r2, r3
 8018be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018be2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	4413      	add	r3, r2
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	b21b      	sxth	r3, r3
 8018bee:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 8018bf0:	f107 0218 	add.w	r2, r7, #24
 8018bf4:	f107 0308 	add.w	r3, r7, #8
 8018bf8:	4611      	mov	r1, r2
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7ff f896 	bl	8017d2c <lv_area_copy>

    switch(ext->fit_left) {
 8018c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018c08:	b2db      	uxtb	r3, r3
 8018c0a:	2b02      	cmp	r3, #2
 8018c0c:	d008      	beq.n	8018c20 <lv_cont_refr_autofit+0x222>
 8018c0e:	2b03      	cmp	r3, #3
 8018c10:	d00a      	beq.n	8018c28 <lv_cont_refr_autofit+0x22a>
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d000      	beq.n	8018c18 <lv_cont_refr_autofit+0x21a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
 8018c16:	e018      	b.n	8018c4a <lv_cont_refr_autofit+0x24c>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 8018c18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c1c:	813b      	strh	r3, [r7, #8]
 8018c1e:	e014      	b.n	8018c4a <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 8018c20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018c24:	813b      	strh	r3, [r7, #8]
 8018c26:	e010      	b.n	8018c4a <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 8018c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d008      	beq.n	8018c42 <lv_cont_refr_autofit+0x244>
 8018c30:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8018c34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	bfa8      	it	ge
 8018c3c:	4613      	movge	r3, r2
 8018c3e:	b21b      	sxth	r3, r3
 8018c40:	e001      	b.n	8018c46 <lv_cont_refr_autofit+0x248>
 8018c42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018c46:	813b      	strh	r3, [r7, #8]
 8018c48:	bf00      	nop
    }

    switch(ext->fit_right) {
 8018c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	2b02      	cmp	r3, #2
 8018c56:	d008      	beq.n	8018c6a <lv_cont_refr_autofit+0x26c>
 8018c58:	2b03      	cmp	r3, #3
 8018c5a:	d00a      	beq.n	8018c72 <lv_cont_refr_autofit+0x274>
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d000      	beq.n	8018c62 <lv_cont_refr_autofit+0x264>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
 8018c60:	e018      	b.n	8018c94 <lv_cont_refr_autofit+0x296>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 8018c62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018c66:	81bb      	strh	r3, [r7, #12]
 8018c68:	e014      	b.n	8018c94 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 8018c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018c6e:	81bb      	strh	r3, [r7, #12]
 8018c70:	e010      	b.n	8018c94 <lv_cont_refr_autofit+0x296>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8018c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d008      	beq.n	8018c8c <lv_cont_refr_autofit+0x28e>
 8018c7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018c7e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018c82:	4293      	cmp	r3, r2
 8018c84:	bfb8      	it	lt
 8018c86:	4613      	movlt	r3, r2
 8018c88:	b21b      	sxth	r3, r3
 8018c8a:	e001      	b.n	8018c90 <lv_cont_refr_autofit+0x292>
 8018c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018c90:	81bb      	strh	r3, [r7, #12]
 8018c92:	bf00      	nop
    }

    switch(ext->fit_top) {
 8018c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c96:	785b      	ldrb	r3, [r3, #1]
 8018c98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	2b02      	cmp	r3, #2
 8018ca0:	d008      	beq.n	8018cb4 <lv_cont_refr_autofit+0x2b6>
 8018ca2:	2b03      	cmp	r3, #3
 8018ca4:	d00a      	beq.n	8018cbc <lv_cont_refr_autofit+0x2be>
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d000      	beq.n	8018cac <lv_cont_refr_autofit+0x2ae>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
 8018caa:	e018      	b.n	8018cde <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 8018cac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018cb0:	817b      	strh	r3, [r7, #10]
 8018cb2:	e014      	b.n	8018cde <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 8018cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018cb8:	817b      	strh	r3, [r7, #10]
 8018cba:	e010      	b.n	8018cde <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8018cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d008      	beq.n	8018cd6 <lv_cont_refr_autofit+0x2d8>
 8018cc4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8018cc8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018ccc:	4293      	cmp	r3, r2
 8018cce:	bfa8      	it	ge
 8018cd0:	4613      	movge	r3, r2
 8018cd2:	b21b      	sxth	r3, r3
 8018cd4:	e001      	b.n	8018cda <lv_cont_refr_autofit+0x2dc>
 8018cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018cda:	817b      	strh	r3, [r7, #10]
 8018cdc:	bf00      	nop
    }

    switch(ext->fit_bottom) {
 8018cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce0:	785b      	ldrb	r3, [r3, #1]
 8018ce2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018ce6:	b2db      	uxtb	r3, r3
 8018ce8:	2b02      	cmp	r3, #2
 8018cea:	d008      	beq.n	8018cfe <lv_cont_refr_autofit+0x300>
 8018cec:	2b03      	cmp	r3, #3
 8018cee:	d00a      	beq.n	8018d06 <lv_cont_refr_autofit+0x308>
 8018cf0:	2b01      	cmp	r3, #1
 8018cf2:	d000      	beq.n	8018cf6 <lv_cont_refr_autofit+0x2f8>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
 8018cf4:	e018      	b.n	8018d28 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 8018cf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018cfa:	81fb      	strh	r3, [r7, #14]
 8018cfc:	e014      	b.n	8018d28 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 8018cfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d02:	81fb      	strh	r3, [r7, #14]
 8018d04:	e010      	b.n	8018d28 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 8018d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d008      	beq.n	8018d20 <lv_cont_refr_autofit+0x322>
 8018d0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018d16:	4293      	cmp	r3, r2
 8018d18:	bfb8      	it	lt
 8018d1a:	4613      	movlt	r3, r2
 8018d1c:	b21b      	sxth	r3, r3
 8018d1e:	e001      	b.n	8018d24 <lv_cont_refr_autofit+0x326>
 8018d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d24:	81fb      	strh	r3, [r7, #14]
 8018d26:	bf00      	nop
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8018d2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018d32:	429a      	cmp	r2, r3
 8018d34:	d114      	bne.n	8018d60 <lv_cont_refr_autofit+0x362>
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018d3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018d40:	429a      	cmp	r2, r3
 8018d42:	d10d      	bne.n	8018d60 <lv_cont_refr_autofit+0x362>
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8018d4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d106      	bne.n	8018d60 <lv_cont_refr_autofit+0x362>
       cont->coords.y2 != new_area.y2) {
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8018d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d03c      	beq.n	8018dda <lv_cont_refr_autofit+0x3dc>

        lv_obj_invalidate(cont);
 8018d60:	6878      	ldr	r0, [r7, #4]
 8018d62:	f7ed f868 	bl	8005e36 <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	3310      	adds	r3, #16
 8018d6a:	f107 0208 	add.w	r2, r7, #8
 8018d6e:	4611      	mov	r1, r2
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7fe ffdb 	bl	8017d2c <lv_area_copy>
        lv_obj_invalidate(cont);
 8018d76:	6878      	ldr	r0, [r7, #4]
 8018d78:	f7ed f85d 	bl	8005e36 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	69db      	ldr	r3, [r3, #28]
 8018d80:	f107 0218 	add.w	r2, r7, #24
 8018d84:	2102      	movs	r1, #2
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8018d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d8c:	69db      	ldr	r3, [r3, #28]
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	2101      	movs	r1, #1
 8018d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d94:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	f7ee f9aa 	bl	80070f0 <lv_obj_get_auto_realign>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d002      	beq.n	8018da8 <lv_cont_refr_autofit+0x3aa>
            lv_obj_realign(cont);
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ed ff12 	bl	8006bcc <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	3304      	adds	r3, #4
 8018dac:	4618      	mov	r0, r3
 8018dae:	f7fa fc8f 	bl	80136d0 <lv_ll_get_head>
 8018db2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018db4:	e00c      	b.n	8018dd0 <lv_cont_refr_autofit+0x3d2>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8018db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018db8:	69db      	ldr	r3, [r3, #28]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	2103      	movs	r1, #3
 8018dbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018dc0:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	3304      	adds	r3, #4
 8018dc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7fa fca7 	bl	801371c <lv_ll_get_next>
 8018dce:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1ef      	bne.n	8018db6 <lv_cont_refr_autofit+0x3b8>
 8018dd6:	e000      	b.n	8018dda <lv_cont_refr_autofit+0x3dc>
        return;
 8018dd8:	bf00      	nop
        }
    }
}
 8018dda:	3740      	adds	r7, #64	; 0x40
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <lv_img_get_style>:
 * @param img pointer to an image object
 * @param type which style should be get (can be only `LV_IMG_STYLE_MAIN`)
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	460b      	mov	r3, r1
 8018dea:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	f7ee f993 	bl	8007118 <lv_obj_get_style>
 8018df2:	4603      	mov	r3, r0
}
 8018df4:	4618      	mov	r0, r3
 8018df6:	3708      	adds	r7, #8
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}

08018dfc <lv_img_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a image object, if not NULL then the new object will be copied from it
 * @return pointer to the created image
 */
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
 8018e04:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("image create started");

    lv_obj_t * new_img = NULL;
 8018e06:	2300      	movs	r3, #0
 8018e08:	617b      	str	r3, [r7, #20]

    /*Create a basic object*/
    new_img = lv_obj_create(par, copy);
 8018e0a:	6839      	ldr	r1, [r7, #0]
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7ec fcd5 	bl	80057bc <lv_obj_create>
 8018e12:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_img);
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d100      	bne.n	8018e1c <lv_img_create+0x20>
 8018e1a:	e7fe      	b.n	8018e1a <lv_img_create+0x1e>
    if(new_img == NULL) return NULL;
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d101      	bne.n	8018e26 <lv_img_create+0x2a>
 8018e22:	2300      	movs	r3, #0
 8018e24:	e07b      	b.n	8018f1e <lv_img_create+0x122>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 8018e26:	4b40      	ldr	r3, [pc, #256]	; (8018f28 <lv_img_create+0x12c>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d105      	bne.n	8018e3a <lv_img_create+0x3e>
 8018e2e:	6978      	ldr	r0, [r7, #20]
 8018e30:	f7ee fa15 	bl	800725e <lv_obj_get_signal_cb>
 8018e34:	4602      	mov	r2, r0
 8018e36:	4b3c      	ldr	r3, [pc, #240]	; (8018f28 <lv_img_create+0x12c>)
 8018e38:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to image object*/
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8018e3a:	2110      	movs	r1, #16
 8018e3c:	6978      	ldr	r0, [r7, #20]
 8018e3e:	f7ee f859 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 8018e42:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d100      	bne.n	8018e4c <lv_img_create+0x50>
 8018e4a:	e7fe      	b.n	8018e4a <lv_img_create+0x4e>
    if(ext == NULL) return NULL;
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d101      	bne.n	8018e56 <lv_img_create+0x5a>
 8018e52:	2300      	movs	r3, #0
 8018e54:	e063      	b.n	8018f1e <lv_img_create+0x122>

    ext->src       = NULL;
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	2200      	movs	r2, #0
 8018e5a:	601a      	str	r2, [r3, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 8018e5c:	693a      	ldr	r2, [r7, #16]
 8018e5e:	7b13      	ldrb	r3, [r2, #12]
 8018e60:	f043 0303 	orr.w	r3, r3, #3
 8018e64:	7313      	strb	r3, [r2, #12]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 8018e66:	693a      	ldr	r2, [r7, #16]
 8018e68:	7b13      	ldrb	r3, [r2, #12]
 8018e6a:	f36f 03c7 	bfc	r3, #3, #5
 8018e6e:	7313      	strb	r3, [r2, #12]
    ext->w         = lv_obj_get_width(new_img);
 8018e70:	6978      	ldr	r0, [r7, #20]
 8018e72:	f7ee f921 	bl	80070b8 <lv_obj_get_width>
 8018e76:	4603      	mov	r3, r0
 8018e78:	461a      	mov	r2, r3
 8018e7a:	693b      	ldr	r3, [r7, #16]
 8018e7c:	811a      	strh	r2, [r3, #8]
    ext->h         = lv_obj_get_height(new_img);
 8018e7e:	6978      	ldr	r0, [r7, #20]
 8018e80:	f7ee f928 	bl	80070d4 <lv_obj_get_height>
 8018e84:	4603      	mov	r3, r0
 8018e86:	461a      	mov	r2, r3
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	815a      	strh	r2, [r3, #10]
    ext->auto_size = 1;
 8018e8c:	693a      	ldr	r2, [r7, #16]
 8018e8e:	7b13      	ldrb	r3, [r2, #12]
 8018e90:	f043 0304 	orr.w	r3, r3, #4
 8018e94:	7313      	strb	r3, [r2, #12]
    ext->offset.x  = 0;
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	2200      	movs	r2, #0
 8018e9a:	809a      	strh	r2, [r3, #4]
    ext->offset.y  = 0;
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	80da      	strh	r2, [r3, #6]

    /*Init the new object*/
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8018ea2:	4922      	ldr	r1, [pc, #136]	; (8018f2c <lv_img_create+0x130>)
 8018ea4:	6978      	ldr	r0, [r7, #20]
 8018ea6:	f7ee f809 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8018eaa:	4921      	ldr	r1, [pc, #132]	; (8018f30 <lv_img_create+0x134>)
 8018eac:	6978      	ldr	r0, [r7, #20]
 8018eae:	f7ee f813 	bl	8006ed8 <lv_obj_set_design_cb>

    if(copy == NULL) {
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d11a      	bne.n	8018eee <lv_img_create+0xf2>
        lv_obj_set_click(new_img, false);
 8018eb8:	2100      	movs	r1, #0
 8018eba:	6978      	ldr	r0, [r7, #20]
 8018ebc:	f7ed fedd 	bl	8006c7a <lv_obj_set_click>
        /* Enable auto size for non screens
         * because image screens are wallpapers
         * and must be screen sized*/
        if(par != NULL) {
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d009      	beq.n	8018eda <lv_img_create+0xde>
            ext->auto_size = 1;
 8018ec6:	693a      	ldr	r2, [r7, #16]
 8018ec8:	7b13      	ldrb	r3, [r2, #12]
 8018eca:	f043 0304 	orr.w	r3, r3, #4
 8018ece:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	6978      	ldr	r0, [r7, #20]
 8018ed4:	f7ed feab 	bl	8006c2e <lv_obj_set_style>
 8018ed8:	e020      	b.n	8018f1c <lv_img_create+0x120>
        } else {
            ext->auto_size = 0;
 8018eda:	693a      	ldr	r2, [r7, #16]
 8018edc:	7b13      	ldrb	r3, [r2, #12]
 8018ede:	f36f 0382 	bfc	r3, #2, #1
 8018ee2:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8018ee4:	4913      	ldr	r1, [pc, #76]	; (8018f34 <lv_img_create+0x138>)
 8018ee6:	6978      	ldr	r0, [r7, #20]
 8018ee8:	f7ed fea1 	bl	8006c2e <lv_obj_set_style>
 8018eec:	e016      	b.n	8018f1c <lv_img_create+0x120>
        }
    } else {
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018eee:	6838      	ldr	r0, [r7, #0]
 8018ef0:	f7ee f9cd 	bl	800728e <lv_obj_get_ext_attr>
 8018ef4:	60f8      	str	r0, [r7, #12]
        ext->auto_size          = copy_ext->auto_size;
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	7b1b      	ldrb	r3, [r3, #12]
 8018efa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018efe:	b2d9      	uxtb	r1, r3
 8018f00:	693a      	ldr	r2, [r7, #16]
 8018f02:	7b13      	ldrb	r3, [r2, #12]
 8018f04:	f361 0382 	bfi	r3, r1, #2, #1
 8018f08:	7313      	strb	r3, [r2, #12]
        lv_img_set_src(new_img, copy_ext->src);
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	4619      	mov	r1, r3
 8018f10:	6978      	ldr	r0, [r7, #20]
 8018f12:	f000 f811 	bl	8018f38 <lv_img_set_src>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_img);
 8018f16:	6978      	ldr	r0, [r7, #20]
 8018f18:	f7ed fe9b 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("image created");

    return new_img;
 8018f1c:	697b      	ldr	r3, [r7, #20]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3718      	adds	r7, #24
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	20002ad0 	.word	0x20002ad0
 8018f2c:	0801938d 	.word	0x0801938d
 8018f30:	08019137 	.word	0x08019137
 8018f34:	20006c68 	.word	0x20006c68

08018f38 <lv_img_set_src>:
 * Set the pixel map to display by the image
 * @param img pointer to an image object
 * @param data the image data
 */
void lv_img_set_src(lv_obj_t * img, const void * src_img)
{
 8018f38:	b590      	push	{r4, r7, lr}
 8018f3a:	b08d      	sub	sp, #52	; 0x34
 8018f3c:	af04      	add	r7, sp, #16
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8018f42:	6838      	ldr	r0, [r7, #0]
 8018f44:	f7f1 fa1a 	bl	800a37c <lv_img_src_get_type>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	77fb      	strb	r3, [r7, #31]
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f7ee f99e 	bl	800728e <lv_obj_get_ext_attr>
 8018f52:	61b8      	str	r0, [r7, #24]
        default: LV_LOG_WARN("lv_img_set_src: unknown type");
    }
#endif

    /*If the new source type is unknown free the memories of the old source*/
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8018f54:	7ffb      	ldrb	r3, [r7, #31]
 8018f56:	2b03      	cmp	r3, #3
 8018f58:	d11b      	bne.n	8018f92 <lv_img_set_src+0x5a>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8018f5a:	69bb      	ldr	r3, [r7, #24]
 8018f5c:	7b1b      	ldrb	r3, [r3, #12]
 8018f5e:	f003 0303 	and.w	r3, r3, #3
 8018f62:	b2db      	uxtb	r3, r3
 8018f64:	2b02      	cmp	r3, #2
 8018f66:	d006      	beq.n	8018f76 <lv_img_set_src+0x3e>
 8018f68:	69bb      	ldr	r3, [r7, #24]
 8018f6a:	7b1b      	ldrb	r3, [r3, #12]
 8018f6c:	f003 0303 	and.w	r3, r3, #3
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	2b01      	cmp	r3, #1
 8018f74:	d104      	bne.n	8018f80 <lv_img_set_src+0x48>
            lv_mem_free(ext->src);
 8018f76:	69bb      	ldr	r3, [r7, #24]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7fa fd68 	bl	8013a50 <lv_mem_free>
        }
        ext->src      = NULL;
 8018f80:	69bb      	ldr	r3, [r7, #24]
 8018f82:	2200      	movs	r2, #0
 8018f84:	601a      	str	r2, [r3, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8018f86:	69ba      	ldr	r2, [r7, #24]
 8018f88:	7b13      	ldrb	r3, [r2, #12]
 8018f8a:	f043 0303 	orr.w	r3, r3, #3
 8018f8e:	7313      	strb	r3, [r2, #12]
        return;
 8018f90:	e0b8      	b.n	8019104 <lv_img_set_src+0x1cc>
    }

    lv_img_header_t header;
    lv_img_decoder_get_info(src_img, &header);
 8018f92:	f107 030c 	add.w	r3, r7, #12
 8018f96:	4619      	mov	r1, r3
 8018f98:	6838      	ldr	r0, [r7, #0]
 8018f9a:	f7f7 ff3b 	bl	8010e14 <lv_img_decoder_get_info>

    /*Save the source*/
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8018f9e:	7ffb      	ldrb	r3, [r7, #31]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d116      	bne.n	8018fd2 <lv_img_set_src+0x9a>
        LV_LOG_INFO("lv_img_set_src:  `LV_IMG_SRC_VARIABLE` type found");

        /*If memory was allocated because of the previous `src_type` then free it*/
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8018fa4:	69bb      	ldr	r3, [r7, #24]
 8018fa6:	7b1b      	ldrb	r3, [r3, #12]
 8018fa8:	f003 0303 	and.w	r3, r3, #3
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	2b01      	cmp	r3, #1
 8018fb0:	d006      	beq.n	8018fc0 <lv_img_set_src+0x88>
 8018fb2:	69bb      	ldr	r3, [r7, #24]
 8018fb4:	7b1b      	ldrb	r3, [r3, #12]
 8018fb6:	f003 0303 	and.w	r3, r3, #3
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	2b02      	cmp	r3, #2
 8018fbe:	d104      	bne.n	8018fca <lv_img_set_src+0x92>
            lv_mem_free(ext->src);
 8018fc0:	69bb      	ldr	r3, [r7, #24]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7fa fd43 	bl	8013a50 <lv_mem_free>
        }
        ext->src = src_img;
 8018fca:	69bb      	ldr	r3, [r7, #24]
 8018fcc:	683a      	ldr	r2, [r7, #0]
 8018fce:	601a      	str	r2, [r3, #0]
 8018fd0:	e034      	b.n	801903c <lv_img_set_src+0x104>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8018fd2:	7ffb      	ldrb	r3, [r7, #31]
 8018fd4:	2b01      	cmp	r3, #1
 8018fd6:	d002      	beq.n	8018fde <lv_img_set_src+0xa6>
 8018fd8:	7ffb      	ldrb	r3, [r7, #31]
 8018fda:	2b02      	cmp	r3, #2
 8018fdc:	d12e      	bne.n	801903c <lv_img_set_src+0x104>
        /* If the new and the old src are the same then it was only a refresh.*/
        if(ext->src != src_img) {
 8018fde:	69bb      	ldr	r3, [r7, #24]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	683a      	ldr	r2, [r7, #0]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d029      	beq.n	801903c <lv_img_set_src+0x104>
            /*If memory was allocated because of the previous `src_type` then free it*/
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8018fe8:	69bb      	ldr	r3, [r7, #24]
 8018fea:	7b1b      	ldrb	r3, [r3, #12]
 8018fec:	f003 0303 	and.w	r3, r3, #3
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	2b01      	cmp	r3, #1
 8018ff4:	d006      	beq.n	8019004 <lv_img_set_src+0xcc>
 8018ff6:	69bb      	ldr	r3, [r7, #24]
 8018ff8:	7b1b      	ldrb	r3, [r3, #12]
 8018ffa:	f003 0303 	and.w	r3, r3, #3
 8018ffe:	b2db      	uxtb	r3, r3
 8019000:	2b02      	cmp	r3, #2
 8019002:	d104      	bne.n	801900e <lv_img_set_src+0xd6>
                lv_mem_free(ext->src);
 8019004:	69bb      	ldr	r3, [r7, #24]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	4618      	mov	r0, r3
 801900a:	f7fa fd21 	bl	8013a50 <lv_mem_free>
            }
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 801900e:	6838      	ldr	r0, [r7, #0]
 8019010:	f7e7 f8e8 	bl	80001e4 <strlen>
 8019014:	4603      	mov	r3, r0
 8019016:	3301      	adds	r3, #1
 8019018:	4618      	mov	r0, r3
 801901a:	f7fa fcd9 	bl	80139d0 <lv_mem_alloc>
 801901e:	6178      	str	r0, [r7, #20]
            lv_mem_assert(new_str);
 8019020:	697b      	ldr	r3, [r7, #20]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d100      	bne.n	8019028 <lv_img_set_src+0xf0>
 8019026:	e7fe      	b.n	8019026 <lv_img_set_src+0xee>
            if(new_str == NULL) return;
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d069      	beq.n	8019102 <lv_img_set_src+0x1ca>
            strcpy(new_str, src_img);
 801902e:	6839      	ldr	r1, [r7, #0]
 8019030:	6978      	ldr	r0, [r7, #20]
 8019032:	f00e fe3d 	bl	8027cb0 <strcpy>
            ext->src = new_str;
 8019036:	69bb      	ldr	r3, [r7, #24]
 8019038:	697a      	ldr	r2, [r7, #20]
 801903a:	601a      	str	r2, [r3, #0]
        }
    }

    if(src_type == LV_IMG_SRC_SYMBOL) {
 801903c:	7ffb      	ldrb	r3, [r7, #31]
 801903e:	2b02      	cmp	r3, #2
 8019040:	d12b      	bne.n	801909a <lv_img_set_src+0x162>
        /*`lv_img_dsc_get_info` couldn't set the with and height of a font so set it here*/
        const lv_style_t * style = lv_img_get_style(img, LV_IMG_STYLE_MAIN);
 8019042:	2100      	movs	r1, #0
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f7ff fecb 	bl	8018de0 <lv_img_get_style>
 801904a:	6138      	str	r0, [r7, #16]
        lv_point_t size;
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 801904c:	693b      	ldr	r3, [r7, #16]
 801904e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 8019056:	693b      	ldr	r3, [r7, #16]
 8019058:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801905c:	f107 0008 	add.w	r0, r7, #8
 8019060:	2200      	movs	r2, #0
 8019062:	9202      	str	r2, [sp, #8]
 8019064:	f647 4218 	movw	r2, #31768	; 0x7c18
 8019068:	9201      	str	r2, [sp, #4]
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	4623      	mov	r3, r4
 801906e:	460a      	mov	r2, r1
 8019070:	6839      	ldr	r1, [r7, #0]
 8019072:	f7fa fff9 	bl	8014068 <lv_txt_get_size>
                        LV_COORD_MAX, LV_TXT_FLAG_NONE);
        header.w = size.x;
 8019076:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801907a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801907e:	b29a      	uxth	r2, r3
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	f362 2394 	bfi	r3, r2, #10, #11
 8019086:	60fb      	str	r3, [r7, #12]
        header.h = size.y;
 8019088:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801908c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019090:	b29a      	uxth	r2, r3
 8019092:	89fb      	ldrh	r3, [r7, #14]
 8019094:	f362 134f 	bfi	r3, r2, #5, #11
 8019098:	81fb      	strh	r3, [r7, #14]
    }

    ext->src_type = src_type;
 801909a:	7ffb      	ldrb	r3, [r7, #31]
 801909c:	f003 0303 	and.w	r3, r3, #3
 80190a0:	b2d9      	uxtb	r1, r3
 80190a2:	69ba      	ldr	r2, [r7, #24]
 80190a4:	7b13      	ldrb	r3, [r2, #12]
 80190a6:	f361 0301 	bfi	r3, r1, #0, #2
 80190aa:	7313      	strb	r3, [r2, #12]
    ext->w        = header.w;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	b21a      	sxth	r2, r3
 80190b6:	69bb      	ldr	r3, [r7, #24]
 80190b8:	811a      	strh	r2, [r3, #8]
    ext->h        = header.h;
 80190ba:	89fb      	ldrh	r3, [r7, #14]
 80190bc:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	b21a      	sxth	r2, r3
 80190c4:	69bb      	ldr	r3, [r7, #24]
 80190c6:	815a      	strh	r2, [r3, #10]
    ext->cf       = header.cf;
 80190c8:	7b3b      	ldrb	r3, [r7, #12]
 80190ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80190ce:	b2d9      	uxtb	r1, r3
 80190d0:	69ba      	ldr	r2, [r7, #24]
 80190d2:	7b13      	ldrb	r3, [r2, #12]
 80190d4:	f361 03c7 	bfi	r3, r1, #3, #5
 80190d8:	7313      	strb	r3, [r2, #12]

    if(lv_img_get_auto_size(img) != false) {
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 f815 	bl	801910a <lv_img_get_auto_size>
 80190e0:	4603      	mov	r3, r0
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d009      	beq.n	80190fa <lv_img_set_src+0x1c2>
        lv_obj_set_size(img, ext->w, ext->h);
 80190e6:	69bb      	ldr	r3, [r7, #24]
 80190e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80190ec:	69bb      	ldr	r3, [r7, #24]
 80190ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80190f2:	461a      	mov	r2, r3
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f7ed f852 	bl	800619e <lv_obj_set_size>
    }

    lv_obj_invalidate(img);
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7ec fe9b 	bl	8005e36 <lv_obj_invalidate>
 8019100:	e000      	b.n	8019104 <lv_img_set_src+0x1cc>
            if(new_str == NULL) return;
 8019102:	bf00      	nop
}
 8019104:	3724      	adds	r7, #36	; 0x24
 8019106:	46bd      	mov	sp, r7
 8019108:	bd90      	pop	{r4, r7, pc}

0801910a <lv_img_get_auto_size>:
 * Get the auto size enable attribute
 * @param img pointer to an image
 * @return true: auto size is enabled, false: auto size is disabled
 */
bool lv_img_get_auto_size(const lv_obj_t * img)
{
 801910a:	b580      	push	{r7, lr}
 801910c:	b084      	sub	sp, #16
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f7ee f8bb 	bl	800728e <lv_obj_get_ext_attr>
 8019118:	60f8      	str	r0, [r7, #12]

    return ext->auto_size == 0 ? false : true;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	7b1b      	ldrb	r3, [r3, #12]
 801911e:	f003 0304 	and.w	r3, r3, #4
 8019122:	b2db      	uxtb	r3, r3
 8019124:	2b00      	cmp	r3, #0
 8019126:	bf14      	ite	ne
 8019128:	2301      	movne	r3, #1
 801912a:	2300      	moveq	r3, #0
 801912c:	b2db      	uxtb	r3, r3
}
 801912e:	4618      	mov	r0, r3
 8019130:	3710      	adds	r7, #16
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}

08019136 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019136:	b590      	push	{r4, r7, lr}
 8019138:	b0a3      	sub	sp, #140	; 0x8c
 801913a:	af06      	add	r7, sp, #24
 801913c:	60f8      	str	r0, [r7, #12]
 801913e:	60b9      	str	r1, [r7, #8]
 8019140:	4613      	mov	r3, r2
 8019142:	71fb      	strb	r3, [r7, #7]
    const lv_style_t * style = lv_obj_get_style(img);
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7ed ffe7 	bl	8007118 <lv_obj_get_style>
 801914a:	66b8      	str	r0, [r7, #104]	; 0x68
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 801914c:	68f8      	ldr	r0, [r7, #12]
 801914e:	f7ee f89e 	bl	800728e <lv_obj_get_ext_attr>
 8019152:	6678      	str	r0, [r7, #100]	; 0x64

    if(mode == LV_DESIGN_COVER_CHK) {
 8019154:	79fb      	ldrb	r3, [r7, #7]
 8019156:	2b02      	cmp	r3, #2
 8019158:	d12c      	bne.n	80191b4 <lv_img_design+0x7e>
        bool cover = false;
 801915a:	2300      	movs	r3, #0
 801915c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8019160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019162:	7b1b      	ldrb	r3, [r3, #12]
 8019164:	f003 0303 	and.w	r3, r3, #3
 8019168:	b2db      	uxtb	r3, r3
 801916a:	2b03      	cmp	r3, #3
 801916c:	d006      	beq.n	801917c <lv_img_design+0x46>
 801916e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019170:	7b1b      	ldrb	r3, [r3, #12]
 8019172:	f003 0303 	and.w	r3, r3, #3
 8019176:	b2db      	uxtb	r3, r3
 8019178:	2b02      	cmp	r3, #2
 801917a:	d101      	bne.n	8019180 <lv_img_design+0x4a>
 801917c:	2300      	movs	r3, #0
 801917e:	e101      	b.n	8019384 <lv_img_design+0x24e>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8019180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019182:	7b1b      	ldrb	r3, [r3, #12]
 8019184:	f023 0307 	bic.w	r3, r3, #7
 8019188:	b2db      	uxtb	r3, r3
 801918a:	2b20      	cmp	r3, #32
 801918c:	d006      	beq.n	801919c <lv_img_design+0x66>
 801918e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019190:	7b1b      	ldrb	r3, [r3, #12]
 8019192:	f023 0307 	bic.w	r3, r3, #7
 8019196:	b2db      	uxtb	r3, r3
 8019198:	2b08      	cmp	r3, #8
 801919a:	d108      	bne.n	80191ae <lv_img_design+0x78>
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	3310      	adds	r3, #16
 80191a0:	4619      	mov	r1, r3
 80191a2:	68b8      	ldr	r0, [r7, #8]
 80191a4:	f7f9 fee5 	bl	8012f72 <lv_area_is_in>
 80191a8:	4603      	mov	r3, r0
 80191aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        return cover;
 80191ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80191b2:	e0e7      	b.n	8019384 <lv_img_design+0x24e>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80191b4:	79fb      	ldrb	r3, [r7, #7]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	f040 80e3 	bne.w	8019382 <lv_img_design+0x24c>
        if(ext->h == 0 || ext->w == 0) return true;
 80191bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d004      	beq.n	80191d0 <lv_img_design+0x9a>
 80191c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d101      	bne.n	80191d4 <lv_img_design+0x9e>
 80191d0:	2301      	movs	r3, #1
 80191d2:	e0d7      	b.n	8019384 <lv_img_design+0x24e>
        lv_area_t coords;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f7ee f80c 	bl	80071f2 <lv_obj_get_opa_scale>
 80191da:	4603      	mov	r3, r0
 80191dc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        lv_obj_get_coords(img, &coords);
 80191e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80191e4:	4619      	mov	r1, r3
 80191e6:	68f8      	ldr	r0, [r7, #12]
 80191e8:	f7ed ff25 	bl	8007036 <lv_obj_get_coords>

        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 80191ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191ee:	7b1b      	ldrb	r3, [r3, #12]
 80191f0:	f003 0303 	and.w	r3, r3, #3
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	2b01      	cmp	r3, #1
 80191f8:	d007      	beq.n	801920a <lv_img_design+0xd4>
 80191fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191fc:	7b1b      	ldrb	r3, [r3, #12]
 80191fe:	f003 0303 	and.w	r3, r3, #3
 8019202:	b2db      	uxtb	r3, r3
 8019204:	2b00      	cmp	r3, #0
 8019206:	f040 8086 	bne.w	8019316 <lv_img_design+0x1e0>
            coords.x1 -= ext->offset.x;
 801920a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801920e:	b29a      	uxth	r2, r3
 8019210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019212:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019216:	b29b      	uxth	r3, r3
 8019218:	1ad3      	subs	r3, r2, r3
 801921a:	b29b      	uxth	r3, r3
 801921c:	b21b      	sxth	r3, r3
 801921e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            coords.y1 -= ext->offset.y;
 8019222:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019226:	b29a      	uxth	r2, r3
 8019228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801922a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801922e:	b29b      	uxth	r3, r3
 8019230:	1ad3      	subs	r3, r2, r3
 8019232:	b29b      	uxth	r3, r3
 8019234:	b21b      	sxth	r3, r3
 8019236:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            LV_LOG_TRACE("lv_img_design: start to draw image");
            lv_area_t cords_tmp;
            cords_tmp.y1 = coords.y1;
 801923a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801923e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8019242:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019246:	b29a      	uxth	r2, r3
 8019248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801924a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801924e:	b29b      	uxth	r3, r3
 8019250:	4413      	add	r3, r2
 8019252:	b29b      	uxth	r3, r3
 8019254:	3b01      	subs	r3, #1
 8019256:	b29b      	uxth	r3, r3
 8019258:	b21b      	sxth	r3, r3
 801925a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 801925e:	e053      	b.n	8019308 <lv_img_design+0x1d2>
                cords_tmp.x1 = coords.x1;
 8019260:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019264:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8019268:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801926c:	b29a      	uxth	r2, r3
 801926e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019270:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019274:	b29b      	uxth	r3, r3
 8019276:	4413      	add	r3, r2
 8019278:	b29b      	uxth	r3, r3
 801927a:	3b01      	subs	r3, #1
 801927c:	b29b      	uxth	r3, r3
 801927e:	b21b      	sxth	r3, r3
 8019280:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8019284:	e022      	b.n	80192cc <lv_img_design+0x196>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8019286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019288:	681a      	ldr	r2, [r3, #0]
 801928a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801928e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8019292:	9300      	str	r3, [sp, #0]
 8019294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019296:	68b9      	ldr	r1, [r7, #8]
 8019298:	f7f0 ff7c 	bl	800a194 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801929c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80192a0:	b29a      	uxth	r2, r3
 80192a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	4413      	add	r3, r2
 80192ac:	b29b      	uxth	r3, r3
 80192ae:	b21b      	sxth	r3, r3
 80192b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80192b4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80192b8:	b29a      	uxth	r2, r3
 80192ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80192c0:	b29b      	uxth	r3, r3
 80192c2:	4413      	add	r3, r2
 80192c4:	b29b      	uxth	r3, r3
 80192c6:	b21b      	sxth	r3, r3
 80192c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80192cc:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 80192d0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80192d4:	429a      	cmp	r2, r3
 80192d6:	dbd6      	blt.n	8019286 <lv_img_design+0x150>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 80192d8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80192dc:	b29a      	uxth	r2, r3
 80192de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	4413      	add	r3, r2
 80192e8:	b29b      	uxth	r3, r3
 80192ea:	b21b      	sxth	r3, r3
 80192ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80192f0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80192fc:	b29b      	uxth	r3, r3
 80192fe:	4413      	add	r3, r2
 8019300:	b29b      	uxth	r3, r3
 8019302:	b21b      	sxth	r3, r3
 8019304:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8019308:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 801930c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8019310:	429a      	cmp	r2, r3
 8019312:	dba5      	blt.n	8019260 <lv_img_design+0x12a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8019314:	e035      	b.n	8019382 <lv_img_design+0x24c>
                }
            }
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8019316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019318:	7b1b      	ldrb	r3, [r3, #12]
 801931a:	f003 0303 	and.w	r3, r3, #3
 801931e:	b2db      	uxtb	r3, r3
 8019320:	2b02      	cmp	r3, #2
 8019322:	d123      	bne.n	801936c <lv_img_design+0x236>
            LV_LOG_TRACE("lv_img_design: start to draw symbol");
            lv_style_t style_mod;
            lv_style_copy(&style_mod, style);
 8019324:	f107 0314 	add.w	r3, r7, #20
 8019328:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801932a:	4618      	mov	r0, r3
 801932c:	f7ef fa1e 	bl	800876c <lv_style_copy>
            style_mod.text.color = style->image.color;
 8019330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019332:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019334:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8019336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f897 4063 	ldrb.w	r4, [r7, #99]	; 0x63
 801933e:	f107 0114 	add.w	r1, r7, #20
 8019342:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8019346:	2200      	movs	r2, #0
 8019348:	9205      	str	r2, [sp, #20]
 801934a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801934e:	9204      	str	r2, [sp, #16]
 8019350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019354:	9203      	str	r2, [sp, #12]
 8019356:	2200      	movs	r2, #0
 8019358:	9202      	str	r2, [sp, #8]
 801935a:	2200      	movs	r2, #0
 801935c:	9201      	str	r2, [sp, #4]
 801935e:	9300      	str	r3, [sp, #0]
 8019360:	4623      	mov	r3, r4
 8019362:	460a      	mov	r2, r1
 8019364:	68b9      	ldr	r1, [r7, #8]
 8019366:	f7f1 f9ad 	bl	800a6c4 <lv_draw_label>
 801936a:	e00a      	b.n	8019382 <lv_img_design+0x24c>
        } else {
            /*Trigger the error handler of image drawer*/
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	f103 0010 	add.w	r0, r3, #16
 8019372:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8019376:	9300      	str	r3, [sp, #0]
 8019378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801937a:	2200      	movs	r2, #0
 801937c:	68b9      	ldr	r1, [r7, #8]
 801937e:	f7f0 ff09 	bl	800a194 <lv_draw_img>
        }
    }

    return true;
 8019382:	2301      	movs	r3, #1
}
 8019384:	4618      	mov	r0, r3
 8019386:	3774      	adds	r7, #116	; 0x74
 8019388:	46bd      	mov	sp, r7
 801938a:	bd90      	pop	{r4, r7, pc}

0801938c <lv_img_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b088      	sub	sp, #32
 8019390:	af00      	add	r7, sp, #0
 8019392:	60f8      	str	r0, [r7, #12]
 8019394:	460b      	mov	r3, r1
 8019396:	607a      	str	r2, [r7, #4]
 8019398:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 801939a:	4b30      	ldr	r3, [pc, #192]	; (801945c <lv_img_signal+0xd0>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	7af9      	ldrb	r1, [r7, #11]
 80193a0:	687a      	ldr	r2, [r7, #4]
 80193a2:	68f8      	ldr	r0, [r7, #12]
 80193a4:	4798      	blx	r3
 80193a6:	4603      	mov	r3, r0
 80193a8:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 80193aa:	7fbb      	ldrb	r3, [r7, #30]
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d001      	beq.n	80193b4 <lv_img_signal+0x28>
 80193b0:	7fbb      	ldrb	r3, [r7, #30]
 80193b2:	e04f      	b.n	8019454 <lv_img_signal+0xc8>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80193b4:	68f8      	ldr	r0, [r7, #12]
 80193b6:	f7ed ff6a 	bl	800728e <lv_obj_get_ext_attr>
 80193ba:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 80193bc:	7afb      	ldrb	r3, [r7, #11]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d11b      	bne.n	80193fa <lv_img_signal+0x6e>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80193c2:	69bb      	ldr	r3, [r7, #24]
 80193c4:	7b1b      	ldrb	r3, [r3, #12]
 80193c6:	f003 0303 	and.w	r3, r3, #3
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	2b01      	cmp	r3, #1
 80193ce:	d006      	beq.n	80193de <lv_img_signal+0x52>
 80193d0:	69bb      	ldr	r3, [r7, #24]
 80193d2:	7b1b      	ldrb	r3, [r3, #12]
 80193d4:	f003 0303 	and.w	r3, r3, #3
 80193d8:	b2db      	uxtb	r3, r3
 80193da:	2b02      	cmp	r3, #2
 80193dc:	d139      	bne.n	8019452 <lv_img_signal+0xc6>
            lv_mem_free(ext->src);
 80193de:	69bb      	ldr	r3, [r7, #24]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4618      	mov	r0, r3
 80193e4:	f7fa fb34 	bl	8013a50 <lv_mem_free>
            ext->src      = NULL;
 80193e8:	69bb      	ldr	r3, [r7, #24]
 80193ea:	2200      	movs	r2, #0
 80193ec:	601a      	str	r2, [r3, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80193ee:	69ba      	ldr	r2, [r7, #24]
 80193f0:	7b13      	ldrb	r3, [r2, #12]
 80193f2:	f043 0303 	orr.w	r3, r3, #3
 80193f6:	7313      	strb	r3, [r2, #12]
 80193f8:	e02b      	b.n	8019452 <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80193fa:	7afb      	ldrb	r3, [r7, #11]
 80193fc:	2b04      	cmp	r3, #4
 80193fe:	d10d      	bne.n	801941c <lv_img_signal+0x90>
        /*Refresh the file name to refresh the symbol text size*/
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8019400:	69bb      	ldr	r3, [r7, #24]
 8019402:	7b1b      	ldrb	r3, [r3, #12]
 8019404:	f003 0303 	and.w	r3, r3, #3
 8019408:	b2db      	uxtb	r3, r3
 801940a:	2b02      	cmp	r3, #2
 801940c:	d121      	bne.n	8019452 <lv_img_signal+0xc6>
            lv_img_set_src(img, ext->src);
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	4619      	mov	r1, r3
 8019414:	68f8      	ldr	r0, [r7, #12]
 8019416:	f7ff fd8f 	bl	8018f38 <lv_img_set_src>
 801941a:	e01a      	b.n	8019452 <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801941c:	7afb      	ldrb	r3, [r7, #11]
 801941e:	2b06      	cmp	r3, #6
 8019420:	d117      	bne.n	8019452 <lv_img_signal+0xc6>
        lv_obj_type_t * buf = param;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019426:	2300      	movs	r3, #0
 8019428:	77fb      	strb	r3, [r7, #31]
 801942a:	e008      	b.n	801943e <lv_img_signal+0xb2>
            if(buf->type[i] == NULL) break;
 801942c:	7ffa      	ldrb	r2, [r7, #31]
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d006      	beq.n	8019446 <lv_img_signal+0xba>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019438:	7ffb      	ldrb	r3, [r7, #31]
 801943a:	3301      	adds	r3, #1
 801943c:	77fb      	strb	r3, [r7, #31]
 801943e:	7ffb      	ldrb	r3, [r7, #31]
 8019440:	2b06      	cmp	r3, #6
 8019442:	d9f3      	bls.n	801942c <lv_img_signal+0xa0>
 8019444:	e000      	b.n	8019448 <lv_img_signal+0xbc>
            if(buf->type[i] == NULL) break;
 8019446:	bf00      	nop
        }
        buf->type[i] = "lv_img";
 8019448:	7ffa      	ldrb	r2, [r7, #31]
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	4904      	ldr	r1, [pc, #16]	; (8019460 <lv_img_signal+0xd4>)
 801944e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8019452:	7fbb      	ldrb	r3, [r7, #30]
}
 8019454:	4618      	mov	r0, r3
 8019456:	3720      	adds	r7, #32
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	20002ad0 	.word	0x20002ad0
 8019460:	08029cd0 	.word	0x08029cd0

08019464 <lv_font_get_line_height>:
{
 8019464:	b480      	push	{r7}
 8019466:	b083      	sub	sp, #12
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	7a1b      	ldrb	r3, [r3, #8]
}
 8019470:	4618      	mov	r0, r3
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr

0801947c <lv_area_get_width>:
{
 801947c:	b480      	push	{r7}
 801947e:	b083      	sub	sp, #12
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801948a:	b29a      	uxth	r2, r3
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019492:	b29b      	uxth	r3, r3
 8019494:	1ad3      	subs	r3, r2, r3
 8019496:	b29b      	uxth	r3, r3
 8019498:	3301      	adds	r3, #1
 801949a:	b29b      	uxth	r3, r3
 801949c:	b21b      	sxth	r3, r3
}
 801949e:	4618      	mov	r0, r3
 80194a0:	370c      	adds	r7, #12
 80194a2:	46bd      	mov	sp, r7
 80194a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a8:	4770      	bx	lr

080194aa <lv_area_get_height>:
{
 80194aa:	b480      	push	{r7}
 80194ac:	b083      	sub	sp, #12
 80194ae:	af00      	add	r7, sp, #0
 80194b0:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80194b8:	b29a      	uxth	r2, r3
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194c0:	b29b      	uxth	r3, r3
 80194c2:	1ad3      	subs	r3, r2, r3
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	3301      	adds	r3, #1
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	b21b      	sxth	r3, r3
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	370c      	adds	r7, #12
 80194d0:	46bd      	mov	sp, r7
 80194d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d6:	4770      	bx	lr

080194d8 <lv_label_set_style>:
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b084      	sub	sp, #16
 80194dc:	af00      	add	r7, sp, #0
 80194de:	60f8      	str	r0, [r7, #12]
 80194e0:	460b      	mov	r3, r1
 80194e2:	607a      	str	r2, [r7, #4]
 80194e4:	72fb      	strb	r3, [r7, #11]
    lv_obj_set_style(label, style);
 80194e6:	6879      	ldr	r1, [r7, #4]
 80194e8:	68f8      	ldr	r0, [r7, #12]
 80194ea:	f7ed fba0 	bl	8006c2e <lv_obj_set_style>
}
 80194ee:	bf00      	nop
 80194f0:	3710      	adds	r7, #16
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}

080194f6 <lv_label_get_style>:
{
 80194f6:	b580      	push	{r7, lr}
 80194f8:	b082      	sub	sp, #8
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	6078      	str	r0, [r7, #4]
 80194fe:	460b      	mov	r3, r1
 8019500:	70fb      	strb	r3, [r7, #3]
    return lv_obj_get_style(label);
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	f7ed fe08 	bl	8007118 <lv_obj_get_style>
 8019508:	4603      	mov	r3, r0
}
 801950a:	4618      	mov	r0, r3
 801950c:	3708      	adds	r7, #8
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
	...

08019514 <lv_label_create>:
 * @param par pointer to an object, it will be the parent of the new label
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8019514:	b5b0      	push	{r4, r5, r7, lr}
 8019516:	b086      	sub	sp, #24
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("label create started");

    /*Create a basic object*/
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801951e:	6839      	ldr	r1, [r7, #0]
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f7ec f94b 	bl	80057bc <lv_obj_create>
 8019526:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_label);
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d100      	bne.n	8019530 <lv_label_create+0x1c>
 801952e:	e7fe      	b.n	801952e <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
 8019530:	697b      	ldr	r3, [r7, #20]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d101      	bne.n	801953a <lv_label_create+0x26>
 8019536:	2300      	movs	r3, #0
 8019538:	e111      	b.n	801975e <lv_label_create+0x24a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 801953a:	4b8b      	ldr	r3, [pc, #556]	; (8019768 <lv_label_create+0x254>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d105      	bne.n	801954e <lv_label_create+0x3a>
 8019542:	6978      	ldr	r0, [r7, #20]
 8019544:	f7ed fe8b 	bl	800725e <lv_obj_get_signal_cb>
 8019548:	4602      	mov	r2, r0
 801954a:	4b87      	ldr	r3, [pc, #540]	; (8019768 <lv_label_create+0x254>)
 801954c:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to a label object*/
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801954e:	2120      	movs	r1, #32
 8019550:	6978      	ldr	r0, [r7, #20]
 8019552:	f7ed fccf 	bl	8006ef4 <lv_obj_allocate_ext_attr>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8019556:	6978      	ldr	r0, [r7, #20]
 8019558:	f7ed fe99 	bl	800728e <lv_obj_get_ext_attr>
 801955c:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d100      	bne.n	8019566 <lv_label_create+0x52>
 8019564:	e7fe      	b.n	8019564 <lv_label_create+0x50>
    if(ext == NULL) return NULL;
 8019566:	693b      	ldr	r3, [r7, #16]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d101      	bne.n	8019570 <lv_label_create+0x5c>
 801956c:	2300      	movs	r3, #0
 801956e:	e0f6      	b.n	801975e <lv_label_create+0x24a>

    ext->text       = NULL;
 8019570:	693b      	ldr	r3, [r7, #16]
 8019572:	2200      	movs	r2, #0
 8019574:	601a      	str	r2, [r3, #0]
    ext->static_txt = 0;
 8019576:	693a      	ldr	r2, [r7, #16]
 8019578:	7f93      	ldrb	r3, [r2, #30]
 801957a:	f36f 03c3 	bfc	r3, #3, #1
 801957e:	7793      	strb	r3, [r2, #30]
    ext->recolor    = 0;
 8019580:	693a      	ldr	r2, [r7, #16]
 8019582:	7f93      	ldrb	r3, [r2, #30]
 8019584:	f36f 1386 	bfc	r3, #6, #1
 8019588:	7793      	strb	r3, [r2, #30]
    ext->body_draw  = 0;
 801958a:	693a      	ldr	r2, [r7, #16]
 801958c:	7fd3      	ldrb	r3, [r2, #31]
 801958e:	f36f 0300 	bfc	r3, #0, #1
 8019592:	77d3      	strb	r3, [r2, #31]
    ext->align      = LV_LABEL_ALIGN_LEFT;
 8019594:	693a      	ldr	r2, [r7, #16]
 8019596:	7f93      	ldrb	r3, [r2, #30]
 8019598:	f36f 1305 	bfc	r3, #4, #2
 801959c:	7793      	strb	r3, [r2, #30]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801959e:	693b      	ldr	r3, [r7, #16]
 80195a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195a4:	811a      	strh	r2, [r3, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 80195a6:	693a      	ldr	r2, [r7, #16]
 80195a8:	7f93      	ldrb	r3, [r2, #30]
 80195aa:	f36f 0302 	bfc	r3, #0, #3
 80195ae:	7793      	strb	r3, [r2, #30]
#if LV_USE_ANIMATION
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80195b0:	693b      	ldr	r3, [r7, #16]
 80195b2:	2219      	movs	r2, #25
 80195b4:	839a      	strh	r2, [r3, #28]
#endif
    ext->offset.x = 0;
 80195b6:	693b      	ldr	r3, [r7, #16]
 80195b8:	2200      	movs	r2, #0
 80195ba:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80195bc:	693b      	ldr	r3, [r7, #16]
 80195be:	2200      	movs	r2, #0
 80195c0:	819a      	strh	r2, [r3, #12]

    ext->hint.line_start = -1;
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195c8:	611a      	str	r2, [r3, #16]
    ext->hint.coord_y    = 0;
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	2200      	movs	r2, #0
 80195ce:	619a      	str	r2, [r3, #24]
    ext->hint.y          = 0;
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	2200      	movs	r2, #0
 80195d4:	615a      	str	r2, [r3, #20]

#if LV_LABEL_TEXT_SEL
    ext->txt_sel_start = LV_LABEL_TEXT_SEL_OFF;
    ext->txt_sel_end   = LV_LABEL_TEXT_SEL_OFF;
#endif
    ext->dot.tmp_ptr   = NULL;
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	2200      	movs	r2, #0
 80195da:	605a      	str	r2, [r3, #4]
    ext->dot_tmp_alloc = 0;
 80195dc:	693a      	ldr	r2, [r7, #16]
 80195de:	7fd3      	ldrb	r3, [r2, #31]
 80195e0:	f36f 0341 	bfc	r3, #1, #1
 80195e4:	77d3      	strb	r3, [r2, #31]

    lv_obj_set_design_cb(new_label, lv_label_design);
 80195e6:	4961      	ldr	r1, [pc, #388]	; (801976c <lv_label_create+0x258>)
 80195e8:	6978      	ldr	r0, [r7, #20]
 80195ea:	f7ed fc75 	bl	8006ed8 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 80195ee:	4960      	ldr	r1, [pc, #384]	; (8019770 <lv_label_create+0x25c>)
 80195f0:	6978      	ldr	r0, [r7, #20]
 80195f2:	f7ed fc63 	bl	8006ebc <lv_obj_set_signal_cb>

    /*Init the new label*/
    if(copy == NULL) {
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d111      	bne.n	8019620 <lv_label_create+0x10c>
        lv_obj_set_click(new_label, false);
 80195fc:	2100      	movs	r1, #0
 80195fe:	6978      	ldr	r0, [r7, #20]
 8019600:	f7ed fb3b 	bl	8006c7a <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8019604:	2100      	movs	r1, #0
 8019606:	6978      	ldr	r0, [r7, #20]
 8019608:	f000 f952 	bl	80198b0 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 801960c:	4959      	ldr	r1, [pc, #356]	; (8019774 <lv_label_create+0x260>)
 801960e:	6978      	ldr	r0, [r7, #20]
 8019610:	f000 f8b2 	bl	8019778 <lv_label_set_text>
        lv_label_set_style(new_label, LV_LABEL_STYLE_MAIN, NULL); /*Inherit parent's style*/
 8019614:	2200      	movs	r2, #0
 8019616:	2100      	movs	r1, #0
 8019618:	6978      	ldr	r0, [r7, #20]
 801961a:	f7ff ff5d 	bl	80194d8 <lv_label_set_style>
 801961e:	e09d      	b.n	801975c <lv_label_create+0x248>
    }
    /*Copy 'copy' if not NULL*/
    else {
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8019620:	6838      	ldr	r0, [r7, #0]
 8019622:	f7ed fe34 	bl	800728e <lv_obj_get_ext_attr>
 8019626:	60f8      	str	r0, [r7, #12]
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8019628:	6838      	ldr	r0, [r7, #0]
 801962a:	f000 fa22 	bl	8019a72 <lv_label_get_long_mode>
 801962e:	4603      	mov	r3, r0
 8019630:	4619      	mov	r1, r3
 8019632:	6978      	ldr	r0, [r7, #20]
 8019634:	f000 f93c 	bl	80198b0 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8019638:	6838      	ldr	r0, [r7, #0]
 801963a:	f000 fa3c 	bl	8019ab6 <lv_label_get_recolor>
 801963e:	4603      	mov	r3, r0
 8019640:	4619      	mov	r1, r3
 8019642:	6978      	ldr	r0, [r7, #20]
 8019644:	f000 f9b4 	bl	80199b0 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8019648:	6838      	ldr	r0, [r7, #0]
 801964a:	f000 fa4a 	bl	8019ae2 <lv_label_get_body_draw>
 801964e:	4603      	mov	r3, r0
 8019650:	4619      	mov	r1, r3
 8019652:	6978      	ldr	r0, [r7, #20]
 8019654:	f000 f9d4 	bl	8019a00 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8019658:	6838      	ldr	r0, [r7, #0]
 801965a:	f000 fa1b 	bl	8019a94 <lv_label_get_align>
 801965e:	4603      	mov	r3, r0
 8019660:	4619      	mov	r1, r3
 8019662:	6978      	ldr	r0, [r7, #20]
 8019664:	f000 f980 	bl	8019968 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	7f9b      	ldrb	r3, [r3, #30]
 801966c:	f003 0308 	and.w	r3, r3, #8
 8019670:	b2db      	uxtb	r3, r3
 8019672:	2b00      	cmp	r3, #0
 8019674:	d108      	bne.n	8019688 <lv_label_create+0x174>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8019676:	6838      	ldr	r0, [r7, #0]
 8019678:	f000 f9ed 	bl	8019a56 <lv_label_get_text>
 801967c:	4603      	mov	r3, r0
 801967e:	4619      	mov	r1, r3
 8019680:	6978      	ldr	r0, [r7, #20]
 8019682:	f000 f879 	bl	8019778 <lv_label_set_text>
 8019686:	e007      	b.n	8019698 <lv_label_create+0x184>
        else
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8019688:	6838      	ldr	r0, [r7, #0]
 801968a:	f000 f9e4 	bl	8019a56 <lv_label_get_text>
 801968e:	4603      	mov	r3, r0
 8019690:	4619      	mov	r1, r3
 8019692:	6978      	ldr	r0, [r7, #20]
 8019694:	f000 f8dd 	bl	8019852 <lv_label_set_static_text>

        /*In DOT mode save the text byte-to-byte because a '\0' can be in the middle*/
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	7f9b      	ldrb	r3, [r3, #30]
 801969c:	f003 0307 	and.w	r3, r3, #7
 80196a0:	b2db      	uxtb	r3, r3
 80196a2:	2b02      	cmp	r3, #2
 80196a4:	d128      	bne.n	80196f8 <lv_label_create+0x1e4>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 80196a6:	693b      	ldr	r3, [r7, #16]
 80196a8:	681c      	ldr	r4, [r3, #0]
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7fa fa34 	bl	8013b1c <lv_mem_get_size>
 80196b4:	4603      	mov	r3, r0
 80196b6:	4619      	mov	r1, r3
 80196b8:	4620      	mov	r0, r4
 80196ba:	f7fa f9f1 	bl	8013aa0 <lv_mem_realloc>
 80196be:	4602      	mov	r2, r0
 80196c0:	693b      	ldr	r3, [r7, #16]
 80196c2:	601a      	str	r2, [r3, #0]
            lv_mem_assert(ext->text);
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d100      	bne.n	80196ce <lv_label_create+0x1ba>
 80196cc:	e7fe      	b.n	80196cc <lv_label_create+0x1b8>
            if(ext->text == NULL) return NULL;
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d101      	bne.n	80196da <lv_label_create+0x1c6>
 80196d6:	2300      	movs	r3, #0
 80196d8:	e041      	b.n	801975e <lv_label_create+0x24a>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 80196da:	693b      	ldr	r3, [r7, #16]
 80196dc:	681c      	ldr	r4, [r3, #0]
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	681d      	ldr	r5, [r3, #0]
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7fa fa18 	bl	8013b1c <lv_mem_get_size>
 80196ec:	4603      	mov	r3, r0
 80196ee:	461a      	mov	r2, r3
 80196f0:	4629      	mov	r1, r5
 80196f2:	4620      	mov	r0, r4
 80196f4:	f00d fd54 	bl	80271a0 <memcpy>
        }

        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	7fdb      	ldrb	r3, [r3, #31]
 80196fc:	f003 0302 	and.w	r3, r3, #2
 8019700:	b2db      	uxtb	r3, r3
 8019702:	2b00      	cmp	r3, #0
 8019704:	d013      	beq.n	801972e <lv_label_create+0x21a>
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d00f      	beq.n	801972e <lv_label_create+0x21a>
            int len = strlen(copy_ext->dot.tmp_ptr);
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	4618      	mov	r0, r3
 8019714:	f7e6 fd66 	bl	80001e4 <strlen>
 8019718:	4603      	mov	r3, r0
 801971a:	60bb      	str	r3, [r7, #8]
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 801971c:	693b      	ldr	r3, [r7, #16]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	68ba      	ldr	r2, [r7, #8]
 8019722:	b292      	uxth	r2, r2
 8019724:	4619      	mov	r1, r3
 8019726:	6978      	ldr	r0, [r7, #20]
 8019728:	f001 f8ec 	bl	801a904 <lv_label_set_dot_tmp>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801972c:	e005      	b.n	801973a <lv_label_create+0x226>
        } else {
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 801972e:	693b      	ldr	r3, [r7, #16]
 8019730:	3304      	adds	r3, #4
 8019732:	68fa      	ldr	r2, [r7, #12]
 8019734:	3204      	adds	r2, #4
 8019736:	6812      	ldr	r2, [r2, #0]
 8019738:	601a      	str	r2, [r3, #0]
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	7fdb      	ldrb	r3, [r3, #31]
 801973e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019742:	b2d9      	uxtb	r1, r3
 8019744:	693a      	ldr	r2, [r7, #16]
 8019746:	7fd3      	ldrb	r3, [r2, #31]
 8019748:	f361 0341 	bfi	r3, r1, #1, #1
 801974c:	77d3      	strb	r3, [r2, #31]
        ext->dot_end       = copy_ext->dot_end;
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	891a      	ldrh	r2, [r3, #8]
 8019752:	693b      	ldr	r3, [r7, #16]
 8019754:	811a      	strh	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_label);
 8019756:	6978      	ldr	r0, [r7, #20]
 8019758:	f7ed fa7b 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("label created");

    return new_label;
 801975c:	697b      	ldr	r3, [r7, #20]
}
 801975e:	4618      	mov	r0, r3
 8019760:	3718      	adds	r7, #24
 8019762:	46bd      	mov	sp, r7
 8019764:	bdb0      	pop	{r4, r5, r7, pc}
 8019766:	bf00      	nop
 8019768:	20002ad4 	.word	0x20002ad4
 801976c:	08019d89 	.word	0x08019d89
 8019770:	0801a135 	.word	0x0801a135
 8019774:	08029cd8 	.word	0x08029cd8

08019778 <lv_label_set_text>:
 * Set a new text for a label. Memory will be allocated to store the text by the label.
 * @param label pointer to a label object
 * @param text '\0' terminated character string. NULL to refresh with the current text.
 */
void lv_label_set_text(lv_obj_t * label, const char * text)
{
 8019778:	b590      	push	{r4, r7, lr}
 801977a:	b085      	sub	sp, #20
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
 8019780:	6039      	str	r1, [r7, #0]
    lv_obj_invalidate(label);
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f7ec fb57 	bl	8005e36 <lv_obj_invalidate>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019788:	6878      	ldr	r0, [r7, #4]
 801978a:	f7ed fd80 	bl	800728e <lv_obj_get_ext_attr>
 801978e:	60f8      	str	r0, [r7, #12]

    /*If text is NULL then refresh */
    if(text == NULL) {
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d103      	bne.n	801979e <lv_label_set_text+0x26>
        lv_label_refr_text(label);
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f000 fd8c 	bl	801a2b4 <lv_label_refr_text>
        return;
 801979c:	e056      	b.n	801984c <lv_label_set_text+0xd4>
    }

    if(ext->text == text) {
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	683a      	ldr	r2, [r7, #0]
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d119      	bne.n	80197dc <lv_label_set_text+0x64>
        /*If set its own text then reallocate it (maybe its size changed)*/
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	681c      	ldr	r4, [r3, #0]
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7e6 fd17 	bl	80001e4 <strlen>
 80197b6:	4603      	mov	r3, r0
 80197b8:	3301      	adds	r3, #1
 80197ba:	4619      	mov	r1, r3
 80197bc:	4620      	mov	r0, r4
 80197be:	f7fa f96f 	bl	8013aa0 <lv_mem_realloc>
 80197c2:	4602      	mov	r2, r0
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d100      	bne.n	80197d2 <lv_label_set_text+0x5a>
 80197d0:	e7fe      	b.n	80197d0 <lv_label_set_text+0x58>
        if(ext->text == NULL) return;
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d133      	bne.n	8019842 <lv_label_set_text+0xca>
 80197da:	e037      	b.n	801984c <lv_label_set_text+0xd4>
    } else {
        /*Allocate space for the new text*/
        uint32_t len = strlen(text) + 1;
 80197dc:	6838      	ldr	r0, [r7, #0]
 80197de:	f7e6 fd01 	bl	80001e4 <strlen>
 80197e2:	4603      	mov	r3, r0
 80197e4:	3301      	adds	r3, #1
 80197e6:	60bb      	str	r3, [r7, #8]
        if(ext->text != NULL && ext->static_txt == 0) {
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d00e      	beq.n	801980e <lv_label_set_text+0x96>
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	7f9b      	ldrb	r3, [r3, #30]
 80197f4:	f003 0308 	and.w	r3, r3, #8
 80197f8:	b2db      	uxtb	r3, r3
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d107      	bne.n	801980e <lv_label_set_text+0x96>
            lv_mem_free(ext->text);
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	4618      	mov	r0, r3
 8019804:	f7fa f924 	bl	8013a50 <lv_mem_free>
            ext->text = NULL;
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	2200      	movs	r2, #0
 801980c:	601a      	str	r2, [r3, #0]
        }

        ext->text = lv_mem_alloc(len);
 801980e:	68b8      	ldr	r0, [r7, #8]
 8019810:	f7fa f8de 	bl	80139d0 <lv_mem_alloc>
 8019814:	4602      	mov	r2, r0
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d100      	bne.n	8019824 <lv_label_set_text+0xac>
 8019822:	e7fe      	b.n	8019822 <lv_label_set_text+0xaa>
        if(ext->text == NULL) return;
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d00e      	beq.n	801984a <lv_label_set_text+0xd2>

        strcpy(ext->text, text);
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	6839      	ldr	r1, [r7, #0]
 8019832:	4618      	mov	r0, r3
 8019834:	f00e fa3c 	bl	8027cb0 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 8019838:	68fa      	ldr	r2, [r7, #12]
 801983a:	7f93      	ldrb	r3, [r2, #30]
 801983c:	f36f 03c3 	bfc	r3, #3, #1
 8019840:	7793      	strb	r3, [r2, #30]
    }

    lv_label_refr_text(label);
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f000 fd36 	bl	801a2b4 <lv_label_refr_text>
 8019848:	e000      	b.n	801984c <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
 801984a:	bf00      	nop
}
 801984c:	3714      	adds	r7, #20
 801984e:	46bd      	mov	sp, r7
 8019850:	bd90      	pop	{r4, r7, pc}

08019852 <lv_label_set_static_text>:
 * has to be 'alive' while the label exist.
 * @param label pointer to a label object
 * @param text pointer to a text. NULL to refresh with the current text.
 */
void lv_label_set_static_text(lv_obj_t * label, const char * text)
{
 8019852:	b580      	push	{r7, lr}
 8019854:	b084      	sub	sp, #16
 8019856:	af00      	add	r7, sp, #0
 8019858:	6078      	str	r0, [r7, #4]
 801985a:	6039      	str	r1, [r7, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801985c:	6878      	ldr	r0, [r7, #4]
 801985e:	f7ed fd16 	bl	800728e <lv_obj_get_ext_attr>
 8019862:	60f8      	str	r0, [r7, #12]
    if(ext->static_txt == 0 && ext->text != NULL) {
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	7f9b      	ldrb	r3, [r3, #30]
 8019868:	f003 0308 	and.w	r3, r3, #8
 801986c:	b2db      	uxtb	r3, r3
 801986e:	2b00      	cmp	r3, #0
 8019870:	d10b      	bne.n	801988a <lv_label_set_static_text+0x38>
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d007      	beq.n	801988a <lv_label_set_static_text+0x38>
        lv_mem_free(ext->text);
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	4618      	mov	r0, r3
 8019880:	f7fa f8e6 	bl	8013a50 <lv_mem_free>
        ext->text = NULL;
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2200      	movs	r2, #0
 8019888:	601a      	str	r2, [r3, #0]
    }

    if(text != NULL) {
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d007      	beq.n	80198a0 <lv_label_set_static_text+0x4e>
        ext->static_txt = 1;
 8019890:	68fa      	ldr	r2, [r7, #12]
 8019892:	7f93      	ldrb	r3, [r2, #30]
 8019894:	f043 0308 	orr.w	r3, r3, #8
 8019898:	7793      	strb	r3, [r2, #30]
        ext->text       = (char *)text;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	683a      	ldr	r2, [r7, #0]
 801989e:	601a      	str	r2, [r3, #0]
    }

    lv_label_refr_text(label);
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f000 fd07 	bl	801a2b4 <lv_label_refr_text>
}
 80198a6:	bf00      	nop
 80198a8:	3710      	adds	r7, #16
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bd80      	pop	{r7, pc}
	...

080198b0 <lv_label_set_long_mode>:
 * @param long_mode the new mode from 'lv_label_long_mode' enum.
 *                  In LV_LONG_BREAK/LONG/ROLL the size of the label should be set AFTER this
 * function
 */
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b084      	sub	sp, #16
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
 80198b8:	460b      	mov	r3, r1
 80198ba:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	f7ed fce6 	bl	800728e <lv_obj_get_ext_attr>
 80198c2:	60f8      	str	r0, [r7, #12]

#if LV_USE_ANIMATION
    /*Delete the old animation (if exists)*/
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80198c4:	4924      	ldr	r1, [pc, #144]	; (8019958 <lv_label_set_long_mode+0xa8>)
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f7f8 ffec 	bl	80128a4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 80198cc:	4923      	ldr	r1, [pc, #140]	; (801995c <lv_label_set_long_mode+0xac>)
 80198ce:	6878      	ldr	r0, [r7, #4]
 80198d0:	f7f8 ffe8 	bl	80128a4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80198d4:	4922      	ldr	r1, [pc, #136]	; (8019960 <lv_label_set_long_mode+0xb0>)
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	f7f8 ffe4 	bl	80128a4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80198dc:	4921      	ldr	r1, [pc, #132]	; (8019964 <lv_label_set_long_mode+0xb4>)
 80198de:	6878      	ldr	r0, [r7, #4]
 80198e0:	f7f8 ffe0 	bl	80128a4 <lv_anim_del>
#endif
    ext->offset.x = 0;
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	2200      	movs	r2, #0
 80198e8:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	2200      	movs	r2, #0
 80198ee:	819a      	strh	r2, [r3, #12]

    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 80198f0:	78fb      	ldrb	r3, [r7, #3]
 80198f2:	2b03      	cmp	r3, #3
 80198f4:	d005      	beq.n	8019902 <lv_label_set_long_mode+0x52>
 80198f6:	78fb      	ldrb	r3, [r7, #3]
 80198f8:	2b04      	cmp	r3, #4
 80198fa:	d002      	beq.n	8019902 <lv_label_set_long_mode+0x52>
 80198fc:	78fb      	ldrb	r3, [r7, #3]
 80198fe:	2b05      	cmp	r3, #5
 8019900:	d105      	bne.n	801990e <lv_label_set_long_mode+0x5e>
        ext->expand = 1;
 8019902:	68fa      	ldr	r2, [r7, #12]
 8019904:	7f93      	ldrb	r3, [r2, #30]
 8019906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801990a:	7793      	strb	r3, [r2, #30]
 801990c:	e004      	b.n	8019918 <lv_label_set_long_mode+0x68>
    else
        ext->expand = 0;
 801990e:	68fa      	ldr	r2, [r7, #12]
 8019910:	7f93      	ldrb	r3, [r2, #30]
 8019912:	f36f 13c7 	bfc	r3, #7, #1
 8019916:	7793      	strb	r3, [r2, #30]

    /*Restore the character under the dots*/
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	7f9b      	ldrb	r3, [r3, #30]
 801991c:	f003 0307 	and.w	r3, r3, #7
 8019920:	b2db      	uxtb	r3, r3
 8019922:	2b02      	cmp	r3, #2
 8019924:	d108      	bne.n	8019938 <lv_label_set_long_mode+0x88>
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	891b      	ldrh	r3, [r3, #8]
 801992a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801992e:	4293      	cmp	r3, r2
 8019930:	d002      	beq.n	8019938 <lv_label_set_long_mode+0x88>
        lv_label_revert_dots(label);
 8019932:	6878      	ldr	r0, [r7, #4]
 8019934:	f000 ff64 	bl	801a800 <lv_label_revert_dots>
    }

    ext->long_mode = long_mode;
 8019938:	78fb      	ldrb	r3, [r7, #3]
 801993a:	f003 0307 	and.w	r3, r3, #7
 801993e:	b2d9      	uxtb	r1, r3
 8019940:	68fa      	ldr	r2, [r7, #12]
 8019942:	7f93      	ldrb	r3, [r2, #30]
 8019944:	f361 0302 	bfi	r3, r1, #0, #3
 8019948:	7793      	strb	r3, [r2, #30]
    lv_label_refr_text(label);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f000 fcb2 	bl	801a2b4 <lv_label_refr_text>
}
 8019950:	bf00      	nop
 8019952:	3710      	adds	r7, #16
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}
 8019958:	0800614b 	.word	0x0800614b
 801995c:	08006175 	.word	0x08006175
 8019960:	0801a8b5 	.word	0x0801a8b5
 8019964:	0801a8dd 	.word	0x0801a8dd

08019968 <lv_label_set_align>:
 * Set the align of the label (left or center)
 * @param label pointer to a label object
 * @param align 'LV_LABEL_ALIGN_LEFT' or 'LV_LABEL_ALIGN_LEFT'
 */
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b084      	sub	sp, #16
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	460b      	mov	r3, r1
 8019972:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7ed fc8a 	bl	800728e <lv_obj_get_ext_attr>
 801997a:	60f8      	str	r0, [r7, #12]
    if(ext->align == align) return;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	7f9b      	ldrb	r3, [r3, #30]
 8019980:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019984:	b2db      	uxtb	r3, r3
 8019986:	461a      	mov	r2, r3
 8019988:	78fb      	ldrb	r3, [r7, #3]
 801998a:	429a      	cmp	r2, r3
 801998c:	d00c      	beq.n	80199a8 <lv_label_set_align+0x40>

    ext->align = align;
 801998e:	78fb      	ldrb	r3, [r7, #3]
 8019990:	f003 0303 	and.w	r3, r3, #3
 8019994:	b2d9      	uxtb	r1, r3
 8019996:	68fa      	ldr	r2, [r7, #12]
 8019998:	7f93      	ldrb	r3, [r2, #30]
 801999a:	f361 1305 	bfi	r3, r1, #4, #2
 801999e:	7793      	strb	r3, [r2, #30]

    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f7ec fa48 	bl	8005e36 <lv_obj_invalidate>
 80199a6:	e000      	b.n	80199aa <lv_label_set_align+0x42>
    if(ext->align == align) return;
 80199a8:	bf00      	nop
                                 (lv_refr_label_text() not required)*/
}
 80199aa:	3710      	adds	r7, #16
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}

080199b0 <lv_label_set_recolor>:
 * Enable the recoloring by in-line commands
 * @param label pointer to a label object
 * @param en true: enable recoloring, false: disable
 */
void lv_label_set_recolor(lv_obj_t * label, bool en)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b084      	sub	sp, #16
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	460b      	mov	r3, r1
 80199ba:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80199bc:	6878      	ldr	r0, [r7, #4]
 80199be:	f7ed fc66 	bl	800728e <lv_obj_get_ext_attr>
 80199c2:	60f8      	str	r0, [r7, #12]
    if(ext->recolor == en) return;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	7f9b      	ldrb	r3, [r3, #30]
 80199c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	78fa      	ldrb	r2, [r7, #3]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d011      	beq.n	80199f8 <lv_label_set_recolor+0x48>

    ext->recolor = en == false ? 0 : 1;
 80199d4:	78fb      	ldrb	r3, [r7, #3]
 80199d6:	f083 0301 	eor.w	r3, r3, #1
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d001      	beq.n	80199e4 <lv_label_set_recolor+0x34>
 80199e0:	2100      	movs	r1, #0
 80199e2:	e000      	b.n	80199e6 <lv_label_set_recolor+0x36>
 80199e4:	2101      	movs	r1, #1
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	7f93      	ldrb	r3, [r2, #30]
 80199ea:	f361 1386 	bfi	r3, r1, #6, #1
 80199ee:	7793      	strb	r3, [r2, #30]

    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f000 fc5f 	bl	801a2b4 <lv_label_refr_text>
 80199f6:	e000      	b.n	80199fa <lv_label_set_recolor+0x4a>
    if(ext->recolor == en) return;
 80199f8:	bf00      	nop
                                  be hided or revealed*/
}
 80199fa:	3710      	adds	r7, #16
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}

08019a00 <lv_label_set_body_draw>:
 * Set the label to draw (or not draw) background specified in its style's body
 * @param label pointer to a label object
 * @param en true: draw body; false: don't draw body
 */
void lv_label_set_body_draw(lv_obj_t * label, bool en)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b084      	sub	sp, #16
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	460b      	mov	r3, r1
 8019a0a:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a0c:	6878      	ldr	r0, [r7, #4]
 8019a0e:	f7ed fc3e 	bl	800728e <lv_obj_get_ext_attr>
 8019a12:	60f8      	str	r0, [r7, #12]
    if(ext->body_draw == en) return;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	7fdb      	ldrb	r3, [r3, #31]
 8019a18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019a1c:	b2db      	uxtb	r3, r3
 8019a1e:	78fa      	ldrb	r2, [r7, #3]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d014      	beq.n	8019a4e <lv_label_set_body_draw+0x4e>

    ext->body_draw = en == false ? 0 : 1;
 8019a24:	78fb      	ldrb	r3, [r7, #3]
 8019a26:	f083 0301 	eor.w	r3, r3, #1
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d001      	beq.n	8019a34 <lv_label_set_body_draw+0x34>
 8019a30:	2100      	movs	r1, #0
 8019a32:	e000      	b.n	8019a36 <lv_label_set_body_draw+0x36>
 8019a34:	2101      	movs	r1, #1
 8019a36:	68fa      	ldr	r2, [r7, #12]
 8019a38:	7fd3      	ldrb	r3, [r2, #31]
 8019a3a:	f361 0300 	bfi	r3, r1, #0, #1
 8019a3e:	77d3      	strb	r3, [r2, #31]

    lv_obj_refresh_ext_draw_pad(label);
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f7ed fa6d 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>

    lv_obj_invalidate(label);
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f7ec f9f5 	bl	8005e36 <lv_obj_invalidate>
 8019a4c:	e000      	b.n	8019a50 <lv_label_set_body_draw+0x50>
    if(ext->body_draw == en) return;
 8019a4e:	bf00      	nop
}
 8019a50:	3710      	adds	r7, #16
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}

08019a56 <lv_label_get_text>:
 * Get the text of a label
 * @param label pointer to a label object
 * @return the text of the label
 */
char * lv_label_get_text(const lv_obj_t * label)
{
 8019a56:	b580      	push	{r7, lr}
 8019a58:	b084      	sub	sp, #16
 8019a5a:	af00      	add	r7, sp, #0
 8019a5c:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a5e:	6878      	ldr	r0, [r7, #4]
 8019a60:	f7ed fc15 	bl	800728e <lv_obj_get_ext_attr>
 8019a64:	60f8      	str	r0, [r7, #12]

    return ext->text;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	681b      	ldr	r3, [r3, #0]
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3710      	adds	r7, #16
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bd80      	pop	{r7, pc}

08019a72 <lv_label_get_long_mode>:
 * Get the long mode of a label
 * @param label pointer to a label object
 * @return the long mode
 */
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)
{
 8019a72:	b580      	push	{r7, lr}
 8019a74:	b084      	sub	sp, #16
 8019a76:	af00      	add	r7, sp, #0
 8019a78:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	f7ed fc07 	bl	800728e <lv_obj_get_ext_attr>
 8019a80:	60f8      	str	r0, [r7, #12]
    return ext->long_mode;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	7f9b      	ldrb	r3, [r3, #30]
 8019a86:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8019a8a:	b2db      	uxtb	r3, r3
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	3710      	adds	r7, #16
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}

08019a94 <lv_label_get_align>:
 * Get the align attribute
 * @param label pointer to a label object
 * @return LV_LABEL_ALIGN_LEFT or LV_LABEL_ALIGN_CENTER
 */
lv_label_align_t lv_label_get_align(const lv_obj_t * label)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b084      	sub	sp, #16
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a9c:	6878      	ldr	r0, [r7, #4]
 8019a9e:	f7ed fbf6 	bl	800728e <lv_obj_get_ext_attr>
 8019aa2:	60f8      	str	r0, [r7, #12]
    return ext->align;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	7f9b      	ldrb	r3, [r3, #30]
 8019aa8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019aac:	b2db      	uxtb	r3, r3
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	3710      	adds	r7, #16
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}

08019ab6 <lv_label_get_recolor>:
 * Get the recoloring attribute
 * @param label pointer to a label object
 * @return true: recoloring is enabled, false: disable
 */
bool lv_label_get_recolor(const lv_obj_t * label)
{
 8019ab6:	b580      	push	{r7, lr}
 8019ab8:	b084      	sub	sp, #16
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019abe:	6878      	ldr	r0, [r7, #4]
 8019ac0:	f7ed fbe5 	bl	800728e <lv_obj_get_ext_attr>
 8019ac4:	60f8      	str	r0, [r7, #12]
    return ext->recolor == 0 ? false : true;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	7f9b      	ldrb	r3, [r3, #30]
 8019aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ace:	b2db      	uxtb	r3, r3
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	bf14      	ite	ne
 8019ad4:	2301      	movne	r3, #1
 8019ad6:	2300      	moveq	r3, #0
 8019ad8:	b2db      	uxtb	r3, r3
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3710      	adds	r7, #16
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}

08019ae2 <lv_label_get_body_draw>:
 * Get the body draw attribute
 * @param label pointer to a label object
 * @return true: draw body; false: don't draw body
 */
bool lv_label_get_body_draw(const lv_obj_t * label)
{
 8019ae2:	b580      	push	{r7, lr}
 8019ae4:	b084      	sub	sp, #16
 8019ae6:	af00      	add	r7, sp, #0
 8019ae8:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019aea:	6878      	ldr	r0, [r7, #4]
 8019aec:	f7ed fbcf 	bl	800728e <lv_obj_get_ext_attr>
 8019af0:	60f8      	str	r0, [r7, #12]
    return ext->body_draw == 0 ? false : true;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	7fdb      	ldrb	r3, [r3, #31]
 8019af6:	f003 0301 	and.w	r3, r3, #1
 8019afa:	b2db      	uxtb	r3, r3
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	bf14      	ite	ne
 8019b00:	2301      	movne	r3, #1
 8019b02:	2300      	moveq	r3, #0
 8019b04:	b2db      	uxtb	r3, r3
}
 8019b06:	4618      	mov	r0, r3
 8019b08:	3710      	adds	r7, #16
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	bd80      	pop	{r7, pc}
	...

08019b10 <lv_label_get_letter_on>:
 * @param pos pointer to point with coordinates on a the label
 * @return the index of the letter on the 'pos_p' point (E.g. on 0;0 is the 0. letter)
 * Expressed in character index and not byte index (different in UTF-8)
 */
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b092      	sub	sp, #72	; 0x48
 8019b14:	af02      	add	r7, sp, #8
 8019b16:	6078      	str	r0, [r7, #4]
 8019b18:	6039      	str	r1, [r7, #0]
    const char * txt         = lv_label_get_text(label);
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f7ff ff9b 	bl	8019a56 <lv_label_get_text>
 8019b20:	62b8      	str	r0, [r7, #40]	; 0x28
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7ed fbb3 	bl	800728e <lv_obj_get_ext_attr>
 8019b28:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t line_start      = 0;
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t new_line_start  = 0;
 8019b2e:	2300      	movs	r3, #0
 8019b30:	63bb      	str	r3, [r7, #56]	; 0x38
    lv_coord_t max_w         = lv_obj_get_width(label);
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f7ed fac0 	bl	80070b8 <lv_obj_get_width>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_style_t * style = lv_obj_get_style(label);
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f7ed faeb 	bl	8007118 <lv_obj_get_style>
 8019b42:	6238      	str	r0, [r7, #32]
    const lv_font_t * font   = style->text.font;
 8019b44:	6a3b      	ldr	r3, [r7, #32]
 8019b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b48:	61fb      	str	r3, [r7, #28]
    uint8_t letter_height    = lv_font_get_line_height(font);
 8019b4a:	69f8      	ldr	r0, [r7, #28]
 8019b4c:	f7ff fc8a 	bl	8019464 <lv_font_get_line_height>
 8019b50:	4603      	mov	r3, r0
 8019b52:	76fb      	strb	r3, [r7, #27]
    lv_coord_t y             = 0;
 8019b54:	2300      	movs	r3, #0
 8019b56:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 8019b58:	2300      	movs	r3, #0
 8019b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8019b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b60:	7f9b      	ldrb	r3, [r3, #30]
 8019b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d005      	beq.n	8019b78 <lv_label_get_letter_on+0x68>
 8019b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b70:	f043 0301 	orr.w	r3, r3, #1
 8019b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8019b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b7a:	7f9b      	ldrb	r3, [r3, #30]
 8019b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019b80:	b2db      	uxtb	r3, r3
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d005      	beq.n	8019b92 <lv_label_get_letter_on+0x82>
 8019b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b8a:	f043 0302 	orr.w	r3, r3, #2
 8019b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8019b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b94:	7f9b      	ldrb	r3, [r3, #30]
 8019b96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019b9a:	b2db      	uxtb	r3, r3
 8019b9c:	2b10      	cmp	r3, #16
 8019b9e:	d105      	bne.n	8019bac <lv_label_get_letter_on+0x9c>
 8019ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019ba4:	f043 0304 	orr.w	r3, r3, #4
 8019ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8019bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bae:	7f9b      	ldrb	r3, [r3, #30]
 8019bb0:	f003 0307 	and.w	r3, r3, #7
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d12f      	bne.n	8019c1a <lv_label_get_letter_on+0x10a>
        max_w = LV_COORD_MAX;
 8019bba:	f647 4318 	movw	r3, #31768	; 0x7c18
 8019bbe:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    /*Search the line of the index letter */;
    while(txt[line_start] != '\0') {
 8019bc0:	e02b      	b.n	8019c1a <lv_label_get_letter_on+0x10a>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8019bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019bc6:	18d0      	adds	r0, r2, r3
 8019bc8:	6a3b      	ldr	r3, [r7, #32]
 8019bca:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8019bce:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8019bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019bd6:	9300      	str	r3, [sp, #0]
 8019bd8:	460b      	mov	r3, r1
 8019bda:	69f9      	ldr	r1, [r7, #28]
 8019bdc:	f7fa faf6 	bl	80141cc <lv_txt_get_next_line>
 8019be0:	4603      	mov	r3, r0
 8019be2:	461a      	mov	r2, r3
 8019be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019be6:	4413      	add	r3, r2
 8019be8:	63bb      	str	r3, [r7, #56]	; 0x38

        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8019bea:	683b      	ldr	r3, [r7, #0]
 8019bec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019bf0:	4619      	mov	r1, r3
 8019bf2:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8019bf6:	7efb      	ldrb	r3, [r7, #27]
 8019bf8:	4413      	add	r3, r2
 8019bfa:	4299      	cmp	r1, r3
 8019bfc:	dd14      	ble.n	8019c28 <lv_label_get_letter_on+0x118>
        y += letter_height + style->text.line_space;
 8019bfe:	7efb      	ldrb	r3, [r7, #27]
 8019c00:	b29a      	uxth	r2, r3
 8019c02:	6a3b      	ldr	r3, [r7, #32]
 8019c04:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019c08:	b29b      	uxth	r3, r3
 8019c0a:	4413      	add	r3, r2
 8019c0c:	b29a      	uxth	r2, r3
 8019c0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c10:	4413      	add	r3, r2
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	86bb      	strh	r3, [r7, #52]	; 0x34

        line_start = new_line_start;
 8019c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(txt[line_start] != '\0') {
 8019c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c1e:	4413      	add	r3, r2
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d1cd      	bne.n	8019bc2 <lv_label_get_letter_on+0xb2>
 8019c26:	e000      	b.n	8019c2a <lv_label_get_letter_on+0x11a>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8019c28:	bf00      	nop
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	863b      	strh	r3, [r7, #48]	; 0x30
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8019c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c30:	7f9b      	ldrb	r3, [r3, #30]
 8019c32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	2b10      	cmp	r3, #16
 8019c3a:	d129      	bne.n	8019c90 <lv_label_get_letter_on+0x180>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8019c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c40:	18d0      	adds	r0, r2, r3
 8019c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c44:	b29a      	uxth	r2, r3
 8019c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c48:	b29b      	uxth	r3, r3
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	b299      	uxth	r1, r3
 8019c4e:	6a3b      	ldr	r3, [r7, #32]
 8019c50:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8019c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019c58:	9300      	str	r3, [sp, #0]
 8019c5a:	4613      	mov	r3, r2
 8019c5c:	69fa      	ldr	r2, [r7, #28]
 8019c5e:	f7fa fb67 	bl	8014330 <lv_txt_get_width>
 8019c62:	4603      	mov	r3, r0
 8019c64:	833b      	strh	r3, [r7, #24]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8019c66:	6878      	ldr	r0, [r7, #4]
 8019c68:	f7ed fa26 	bl	80070b8 <lv_obj_get_width>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	0fda      	lsrs	r2, r3, #31
 8019c70:	4413      	add	r3, r2
 8019c72:	105b      	asrs	r3, r3, #1
 8019c74:	b21b      	sxth	r3, r3
 8019c76:	4619      	mov	r1, r3
 8019c78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c7c:	0fda      	lsrs	r2, r3, #31
 8019c7e:	4413      	add	r3, r2
 8019c80:	105b      	asrs	r3, r3, #1
 8019c82:	b21b      	sxth	r3, r3
 8019c84:	1acb      	subs	r3, r1, r3
 8019c86:	b29a      	uxth	r2, r3
 8019c88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019c8a:	4413      	add	r3, r2
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8019c90:	2300      	movs	r3, #0
 8019c92:	73fb      	strb	r3, [r7, #15]

    uint32_t i         = line_start;
 8019c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c96:	60bb      	str	r3, [r7, #8]
    uint32_t i_current = i;
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t letter;
    uint32_t letter_next;

    if(new_line_start > 0) {
 8019c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d04a      	beq.n	8019d38 <lv_label_get_letter_on+0x228>
        while(i <= new_line_start - 1) {
 8019ca2:	e044      	b.n	8019d2e <lv_label_get_letter_on+0x21e>
            /* Get the current letter.
             * Be careful 'i' already points to the next character*/
            letter = lv_txt_encoded_next(txt, &i);
 8019ca4:	4b2a      	ldr	r3, [pc, #168]	; (8019d50 <lv_label_get_letter_on+0x240>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	f107 0208 	add.w	r2, r7, #8
 8019cac:	4611      	mov	r1, r2
 8019cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cb0:	4798      	blx	r3
 8019cb2:	6178      	str	r0, [r7, #20]

            /*Get the next letter too for kerning*/
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8019cb4:	4b26      	ldr	r3, [pc, #152]	; (8019d50 <lv_label_get_letter_on+0x240>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	68ba      	ldr	r2, [r7, #8]
 8019cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019cbc:	440a      	add	r2, r1
 8019cbe:	2100      	movs	r1, #0
 8019cc0:	4610      	mov	r0, r2
 8019cc2:	4798      	blx	r3
 8019cc4:	6138      	str	r0, [r7, #16]

            /*Handle the recolor command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8019cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019cca:	f003 0301 	and.w	r3, r3, #1
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d00e      	beq.n	8019cf0 <lv_label_get_letter_on+0x1e0>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cd6:	4413      	add	r3, r2
 8019cd8:	781b      	ldrb	r3, [r3, #0]
 8019cda:	461a      	mov	r2, r3
 8019cdc:	f107 030f 	add.w	r3, r7, #15
 8019ce0:	4611      	mov	r1, r2
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f7fa fb8e 	bl	8014404 <lv_txt_is_cmd>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d000      	beq.n	8019cf0 <lv_label_get_letter_on+0x1e0>
                    continue; /*Skip the letter is it is part of a command*/
 8019cee:	e01e      	b.n	8019d2e <lv_label_get_letter_on+0x21e>
                }
            }

            x += lv_font_get_glyph_width(font, letter, letter_next);
 8019cf0:	693a      	ldr	r2, [r7, #16]
 8019cf2:	6979      	ldr	r1, [r7, #20]
 8019cf4:	69f8      	ldr	r0, [r7, #28]
 8019cf6:	f7f8 f883 	bl	8011e00 <lv_font_get_glyph_width>
 8019cfa:	4603      	mov	r3, r0
 8019cfc:	461a      	mov	r2, r3
 8019cfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019d00:	4413      	add	r3, r2
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	863b      	strh	r3, [r7, #48]	; 0x30
            if(pos->x < x) {
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d0c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8019d10:	429a      	cmp	r2, r3
 8019d12:	dd02      	ble.n	8019d1a <lv_label_get_letter_on+0x20a>
                i = i_current;
 8019d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d16:	60bb      	str	r3, [r7, #8]
                break;
 8019d18:	e00e      	b.n	8019d38 <lv_label_get_letter_on+0x228>
            }
            x += style->text.letter_space;
 8019d1a:	6a3b      	ldr	r3, [r7, #32]
 8019d1c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8019d20:	b29a      	uxth	r2, r3
 8019d22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019d24:	4413      	add	r3, r2
 8019d26:	b29b      	uxth	r3, r3
 8019d28:	863b      	strh	r3, [r7, #48]	; 0x30
            i_current = i;
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while(i <= new_line_start - 1) {
 8019d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d30:	1e5a      	subs	r2, r3, #1
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	429a      	cmp	r2, r3
 8019d36:	d2b5      	bcs.n	8019ca4 <lv_label_get_letter_on+0x194>
        }
    }

    return lv_encoded_get_char_id(txt, i);
 8019d38:	4b06      	ldr	r3, [pc, #24]	; (8019d54 <lv_label_get_letter_on+0x244>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	68ba      	ldr	r2, [r7, #8]
 8019d3e:	4611      	mov	r1, r2
 8019d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019d42:	4798      	blx	r3
 8019d44:	4603      	mov	r3, r0
 8019d46:	b29b      	uxth	r3, r3
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	3740      	adds	r7, #64	; 0x40
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}
 8019d50:	2000279c 	.word	0x2000279c
 8019d54:	200027a8 	.word	0x200027a8

08019d58 <lv_label_get_text_sel_start>:
 * @brief Get the selection start index.
 * @param label pointer to a label object.
 * @return selection start index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_start(const lv_obj_t * label)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b083      	sub	sp, #12
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_start;

#else
    (void)label;    /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 8019d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 8019d64:	4618      	mov	r0, r3
 8019d66:	370c      	adds	r7, #12
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6e:	4770      	bx	lr

08019d70 <lv_label_get_text_sel_end>:
 * @brief Get the selection end index.
 * @param label pointer to a label object.
 * @return selection end index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_end(const lv_obj_t * label)
{
 8019d70:	b480      	push	{r7}
 8019d72:	b083      	sub	sp, #12
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
#if LV_LABEL_TEXT_SEL
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_end;
#else
    (void)label; /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 8019d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	370c      	adds	r7, #12
 8019d80:	46bd      	mov	sp, r7
 8019d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d86:	4770      	bx	lr

08019d88 <lv_label_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_label_design(lv_obj_t * label, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d8a:	b099      	sub	sp, #100	; 0x64
 8019d8c:	af06      	add	r7, sp, #24
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	4613      	mov	r3, r2
 8019d94:	71fb      	strb	r3, [r7, #7]
    /* A label never covers an area */
    if(mode == LV_DESIGN_COVER_CHK)
 8019d96:	79fb      	ldrb	r3, [r7, #7]
 8019d98:	2b02      	cmp	r3, #2
 8019d9a:	d101      	bne.n	8019da0 <lv_label_design+0x18>
        return false;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	e1c4      	b.n	801a12a <lv_label_design+0x3a2>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019da0:	79fb      	ldrb	r3, [r7, #7]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	f040 81c0 	bne.w	801a128 <lv_label_design+0x3a0>
        lv_area_t coords;
        const lv_style_t * style = lv_obj_get_style(label);
 8019da8:	68f8      	ldr	r0, [r7, #12]
 8019daa:	f7ed f9b5 	bl	8007118 <lv_obj_get_style>
 8019dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8019db0:	68f8      	ldr	r0, [r7, #12]
 8019db2:	f7ed fa1e 	bl	80071f2 <lv_obj_get_opa_scale>
 8019db6:	4603      	mov	r3, r0
 8019db8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        lv_obj_get_coords(label, &coords);
 8019dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	68f8      	ldr	r0, [r7, #12]
 8019dc4:	f7ed f937 	bl	8007036 <lv_obj_get_coords>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(label);
 8019dc8:	68f8      	ldr	r0, [r7, #12]
 8019dca:	f7ed fa6c 	bl	80072a6 <lv_obj_get_group>
 8019dce:	6378      	str	r0, [r7, #52]	; 0x34
        if(lv_group_get_focused(g) == label) {
 8019dd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019dd2:	f7eb fa4a 	bl	800526a <lv_group_get_focused>
 8019dd6:	4602      	mov	r2, r0
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	4293      	cmp	r3, r2
 8019ddc:	d107      	bne.n	8019dee <lv_label_design+0x66>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8019dde:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019de2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019de8:	68b9      	ldr	r1, [r7, #8]
 8019dea:	f7f2 ff04 	bl	800cbf6 <lv_draw_rect>
        }
#endif

        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019dee:	68f8      	ldr	r0, [r7, #12]
 8019df0:	f7ed fa4d 	bl	800728e <lv_obj_get_ext_attr>
 8019df4:	6338      	str	r0, [r7, #48]	; 0x30

        if(ext->body_draw) {
 8019df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df8:	7fdb      	ldrb	r3, [r3, #31]
 8019dfa:	f003 0301 	and.w	r3, r3, #1
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d03b      	beq.n	8019e7c <lv_label_design+0xf4>
            lv_area_t bg;
            lv_obj_get_coords(label, &bg);
 8019e04:	f107 0320 	add.w	r3, r7, #32
 8019e08:	4619      	mov	r1, r3
 8019e0a:	68f8      	ldr	r0, [r7, #12]
 8019e0c:	f7ed f913 	bl	8007036 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8019e10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019e14:	b29a      	uxth	r2, r3
 8019e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e18:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	1ad3      	subs	r3, r2, r3
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	b21b      	sxth	r3, r3
 8019e24:	843b      	strh	r3, [r7, #32]
            bg.x2 += style->body.padding.right;
 8019e26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019e2a:	b29a      	uxth	r2, r3
 8019e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	4413      	add	r3, r2
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	b21b      	sxth	r3, r3
 8019e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
            bg.y1 -= style->body.padding.top;
 8019e3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019e40:	b29a      	uxth	r2, r3
 8019e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e44:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	1ad3      	subs	r3, r2, r3
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	b21b      	sxth	r3, r3
 8019e50:	847b      	strh	r3, [r7, #34]	; 0x22
            bg.y2 += style->body.padding.bottom;
 8019e52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019e56:	b29a      	uxth	r2, r3
 8019e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e5a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	4413      	add	r3, r2
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	b21b      	sxth	r3, r3
 8019e66:	84fb      	strh	r3, [r7, #38]	; 0x26

            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8019e68:	68f8      	ldr	r0, [r7, #12]
 8019e6a:	f7ed f9c2 	bl	80071f2 <lv_obj_get_opa_scale>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	f107 0020 	add.w	r0, r7, #32
 8019e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019e76:	68b9      	ldr	r1, [r7, #8]
 8019e78:	f7f2 febd 	bl	800cbf6 <lv_draw_rect>
        }

        /*TEST: draw a background for the label*/
        // lv_draw_rect(&label->coords, mask, &lv_style_plain_color, LV_OPA_COVER);

        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8019e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e84:	7f9b      	ldrb	r3, [r3, #30]
 8019e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e8a:	b2db      	uxtb	r3, r3
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d005      	beq.n	8019e9c <lv_label_design+0x114>
 8019e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019e94:	f043 0301 	orr.w	r3, r3, #1
 8019e98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8019e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e9e:	7f9b      	ldrb	r3, [r3, #30]
 8019ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d005      	beq.n	8019eb6 <lv_label_design+0x12e>
 8019eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019eae:	f043 0302 	orr.w	r3, r3, #2
 8019eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8019eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eb8:	7f9b      	ldrb	r3, [r3, #30]
 8019eba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019ebe:	b2db      	uxtb	r3, r3
 8019ec0:	2b10      	cmp	r3, #16
 8019ec2:	d105      	bne.n	8019ed0 <lv_label_design+0x148>
 8019ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019ec8:	f043 0304 	orr.w	r3, r3, #4
 8019ecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8019ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ed2:	7f9b      	ldrb	r3, [r3, #30]
 8019ed4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019ed8:	b2db      	uxtb	r3, r3
 8019eda:	2b20      	cmp	r3, #32
 8019edc:	d105      	bne.n	8019eea <lv_label_design+0x162>
 8019ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019ee2:	f043 0308 	orr.w	r3, r3, #8
 8019ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        /* In ROLL mode the CENTER and RIGHT are pointless so remove them.
         * (In addition they will result mis-alignment is this case)*/
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8019eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eec:	7f9b      	ldrb	r3, [r3, #30]
 8019eee:	f003 0307 	and.w	r3, r3, #7
 8019ef2:	b2db      	uxtb	r3, r3
 8019ef4:	2b03      	cmp	r3, #3
 8019ef6:	d006      	beq.n	8019f06 <lv_label_design+0x17e>
 8019ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019efa:	7f9b      	ldrb	r3, [r3, #30]
 8019efc:	f003 0307 	and.w	r3, r3, #7
 8019f00:	b2db      	uxtb	r3, r3
 8019f02:	2b04      	cmp	r3, #4
 8019f04:	d138      	bne.n	8019f78 <lv_label_design+0x1f0>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8019f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f08:	7f9b      	ldrb	r3, [r3, #30]
 8019f0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019f0e:	b2db      	uxtb	r3, r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8019f10:	2b10      	cmp	r3, #16
 8019f12:	d006      	beq.n	8019f22 <lv_label_design+0x19a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8019f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f16:	7f9b      	ldrb	r3, [r3, #30]
 8019f18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019f1c:	b2db      	uxtb	r3, r3
 8019f1e:	2b20      	cmp	r3, #32
 8019f20:	d12a      	bne.n	8019f78 <lv_label_design+0x1f0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8019f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f24:	6819      	ldr	r1, [r3, #0]
 8019f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f2c:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 8019f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f32:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019f36:	f107 001c 	add.w	r0, r7, #28
 8019f3a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8019f3e:	9202      	str	r2, [sp, #8]
 8019f40:	f647 4218 	movw	r2, #31768	; 0x7c18
 8019f44:	9201      	str	r2, [sp, #4]
 8019f46:	9300      	str	r3, [sp, #0]
 8019f48:	462b      	mov	r3, r5
 8019f4a:	4622      	mov	r2, r4
 8019f4c:	f7fa f88c 	bl	8014068 <lv_txt_get_size>
                            LV_COORD_MAX, flag);
            if(size.x > lv_obj_get_width(label)) {
 8019f50:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8019f54:	68f8      	ldr	r0, [r7, #12]
 8019f56:	f7ed f8af 	bl	80070b8 <lv_obj_get_width>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	429c      	cmp	r4, r3
 8019f5e:	dd0b      	ble.n	8019f78 <lv_label_design+0x1f0>
                flag &= ~LV_TXT_FLAG_RIGHT;
 8019f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019f64:	f023 0308 	bic.w	r3, r3, #8
 8019f68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                flag &= ~LV_TXT_FLAG_CENTER;
 8019f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019f70:	f023 0304 	bic.w	r3, r3, #4
 8019f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        lv_draw_label_hint_t * hint = &ext->hint;
 8019f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f7a:	3310      	adds	r3, #16
 8019f7c:	643b      	str	r3, [r7, #64]	; 0x40
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f80:	7f9b      	ldrb	r3, [r3, #30]
 8019f82:	f003 0307 	and.w	r3, r3, #7
 8019f86:	b2db      	uxtb	r3, r3
 8019f88:	2b04      	cmp	r3, #4
 8019f8a:	d006      	beq.n	8019f9a <lv_label_design+0x212>
 8019f8c:	68f8      	ldr	r0, [r7, #12]
 8019f8e:	f7ed f8a1 	bl	80070d4 <lv_obj_get_height>
 8019f92:	4603      	mov	r3, r0
 8019f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f98:	da01      	bge.n	8019f9e <lv_label_design+0x216>
            hint = NULL;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	643b      	str	r3, [r7, #64]	; 0x40

        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 8019f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa0:	681c      	ldr	r4, [r3, #0]
 8019fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa4:	f103 050a 	add.w	r5, r3, #10
 8019fa8:	68f8      	ldr	r0, [r7, #12]
 8019faa:	f7ff fed5 	bl	8019d58 <lv_label_get_text_sel_start>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	461e      	mov	r6, r3
 8019fb2:	68f8      	ldr	r0, [r7, #12]
 8019fb4:	f7ff fedc 	bl	8019d70 <lv_label_get_text_sel_end>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	4619      	mov	r1, r3
 8019fbc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8019fc0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fc6:	9305      	str	r3, [sp, #20]
 8019fc8:	9104      	str	r1, [sp, #16]
 8019fca:	9603      	str	r6, [sp, #12]
 8019fcc:	9502      	str	r5, [sp, #8]
 8019fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019fd2:	9301      	str	r3, [sp, #4]
 8019fd4:	9400      	str	r4, [sp, #0]
 8019fd6:	4613      	mov	r3, r2
 8019fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019fda:	68b9      	ldr	r1, [r7, #8]
 8019fdc:	f7f0 fb72 	bl	800a6c4 <lv_draw_label>
                      lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), hint);

        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8019fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe2:	7f9b      	ldrb	r3, [r3, #30]
 8019fe4:	f003 0307 	and.w	r3, r3, #7
 8019fe8:	b2db      	uxtb	r3, r3
 8019fea:	2b04      	cmp	r3, #4
 8019fec:	f040 809c 	bne.w	801a128 <lv_label_design+0x3a0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8019ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff2:	6819      	ldr	r1, [r3, #0]
 8019ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ff6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ffa:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 8019ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a000:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a004:	f107 0018 	add.w	r0, r7, #24
 801a008:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801a00c:	9202      	str	r2, [sp, #8]
 801a00e:	f647 4218 	movw	r2, #31768	; 0x7c18
 801a012:	9201      	str	r2, [sp, #4]
 801a014:	9300      	str	r3, [sp, #0]
 801a016:	462b      	mov	r3, r5
 801a018:	4622      	mov	r2, r4
 801a01a:	f7fa f825 	bl	8014068 <lv_txt_get_size>
                            LV_COORD_MAX, flag);

            lv_point_t ofs;

            /*Draw the text again next to the original to make an circular effect */
            if(size.x > lv_obj_get_width(label)) {
 801a01e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 801a022:	68f8      	ldr	r0, [r7, #12]
 801a024:	f7ed f848 	bl	80070b8 <lv_obj_get_width>
 801a028:	4603      	mov	r3, r0
 801a02a:	429c      	cmp	r4, r3
 801a02c:	dd3c      	ble.n	801a0a8 <lv_label_design+0x320>
                ofs.x = ext->offset.x + size.x +
 801a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a030:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801a034:	b29a      	uxth	r2, r3
 801a036:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	4413      	add	r3, r2
 801a03e:	b29c      	uxth	r4, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a044:	2220      	movs	r2, #32
 801a046:	2120      	movs	r1, #32
 801a048:	4618      	mov	r0, r3
 801a04a:	f7f7 fed9 	bl	8011e00 <lv_font_get_glyph_width>
 801a04e:	4603      	mov	r3, r0
                ofs.x = ext->offset.x + size.x +
 801a050:	461a      	mov	r2, r3
 801a052:	0052      	lsls	r2, r2, #1
 801a054:	4413      	add	r3, r2
 801a056:	b29b      	uxth	r3, r3
 801a058:	4423      	add	r3, r4
 801a05a:	b29b      	uxth	r3, r3
 801a05c:	b21b      	sxth	r3, r3
 801a05e:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y;
 801a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a062:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801a066:	82fb      	strh	r3, [r7, #22]

                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a06a:	681c      	ldr	r4, [r3, #0]
 801a06c:	68f8      	ldr	r0, [r7, #12]
 801a06e:	f7ff fe73 	bl	8019d58 <lv_label_get_text_sel_start>
 801a072:	4603      	mov	r3, r0
 801a074:	461d      	mov	r5, r3
 801a076:	68f8      	ldr	r0, [r7, #12]
 801a078:	f7ff fe7a 	bl	8019d70 <lv_label_get_text_sel_end>
 801a07c:	4603      	mov	r3, r0
 801a07e:	4619      	mov	r1, r3
 801a080:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801a084:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801a088:	2300      	movs	r3, #0
 801a08a:	9305      	str	r3, [sp, #20]
 801a08c:	9104      	str	r1, [sp, #16]
 801a08e:	9503      	str	r5, [sp, #12]
 801a090:	f107 0314 	add.w	r3, r7, #20
 801a094:	9302      	str	r3, [sp, #8]
 801a096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a09a:	9301      	str	r3, [sp, #4]
 801a09c:	9400      	str	r4, [sp, #0]
 801a09e:	4613      	mov	r3, r2
 801a0a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0a2:	68b9      	ldr	r1, [r7, #8]
 801a0a4:	f7f0 fb0e 	bl	800a6c4 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }

            /*Draw the text again below the original to make an circular effect */
            if(size.y > lv_obj_get_height(label)) {
 801a0a8:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 801a0ac:	68f8      	ldr	r0, [r7, #12]
 801a0ae:	f7ed f811 	bl	80070d4 <lv_obj_get_height>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	429c      	cmp	r4, r3
 801a0b6:	dd37      	ble.n	801a128 <lv_label_design+0x3a0>
                ofs.x = ext->offset.x;
 801a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801a0be:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 801a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801a0c6:	b29a      	uxth	r2, r3
 801a0c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a0cc:	b29b      	uxth	r3, r3
 801a0ce:	4413      	add	r3, r2
 801a0d0:	b29c      	uxth	r4, r3
 801a0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	f7ff f9c4 	bl	8019464 <lv_font_get_line_height>
 801a0dc:	4603      	mov	r3, r0
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	4423      	add	r3, r4
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	b21b      	sxth	r3, r3
 801a0e6:	82fb      	strh	r3, [r7, #22]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ea:	681c      	ldr	r4, [r3, #0]
 801a0ec:	68f8      	ldr	r0, [r7, #12]
 801a0ee:	f7ff fe33 	bl	8019d58 <lv_label_get_text_sel_start>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	461d      	mov	r5, r3
 801a0f6:	68f8      	ldr	r0, [r7, #12]
 801a0f8:	f7ff fe3a 	bl	8019d70 <lv_label_get_text_sel_end>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	4619      	mov	r1, r3
 801a100:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801a104:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801a108:	2300      	movs	r3, #0
 801a10a:	9305      	str	r3, [sp, #20]
 801a10c:	9104      	str	r1, [sp, #16]
 801a10e:	9503      	str	r5, [sp, #12]
 801a110:	f107 0314 	add.w	r3, r7, #20
 801a114:	9302      	str	r3, [sp, #8]
 801a116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a11a:	9301      	str	r3, [sp, #4]
 801a11c:	9400      	str	r4, [sp, #0]
 801a11e:	4613      	mov	r3, r2
 801a120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a122:	68b9      	ldr	r1, [r7, #8]
 801a124:	f7f0 face 	bl	800a6c4 <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }
        }
    }
    return true;
 801a128:	2301      	movs	r3, #1
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	374c      	adds	r7, #76	; 0x4c
 801a12e:	46bd      	mov	sp, r7
 801a130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a134 <lv_label_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)
{
 801a134:	b590      	push	{r4, r7, lr}
 801a136:	b089      	sub	sp, #36	; 0x24
 801a138:	af00      	add	r7, sp, #0
 801a13a:	60f8      	str	r0, [r7, #12]
 801a13c:	460b      	mov	r3, r1
 801a13e:	607a      	str	r2, [r7, #4]
 801a140:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(label, sign, param);
 801a142:	4b5a      	ldr	r3, [pc, #360]	; (801a2ac <lv_label_signal+0x178>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	7af9      	ldrb	r1, [r7, #11]
 801a148:	687a      	ldr	r2, [r7, #4]
 801a14a:	68f8      	ldr	r0, [r7, #12]
 801a14c:	4798      	blx	r3
 801a14e:	4603      	mov	r3, r0
 801a150:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801a152:	7fbb      	ldrb	r3, [r7, #30]
 801a154:	2b01      	cmp	r3, #1
 801a156:	d001      	beq.n	801a15c <lv_label_signal+0x28>
 801a158:	7fbb      	ldrb	r3, [r7, #30]
 801a15a:	e0a3      	b.n	801a2a4 <lv_label_signal+0x170>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a15c:	68f8      	ldr	r0, [r7, #12]
 801a15e:	f7ed f896 	bl	800728e <lv_obj_get_ext_attr>
 801a162:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801a164:	7afb      	ldrb	r3, [r7, #11]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d112      	bne.n	801a190 <lv_label_signal+0x5c>
        if(ext->static_txt == 0) {
 801a16a:	69bb      	ldr	r3, [r7, #24]
 801a16c:	7f9b      	ldrb	r3, [r3, #30]
 801a16e:	f003 0308 	and.w	r3, r3, #8
 801a172:	b2db      	uxtb	r3, r3
 801a174:	2b00      	cmp	r3, #0
 801a176:	d107      	bne.n	801a188 <lv_label_signal+0x54>
            lv_mem_free(ext->text);
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	4618      	mov	r0, r3
 801a17e:	f7f9 fc67 	bl	8013a50 <lv_mem_free>
            ext->text = NULL;
 801a182:	69bb      	ldr	r3, [r7, #24]
 801a184:	2200      	movs	r2, #0
 801a186:	601a      	str	r2, [r3, #0]
        }
        lv_label_dot_tmp_free(label);
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f000 fc16 	bl	801a9ba <lv_label_dot_tmp_free>
 801a18e:	e088      	b.n	801a2a2 <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801a190:	7afb      	ldrb	r3, [r7, #11]
 801a192:	2b04      	cmp	r3, #4
 801a194:	d106      	bne.n	801a1a4 <lv_label_signal+0x70>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(label);
 801a196:	68f8      	ldr	r0, [r7, #12]
 801a198:	f000 fb32 	bl	801a800 <lv_label_revert_dots>

        lv_label_refr_text(label);
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	f000 f889 	bl	801a2b4 <lv_label_refr_text>
 801a1a2:	e07e      	b.n	801a2a2 <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801a1a4:	7afb      	ldrb	r3, [r7, #11]
 801a1a6:	2b02      	cmp	r3, #2
 801a1a8:	d120      	bne.n	801a1ec <lv_label_signal+0xb8>
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	3310      	adds	r3, #16
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	f7ff f964 	bl	801947c <lv_area_get_width>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	461c      	mov	r4, r3
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f7ff f95f 	bl	801947c <lv_area_get_width>
 801a1be:	4603      	mov	r3, r0
 801a1c0:	429c      	cmp	r4, r3
 801a1c2:	d10c      	bne.n	801a1de <lv_label_signal+0xaa>
           lv_area_get_height(&label->coords) != lv_area_get_height(param)) {
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	3310      	adds	r3, #16
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f7ff f96e 	bl	80194aa <lv_area_get_height>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	461c      	mov	r4, r3
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f7ff f969 	bl	80194aa <lv_area_get_height>
 801a1d8:	4603      	mov	r3, r0
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801a1da:	429c      	cmp	r4, r3
 801a1dc:	d061      	beq.n	801a2a2 <lv_label_signal+0x16e>
            lv_label_revert_dots(label);
 801a1de:	68f8      	ldr	r0, [r7, #12]
 801a1e0:	f000 fb0e 	bl	801a800 <lv_label_revert_dots>
            lv_label_refr_text(label);
 801a1e4:	68f8      	ldr	r0, [r7, #12]
 801a1e6:	f000 f865 	bl	801a2b4 <lv_label_refr_text>
 801a1ea:	e05a      	b.n	801a2a2 <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801a1ec:	7afb      	ldrb	r3, [r7, #11]
 801a1ee:	2b05      	cmp	r3, #5
 801a1f0:	d13c      	bne.n	801a26c <lv_label_signal+0x138>
        if(ext->body_draw) {
 801a1f2:	69bb      	ldr	r3, [r7, #24]
 801a1f4:	7fdb      	ldrb	r3, [r3, #31]
 801a1f6:	f003 0301 	and.w	r3, r3, #1
 801a1fa:	b2db      	uxtb	r3, r3
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d050      	beq.n	801a2a2 <lv_label_signal+0x16e>
            const lv_style_t * style = lv_label_get_style(label, LV_LABEL_STYLE_MAIN);
 801a200:	2100      	movs	r1, #0
 801a202:	68f8      	ldr	r0, [r7, #12]
 801a204:	f7ff f977 	bl	80194f6 <lv_label_get_style>
 801a208:	6138      	str	r0, [r7, #16]

            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.left);
 801a20a:	693b      	ldr	r3, [r7, #16]
 801a20c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a216:	4293      	cmp	r3, r2
 801a218:	bfb8      	it	lt
 801a21a:	4613      	movlt	r3, r2
 801a21c:	b21a      	sxth	r2, r3
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 801a222:	693b      	ldr	r3, [r7, #16]
 801a224:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a22e:	4293      	cmp	r3, r2
 801a230:	bfb8      	it	lt
 801a232:	4613      	movlt	r3, r2
 801a234:	b21a      	sxth	r2, r3
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 801a23a:	693b      	ldr	r3, [r7, #16]
 801a23c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a246:	4293      	cmp	r3, r2
 801a248:	bfb8      	it	lt
 801a24a:	4613      	movlt	r3, r2
 801a24c:	b21a      	sxth	r2, r3
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 801a252:	693b      	ldr	r3, [r7, #16]
 801a254:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a25e:	4293      	cmp	r3, r2
 801a260:	bfb8      	it	lt
 801a262:	4613      	movlt	r3, r2
 801a264:	b21a      	sxth	r2, r3
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	869a      	strh	r2, [r3, #52]	; 0x34
 801a26a:	e01a      	b.n	801a2a2 <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a26c:	7afb      	ldrb	r3, [r7, #11]
 801a26e:	2b06      	cmp	r3, #6
 801a270:	d117      	bne.n	801a2a2 <lv_label_signal+0x16e>
        lv_obj_type_t * buf = param;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a276:	2300      	movs	r3, #0
 801a278:	77fb      	strb	r3, [r7, #31]
 801a27a:	e008      	b.n	801a28e <lv_label_signal+0x15a>
            if(buf->type[i] == NULL) break;
 801a27c:	7ffa      	ldrb	r2, [r7, #31]
 801a27e:	697b      	ldr	r3, [r7, #20]
 801a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d006      	beq.n	801a296 <lv_label_signal+0x162>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a288:	7ffb      	ldrb	r3, [r7, #31]
 801a28a:	3301      	adds	r3, #1
 801a28c:	77fb      	strb	r3, [r7, #31]
 801a28e:	7ffb      	ldrb	r3, [r7, #31]
 801a290:	2b06      	cmp	r3, #6
 801a292:	d9f3      	bls.n	801a27c <lv_label_signal+0x148>
 801a294:	e000      	b.n	801a298 <lv_label_signal+0x164>
            if(buf->type[i] == NULL) break;
 801a296:	bf00      	nop
        }
        buf->type[i] = "lv_label";
 801a298:	7ffa      	ldrb	r2, [r7, #31]
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	4904      	ldr	r1, [pc, #16]	; (801a2b0 <lv_label_signal+0x17c>)
 801a29e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801a2a2:	7fbb      	ldrb	r3, [r7, #30]
}
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	3724      	adds	r7, #36	; 0x24
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd90      	pop	{r4, r7, pc}
 801a2ac:	20002ad4 	.word	0x20002ad4
 801a2b0:	08029ce0 	.word	0x08029ce0

0801a2b4 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * label)
{
 801a2b4:	b590      	push	{r4, r7, lr}
 801a2b6:	b09d      	sub	sp, #116	; 0x74
 801a2b8:	af04      	add	r7, sp, #16
 801a2ba:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a2bc:	6878      	ldr	r0, [r7, #4]
 801a2be:	f7ec ffe6 	bl	800728e <lv_obj_get_ext_attr>
 801a2c2:	64f8      	str	r0, [r7, #76]	; 0x4c

    if(ext->text == NULL) return;
 801a2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	f000 828f 	beq.w	801a7ec <lv_label_refr_text+0x538>

    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801a2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2d4:	611a      	str	r2, [r3, #16]

    lv_coord_t max_w         = lv_obj_get_width(label);
 801a2d6:	6878      	ldr	r0, [r7, #4]
 801a2d8:	f7ec feee 	bl	80070b8 <lv_obj_get_width>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    const lv_style_t * style = lv_obj_get_style(label);
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f7ec ff18 	bl	8007118 <lv_obj_get_style>
 801a2e8:	64b8      	str	r0, [r7, #72]	; 0x48
    const lv_font_t * font   = style->text.font;
 801a2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ee:	647b      	str	r3, [r7, #68]	; 0x44

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801a2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2f2:	7f9b      	ldrb	r3, [r3, #30]
 801a2f4:	f003 0307 	and.w	r3, r3, #7
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d103      	bne.n	801a306 <lv_label_refr_text+0x52>
        max_w = LV_COORD_MAX;
 801a2fe:	f647 4318 	movw	r3, #31768	; 0x7c18
 801a302:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    }

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801a306:	2300      	movs	r3, #0
 801a308:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801a30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a30e:	7f9b      	ldrb	r3, [r3, #30]
 801a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a314:	b2db      	uxtb	r3, r3
 801a316:	2b00      	cmp	r3, #0
 801a318:	d005      	beq.n	801a326 <lv_label_refr_text+0x72>
 801a31a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801a31e:	f043 0301 	orr.w	r3, r3, #1
 801a322:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a328:	7f9b      	ldrb	r3, [r3, #30]
 801a32a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	2b00      	cmp	r3, #0
 801a332:	d005      	beq.n	801a340 <lv_label_refr_text+0x8c>
 801a334:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801a338:	f043 0302 	orr.w	r3, r3, #2
 801a33c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801a340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a342:	6819      	ldr	r1, [r3, #0]
 801a344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a346:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801a34a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a34c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a350:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801a354:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 801a358:	9202      	str	r2, [sp, #8]
 801a35a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801a35e:	9201      	str	r2, [sp, #4]
 801a360:	9300      	str	r3, [sp, #0]
 801a362:	4623      	mov	r3, r4
 801a364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a366:	f7f9 fe7f 	bl	8014068 <lv_txt_get_size>

    /*Set the full size in expand mode*/
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801a36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a36c:	7f9b      	ldrb	r3, [r3, #30]
 801a36e:	f003 0307 	and.w	r3, r3, #7
 801a372:	b2db      	uxtb	r3, r3
 801a374:	2b00      	cmp	r3, #0
 801a376:	d108      	bne.n	801a38a <lv_label_refr_text+0xd6>
        lv_obj_set_size(label, size.x, size.y);
 801a378:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a37c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801a380:	4619      	mov	r1, r3
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7eb ff0b 	bl	800619e <lv_obj_set_size>
 801a388:	e22c      	b.n	801a7e4 <lv_label_refr_text+0x530>
    }
    /*In roll mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801a38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a38c:	7f9b      	ldrb	r3, [r3, #30]
 801a38e:	f003 0307 	and.w	r3, r3, #7
 801a392:	b2db      	uxtb	r3, r3
 801a394:	2b03      	cmp	r3, #3
 801a396:	f040 809f 	bne.w	801a4d8 <lv_label_refr_text+0x224>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801a39e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a3a2:	f043 0302 	orr.w	r3, r3, #2
 801a3a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 1;
 801a3aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a3ae:	f043 0301 	orr.w	r3, r3, #1
 801a3b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	61bb      	str	r3, [r7, #24]
        anim.ready_cb = NULL;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	617b      	str	r3, [r7, #20]
        anim.path_cb  = lv_anim_path_linear;
 801a3be:	4baa      	ldr	r3, [pc, #680]	; (801a668 <lv_label_refr_text+0x3b4>)
 801a3c0:	613b      	str	r3, [r7, #16]
        anim.playback_pause =
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c6:	2220      	movs	r2, #32
 801a3c8:	2120      	movs	r1, #32
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	f7f7 fd18 	bl	8011e00 <lv_font_get_glyph_width>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	461a      	mov	r2, r3
 801a3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3d6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a3da:	4413      	add	r3, r2
 801a3dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a3e0:	fb02 f303 	mul.w	r3, r2, r3
             ext->anim_speed) *
 801a3e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a3e6:	8b92      	ldrh	r2, [r2, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a3e8:	fb93 f3f2 	sdiv	r3, r3, r2
        anim.playback_pause =
 801a3ec:	b29b      	uxth	r3, r3
 801a3ee:	461a      	mov	r2, r3
 801a3f0:	0052      	lsls	r2, r2, #1
 801a3f2:	4413      	add	r3, r2
 801a3f4:	b29b      	uxth	r3, r3
 801a3f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            LV_LABEL_WAIT_CHAR_COUNT;
        anim.repeat_pause = anim.playback_pause;
 801a3f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a3fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        anim.act_time     = -anim.playback_pause;
 801a3fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a3fe:	425b      	negs	r3, r3
 801a400:	b29b      	uxth	r3, r3
 801a402:	b21b      	sxth	r3, r3
 801a404:	847b      	strh	r3, [r7, #34]	; 0x22

        bool hor_anim = false;
 801a406:	2300      	movs	r3, #0
 801a408:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if(size.x > lv_obj_get_width(label)) {
 801a40c:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801a410:	6878      	ldr	r0, [r7, #4]
 801a412:	f7ec fe51 	bl	80070b8 <lv_obj_get_width>
 801a416:	4603      	mov	r3, r0
 801a418:	429c      	cmp	r4, r3
 801a41a:	dd1e      	ble.n	801a45a <lv_label_refr_text+0x1a6>
            anim.end     = lv_obj_get_width(label) - size.x;
 801a41c:	6878      	ldr	r0, [r7, #4]
 801a41e:	f7ec fe4b 	bl	80070b8 <lv_obj_get_width>
 801a422:	4603      	mov	r3, r0
 801a424:	461a      	mov	r2, r3
 801a426:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a42a:	1ad3      	subs	r3, r2, r3
 801a42c:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801a42e:	4b8f      	ldr	r3, [pc, #572]	; (801a66c <lv_label_refr_text+0x3b8>)
 801a430:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a434:	8b9b      	ldrh	r3, [r3, #28]
 801a436:	69ba      	ldr	r2, [r7, #24]
 801a438:	b211      	sxth	r1, r2
 801a43a:	69fa      	ldr	r2, [r7, #28]
 801a43c:	b212      	sxth	r2, r2
 801a43e:	4618      	mov	r0, r3
 801a440:	f7f8 fa68 	bl	8012914 <lv_anim_speed_to_time>
 801a444:	4603      	mov	r3, r0
 801a446:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a448:	f107 0308 	add.w	r3, r7, #8
 801a44c:	4618      	mov	r0, r3
 801a44e:	f7f8 f9e9 	bl	8012824 <lv_anim_create>
            hor_anim = true;
 801a452:	2301      	movs	r3, #1
 801a454:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801a458:	e006      	b.n	801a468 <lv_label_refr_text+0x1b4>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801a45a:	4984      	ldr	r1, [pc, #528]	; (801a66c <lv_label_refr_text+0x3b8>)
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f7f8 fa21 	bl	80128a4 <lv_anim_del>
            ext->offset.x = 0;
 801a462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a464:	2200      	movs	r2, #0
 801a466:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801a468:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	f7ec fe31 	bl	80070d4 <lv_obj_get_height>
 801a472:	4603      	mov	r3, r0
 801a474:	429c      	cmp	r4, r3
 801a476:	dd27      	ble.n	801a4c8 <lv_label_refr_text+0x214>
 801a478:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801a47c:	f083 0301 	eor.w	r3, r3, #1
 801a480:	b2db      	uxtb	r3, r3
 801a482:	2b00      	cmp	r3, #0
 801a484:	d020      	beq.n	801a4c8 <lv_label_refr_text+0x214>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f7ec fe24 	bl	80070d4 <lv_obj_get_height>
 801a48c:	4603      	mov	r3, r0
 801a48e:	461a      	mov	r2, r3
 801a490:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a494:	1ad4      	subs	r4, r2, r3
 801a496:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a498:	f7fe ffe4 	bl	8019464 <lv_font_get_line_height>
 801a49c:	4603      	mov	r3, r0
 801a49e:	1ae3      	subs	r3, r4, r3
 801a4a0:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801a4a2:	4b73      	ldr	r3, [pc, #460]	; (801a670 <lv_label_refr_text+0x3bc>)
 801a4a4:	60fb      	str	r3, [r7, #12]

            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4a8:	8b9b      	ldrh	r3, [r3, #28]
 801a4aa:	69ba      	ldr	r2, [r7, #24]
 801a4ac:	b211      	sxth	r1, r2
 801a4ae:	69fa      	ldr	r2, [r7, #28]
 801a4b0:	b212      	sxth	r2, r2
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7f8 fa2e 	bl	8012914 <lv_anim_speed_to_time>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a4bc:	f107 0308 	add.w	r3, r7, #8
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	f7f8 f9af 	bl	8012824 <lv_anim_create>
 801a4c6:	e18d      	b.n	801a7e4 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801a4c8:	4969      	ldr	r1, [pc, #420]	; (801a670 <lv_label_refr_text+0x3bc>)
 801a4ca:	6878      	ldr	r0, [r7, #4]
 801a4cc:	f7f8 f9ea 	bl	80128a4 <lv_anim_del>
            ext->offset.y = 0;
 801a4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	819a      	strh	r2, [r3, #12]
 801a4d6:	e185      	b.n	801a7e4 <lv_label_refr_text+0x530>
        }
#endif
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801a4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4da:	7f9b      	ldrb	r3, [r3, #30]
 801a4dc:	f003 0307 	and.w	r3, r3, #7
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	2b04      	cmp	r3, #4
 801a4e4:	f040 809c 	bne.w	801a620 <lv_label_refr_text+0x36c>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801a4ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4f0:	f043 0302 	orr.w	r3, r3, #2
 801a4f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 0;
 801a4f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4fc:	f36f 0300 	bfc	r3, #0, #1
 801a500:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801a504:	2300      	movs	r3, #0
 801a506:	61bb      	str	r3, [r7, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a50c:	2220      	movs	r2, #32
 801a50e:	2120      	movs	r1, #32
 801a510:	4618      	mov	r0, r3
 801a512:	f7f7 fc75 	bl	8011e00 <lv_font_get_glyph_width>
 801a516:	4603      	mov	r3, r0
 801a518:	461a      	mov	r2, r3
 801a51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a51c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a520:	4413      	add	r3, r2
 801a522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a526:	fb02 f303 	mul.w	r3, r2, r3
                          ext->anim_speed) *
 801a52a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a52c:	8b92      	ldrh	r2, [r2, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a52e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a532:	b29b      	uxth	r3, r3
 801a534:	461a      	mov	r2, r3
 801a536:	009b      	lsls	r3, r3, #2
 801a538:	1ad3      	subs	r3, r2, r3
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	b21b      	sxth	r3, r3
 801a53e:	847b      	strh	r3, [r7, #34]	; 0x22
                        LV_LABEL_WAIT_CHAR_COUNT;
        anim.ready_cb       = NULL;
 801a540:	2300      	movs	r3, #0
 801a542:	617b      	str	r3, [r7, #20]
        anim.path_cb        = lv_anim_path_linear;
 801a544:	4b48      	ldr	r3, [pc, #288]	; (801a668 <lv_label_refr_text+0x3b4>)
 801a546:	613b      	str	r3, [r7, #16]
        anim.playback_pause = 0;
 801a548:	2300      	movs	r3, #0
 801a54a:	84bb      	strh	r3, [r7, #36]	; 0x24
        anim.repeat_pause   = 0;
 801a54c:	2300      	movs	r3, #0
 801a54e:	84fb      	strh	r3, [r7, #38]	; 0x26

        bool hor_anim = false;
 801a550:	2300      	movs	r3, #0
 801a552:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if(size.x > lv_obj_get_width(label)) {
 801a556:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801a55a:	6878      	ldr	r0, [r7, #4]
 801a55c:	f7ec fdac 	bl	80070b8 <lv_obj_get_width>
 801a560:	4603      	mov	r3, r0
 801a562:	429c      	cmp	r4, r3
 801a564:	dd22      	ble.n	801a5ac <lv_label_refr_text+0x2f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801a566:	2220      	movs	r2, #32
 801a568:	2120      	movs	r1, #32
 801a56a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a56c:	f7f7 fc48 	bl	8011e00 <lv_font_get_glyph_width>
 801a570:	4603      	mov	r3, r0
 801a572:	461a      	mov	r2, r3
 801a574:	009b      	lsls	r3, r3, #2
 801a576:	1ad3      	subs	r3, r2, r3
 801a578:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801a57c:	1a9b      	subs	r3, r3, r2
 801a57e:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801a580:	4b3a      	ldr	r3, [pc, #232]	; (801a66c <lv_label_refr_text+0x3b8>)
 801a582:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a586:	8b9b      	ldrh	r3, [r3, #28]
 801a588:	69ba      	ldr	r2, [r7, #24]
 801a58a:	b211      	sxth	r1, r2
 801a58c:	69fa      	ldr	r2, [r7, #28]
 801a58e:	b212      	sxth	r2, r2
 801a590:	4618      	mov	r0, r3
 801a592:	f7f8 f9bf 	bl	8012914 <lv_anim_speed_to_time>
 801a596:	4603      	mov	r3, r0
 801a598:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a59a:	f107 0308 	add.w	r3, r7, #8
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7f8 f940 	bl	8012824 <lv_anim_create>
            hor_anim = true;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801a5aa:	e006      	b.n	801a5ba <lv_label_refr_text+0x306>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801a5ac:	492f      	ldr	r1, [pc, #188]	; (801a66c <lv_label_refr_text+0x3b8>)
 801a5ae:	6878      	ldr	r0, [r7, #4]
 801a5b0:	f7f8 f978 	bl	80128a4 <lv_anim_del>
            ext->offset.x = 0;
 801a5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801a5ba:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f7ec fd88 	bl	80070d4 <lv_obj_get_height>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	429c      	cmp	r4, r3
 801a5c8:	dd22      	ble.n	801a610 <lv_label_refr_text+0x35c>
 801a5ca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801a5ce:	f083 0301 	eor.w	r3, r3, #1
 801a5d2:	b2db      	uxtb	r3, r3
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d01b      	beq.n	801a610 <lv_label_refr_text+0x35c>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 801a5d8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a5dc:	425c      	negs	r4, r3
 801a5de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a5e0:	f7fe ff40 	bl	8019464 <lv_font_get_line_height>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	1ae3      	subs	r3, r4, r3
 801a5e8:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801a5ea:	4b21      	ldr	r3, [pc, #132]	; (801a670 <lv_label_refr_text+0x3bc>)
 801a5ec:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5f0:	8b9b      	ldrh	r3, [r3, #28]
 801a5f2:	69ba      	ldr	r2, [r7, #24]
 801a5f4:	b211      	sxth	r1, r2
 801a5f6:	69fa      	ldr	r2, [r7, #28]
 801a5f8:	b212      	sxth	r2, r2
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f7f8 f98a 	bl	8012914 <lv_anim_speed_to_time>
 801a600:	4603      	mov	r3, r0
 801a602:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a604:	f107 0308 	add.w	r3, r7, #8
 801a608:	4618      	mov	r0, r3
 801a60a:	f7f8 f90b 	bl	8012824 <lv_anim_create>
 801a60e:	e0e9      	b.n	801a7e4 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801a610:	4917      	ldr	r1, [pc, #92]	; (801a670 <lv_label_refr_text+0x3bc>)
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f7f8 f946 	bl	80128a4 <lv_anim_del>
            ext->offset.y = 0;
 801a618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a61a:	2200      	movs	r2, #0
 801a61c:	819a      	strh	r2, [r3, #12]
 801a61e:	e0e1      	b.n	801a7e4 <lv_label_refr_text+0x530>
        }
#endif
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801a620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a622:	7f9b      	ldrb	r3, [r3, #30]
 801a624:	f003 0307 	and.w	r3, r3, #7
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	2b02      	cmp	r3, #2
 801a62c:	f040 80cd 	bne.w	801a7ca <lv_label_refr_text+0x516>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 801a630:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a634:	6878      	ldr	r0, [r7, #4]
 801a636:	f7ec fd4d 	bl	80070d4 <lv_obj_get_height>
 801a63a:	4603      	mov	r3, r0
 801a63c:	429c      	cmp	r4, r3
 801a63e:	dc04      	bgt.n	801a64a <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801a640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a646:	811a      	strh	r2, [r3, #8]
 801a648:	e0cc      	b.n	801a7e4 <lv_label_refr_text+0x530>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 801a64a:	4b0a      	ldr	r3, [pc, #40]	; (801a674 <lv_label_refr_text+0x3c0>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a650:	6812      	ldr	r2, [r2, #0]
 801a652:	4610      	mov	r0, r2
 801a654:	4798      	blx	r3
 801a656:	4603      	mov	r3, r0
 801a658:	2b03      	cmp	r3, #3
 801a65a:	d80d      	bhi.n	801a678 <lv_label_refr_text+0x3c4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801a65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a662:	811a      	strh	r2, [r3, #8]
 801a664:	e0be      	b.n	801a7e4 <lv_label_refr_text+0x530>
 801a666:	bf00      	nop
 801a668:	08012975 	.word	0x08012975
 801a66c:	0801a8b5 	.word	0x0801a8b5
 801a670:	0801a8dd 	.word	0x0801a8dd
 801a674:	200027ac 	.word	0x200027ac
        } else {
            lv_point_t p;
            p.x = lv_obj_get_width(label) -
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f7ec fd1d 	bl	80070b8 <lv_obj_get_width>
 801a67e:	4603      	mov	r3, r0
 801a680:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 801a682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a686:	222e      	movs	r2, #46	; 0x2e
 801a688:	212e      	movs	r1, #46	; 0x2e
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7f7 fbb8 	bl	8011e00 <lv_font_get_glyph_width>
 801a690:	4603      	mov	r3, r0
 801a692:	461a      	mov	r2, r3
 801a694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a696:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a69a:	4413      	add	r3, r2
            p.x = lv_obj_get_width(label) -
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	461a      	mov	r2, r3
 801a6a0:	009b      	lsls	r3, r3, #2
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	b29b      	uxth	r3, r3
 801a6a6:	4423      	add	r3, r4
 801a6a8:	b29b      	uxth	r3, r3
 801a6aa:	b21b      	sxth	r3, r3
 801a6ac:	86bb      	strh	r3, [r7, #52]	; 0x34
                      LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_obj_get_height(label);
 801a6ae:	6878      	ldr	r0, [r7, #4]
 801a6b0:	f7ec fd10 	bl	80070d4 <lv_obj_get_height>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= p.y %
 801a6b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a6bc:	461c      	mov	r4, r3
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 801a6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f7fe fece 	bl	8019464 <lv_font_get_line_height>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6ce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a6d2:	4413      	add	r3, r2
            p.y -= p.y %
 801a6d4:	fb94 f2f3 	sdiv	r2, r4, r3
 801a6d8:	fb03 f302 	mul.w	r3, r3, r2
 801a6dc:	1ae3      	subs	r3, r4, r3
 801a6de:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801a6e2:	b292      	uxth	r2, r2
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	1ad3      	subs	r3, r2, r3
 801a6e8:	b29b      	uxth	r3, r3
 801a6ea:	b21b      	sxth	r3, r3
 801a6ec:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 801a6ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6f6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a6fa:	b29b      	uxth	r3, r3
 801a6fc:	1ad3      	subs	r3, r2, r3
 801a6fe:	b29b      	uxth	r3, r3
 801a700:	b21b      	sxth	r3, r3
 801a702:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801a704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a708:	4619      	mov	r1, r3
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7ff fa00 	bl	8019b10 <lv_label_get_letter_on>
 801a710:	4603      	mov	r3, r0
 801a712:	643b      	str	r3, [r7, #64]	; 0x40

            /*Save letters under the dots and replace them with dots*/
            uint32_t i;
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801a714:	4b37      	ldr	r3, [pc, #220]	; (801a7f4 <lv_label_refr_text+0x540>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a71a:	6812      	ldr	r2, [r2, #0]
 801a71c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a71e:	4610      	mov	r0, r2
 801a720:	4798      	blx	r3
 801a722:	4603      	mov	r3, r0
 801a724:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t byte_id_ori = byte_id;
 801a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a728:	63fb      	str	r3, [r7, #60]	; 0x3c
            uint8_t len          = 0;
 801a72a:	2300      	movs	r3, #0
 801a72c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801a730:	2300      	movs	r3, #0
 801a732:	657b      	str	r3, [r7, #84]	; 0x54
 801a734:	e019      	b.n	801a76a <lv_label_refr_text+0x4b6>
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801a736:	4b30      	ldr	r3, [pc, #192]	; (801a7f8 <lv_label_refr_text+0x544>)
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a73c:	6811      	ldr	r1, [r2, #0]
 801a73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a740:	440a      	add	r2, r1
 801a742:	4610      	mov	r0, r2
 801a744:	4798      	blx	r3
 801a746:	4603      	mov	r3, r0
 801a748:	461a      	mov	r2, r3
 801a74a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a74e:	4413      	add	r3, r2
 801a750:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                lv_txt_encoded_next(ext->text, &byte_id);
 801a754:	4b29      	ldr	r3, [pc, #164]	; (801a7fc <lv_label_refr_text+0x548>)
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a75a:	6812      	ldr	r2, [r2, #0]
 801a75c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a760:	4610      	mov	r0, r2
 801a762:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801a764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a766:	3301      	adds	r3, #1
 801a768:	657b      	str	r3, [r7, #84]	; 0x54
 801a76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a76c:	2b03      	cmp	r3, #3
 801a76e:	d9e2      	bls.n	801a736 <lv_label_refr_text+0x482>
            }

            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 801a770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a772:	681a      	ldr	r2, [r3, #0]
 801a774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a776:	4413      	add	r3, r2
 801a778:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801a77c:	b292      	uxth	r2, r2
 801a77e:	4619      	mov	r1, r3
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f000 f8bf 	bl	801a904 <lv_label_set_dot_tmp>
 801a786:	4603      	mov	r3, r0
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d02b      	beq.n	801a7e4 <lv_label_refr_text+0x530>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801a78c:	2300      	movs	r3, #0
 801a78e:	657b      	str	r3, [r7, #84]	; 0x54
 801a790:	e00a      	b.n	801a7a8 <lv_label_refr_text+0x4f4>
                    ext->text[byte_id_ori + i] = '.';
 801a792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a794:	681a      	ldr	r2, [r3, #0]
 801a796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a79a:	440b      	add	r3, r1
 801a79c:	4413      	add	r3, r2
 801a79e:	222e      	movs	r2, #46	; 0x2e
 801a7a0:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7a4:	3301      	adds	r3, #1
 801a7a6:	657b      	str	r3, [r7, #84]	; 0x54
 801a7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7aa:	2b02      	cmp	r3, #2
 801a7ac:	d9f1      	bls.n	801a792 <lv_label_refr_text+0x4de>
                }
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7b4:	3303      	adds	r3, #3
 801a7b6:	4413      	add	r3, r2
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	701a      	strb	r2, [r3, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801a7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7be:	b29b      	uxth	r3, r3
 801a7c0:	3303      	adds	r3, #3
 801a7c2:	b29a      	uxth	r2, r3
 801a7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7c6:	811a      	strh	r2, [r3, #8]
 801a7c8:	e00c      	b.n	801a7e4 <lv_label_refr_text+0x530>
            }
        }
    }
    /*In break mode only the height can change*/
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 801a7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7cc:	7f9b      	ldrb	r3, [r3, #30]
 801a7ce:	f003 0307 	and.w	r3, r3, #7
 801a7d2:	b2db      	uxtb	r3, r3
 801a7d4:	2b01      	cmp	r3, #1
 801a7d6:	d105      	bne.n	801a7e4 <lv_label_refr_text+0x530>
        lv_obj_set_height(label, size.y);
 801a7d8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a7dc:	4619      	mov	r1, r3
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f7eb fd6b 	bl	80062ba <lv_obj_set_height>
    /*Do not set the size in Clip mode*/
    else if(ext->long_mode == LV_LABEL_LONG_CROP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(label);
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	f7eb fb26 	bl	8005e36 <lv_obj_invalidate>
 801a7ea:	e000      	b.n	801a7ee <lv_label_refr_text+0x53a>
    if(ext->text == NULL) return;
 801a7ec:	bf00      	nop
}
 801a7ee:	3764      	adds	r7, #100	; 0x64
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd90      	pop	{r4, r7, pc}
 801a7f4:	200027a4 	.word	0x200027a4
 801a7f8:	20002798 	.word	0x20002798
 801a7fc:	2000279c 	.word	0x2000279c

0801a800 <lv_label_revert_dots>:

static void lv_label_revert_dots(lv_obj_t * label)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b088      	sub	sp, #32
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a808:	6878      	ldr	r0, [r7, #4]
 801a80a:	f7ec fd40 	bl	800728e <lv_obj_get_ext_attr>
 801a80e:	61b8      	str	r0, [r7, #24]
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801a810:	69bb      	ldr	r3, [r7, #24]
 801a812:	7f9b      	ldrb	r3, [r3, #30]
 801a814:	f003 0307 	and.w	r3, r3, #7
 801a818:	b2db      	uxtb	r3, r3
 801a81a:	2b02      	cmp	r3, #2
 801a81c:	d142      	bne.n	801a8a4 <lv_label_revert_dots+0xa4>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801a81e:	69bb      	ldr	r3, [r7, #24]
 801a820:	891b      	ldrh	r3, [r3, #8]
 801a822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a826:	4293      	cmp	r3, r2
 801a828:	d03e      	beq.n	801a8a8 <lv_label_revert_dots+0xa8>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	891b      	ldrh	r3, [r3, #8]
 801a82e:	3b03      	subs	r3, #3
 801a830:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801a832:	4b1f      	ldr	r3, [pc, #124]	; (801a8b0 <lv_label_revert_dots+0xb0>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	69ba      	ldr	r2, [r7, #24]
 801a838:	6812      	ldr	r2, [r2, #0]
 801a83a:	6979      	ldr	r1, [r7, #20]
 801a83c:	4610      	mov	r0, r2
 801a83e:	4798      	blx	r3
 801a840:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 801a842:	2300      	movs	r3, #0
 801a844:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(label);
 801a846:	6878      	ldr	r0, [r7, #4]
 801a848:	f000 f89f 	bl	801a98a <lv_label_get_dot_tmp>
 801a84c:	60f8      	str	r0, [r7, #12]
    while(ext->text[byte_i + i] != '\0') {
 801a84e:	e00d      	b.n	801a86c <lv_label_revert_dots+0x6c>
        ext->text[byte_i + i] = dot_tmp[i];
 801a850:	7ffb      	ldrb	r3, [r7, #31]
 801a852:	68fa      	ldr	r2, [r7, #12]
 801a854:	441a      	add	r2, r3
 801a856:	69bb      	ldr	r3, [r7, #24]
 801a858:	6819      	ldr	r1, [r3, #0]
 801a85a:	7ff8      	ldrb	r0, [r7, #31]
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	4403      	add	r3, r0
 801a860:	440b      	add	r3, r1
 801a862:	7812      	ldrb	r2, [r2, #0]
 801a864:	701a      	strb	r2, [r3, #0]
        i++;
 801a866:	7ffb      	ldrb	r3, [r7, #31]
 801a868:	3301      	adds	r3, #1
 801a86a:	77fb      	strb	r3, [r7, #31]
    while(ext->text[byte_i + i] != '\0') {
 801a86c:	69bb      	ldr	r3, [r7, #24]
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	7ff9      	ldrb	r1, [r7, #31]
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	440b      	add	r3, r1
 801a876:	4413      	add	r3, r2
 801a878:	781b      	ldrb	r3, [r3, #0]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d1e8      	bne.n	801a850 <lv_label_revert_dots+0x50>
    }
    ext->text[byte_i + i] = dot_tmp[i];
 801a87e:	7ffb      	ldrb	r3, [r7, #31]
 801a880:	68fa      	ldr	r2, [r7, #12]
 801a882:	441a      	add	r2, r3
 801a884:	69bb      	ldr	r3, [r7, #24]
 801a886:	6819      	ldr	r1, [r3, #0]
 801a888:	7ff8      	ldrb	r0, [r7, #31]
 801a88a:	693b      	ldr	r3, [r7, #16]
 801a88c:	4403      	add	r3, r0
 801a88e:	440b      	add	r3, r1
 801a890:	7812      	ldrb	r2, [r2, #0]
 801a892:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(label);
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f000 f890 	bl	801a9ba <lv_label_dot_tmp_free>

    ext->dot_end = LV_LABEL_DOT_END_INV;
 801a89a:	69bb      	ldr	r3, [r7, #24]
 801a89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8a0:	811a      	strh	r2, [r3, #8]
 801a8a2:	e002      	b.n	801a8aa <lv_label_revert_dots+0xaa>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801a8a4:	bf00      	nop
 801a8a6:	e000      	b.n	801a8aa <lv_label_revert_dots+0xaa>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801a8a8:	bf00      	nop
}
 801a8aa:	3720      	adds	r7, #32
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}
 801a8b0:	200027a4 	.word	0x200027a4

0801a8b4 <lv_label_set_offset_x>:

#if LV_USE_ANIMATION
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b084      	sub	sp, #16
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	460b      	mov	r3, r1
 801a8be:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f7ec fce4 	bl	800728e <lv_obj_get_ext_attr>
 801a8c6:	60f8      	str	r0, [r7, #12]
    ext->offset.x        = x;
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	887a      	ldrh	r2, [r7, #2]
 801a8cc:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(label);
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f7eb fab1 	bl	8005e36 <lv_obj_invalidate>
}
 801a8d4:	bf00      	nop
 801a8d6:	3710      	adds	r7, #16
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}

0801a8dc <lv_label_set_offset_y>:

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
 801a8e4:	460b      	mov	r3, r1
 801a8e6:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f7ec fcd0 	bl	800728e <lv_obj_get_ext_attr>
 801a8ee:	60f8      	str	r0, [r7, #12]
    ext->offset.y        = y;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	887a      	ldrh	r2, [r7, #2]
 801a8f4:	819a      	strh	r2, [r3, #12]
    lv_obj_invalidate(label);
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	f7eb fa9d 	bl	8005e36 <lv_obj_invalidate>
}
 801a8fc:	bf00      	nop
 801a8fe:	3710      	adds	r7, #16
 801a900:	46bd      	mov	sp, r7
 801a902:	bd80      	pop	{r7, pc}

0801a904 <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint16_t len)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b086      	sub	sp, #24
 801a908:	af00      	add	r7, sp, #0
 801a90a:	60f8      	str	r0, [r7, #12]
 801a90c:	60b9      	str	r1, [r7, #8]
 801a90e:	4613      	mov	r3, r2
 801a910:	80fb      	strh	r3, [r7, #6]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a912:	68f8      	ldr	r0, [r7, #12]
 801a914:	f7ec fcbb 	bl	800728e <lv_obj_get_ext_attr>
 801a918:	6178      	str	r0, [r7, #20]
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801a91a:	68f8      	ldr	r0, [r7, #12]
 801a91c:	f000 f84d 	bl	801a9ba <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801a920:	88fb      	ldrh	r3, [r7, #6]
 801a922:	2b04      	cmp	r3, #4
 801a924:	d920      	bls.n	801a968 <lv_label_set_dot_tmp+0x64>
        /* Memory needs to be allocated. Allocates an additional byte
         * for a NULL-terminator so it can be copied. */
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801a926:	88fb      	ldrh	r3, [r7, #6]
 801a928:	3301      	adds	r3, #1
 801a92a:	4618      	mov	r0, r3
 801a92c:	f7f9 f850 	bl	80139d0 <lv_mem_alloc>
 801a930:	4602      	mov	r2, r0
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	605a      	str	r2, [r3, #4]
        if(ext->dot.tmp_ptr == NULL) {
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	685b      	ldr	r3, [r3, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d101      	bne.n	801a942 <lv_label_set_dot_tmp+0x3e>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 801a93e:	2300      	movs	r3, #0
 801a940:	e01f      	b.n	801a982 <lv_label_set_dot_tmp+0x7e>
        }
        memcpy(ext->dot.tmp_ptr, data, len);
 801a942:	697b      	ldr	r3, [r7, #20]
 801a944:	685b      	ldr	r3, [r3, #4]
 801a946:	88fa      	ldrh	r2, [r7, #6]
 801a948:	68b9      	ldr	r1, [r7, #8]
 801a94a:	4618      	mov	r0, r3
 801a94c:	f00c fc28 	bl	80271a0 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	685a      	ldr	r2, [r3, #4]
 801a954:	88fb      	ldrh	r3, [r7, #6]
 801a956:	4413      	add	r3, r2
 801a958:	2200      	movs	r2, #0
 801a95a:	701a      	strb	r2, [r3, #0]
        ext->dot_tmp_alloc    = true;
 801a95c:	697a      	ldr	r2, [r7, #20]
 801a95e:	7fd3      	ldrb	r3, [r2, #31]
 801a960:	f043 0302 	orr.w	r3, r3, #2
 801a964:	77d3      	strb	r3, [r2, #31]
 801a966:	e00b      	b.n	801a980 <lv_label_set_dot_tmp+0x7c>
    } else {
        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
 801a968:	697a      	ldr	r2, [r7, #20]
 801a96a:	7fd3      	ldrb	r3, [r2, #31]
 801a96c:	f36f 0341 	bfc	r3, #1, #1
 801a970:	77d3      	strb	r3, [r2, #31]
        memcpy(ext->dot.tmp, data, len);
 801a972:	697b      	ldr	r3, [r7, #20]
 801a974:	3304      	adds	r3, #4
 801a976:	88fa      	ldrh	r2, [r7, #6]
 801a978:	68b9      	ldr	r1, [r7, #8]
 801a97a:	4618      	mov	r0, r3
 801a97c:	f00c fc10 	bl	80271a0 <memcpy>
    }
    return true;
 801a980:	2301      	movs	r3, #1
}
 801a982:	4618      	mov	r0, r3
 801a984:	3718      	adds	r7, #24
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}

0801a98a <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
 801a98a:	b580      	push	{r7, lr}
 801a98c:	b084      	sub	sp, #16
 801a98e:	af00      	add	r7, sp, #0
 801a990:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a992:	6878      	ldr	r0, [r7, #4]
 801a994:	f7ec fc7b 	bl	800728e <lv_obj_get_ext_attr>
 801a998:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc) {
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	7fdb      	ldrb	r3, [r3, #31]
 801a99e:	f003 0302 	and.w	r3, r3, #2
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d002      	beq.n	801a9ae <lv_label_get_dot_tmp+0x24>
        return ext->dot.tmp_ptr;
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	e001      	b.n	801a9b2 <lv_label_get_dot_tmp+0x28>
    } else {
        return ext->dot.tmp;
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	3304      	adds	r3, #4
    }
}
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	3710      	adds	r7, #16
 801a9b6:	46bd      	mov	sp, r7
 801a9b8:	bd80      	pop	{r7, pc}

0801a9ba <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 801a9ba:	b580      	push	{r7, lr}
 801a9bc:	b084      	sub	sp, #16
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a9c2:	6878      	ldr	r0, [r7, #4]
 801a9c4:	f7ec fc63 	bl	800728e <lv_obj_get_ext_attr>
 801a9c8:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	7fdb      	ldrb	r3, [r3, #31]
 801a9ce:	f003 0302 	and.w	r3, r3, #2
 801a9d2:	b2db      	uxtb	r3, r3
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d008      	beq.n	801a9ea <lv_label_dot_tmp_free+0x30>
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	685b      	ldr	r3, [r3, #4]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d004      	beq.n	801a9ea <lv_label_dot_tmp_free+0x30>
        lv_mem_free(ext->dot.tmp_ptr);
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	685b      	ldr	r3, [r3, #4]
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7f9 f833 	bl	8013a50 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 801a9ea:	68fa      	ldr	r2, [r7, #12]
 801a9ec:	7fd3      	ldrb	r3, [r2, #31]
 801a9ee:	f36f 0341 	bfc	r3, #1, #1
 801a9f2:	77d3      	strb	r3, [r2, #31]
    ext->dot.tmp_ptr   = NULL;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	605a      	str	r2, [r3, #4]
}
 801a9fa:	bf00      	nop
 801a9fc:	3710      	adds	r7, #16
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801aa02:	b480      	push	{r7}
 801aa04:	b085      	sub	sp, #20
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	80b8      	strh	r0, [r7, #4]
 801aa0a:	8039      	strh	r1, [r7, #0]
 801aa0c:	4613      	mov	r3, r2
 801aa0e:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801aa10:	793b      	ldrb	r3, [r7, #4]
 801aa12:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801aa16:	b2db      	uxtb	r3, r3
 801aa18:	b29a      	uxth	r2, r3
 801aa1a:	78fb      	ldrb	r3, [r7, #3]
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	fb12 f303 	smulbb	r3, r2, r3
 801aa22:	b29a      	uxth	r2, r3
 801aa24:	783b      	ldrb	r3, [r7, #0]
 801aa26:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	b299      	uxth	r1, r3
 801aa2e:	78fb      	ldrb	r3, [r7, #3]
 801aa30:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aa34:	b29b      	uxth	r3, r3
 801aa36:	fb11 f303 	smulbb	r3, r1, r3
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	4413      	add	r3, r2
 801aa3e:	b29b      	uxth	r3, r3
 801aa40:	0a1b      	lsrs	r3, r3, #8
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	f003 031f 	and.w	r3, r3, #31
 801aa48:	b2da      	uxtb	r2, r3
 801aa4a:	7a3b      	ldrb	r3, [r7, #8]
 801aa4c:	f362 03c7 	bfi	r3, r2, #3, #5
 801aa50:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 801aa52:	793b      	ldrb	r3, [r7, #4]
 801aa54:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801aa58:	b2db      	uxtb	r3, r3
 801aa5a:	b29b      	uxth	r3, r3
 801aa5c:	00db      	lsls	r3, r3, #3
 801aa5e:	b29a      	uxth	r2, r3
 801aa60:	797b      	ldrb	r3, [r7, #5]
 801aa62:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	b29b      	uxth	r3, r3
 801aa6a:	4413      	add	r3, r2
 801aa6c:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 801aa6e:	783b      	ldrb	r3, [r7, #0]
 801aa70:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801aa74:	b2db      	uxtb	r3, r3
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	00db      	lsls	r3, r3, #3
 801aa7a:	b29a      	uxth	r2, r3
 801aa7c:	787b      	ldrb	r3, [r7, #1]
 801aa7e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801aa82:	b2db      	uxtb	r3, r3
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	4413      	add	r3, r2
 801aa88:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 801aa8a:	78fb      	ldrb	r3, [r7, #3]
 801aa8c:	b29b      	uxth	r3, r3
 801aa8e:	89fa      	ldrh	r2, [r7, #14]
 801aa90:	fb12 f303 	smulbb	r3, r2, r3
 801aa94:	b29a      	uxth	r2, r3
 801aa96:	78fb      	ldrb	r3, [r7, #3]
 801aa98:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	89b9      	ldrh	r1, [r7, #12]
 801aaa0:	fb11 f303 	smulbb	r3, r1, r3
 801aaa4:	b29b      	uxth	r3, r3
 801aaa6:	4413      	add	r3, r2
 801aaa8:	b29b      	uxth	r3, r3
 801aaaa:	0a1b      	lsrs	r3, r3, #8
 801aaac:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 801aaae:	897b      	ldrh	r3, [r7, #10]
 801aab0:	08db      	lsrs	r3, r3, #3
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	f003 0307 	and.w	r3, r3, #7
 801aab8:	b2da      	uxtb	r2, r3
 801aaba:	7a3b      	ldrb	r3, [r7, #8]
 801aabc:	f362 0302 	bfi	r3, r2, #0, #3
 801aac0:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 801aac2:	897b      	ldrh	r3, [r7, #10]
 801aac4:	f003 0307 	and.w	r3, r3, #7
 801aac8:	b2da      	uxtb	r2, r3
 801aaca:	7a7b      	ldrb	r3, [r7, #9]
 801aacc:	f362 1347 	bfi	r3, r2, #5, #3
 801aad0:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801aad2:	797b      	ldrb	r3, [r7, #5]
 801aad4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801aad8:	b2db      	uxtb	r3, r3
 801aada:	b29a      	uxth	r2, r3
 801aadc:	78fb      	ldrb	r3, [r7, #3]
 801aade:	b29b      	uxth	r3, r3
 801aae0:	fb12 f303 	smulbb	r3, r2, r3
 801aae4:	b29a      	uxth	r2, r3
 801aae6:	787b      	ldrb	r3, [r7, #1]
 801aae8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	b299      	uxth	r1, r3
 801aaf0:	78fb      	ldrb	r3, [r7, #3]
 801aaf2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	fb11 f303 	smulbb	r3, r1, r3
 801aafc:	b29b      	uxth	r3, r3
 801aafe:	4413      	add	r3, r2
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	0a1b      	lsrs	r3, r3, #8
 801ab04:	b29b      	uxth	r3, r3
 801ab06:	f003 031f 	and.w	r3, r3, #31
 801ab0a:	b2da      	uxtb	r2, r3
 801ab0c:	7a7b      	ldrb	r3, [r7, #9]
 801ab0e:	f362 0304 	bfi	r3, r2, #0, #5
 801ab12:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801ab14:	893b      	ldrh	r3, [r7, #8]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	3714      	adds	r7, #20
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab20:	4770      	bx	lr

0801ab22 <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801ab22:	b580      	push	{r7, lr}
 801ab24:	b084      	sub	sp, #16
 801ab26:	af00      	add	r7, sp, #0
 801ab28:	60f8      	str	r0, [r7, #12]
 801ab2a:	460b      	mov	r3, r1
 801ab2c:	607a      	str	r2, [r7, #4]
 801ab2e:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801ab30:	6879      	ldr	r1, [r7, #4]
 801ab32:	68f8      	ldr	r0, [r7, #12]
 801ab34:	f7ec f87b 	bl	8006c2e <lv_obj_set_style>
}
 801ab38:	bf00      	nop
 801ab3a:	3710      	adds	r7, #16
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd80      	pop	{r7, pc}

0801ab40 <lv_lmeter_get_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be get (can be only `LV_LMETER_STYLE_MAIN`)
 * @return pointer to the line meter's style
 */
static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
 801ab48:	460b      	mov	r3, r1
 801ab4a:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(lmeter);
 801ab4c:	6878      	ldr	r0, [r7, #4]
 801ab4e:	f7ec fae3 	bl	8007118 <lv_obj_get_style>
 801ab52:	4603      	mov	r3, r0
}
 801ab54:	4618      	mov	r0, r3
 801ab56:	3708      	adds	r7, #8
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	bd80      	pop	{r7, pc}

0801ab5c <lv_lmeter_create>:
 * @param copy pointer to a line meter object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created line meter
 */
lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b086      	sub	sp, #24
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("line meter create started");

    /*Create the ancestor of line meter*/
    lv_obj_t * new_lmeter = lv_obj_create(par, copy);
 801ab66:	6839      	ldr	r1, [r7, #0]
 801ab68:	6878      	ldr	r0, [r7, #4]
 801ab6a:	f7ea fe27 	bl	80057bc <lv_obj_create>
 801ab6e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_lmeter);
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d100      	bne.n	801ab78 <lv_lmeter_create+0x1c>
 801ab76:	e7fe      	b.n	801ab76 <lv_lmeter_create+0x1a>
    if(new_lmeter == NULL) return NULL;
 801ab78:	697b      	ldr	r3, [r7, #20]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d101      	bne.n	801ab82 <lv_lmeter_create+0x26>
 801ab7e:	2300      	movs	r3, #0
 801ab80:	e069      	b.n	801ac56 <lv_lmeter_create+0xfa>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_lmeter);
 801ab82:	4b37      	ldr	r3, [pc, #220]	; (801ac60 <lv_lmeter_create+0x104>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d105      	bne.n	801ab96 <lv_lmeter_create+0x3a>
 801ab8a:	6978      	ldr	r0, [r7, #20]
 801ab8c:	f7ec fb67 	bl	800725e <lv_obj_get_signal_cb>
 801ab90:	4602      	mov	r2, r0
 801ab92:	4b33      	ldr	r3, [pc, #204]	; (801ac60 <lv_lmeter_create+0x104>)
 801ab94:	601a      	str	r2, [r3, #0]

    /*Allocate the line meter type specific extended data*/
    lv_lmeter_ext_t * ext = lv_obj_allocate_ext_attr(new_lmeter, sizeof(lv_lmeter_ext_t));
 801ab96:	210a      	movs	r1, #10
 801ab98:	6978      	ldr	r0, [r7, #20]
 801ab9a:	f7ec f9ab 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801ab9e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801aba0:	693b      	ldr	r3, [r7, #16]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d100      	bne.n	801aba8 <lv_lmeter_create+0x4c>
 801aba6:	e7fe      	b.n	801aba6 <lv_lmeter_create+0x4a>
    if(ext == NULL) return NULL;
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d101      	bne.n	801abb2 <lv_lmeter_create+0x56>
 801abae:	2300      	movs	r3, #0
 801abb0:	e051      	b.n	801ac56 <lv_lmeter_create+0xfa>

    /*Initialize the allocated 'ext' */
    ext->min_value   = 0;
 801abb2:	693b      	ldr	r3, [r7, #16]
 801abb4:	2200      	movs	r2, #0
 801abb6:	80da      	strh	r2, [r3, #6]
    ext->max_value   = 100;
 801abb8:	693b      	ldr	r3, [r7, #16]
 801abba:	2264      	movs	r2, #100	; 0x64
 801abbc:	811a      	strh	r2, [r3, #8]
    ext->cur_value   = 0;
 801abbe:	693b      	ldr	r3, [r7, #16]
 801abc0:	2200      	movs	r2, #0
 801abc2:	809a      	strh	r2, [r3, #4]
    ext->line_cnt    = 21;  /*Odd scale number looks better*/
 801abc4:	693b      	ldr	r3, [r7, #16]
 801abc6:	2215      	movs	r2, #21
 801abc8:	709a      	strb	r2, [r3, #2]
    ext->scale_angle = 240; /*(scale_num - 1) * N looks better */
 801abca:	693b      	ldr	r3, [r7, #16]
 801abcc:	22f0      	movs	r2, #240	; 0xf0
 801abce:	801a      	strh	r2, [r3, #0]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_lmeter, lv_lmeter_signal);
 801abd0:	4924      	ldr	r1, [pc, #144]	; (801ac64 <lv_lmeter_create+0x108>)
 801abd2:	6978      	ldr	r0, [r7, #20]
 801abd4:	f7ec f972 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_lmeter, lv_lmeter_design);
 801abd8:	4923      	ldr	r1, [pc, #140]	; (801ac68 <lv_lmeter_create+0x10c>)
 801abda:	6978      	ldr	r0, [r7, #20]
 801abdc:	f7ec f97c 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new line meter line meter*/
    if(copy == NULL) {
 801abe0:	683b      	ldr	r3, [r7, #0]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d118      	bne.n	801ac18 <lv_lmeter_create+0xbc>
        lv_obj_set_size(new_lmeter, LV_DPI, LV_DPI);
 801abe6:	2264      	movs	r2, #100	; 0x64
 801abe8:	2164      	movs	r1, #100	; 0x64
 801abea:	6978      	ldr	r0, [r7, #20]
 801abec:	f7eb fad7 	bl	800619e <lv_obj_set_size>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801abf0:	f004 f9d0 	bl	801ef94 <lv_theme_get_current>
 801abf4:	60b8      	str	r0, [r7, #8]
        if(th) {
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d007      	beq.n	801ac0c <lv_lmeter_create+0xb0>
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, th->style.lmeter);
 801abfc:	68bb      	ldr	r3, [r7, #8]
 801abfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ac00:	461a      	mov	r2, r3
 801ac02:	2100      	movs	r1, #0
 801ac04:	6978      	ldr	r0, [r7, #20]
 801ac06:	f7ff ff8c 	bl	801ab22 <lv_lmeter_set_style>
 801ac0a:	e023      	b.n	801ac54 <lv_lmeter_create+0xf8>
        } else {
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, &lv_style_pretty_color);
 801ac0c:	4a17      	ldr	r2, [pc, #92]	; (801ac6c <lv_lmeter_create+0x110>)
 801ac0e:	2100      	movs	r1, #0
 801ac10:	6978      	ldr	r0, [r7, #20]
 801ac12:	f7ff ff86 	bl	801ab22 <lv_lmeter_set_style>
 801ac16:	e01d      	b.n	801ac54 <lv_lmeter_create+0xf8>
        }
    }
    /*Copy an existing line meter*/
    else {
        lv_lmeter_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801ac18:	6838      	ldr	r0, [r7, #0]
 801ac1a:	f7ec fb38 	bl	800728e <lv_obj_get_ext_attr>
 801ac1e:	60f8      	str	r0, [r7, #12]
        ext->scale_angle           = copy_ext->scale_angle;
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	881a      	ldrh	r2, [r3, #0]
 801ac24:	693b      	ldr	r3, [r7, #16]
 801ac26:	801a      	strh	r2, [r3, #0]
        ext->line_cnt              = copy_ext->line_cnt;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	789a      	ldrb	r2, [r3, #2]
 801ac2c:	693b      	ldr	r3, [r7, #16]
 801ac2e:	709a      	strb	r2, [r3, #2]
        ext->min_value             = copy_ext->min_value;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ac36:	693b      	ldr	r3, [r7, #16]
 801ac38:	80da      	strh	r2, [r3, #6]
        ext->max_value             = copy_ext->max_value;
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ac40:	693b      	ldr	r3, [r7, #16]
 801ac42:	811a      	strh	r2, [r3, #8]
        ext->cur_value             = copy_ext->cur_value;
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ac4a:	693b      	ldr	r3, [r7, #16]
 801ac4c:	809a      	strh	r2, [r3, #4]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_lmeter);
 801ac4e:	6978      	ldr	r0, [r7, #20]
 801ac50:	f7eb ffff 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("line meter created");

    return new_lmeter;
 801ac54:	697b      	ldr	r3, [r7, #20]
}
 801ac56:	4618      	mov	r0, r3
 801ac58:	3718      	adds	r7, #24
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	bd80      	pop	{r7, pc}
 801ac5e:	bf00      	nop
 801ac60:	20002ad8 	.word	0x20002ad8
 801ac64:	0801b09d 	.word	0x0801b09d
 801ac68:	0801adad 	.word	0x0801adad
 801ac6c:	20006a88 	.word	0x20006a88

0801ac70 <lv_lmeter_set_value>:
 * Set a new value on the line meter
 * @param lmeter pointer to a line meter object
 * @param value new value
 */
void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
 801ac78:	460b      	mov	r3, r1
 801ac7a:	807b      	strh	r3, [r7, #2]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801ac7c:	6878      	ldr	r0, [r7, #4]
 801ac7e:	f7ec fb06 	bl	800728e <lv_obj_get_ext_attr>
 801ac82:	60f8      	str	r0, [r7, #12]
    if(ext->cur_value == value) return;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ac8a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d01a      	beq.n	801acc8 <lv_lmeter_set_value+0x58>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ac98:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	bfa8      	it	ge
 801aca0:	4613      	movge	r3, r2
 801aca2:	b21a      	sxth	r2, r3
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	809a      	strh	r2, [r3, #4]
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801acb4:	4293      	cmp	r3, r2
 801acb6:	bfb8      	it	lt
 801acb8:	4613      	movlt	r3, r2
 801acba:	b21a      	sxth	r2, r3
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	809a      	strh	r2, [r3, #4]
    lv_obj_invalidate(lmeter);
 801acc0:	6878      	ldr	r0, [r7, #4]
 801acc2:	f7eb f8b8 	bl	8005e36 <lv_obj_invalidate>
 801acc6:	e000      	b.n	801acca <lv_lmeter_set_value+0x5a>
    if(ext->cur_value == value) return;
 801acc8:	bf00      	nop
}
 801acca:	3710      	adds	r7, #16
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}

0801acd0 <lv_lmeter_set_range>:
 * @param lmeter pointer to he line meter object
 * @param min minimum value
 * @param max maximum value
 */
void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b084      	sub	sp, #16
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
 801acd8:	460b      	mov	r3, r1
 801acda:	807b      	strh	r3, [r7, #2]
 801acdc:	4613      	mov	r3, r2
 801acde:	803b      	strh	r3, [r7, #0]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801ace0:	6878      	ldr	r0, [r7, #4]
 801ace2:	f7ec fad4 	bl	800728e <lv_obj_get_ext_attr>
 801ace6:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801acee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801acf2:	429a      	cmp	r2, r3
 801acf4:	d106      	bne.n	801ad04 <lv_lmeter_set_range+0x34>
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801acfc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ad00:	429a      	cmp	r2, r3
 801ad02:	d02b      	beq.n	801ad5c <lv_lmeter_set_range+0x8c>

    ext->max_value = max;
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	883a      	ldrh	r2, [r7, #0]
 801ad08:	811a      	strh	r2, [r3, #8]
    ext->min_value = min;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	887a      	ldrh	r2, [r7, #2]
 801ad0e:	80da      	strh	r2, [r3, #6]
    if(ext->cur_value > max) {
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad16:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	da09      	bge.n	801ad32 <lv_lmeter_set_range+0x62>
        ext->cur_value = max;
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	883a      	ldrh	r2, [r7, #0]
 801ad22:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad2a:	4619      	mov	r1, r3
 801ad2c:	6878      	ldr	r0, [r7, #4]
 801ad2e:	f7ff ff9f 	bl	801ac70 <lv_lmeter_set_value>
    }
    if(ext->cur_value < min) {
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ad3c:	429a      	cmp	r2, r3
 801ad3e:	dd09      	ble.n	801ad54 <lv_lmeter_set_range+0x84>
        ext->cur_value = min;
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	887a      	ldrh	r2, [r7, #2]
 801ad44:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad4c:	4619      	mov	r1, r3
 801ad4e:	6878      	ldr	r0, [r7, #4]
 801ad50:	f7ff ff8e 	bl	801ac70 <lv_lmeter_set_value>
    }
    lv_obj_invalidate(lmeter);
 801ad54:	6878      	ldr	r0, [r7, #4]
 801ad56:	f7eb f86e 	bl	8005e36 <lv_obj_invalidate>
 801ad5a:	e000      	b.n	801ad5e <lv_lmeter_set_range+0x8e>
    if(ext->min_value == min && ext->max_value == max) return;
 801ad5c:	bf00      	nop
}
 801ad5e:	3710      	adds	r7, #16
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}

0801ad64 <lv_lmeter_set_scale>:
 * @param lmeter pointer to a line meter object
 * @param angle angle of the scale (0..360)
 * @param line_cnt number of lines
 */
void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint8_t line_cnt)
{
 801ad64:	b580      	push	{r7, lr}
 801ad66:	b084      	sub	sp, #16
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	6078      	str	r0, [r7, #4]
 801ad6c:	460b      	mov	r3, r1
 801ad6e:	807b      	strh	r3, [r7, #2]
 801ad70:	4613      	mov	r3, r2
 801ad72:	707b      	strb	r3, [r7, #1]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801ad74:	6878      	ldr	r0, [r7, #4]
 801ad76:	f7ec fa8a 	bl	800728e <lv_obj_get_ext_attr>
 801ad7a:	60f8      	str	r0, [r7, #12]
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	881b      	ldrh	r3, [r3, #0]
 801ad80:	887a      	ldrh	r2, [r7, #2]
 801ad82:	429a      	cmp	r2, r3
 801ad84:	d104      	bne.n	801ad90 <lv_lmeter_set_scale+0x2c>
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	789b      	ldrb	r3, [r3, #2]
 801ad8a:	787a      	ldrb	r2, [r7, #1]
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	d009      	beq.n	801ada4 <lv_lmeter_set_scale+0x40>

    ext->scale_angle = angle;
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	887a      	ldrh	r2, [r7, #2]
 801ad94:	801a      	strh	r2, [r3, #0]
    ext->line_cnt    = line_cnt;
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	787a      	ldrb	r2, [r7, #1]
 801ad9a:	709a      	strb	r2, [r3, #2]

    lv_obj_invalidate(lmeter);
 801ad9c:	6878      	ldr	r0, [r7, #4]
 801ad9e:	f7eb f84a 	bl	8005e36 <lv_obj_invalidate>
 801ada2:	e000      	b.n	801ada6 <lv_lmeter_set_scale+0x42>
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801ada4:	bf00      	nop
}
 801ada6:	3710      	adds	r7, #16
 801ada8:	46bd      	mov	sp, r7
 801adaa:	bd80      	pop	{r7, pc}

0801adac <lv_lmeter_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_lmeter_design(lv_obj_t * lmeter, const lv_area_t * mask, lv_design_mode_t mode)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b0a2      	sub	sp, #136	; 0x88
 801adb0:	af02      	add	r7, sp, #8
 801adb2:	60f8      	str	r0, [r7, #12]
 801adb4:	60b9      	str	r1, [r7, #8]
 801adb6:	4613      	mov	r3, r2
 801adb8:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801adba:	79fb      	ldrb	r3, [r7, #7]
 801adbc:	2b02      	cmp	r3, #2
 801adbe:	d101      	bne.n	801adc4 <lv_lmeter_design+0x18>
        return false;
 801adc0:	2300      	movs	r3, #0
 801adc2:	e167      	b.n	801b094 <lv_lmeter_design+0x2e8>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801adc4:	79fb      	ldrb	r3, [r7, #7]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	f040 8163 	bne.w	801b092 <lv_lmeter_design+0x2e6>
        lv_lmeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);
 801adcc:	68f8      	ldr	r0, [r7, #12]
 801adce:	f7ec fa5e 	bl	800728e <lv_obj_get_ext_attr>
 801add2:	67b8      	str	r0, [r7, #120]	; 0x78
        const lv_style_t * style = lv_obj_get_style(lmeter);
 801add4:	68f8      	ldr	r0, [r7, #12]
 801add6:	f7ec f99f 	bl	8007118 <lv_obj_get_style>
 801adda:	6778      	str	r0, [r7, #116]	; 0x74
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(lmeter);
 801addc:	68f8      	ldr	r0, [r7, #12]
 801adde:	f7ec fa08 	bl	80071f2 <lv_obj_get_opa_scale>
 801ade2:	4603      	mov	r3, r0
 801ade4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        lv_style_t style_tmp;
        lv_style_copy(&style_tmp, style);
 801ade8:	f107 0314 	add.w	r3, r7, #20
 801adec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801adee:	4618      	mov	r0, r3
 801adf0:	f7ed fcbc 	bl	800876c <lv_style_copy>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(lmeter);
 801adf4:	68f8      	ldr	r0, [r7, #12]
 801adf6:	f7ec fa56 	bl	80072a6 <lv_obj_get_group>
 801adfa:	66f8      	str	r0, [r7, #108]	; 0x6c
        if(lv_group_get_focused(g) == lmeter) {
 801adfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801adfe:	f7ea fa34 	bl	800526a <lv_group_get_focused>
 801ae02:	4602      	mov	r2, r0
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	4293      	cmp	r3, r2
 801ae08:	d107      	bne.n	801ae1a <lv_lmeter_design+0x6e>
            style_tmp.line.width += 1;
 801ae0a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	3301      	adds	r3, #1
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	b21b      	sxth	r3, r3
 801ae16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }
#endif

        lv_coord_t r_out = lv_obj_get_width(lmeter) / 2;
 801ae1a:	68f8      	ldr	r0, [r7, #12]
 801ae1c:	f7ec f94c 	bl	80070b8 <lv_obj_get_width>
 801ae20:	4603      	mov	r3, r0
 801ae22:	0fda      	lsrs	r2, r3, #31
 801ae24:	4413      	add	r3, r2
 801ae26:	105b      	asrs	r3, r3, #1
 801ae28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t r_in  = r_out - style->body.padding.left;
 801ae2c:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801ae30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae32:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ae36:	b29b      	uxth	r3, r3
 801ae38:	1ad3      	subs	r3, r2, r3
 801ae3a:	b29b      	uxth	r3, r3
 801ae3c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(r_in < 1) r_in = 1;
 801ae40:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	dc02      	bgt.n	801ae4e <lv_lmeter_design+0xa2>
 801ae48:	2301      	movs	r3, #1
 801ae4a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        lv_coord_t x_ofs  = lv_obj_get_width(lmeter) / 2 + lmeter->coords.x1;
 801ae4e:	68f8      	ldr	r0, [r7, #12]
 801ae50:	f7ec f932 	bl	80070b8 <lv_obj_get_width>
 801ae54:	4603      	mov	r3, r0
 801ae56:	0fda      	lsrs	r2, r3, #31
 801ae58:	4413      	add	r3, r2
 801ae5a:	105b      	asrs	r3, r3, #1
 801ae5c:	b21b      	sxth	r3, r3
 801ae5e:	b29a      	uxth	r2, r3
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ae66:	b29b      	uxth	r3, r3
 801ae68:	4413      	add	r3, r2
 801ae6a:	b29b      	uxth	r3, r3
 801ae6c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_coord_t y_ofs  = lv_obj_get_height(lmeter) / 2 + lmeter->coords.y1;
 801ae70:	68f8      	ldr	r0, [r7, #12]
 801ae72:	f7ec f92f 	bl	80070d4 <lv_obj_get_height>
 801ae76:	4603      	mov	r3, r0
 801ae78:	0fda      	lsrs	r2, r3, #31
 801ae7a:	4413      	add	r3, r2
 801ae7c:	105b      	asrs	r3, r3, #1
 801ae7e:	b21b      	sxth	r3, r3
 801ae80:	b29a      	uxth	r2, r3
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	4413      	add	r3, r2
 801ae8c:	b29b      	uxth	r3, r3
 801ae8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        int16_t angle_ofs = 90 + (360 - ext->scale_angle) / 2;
 801ae92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae94:	881b      	ldrh	r3, [r3, #0]
 801ae96:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801ae9a:	0fda      	lsrs	r2, r3, #31
 801ae9c:	4413      	add	r3, r2
 801ae9e:	105b      	asrs	r3, r3, #1
 801aea0:	b29b      	uxth	r3, r3
 801aea2:	335a      	adds	r3, #90	; 0x5a
 801aea4:	b29b      	uxth	r3, r3
 801aea6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        int16_t level =
            (int32_t)((int32_t)(ext->cur_value - ext->min_value) * ext->line_cnt) / (ext->max_value - ext->min_value);
 801aeaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aeac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aeb0:	461a      	mov	r2, r3
 801aeb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aeb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aeb8:	1ad3      	subs	r3, r2, r3
 801aeba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801aebc:	7892      	ldrb	r2, [r2, #2]
 801aebe:	fb02 f203 	mul.w	r2, r2, r3
 801aec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aec4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801aec8:	4619      	mov	r1, r3
 801aeca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aed0:	1acb      	subs	r3, r1, r3
 801aed2:	fb92 f3f3 	sdiv	r3, r2, r3
        int16_t level =
 801aed6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        uint8_t i;

        style_tmp.line.color = style->body.main_color;
 801aeda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aedc:	885b      	ldrh	r3, [r3, #2]
 801aede:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        /*Calculate every coordinate in a bigger size to make rounding later*/
        r_out = r_out << LV_LMETER_LINE_UPSCALE;
 801aee2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801aee6:	015b      	lsls	r3, r3, #5
 801aee8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        r_in  = r_in << LV_LMETER_LINE_UPSCALE;
 801aeec:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801aef0:	015b      	lsls	r3, r3, #5
 801aef2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        for(i = 0; i < ext->line_cnt; i++) {
 801aef6:	2300      	movs	r3, #0
 801aef8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801aefc:	e0c2      	b.n	801b084 <lv_lmeter_design+0x2d8>
            /*Calculate the position a scale label*/
            int16_t angle = (i * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs;
 801aefe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801af02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801af04:	8812      	ldrh	r2, [r2, #0]
 801af06:	fb02 f203 	mul.w	r2, r2, r3
 801af0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801af0c:	789b      	ldrb	r3, [r3, #2]
 801af0e:	3b01      	subs	r3, #1
 801af10:	fb92 f3f3 	sdiv	r3, r2, r3
 801af14:	b29a      	uxth	r2, r3
 801af16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801af1a:	4413      	add	r3, r2
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            lv_coord_t y_out = (int32_t)((int32_t)lv_trigo_sin(angle) * r_out) >> LV_TRIGO_SHIFT;
 801af22:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801af26:	4618      	mov	r0, r3
 801af28:	f7f8 fcda 	bl	80138e0 <lv_trigo_sin>
 801af2c:	4603      	mov	r3, r0
 801af2e:	461a      	mov	r2, r3
 801af30:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801af34:	fb03 f302 	mul.w	r3, r3, r2
 801af38:	13db      	asrs	r3, r3, #15
 801af3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t x_out = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_out) >> LV_TRIGO_SHIFT;
 801af3e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801af42:	335a      	adds	r3, #90	; 0x5a
 801af44:	b29b      	uxth	r3, r3
 801af46:	b21b      	sxth	r3, r3
 801af48:	4618      	mov	r0, r3
 801af4a:	f7f8 fcc9 	bl	80138e0 <lv_trigo_sin>
 801af4e:	4603      	mov	r3, r0
 801af50:	461a      	mov	r2, r3
 801af52:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801af56:	fb03 f302 	mul.w	r3, r3, r2
 801af5a:	13db      	asrs	r3, r3, #15
 801af5c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t y_in  = (int32_t)((int32_t)lv_trigo_sin(angle) * r_in) >> LV_TRIGO_SHIFT;
 801af60:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801af64:	4618      	mov	r0, r3
 801af66:	f7f8 fcbb 	bl	80138e0 <lv_trigo_sin>
 801af6a:	4603      	mov	r3, r0
 801af6c:	461a      	mov	r2, r3
 801af6e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801af72:	fb03 f302 	mul.w	r3, r3, r2
 801af76:	13db      	asrs	r3, r3, #15
 801af78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_coord_t x_in  = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_in) >> LV_TRIGO_SHIFT;
 801af7c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801af80:	335a      	adds	r3, #90	; 0x5a
 801af82:	b29b      	uxth	r3, r3
 801af84:	b21b      	sxth	r3, r3
 801af86:	4618      	mov	r0, r3
 801af88:	f7f8 fcaa 	bl	80138e0 <lv_trigo_sin>
 801af8c:	4603      	mov	r3, r0
 801af8e:	461a      	mov	r2, r3
 801af90:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801af94:	fb03 f302 	mul.w	r3, r3, r2
 801af98:	13db      	asrs	r3, r3, #15
 801af9a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

            /*Rounding*/
            x_out = lv_lmeter_coord_round(x_out);
 801af9e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801afa2:	4618      	mov	r0, r3
 801afa4:	f000 f8d2 	bl	801b14c <lv_lmeter_coord_round>
 801afa8:	4603      	mov	r3, r0
 801afaa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            x_in  = lv_lmeter_coord_round(x_in);
 801afae:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801afb2:	4618      	mov	r0, r3
 801afb4:	f000 f8ca 	bl	801b14c <lv_lmeter_coord_round>
 801afb8:	4603      	mov	r3, r0
 801afba:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            y_out = lv_lmeter_coord_round(y_out);
 801afbe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801afc2:	4618      	mov	r0, r3
 801afc4:	f000 f8c2 	bl	801b14c <lv_lmeter_coord_round>
 801afc8:	4603      	mov	r3, r0
 801afca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            y_in  = lv_lmeter_coord_round(y_in);
 801afce:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801afd2:	4618      	mov	r0, r3
 801afd4:	f000 f8ba 	bl	801b14c <lv_lmeter_coord_round>
 801afd8:	4603      	mov	r3, r0
 801afda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_point_t p1;
            lv_point_t p2;

            p2.x = x_in + x_ofs;
 801afde:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801afe2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801afe6:	4413      	add	r3, r2
 801afe8:	b29b      	uxth	r3, r3
 801afea:	b21b      	sxth	r3, r3
 801afec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            p2.y = y_in + y_ofs;
 801aff0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801aff4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801aff8:	4413      	add	r3, r2
 801affa:	b29b      	uxth	r3, r3
 801affc:	b21b      	sxth	r3, r3
 801affe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

            p1.x = x_out + x_ofs;
 801b002:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801b006:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801b00a:	4413      	add	r3, r2
 801b00c:	b29b      	uxth	r3, r3
 801b00e:	b21b      	sxth	r3, r3
 801b010:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            p1.y = y_out + y_ofs;
 801b014:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b018:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801b01c:	4413      	add	r3, r2
 801b01e:	b29b      	uxth	r3, r3
 801b020:	b21b      	sxth	r3, r3
 801b022:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            if(i >= level)
 801b026:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b02a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b02e:	429a      	cmp	r2, r3
 801b030:	db04      	blt.n	801b03c <lv_lmeter_design+0x290>
                style_tmp.line.color = style->line.color;
 801b032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b034:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801b036:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b03a:	e011      	b.n	801b060 <lv_lmeter_design+0x2b4>
            else {
                style_tmp.line.color =
                    lv_color_mix(style->body.grad_color, style->body.main_color, (255 * i) / ext->line_cnt);
 801b03c:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b040:	4613      	mov	r3, r2
 801b042:	021b      	lsls	r3, r3, #8
 801b044:	1a9b      	subs	r3, r3, r2
 801b046:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b048:	7892      	ldrb	r2, [r2, #2]
 801b04a:	fb93 f3f2 	sdiv	r3, r3, r2
 801b04e:	b2da      	uxtb	r2, r3
                style_tmp.line.color =
 801b050:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b054:	8849      	ldrh	r1, [r1, #2]
 801b056:	8898      	ldrh	r0, [r3, #4]
 801b058:	f7ff fcd3 	bl	801aa02 <lv_color_mix>
 801b05c:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
            }

            lv_draw_line(&p1, &p2, mask, &style_tmp, opa_scale);
 801b060:	f107 0214 	add.w	r2, r7, #20
 801b064:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801b068:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b06c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b070:	9300      	str	r3, [sp, #0]
 801b072:	4613      	mov	r3, r2
 801b074:	68ba      	ldr	r2, [r7, #8]
 801b076:	f7ef ff0b 	bl	800ae90 <lv_draw_line>
        for(i = 0; i < ext->line_cnt; i++) {
 801b07a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801b07e:	3301      	adds	r3, #1
 801b080:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801b084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b086:	789b      	ldrb	r3, [r3, #2]
 801b088:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b08c:	429a      	cmp	r2, r3
 801b08e:	f4ff af36 	bcc.w	801aefe <lv_lmeter_design+0x152>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801b092:	2301      	movs	r3, #1
}
 801b094:	4618      	mov	r0, r3
 801b096:	3780      	adds	r7, #128	; 0x80
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}

0801b09c <lv_lmeter_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_lmeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b088      	sub	sp, #32
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	460b      	mov	r3, r1
 801b0a6:	607a      	str	r2, [r7, #4]
 801b0a8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(lmeter, sign, param);
 801b0aa:	4b26      	ldr	r3, [pc, #152]	; (801b144 <lv_lmeter_signal+0xa8>)
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	7af9      	ldrb	r1, [r7, #11]
 801b0b0:	687a      	ldr	r2, [r7, #4]
 801b0b2:	68f8      	ldr	r0, [r7, #12]
 801b0b4:	4798      	blx	r3
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801b0ba:	7fbb      	ldrb	r3, [r7, #30]
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	d001      	beq.n	801b0c4 <lv_lmeter_signal+0x28>
 801b0c0:	7fbb      	ldrb	r3, [r7, #30]
 801b0c2:	e03a      	b.n	801b13a <lv_lmeter_signal+0x9e>

    if(sign == LV_SIGNAL_CLEANUP) {
 801b0c4:	7afb      	ldrb	r3, [r7, #11]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d036      	beq.n	801b138 <lv_lmeter_signal+0x9c>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801b0ca:	7afb      	ldrb	r3, [r7, #11]
 801b0cc:	2b04      	cmp	r3, #4
 801b0ce:	d103      	bne.n	801b0d8 <lv_lmeter_signal+0x3c>
        lv_obj_refresh_ext_draw_pad(lmeter);
 801b0d0:	68f8      	ldr	r0, [r7, #12]
 801b0d2:	f7eb ff25 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
 801b0d6:	e02f      	b.n	801b138 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801b0d8:	7afb      	ldrb	r3, [r7, #11]
 801b0da:	2b05      	cmp	r3, #5
 801b0dc:	d111      	bne.n	801b102 <lv_lmeter_signal+0x66>
        const lv_style_t * style = lv_lmeter_get_style(lmeter, LV_LMETER_STYLE_MAIN);
 801b0de:	2100      	movs	r1, #0
 801b0e0:	68f8      	ldr	r0, [r7, #12]
 801b0e2:	f7ff fd2d 	bl	801ab40 <lv_lmeter_get_style>
 801b0e6:	6178      	str	r0, [r7, #20]
        lmeter->ext_draw_pad     = LV_MATH_MAX(lmeter->ext_draw_pad, style->line.width);
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801b0f4:	4293      	cmp	r3, r2
 801b0f6:	bfb8      	it	lt
 801b0f8:	4613      	movlt	r3, r2
 801b0fa:	b21a      	sxth	r2, r3
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	869a      	strh	r2, [r3, #52]	; 0x34
 801b100:	e01a      	b.n	801b138 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b102:	7afb      	ldrb	r3, [r7, #11]
 801b104:	2b06      	cmp	r3, #6
 801b106:	d117      	bne.n	801b138 <lv_lmeter_signal+0x9c>
        lv_obj_type_t * buf = param;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b10c:	2300      	movs	r3, #0
 801b10e:	77fb      	strb	r3, [r7, #31]
 801b110:	e008      	b.n	801b124 <lv_lmeter_signal+0x88>
            if(buf->type[i] == NULL) break;
 801b112:	7ffa      	ldrb	r2, [r7, #31]
 801b114:	69bb      	ldr	r3, [r7, #24]
 801b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d006      	beq.n	801b12c <lv_lmeter_signal+0x90>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b11e:	7ffb      	ldrb	r3, [r7, #31]
 801b120:	3301      	adds	r3, #1
 801b122:	77fb      	strb	r3, [r7, #31]
 801b124:	7ffb      	ldrb	r3, [r7, #31]
 801b126:	2b06      	cmp	r3, #6
 801b128:	d9f3      	bls.n	801b112 <lv_lmeter_signal+0x76>
 801b12a:	e000      	b.n	801b12e <lv_lmeter_signal+0x92>
            if(buf->type[i] == NULL) break;
 801b12c:	bf00      	nop
        }
        buf->type[i] = "lv_lmeter";
 801b12e:	7ffa      	ldrb	r2, [r7, #31]
 801b130:	69bb      	ldr	r3, [r7, #24]
 801b132:	4905      	ldr	r1, [pc, #20]	; (801b148 <lv_lmeter_signal+0xac>)
 801b134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801b138:	7fbb      	ldrb	r3, [r7, #30]
}
 801b13a:	4618      	mov	r0, r3
 801b13c:	3720      	adds	r7, #32
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}
 801b142:	bf00      	nop
 801b144:	20002ad8 	.word	0x20002ad8
 801b148:	08029cec 	.word	0x08029cec

0801b14c <lv_lmeter_coord_round>:
 * Round a coordinate which is upscaled  (>=x.5 -> x + 1;   <x.5 -> x)
 * @param x a coordinate which is greater then it should be
 * @return the downscaled and rounded coordinate  (+-1)
 */
static lv_coord_t lv_lmeter_coord_round(int32_t x)
{
 801b14c:	b480      	push	{r7}
 801b14e:	b085      	sub	sp, #20
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
#if LV_LMETER_LINE_UPSCALE > 0
    bool was_negative = false;
 801b154:	2300      	movs	r3, #0
 801b156:	73fb      	strb	r3, [r7, #15]
    if(x < 0) {
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	da04      	bge.n	801b168 <lv_lmeter_coord_round+0x1c>
        was_negative = true;
 801b15e:	2301      	movs	r3, #1
 801b160:	73fb      	strb	r3, [r7, #15]
        x            = -x;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	425b      	negs	r3, r3
 801b166:	607b      	str	r3, [r7, #4]
    }

    x = (x >> LV_LMETER_LINE_UPSCALE) + ((x & LV_LMETER_LINE_UPSCALE_MASK) >> (LV_LMETER_LINE_UPSCALE - 1));
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	115a      	asrs	r2, r3, #5
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	111b      	asrs	r3, r3, #4
 801b170:	f003 0301 	and.w	r3, r3, #1
 801b174:	4413      	add	r3, r2
 801b176:	607b      	str	r3, [r7, #4]

    if(was_negative) x = -x;
 801b178:	7bfb      	ldrb	r3, [r7, #15]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d002      	beq.n	801b184 <lv_lmeter_coord_round+0x38>
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	425b      	negs	r3, r3
 801b182:	607b      	str	r3, [r7, #4]

    return x;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	b21b      	sxth	r3, r3
#else
    return x;
#endif
}
 801b188:	4618      	mov	r0, r3
 801b18a:	3714      	adds	r7, #20
 801b18c:	46bd      	mov	sp, r7
 801b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b192:	4770      	bx	lr

0801b194 <lv_font_get_line_height>:
{
 801b194:	b480      	push	{r7}
 801b196:	b083      	sub	sp, #12
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	7a1b      	ldrb	r3, [r3, #8]
}
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	370c      	adds	r7, #12
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1aa:	4770      	bx	lr

0801b1ac <lv_area_get_width>:
{
 801b1ac:	b480      	push	{r7}
 801b1ae:	b083      	sub	sp, #12
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1ba:	b29a      	uxth	r2, r3
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	1ad3      	subs	r3, r2, r3
 801b1c6:	b29b      	uxth	r3, r3
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	b29b      	uxth	r3, r3
 801b1cc:	b21b      	sxth	r3, r3
}
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	370c      	adds	r7, #12
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d8:	4770      	bx	lr

0801b1da <lv_cont_set_fit2>:
{
 801b1da:	b580      	push	{r7, lr}
 801b1dc:	b084      	sub	sp, #16
 801b1de:	af02      	add	r7, sp, #8
 801b1e0:	6078      	str	r0, [r7, #4]
 801b1e2:	460b      	mov	r3, r1
 801b1e4:	70fb      	strb	r3, [r7, #3]
 801b1e6:	4613      	mov	r3, r2
 801b1e8:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801b1ea:	78b8      	ldrb	r0, [r7, #2]
 801b1ec:	78fa      	ldrb	r2, [r7, #3]
 801b1ee:	78f9      	ldrb	r1, [r7, #3]
 801b1f0:	78bb      	ldrb	r3, [r7, #2]
 801b1f2:	9300      	str	r3, [sp, #0]
 801b1f4:	4603      	mov	r3, r0
 801b1f6:	6878      	ldr	r0, [r7, #4]
 801b1f8:	f7fc feb5 	bl	8017f66 <lv_cont_set_fit4>
}
 801b1fc:	bf00      	nop
 801b1fe:	3708      	adds	r7, #8
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}

0801b204 <lv_cont_set_fit>:
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b084      	sub	sp, #16
 801b208:	af02      	add	r7, sp, #8
 801b20a:	6078      	str	r0, [r7, #4]
 801b20c:	460b      	mov	r3, r1
 801b20e:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801b210:	78f8      	ldrb	r0, [r7, #3]
 801b212:	78fa      	ldrb	r2, [r7, #3]
 801b214:	78f9      	ldrb	r1, [r7, #3]
 801b216:	78fb      	ldrb	r3, [r7, #3]
 801b218:	9300      	str	r3, [sp, #0]
 801b21a:	4603      	mov	r3, r0
 801b21c:	6878      	ldr	r0, [r7, #4]
 801b21e:	f7fc fea2 	bl	8017f66 <lv_cont_set_fit4>
}
 801b222:	bf00      	nop
 801b224:	3708      	adds	r7, #8
 801b226:	46bd      	mov	sp, r7
 801b228:	bd80      	pop	{r7, pc}
	...

0801b22c <lv_mbox_create>:
 * @param copy pointer to a message box object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created message box
 */
lv_obj_t * lv_mbox_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b088      	sub	sp, #32
 801b230:	af02      	add	r7, sp, #8
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("mesasge box create started");

    /*Create the ancestor message box*/
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 801b236:	6839      	ldr	r1, [r7, #0]
 801b238:	6878      	ldr	r0, [r7, #4]
 801b23a:	f7fc fdc3 	bl	8017dc4 <lv_cont_create>
 801b23e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_mbox);
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d100      	bne.n	801b248 <lv_mbox_create+0x1c>
 801b246:	e7fe      	b.n	801b246 <lv_mbox_create+0x1a>
    if(new_mbox == NULL) return NULL;
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d101      	bne.n	801b252 <lv_mbox_create+0x26>
 801b24e:	2300      	movs	r3, #0
 801b250:	e08c      	b.n	801b36c <lv_mbox_create+0x140>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_mbox);
 801b252:	4b48      	ldr	r3, [pc, #288]	; (801b374 <lv_mbox_create+0x148>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d105      	bne.n	801b266 <lv_mbox_create+0x3a>
 801b25a:	6978      	ldr	r0, [r7, #20]
 801b25c:	f7eb ffff 	bl	800725e <lv_obj_get_signal_cb>
 801b260:	4602      	mov	r2, r0
 801b262:	4b44      	ldr	r3, [pc, #272]	; (801b374 <lv_mbox_create+0x148>)
 801b264:	601a      	str	r2, [r3, #0]

    /*Allocate the message box type specific extended data*/
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 801b266:	2110      	movs	r1, #16
 801b268:	6978      	ldr	r0, [r7, #20]
 801b26a:	f7eb fe43 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801b26e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d100      	bne.n	801b278 <lv_mbox_create+0x4c>
 801b276:	e7fe      	b.n	801b276 <lv_mbox_create+0x4a>
    if(ext == NULL) return NULL;
 801b278:	693b      	ldr	r3, [r7, #16]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d101      	bne.n	801b282 <lv_mbox_create+0x56>
 801b27e:	2300      	movs	r3, #0
 801b280:	e074      	b.n	801b36c <lv_mbox_create+0x140>

    ext->text = NULL;
 801b282:	693b      	ldr	r3, [r7, #16]
 801b284:	2200      	movs	r2, #0
 801b286:	605a      	str	r2, [r3, #4]
    ext->btnm = NULL;
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	2200      	movs	r2, #0
 801b28c:	609a      	str	r2, [r3, #8]
#if LV_USE_ANIMATION
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 801b28e:	693b      	ldr	r3, [r7, #16]
 801b290:	22c8      	movs	r2, #200	; 0xc8
 801b292:	819a      	strh	r2, [r3, #12]
#endif

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 801b294:	4938      	ldr	r1, [pc, #224]	; (801b378 <lv_mbox_create+0x14c>)
 801b296:	6978      	ldr	r0, [r7, #20]
 801b298:	f7eb fe10 	bl	8006ebc <lv_obj_set_signal_cb>

    /*Init the new message box message box*/
    if(copy == NULL) {
 801b29c:	683b      	ldr	r3, [r7, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d146      	bne.n	801b330 <lv_mbox_create+0x104>
        ext->text = lv_label_create(new_mbox, NULL);
 801b2a2:	2100      	movs	r1, #0
 801b2a4:	6978      	ldr	r0, [r7, #20]
 801b2a6:	f7fe f935 	bl	8019514 <lv_label_create>
 801b2aa:	4602      	mov	r2, r0
 801b2ac:	693b      	ldr	r3, [r7, #16]
 801b2ae:	605a      	str	r2, [r3, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801b2b0:	693b      	ldr	r3, [r7, #16]
 801b2b2:	685b      	ldr	r3, [r3, #4]
 801b2b4:	2101      	movs	r1, #1
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	f7fe fb56 	bl	8019968 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 801b2bc:	693b      	ldr	r3, [r7, #16]
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	2101      	movs	r1, #1
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	f7fe faf4 	bl	80198b0 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	685b      	ldr	r3, [r3, #4]
 801b2cc:	492b      	ldr	r1, [pc, #172]	; (801b37c <lv_mbox_create+0x150>)
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f7fe fa52 	bl	8019778 <lv_label_set_text>

        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 801b2d4:	2103      	movs	r1, #3
 801b2d6:	6978      	ldr	r0, [r7, #20]
 801b2d8:	f7fc fe1e 	bl	8017f18 <lv_cont_set_layout>
        lv_cont_set_fit2(new_mbox, LV_FIT_NONE, LV_FIT_TIGHT);
 801b2dc:	2201      	movs	r2, #1
 801b2de:	2100      	movs	r1, #0
 801b2e0:	6978      	ldr	r0, [r7, #20]
 801b2e2:	f7ff ff7a 	bl	801b1da <lv_cont_set_fit2>
        lv_obj_set_width(new_mbox, LV_DPI * 2);
 801b2e6:	21c8      	movs	r1, #200	; 0xc8
 801b2e8:	6978      	ldr	r0, [r7, #20]
 801b2ea:	f7ea ffd1 	bl	8006290 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	9300      	str	r3, [sp, #0]
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	2200      	movs	r2, #0
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	6978      	ldr	r0, [r7, #20]
 801b2fa:	f7ea fff3 	bl	80062e4 <lv_obj_align>
        lv_obj_set_event_cb(new_mbox, lv_mbox_default_event_cb);
 801b2fe:	4920      	ldr	r1, [pc, #128]	; (801b380 <lv_mbox_create+0x154>)
 801b300:	6978      	ldr	r0, [r7, #20]
 801b302:	f7eb fd3c 	bl	8006d7e <lv_obj_set_event_cb>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801b306:	f003 fe45 	bl	801ef94 <lv_theme_get_current>
 801b30a:	60b8      	str	r0, [r7, #8]
        if(th) {
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d008      	beq.n	801b324 <lv_mbox_create+0xf8>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->style.mbox.bg);
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801b318:	461a      	mov	r2, r3
 801b31a:	2100      	movs	r1, #0
 801b31c:	6978      	ldr	r0, [r7, #20]
 801b31e:	f000 f921 	bl	801b564 <lv_mbox_set_style>
 801b322:	e022      	b.n	801b36a <lv_mbox_create+0x13e>
        } else {
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 801b324:	4a17      	ldr	r2, [pc, #92]	; (801b384 <lv_mbox_create+0x158>)
 801b326:	2100      	movs	r1, #0
 801b328:	6978      	ldr	r0, [r7, #20]
 801b32a:	f000 f91b 	bl	801b564 <lv_mbox_set_style>
 801b32e:	e01c      	b.n	801b36a <lv_mbox_create+0x13e>
        }

    }
    /*Copy an existing message box*/
    else {
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b330:	6838      	ldr	r0, [r7, #0]
 801b332:	f7eb ffac 	bl	800728e <lv_obj_get_ext_attr>
 801b336:	60f8      	str	r0, [r7, #12]

        ext->text = lv_label_create(new_mbox, copy_ext->text);
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	685b      	ldr	r3, [r3, #4]
 801b33c:	4619      	mov	r1, r3
 801b33e:	6978      	ldr	r0, [r7, #20]
 801b340:	f7fe f8e8 	bl	8019514 <lv_label_create>
 801b344:	4602      	mov	r2, r0
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	605a      	str	r2, [r3, #4]

        /*Copy the buttons and the label on them*/
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	689b      	ldr	r3, [r3, #8]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d008      	beq.n	801b364 <lv_mbox_create+0x138>
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	689b      	ldr	r3, [r3, #8]
 801b356:	4619      	mov	r1, r3
 801b358:	6978      	ldr	r0, [r7, #20]
 801b35a:	f7fa fdcd 	bl	8015ef8 <lv_btnm_create>
 801b35e:	4602      	mov	r2, r0
 801b360:	693b      	ldr	r3, [r7, #16]
 801b362:	609a      	str	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_mbox);
 801b364:	6978      	ldr	r0, [r7, #20]
 801b366:	f7eb fc74 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("mesasge box created");

    return new_mbox;
 801b36a:	697b      	ldr	r3, [r7, #20]
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3718      	adds	r7, #24
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	20002adc 	.word	0x20002adc
 801b378:	0801b729 	.word	0x0801b729
 801b37c:	08029cf8 	.word	0x08029cf8
 801b380:	0801b9b1 	.word	0x0801b9b1
 801b384:	20006b78 	.word	0x20006b78

0801b388 <lv_mbox_add_btns>:
 * @param mbox pointer to message box object
 * @param btn_map button descriptor (button matrix map).
 *                E.g.  a const char *txt[] = {"ok", "close", ""} (Can not be local variable)
 */
void lv_mbox_add_btns(lv_obj_t * mbox, const char ** btn_map)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b084      	sub	sp, #16
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
 801b390:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b392:	6878      	ldr	r0, [r7, #4]
 801b394:	f7eb ff7b 	bl	800728e <lv_obj_get_ext_attr>
 801b398:	60f8      	str	r0, [r7, #12]

    /*Create a button matrix if not exists yet*/
    if(ext->btnm == NULL) {
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	689b      	ldr	r3, [r3, #8]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d12c      	bne.n	801b3fc <lv_mbox_add_btns+0x74>
        ext->btnm = lv_btnm_create(mbox, NULL);
 801b3a2:	2100      	movs	r1, #0
 801b3a4:	6878      	ldr	r0, [r7, #4]
 801b3a6:	f7fa fda7 	bl	8015ef8 <lv_btnm_create>
 801b3aa:	4602      	mov	r2, r0
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	609a      	str	r2, [r3, #8]

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801b3b0:	f003 fdf0 	bl	801ef94 <lv_theme_get_current>
 801b3b4:	60b8      	str	r0, [r7, #8]
        if(th) {
 801b3b6:	68bb      	ldr	r3, [r7, #8]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d018      	beq.n	801b3ee <lv_mbox_add_btns+0x66>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->style.mbox.btn.bg);
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b3c2:	461a      	mov	r2, r3
 801b3c4:	2101      	movs	r1, #1
 801b3c6:	6878      	ldr	r0, [r7, #4]
 801b3c8:	f000 f8cc 	bl	801b564 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->style.mbox.btn.rel);
 801b3cc:	68bb      	ldr	r3, [r7, #8]
 801b3ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	2102      	movs	r1, #2
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	f000 f8c4 	bl	801b564 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->style.mbox.btn.pr);
 801b3dc:	68bb      	ldr	r3, [r7, #8]
 801b3de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801b3e2:	461a      	mov	r2, r3
 801b3e4:	2103      	movs	r1, #3
 801b3e6:	6878      	ldr	r0, [r7, #4]
 801b3e8:	f000 f8bc 	bl	801b564 <lv_mbox_set_style>
 801b3ec:	e006      	b.n	801b3fc <lv_mbox_add_btns+0x74>
        } else {
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	689b      	ldr	r3, [r3, #8]
 801b3f2:	4a0f      	ldr	r2, [pc, #60]	; (801b430 <lv_mbox_add_btns+0xa8>)
 801b3f4:	2100      	movs	r1, #0
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7fb f810 	bl	801641c <lv_btnm_set_style>
        }
    }

    lv_btnm_set_map(ext->btnm, btn_map);
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	689b      	ldr	r3, [r3, #8]
 801b400:	6839      	ldr	r1, [r7, #0]
 801b402:	4618      	mov	r0, r3
 801b404:	f7fa fe60 	bl	80160c8 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl_all(ext->btnm, LV_BTNM_CTRL_CLICK_TRIG | LV_BTNM_CTRL_NO_REPEAT);
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	689b      	ldr	r3, [r3, #8]
 801b40c:	f44f 7188 	mov.w	r1, #272	; 0x110
 801b410:	4618      	mov	r0, r3
 801b412:	f7fb f8a6 	bl	8016562 <lv_btnm_set_btn_ctrl_all>
    lv_obj_set_parent_event(ext->btnm, true);
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	689b      	ldr	r3, [r3, #8]
 801b41a:	2101      	movs	r1, #1
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7eb fc6d 	bl	8006cfc <lv_obj_set_parent_event>

    mbox_realign(mbox);
 801b422:	6878      	ldr	r0, [r7, #4]
 801b424:	f000 fa52 	bl	801b8cc <mbox_realign>
}
 801b428:	bf00      	nop
 801b42a:	3710      	adds	r7, #16
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}
 801b430:	20006c2c 	.word	0x20006c2c

0801b434 <lv_mbox_set_text>:
 * Set the text of the message box
 * @param mbox pointer to a message box
 * @param txt a '\0' terminated character string which will be the message box text
 */
void lv_mbox_set_text(lv_obj_t * mbox, const char * txt)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b084      	sub	sp, #16
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
 801b43c:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b43e:	6878      	ldr	r0, [r7, #4]
 801b440:	f7eb ff25 	bl	800728e <lv_obj_get_ext_attr>
 801b444:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->text, txt);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	685b      	ldr	r3, [r3, #4]
 801b44a:	6839      	ldr	r1, [r7, #0]
 801b44c:	4618      	mov	r0, r3
 801b44e:	f7fe f993 	bl	8019778 <lv_label_set_text>

    mbox_realign(mbox);
 801b452:	6878      	ldr	r0, [r7, #4]
 801b454:	f000 fa3a 	bl	801b8cc <mbox_realign>
}
 801b458:	bf00      	nop
 801b45a:	3710      	adds	r7, #16
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}

0801b460 <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b08c      	sub	sp, #48	; 0x30
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
 801b468:	460b      	mov	r3, r1
 801b46a:	807b      	strh	r3, [r7, #2]
#if LV_USE_ANIMATION
    if(lv_mbox_get_anim_time(mbox) != 0) {
 801b46c:	6878      	ldr	r0, [r7, #4]
 801b46e:	f000 f8ee 	bl	801b64e <lv_mbox_get_anim_time>
 801b472:	4603      	mov	r3, r0
 801b474:	2b00      	cmp	r3, #0
 801b476:	d040      	beq.n	801b4fa <lv_mbox_start_auto_close+0x9a>
        /*Add shrinking animations*/
        lv_anim_t a;
        a.var            = mbox;
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	60bb      	str	r3, [r7, #8]
        a.start          = lv_obj_get_height(mbox);
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f7eb fe29 	bl	80070d4 <lv_obj_get_height>
 801b482:	4603      	mov	r3, r0
 801b484:	61bb      	str	r3, [r7, #24]
        a.end            = 0;
 801b486:	2300      	movs	r3, #0
 801b488:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_height;
 801b48a:	4b32      	ldr	r3, [pc, #200]	; (801b554 <lv_mbox_start_auto_close+0xf4>)
 801b48c:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801b48e:	4b32      	ldr	r3, [pc, #200]	; (801b558 <lv_mbox_start_auto_close+0xf8>)
 801b490:	613b      	str	r3, [r7, #16]
        a.ready_cb       = NULL;
 801b492:	2300      	movs	r3, #0
 801b494:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801b496:	887b      	ldrh	r3, [r7, #2]
 801b498:	425b      	negs	r3, r3
 801b49a:	b29b      	uxth	r3, r3
 801b49c:	b21b      	sxth	r3, r3
 801b49e:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = lv_mbox_get_anim_time(mbox);
 801b4a0:	6878      	ldr	r0, [r7, #4]
 801b4a2:	f000 f8d4 	bl	801b64e <lv_mbox_get_anim_time>
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801b4aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b4ae:	f36f 0300 	bfc	r3, #0, #1
 801b4b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801b4ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b4be:	f36f 0341 	bfc	r3, #1, #1
 801b4c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801b4ca:	f107 0308 	add.w	r3, r7, #8
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f7f7 f9a8 	bl	8012824 <lv_anim_create>

        a.start    = lv_obj_get_width(mbox);
 801b4d4:	6878      	ldr	r0, [r7, #4]
 801b4d6:	f7eb fdef 	bl	80070b8 <lv_obj_get_width>
 801b4da:	4603      	mov	r3, r0
 801b4dc:	61bb      	str	r3, [r7, #24]
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 801b4de:	4b1f      	ldr	r3, [pc, #124]	; (801b55c <lv_mbox_start_auto_close+0xfc>)
 801b4e0:	60fb      	str	r3, [r7, #12]
        a.ready_cb = lv_mbox_close_ready_cb;
 801b4e2:	4b1f      	ldr	r3, [pc, #124]	; (801b560 <lv_mbox_start_auto_close+0x100>)
 801b4e4:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 801b4e6:	f107 0308 	add.w	r3, r7, #8
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	f7f7 f99a 	bl	8012824 <lv_anim_create>

        /*Disable fit to let shrinking work*/
        lv_cont_set_fit(mbox, LV_FIT_NONE);
 801b4f0:	2100      	movs	r1, #0
 801b4f2:	6878      	ldr	r0, [r7, #4]
 801b4f4:	f7ff fe86 	bl	801b204 <lv_cont_set_fit>
    }
#else
    (void)delay; /*Unused*/
    lv_obj_del(mbox);
#endif
}
 801b4f8:	e027      	b.n	801b54a <lv_mbox_start_auto_close+0xea>
        a.var            = mbox;
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	60bb      	str	r3, [r7, #8]
        a.start          = 0;
 801b4fe:	2300      	movs	r3, #0
 801b500:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 801b502:	2301      	movs	r3, #1
 801b504:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)NULL;
 801b506:	2300      	movs	r3, #0
 801b508:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801b50a:	4b13      	ldr	r3, [pc, #76]	; (801b558 <lv_mbox_start_auto_close+0xf8>)
 801b50c:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_mbox_close_ready_cb;
 801b50e:	4b14      	ldr	r3, [pc, #80]	; (801b560 <lv_mbox_start_auto_close+0x100>)
 801b510:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801b512:	887b      	ldrh	r3, [r7, #2]
 801b514:	425b      	negs	r3, r3
 801b516:	b29b      	uxth	r3, r3
 801b518:	b21b      	sxth	r3, r3
 801b51a:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = 0;
 801b51c:	2300      	movs	r3, #0
 801b51e:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801b520:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b524:	f36f 0300 	bfc	r3, #0, #1
 801b528:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801b52c:	2300      	movs	r3, #0
 801b52e:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801b530:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b534:	f36f 0341 	bfc	r3, #1, #1
 801b538:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801b53c:	2300      	movs	r3, #0
 801b53e:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801b540:	f107 0308 	add.w	r3, r7, #8
 801b544:	4618      	mov	r0, r3
 801b546:	f7f7 f96d 	bl	8012824 <lv_anim_create>
}
 801b54a:	bf00      	nop
 801b54c:	3730      	adds	r7, #48	; 0x30
 801b54e:	46bd      	mov	sp, r7
 801b550:	bd80      	pop	{r7, pc}
 801b552:	bf00      	nop
 801b554:	080062bb 	.word	0x080062bb
 801b558:	08012975 	.word	0x08012975
 801b55c:	08006291 	.word	0x08006291
 801b560:	0801b997 	.word	0x0801b997

0801b564 <lv_mbox_set_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_mbox_set_style(lv_obj_t * mbox, lv_mbox_style_t type, const lv_style_t * style)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b086      	sub	sp, #24
 801b568:	af00      	add	r7, sp, #0
 801b56a:	60f8      	str	r0, [r7, #12]
 801b56c:	460b      	mov	r3, r1
 801b56e:	607a      	str	r2, [r7, #4]
 801b570:	72fb      	strb	r3, [r7, #11]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b572:	68f8      	ldr	r0, [r7, #12]
 801b574:	f7eb fe8b 	bl	800728e <lv_obj_get_ext_attr>
 801b578:	6178      	str	r0, [r7, #20]

    switch(type) {
 801b57a:	7afb      	ldrb	r3, [r7, #11]
 801b57c:	2b06      	cmp	r3, #6
 801b57e:	d846      	bhi.n	801b60e <lv_mbox_set_style+0xaa>
 801b580:	a201      	add	r2, pc, #4	; (adr r2, 801b588 <lv_mbox_set_style+0x24>)
 801b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b586:	bf00      	nop
 801b588:	0801b5a5 	.word	0x0801b5a5
 801b58c:	0801b5af 	.word	0x0801b5af
 801b590:	0801b5bf 	.word	0x0801b5bf
 801b594:	0801b5cf 	.word	0x0801b5cf
 801b598:	0801b5df 	.word	0x0801b5df
 801b59c:	0801b5ef 	.word	0x0801b5ef
 801b5a0:	0801b5ff 	.word	0x0801b5ff
        case LV_MBOX_STYLE_BG: lv_obj_set_style(mbox, style); break;
 801b5a4:	6879      	ldr	r1, [r7, #4]
 801b5a6:	68f8      	ldr	r0, [r7, #12]
 801b5a8:	f7eb fb41 	bl	8006c2e <lv_obj_set_style>
 801b5ac:	e02f      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_BG: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style); break;
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	689b      	ldr	r3, [r3, #8]
 801b5b2:	687a      	ldr	r2, [r7, #4]
 801b5b4:	2100      	movs	r1, #0
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	f7fa ff30 	bl	801641c <lv_btnm_set_style>
 801b5bc:	e027      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style); break;
 801b5be:	697b      	ldr	r3, [r7, #20]
 801b5c0:	689b      	ldr	r3, [r3, #8]
 801b5c2:	687a      	ldr	r2, [r7, #4]
 801b5c4:	2101      	movs	r1, #1
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7fa ff28 	bl	801641c <lv_btnm_set_style>
 801b5cc:	e01f      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style); break;
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	689b      	ldr	r3, [r3, #8]
 801b5d2:	687a      	ldr	r2, [r7, #4]
 801b5d4:	2102      	movs	r1, #2
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7fa ff20 	bl	801641c <lv_btnm_set_style>
 801b5dc:	e017      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 801b5de:	697b      	ldr	r3, [r7, #20]
 801b5e0:	689b      	ldr	r3, [r3, #8]
 801b5e2:	687a      	ldr	r2, [r7, #4]
 801b5e4:	2103      	movs	r1, #3
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	f7fa ff18 	bl	801641c <lv_btnm_set_style>
 801b5ec:	e00f      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 801b5ee:	697b      	ldr	r3, [r7, #20]
 801b5f0:	689b      	ldr	r3, [r3, #8]
 801b5f2:	687a      	ldr	r2, [r7, #4]
 801b5f4:	2104      	movs	r1, #4
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7fa ff10 	bl	801641c <lv_btnm_set_style>
 801b5fc:	e007      	b.n	801b60e <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	689b      	ldr	r3, [r3, #8]
 801b602:	687a      	ldr	r2, [r7, #4]
 801b604:	2105      	movs	r1, #5
 801b606:	4618      	mov	r0, r3
 801b608:	f7fa ff08 	bl	801641c <lv_btnm_set_style>
 801b60c:	bf00      	nop
    }

    mbox_realign(mbox);
 801b60e:	68f8      	ldr	r0, [r7, #12]
 801b610:	f000 f95c 	bl	801b8cc <mbox_realign>
}
 801b614:	bf00      	nop
 801b616:	3718      	adds	r7, #24
 801b618:	46bd      	mov	sp, r7
 801b61a:	bd80      	pop	{r7, pc}

0801b61c <lv_mbox_get_active_btn>:
 * Useful in the the `event_cb`.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_mbox_get_active_btn(lv_obj_t * mbox)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b084      	sub	sp, #16
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b624:	6878      	ldr	r0, [r7, #4]
 801b626:	f7eb fe32 	bl	800728e <lv_obj_get_ext_attr>
 801b62a:	60f8      	str	r0, [r7, #12]
    if(ext->btnm)
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	689b      	ldr	r3, [r3, #8]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d006      	beq.n	801b642 <lv_mbox_get_active_btn+0x26>
        return lv_btnm_get_active_btn(ext->btnm);
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	689b      	ldr	r3, [r3, #8]
 801b638:	4618      	mov	r0, r3
 801b63a:	f7fa ffde 	bl	80165fa <lv_btnm_get_active_btn>
 801b63e:	4603      	mov	r3, r0
 801b640:	e001      	b.n	801b646 <lv_mbox_get_active_btn+0x2a>
    else
        return LV_BTNM_BTN_NONE;
 801b642:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801b646:	4618      	mov	r0, r3
 801b648:	3710      	adds	r7, #16
 801b64a:	46bd      	mov	sp, r7
 801b64c:	bd80      	pop	{r7, pc}

0801b64e <lv_mbox_get_anim_time>:
 * Get the animation duration (close animation time)
 * @param mbox pointer to a message box object
 * @return animation length in  milliseconds (0: no animation)
 */
uint16_t lv_mbox_get_anim_time(const lv_obj_t * mbox)
{
 801b64e:	b580      	push	{r7, lr}
 801b650:	b084      	sub	sp, #16
 801b652:	af00      	add	r7, sp, #0
 801b654:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b656:	6878      	ldr	r0, [r7, #4]
 801b658:	f7eb fe19 	bl	800728e <lv_obj_get_ext_attr>
 801b65c:	60f8      	str	r0, [r7, #12]
    return ext->anim_time;
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	899b      	ldrh	r3, [r3, #12]
#else
    (void)mbox;
    return 0;
#endif
}
 801b662:	4618      	mov	r0, r3
 801b664:	3710      	adds	r7, #16
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}
	...

0801b66c <lv_mbox_get_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_mbox_get_style(const lv_obj_t * mbox, lv_mbox_style_t type)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b084      	sub	sp, #16
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
 801b674:	460b      	mov	r3, r1
 801b676:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801b678:	2300      	movs	r3, #0
 801b67a:	60fb      	str	r3, [r7, #12]
    lv_mbox_ext_t * ext      = lv_obj_get_ext_attr(mbox);
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	f7eb fe06 	bl	800728e <lv_obj_get_ext_attr>
 801b682:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801b684:	78fb      	ldrb	r3, [r7, #3]
 801b686:	2b06      	cmp	r3, #6
 801b688:	d845      	bhi.n	801b716 <lv_mbox_get_style+0xaa>
 801b68a:	a201      	add	r2, pc, #4	; (adr r2, 801b690 <lv_mbox_get_style+0x24>)
 801b68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b690:	0801b6ad 	.word	0x0801b6ad
 801b694:	0801b6b7 	.word	0x0801b6b7
 801b698:	0801b6c7 	.word	0x0801b6c7
 801b69c:	0801b6d7 	.word	0x0801b6d7
 801b6a0:	0801b6e7 	.word	0x0801b6e7
 801b6a4:	0801b6f7 	.word	0x0801b6f7
 801b6a8:	0801b707 	.word	0x0801b707
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7eb fd33 	bl	8007118 <lv_obj_get_style>
 801b6b2:	60f8      	str	r0, [r7, #12]
 801b6b4:	e032      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG); break;
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	689b      	ldr	r3, [r3, #8]
 801b6ba:	2100      	movs	r1, #0
 801b6bc:	4618      	mov	r0, r3
 801b6be:	f7fa ffcf 	bl	8016660 <lv_btnm_get_style>
 801b6c2:	60f8      	str	r0, [r7, #12]
 801b6c4:	e02a      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL); break;
 801b6c6:	68bb      	ldr	r3, [r7, #8]
 801b6c8:	689b      	ldr	r3, [r3, #8]
 801b6ca:	2101      	movs	r1, #1
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7fa ffc7 	bl	8016660 <lv_btnm_get_style>
 801b6d2:	60f8      	str	r0, [r7, #12]
 801b6d4:	e022      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR); break;
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	689b      	ldr	r3, [r3, #8]
 801b6da:	2102      	movs	r1, #2
 801b6dc:	4618      	mov	r0, r3
 801b6de:	f7fa ffbf 	bl	8016660 <lv_btnm_get_style>
 801b6e2:	60f8      	str	r0, [r7, #12]
 801b6e4:	e01a      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL); break;
 801b6e6:	68bb      	ldr	r3, [r7, #8]
 801b6e8:	689b      	ldr	r3, [r3, #8]
 801b6ea:	2103      	movs	r1, #3
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f7fa ffb7 	bl	8016660 <lv_btnm_get_style>
 801b6f2:	60f8      	str	r0, [r7, #12]
 801b6f4:	e012      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR); break;
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	689b      	ldr	r3, [r3, #8]
 801b6fa:	2104      	movs	r1, #4
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7fa ffaf 	bl	8016660 <lv_btnm_get_style>
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	e00a      	b.n	801b71c <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 801b706:	68bb      	ldr	r3, [r7, #8]
 801b708:	689b      	ldr	r3, [r3, #8]
 801b70a:	2105      	movs	r1, #5
 801b70c:	4618      	mov	r0, r3
 801b70e:	f7fa ffa7 	bl	8016660 <lv_btnm_get_style>
 801b712:	60f8      	str	r0, [r7, #12]
 801b714:	e002      	b.n	801b71c <lv_mbox_get_style+0xb0>
        default: style = NULL; break;
 801b716:	2300      	movs	r3, #0
 801b718:	60fb      	str	r3, [r7, #12]
 801b71a:	bf00      	nop
    }

    return style;
 801b71c:	68fb      	ldr	r3, [r7, #12]
}
 801b71e:	4618      	mov	r0, r3
 801b720:	3710      	adds	r7, #16
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop

0801b728 <lv_mbox_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_mbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)
{
 801b728:	b590      	push	{r4, r7, lr}
 801b72a:	b08d      	sub	sp, #52	; 0x34
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	60f8      	str	r0, [r7, #12]
 801b730:	460b      	mov	r3, r1
 801b732:	607a      	str	r2, [r7, #4]
 801b734:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /*Translate LV_KEY_UP/DOWN to LV_KEY_LEFT/RIGHT */
    char c_trans = 0;
 801b736:	2300      	movs	r3, #0
 801b738:	75fb      	strb	r3, [r7, #23]
    if(sign == LV_SIGNAL_CONTROL) {
 801b73a:	7afb      	ldrb	r3, [r7, #11]
 801b73c:	2b11      	cmp	r3, #17
 801b73e:	d10f      	bne.n	801b760 <lv_mbox_signal+0x38>
        c_trans = *((char *)param);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	781b      	ldrb	r3, [r3, #0]
 801b744:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 801b746:	7dfb      	ldrb	r3, [r7, #23]
 801b748:	2b12      	cmp	r3, #18
 801b74a:	d101      	bne.n	801b750 <lv_mbox_signal+0x28>
 801b74c:	2314      	movs	r3, #20
 801b74e:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 801b750:	7dfb      	ldrb	r3, [r7, #23]
 801b752:	2b11      	cmp	r3, #17
 801b754:	d101      	bne.n	801b75a <lv_mbox_signal+0x32>
 801b756:	2313      	movs	r3, #19
 801b758:	75fb      	strb	r3, [r7, #23]

        param = &c_trans;
 801b75a:	f107 0317 	add.w	r3, r7, #23
 801b75e:	607b      	str	r3, [r7, #4]
    }

    /* Include the ancient signal function */
    res = ancestor_signal(mbox, sign, param);
 801b760:	4b58      	ldr	r3, [pc, #352]	; (801b8c4 <lv_mbox_signal+0x19c>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	7af9      	ldrb	r1, [r7, #11]
 801b766:	687a      	ldr	r2, [r7, #4]
 801b768:	68f8      	ldr	r0, [r7, #12]
 801b76a:	4798      	blx	r3
 801b76c:	4603      	mov	r3, r0
 801b76e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(res != LV_RES_OK) return res;
 801b772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b776:	2b01      	cmp	r3, #1
 801b778:	d002      	beq.n	801b780 <lv_mbox_signal+0x58>
 801b77a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b77e:	e09c      	b.n	801b8ba <lv_mbox_signal+0x192>

    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b780:	68f8      	ldr	r0, [r7, #12]
 801b782:	f7eb fd84 	bl	800728e <lv_obj_get_ext_attr>
 801b786:	62b8      	str	r0, [r7, #40]	; 0x28
    if(sign == LV_SIGNAL_CORD_CHG) {
 801b788:	7afb      	ldrb	r3, [r7, #11]
 801b78a:	2b02      	cmp	r3, #2
 801b78c:	d10f      	bne.n	801b7ae <lv_mbox_signal+0x86>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 801b78e:	68f8      	ldr	r0, [r7, #12]
 801b790:	f7eb fc92 	bl	80070b8 <lv_obj_get_width>
 801b794:	4603      	mov	r3, r0
 801b796:	461c      	mov	r4, r3
 801b798:	6878      	ldr	r0, [r7, #4]
 801b79a:	f7ff fd07 	bl	801b1ac <lv_area_get_width>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	429c      	cmp	r4, r3
 801b7a2:	f000 8088 	beq.w	801b8b6 <lv_mbox_signal+0x18e>
            mbox_realign(mbox);
 801b7a6:	68f8      	ldr	r0, [r7, #12]
 801b7a8:	f000 f890 	bl	801b8cc <mbox_realign>
 801b7ac:	e083      	b.n	801b8b6 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801b7ae:	7afb      	ldrb	r3, [r7, #11]
 801b7b0:	2b04      	cmp	r3, #4
 801b7b2:	d103      	bne.n	801b7bc <lv_mbox_signal+0x94>
        mbox_realign(mbox);
 801b7b4:	68f8      	ldr	r0, [r7, #12]
 801b7b6:	f000 f889 	bl	801b8cc <mbox_realign>
 801b7ba:	e07c      	b.n	801b8b6 <lv_mbox_signal+0x18e>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801b7bc:	7afb      	ldrb	r3, [r7, #11]
 801b7be:	2b0a      	cmp	r3, #10
 801b7c0:	d117      	bne.n	801b7f2 <lv_mbox_signal+0xca>
        if(ext->btnm) {
 801b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7c4:	689b      	ldr	r3, [r3, #8]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d075      	beq.n	801b8b6 <lv_mbox_signal+0x18e>
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 801b7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7cc:	689b      	ldr	r3, [r3, #8]
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f7fa ff13 	bl	80165fa <lv_btnm_get_active_btn>
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	613b      	str	r3, [r7, #16]
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7de:	4293      	cmp	r3, r2
 801b7e0:	d069      	beq.n	801b8b6 <lv_mbox_signal+0x18e>
 801b7e2:	f107 0310 	add.w	r3, r7, #16
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	210e      	movs	r1, #14
 801b7ea:	68f8      	ldr	r0, [r7, #12]
 801b7ec:	f7eb fad5 	bl	8006d9a <lv_event_send>
 801b7f0:	e061      	b.n	801b8b6 <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL ||
 801b7f2:	7afb      	ldrb	r3, [r7, #11]
 801b7f4:	2b0f      	cmp	r3, #15
 801b7f6:	d008      	beq.n	801b80a <lv_mbox_signal+0xe2>
 801b7f8:	7afb      	ldrb	r3, [r7, #11]
 801b7fa:	2b10      	cmp	r3, #16
 801b7fc:	d005      	beq.n	801b80a <lv_mbox_signal+0xe2>
 801b7fe:	7afb      	ldrb	r3, [r7, #11]
 801b800:	2b11      	cmp	r3, #17
 801b802:	d002      	beq.n	801b80a <lv_mbox_signal+0xe2>
 801b804:	7afb      	ldrb	r3, [r7, #11]
 801b806:	2b12      	cmp	r3, #18
 801b808:	d132      	bne.n	801b870 <lv_mbox_signal+0x148>
              sign == LV_SIGNAL_GET_EDITABLE) {
        if(ext->btnm) {
 801b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b80c:	689b      	ldr	r3, [r3, #8]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d007      	beq.n	801b822 <lv_mbox_signal+0xfa>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 801b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	69db      	ldr	r3, [r3, #28]
 801b818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b81a:	6890      	ldr	r0, [r2, #8]
 801b81c:	7af9      	ldrb	r1, [r7, #11]
 801b81e:	687a      	ldr	r2, [r7, #4]
 801b820:	4798      	blx	r3
        }

        /* The button matrix with ENCODER input supposes it's in a group but in this case it isn't
         * (Only the message box's container) So so some actions here instead*/
        if(sign == LV_SIGNAL_FOCUS) {
 801b822:	7afb      	ldrb	r3, [r7, #11]
 801b824:	2b0f      	cmp	r3, #15
 801b826:	d145      	bne.n	801b8b4 <lv_mbox_signal+0x18c>
#if LV_USE_GROUP
            lv_indev_t * indev         = lv_indev_get_act();
 801b828:	f7e9 fe7c 	bl	8005524 <lv_indev_get_act>
 801b82c:	6238      	str	r0, [r7, #32]
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b82e:	6a38      	ldr	r0, [r7, #32]
 801b830:	f7e9 fe84 	bl	800553c <lv_indev_get_type>
 801b834:	4603      	mov	r3, r0
 801b836:	77fb      	strb	r3, [r7, #31]
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801b838:	7ffb      	ldrb	r3, [r7, #31]
 801b83a:	2b04      	cmp	r3, #4
 801b83c:	d13a      	bne.n	801b8b4 <lv_mbox_signal+0x18c>
                /*In navigation mode don't select any button but in edit mode select the fist*/
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 801b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b840:	689b      	ldr	r3, [r3, #8]
 801b842:	4618      	mov	r0, r3
 801b844:	f7eb fd23 	bl	800728e <lv_obj_get_ext_attr>
 801b848:	61b8      	str	r0, [r7, #24]
                if(lv_group_get_editing(lv_obj_get_group(mbox)))
 801b84a:	68f8      	ldr	r0, [r7, #12]
 801b84c:	f7eb fd2b 	bl	80072a6 <lv_obj_get_group>
 801b850:	4603      	mov	r3, r0
 801b852:	4618      	mov	r0, r3
 801b854:	f7e9 fd21 	bl	800529a <lv_group_get_editing>
 801b858:	4603      	mov	r3, r0
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d003      	beq.n	801b866 <lv_mbox_signal+0x13e>
                    btnm_ext->btn_id_pr = 0;
 801b85e:	69bb      	ldr	r3, [r7, #24]
 801b860:	2200      	movs	r2, #0
 801b862:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801b864:	e026      	b.n	801b8b4 <lv_mbox_signal+0x18c>
                else
                    btnm_ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801b866:	69bb      	ldr	r3, [r7, #24]
 801b868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b86c:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801b86e:	e021      	b.n	801b8b4 <lv_mbox_signal+0x18c>
            }
#endif
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b870:	7afb      	ldrb	r3, [r7, #11]
 801b872:	2b06      	cmp	r3, #6
 801b874:	d11f      	bne.n	801b8b6 <lv_mbox_signal+0x18e>
        lv_obj_type_t * buf = param;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b87a:	2300      	movs	r3, #0
 801b87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b880:	e00b      	b.n	801b89a <lv_mbox_signal+0x172>
            if(buf->type[i] == NULL) break;
 801b882:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d009      	beq.n	801b8a4 <lv_mbox_signal+0x17c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b894:	3301      	adds	r3, #1
 801b896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b89a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b89e:	2b06      	cmp	r3, #6
 801b8a0:	d9ef      	bls.n	801b882 <lv_mbox_signal+0x15a>
 801b8a2:	e000      	b.n	801b8a6 <lv_mbox_signal+0x17e>
            if(buf->type[i] == NULL) break;
 801b8a4:	bf00      	nop
        }
        buf->type[i] = "lv_mbox";
 801b8a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ac:	4906      	ldr	r1, [pc, #24]	; (801b8c8 <lv_mbox_signal+0x1a0>)
 801b8ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b8b2:	e000      	b.n	801b8b6 <lv_mbox_signal+0x18e>
        if(sign == LV_SIGNAL_FOCUS) {
 801b8b4:	bf00      	nop
    }

    return res;
 801b8b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	3734      	adds	r7, #52	; 0x34
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	bd90      	pop	{r4, r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	20002adc 	.word	0x20002adc
 801b8c8:	08029d00 	.word	0x08029d00

0801b8cc <mbox_realign>:
/**
 * Resize the button holder to fit
 * @param mbox pointer to message box object
 */
static void mbox_realign(lv_obj_t * mbox)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b088      	sub	sp, #32
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b8d4:	6878      	ldr	r0, [r7, #4]
 801b8d6:	f7eb fcda 	bl	800728e <lv_obj_get_ext_attr>
 801b8da:	61f8      	str	r0, [r7, #28]

    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 801b8dc:	2100      	movs	r1, #0
 801b8de:	6878      	ldr	r0, [r7, #4]
 801b8e0:	f7ff fec4 	bl	801b66c <lv_mbox_get_style>
 801b8e4:	61b8      	str	r0, [r7, #24]
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 801b8e6:	6878      	ldr	r0, [r7, #4]
 801b8e8:	f7eb fbe6 	bl	80070b8 <lv_obj_get_width>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	b29a      	uxth	r2, r3
 801b8f0:	69bb      	ldr	r3, [r7, #24]
 801b8f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	1ad3      	subs	r3, r2, r3
 801b8fa:	b29a      	uxth	r2, r3
 801b8fc:	69bb      	ldr	r3, [r7, #24]
 801b8fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b902:	b29b      	uxth	r3, r3
 801b904:	1ad3      	subs	r3, r2, r3
 801b906:	b29b      	uxth	r3, r3
 801b908:	82fb      	strh	r3, [r7, #22]

    if(ext->text) {
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d007      	beq.n	801b922 <mbox_realign+0x56>
        lv_obj_set_width(ext->text, w);
 801b912:	69fb      	ldr	r3, [r7, #28]
 801b914:	685b      	ldr	r3, [r3, #4]
 801b916:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b91a:	4611      	mov	r1, r2
 801b91c:	4618      	mov	r0, r3
 801b91e:	f7ea fcb7 	bl	8006290 <lv_obj_set_width>
    }

    if(ext->btnm) {
 801b922:	69fb      	ldr	r3, [r7, #28]
 801b924:	689b      	ldr	r3, [r3, #8]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d031      	beq.n	801b98e <mbox_realign+0xc2>
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801b92a:	2101      	movs	r1, #1
 801b92c:	6878      	ldr	r0, [r7, #4]
 801b92e:	f7ff fe9d 	bl	801b66c <lv_mbox_get_style>
 801b932:	6138      	str	r0, [r7, #16]
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 801b934:	2102      	movs	r1, #2
 801b936:	6878      	ldr	r0, [r7, #4]
 801b938:	f7ff fe98 	bl	801b66c <lv_mbox_get_style>
 801b93c:	60f8      	str	r0, [r7, #12]
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b942:	4618      	mov	r0, r3
 801b944:	f7ff fc26 	bl	801b194 <lv_font_get_line_height>
 801b948:	4603      	mov	r3, r0
 801b94a:	817b      	strh	r3, [r7, #10]
        lv_obj_set_size(ext->btnm, w,
 801b94c:	69fb      	ldr	r3, [r7, #28]
 801b94e:	6898      	ldr	r0, [r3, #8]
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b956:	b29a      	uxth	r2, r3
 801b958:	897b      	ldrh	r3, [r7, #10]
 801b95a:	4413      	add	r3, r2
 801b95c:	b29a      	uxth	r2, r3
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b964:	b29b      	uxth	r3, r3
 801b966:	4413      	add	r3, r2
 801b968:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801b96a:	693b      	ldr	r3, [r7, #16]
 801b96c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b970:	b29b      	uxth	r3, r3
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801b972:	4413      	add	r3, r2
 801b974:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801b976:	693b      	ldr	r3, [r7, #16]
 801b978:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b97c:	b29b      	uxth	r3, r3
 801b97e:	4413      	add	r3, r2
 801b980:	b29b      	uxth	r3, r3
        lv_obj_set_size(ext->btnm, w,
 801b982:	b21a      	sxth	r2, r3
 801b984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b988:	4619      	mov	r1, r3
 801b98a:	f7ea fc08 	bl	800619e <lv_obj_set_size>
    }
}
 801b98e:	bf00      	nop
 801b990:	3720      	adds	r7, #32
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}

0801b996 <lv_mbox_close_ready_cb>:

#if LV_USE_ANIMATION
static void lv_mbox_close_ready_cb(lv_anim_t * a)
{
 801b996:	b580      	push	{r7, lr}
 801b998:	b082      	sub	sp, #8
 801b99a:	af00      	add	r7, sp, #0
 801b99c:	6078      	str	r0, [r7, #4]
    lv_obj_del(a->var);
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7ea f992 	bl	8005ccc <lv_obj_del>
}
 801b9a8:	bf00      	nop
 801b9aa:	3708      	adds	r7, #8
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bd80      	pop	{r7, pc}

0801b9b0 <lv_mbox_default_event_cb>:
#endif

static void lv_mbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b084      	sub	sp, #16
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
 801b9b8:	460b      	mov	r3, r1
 801b9ba:	70fb      	strb	r3, [r7, #3]
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801b9bc:	78fb      	ldrb	r3, [r7, #3]
 801b9be:	2b0e      	cmp	r3, #14
 801b9c0:	d10e      	bne.n	801b9e0 <lv_mbox_default_event_cb+0x30>

    uint32_t btn_id = lv_mbox_get_active_btn(mbox);
 801b9c2:	6878      	ldr	r0, [r7, #4]
 801b9c4:	f7ff fe2a 	bl	801b61c <lv_mbox_get_active_btn>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	60fb      	str	r3, [r7, #12]
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9d2:	4293      	cmp	r3, r2
 801b9d4:	d006      	beq.n	801b9e4 <lv_mbox_default_event_cb+0x34>

    lv_mbox_start_auto_close(mbox, 0);
 801b9d6:	2100      	movs	r1, #0
 801b9d8:	6878      	ldr	r0, [r7, #4]
 801b9da:	f7ff fd41 	bl	801b460 <lv_mbox_start_auto_close>
 801b9de:	e002      	b.n	801b9e6 <lv_mbox_default_event_cb+0x36>
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801b9e0:	bf00      	nop
 801b9e2:	e000      	b.n	801b9e6 <lv_mbox_default_event_cb+0x36>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801b9e4:	bf00      	nop
}
 801b9e6:	3710      	adds	r7, #16
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	bd80      	pop	{r7, pc}

0801b9ec <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b082      	sub	sp, #8
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
 801b9f4:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801b9f6:	2208      	movs	r2, #8
 801b9f8:	6839      	ldr	r1, [r7, #0]
 801b9fa:	6878      	ldr	r0, [r7, #4]
 801b9fc:	f00b fbd0 	bl	80271a0 <memcpy>
}
 801ba00:	bf00      	nop
 801ba02:	3708      	adds	r7, #8
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}

0801ba08 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801ba08:	b480      	push	{r7}
 801ba0a:	b083      	sub	sp, #12
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba16:	b29a      	uxth	r2, r3
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba1e:	b29b      	uxth	r3, r3
 801ba20:	1ad3      	subs	r3, r2, r3
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	3301      	adds	r3, #1
 801ba26:	b29b      	uxth	r3, r3
 801ba28:	b21b      	sxth	r3, r3
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	370c      	adds	r7, #12
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba34:	4770      	bx	lr

0801ba36 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801ba36:	b480      	push	{r7}
 801ba38:	b083      	sub	sp, #12
 801ba3a:	af00      	add	r7, sp, #0
 801ba3c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ba44:	b29a      	uxth	r2, r3
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba4c:	b29b      	uxth	r3, r3
 801ba4e:	1ad3      	subs	r3, r2, r3
 801ba50:	b29b      	uxth	r3, r3
 801ba52:	3301      	adds	r3, #1
 801ba54:	b29b      	uxth	r3, r3
 801ba56:	b21b      	sxth	r3, r3
}
 801ba58:	4618      	mov	r0, r3
 801ba5a:	370c      	adds	r7, #12
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba62:	4770      	bx	lr

0801ba64 <lv_page_get_scrl_width>:
 * Get width of the scrollable part of a page
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b082      	sub	sp, #8
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	6078      	str	r0, [r7, #4]
    return lv_obj_get_width(lv_page_get_scrl(page));
 801ba6c:	6878      	ldr	r0, [r7, #4]
 801ba6e:	f000 fa4d 	bl	801bf0c <lv_page_get_scrl>
 801ba72:	4603      	mov	r3, r0
 801ba74:	4618      	mov	r0, r3
 801ba76:	f7eb fb1f 	bl	80070b8 <lv_obj_get_width>
 801ba7a:	4603      	mov	r3, r0
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}

0801ba84 <lv_page_get_scrl_fit_left>:
 * Get the left fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b082      	sub	sp, #8
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 801ba8c:	6878      	ldr	r0, [r7, #4]
 801ba8e:	f000 fa3d 	bl	801bf0c <lv_page_get_scrl>
 801ba92:	4603      	mov	r3, r0
 801ba94:	4618      	mov	r0, r3
 801ba96:	f7fc fade 	bl	8018056 <lv_cont_get_fit_left>
 801ba9a:	4603      	mov	r3, r0
}
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	3708      	adds	r7, #8
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}

0801baa4 <lv_page_get_scrl_fit_top>:
 * Get the top fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b082      	sub	sp, #8
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 801baac:	6878      	ldr	r0, [r7, #4]
 801baae:	f000 fa2d 	bl	801bf0c <lv_page_get_scrl>
 801bab2:	4603      	mov	r3, r0
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7fc fadf 	bl	8018078 <lv_cont_get_fit_top>
 801baba:	4603      	mov	r3, r0
}
 801babc:	4618      	mov	r0, r3
 801babe:	3708      	adds	r7, #8
 801bac0:	46bd      	mov	sp, r7
 801bac2:	bd80      	pop	{r7, pc}

0801bac4 <lv_page_create>:
 * @param par pointer to an object, it will be the parent of the new page
 * @param copy pointer to a page object, if not NULL then the new object will be copied from it
 * @return pointer to the created page
 */
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801bac4:	b580      	push	{r7, lr}
 801bac6:	b088      	sub	sp, #32
 801bac8:	af02      	add	r7, sp, #8
 801baca:	6078      	str	r0, [r7, #4]
 801bacc:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("page create started");

    /*Create the ancestor object*/
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801bace:	6839      	ldr	r1, [r7, #0]
 801bad0:	6878      	ldr	r0, [r7, #4]
 801bad2:	f7fc f977 	bl	8017dc4 <lv_cont_create>
 801bad6:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_page);
 801bad8:	697b      	ldr	r3, [r7, #20]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d100      	bne.n	801bae0 <lv_page_create+0x1c>
 801bade:	e7fe      	b.n	801bade <lv_page_create+0x1a>
    if(new_page == NULL) return NULL;
 801bae0:	697b      	ldr	r3, [r7, #20]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d101      	bne.n	801baea <lv_page_create+0x26>
 801bae6:	2300      	movs	r3, #0
 801bae8:	e143      	b.n	801bd72 <lv_page_create+0x2ae>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 801baea:	4ba4      	ldr	r3, [pc, #656]	; (801bd7c <lv_page_create+0x2b8>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d105      	bne.n	801bafe <lv_page_create+0x3a>
 801baf2:	6978      	ldr	r0, [r7, #20]
 801baf4:	f7eb fbb3 	bl	800725e <lv_obj_get_signal_cb>
 801baf8:	4602      	mov	r2, r0
 801bafa:	4ba0      	ldr	r3, [pc, #640]	; (801bd7c <lv_page_create+0x2b8>)
 801bafc:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 801bafe:	4ba0      	ldr	r3, [pc, #640]	; (801bd80 <lv_page_create+0x2bc>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d105      	bne.n	801bb12 <lv_page_create+0x4e>
 801bb06:	6978      	ldr	r0, [r7, #20]
 801bb08:	f7eb fbb5 	bl	8007276 <lv_obj_get_design_cb>
 801bb0c:	4602      	mov	r2, r0
 801bb0e:	4b9c      	ldr	r3, [pc, #624]	; (801bd80 <lv_page_create+0x2bc>)
 801bb10:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801bb12:	2130      	movs	r1, #48	; 0x30
 801bb14:	6978      	ldr	r0, [r7, #20]
 801bb16:	f7eb f9ed 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801bb1a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d100      	bne.n	801bb24 <lv_page_create+0x60>
 801bb22:	e7fe      	b.n	801bb22 <lv_page_create+0x5e>
    if(ext == NULL) return NULL;
 801bb24:	693b      	ldr	r3, [r7, #16]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d101      	bne.n	801bb2e <lv_page_create+0x6a>
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	e121      	b.n	801bd72 <lv_page_create+0x2ae>

    ext->scrl        = NULL;
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	2200      	movs	r2, #0
 801bb32:	605a      	str	r2, [r3, #4]
    ext->sb.hor_draw = 0;
 801bb34:	693a      	ldr	r2, [r7, #16]
 801bb36:	7f13      	ldrb	r3, [r2, #28]
 801bb38:	f36f 0300 	bfc	r3, #0, #1
 801bb3c:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801bb3e:	693a      	ldr	r2, [r7, #16]
 801bb40:	7f13      	ldrb	r3, [r2, #28]
 801bb42:	f36f 0341 	bfc	r3, #1, #1
 801bb46:	7713      	strb	r3, [r2, #28]
    ext->sb.style    = &lv_style_pretty;
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	4a8e      	ldr	r2, [pc, #568]	; (801bd84 <lv_page_create+0x2c0>)
 801bb4c:	609a      	str	r2, [r3, #8]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 801bb4e:	693a      	ldr	r2, [r7, #16]
 801bb50:	7f13      	ldrb	r3, [r2, #28]
 801bb52:	2103      	movs	r1, #3
 801bb54:	f361 0384 	bfi	r3, r1, #2, #3
 801bb58:	7713      	strb	r3, [r2, #28]
#if LV_USE_ANIMATION
    ext->edge_flash.enabled   = 0;
 801bb5a:	693a      	ldr	r2, [r7, #16]
 801bb5c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb60:	f36f 0300 	bfc	r3, #0, #1
 801bb64:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801bb68:	693a      	ldr	r2, [r7, #16]
 801bb6a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb6e:	f36f 0382 	bfc	r3, #2, #1
 801bb72:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.top_ip    = 0;
 801bb76:	693a      	ldr	r2, [r7, #16]
 801bb78:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb7c:	f36f 0341 	bfc	r3, #1, #1
 801bb80:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801bb84:	693a      	ldr	r2, [r7, #16]
 801bb86:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb8a:	f36f 1304 	bfc	r3, #4, #1
 801bb8e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801bb92:	693a      	ldr	r2, [r7, #16]
 801bb94:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb98:	f36f 03c3 	bfc	r3, #3, #1
 801bb9c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.state     = 0;
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	2200      	movs	r2, #0
 801bba4:	841a      	strh	r2, [r3, #32]
    ext->edge_flash.style     = &lv_style_plain_color;
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	4a77      	ldr	r2, [pc, #476]	; (801bd88 <lv_page_create+0x2c4>)
 801bbaa:	625a      	str	r2, [r3, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 801bbac:	693b      	ldr	r3, [r7, #16]
 801bbae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801bbb2:	859a      	strh	r2, [r3, #44]	; 0x2c
#endif
    ext->scroll_prop    = 0;
 801bbb4:	693a      	ldr	r2, [r7, #16]
 801bbb6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801bbba:	f36f 0300 	bfc	r3, #0, #1
 801bbbe:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    ext->scroll_prop_ip = 0;
 801bbc2:	693a      	ldr	r2, [r7, #16]
 801bbc4:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801bbc8:	f36f 0341 	bfc	r3, #1, #1
 801bbcc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

    /*Init the new page object*/
    if(copy == NULL) {
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	f040 8084 	bne.w	801bce0 <lv_page_create+0x21c>
        ext->scrl = lv_cont_create(new_page, NULL);
 801bbd8:	2100      	movs	r1, #0
 801bbda:	6978      	ldr	r0, [r7, #20]
 801bbdc:	f7fc f8f2 	bl	8017dc4 <lv_cont_create>
 801bbe0:	4602      	mov	r2, r0
 801bbe2:	693b      	ldr	r3, [r7, #16]
 801bbe4:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801bbe6:	693b      	ldr	r3, [r7, #16]
 801bbe8:	685b      	ldr	r3, [r3, #4]
 801bbea:	4968      	ldr	r1, [pc, #416]	; (801bd8c <lv_page_create+0x2c8>)
 801bbec:	4618      	mov	r0, r3
 801bbee:	f7eb f965 	bl	8006ebc <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 801bbf2:	693b      	ldr	r3, [r7, #16]
 801bbf4:	685b      	ldr	r3, [r3, #4]
 801bbf6:	4966      	ldr	r1, [pc, #408]	; (801bd90 <lv_page_create+0x2cc>)
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	f7eb f96d 	bl	8006ed8 <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 801bbfe:	693b      	ldr	r3, [r7, #16]
 801bc00:	685b      	ldr	r3, [r3, #4]
 801bc02:	2101      	movs	r1, #1
 801bc04:	4618      	mov	r0, r3
 801bc06:	f7eb f84c 	bl	8006ca2 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 801bc0a:	693b      	ldr	r3, [r7, #16]
 801bc0c:	685b      	ldr	r3, [r3, #4]
 801bc0e:	2101      	movs	r1, #1
 801bc10:	4618      	mov	r0, r3
 801bc12:	f7eb f85f 	bl	8006cd4 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801bc16:	693b      	ldr	r3, [r7, #16]
 801bc18:	685b      	ldr	r3, [r3, #4]
 801bc1a:	2112      	movs	r1, #18
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7eb f881 	bl	8006d24 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 801bc22:	693b      	ldr	r3, [r7, #16]
 801bc24:	6858      	ldr	r0, [r3, #4]
 801bc26:	2303      	movs	r3, #3
 801bc28:	9300      	str	r3, [sp, #0]
 801bc2a:	2303      	movs	r3, #3
 801bc2c:	2203      	movs	r2, #3
 801bc2e:	2103      	movs	r1, #3
 801bc30:	f7fc f999 	bl	8017f66 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801bc34:	693b      	ldr	r3, [r7, #16]
 801bc36:	685b      	ldr	r3, [r3, #4]
 801bc38:	4956      	ldr	r1, [pc, #344]	; (801bd94 <lv_page_create+0x2d0>)
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f7eb f89f 	bl	8006d7e <lv_obj_set_event_cb>
                                                              object by default for convenience */

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801bc40:	4955      	ldr	r1, [pc, #340]	; (801bd98 <lv_page_create+0x2d4>)
 801bc42:	6978      	ldr	r0, [r7, #20]
 801bc44:	f7eb f93a 	bl	8006ebc <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801bc48:	4954      	ldr	r1, [pc, #336]	; (801bd9c <lv_page_create+0x2d8>)
 801bc4a:	6978      	ldr	r0, [r7, #20]
 801bc4c:	f7eb f944 	bl	8006ed8 <lv_obj_set_design_cb>

        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801bc50:	693b      	ldr	r3, [r7, #16]
 801bc52:	7f1b      	ldrb	r3, [r3, #28]
 801bc54:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bc58:	b2db      	uxtb	r3, r3
 801bc5a:	4619      	mov	r1, r3
 801bc5c:	6978      	ldr	r0, [r7, #20]
 801bc5e:	f000 f8a3 	bl	801bda8 <lv_page_set_sb_mode>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801bc62:	f003 f997 	bl	801ef94 <lv_theme_get_current>
 801bc66:	60b8      	str	r0, [r7, #8]
        if(th) {
 801bc68:	68bb      	ldr	r3, [r7, #8]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d028      	beq.n	801bcc0 <lv_page_create+0x1fc>
            if(par == NULL) { /*Different styles if it is screen*/
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d10c      	bne.n	801bc8e <lv_page_create+0x1ca>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	685b      	ldr	r3, [r3, #4]
 801bc78:	461a      	mov	r2, r3
 801bc7a:	2100      	movs	r1, #0
 801bc7c:	6978      	ldr	r0, [r7, #20]
 801bc7e:	f000 f8f3 	bl	801be68 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801bc82:	4a47      	ldr	r2, [pc, #284]	; (801bda0 <lv_page_create+0x2dc>)
 801bc84:	2101      	movs	r1, #1
 801bc86:	6978      	ldr	r0, [r7, #20]
 801bc88:	f000 f8ee 	bl	801be68 <lv_page_set_style>
 801bc8c:	e00f      	b.n	801bcae <lv_page_create+0x1ea>
            } else {
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801bc94:	461a      	mov	r2, r3
 801bc96:	2100      	movs	r1, #0
 801bc98:	6978      	ldr	r0, [r7, #20]
 801bc9a:	f000 f8e5 	bl	801be68 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801bca4:	461a      	mov	r2, r3
 801bca6:	2101      	movs	r1, #1
 801bca8:	6978      	ldr	r0, [r7, #20]
 801bcaa:	f000 f8dd 	bl	801be68 <lv_page_set_style>
            }
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801bcb4:	461a      	mov	r2, r3
 801bcb6:	2102      	movs	r1, #2
 801bcb8:	6978      	ldr	r0, [r7, #20]
 801bcba:	f000 f8d5 	bl	801be68 <lv_page_set_style>
 801bcbe:	e054      	b.n	801bd6a <lv_page_create+0x2a6>
        } else {
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801bcc0:	4a38      	ldr	r2, [pc, #224]	; (801bda4 <lv_page_create+0x2e0>)
 801bcc2:	2100      	movs	r1, #0
 801bcc4:	6978      	ldr	r0, [r7, #20]
 801bcc6:	f000 f8cf 	bl	801be68 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 801bcca:	4a2e      	ldr	r2, [pc, #184]	; (801bd84 <lv_page_create+0x2c0>)
 801bccc:	2101      	movs	r1, #1
 801bcce:	6978      	ldr	r0, [r7, #20]
 801bcd0:	f000 f8ca 	bl	801be68 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801bcd4:	4a33      	ldr	r2, [pc, #204]	; (801bda4 <lv_page_create+0x2e0>)
 801bcd6:	2102      	movs	r1, #2
 801bcd8:	6978      	ldr	r0, [r7, #20]
 801bcda:	f000 f8c5 	bl	801be68 <lv_page_set_style>
 801bcde:	e044      	b.n	801bd6a <lv_page_create+0x2a6>
        }

    } else {
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801bce0:	6838      	ldr	r0, [r7, #0]
 801bce2:	f7eb fad4 	bl	800728e <lv_obj_get_ext_attr>
 801bce6:	60f8      	str	r0, [r7, #12]
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	685b      	ldr	r3, [r3, #4]
 801bcec:	4619      	mov	r1, r3
 801bcee:	6978      	ldr	r0, [r7, #20]
 801bcf0:	f7fc f868 	bl	8017dc4 <lv_cont_create>
 801bcf4:	4602      	mov	r2, r0
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801bcfa:	693b      	ldr	r3, [r7, #16]
 801bcfc:	685b      	ldr	r3, [r3, #4]
 801bcfe:	4923      	ldr	r1, [pc, #140]	; (801bd8c <lv_page_create+0x2c8>)
 801bd00:	4618      	mov	r0, r3
 801bd02:	f7eb f8db 	bl	8006ebc <lv_obj_set_signal_cb>

        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	7f1b      	ldrb	r3, [r3, #28]
 801bd0a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bd0e:	b2db      	uxtb	r3, r3
 801bd10:	4619      	mov	r1, r3
 801bd12:	6978      	ldr	r0, [r7, #20]
 801bd14:	f000 f848 	bl	801bda8 <lv_page_set_sb_mode>

        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 801bd18:	2100      	movs	r1, #0
 801bd1a:	6838      	ldr	r0, [r7, #0]
 801bd1c:	f000 f904 	bl	801bf28 <lv_page_get_style>
 801bd20:	4603      	mov	r3, r0
 801bd22:	461a      	mov	r2, r3
 801bd24:	2100      	movs	r1, #0
 801bd26:	6978      	ldr	r0, [r7, #20]
 801bd28:	f000 f89e 	bl	801be68 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 801bd2c:	2101      	movs	r1, #1
 801bd2e:	6838      	ldr	r0, [r7, #0]
 801bd30:	f000 f8fa 	bl	801bf28 <lv_page_get_style>
 801bd34:	4603      	mov	r3, r0
 801bd36:	461a      	mov	r2, r3
 801bd38:	2101      	movs	r1, #1
 801bd3a:	6978      	ldr	r0, [r7, #20]
 801bd3c:	f000 f894 	bl	801be68 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 801bd40:	2102      	movs	r1, #2
 801bd42:	6838      	ldr	r0, [r7, #0]
 801bd44:	f000 f8f0 	bl	801bf28 <lv_page_get_style>
 801bd48:	4603      	mov	r3, r0
 801bd4a:	461a      	mov	r2, r3
 801bd4c:	2102      	movs	r1, #2
 801bd4e:	6978      	ldr	r0, [r7, #20]
 801bd50:	f000 f88a 	bl	801be68 <lv_page_set_style>

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801bd54:	4910      	ldr	r1, [pc, #64]	; (801bd98 <lv_page_create+0x2d4>)
 801bd56:	6978      	ldr	r0, [r7, #20]
 801bd58:	f7eb f8b0 	bl	8006ebc <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801bd5c:	490f      	ldr	r1, [pc, #60]	; (801bd9c <lv_page_create+0x2d8>)
 801bd5e:	6978      	ldr	r0, [r7, #20]
 801bd60:	f7eb f8ba 	bl	8006ed8 <lv_obj_set_design_cb>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_page);
 801bd64:	6978      	ldr	r0, [r7, #20]
 801bd66:	f7ea ff74 	bl	8006c52 <lv_obj_refresh_style>
    }

    lv_page_sb_refresh(new_page);
 801bd6a:	6978      	ldr	r0, [r7, #20]
 801bd6c:	f001 fa60 	bl	801d230 <lv_page_sb_refresh>

    LV_LOG_INFO("page created");

    return new_page;
 801bd70:	697b      	ldr	r3, [r7, #20]
}
 801bd72:	4618      	mov	r0, r3
 801bd74:	3718      	adds	r7, #24
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}
 801bd7a:	bf00      	nop
 801bd7c:	20002ae4 	.word	0x20002ae4
 801bd80:	20002ae0 	.word	0x20002ae0
 801bd84:	20006b78 	.word	0x20006b78
 801bd88:	20006d58 	.word	0x20006d58
 801bd8c:	0801caa1 	.word	0x0801caa1
 801bd90:	0801c5fd 	.word	0x0801c5fd
 801bd94:	0801d1d5 	.word	0x0801d1d5
 801bd98:	0801c6d5 	.word	0x0801c6d5
 801bd9c:	0801c111 	.word	0x0801c111
 801bda0:	20006ac4 	.word	0x20006ac4
 801bda4:	20006a88 	.word	0x20006a88

0801bda8 <lv_page_set_sb_mode>:
 * Set the scroll bar mode on a page
 * @param page pointer to a page object
 * @param sb_mode the new mode from 'lv_page_sb.mode_t' enum
 */
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode)
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b084      	sub	sp, #16
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
 801bdb0:	460b      	mov	r3, r1
 801bdb2:	70fb      	strb	r3, [r7, #3]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801bdb4:	6878      	ldr	r0, [r7, #4]
 801bdb6:	f7eb fa6a 	bl	800728e <lv_obj_get_ext_attr>
 801bdba:	60f8      	str	r0, [r7, #12]
    if(ext->sb.mode == sb_mode) return;
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	7f1b      	ldrb	r3, [r3, #28]
 801bdc0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bdc4:	b2db      	uxtb	r3, r3
 801bdc6:	461a      	mov	r2, r3
 801bdc8:	78fb      	ldrb	r3, [r7, #3]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d048      	beq.n	801be60 <lv_page_set_sb_mode+0xb8>

    if(sb_mode == LV_SB_MODE_HIDE)
 801bdce:	78fb      	ldrb	r3, [r7, #3]
 801bdd0:	2b04      	cmp	r3, #4
 801bdd2:	d10d      	bne.n	801bdf0 <lv_page_set_sb_mode+0x48>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	7f1b      	ldrb	r3, [r3, #28]
 801bdd8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	f043 0304 	orr.w	r3, r3, #4
 801bde2:	b2d9      	uxtb	r1, r3
 801bde4:	68fa      	ldr	r2, [r7, #12]
 801bde6:	7f13      	ldrb	r3, [r2, #28]
 801bde8:	f361 0384 	bfi	r3, r1, #2, #3
 801bdec:	7713      	strb	r3, [r2, #28]
 801bdee:	e026      	b.n	801be3e <lv_page_set_sb_mode+0x96>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 801bdf0:	78fb      	ldrb	r3, [r7, #3]
 801bdf2:	2b05      	cmp	r3, #5
 801bdf4:	d10d      	bne.n	801be12 <lv_page_set_sb_mode+0x6a>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	7f1b      	ldrb	r3, [r3, #28]
 801bdfa:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bdfe:	b2db      	uxtb	r3, r3
 801be00:	f003 0303 	and.w	r3, r3, #3
 801be04:	b2d9      	uxtb	r1, r3
 801be06:	68fa      	ldr	r2, [r7, #12]
 801be08:	7f13      	ldrb	r3, [r2, #28]
 801be0a:	f361 0384 	bfi	r3, r1, #2, #3
 801be0e:	7713      	strb	r3, [r2, #28]
 801be10:	e015      	b.n	801be3e <lv_page_set_sb_mode+0x96>
    else {
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	7f1b      	ldrb	r3, [r3, #28]
 801be16:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801be1a:	b2db      	uxtb	r3, r3
 801be1c:	f003 0304 	and.w	r3, r3, #4
 801be20:	2b00      	cmp	r3, #0
 801be22:	d003      	beq.n	801be2c <lv_page_set_sb_mode+0x84>
 801be24:	78fb      	ldrb	r3, [r7, #3]
 801be26:	f043 0304 	orr.w	r3, r3, #4
 801be2a:	70fb      	strb	r3, [r7, #3]
        ext->sb.mode = sb_mode;
 801be2c:	78fb      	ldrb	r3, [r7, #3]
 801be2e:	f003 0307 	and.w	r3, r3, #7
 801be32:	b2d9      	uxtb	r1, r3
 801be34:	68fa      	ldr	r2, [r7, #12]
 801be36:	7f13      	ldrb	r3, [r2, #28]
 801be38:	f361 0384 	bfi	r3, r1, #2, #3
 801be3c:	7713      	strb	r3, [r2, #28]
    }

    ext->sb.hor_draw = 0;
 801be3e:	68fa      	ldr	r2, [r7, #12]
 801be40:	7f13      	ldrb	r3, [r2, #28]
 801be42:	f36f 0300 	bfc	r3, #0, #1
 801be46:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801be48:	68fa      	ldr	r2, [r7, #12]
 801be4a:	7f13      	ldrb	r3, [r2, #28]
 801be4c:	f36f 0341 	bfc	r3, #1, #1
 801be50:	7713      	strb	r3, [r2, #28]

    lv_page_sb_refresh(page);
 801be52:	6878      	ldr	r0, [r7, #4]
 801be54:	f001 f9ec 	bl	801d230 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801be58:	6878      	ldr	r0, [r7, #4]
 801be5a:	f7e9 ffec 	bl	8005e36 <lv_obj_invalidate>
 801be5e:	e000      	b.n	801be62 <lv_page_set_sb_mode+0xba>
    if(ext->sb.mode == sb_mode) return;
 801be60:	bf00      	nop
}
 801be62:	3710      	adds	r7, #16
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}

0801be68 <lv_page_set_style>:
 * @param page pointer to a page object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b086      	sub	sp, #24
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	60f8      	str	r0, [r7, #12]
 801be70:	460b      	mov	r3, r1
 801be72:	607a      	str	r2, [r7, #4]
 801be74:	72fb      	strb	r3, [r7, #11]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801be76:	68f8      	ldr	r0, [r7, #12]
 801be78:	f7eb fa09 	bl	800728e <lv_obj_get_ext_attr>
 801be7c:	6178      	str	r0, [r7, #20]

    switch(type) {
 801be7e:	7afb      	ldrb	r3, [r7, #11]
 801be80:	2b03      	cmp	r3, #3
 801be82:	d83e      	bhi.n	801bf02 <lv_page_set_style+0x9a>
 801be84:	a201      	add	r2, pc, #4	; (adr r2, 801be8c <lv_page_set_style+0x24>)
 801be86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be8a:	bf00      	nop
 801be8c:	0801be9d 	.word	0x0801be9d
 801be90:	0801bea7 	.word	0x0801bea7
 801be94:	0801beb5 	.word	0x0801beb5
 801be98:	0801befb 	.word	0x0801befb
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 801be9c:	6879      	ldr	r1, [r7, #4]
 801be9e:	68f8      	ldr	r0, [r7, #12]
 801bea0:	f7ea fec5 	bl	8006c2e <lv_obj_set_style>
 801bea4:	e02d      	b.n	801bf02 <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 801bea6:	697b      	ldr	r3, [r7, #20]
 801bea8:	685b      	ldr	r3, [r3, #4]
 801beaa:	6879      	ldr	r1, [r7, #4]
 801beac:	4618      	mov	r0, r3
 801beae:	f7ea febe 	bl	8006c2e <lv_obj_set_style>
 801beb2:	e026      	b.n	801bf02 <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SB:
            ext->sb.style = style;
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	687a      	ldr	r2, [r7, #4]
 801beb8:	609a      	str	r2, [r3, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801beba:	697b      	ldr	r3, [r7, #20]
 801bebc:	f103 020c 	add.w	r2, r3, #12
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	689b      	ldr	r3, [r3, #8]
 801bec4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bec8:	4619      	mov	r1, r3
 801beca:	4610      	mov	r0, r2
 801becc:	f7f6 ff05 	bl	8012cda <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801bed0:	697b      	ldr	r3, [r7, #20]
 801bed2:	f103 0214 	add.w	r2, r3, #20
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	689b      	ldr	r3, [r3, #8]
 801beda:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bede:	4619      	mov	r1, r3
 801bee0:	4610      	mov	r0, r2
 801bee2:	f7f6 fee2 	bl	8012caa <lv_area_set_width>
            lv_page_sb_refresh(page);
 801bee6:	68f8      	ldr	r0, [r7, #12]
 801bee8:	f001 f9a2 	bl	801d230 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 801beec:	68f8      	ldr	r0, [r7, #12]
 801beee:	f7eb f817 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 801bef2:	68f8      	ldr	r0, [r7, #12]
 801bef4:	f7e9 ff9f 	bl	8005e36 <lv_obj_invalidate>
            break;
 801bef8:	e003      	b.n	801bf02 <lv_page_set_style+0x9a>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 801befa:	697b      	ldr	r3, [r7, #20]
 801befc:	687a      	ldr	r2, [r7, #4]
 801befe:	625a      	str	r2, [r3, #36]	; 0x24
 801bf00:	bf00      	nop
#endif
    }
}
 801bf02:	bf00      	nop
 801bf04:	3718      	adds	r7, #24
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}
 801bf0a:	bf00      	nop

0801bf0c <lv_page_get_scrl>:
 * Get the scrollable object of a page
 * @param page pointer to a page object
 * @return pointer to a container which is the scrollable part of the page
 */
lv_obj_t * lv_page_get_scrl(const lv_obj_t * page)
{
 801bf0c:	b580      	push	{r7, lr}
 801bf0e:	b084      	sub	sp, #16
 801bf10:	af00      	add	r7, sp, #0
 801bf12:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801bf14:	6878      	ldr	r0, [r7, #4]
 801bf16:	f7eb f9ba 	bl	800728e <lv_obj_get_ext_attr>
 801bf1a:	60f8      	str	r0, [r7, #12]

    return ext->scrl;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	685b      	ldr	r3, [r3, #4]
}
 801bf20:	4618      	mov	r0, r3
 801bf22:	3710      	adds	r7, #16
 801bf24:	46bd      	mov	sp, r7
 801bf26:	bd80      	pop	{r7, pc}

0801bf28 <lv_page_get_style>:
 * @param page pointer to page object
 * @param type which style should be get
 * @return style pointer to a style
 *  */
const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b084      	sub	sp, #16
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
 801bf30:	460b      	mov	r3, r1
 801bf32:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801bf34:	2300      	movs	r3, #0
 801bf36:	60fb      	str	r3, [r7, #12]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801bf38:	6878      	ldr	r0, [r7, #4]
 801bf3a:	f7eb f9a8 	bl	800728e <lv_obj_get_ext_attr>
 801bf3e:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801bf40:	78fb      	ldrb	r3, [r7, #3]
 801bf42:	2b03      	cmp	r3, #3
 801bf44:	d81e      	bhi.n	801bf84 <lv_page_get_style+0x5c>
 801bf46:	a201      	add	r2, pc, #4	; (adr r2, 801bf4c <lv_page_get_style+0x24>)
 801bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf4c:	0801bf5d 	.word	0x0801bf5d
 801bf50:	0801bf67 	.word	0x0801bf67
 801bf54:	0801bf75 	.word	0x0801bf75
 801bf58:	0801bf7d 	.word	0x0801bf7d
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 801bf5c:	6878      	ldr	r0, [r7, #4]
 801bf5e:	f7eb f8db 	bl	8007118 <lv_obj_get_style>
 801bf62:	60f8      	str	r0, [r7, #12]
 801bf64:	e011      	b.n	801bf8a <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	685b      	ldr	r3, [r3, #4]
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f7eb f8d4 	bl	8007118 <lv_obj_get_style>
 801bf70:	60f8      	str	r0, [r7, #12]
 801bf72:	e00a      	b.n	801bf8a <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 801bf74:	68bb      	ldr	r3, [r7, #8]
 801bf76:	689b      	ldr	r3, [r3, #8]
 801bf78:	60fb      	str	r3, [r7, #12]
 801bf7a:	e006      	b.n	801bf8a <lv_page_get_style+0x62>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf80:	60fb      	str	r3, [r7, #12]
 801bf82:	e002      	b.n	801bf8a <lv_page_get_style+0x62>
#endif
        default: style = NULL; break;
 801bf84:	2300      	movs	r3, #0
 801bf86:	60fb      	str	r3, [r7, #12]
 801bf88:	bf00      	nop
    }

    return style;
 801bf8a:	68fb      	ldr	r3, [r7, #12]
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3710      	adds	r7, #16
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}

0801bf94 <lv_page_scroll_hor>:
 * Scroll the page horizontally
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll right; > 0 scroll left)
 */
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b08e      	sub	sp, #56	; 0x38
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
 801bf9c:	460b      	mov	r3, r1
 801bf9e:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7ff ffb3 	bl	801bf0c <lv_page_get_scrl>
 801bfa6:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801bfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfaa:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_x(scrl);
 801bfac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bfae:	f7eb f851 	bl	8007054 <lv_obj_get_x>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801bfb6:	69fa      	ldr	r2, [r7, #28]
 801bfb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bfbc:	4413      	add	r3, r2
 801bfbe:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801bfc0:	4b11      	ldr	r3, [pc, #68]	; (801c008 <lv_page_scroll_hor+0x74>)
 801bfc2:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801bfc4:	4b11      	ldr	r3, [pc, #68]	; (801c00c <lv_page_scroll_hor+0x78>)
 801bfc6:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801bfc8:	2300      	movs	r3, #0
 801bfca:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801bfcc:	2300      	movs	r3, #0
 801bfce:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801bfd0:	23c8      	movs	r3, #200	; 0xc8
 801bfd2:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801bfd4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bfd8:	f36f 0300 	bfc	r3, #0, #1
 801bfdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801bfe4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bfe8:	f36f 0341 	bfc	r3, #1, #1
 801bfec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801bff0:	2300      	movs	r3, #0
 801bff2:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801bff4:	f107 030c 	add.w	r3, r7, #12
 801bff8:	4618      	mov	r0, r3
 801bffa:	f7f6 fc13 	bl	8012824 <lv_anim_create>
#else
    lv_obj_set_x(scrl, lv_obj_get_x(scrl) + dist);
#endif
}
 801bffe:	bf00      	nop
 801c000:	3738      	adds	r7, #56	; 0x38
 801c002:	46bd      	mov	sp, r7
 801c004:	bd80      	pop	{r7, pc}
 801c006:	bf00      	nop
 801c008:	0800614b 	.word	0x0800614b
 801c00c:	08012975 	.word	0x08012975

0801c010 <lv_page_scroll_ver>:
 * Scroll the page vertically
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll down; > 0 scroll up)
 */
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	b08e      	sub	sp, #56	; 0x38
 801c014:	af00      	add	r7, sp, #0
 801c016:	6078      	str	r0, [r7, #4]
 801c018:	460b      	mov	r3, r1
 801c01a:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f7ff ff75 	bl	801bf0c <lv_page_get_scrl>
 801c022:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801c024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c026:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_y(scrl);
 801c028:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c02a:	f7eb f82c 	bl	8007086 <lv_obj_get_y>
 801c02e:	4603      	mov	r3, r0
 801c030:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801c032:	69fa      	ldr	r2, [r7, #28]
 801c034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c038:	4413      	add	r3, r2
 801c03a:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801c03c:	4b11      	ldr	r3, [pc, #68]	; (801c084 <lv_page_scroll_ver+0x74>)
 801c03e:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801c040:	4b11      	ldr	r3, [pc, #68]	; (801c088 <lv_page_scroll_ver+0x78>)
 801c042:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801c044:	2300      	movs	r3, #0
 801c046:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801c048:	2300      	movs	r3, #0
 801c04a:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801c04c:	23c8      	movs	r3, #200	; 0xc8
 801c04e:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801c050:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c054:	f36f 0300 	bfc	r3, #0, #1
 801c058:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801c05c:	2300      	movs	r3, #0
 801c05e:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801c060:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c064:	f36f 0341 	bfc	r3, #1, #1
 801c068:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801c06c:	2300      	movs	r3, #0
 801c06e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801c070:	f107 030c 	add.w	r3, r7, #12
 801c074:	4618      	mov	r0, r3
 801c076:	f7f6 fbd5 	bl	8012824 <lv_anim_create>
#else
    lv_obj_set_y(scrl, lv_obj_get_y(scrl) + dist);
#endif
}
 801c07a:	bf00      	nop
 801c07c:	3738      	adds	r7, #56	; 0x38
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	08006175 	.word	0x08006175
 801c088:	08012975 	.word	0x08012975

0801c08c <lv_page_start_edge_flash>:
 * Not intended to use directly by the user but by other object types internally.
 * Start an edge flash animation. Exactly one `ext->edge_flash.xxx_ip` should be set
 * @param page
 */
void lv_page_start_edge_flash(lv_obj_t * page)
{
 801c08c:	b580      	push	{r7, lr}
 801c08e:	b08e      	sub	sp, #56	; 0x38
 801c090:	af00      	add	r7, sp, #0
 801c092:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c094:	6878      	ldr	r0, [r7, #4]
 801c096:	f7eb f8fa 	bl	800728e <lv_obj_get_ext_attr>
 801c09a:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->edge_flash.enabled) {
 801c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c09e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c0a2:	f003 0301 	and.w	r3, r3, #1
 801c0a6:	b2db      	uxtb	r3, r3
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d026      	beq.n	801c0fa <lv_page_start_edge_flash+0x6e>
        lv_anim_t a;
        a.var            = page;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	60fb      	str	r3, [r7, #12]
        a.start          = 0;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	61fb      	str	r3, [r7, #28]
        a.end            = LV_PAGE_END_FLASH_SIZE;
 801c0b4:	2319      	movs	r3, #25
 801c0b6:	623b      	str	r3, [r7, #32]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 801c0b8:	4b12      	ldr	r3, [pc, #72]	; (801c104 <lv_page_start_edge_flash+0x78>)
 801c0ba:	613b      	str	r3, [r7, #16]
        a.path_cb        = lv_anim_path_linear;
 801c0bc:	4b12      	ldr	r3, [pc, #72]	; (801c108 <lv_page_start_edge_flash+0x7c>)
 801c0be:	617b      	str	r3, [r7, #20]
        a.ready_cb       = edge_flash_anim_end;
 801c0c0:	4b12      	ldr	r3, [pc, #72]	; (801c10c <lv_page_start_edge_flash+0x80>)
 801c0c2:	61bb      	str	r3, [r7, #24]
        a.act_time       = 0;
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        a.time           = LV_PAGE_END_ANIM_TIME;
 801c0c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801c0cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.playback       = 1;
 801c0ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c0d2:	f043 0301 	orr.w	r3, r3, #1
 801c0d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801c0da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801c0de:	853b      	strh	r3, [r7, #40]	; 0x28
        a.repeat         = 0;
 801c0e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c0e4:	f36f 0341 	bfc	r3, #1, #1
 801c0e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.repeat_pause   = 0;
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_anim_create(&a);
 801c0f0:	f107 030c 	add.w	r3, r7, #12
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7f6 fb95 	bl	8012824 <lv_anim_create>
    }
#else
    (void)page; /*Unused*/
#endif
}
 801c0fa:	bf00      	nop
 801c0fc:	3738      	adds	r7, #56	; 0x38
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bd80      	pop	{r7, pc}
 801c102:	bf00      	nop
 801c104:	0801d82f 	.word	0x0801d82f
 801c108:	08012975 	.word	0x08012975
 801c10c:	0801d857 	.word	0x0801d857

0801c110 <lv_page_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_page_design(lv_obj_t * page, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c110:	b590      	push	{r4, r7, lr}
 801c112:	b0ab      	sub	sp, #172	; 0xac
 801c114:	af00      	add	r7, sp, #0
 801c116:	60f8      	str	r0, [r7, #12]
 801c118:	60b9      	str	r1, [r7, #8]
 801c11a:	4613      	mov	r3, r2
 801c11c:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801c11e:	79fb      	ldrb	r3, [r7, #7]
 801c120:	2b02      	cmp	r3, #2
 801c122:	d107      	bne.n	801c134 <lv_page_design+0x24>
        return ancestor_design(page, mask, mode);
 801c124:	4ba3      	ldr	r3, [pc, #652]	; (801c3b4 <lv_page_design+0x2a4>)
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	79fa      	ldrb	r2, [r7, #7]
 801c12a:	68b9      	ldr	r1, [r7, #8]
 801c12c:	68f8      	ldr	r0, [r7, #12]
 801c12e:	4798      	blx	r3
 801c130:	4603      	mov	r3, r0
 801c132:	e25c      	b.n	801c5ee <lv_page_design+0x4de>
    }
    /*Cache page bg style for temporary modification*/
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801c134:	2100      	movs	r1, #0
 801c136:	68f8      	ldr	r0, [r7, #12]
 801c138:	f7ff fef6 	bl	801bf28 <lv_page_get_style>
 801c13c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    lv_style_t style_tmp;
    lv_style_copy(&style_tmp, style);
 801c140:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c144:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c148:	4618      	mov	r0, r3
 801c14a:	f7ec fb0f 	bl	800876c <lv_style_copy>

    if(mode == LV_DESIGN_DRAW_MAIN) {
 801c14e:	79fb      	ldrb	r3, [r7, #7]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d110      	bne.n	801c176 <lv_page_design+0x66>
        /*Draw without border*/
        style_tmp.body.border.width = 0;
 801c154:	2300      	movs	r3, #0
 801c156:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	f103 0410 	add.w	r4, r3, #16
 801c160:	68f8      	ldr	r0, [r7, #12]
 801c162:	f7eb f846 	bl	80071f2 <lv_obj_get_opa_scale>
 801c166:	4603      	mov	r3, r0
 801c168:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801c16c:	68b9      	ldr	r1, [r7, #8]
 801c16e:	4620      	mov	r0, r4
 801c170:	f7f0 fd41 	bl	800cbf6 <lv_draw_rect>
 801c174:	e23a      	b.n	801c5ec <lv_page_design+0x4dc>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 801c176:	79fb      	ldrb	r3, [r7, #7]
 801c178:	2b01      	cmp	r3, #1
 801c17a:	f040 8237 	bne.w	801c5ec <lv_page_design+0x4dc>
        /*Draw only a border*/
        style_tmp.body.shadow.width = 0;
 801c17e:	2300      	movs	r3, #0
 801c180:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        style_tmp.body.opa          = LV_OPA_TRANSP;
 801c184:	2300      	movs	r3, #0
 801c186:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	f103 0410 	add.w	r4, r3, #16
 801c190:	68f8      	ldr	r0, [r7, #12]
 801c192:	f7eb f82e 	bl	80071f2 <lv_obj_get_opa_scale>
 801c196:	4603      	mov	r3, r0
 801c198:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801c19c:	68b9      	ldr	r1, [r7, #8]
 801c19e:	4620      	mov	r0, r4
 801c1a0:	f7f0 fd29 	bl	800cbf6 <lv_draw_rect>

        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c1a4:	68f8      	ldr	r0, [r7, #12]
 801c1a6:	f7eb f872 	bl	800728e <lv_obj_get_ext_attr>
 801c1aa:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

        /*Draw the scrollbars*/
        lv_area_t sb_area;
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801c1ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1b2:	7f1b      	ldrb	r3, [r3, #28]
 801c1b4:	f003 0301 	and.w	r3, r3, #1
 801c1b8:	b2db      	uxtb	r3, r3
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d050      	beq.n	801c260 <lv_page_design+0x150>
 801c1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1c2:	7f1b      	ldrb	r3, [r3, #28]
 801c1c4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801c1c8:	b2db      	uxtb	r3, r3
 801c1ca:	f003 0304 	and.w	r3, r3, #4
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d146      	bne.n	801c260 <lv_page_design+0x150>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 801c1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1d6:	f103 020c 	add.w	r2, r3, #12
 801c1da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c1de:	4611      	mov	r1, r2
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7ff fc03 	bl	801b9ec <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801c1e6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c1ea:	b29a      	uxth	r2, r3
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c1f2:	b29b      	uxth	r3, r3
 801c1f4:	4413      	add	r3, r2
 801c1f6:	b29b      	uxth	r3, r3
 801c1f8:	b21b      	sxth	r3, r3
 801c1fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801c1fe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c202:	b29a      	uxth	r2, r3
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c20a:	b29b      	uxth	r3, r3
 801c20c:	4413      	add	r3, r2
 801c20e:	b29b      	uxth	r3, r3
 801c210:	b21b      	sxth	r3, r3
 801c212:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801c216:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c21a:	b29a      	uxth	r2, r3
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c222:	b29b      	uxth	r3, r3
 801c224:	4413      	add	r3, r2
 801c226:	b29b      	uxth	r3, r3
 801c228:	b21b      	sxth	r3, r3
 801c22a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801c22e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c232:	b29a      	uxth	r2, r3
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c23a:	b29b      	uxth	r3, r3
 801c23c:	4413      	add	r3, r2
 801c23e:	b29b      	uxth	r3, r3
 801c240:	b21b      	sxth	r3, r3
 801c242:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801c246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c24a:	689c      	ldr	r4, [r3, #8]
 801c24c:	68f8      	ldr	r0, [r7, #12]
 801c24e:	f7ea ffd0 	bl	80071f2 <lv_obj_get_opa_scale>
 801c252:	4603      	mov	r3, r0
 801c254:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c258:	4622      	mov	r2, r4
 801c25a:	68b9      	ldr	r1, [r7, #8]
 801c25c:	f7f0 fccb 	bl	800cbf6 <lv_draw_rect>
        }

        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801c260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c264:	7f1b      	ldrb	r3, [r3, #28]
 801c266:	f003 0302 	and.w	r3, r3, #2
 801c26a:	b2db      	uxtb	r3, r3
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d050      	beq.n	801c312 <lv_page_design+0x202>
 801c270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c274:	7f1b      	ldrb	r3, [r3, #28]
 801c276:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801c27a:	b2db      	uxtb	r3, r3
 801c27c:	f003 0304 	and.w	r3, r3, #4
 801c280:	2b00      	cmp	r3, #0
 801c282:	d146      	bne.n	801c312 <lv_page_design+0x202>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 801c284:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c288:	f103 0214 	add.w	r2, r3, #20
 801c28c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c290:	4611      	mov	r1, r2
 801c292:	4618      	mov	r0, r3
 801c294:	f7ff fbaa 	bl	801b9ec <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801c298:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c29c:	b29a      	uxth	r2, r3
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c2a4:	b29b      	uxth	r3, r3
 801c2a6:	4413      	add	r3, r2
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	b21b      	sxth	r3, r3
 801c2ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801c2b0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c2b4:	b29a      	uxth	r2, r3
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c2bc:	b29b      	uxth	r3, r3
 801c2be:	4413      	add	r3, r2
 801c2c0:	b29b      	uxth	r3, r3
 801c2c2:	b21b      	sxth	r3, r3
 801c2c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801c2c8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c2cc:	b29a      	uxth	r2, r3
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	4413      	add	r3, r2
 801c2d8:	b29b      	uxth	r3, r3
 801c2da:	b21b      	sxth	r3, r3
 801c2dc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801c2e0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c2e4:	b29a      	uxth	r2, r3
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c2ec:	b29b      	uxth	r3, r3
 801c2ee:	4413      	add	r3, r2
 801c2f0:	b29b      	uxth	r3, r3
 801c2f2:	b21b      	sxth	r3, r3
 801c2f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801c2f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c2fc:	689c      	ldr	r4, [r3, #8]
 801c2fe:	68f8      	ldr	r0, [r7, #12]
 801c300:	f7ea ff77 	bl	80071f2 <lv_obj_get_opa_scale>
 801c304:	4603      	mov	r3, r0
 801c306:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c30a:	4622      	mov	r2, r4
 801c30c:	68b9      	ldr	r1, [r7, #8]
 801c30e:	f7f0 fc72 	bl	800cbf6 <lv_draw_rect>
        }

#if LV_USE_ANIMATION
        {
            lv_coord_t page_w = lv_obj_get_width(page);
 801c312:	68f8      	ldr	r0, [r7, #12]
 801c314:	f7ea fed0 	bl	80070b8 <lv_obj_get_width>
 801c318:	4603      	mov	r3, r0
 801c31a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            lv_coord_t page_h = lv_obj_get_height(page);
 801c31e:	68f8      	ldr	r0, [r7, #12]
 801c320:	f7ea fed8 	bl	80070d4 <lv_obj_get_height>
 801c324:	4603      	mov	r3, r0
 801c326:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

            lv_area_t flash_area;

            if(ext->edge_flash.top_ip) {
 801c32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c32e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c332:	f003 0302 	and.w	r3, r3, #2
 801c336:	b2db      	uxtb	r3, r3
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d03d      	beq.n	801c3b8 <lv_page_design+0x2a8>
                flash_area.x1 = page->coords.x1 - page_w;
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c342:	b29a      	uxth	r2, r3
 801c344:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c348:	1ad3      	subs	r3, r2, r3
 801c34a:	b29b      	uxth	r3, r3
 801c34c:	b21b      	sxth	r3, r3
 801c34e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c358:	b29a      	uxth	r2, r3
 801c35a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c35e:	4413      	add	r3, r2
 801c360:	b29b      	uxth	r3, r3
 801c362:	b21b      	sxth	r3, r3
 801c364:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c36e:	b29a      	uxth	r2, r3
 801c370:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c374:	4619      	mov	r1, r3
 801c376:	009b      	lsls	r3, r3, #2
 801c378:	1acb      	subs	r3, r1, r3
 801c37a:	b29b      	uxth	r3, r3
 801c37c:	4413      	add	r3, r2
 801c37e:	b29a      	uxth	r2, r3
 801c380:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c384:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c388:	b29b      	uxth	r3, r3
 801c38a:	4413      	add	r3, r2
 801c38c:	b29b      	uxth	r3, r3
 801c38e:	b21b      	sxth	r3, r3
 801c390:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c39a:	b29a      	uxth	r2, r3
 801c39c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c3a4:	b29b      	uxth	r3, r3
 801c3a6:	4413      	add	r3, r2
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	b21b      	sxth	r3, r3
 801c3ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c3b0:	e0cd      	b.n	801c54e <lv_page_design+0x43e>
 801c3b2:	bf00      	nop
 801c3b4:	20002ae0 	.word	0x20002ae0
            } else if(ext->edge_flash.bottom_ip) {
 801c3b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c3c0:	f003 0304 	and.w	r3, r3, #4
 801c3c4:	b2db      	uxtb	r3, r3
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d03a      	beq.n	801c440 <lv_page_design+0x330>
                flash_area.x1 = page->coords.x1 - page_w;
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c3d0:	b29a      	uxth	r2, r3
 801c3d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c3d6:	1ad3      	subs	r3, r2, r3
 801c3d8:	b29b      	uxth	r3, r3
 801c3da:	b21b      	sxth	r3, r3
 801c3dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c3e6:	b29a      	uxth	r2, r3
 801c3e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c3ec:	4413      	add	r3, r2
 801c3ee:	b29b      	uxth	r3, r3
 801c3f0:	b21b      	sxth	r3, r3
 801c3f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c3fc:	b29a      	uxth	r2, r3
 801c3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c402:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c406:	b29b      	uxth	r3, r3
 801c408:	1ad3      	subs	r3, r2, r3
 801c40a:	b29b      	uxth	r3, r3
 801c40c:	b21b      	sxth	r3, r3
 801c40e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c418:	b29a      	uxth	r2, r3
 801c41a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c41e:	4619      	mov	r1, r3
 801c420:	0049      	lsls	r1, r1, #1
 801c422:	440b      	add	r3, r1
 801c424:	b29b      	uxth	r3, r3
 801c426:	4413      	add	r3, r2
 801c428:	b29a      	uxth	r2, r3
 801c42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c42e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c432:	b29b      	uxth	r3, r3
 801c434:	1ad3      	subs	r3, r2, r3
 801c436:	b29b      	uxth	r3, r3
 801c438:	b21b      	sxth	r3, r3
 801c43a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c43e:	e086      	b.n	801c54e <lv_page_design+0x43e>
            } else if(ext->edge_flash.right_ip) {
 801c440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c448:	f003 0308 	and.w	r3, r3, #8
 801c44c:	b2db      	uxtb	r3, r3
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d03a      	beq.n	801c4c8 <lv_page_design+0x3b8>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c458:	b29a      	uxth	r2, r3
 801c45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c45e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c462:	b29b      	uxth	r3, r3
 801c464:	1ad3      	subs	r3, r2, r3
 801c466:	b29b      	uxth	r3, r3
 801c468:	b21b      	sxth	r3, r3
 801c46a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c474:	b29a      	uxth	r2, r3
 801c476:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c47a:	4619      	mov	r1, r3
 801c47c:	0049      	lsls	r1, r1, #1
 801c47e:	440b      	add	r3, r1
 801c480:	b29b      	uxth	r3, r3
 801c482:	4413      	add	r3, r2
 801c484:	b29a      	uxth	r2, r3
 801c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c48a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c48e:	b29b      	uxth	r3, r3
 801c490:	1ad3      	subs	r3, r2, r3
 801c492:	b29b      	uxth	r3, r3
 801c494:	b21b      	sxth	r3, r3
 801c496:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c4a0:	b29a      	uxth	r2, r3
 801c4a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c4a6:	1ad3      	subs	r3, r2, r3
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	b21b      	sxth	r3, r3
 801c4ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c4b6:	b29a      	uxth	r2, r3
 801c4b8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c4bc:	4413      	add	r3, r2
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	b21b      	sxth	r3, r3
 801c4c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c4c6:	e042      	b.n	801c54e <lv_page_design+0x43e>
            } else if(ext->edge_flash.left_ip) {
 801c4c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c4d0:	f003 0310 	and.w	r3, r3, #16
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d039      	beq.n	801c54e <lv_page_design+0x43e>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c4e0:	b29a      	uxth	r2, r3
 801c4e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c4e6:	4619      	mov	r1, r3
 801c4e8:	009b      	lsls	r3, r3, #2
 801c4ea:	1acb      	subs	r3, r1, r3
 801c4ec:	b29b      	uxth	r3, r3
 801c4ee:	4413      	add	r3, r2
 801c4f0:	b29a      	uxth	r2, r3
 801c4f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4f6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c4fa:	b29b      	uxth	r3, r3
 801c4fc:	4413      	add	r3, r2
 801c4fe:	b29b      	uxth	r3, r3
 801c500:	b21b      	sxth	r3, r3
 801c502:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c50c:	b29a      	uxth	r2, r3
 801c50e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c512:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c516:	b29b      	uxth	r3, r3
 801c518:	4413      	add	r3, r2
 801c51a:	b29b      	uxth	r3, r3
 801c51c:	b21b      	sxth	r3, r3
 801c51e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c528:	b29a      	uxth	r2, r3
 801c52a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c52e:	1ad3      	subs	r3, r2, r3
 801c530:	b29b      	uxth	r3, r3
 801c532:	b21b      	sxth	r3, r3
 801c534:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c53e:	b29a      	uxth	r2, r3
 801c540:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c544:	4413      	add	r3, r2
 801c546:	b29b      	uxth	r3, r3
 801c548:	b21b      	sxth	r3, r3
 801c54a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 801c54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c556:	f003 0310 	and.w	r3, r3, #16
 801c55a:	b2db      	uxtb	r3, r3
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d11a      	bne.n	801c596 <lv_page_design+0x486>
 801c560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c568:	f003 0308 	and.w	r3, r3, #8
 801c56c:	b2db      	uxtb	r3, r3
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d111      	bne.n	801c596 <lv_page_design+0x486>
 801c572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c57a:	f003 0302 	and.w	r3, r3, #2
 801c57e:	b2db      	uxtb	r3, r3
 801c580:	2b00      	cmp	r3, #0
 801c582:	d108      	bne.n	801c596 <lv_page_design+0x486>
 801c584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c58c:	f003 0304 	and.w	r3, r3, #4
 801c590:	b2db      	uxtb	r3, r3
 801c592:	2b00      	cmp	r3, #0
 801c594:	d02a      	beq.n	801c5ec <lv_page_design+0x4dc>
               ext->edge_flash.bottom_ip) {
                lv_style_t flash_style;
                lv_style_copy(&flash_style, ext->edge_flash.style);
 801c596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c59a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c59c:	f107 0310 	add.w	r3, r7, #16
 801c5a0:	4611      	mov	r1, r2
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f7ec f8e2 	bl	800876c <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 801c5a8:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c5ac:	82fb      	strh	r3, [r7, #22]
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801c5ae:	7e3b      	ldrb	r3, [r7, #24]
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c5b6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c5ba:	fb03 f302 	mul.w	r3, r3, r2
 801c5be:	4a0e      	ldr	r2, [pc, #56]	; (801c5f8 <lv_page_design+0x4e8>)
 801c5c0:	fb82 1203 	smull	r1, r2, r2, r3
 801c5c4:	10d2      	asrs	r2, r2, #3
 801c5c6:	17db      	asrs	r3, r3, #31
 801c5c8:	1ad3      	subs	r3, r2, r3
 801c5ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                flash_style.body.opa    = opa;
 801c5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c5d2:	b2db      	uxtb	r3, r3
 801c5d4:	763b      	strb	r3, [r7, #24]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801c5d6:	68f8      	ldr	r0, [r7, #12]
 801c5d8:	f7ea fe0b 	bl	80071f2 <lv_obj_get_opa_scale>
 801c5dc:	4603      	mov	r3, r0
 801c5de:	f107 0210 	add.w	r2, r7, #16
 801c5e2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801c5e6:	68b9      	ldr	r1, [r7, #8]
 801c5e8:	f7f0 fb05 	bl	800cbf6 <lv_draw_rect>
            }
        }
#endif
    }

    return true;
 801c5ec:	2301      	movs	r3, #1
}
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	37ac      	adds	r7, #172	; 0xac
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd90      	pop	{r4, r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	51eb851f 	.word	0x51eb851f

0801c5fc <lv_scrl_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b08a      	sub	sp, #40	; 0x28
 801c600:	af00      	add	r7, sp, #0
 801c602:	60f8      	str	r0, [r7, #12]
 801c604:	60b9      	str	r1, [r7, #8]
 801c606:	4613      	mov	r3, r2
 801c608:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801c60a:	79fb      	ldrb	r3, [r7, #7]
 801c60c:	2b02      	cmp	r3, #2
 801c60e:	d107      	bne.n	801c620 <lv_scrl_design+0x24>
        return ancestor_design(scrl, mask, mode);
 801c610:	4b2f      	ldr	r3, [pc, #188]	; (801c6d0 <lv_scrl_design+0xd4>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	79fa      	ldrb	r2, [r7, #7]
 801c616:	68b9      	ldr	r1, [r7, #8]
 801c618:	68f8      	ldr	r0, [r7, #12]
 801c61a:	4798      	blx	r3
 801c61c:	4603      	mov	r3, r0
 801c61e:	e052      	b.n	801c6c6 <lv_scrl_design+0xca>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801c620:	79fb      	ldrb	r3, [r7, #7]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d145      	bne.n	801c6b2 <lv_scrl_design+0xb6>
#if LV_USE_GROUP
        /* If the page is focused in a group and
         * the background object is not visible (transparent)
         * then "activate" the style of the scrollable*/
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 801c626:	68f8      	ldr	r0, [r7, #12]
 801c628:	f7ea fd76 	bl	8007118 <lv_obj_get_style>
 801c62c:	6238      	str	r0, [r7, #32]
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 801c62e:	68f8      	ldr	r0, [r7, #12]
 801c630:	f7ea fcd8 	bl	8006fe4 <lv_obj_get_parent>
 801c634:	61f8      	str	r0, [r7, #28]
        const lv_style_t * style_page     = lv_obj_get_style(page);
 801c636:	69f8      	ldr	r0, [r7, #28]
 801c638:	f7ea fd6e 	bl	8007118 <lv_obj_get_style>
 801c63c:	61b8      	str	r0, [r7, #24]
        lv_group_t * g                    = lv_obj_get_group(page);
 801c63e:	69f8      	ldr	r0, [r7, #28]
 801c640:	f7ea fe31 	bl	80072a6 <lv_obj_get_group>
 801c644:	6178      	str	r0, [r7, #20]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801c646:	69bb      	ldr	r3, [r7, #24]
 801c648:	7a1b      	ldrb	r3, [r3, #8]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d127      	bne.n	801c69e <lv_scrl_design+0xa2>
           style_page->body.border.width == 0) { /*Is the background visible?*/
 801c64e:	69bb      	ldr	r3, [r7, #24]
 801c650:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801c654:	2b00      	cmp	r3, #0
 801c656:	d122      	bne.n	801c69e <lv_scrl_design+0xa2>
            if(lv_group_get_focused(g) == page) {
 801c658:	6978      	ldr	r0, [r7, #20]
 801c65a:	f7e8 fe06 	bl	800526a <lv_group_get_focused>
 801c65e:	4602      	mov	r2, r0
 801c660:	69fb      	ldr	r3, [r7, #28]
 801c662:	4293      	cmp	r3, r2
 801c664:	d11b      	bne.n	801c69e <lv_scrl_design+0xa2>
                lv_style_t * style_mod;
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 801c666:	6a39      	ldr	r1, [r7, #32]
 801c668:	6978      	ldr	r0, [r7, #20]
 801c66a:	f7e8 fdce 	bl	800520a <lv_group_mod_style>
 801c66e:	6278      	str	r0, [r7, #36]	; 0x24
                /*If still not visible modify the style a littel bit*/
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 801c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c672:	7a1b      	ldrb	r3, [r3, #8]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d10f      	bne.n	801c698 <lv_scrl_design+0x9c>
 801c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d10a      	bne.n	801c698 <lv_scrl_design+0x9c>
                    style_mod->body.opa          = LV_OPA_50;
 801c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c684:	227f      	movs	r2, #127	; 0x7f
 801c686:	721a      	strb	r2, [r3, #8]
                    style_mod->body.border.width = 1;
 801c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c68a:	2201      	movs	r2, #1
 801c68c:	819a      	strh	r2, [r3, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 801c68e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c690:	6978      	ldr	r0, [r7, #20]
 801c692:	f7e8 fdba 	bl	800520a <lv_group_mod_style>
 801c696:	6278      	str	r0, [r7, #36]	; 0x24
                }

                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c69c:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_design(scrl, mask, mode);
 801c69e:	4b0c      	ldr	r3, [pc, #48]	; (801c6d0 <lv_scrl_design+0xd4>)
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	79fa      	ldrb	r2, [r7, #7]
 801c6a4:	68b9      	ldr	r1, [r7, #8]
 801c6a6:	68f8      	ldr	r0, [r7, #12]
 801c6a8:	4798      	blx	r3

#if LV_USE_GROUP
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	6a3a      	ldr	r2, [r7, #32]
 801c6ae:	629a      	str	r2, [r3, #40]	; 0x28
 801c6b0:	e008      	b.n	801c6c4 <lv_scrl_design+0xc8>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801c6b2:	79fb      	ldrb	r3, [r7, #7]
 801c6b4:	2b01      	cmp	r3, #1
 801c6b6:	d105      	bne.n	801c6c4 <lv_scrl_design+0xc8>
        ancestor_design(scrl, mask, mode);
 801c6b8:	4b05      	ldr	r3, [pc, #20]	; (801c6d0 <lv_scrl_design+0xd4>)
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	79fa      	ldrb	r2, [r7, #7]
 801c6be:	68b9      	ldr	r1, [r7, #8]
 801c6c0:	68f8      	ldr	r0, [r7, #12]
 801c6c2:	4798      	blx	r3
    }

    return true;
 801c6c4:	2301      	movs	r3, #1
}
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	3728      	adds	r7, #40	; 0x28
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	20002ae0 	.word	0x20002ae0

0801c6d4 <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 801c6d4:	b590      	push	{r4, r7, lr}
 801c6d6:	b08f      	sub	sp, #60	; 0x3c
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	60f8      	str	r0, [r7, #12]
 801c6dc:	460b      	mov	r3, r1
 801c6de:	607a      	str	r2, [r7, #4]
 801c6e0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 801c6e2:	4ba1      	ldr	r3, [pc, #644]	; (801c968 <lv_page_signal+0x294>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	7af9      	ldrb	r1, [r7, #11]
 801c6e8:	687a      	ldr	r2, [r7, #4]
 801c6ea:	68f8      	ldr	r0, [r7, #12]
 801c6ec:	4798      	blx	r3
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if(res != LV_RES_OK) return res;
 801c6f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801c6f8:	2b01      	cmp	r3, #1
 801c6fa:	d002      	beq.n	801c702 <lv_page_signal+0x2e>
 801c6fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801c700:	e1c7      	b.n	801ca92 <lv_page_signal+0x3be>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c702:	68f8      	ldr	r0, [r7, #12]
 801c704:	f7ea fdc3 	bl	800728e <lv_obj_get_ext_attr>
 801c708:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801c70a:	7afb      	ldrb	r3, [r7, #11]
 801c70c:	2b01      	cmp	r3, #1
 801c70e:	f040 8086 	bne.w	801c81e <lv_page_signal+0x14a>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801c712:	2101      	movs	r1, #1
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f7ff fc07 	bl	801bf28 <lv_page_get_style>
 801c71a:	61f8      	str	r0, [r7, #28]
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
 801c71c:	68f8      	ldr	r0, [r7, #12]
 801c71e:	f7ff f9b1 	bl	801ba84 <lv_page_get_scrl_fit_left>
 801c722:	4603      	mov	r3, r0
 801c724:	76fb      	strb	r3, [r7, #27]
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
 801c726:	68f8      	ldr	r0, [r7, #12]
 801c728:	f7ff f9bc 	bl	801baa4 <lv_page_get_scrl_fit_top>
 801c72c:	4603      	mov	r3, r0
 801c72e:	76bb      	strb	r3, [r7, #26]
        child                    = lv_obj_get_child(page, NULL);
 801c730:	2100      	movs	r1, #0
 801c732:	68f8      	ldr	r0, [r7, #12]
 801c734:	f7ea fc62 	bl	8006ffc <lv_obj_get_child>
 801c738:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801c73a:	e06c      	b.n	801c816 <lv_page_signal+0x142>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801c73c:	2102      	movs	r1, #2
 801c73e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c740:	f7ea fd76 	bl	8007230 <lv_obj_is_protected>
 801c744:	4603      	mov	r3, r0
 801c746:	f083 0301 	eor.w	r3, r3, #1
 801c74a:	b2db      	uxtb	r3, r3
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d05d      	beq.n	801c80c <lv_page_signal+0x138>
                lv_obj_t * tmp = child;
 801c750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c752:	617b      	str	r3, [r7, #20]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801c754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c756:	68f8      	ldr	r0, [r7, #12]
 801c758:	f7ea fc50 	bl	8006ffc <lv_obj_get_child>
 801c75c:	6378      	str	r0, [r7, #52]	; 0x34

                /* Reposition the child to take padding into account (Only if it's on (0;0) now)
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d11f      	bne.n	801c7ae <lv_page_signal+0xda>
 801c76e:	7efb      	ldrb	r3, [r7, #27]
 801c770:	2b01      	cmp	r3, #1
 801c772:	d002      	beq.n	801c77a <lv_page_signal+0xa6>
 801c774:	7efb      	ldrb	r3, [r7, #27]
 801c776:	2b03      	cmp	r3, #3
 801c778:	d119      	bne.n	801c7ae <lv_page_signal+0xda>
                    tmp->coords.x1 += style->body.padding.left;
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c780:	b29a      	uxth	r2, r3
 801c782:	69fb      	ldr	r3, [r7, #28]
 801c784:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c788:	b29b      	uxth	r3, r3
 801c78a:	4413      	add	r3, r2
 801c78c:	b29b      	uxth	r3, r3
 801c78e:	b21a      	sxth	r2, r3
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	821a      	strh	r2, [r3, #16]
                    tmp->coords.x2 += style->body.padding.left;
 801c794:	697b      	ldr	r3, [r7, #20]
 801c796:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c79a:	b29a      	uxth	r2, r3
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	4413      	add	r3, r2
 801c7a6:	b29b      	uxth	r3, r3
 801c7a8:	b21a      	sxth	r2, r3
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	829a      	strh	r2, [r3, #20]
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c7ba:	429a      	cmp	r2, r3
 801c7bc:	d11f      	bne.n	801c7fe <lv_page_signal+0x12a>
 801c7be:	7ebb      	ldrb	r3, [r7, #26]
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d002      	beq.n	801c7ca <lv_page_signal+0xf6>
 801c7c4:	7ebb      	ldrb	r3, [r7, #26]
 801c7c6:	2b03      	cmp	r3, #3
 801c7c8:	d119      	bne.n	801c7fe <lv_page_signal+0x12a>
                    tmp->coords.y1 += style->body.padding.top;
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c7d0:	b29a      	uxth	r2, r3
 801c7d2:	69fb      	ldr	r3, [r7, #28]
 801c7d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	4413      	add	r3, r2
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	b21a      	sxth	r2, r3
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	825a      	strh	r2, [r3, #18]
                    tmp->coords.y2 += style->body.padding.top;
 801c7e4:	697b      	ldr	r3, [r7, #20]
 801c7e6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7ea:	b29a      	uxth	r2, r3
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7f2:	b29b      	uxth	r3, r3
 801c7f4:	4413      	add	r3, r2
 801c7f6:	b29b      	uxth	r3, r3
 801c7f8:	b21a      	sxth	r2, r3
 801c7fa:	697b      	ldr	r3, [r7, #20]
 801c7fc:	82da      	strh	r2, [r3, #22]
                }
                lv_obj_set_parent(tmp, ext->scrl);
 801c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c800:	685b      	ldr	r3, [r3, #4]
 801c802:	4619      	mov	r1, r3
 801c804:	6978      	ldr	r0, [r7, #20]
 801c806:	f7e9 fba5 	bl	8005f54 <lv_obj_set_parent>
 801c80a:	e004      	b.n	801c816 <lv_page_signal+0x142>
            } else {
                child = lv_obj_get_child(page, child);
 801c80c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c80e:	68f8      	ldr	r0, [r7, #12]
 801c810:	f7ea fbf4 	bl	8006ffc <lv_obj_get_child>
 801c814:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d18f      	bne.n	801c73c <lv_page_signal+0x68>
 801c81c:	e137      	b.n	801ca8e <lv_page_signal+0x3ba>
            }
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801c81e:	7afb      	ldrb	r3, [r7, #11]
 801c820:	2b04      	cmp	r3, #4
 801c822:	d11e      	bne.n	801c862 <lv_page_signal+0x18e>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c826:	685b      	ldr	r3, [r3, #4]
 801c828:	69db      	ldr	r3, [r3, #28]
 801c82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c82c:	6850      	ldr	r0, [r2, #4]
 801c82e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c830:	6852      	ldr	r2, [r2, #4]
 801c832:	3210      	adds	r2, #16
 801c834:	2102      	movs	r1, #2
 801c836:	4798      	blx	r3

        /*The scrollbars are important only if they are visible now*/
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c83a:	7f1b      	ldrb	r3, [r3, #28]
 801c83c:	f003 0301 	and.w	r3, r3, #1
 801c840:	b2db      	uxtb	r3, r3
 801c842:	2b00      	cmp	r3, #0
 801c844:	d106      	bne.n	801c854 <lv_page_signal+0x180>
 801c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c848:	7f1b      	ldrb	r3, [r3, #28]
 801c84a:	f003 0302 	and.w	r3, r3, #2
 801c84e:	b2db      	uxtb	r3, r3
 801c850:	2b00      	cmp	r3, #0
 801c852:	d002      	beq.n	801c85a <lv_page_signal+0x186>
 801c854:	68f8      	ldr	r0, [r7, #12]
 801c856:	f000 fceb 	bl	801d230 <lv_page_sb_refresh>

        /*Refresh the ext. size because the scrollbars might be positioned out of the page*/
        lv_obj_refresh_ext_draw_pad(page);
 801c85a:	68f8      	ldr	r0, [r7, #12]
 801c85c:	f7ea fb60 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
 801c860:	e115      	b.n	801ca8e <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801c862:	7afb      	ldrb	r3, [r7, #11]
 801c864:	2b02      	cmp	r3, #2
 801c866:	d138      	bne.n	801c8da <lv_page_signal+0x206>
        /*Refresh the scrollbar and notify the scrl if the size is changed*/
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c86a:	685b      	ldr	r3, [r3, #4]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	f000 810e 	beq.w	801ca8e <lv_page_signal+0x3ba>
 801c872:	68f8      	ldr	r0, [r7, #12]
 801c874:	f7ea fc20 	bl	80070b8 <lv_obj_get_width>
 801c878:	4603      	mov	r3, r0
 801c87a:	461c      	mov	r4, r3
 801c87c:	6878      	ldr	r0, [r7, #4]
 801c87e:	f7ff f8c3 	bl	801ba08 <lv_area_get_width>
 801c882:	4603      	mov	r3, r0
 801c884:	429c      	cmp	r4, r3
 801c886:	d10b      	bne.n	801c8a0 <lv_page_signal+0x1cc>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 801c888:	68f8      	ldr	r0, [r7, #12]
 801c88a:	f7ea fc23 	bl	80070d4 <lv_obj_get_height>
 801c88e:	4603      	mov	r3, r0
 801c890:	461c      	mov	r4, r3
 801c892:	6878      	ldr	r0, [r7, #4]
 801c894:	f7ff f8cf 	bl	801ba36 <lv_area_get_height>
 801c898:	4603      	mov	r3, r0
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801c89a:	429c      	cmp	r4, r3
 801c89c:	f000 80f7 	beq.w	801ca8e <lv_page_signal+0x3ba>
            /*If no hor_fit enabled set the scrollable's width to the page's width*/
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8a2:	685b      	ldr	r3, [r3, #4]
 801c8a4:	69db      	ldr	r3, [r3, #28]
 801c8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8a8:	6850      	ldr	r0, [r2, #4]
 801c8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ac:	6852      	ldr	r2, [r2, #4]
 801c8ae:	3210      	adds	r2, #16
 801c8b0:	2102      	movs	r1, #2
 801c8b2:	4798      	blx	r3

            /*The scrollbars are important only if they are visible now*/
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8b6:	7f1b      	ldrb	r3, [r3, #28]
 801c8b8:	f003 0301 	and.w	r3, r3, #1
 801c8bc:	b2db      	uxtb	r3, r3
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d107      	bne.n	801c8d2 <lv_page_signal+0x1fe>
 801c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8c4:	7f1b      	ldrb	r3, [r3, #28]
 801c8c6:	f003 0302 	and.w	r3, r3, #2
 801c8ca:	b2db      	uxtb	r3, r3
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	f000 80de 	beq.w	801ca8e <lv_page_signal+0x3ba>
 801c8d2:	68f8      	ldr	r0, [r7, #12]
 801c8d4:	f000 fcac 	bl	801d230 <lv_page_sb_refresh>
 801c8d8:	e0d9      	b.n	801ca8e <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801c8da:	7afb      	ldrb	r3, [r7, #11]
 801c8dc:	2b05      	cmp	r3, #5
 801c8de:	d12b      	bne.n	801c938 <lv_page_signal+0x264>
        /*Ensure ext. size for the scrollbars if they are out of the page*/
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8ea:	689b      	ldr	r3, [r3, #8]
 801c8ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c8f0:	425b      	negs	r3, r3
 801c8f2:	429a      	cmp	r2, r3
 801c8f4:	da09      	bge.n	801c90a <lv_page_signal+0x236>
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 801c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8f8:	689b      	ldr	r3, [r3, #8]
 801c8fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c8fe:	b29b      	uxth	r3, r3
 801c900:	425b      	negs	r3, r3
 801c902:	b29b      	uxth	r3, r3
 801c904:	b21a      	sxth	r2, r3
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	869a      	strh	r2, [r3, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801c910:	461a      	mov	r2, r3
 801c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c914:	689b      	ldr	r3, [r3, #8]
 801c916:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c91a:	425b      	negs	r3, r3
 801c91c:	429a      	cmp	r2, r3
 801c91e:	f280 80b6 	bge.w	801ca8e <lv_page_signal+0x3ba>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 801c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c924:	689b      	ldr	r3, [r3, #8]
 801c926:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c92a:	b29b      	uxth	r3, r3
 801c92c:	425b      	negs	r3, r3
 801c92e:	b29b      	uxth	r3, r3
 801c930:	b21a      	sxth	r2, r3
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	869a      	strh	r2, [r3, #52]	; 0x34
 801c936:	e0aa      	b.n	801ca8e <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801c938:	7afb      	ldrb	r3, [r7, #11]
 801c93a:	2b11      	cmp	r3, #17
 801c93c:	d17d      	bne.n	801ca3a <lv_page_signal+0x366>
        uint32_t c = *((uint32_t *)param);
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	623b      	str	r3, [r7, #32]

        if(c == LV_KEY_DOWN) {
 801c944:	6a3b      	ldr	r3, [r7, #32]
 801c946:	2b12      	cmp	r3, #18
 801c948:	d110      	bne.n	801c96c <lv_page_signal+0x298>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801c94a:	68f8      	ldr	r0, [r7, #12]
 801c94c:	f7ea fbc2 	bl	80070d4 <lv_obj_get_height>
 801c950:	4603      	mov	r3, r0
 801c952:	425b      	negs	r3, r3
 801c954:	2b00      	cmp	r3, #0
 801c956:	da00      	bge.n	801c95a <lv_page_signal+0x286>
 801c958:	3303      	adds	r3, #3
 801c95a:	109b      	asrs	r3, r3, #2
 801c95c:	b21b      	sxth	r3, r3
 801c95e:	4619      	mov	r1, r3
 801c960:	68f8      	ldr	r0, [r7, #12]
 801c962:	f7ff fb55 	bl	801c010 <lv_page_scroll_ver>
 801c966:	e092      	b.n	801ca8e <lv_page_signal+0x3ba>
 801c968:	20002ae4 	.word	0x20002ae4
        } else if(c == LV_KEY_UP) {
 801c96c:	6a3b      	ldr	r3, [r7, #32]
 801c96e:	2b11      	cmp	r3, #17
 801c970:	d10d      	bne.n	801c98e <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801c972:	68f8      	ldr	r0, [r7, #12]
 801c974:	f7ea fbae 	bl	80070d4 <lv_obj_get_height>
 801c978:	4603      	mov	r3, r0
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	da00      	bge.n	801c980 <lv_page_signal+0x2ac>
 801c97e:	3303      	adds	r3, #3
 801c980:	109b      	asrs	r3, r3, #2
 801c982:	b21b      	sxth	r3, r3
 801c984:	4619      	mov	r1, r3
 801c986:	68f8      	ldr	r0, [r7, #12]
 801c988:	f7ff fb42 	bl	801c010 <lv_page_scroll_ver>
 801c98c:	e07f      	b.n	801ca8e <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_RIGHT) {
 801c98e:	6a3b      	ldr	r3, [r7, #32]
 801c990:	2b13      	cmp	r3, #19
 801c992:	d128      	bne.n	801c9e6 <lv_page_signal+0x312>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801c994:	68f8      	ldr	r0, [r7, #12]
 801c996:	f7ff f865 	bl	801ba64 <lv_page_get_scrl_width>
 801c99a:	4603      	mov	r3, r0
 801c99c:	461c      	mov	r4, r3
 801c99e:	68f8      	ldr	r0, [r7, #12]
 801c9a0:	f7ea fb8a 	bl	80070b8 <lv_obj_get_width>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	429c      	cmp	r4, r3
 801c9a8:	dc0e      	bgt.n	801c9c8 <lv_page_signal+0x2f4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801c9aa:	68f8      	ldr	r0, [r7, #12]
 801c9ac:	f7ea fb92 	bl	80070d4 <lv_obj_get_height>
 801c9b0:	4603      	mov	r3, r0
 801c9b2:	425b      	negs	r3, r3
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	da00      	bge.n	801c9ba <lv_page_signal+0x2e6>
 801c9b8:	3303      	adds	r3, #3
 801c9ba:	109b      	asrs	r3, r3, #2
 801c9bc:	b21b      	sxth	r3, r3
 801c9be:	4619      	mov	r1, r3
 801c9c0:	68f8      	ldr	r0, [r7, #12]
 801c9c2:	f7ff fb25 	bl	801c010 <lv_page_scroll_ver>
 801c9c6:	e062      	b.n	801ca8e <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 801c9c8:	68f8      	ldr	r0, [r7, #12]
 801c9ca:	f7ea fb75 	bl	80070b8 <lv_obj_get_width>
 801c9ce:	4603      	mov	r3, r0
 801c9d0:	425b      	negs	r3, r3
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	da00      	bge.n	801c9d8 <lv_page_signal+0x304>
 801c9d6:	3303      	adds	r3, #3
 801c9d8:	109b      	asrs	r3, r3, #2
 801c9da:	b21b      	sxth	r3, r3
 801c9dc:	4619      	mov	r1, r3
 801c9de:	68f8      	ldr	r0, [r7, #12]
 801c9e0:	f7ff fad8 	bl	801bf94 <lv_page_scroll_hor>
 801c9e4:	e053      	b.n	801ca8e <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_LEFT) {
 801c9e6:	6a3b      	ldr	r3, [r7, #32]
 801c9e8:	2b14      	cmp	r3, #20
 801c9ea:	d150      	bne.n	801ca8e <lv_page_signal+0x3ba>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801c9ec:	68f8      	ldr	r0, [r7, #12]
 801c9ee:	f7ff f839 	bl	801ba64 <lv_page_get_scrl_width>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	461c      	mov	r4, r3
 801c9f6:	68f8      	ldr	r0, [r7, #12]
 801c9f8:	f7ea fb5e 	bl	80070b8 <lv_obj_get_width>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	429c      	cmp	r4, r3
 801ca00:	dc0d      	bgt.n	801ca1e <lv_page_signal+0x34a>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801ca02:	68f8      	ldr	r0, [r7, #12]
 801ca04:	f7ea fb66 	bl	80070d4 <lv_obj_get_height>
 801ca08:	4603      	mov	r3, r0
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	da00      	bge.n	801ca10 <lv_page_signal+0x33c>
 801ca0e:	3303      	adds	r3, #3
 801ca10:	109b      	asrs	r3, r3, #2
 801ca12:	b21b      	sxth	r3, r3
 801ca14:	4619      	mov	r1, r3
 801ca16:	68f8      	ldr	r0, [r7, #12]
 801ca18:	f7ff fafa 	bl	801c010 <lv_page_scroll_ver>
 801ca1c:	e037      	b.n	801ca8e <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 801ca1e:	68f8      	ldr	r0, [r7, #12]
 801ca20:	f7ea fb4a 	bl	80070b8 <lv_obj_get_width>
 801ca24:	4603      	mov	r3, r0
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	da00      	bge.n	801ca2c <lv_page_signal+0x358>
 801ca2a:	3303      	adds	r3, #3
 801ca2c:	109b      	asrs	r3, r3, #2
 801ca2e:	b21b      	sxth	r3, r3
 801ca30:	4619      	mov	r1, r3
 801ca32:	68f8      	ldr	r0, [r7, #12]
 801ca34:	f7ff faae 	bl	801bf94 <lv_page_scroll_hor>
 801ca38:	e029      	b.n	801ca8e <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ca3a:	7afb      	ldrb	r3, [r7, #11]
 801ca3c:	2b12      	cmp	r3, #18
 801ca3e:	d105      	bne.n	801ca4c <lv_page_signal+0x378>
        bool * editable = (bool *)param;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	627b      	str	r3, [r7, #36]	; 0x24
        *editable       = true;
 801ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca46:	2201      	movs	r2, #1
 801ca48:	701a      	strb	r2, [r3, #0]
 801ca4a:	e020      	b.n	801ca8e <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801ca4c:	7afb      	ldrb	r3, [r7, #11]
 801ca4e:	2b06      	cmp	r3, #6
 801ca50:	d11d      	bne.n	801ca8e <lv_page_signal+0x3ba>
        lv_obj_type_t * buf = param;
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ca56:	2300      	movs	r3, #0
 801ca58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ca5c:	e00b      	b.n	801ca76 <lv_page_signal+0x3a2>
            if(buf->type[i] == NULL) break;
 801ca5e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d009      	beq.n	801ca80 <lv_page_signal+0x3ac>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ca6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ca70:	3301      	adds	r3, #1
 801ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ca76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ca7a:	2b06      	cmp	r3, #6
 801ca7c:	d9ef      	bls.n	801ca5e <lv_page_signal+0x38a>
 801ca7e:	e000      	b.n	801ca82 <lv_page_signal+0x3ae>
            if(buf->type[i] == NULL) break;
 801ca80:	bf00      	nop
        }
        buf->type[i] = "lv_page";
 801ca82:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca88:	4904      	ldr	r1, [pc, #16]	; (801ca9c <lv_page_signal+0x3c8>)
 801ca8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ca8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801ca92:	4618      	mov	r0, r3
 801ca94:	373c      	adds	r7, #60	; 0x3c
 801ca96:	46bd      	mov	sp, r7
 801ca98:	bd90      	pop	{r4, r7, pc}
 801ca9a:	bf00      	nop
 801ca9c:	08029d08 	.word	0x08029d08

0801caa0 <lv_page_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 801caa0:	b590      	push	{r4, r7, lr}
 801caa2:	b097      	sub	sp, #92	; 0x5c
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	60f8      	str	r0, [r7, #12]
 801caa8:	460b      	mov	r3, r1
 801caaa:	607a      	str	r2, [r7, #4]
 801caac:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 801caae:	4bbf      	ldr	r3, [pc, #764]	; (801cdac <lv_page_scrollable_signal+0x30c>)
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	7af9      	ldrb	r1, [r7, #11]
 801cab4:	687a      	ldr	r2, [r7, #4]
 801cab6:	68f8      	ldr	r0, [r7, #12]
 801cab8:	4798      	blx	r3
 801caba:	4603      	mov	r3, r0
 801cabc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    if(res != LV_RES_OK) return res;
 801cac0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801cac4:	2b01      	cmp	r3, #1
 801cac6:	d002      	beq.n	801cace <lv_page_scrollable_signal+0x2e>
 801cac8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801cacc:	e37e      	b.n	801d1cc <lv_page_scrollable_signal+0x72c>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 801cace:	68f8      	ldr	r0, [r7, #12]
 801cad0:	f7ea fa88 	bl	8006fe4 <lv_obj_get_parent>
 801cad4:	64f8      	str	r0, [r7, #76]	; 0x4c
    const lv_style_t * page_style = lv_obj_get_style(page);
 801cad6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cad8:	f7ea fb1e 	bl	8007118 <lv_obj_get_style>
 801cadc:	64b8      	str	r0, [r7, #72]	; 0x48
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 801cade:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cae0:	f7ea fbd5 	bl	800728e <lv_obj_get_ext_attr>
 801cae4:	6478      	str	r0, [r7, #68]	; 0x44

    if(sign == LV_SIGNAL_CORD_CHG) {
 801cae6:	7afb      	ldrb	r3, [r7, #11]
 801cae8:	2b02      	cmp	r3, #2
 801caea:	f040 82c8 	bne.w	801d07e <lv_page_scrollable_signal+0x5de>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801caee:	68f8      	ldr	r0, [r7, #12]
 801caf0:	f7ea fab0 	bl	8007054 <lv_obj_get_x>
 801caf4:	4603      	mov	r3, r0
 801caf6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801cafa:	68f8      	ldr	r0, [r7, #12]
 801cafc:	f7ea fac3 	bl	8007086 <lv_obj_get_y>
 801cb00:	4603      	mov	r3, r0
 801cb02:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        bool refr_x      = false;
 801cb06:	2300      	movs	r3, #0
 801cb08:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        bool refr_y      = false;
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 801cb12:	f107 031c 	add.w	r3, r7, #28
 801cb16:	4619      	mov	r1, r3
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	f7ea fa8c 	bl	8007036 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 801cb1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cb22:	4619      	mov	r1, r3
 801cb24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cb26:	f7ea fa86 	bl	8007036 <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801cb34:	b29a      	uxth	r2, r3
 801cb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb38:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb3c:	b29b      	uxth	r3, r3
 801cb3e:	1ad3      	subs	r3, r2, r3
 801cb40:	b29b      	uxth	r3, r3
 801cb42:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801cb4a:	b29a      	uxth	r2, r3
 801cb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cb52:	b29b      	uxth	r3, r3
 801cb54:	1ad3      	subs	r3, r2, r3
 801cb56:	b29b      	uxth	r3, r3
 801cb58:	873b      	strh	r3, [r7, #56]	; 0x38
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801cb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb5c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cb60:	b29a      	uxth	r2, r3
 801cb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb64:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cb68:	b29b      	uxth	r3, r3
 801cb6a:	4413      	add	r3, r2
 801cb6c:	b29b      	uxth	r3, r3
 801cb6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 801cb70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb72:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cb76:	b29a      	uxth	r2, r3
 801cb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb7a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cb7e:	b29b      	uxth	r3, r3
 801cb80:	4413      	add	r3, r2
 801cb82:	b29b      	uxth	r3, r3
 801cb84:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801cb86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cb88:	f7ea fa2c 	bl	8006fe4 <lv_obj_get_parent>
 801cb8c:	6338      	str	r0, [r7, #48]	; 0x30

        lv_indev_t * indev = lv_indev_get_act();
 801cb8e:	f7e8 fcc9 	bl	8005524 <lv_indev_get_act>
 801cb92:	62f8      	str	r0, [r7, #44]	; 0x2c
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 801cb94:	f107 0318 	add.w	r3, r7, #24
 801cb98:	4619      	mov	r1, r3
 801cb9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb9c:	f7e8 fd68 	bl	8005670 <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801cba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cba2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cba6:	f003 0301 	and.w	r3, r3, #1
 801cbaa:	b2db      	uxtb	r3, r3
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d05d      	beq.n	801cc6c <lv_page_scrollable_signal+0x1cc>
 801cbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbb2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cbb6:	f003 0302 	and.w	r3, r3, #2
 801cbba:	b2db      	uxtb	r3, r3
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d155      	bne.n	801cc6c <lv_page_scrollable_signal+0x1cc>
 801cbc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cbc2:	f7e8 fd31 	bl	8005628 <lv_indev_is_dragging>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	f083 0301 	eor.w	r3, r3, #1
 801cbcc:	b2db      	uxtb	r3, r3
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d04c      	beq.n	801cc6c <lv_page_scrollable_signal+0x1cc>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801cbd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	dd0b      	ble.n	801cbf2 <lv_page_scrollable_signal+0x152>
 801cbda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cbde:	461a      	mov	r2, r3
 801cbe0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cbe4:	4619      	mov	r1, r3
 801cbe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cbe8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cbec:	440b      	add	r3, r1
 801cbee:	429a      	cmp	r2, r3
 801cbf0:	d00f      	beq.n	801cc12 <lv_page_scrollable_signal+0x172>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cbf2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	da38      	bge.n	801cc6c <lv_page_scrollable_signal+0x1cc>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cbfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cbfe:	461a      	mov	r2, r3
 801cc00:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801cc04:	4619      	mov	r1, r3
 801cc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc08:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cc0c:	1acb      	subs	r3, r1, r3
 801cc0e:	429a      	cmp	r2, r3
 801cc10:	d12c      	bne.n	801cc6c <lv_page_scrollable_signal+0x1cc>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	dd0b      	ble.n	801cc32 <lv_page_scrollable_signal+0x192>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cc1e:	461a      	mov	r2, r3
 801cc20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc24:	4619      	mov	r1, r3
 801cc26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc28:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cc2c:	440b      	add	r3, r1
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	d00f      	beq.n	801cc52 <lv_page_scrollable_signal+0x1b2>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801cc32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	da18      	bge.n	801cc6c <lv_page_scrollable_signal+0x1cc>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801cc3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cc3e:	461a      	mov	r2, r3
 801cc40:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cc44:	4619      	mov	r1, r3
 801cc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc48:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cc4c:	1acb      	subs	r3, r1, r3
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	d10c      	bne.n	801cc6c <lv_page_scrollable_signal+0x1cc>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 801cc52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc54:	f7ea f9c6 	bl	8006fe4 <lv_obj_get_parent>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d006      	beq.n	801cc6c <lv_page_scrollable_signal+0x1cc>
                    page_ext->scroll_prop_ip = 1;
 801cc5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc60:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801cc64:	f043 0302 	orr.w	r3, r3, #2
 801cc68:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 801cc6c:	f107 031c 	add.w	r3, r7, #28
 801cc70:	4618      	mov	r0, r3
 801cc72:	f7fe fec9 	bl	801ba08 <lv_area_get_width>
 801cc76:	4603      	mov	r3, r0
 801cc78:	461a      	mov	r2, r3
 801cc7a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cc7e:	18d4      	adds	r4, r2, r3
 801cc80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc84:	4618      	mov	r0, r3
 801cc86:	f7fe febf 	bl	801ba08 <lv_area_get_width>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	429c      	cmp	r4, r3
 801cc8e:	dc14      	bgt.n	801ccba <lv_page_scrollable_signal+0x21a>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 801cc90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cc94:	461a      	mov	r2, r3
 801cc96:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc9a:	4619      	mov	r1, r3
 801cc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc9e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cca2:	440b      	add	r3, r1
 801cca4:	429a      	cmp	r2, r3
 801cca6:	f000 80c8 	beq.w	801ce3a <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left;
 801ccaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ccac:	8b5b      	ldrh	r3, [r3, #26]
 801ccae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801ccb2:	2301      	movs	r3, #1
 801ccb4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801ccb8:	e0bf      	b.n	801ce3a <lv_page_scrollable_signal+0x39a>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801ccba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccbc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ccc0:	f003 0302 	and.w	r3, r3, #2
 801ccc4:	b2db      	uxtb	r3, r3
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d015      	beq.n	801ccf6 <lv_page_scrollable_signal+0x256>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801ccca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ccce:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801ccd2:	429a      	cmp	r2, r3
 801ccd4:	f040 80b1 	bne.w	801ce3a <lv_page_scrollable_signal+0x39a>
                                               is reverted. Handle only the pos. because of drag*/
                    new_x  = ori_coords->x1 - page_coords.x1;
 801ccd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccda:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccde:	b29a      	uxth	r2, r3
 801cce0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cce4:	b29b      	uxth	r3, r3
 801cce6:	1ad3      	subs	r3, r2, r3
 801cce8:	b29b      	uxth	r3, r3
 801ccea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    refr_x = true;
 801ccee:	2301      	movs	r3, #1
 801ccf0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801ccf4:	e0a1      	b.n	801ce3a <lv_page_scrollable_signal+0x39a>
                }
            }
            /*The edges of the scrollable can not be in the page (minus hpad) */
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 801ccf6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ccfa:	461a      	mov	r2, r3
 801ccfc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cd00:	4619      	mov	r1, r3
 801cd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd04:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cd08:	1acb      	subs	r3, r1, r3
 801cd0a:	429a      	cmp	r2, r3
 801cd0c:	da50      	bge.n	801cdb0 <lv_page_scrollable_signal+0x310>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801cd0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd12:	4618      	mov	r0, r3
 801cd14:	f7fe fe78 	bl	801ba08 <lv_area_get_width>
 801cd18:	4603      	mov	r3, r0
 801cd1a:	b29c      	uxth	r4, r3
 801cd1c:	f107 031c 	add.w	r3, r7, #28
 801cd20:	4618      	mov	r0, r3
 801cd22:	f7fe fe71 	bl	801ba08 <lv_area_get_width>
 801cd26:	4603      	mov	r3, r0
 801cd28:	b29b      	uxth	r3, r3
 801cd2a:	1ae3      	subs	r3, r4, r3
 801cd2c:	b29a      	uxth	r2, r3
                        page_style->body.padding.right; /* Right align */
 801cd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd30:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cd34:	b29b      	uxth	r3, r3
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801cd36:	1ad3      	subs	r3, r2, r3
 801cd38:	b29b      	uxth	r3, r3
 801cd3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801cd3e:	2301      	movs	r3, #1
 801cd40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd4a:	f003 0301 	and.w	r3, r3, #1
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d072      	beq.n	801ce3a <lv_page_scrollable_signal+0x39a>
 801cd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd5a:	f003 0310 	and.w	r3, r3, #16
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d16a      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd6a:	f003 0308 	and.w	r3, r3, #8
 801cd6e:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d162      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd7a:	f003 0302 	and.w	r3, r3, #2
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d15a      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cd84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd8a:	f003 0304 	and.w	r3, r3, #4
 801cd8e:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d152      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801cd94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cd96:	f7ff f979 	bl	801c08c <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 801cd9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd9c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cda0:	f043 0308 	orr.w	r3, r3, #8
 801cda4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801cda8:	e047      	b.n	801ce3a <lv_page_scrollable_signal+0x39a>
 801cdaa:	bf00      	nop
 801cdac:	20002ae4 	.word	0x20002ae4
                }
#endif
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 801cdb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cdb4:	461a      	mov	r2, r3
 801cdb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cdba:	4619      	mov	r1, r3
 801cdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdbe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cdc2:	440b      	add	r3, r1
 801cdc4:	429a      	cmp	r2, r3
 801cdc6:	dd38      	ble.n	801ce3a <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left; /*Left align*/
 801cdc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdca:	8b5b      	ldrh	r3, [r3, #26]
 801cdcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cddc:	f003 0301 	and.w	r3, r3, #1
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d029      	beq.n	801ce3a <lv_page_scrollable_signal+0x39a>
 801cde6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cde8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cdec:	f003 0310 	and.w	r3, r3, #16
 801cdf0:	b2db      	uxtb	r3, r3
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d121      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cdf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cdfc:	f003 0308 	and.w	r3, r3, #8
 801ce00:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d119      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801ce06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce0c:	f003 0302 	and.w	r3, r3, #2
 801ce10:	b2db      	uxtb	r3, r3
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d111      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801ce16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce1c:	f003 0304 	and.w	r3, r3, #4
 801ce20:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d109      	bne.n	801ce3a <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801ce26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ce28:	f7ff f930 	bl	801c08c <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 801ce2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ce2e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801ce32:	f043 0310 	orr.w	r3, r3, #16
 801ce36:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 801ce3a:	f107 031c 	add.w	r3, r7, #28
 801ce3e:	4618      	mov	r0, r3
 801ce40:	f7fe fdf9 	bl	801ba36 <lv_area_get_height>
 801ce44:	4603      	mov	r3, r0
 801ce46:	461a      	mov	r2, r3
 801ce48:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ce4c:	18d4      	adds	r4, r2, r3
 801ce4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce52:	4618      	mov	r0, r3
 801ce54:	f7fe fdef 	bl	801ba36 <lv_area_get_height>
 801ce58:	4603      	mov	r3, r0
 801ce5a:	429c      	cmp	r4, r3
 801ce5c:	dc14      	bgt.n	801ce88 <lv_page_scrollable_signal+0x3e8>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 801ce5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ce62:	461a      	mov	r2, r3
 801ce64:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ce68:	4619      	mov	r1, r3
 801ce6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce6c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ce70:	440b      	add	r3, r1
 801ce72:	429a      	cmp	r2, r3
 801ce74:	f000 80c5 	beq.w	801d002 <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top;
 801ce78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce7a:	8adb      	ldrh	r3, [r3, #22]
 801ce7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801ce80:	2301      	movs	r3, #1
 801ce82:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801ce86:	e0bc      	b.n	801d002 <lv_page_scrollable_signal+0x562>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801ce88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce8a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ce8e:	f003 0302 	and.w	r3, r3, #2
 801ce92:	b2db      	uxtb	r3, r3
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d015      	beq.n	801cec4 <lv_page_scrollable_signal+0x424>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801ce98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ce9c:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801cea0:	429a      	cmp	r2, r3
 801cea2:	f040 80ae 	bne.w	801d002 <lv_page_scrollable_signal+0x562>
                                               is reverted. Handle only the pos. because of drag*/
                    new_y  = ori_coords->y1 - page_coords.y1;
 801cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cea8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ceac:	b29a      	uxth	r2, r3
 801ceae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ceb2:	b29b      	uxth	r3, r3
 801ceb4:	1ad3      	subs	r3, r2, r3
 801ceb6:	b29b      	uxth	r3, r3
 801ceb8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    refr_y = true;
 801cebc:	2301      	movs	r3, #1
 801cebe:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801cec2:	e09e      	b.n	801d002 <lv_page_scrollable_signal+0x562>
                }
            }
            /*The edges of the scrollable can not be in the page (minus vpad) */
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 801cec4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cec8:	461a      	mov	r2, r3
 801ceca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801cece:	4619      	mov	r1, r3
 801ced0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ced2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ced6:	1acb      	subs	r3, r1, r3
 801ced8:	429a      	cmp	r2, r3
 801ceda:	da4d      	bge.n	801cf78 <lv_page_scrollable_signal+0x4d8>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801cedc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cee0:	4618      	mov	r0, r3
 801cee2:	f7fe fda8 	bl	801ba36 <lv_area_get_height>
 801cee6:	4603      	mov	r3, r0
 801cee8:	b29c      	uxth	r4, r3
 801ceea:	f107 031c 	add.w	r3, r7, #28
 801ceee:	4618      	mov	r0, r3
 801cef0:	f7fe fda1 	bl	801ba36 <lv_area_get_height>
 801cef4:	4603      	mov	r3, r0
 801cef6:	b29b      	uxth	r3, r3
 801cef8:	1ae3      	subs	r3, r4, r3
 801cefa:	b29a      	uxth	r2, r3
                        page_style->body.padding.bottom; /* Bottom align */
 801cefc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cefe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cf02:	b29b      	uxth	r3, r3
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801cf04:	1ad3      	subs	r3, r2, r3
 801cf06:	b29b      	uxth	r3, r3
 801cf08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf18:	f003 0301 	and.w	r3, r3, #1
 801cf1c:	b2db      	uxtb	r3, r3
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d06f      	beq.n	801d002 <lv_page_scrollable_signal+0x562>
 801cf22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf28:	f003 0310 	and.w	r3, r3, #16
 801cf2c:	b2db      	uxtb	r3, r3
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d167      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf38:	f003 0308 	and.w	r3, r3, #8
 801cf3c:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d15f      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf48:	f003 0302 	and.w	r3, r3, #2
 801cf4c:	b2db      	uxtb	r3, r3
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d157      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cf52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf58:	f003 0304 	and.w	r3, r3, #4
 801cf5c:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d14f      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801cf62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cf64:	f7ff f892 	bl	801c08c <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801cf68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cf6a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cf6e:	f043 0304 	orr.w	r3, r3, #4
 801cf72:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801cf76:	e044      	b.n	801d002 <lv_page_scrollable_signal+0x562>
                }
#endif
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 801cf78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cf7c:	461a      	mov	r2, r3
 801cf7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf82:	4619      	mov	r1, r3
 801cf84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cf8a:	440b      	add	r3, r1
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	dd38      	ble.n	801d002 <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top; /*Top align*/
 801cf90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf92:	8adb      	ldrh	r3, [r3, #22]
 801cf94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801cf98:	2301      	movs	r3, #1
 801cf9a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfa4:	f003 0301 	and.w	r3, r3, #1
 801cfa8:	b2db      	uxtb	r3, r3
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d029      	beq.n	801d002 <lv_page_scrollable_signal+0x562>
 801cfae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfb4:	f003 0310 	and.w	r3, r3, #16
 801cfb8:	b2db      	uxtb	r3, r3
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d121      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfc4:	f003 0308 	and.w	r3, r3, #8
 801cfc8:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d119      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfd4:	f003 0302 	and.w	r3, r3, #2
 801cfd8:	b2db      	uxtb	r3, r3
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d111      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cfde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfe4:	f003 0304 	and.w	r3, r3, #4
 801cfe8:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d109      	bne.n	801d002 <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801cfee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cff0:	f7ff f84c 	bl	801c08c <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 801cff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cff6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cffa:	f043 0302 	orr.w	r3, r3, #2
 801cffe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 801d002:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801d006:	2b00      	cmp	r3, #0
 801d008:	d103      	bne.n	801d012 <lv_page_scrollable_signal+0x572>
 801d00a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d031      	beq.n	801d076 <lv_page_scrollable_signal+0x5d6>
            lv_obj_set_pos(scrl, new_x, new_y);
 801d012:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 801d016:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801d01a:	4619      	mov	r1, r3
 801d01c:	68f8      	ldr	r0, [r7, #12]
 801d01e:	f7e9 f809 	bl	8006034 <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 801d022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d024:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801d028:	f003 0302 	and.w	r3, r3, #2
 801d02c:	b2db      	uxtb	r3, r3
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d021      	beq.n	801d076 <lv_page_scrollable_signal+0x5d6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 801d032:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801d036:	2b00      	cmp	r3, #0
 801d038:	d00c      	beq.n	801d054 <lv_page_scrollable_signal+0x5b4>
 801d03a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d03c:	f7ea f823 	bl	8007086 <lv_obj_get_y>
 801d040:	4603      	mov	r3, r0
 801d042:	b29a      	uxth	r2, r3
 801d044:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d046:	4413      	add	r3, r2
 801d048:	b29b      	uxth	r3, r3
 801d04a:	b21b      	sxth	r3, r3
 801d04c:	4619      	mov	r1, r3
 801d04e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d050:	f7e9 f890 	bl	8006174 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 801d054:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d00c      	beq.n	801d076 <lv_page_scrollable_signal+0x5d6>
 801d05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d05e:	f7e9 fff9 	bl	8007054 <lv_obj_get_x>
 801d062:	4603      	mov	r3, r0
 801d064:	b29a      	uxth	r2, r3
 801d066:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d068:	4413      	add	r3, r2
 801d06a:	b29b      	uxth	r3, r3
 801d06c:	b21b      	sxth	r3, r3
 801d06e:	4619      	mov	r1, r3
 801d070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d072:	f7e9 f86a 	bl	800614a <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 801d076:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d078:	f000 f8da 	bl	801d230 <lv_page_sb_refresh>
 801d07c:	e0a4      	b.n	801d1c8 <lv_page_scrollable_signal+0x728>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 801d07e:	7afb      	ldrb	r3, [r7, #11]
 801d080:	2b0e      	cmp	r3, #14
 801d082:	f040 80a1 	bne.w	801d1c8 <lv_page_scrollable_signal+0x728>

        /*Scroll propagation is finished on drag end*/
        page_ext->scroll_prop_ip = 0;
 801d086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d088:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801d08c:	f36f 0341 	bfc	r3, #1, #1
 801d090:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

        /*Hide scrollbars if required*/
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801d094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d096:	7f1b      	ldrb	r3, [r3, #28]
 801d098:	f003 031c 	and.w	r3, r3, #28
 801d09c:	b2db      	uxtb	r3, r3
 801d09e:	2b08      	cmp	r3, #8
 801d0a0:	f040 8092 	bne.w	801d1c8 <lv_page_scrollable_signal+0x728>
            lv_disp_t * disp = lv_obj_get_disp(page);
 801d0a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d0a6:	f7e9 ff63 	bl	8006f70 <lv_obj_get_disp>
 801d0aa:	6438      	str	r0, [r7, #64]	; 0x40
            lv_area_t sb_area_tmp;
            if(page_ext->sb.hor_draw) {
 801d0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0ae:	7f1b      	ldrb	r3, [r3, #28]
 801d0b0:	f003 0301 	and.w	r3, r3, #1
 801d0b4:	b2db      	uxtb	r3, r3
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d03f      	beq.n	801d13a <lv_page_scrollable_signal+0x69a>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 801d0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0bc:	f103 020c 	add.w	r2, r3, #12
 801d0c0:	f107 0310 	add.w	r3, r7, #16
 801d0c4:	4611      	mov	r1, r2
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	f7fe fc90 	bl	801b9ec <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801d0cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d0d0:	b29a      	uxth	r2, r3
 801d0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d0d8:	b29b      	uxth	r3, r3
 801d0da:	4413      	add	r3, r2
 801d0dc:	b29b      	uxth	r3, r3
 801d0de:	b21b      	sxth	r3, r3
 801d0e0:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801d0e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d0e6:	b29a      	uxth	r2, r3
 801d0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d0ee:	b29b      	uxth	r3, r3
 801d0f0:	4413      	add	r3, r2
 801d0f2:	b29b      	uxth	r3, r3
 801d0f4:	b21b      	sxth	r3, r3
 801d0f6:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801d0f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d0fc:	b29a      	uxth	r2, r3
 801d0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d100:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d104:	b29b      	uxth	r3, r3
 801d106:	4413      	add	r3, r2
 801d108:	b29b      	uxth	r3, r3
 801d10a:	b21b      	sxth	r3, r3
 801d10c:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801d10e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d112:	b29a      	uxth	r2, r3
 801d114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d116:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d11a:	b29b      	uxth	r3, r3
 801d11c:	4413      	add	r3, r2
 801d11e:	b29b      	uxth	r3, r3
 801d120:	b21b      	sxth	r3, r3
 801d122:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801d124:	f107 0310 	add.w	r3, r7, #16
 801d128:	4619      	mov	r1, r3
 801d12a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d12c:	f7ea fb08 	bl	8007740 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 801d130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d132:	7f13      	ldrb	r3, [r2, #28]
 801d134:	f36f 0300 	bfc	r3, #0, #1
 801d138:	7713      	strb	r3, [r2, #28]
            }
            if(page_ext->sb.ver_draw) {
 801d13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d13c:	7f1b      	ldrb	r3, [r3, #28]
 801d13e:	f003 0302 	and.w	r3, r3, #2
 801d142:	b2db      	uxtb	r3, r3
 801d144:	2b00      	cmp	r3, #0
 801d146:	d03f      	beq.n	801d1c8 <lv_page_scrollable_signal+0x728>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 801d148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d14a:	f103 0214 	add.w	r2, r3, #20
 801d14e:	f107 0310 	add.w	r3, r7, #16
 801d152:	4611      	mov	r1, r2
 801d154:	4618      	mov	r0, r3
 801d156:	f7fe fc49 	bl	801b9ec <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801d15a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d15e:	b29a      	uxth	r2, r3
 801d160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d162:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d166:	b29b      	uxth	r3, r3
 801d168:	4413      	add	r3, r2
 801d16a:	b29b      	uxth	r3, r3
 801d16c:	b21b      	sxth	r3, r3
 801d16e:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801d170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d174:	b29a      	uxth	r2, r3
 801d176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d178:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d17c:	b29b      	uxth	r3, r3
 801d17e:	4413      	add	r3, r2
 801d180:	b29b      	uxth	r3, r3
 801d182:	b21b      	sxth	r3, r3
 801d184:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801d186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d18a:	b29a      	uxth	r2, r3
 801d18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d18e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d192:	b29b      	uxth	r3, r3
 801d194:	4413      	add	r3, r2
 801d196:	b29b      	uxth	r3, r3
 801d198:	b21b      	sxth	r3, r3
 801d19a:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801d19c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d1a0:	b29a      	uxth	r2, r3
 801d1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1a4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d1a8:	b29b      	uxth	r3, r3
 801d1aa:	4413      	add	r3, r2
 801d1ac:	b29b      	uxth	r3, r3
 801d1ae:	b21b      	sxth	r3, r3
 801d1b0:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801d1b2:	f107 0310 	add.w	r3, r7, #16
 801d1b6:	4619      	mov	r1, r3
 801d1b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d1ba:	f7ea fac1 	bl	8007740 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 801d1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d1c0:	7f13      	ldrb	r3, [r2, #28]
 801d1c2:	f36f 0341 	bfc	r3, #1, #1
 801d1c6:	7713      	strb	r3, [r2, #28]
            }
        }
    }

    return res;
 801d1c8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
}
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	375c      	adds	r7, #92	; 0x5c
 801d1d0:	46bd      	mov	sp, r7
 801d1d2:	bd90      	pop	{r4, r7, pc}

0801d1d4 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 801d1d4:	b580      	push	{r7, lr}
 801d1d6:	b084      	sub	sp, #16
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	6078      	str	r0, [r7, #4]
 801d1dc:	460b      	mov	r3, r1
 801d1de:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801d1e0:	6878      	ldr	r0, [r7, #4]
 801d1e2:	f7e9 feff 	bl	8006fe4 <lv_obj_get_parent>
 801d1e6:	60f8      	str	r0, [r7, #12]

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 801d1e8:	78fb      	ldrb	r3, [r7, #3]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d014      	beq.n	801d218 <scrl_def_event_cb+0x44>
 801d1ee:	78fb      	ldrb	r3, [r7, #3]
 801d1f0:	2b01      	cmp	r3, #1
 801d1f2:	d011      	beq.n	801d218 <scrl_def_event_cb+0x44>
 801d1f4:	78fb      	ldrb	r3, [r7, #3]
 801d1f6:	2b02      	cmp	r3, #2
 801d1f8:	d00e      	beq.n	801d218 <scrl_def_event_cb+0x44>
 801d1fa:	78fb      	ldrb	r3, [r7, #3]
 801d1fc:	2b07      	cmp	r3, #7
 801d1fe:	d00b      	beq.n	801d218 <scrl_def_event_cb+0x44>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
 801d200:	78fb      	ldrb	r3, [r7, #3]
 801d202:	2b03      	cmp	r3, #3
 801d204:	d008      	beq.n	801d218 <scrl_def_event_cb+0x44>
 801d206:	78fb      	ldrb	r3, [r7, #3]
 801d208:	2b06      	cmp	r3, #6
 801d20a:	d005      	beq.n	801d218 <scrl_def_event_cb+0x44>
 801d20c:	78fb      	ldrb	r3, [r7, #3]
 801d20e:	2b04      	cmp	r3, #4
 801d210:	d002      	beq.n	801d218 <scrl_def_event_cb+0x44>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
 801d212:	78fb      	ldrb	r3, [r7, #3]
 801d214:	2b05      	cmp	r3, #5
 801d216:	d107      	bne.n	801d228 <scrl_def_event_cb+0x54>
        lv_event_send(page, event, lv_event_get_data());
 801d218:	f7e9 fe44 	bl	8006ea4 <lv_event_get_data>
 801d21c:	4602      	mov	r2, r0
 801d21e:	78fb      	ldrb	r3, [r7, #3]
 801d220:	4619      	mov	r1, r3
 801d222:	68f8      	ldr	r0, [r7, #12]
 801d224:	f7e9 fdb9 	bl	8006d9a <lv_event_send>
    }
    /*clang-format on*/
}
 801d228:	bf00      	nop
 801d22a:	3710      	adds	r7, #16
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}

0801d230 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 801d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d232:	b08d      	sub	sp, #52	; 0x34
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801d238:	6878      	ldr	r0, [r7, #4]
 801d23a:	f7ea f828 	bl	800728e <lv_obj_get_ext_attr>
 801d23e:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_style_t * style = lv_obj_get_style(page);
 801d240:	6878      	ldr	r0, [r7, #4]
 801d242:	f7e9 ff69 	bl	8007118 <lv_obj_get_style>
 801d246:	6278      	str	r0, [r7, #36]	; 0x24
    lv_obj_t * scrl          = ext->scrl;
 801d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d24a:	685b      	ldr	r3, [r3, #4]
 801d24c:	623b      	str	r3, [r7, #32]
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 801d24e:	6a38      	ldr	r0, [r7, #32]
 801d250:	f7e9 ff32 	bl	80070b8 <lv_obj_get_width>
 801d254:	4603      	mov	r3, r0
 801d256:	83fb      	strh	r3, [r7, #30]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801d258:	6a38      	ldr	r0, [r7, #32]
 801d25a:	f7e9 ff3b 	bl	80070d4 <lv_obj_get_height>
 801d25e:	4603      	mov	r3, r0
 801d260:	83bb      	strh	r3, [r7, #28]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	f7e9 ff28 	bl	80070b8 <lv_obj_get_width>
 801d268:	4603      	mov	r3, r0
 801d26a:	837b      	strh	r3, [r7, #26]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 801d26c:	6878      	ldr	r0, [r7, #4]
 801d26e:	f7e9 ff31 	bl	80070d4 <lv_obj_get_height>
 801d272:	4603      	mov	r3, r0
 801d274:	833b      	strh	r3, [r7, #24]

    /*Always let 'scrollbar width' padding above, under, left and right to the scrollbars
     * else:
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d278:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d27e:	689b      	ldr	r3, [r3, #8]
 801d280:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d284:	4293      	cmp	r3, r2
 801d286:	bfb8      	it	lt
 801d288:	4613      	movlt	r3, r2
 801d28a:	82fb      	strh	r3, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 801d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d28e:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d294:	689b      	ldr	r3, [r3, #8]
 801d296:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d29a:	4293      	cmp	r3, r2
 801d29c:	bfb8      	it	lt
 801d29e:	4613      	movlt	r3, r2
 801d2a0:	82bb      	strh	r3, [r7, #20]

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 801d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2a4:	7f1b      	ldrb	r3, [r3, #28]
 801d2a6:	f003 031c 	and.w	r3, r3, #28
 801d2aa:	b2db      	uxtb	r3, r3
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	f000 82ba 	beq.w	801d826 <lv_page_sb_refresh+0x5f6>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 801d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b4:	7f1b      	ldrb	r3, [r3, #28]
 801d2b6:	f003 031c 	and.w	r3, r3, #28
 801d2ba:	b2db      	uxtb	r3, r3
 801d2bc:	2b04      	cmp	r3, #4
 801d2be:	d109      	bne.n	801d2d4 <lv_page_sb_refresh+0xa4>
        ext->sb.hor_draw = 1;
 801d2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2c2:	7f13      	ldrb	r3, [r2, #28]
 801d2c4:	f043 0301 	orr.w	r3, r3, #1
 801d2c8:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 1;
 801d2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2cc:	7f13      	ldrb	r3, [r2, #28]
 801d2ce:	f043 0302 	orr.w	r3, r3, #2
 801d2d2:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 801d2d4:	6878      	ldr	r0, [r7, #4]
 801d2d6:	f7e9 fe4b 	bl	8006f70 <lv_obj_get_disp>
 801d2da:	6138      	str	r0, [r7, #16]
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 801d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2de:	7f1b      	ldrb	r3, [r3, #28]
 801d2e0:	f003 0301 	and.w	r3, r3, #1
 801d2e4:	b2db      	uxtb	r3, r3
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d03a      	beq.n	801d360 <lv_page_sb_refresh+0x130>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2ec:	f103 020c 	add.w	r2, r3, #12
 801d2f0:	f107 0308 	add.w	r3, r7, #8
 801d2f4:	4611      	mov	r1, r2
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f7fe fb78 	bl	801b9ec <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d2fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d300:	b29a      	uxth	r2, r3
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d308:	b29b      	uxth	r3, r3
 801d30a:	4413      	add	r3, r2
 801d30c:	b29b      	uxth	r3, r3
 801d30e:	b21b      	sxth	r3, r3
 801d310:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d312:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d316:	b29a      	uxth	r2, r3
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d31e:	b29b      	uxth	r3, r3
 801d320:	4413      	add	r3, r2
 801d322:	b29b      	uxth	r3, r3
 801d324:	b21b      	sxth	r3, r3
 801d326:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d32c:	b29a      	uxth	r2, r3
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d334:	b29b      	uxth	r3, r3
 801d336:	4413      	add	r3, r2
 801d338:	b29b      	uxth	r3, r3
 801d33a:	b21b      	sxth	r3, r3
 801d33c:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d33e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d342:	b29a      	uxth	r2, r3
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	4413      	add	r3, r2
 801d34e:	b29b      	uxth	r3, r3
 801d350:	b21b      	sxth	r3, r3
 801d352:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d354:	f107 0308 	add.w	r3, r7, #8
 801d358:	4619      	mov	r1, r3
 801d35a:	6938      	ldr	r0, [r7, #16]
 801d35c:	f7ea f9f0 	bl	8007740 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d362:	7f1b      	ldrb	r3, [r3, #28]
 801d364:	f003 0302 	and.w	r3, r3, #2
 801d368:	b2db      	uxtb	r3, r3
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d03a      	beq.n	801d3e4 <lv_page_sb_refresh+0x1b4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d370:	f103 0214 	add.w	r2, r3, #20
 801d374:	f107 0308 	add.w	r3, r7, #8
 801d378:	4611      	mov	r1, r2
 801d37a:	4618      	mov	r0, r3
 801d37c:	f7fe fb36 	bl	801b9ec <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d380:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d384:	b29a      	uxth	r2, r3
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d38c:	b29b      	uxth	r3, r3
 801d38e:	4413      	add	r3, r2
 801d390:	b29b      	uxth	r3, r3
 801d392:	b21b      	sxth	r3, r3
 801d394:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d396:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d39a:	b29a      	uxth	r2, r3
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d3a2:	b29b      	uxth	r3, r3
 801d3a4:	4413      	add	r3, r2
 801d3a6:	b29b      	uxth	r3, r3
 801d3a8:	b21b      	sxth	r3, r3
 801d3aa:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d3ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d3b0:	b29a      	uxth	r2, r3
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d3b8:	b29b      	uxth	r3, r3
 801d3ba:	4413      	add	r3, r2
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	b21b      	sxth	r3, r3
 801d3c0:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d3c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d3c6:	b29a      	uxth	r2, r3
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d3ce:	b29b      	uxth	r3, r3
 801d3d0:	4413      	add	r3, r2
 801d3d2:	b29b      	uxth	r3, r3
 801d3d4:	b21b      	sxth	r3, r3
 801d3d6:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d3d8:	f107 0308 	add.w	r3, r7, #8
 801d3dc:	4619      	mov	r1, r3
 801d3de:	6938      	ldr	r0, [r7, #16]
 801d3e0:	f7ea f9ae 	bl	8007740 <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3e6:	7f1b      	ldrb	r3, [r3, #28]
 801d3e8:	f003 031c 	and.w	r3, r3, #28
 801d3ec:	b2db      	uxtb	r3, r3
 801d3ee:	2b08      	cmp	r3, #8
 801d3f0:	d116      	bne.n	801d420 <lv_page_sb_refresh+0x1f0>
 801d3f2:	f7e8 f897 	bl	8005524 <lv_indev_get_act>
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f7e8 f915 	bl	8005628 <lv_indev_is_dragging>
 801d3fe:	4603      	mov	r3, r0
 801d400:	f083 0301 	eor.w	r3, r3, #1
 801d404:	b2db      	uxtb	r3, r3
 801d406:	2b00      	cmp	r3, #0
 801d408:	d00a      	beq.n	801d420 <lv_page_sb_refresh+0x1f0>
        ext->sb.hor_draw = 0;
 801d40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d40c:	7f13      	ldrb	r3, [r2, #28]
 801d40e:	f36f 0300 	bfc	r3, #0, #1
 801d412:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 0;
 801d414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d416:	7f13      	ldrb	r3, [r2, #28]
 801d418:	f36f 0341 	bfc	r3, #1, #1
 801d41c:	7713      	strb	r3, [r2, #28]
        return;
 801d41e:	e203      	b.n	801d828 <lv_page_sb_refresh+0x5f8>
    }

    /*Full sized horizontal scrollbar*/
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801d420:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801d424:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d42a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d42e:	1a5b      	subs	r3, r3, r1
 801d430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d432:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d436:	1a5b      	subs	r3, r3, r1
 801d438:	429a      	cmp	r2, r3
 801d43a:	dc38      	bgt.n	801d4ae <lv_page_sb_refresh+0x27e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 801d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d43e:	f103 000c 	add.w	r0, r3, #12
 801d442:	8b7a      	ldrh	r2, [r7, #26]
 801d444:	8afb      	ldrh	r3, [r7, #22]
 801d446:	005b      	lsls	r3, r3, #1
 801d448:	b29b      	uxth	r3, r3
 801d44a:	1ad3      	subs	r3, r2, r3
 801d44c:	b29b      	uxth	r3, r3
 801d44e:	b21b      	sxth	r3, r3
 801d450:	4619      	mov	r1, r3
 801d452:	f7f5 fc2a 	bl	8012caa <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d458:	f103 000c 	add.w	r0, r3, #12
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801d45c:	8b3a      	ldrh	r2, [r7, #24]
 801d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d460:	689b      	ldr	r3, [r3, #8]
 801d462:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d466:	b29b      	uxth	r3, r3
 801d468:	1ad3      	subs	r3, r2, r3
 801d46a:	b29a      	uxth	r2, r3
 801d46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d46e:	689b      	ldr	r3, [r3, #8]
 801d470:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d474:	b29b      	uxth	r3, r3
 801d476:	1ad3      	subs	r3, r2, r3
 801d478:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801d47a:	b21a      	sxth	r2, r3
 801d47c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d480:	4619      	mov	r1, r3
 801d482:	f7f5 fc42 	bl	8012d0a <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 801d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d488:	7f1b      	ldrb	r3, [r3, #28]
 801d48a:	f003 031c 	and.w	r3, r3, #28
 801d48e:	b2db      	uxtb	r3, r3
 801d490:	2b0c      	cmp	r3, #12
 801d492:	d006      	beq.n	801d4a2 <lv_page_sb_refresh+0x272>
 801d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d496:	7f1b      	ldrb	r3, [r3, #28]
 801d498:	f003 031c 	and.w	r3, r3, #28
 801d49c:	b2db      	uxtb	r3, r3
 801d49e:	2b08      	cmp	r3, #8
 801d4a0:	d17c      	bne.n	801d59c <lv_page_sb_refresh+0x36c>
 801d4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d4a4:	7f13      	ldrb	r3, [r2, #28]
 801d4a6:	f36f 0300 	bfc	r3, #0, #1
 801d4aa:	7713      	strb	r3, [r2, #28]
 801d4ac:	e076      	b.n	801d59c <lv_page_sb_refresh+0x36c>
    }
    /*Smaller horizontal scrollbar*/
    else {
        size_tmp =
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 801d4ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d4b2:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 801d4b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d4ba:	0052      	lsls	r2, r2, #1
 801d4bc:	1a8a      	subs	r2, r1, r2
 801d4be:	fb02 f203 	mul.w	r2, r2, r3
 801d4c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d4c8:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d4cc:	440b      	add	r3, r1
 801d4ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d4d0:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d4d4:	440b      	add	r3, r1
 801d4d6:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 801d4da:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 801d4dc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d4e0:	2b0b      	cmp	r3, #11
 801d4e2:	dc01      	bgt.n	801d4e8 <lv_page_sb_refresh+0x2b8>
 801d4e4:	230c      	movs	r3, #12
 801d4e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 801d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4ea:	330c      	adds	r3, #12
 801d4ec:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d4f0:	4611      	mov	r1, r2
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f7f5 fbd9 	bl	8012caa <lv_area_set_width>

        lv_area_set_pos(&ext->sb.hor_area,
 801d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4fa:	f103 040c 	add.w	r4, r3, #12
                        sb_hor_pad +
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 801d4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d500:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801d504:	461d      	mov	r5, r3
 801d506:	6a38      	ldr	r0, [r7, #32]
 801d508:	f7e9 fda4 	bl	8007054 <lv_obj_get_x>
 801d50c:	4603      	mov	r3, r0
 801d50e:	1aeb      	subs	r3, r5, r3
 801d510:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 801d514:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d518:	1a89      	subs	r1, r1, r2
 801d51a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d51e:	0052      	lsls	r2, r2, #1
 801d520:	1a8a      	subs	r2, r1, r2
 801d522:	fb02 f203 	mul.w	r2, r2, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 801d526:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d52c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d530:	440b      	add	r3, r1
 801d532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d534:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d538:	4419      	add	r1, r3
 801d53a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d53e:	1acb      	subs	r3, r1, r3
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 801d540:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_hor_pad +
 801d544:	b29a      	uxth	r2, r3
 801d546:	8afb      	ldrh	r3, [r7, #22]
 801d548:	4413      	add	r3, r2
 801d54a:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 801d54c:	b219      	sxth	r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801d54e:	8b3a      	ldrh	r2, [r7, #24]
 801d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d552:	689b      	ldr	r3, [r3, #8]
 801d554:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d558:	b29b      	uxth	r3, r3
 801d55a:	1ad3      	subs	r3, r2, r3
 801d55c:	b29a      	uxth	r2, r3
 801d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d560:	689b      	ldr	r3, [r3, #8]
 801d562:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d566:	b29b      	uxth	r3, r3
 801d568:	1ad3      	subs	r3, r2, r3
 801d56a:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 801d56c:	b21b      	sxth	r3, r3
 801d56e:	461a      	mov	r2, r3
 801d570:	4620      	mov	r0, r4
 801d572:	f7f5 fbca 	bl	8012d0a <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 801d576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d578:	7f1b      	ldrb	r3, [r3, #28]
 801d57a:	f003 031c 	and.w	r3, r3, #28
 801d57e:	b2db      	uxtb	r3, r3
 801d580:	2b0c      	cmp	r3, #12
 801d582:	d006      	beq.n	801d592 <lv_page_sb_refresh+0x362>
 801d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d586:	7f1b      	ldrb	r3, [r3, #28]
 801d588:	f003 031c 	and.w	r3, r3, #28
 801d58c:	b2db      	uxtb	r3, r3
 801d58e:	2b08      	cmp	r3, #8
 801d590:	d104      	bne.n	801d59c <lv_page_sb_refresh+0x36c>
 801d592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d594:	7f13      	ldrb	r3, [r2, #28]
 801d596:	f043 0301 	orr.w	r3, r3, #1
 801d59a:	7713      	strb	r3, [r2, #28]
    }

    /*Full sized vertical scroll bar*/
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 801d59c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801d5a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d5a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d5a6:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d5aa:	1a5b      	subs	r3, r3, r1
 801d5ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d5ae:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d5b2:	1a5b      	subs	r3, r3, r1
 801d5b4:	429a      	cmp	r2, r3
 801d5b6:	dc38      	bgt.n	801d62a <lv_page_sb_refresh+0x3fa>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 801d5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5ba:	f103 0014 	add.w	r0, r3, #20
 801d5be:	8b3a      	ldrh	r2, [r7, #24]
 801d5c0:	8abb      	ldrh	r3, [r7, #20]
 801d5c2:	005b      	lsls	r3, r3, #1
 801d5c4:	b29b      	uxth	r3, r3
 801d5c6:	1ad3      	subs	r3, r2, r3
 801d5c8:	b29b      	uxth	r3, r3
 801d5ca:	b21b      	sxth	r3, r3
 801d5cc:	4619      	mov	r1, r3
 801d5ce:	f7f5 fb84 	bl	8012cda <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,
 801d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5d4:	f103 0014 	add.w	r0, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 801d5d8:	8b7a      	ldrh	r2, [r7, #26]
 801d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5dc:	689b      	ldr	r3, [r3, #8]
 801d5de:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d5e2:	b29b      	uxth	r3, r3
 801d5e4:	1ad3      	subs	r3, r2, r3
 801d5e6:	b29a      	uxth	r2, r3
 801d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5ea:	689b      	ldr	r3, [r3, #8]
 801d5ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801d5f0:	b29b      	uxth	r3, r3
 801d5f2:	1ad3      	subs	r3, r2, r3
 801d5f4:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d5f6:	b21b      	sxth	r3, r3
 801d5f8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d5fc:	4619      	mov	r1, r3
 801d5fe:	f7f5 fb84 	bl	8012d0a <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 801d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d604:	7f1b      	ldrb	r3, [r3, #28]
 801d606:	f003 031c 	and.w	r3, r3, #28
 801d60a:	b2db      	uxtb	r3, r3
 801d60c:	2b0c      	cmp	r3, #12
 801d60e:	d006      	beq.n	801d61e <lv_page_sb_refresh+0x3ee>
 801d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d612:	7f1b      	ldrb	r3, [r3, #28]
 801d614:	f003 031c 	and.w	r3, r3, #28
 801d618:	b2db      	uxtb	r3, r3
 801d61a:	2b08      	cmp	r3, #8
 801d61c:	d17e      	bne.n	801d71c <lv_page_sb_refresh+0x4ec>
 801d61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d620:	7f13      	ldrb	r3, [r2, #28]
 801d622:	f36f 0341 	bfc	r3, #1, #1
 801d626:	7713      	strb	r3, [r2, #28]
 801d628:	e078      	b.n	801d71c <lv_page_sb_refresh+0x4ec>
    }
    /*Smaller vertical scroll bar*/
    else {
        size_tmp =
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 801d62a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d62e:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801d632:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d636:	0052      	lsls	r2, r2, #1
 801d638:	1a8a      	subs	r2, r1, r2
 801d63a:	fb02 f203 	mul.w	r2, r2, r3
 801d63e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801d642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d644:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d648:	440b      	add	r3, r1
 801d64a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d64c:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d650:	440b      	add	r3, r1
 801d652:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 801d656:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 801d658:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d65c:	2b0b      	cmp	r3, #11
 801d65e:	dc01      	bgt.n	801d664 <lv_page_sb_refresh+0x434>
 801d660:	230c      	movs	r3, #12
 801d662:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 801d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d666:	3314      	adds	r3, #20
 801d668:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d66c:	4611      	mov	r1, r2
 801d66e:	4618      	mov	r0, r3
 801d670:	f7f5 fb33 	bl	8012cda <lv_area_set_height>

        lv_area_set_pos(&ext->sb.ver_area,
 801d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d676:	f103 0414 	add.w	r4, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 801d67a:	8b7a      	ldrh	r2, [r7, #26]
 801d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d67e:	689b      	ldr	r3, [r3, #8]
 801d680:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d684:	b29b      	uxth	r3, r3
 801d686:	1ad3      	subs	r3, r2, r3
 801d688:	b29a      	uxth	r2, r3
 801d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d68c:	689b      	ldr	r3, [r3, #8]
 801d68e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801d692:	b29b      	uxth	r3, r3
 801d694:	1ad3      	subs	r3, r2, r3
 801d696:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d698:	b21d      	sxth	r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d69c:	689b      	ldr	r3, [r3, #8]
 801d69e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d6a2:	461e      	mov	r6, r3
 801d6a4:	6a38      	ldr	r0, [r7, #32]
 801d6a6:	f7e9 fcee 	bl	8007086 <lv_obj_get_y>
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	1af3      	subs	r3, r6, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801d6ae:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801d6b2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d6b6:	1a89      	subs	r1, r1, r2
 801d6b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d6bc:	0052      	lsls	r2, r2, #1
 801d6be:	1a8a      	subs	r2, r1, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d6c0:	fb02 f203 	mul.w	r2, r2, r3
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801d6c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801d6c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6ca:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d6ce:	440b      	add	r3, r1
 801d6d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6d2:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d6d6:	4419      	add	r1, r3
 801d6d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d6dc:	1acb      	subs	r3, r1, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801d6de:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d6e2:	b29a      	uxth	r2, r3
 801d6e4:	8abb      	ldrh	r3, [r7, #20]
 801d6e6:	4413      	add	r3, r2
 801d6e8:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d6ea:	b21b      	sxth	r3, r3
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	4629      	mov	r1, r5
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	f7f5 fb0a 	bl	8012d0a <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 801d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f8:	7f1b      	ldrb	r3, [r3, #28]
 801d6fa:	f003 031c 	and.w	r3, r3, #28
 801d6fe:	b2db      	uxtb	r3, r3
 801d700:	2b0c      	cmp	r3, #12
 801d702:	d006      	beq.n	801d712 <lv_page_sb_refresh+0x4e2>
 801d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d706:	7f1b      	ldrb	r3, [r3, #28]
 801d708:	f003 031c 	and.w	r3, r3, #28
 801d70c:	b2db      	uxtb	r3, r3
 801d70e:	2b08      	cmp	r3, #8
 801d710:	d104      	bne.n	801d71c <lv_page_sb_refresh+0x4ec>
 801d712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d714:	7f13      	ldrb	r3, [r2, #28]
 801d716:	f043 0302 	orr.w	r3, r3, #2
 801d71a:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 801d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d71e:	7f1b      	ldrb	r3, [r3, #28]
 801d720:	f003 0301 	and.w	r3, r3, #1
 801d724:	b2db      	uxtb	r3, r3
 801d726:	2b00      	cmp	r3, #0
 801d728:	d03a      	beq.n	801d7a0 <lv_page_sb_refresh+0x570>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d72c:	f103 020c 	add.w	r2, r3, #12
 801d730:	f107 0308 	add.w	r3, r7, #8
 801d734:	4611      	mov	r1, r2
 801d736:	4618      	mov	r0, r3
 801d738:	f7fe f958 	bl	801b9ec <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d73c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d740:	b29a      	uxth	r2, r3
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d748:	b29b      	uxth	r3, r3
 801d74a:	4413      	add	r3, r2
 801d74c:	b29b      	uxth	r3, r3
 801d74e:	b21b      	sxth	r3, r3
 801d750:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d752:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d756:	b29a      	uxth	r2, r3
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d75e:	b29b      	uxth	r3, r3
 801d760:	4413      	add	r3, r2
 801d762:	b29b      	uxth	r3, r3
 801d764:	b21b      	sxth	r3, r3
 801d766:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d768:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d76c:	b29a      	uxth	r2, r3
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d774:	b29b      	uxth	r3, r3
 801d776:	4413      	add	r3, r2
 801d778:	b29b      	uxth	r3, r3
 801d77a:	b21b      	sxth	r3, r3
 801d77c:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d77e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d782:	b29a      	uxth	r2, r3
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d78a:	b29b      	uxth	r3, r3
 801d78c:	4413      	add	r3, r2
 801d78e:	b29b      	uxth	r3, r3
 801d790:	b21b      	sxth	r3, r3
 801d792:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d794:	f107 0308 	add.w	r3, r7, #8
 801d798:	4619      	mov	r1, r3
 801d79a:	6938      	ldr	r0, [r7, #16]
 801d79c:	f7e9 ffd0 	bl	8007740 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7a2:	7f1b      	ldrb	r3, [r3, #28]
 801d7a4:	f003 0302 	and.w	r3, r3, #2
 801d7a8:	b2db      	uxtb	r3, r3
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d03c      	beq.n	801d828 <lv_page_sb_refresh+0x5f8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7b0:	f103 0214 	add.w	r2, r3, #20
 801d7b4:	f107 0308 	add.w	r3, r7, #8
 801d7b8:	4611      	mov	r1, r2
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7fe f916 	bl	801b9ec <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d7c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7c4:	b29a      	uxth	r2, r3
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d7cc:	b29b      	uxth	r3, r3
 801d7ce:	4413      	add	r3, r2
 801d7d0:	b29b      	uxth	r3, r3
 801d7d2:	b21b      	sxth	r3, r3
 801d7d4:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d7d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d7da:	b29a      	uxth	r2, r3
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d7e2:	b29b      	uxth	r3, r3
 801d7e4:	4413      	add	r3, r2
 801d7e6:	b29b      	uxth	r3, r3
 801d7e8:	b21b      	sxth	r3, r3
 801d7ea:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d7ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d7f0:	b29a      	uxth	r2, r3
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d7f8:	b29b      	uxth	r3, r3
 801d7fa:	4413      	add	r3, r2
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	b21b      	sxth	r3, r3
 801d800:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d806:	b29a      	uxth	r2, r3
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d80e:	b29b      	uxth	r3, r3
 801d810:	4413      	add	r3, r2
 801d812:	b29b      	uxth	r3, r3
 801d814:	b21b      	sxth	r3, r3
 801d816:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d818:	f107 0308 	add.w	r3, r7, #8
 801d81c:	4619      	mov	r1, r3
 801d81e:	6938      	ldr	r0, [r7, #16]
 801d820:	f7e9 ff8e 	bl	8007740 <lv_inv_area>
 801d824:	e000      	b.n	801d828 <lv_page_sb_refresh+0x5f8>
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 801d826:	bf00      	nop
    }
}
 801d828:	3734      	adds	r7, #52	; 0x34
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d82e <edge_flash_anim>:

#if LV_USE_ANIMATION
static void edge_flash_anim(void * page, lv_anim_value_t v)
{
 801d82e:	b580      	push	{r7, lr}
 801d830:	b084      	sub	sp, #16
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
 801d836:	460b      	mov	r3, r1
 801d838:	807b      	strh	r3, [r7, #2]
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 801d83a:	6878      	ldr	r0, [r7, #4]
 801d83c:	f7e9 fd27 	bl	800728e <lv_obj_get_ext_attr>
 801d840:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.state = v;
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	887a      	ldrh	r2, [r7, #2]
 801d846:	841a      	strh	r2, [r3, #32]
    lv_obj_invalidate(page);
 801d848:	6878      	ldr	r0, [r7, #4]
 801d84a:	f7e8 faf4 	bl	8005e36 <lv_obj_invalidate>
}
 801d84e:	bf00      	nop
 801d850:	3710      	adds	r7, #16
 801d852:	46bd      	mov	sp, r7
 801d854:	bd80      	pop	{r7, pc}

0801d856 <edge_flash_anim_end>:

static void edge_flash_anim_end(lv_anim_t * a)
{
 801d856:	b580      	push	{r7, lr}
 801d858:	b084      	sub	sp, #16
 801d85a:	af00      	add	r7, sp, #0
 801d85c:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	4618      	mov	r0, r3
 801d864:	f7e9 fd13 	bl	800728e <lv_obj_get_ext_attr>
 801d868:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.top_ip    = 0;
 801d86a:	68fa      	ldr	r2, [r7, #12]
 801d86c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d870:	f36f 0341 	bfc	r3, #1, #1
 801d874:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801d878:	68fa      	ldr	r2, [r7, #12]
 801d87a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d87e:	f36f 0382 	bfc	r3, #2, #1
 801d882:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801d886:	68fa      	ldr	r2, [r7, #12]
 801d888:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d88c:	f36f 1304 	bfc	r3, #4, #1
 801d890:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801d894:	68fa      	ldr	r2, [r7, #12]
 801d896:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d89a:	f36f 03c3 	bfc	r3, #3, #1
 801d89e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lv_obj_invalidate(a->var);
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7e8 fac5 	bl	8005e36 <lv_obj_invalidate>
}
 801d8ac:	bf00      	nop
 801d8ae:	3710      	adds	r7, #16
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	bd80      	pop	{r7, pc}

0801d8b4 <lv_area_copy>:
{
 801d8b4:	b580      	push	{r7, lr}
 801d8b6:	b082      	sub	sp, #8
 801d8b8:	af00      	add	r7, sp, #0
 801d8ba:	6078      	str	r0, [r7, #4]
 801d8bc:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801d8be:	2208      	movs	r2, #8
 801d8c0:	6839      	ldr	r1, [r7, #0]
 801d8c2:	6878      	ldr	r0, [r7, #4]
 801d8c4:	f009 fc6c 	bl	80271a0 <memcpy>
}
 801d8c8:	bf00      	nop
 801d8ca:	3708      	adds	r7, #8
 801d8cc:	46bd      	mov	sp, r7
 801d8ce:	bd80      	pop	{r7, pc}

0801d8d0 <lv_area_get_width>:
{
 801d8d0:	b480      	push	{r7}
 801d8d2:	b083      	sub	sp, #12
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8de:	b29a      	uxth	r2, r3
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d8e6:	b29b      	uxth	r3, r3
 801d8e8:	1ad3      	subs	r3, r2, r3
 801d8ea:	b29b      	uxth	r3, r3
 801d8ec:	3301      	adds	r3, #1
 801d8ee:	b29b      	uxth	r3, r3
 801d8f0:	b21b      	sxth	r3, r3
}
 801d8f2:	4618      	mov	r0, r3
 801d8f4:	370c      	adds	r7, #12
 801d8f6:	46bd      	mov	sp, r7
 801d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8fc:	4770      	bx	lr

0801d8fe <lv_area_get_height>:
{
 801d8fe:	b480      	push	{r7}
 801d900:	b083      	sub	sp, #12
 801d902:	af00      	add	r7, sp, #0
 801d904:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d90c:	b29a      	uxth	r2, r3
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d914:	b29b      	uxth	r3, r3
 801d916:	1ad3      	subs	r3, r2, r3
 801d918:	b29b      	uxth	r3, r3
 801d91a:	3301      	adds	r3, #1
 801d91c:	b29b      	uxth	r3, r3
 801d91e:	b21b      	sxth	r3, r3
}
 801d920:	4618      	mov	r0, r3
 801d922:	370c      	adds	r7, #12
 801d924:	46bd      	mov	sp, r7
 801d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d92a:	4770      	bx	lr

0801d92c <lv_slider_set_value>:
 * @param slider pointer to a slider object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b082      	sub	sp, #8
 801d930:	af00      	add	r7, sp, #0
 801d932:	6078      	str	r0, [r7, #4]
 801d934:	460b      	mov	r3, r1
 801d936:	807b      	strh	r3, [r7, #2]
 801d938:	4613      	mov	r3, r2
 801d93a:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 801d93c:	787a      	ldrb	r2, [r7, #1]
 801d93e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d942:	4619      	mov	r1, r3
 801d944:	6878      	ldr	r0, [r7, #4]
 801d946:	f7f7 fb59 	bl	8014ffc <lv_bar_set_value>
}
 801d94a:	bf00      	nop
 801d94c:	3708      	adds	r7, #8
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}

0801d952 <lv_slider_get_min_value>:
 * Get the minimum value of a slider
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
 801d952:	b580      	push	{r7, lr}
 801d954:	b082      	sub	sp, #8
 801d956:	af00      	add	r7, sp, #0
 801d958:	6078      	str	r0, [r7, #4]
    return lv_bar_get_min_value(slider);
 801d95a:	6878      	ldr	r0, [r7, #4]
 801d95c:	f7f7 fc58 	bl	8015210 <lv_bar_get_min_value>
 801d960:	4603      	mov	r3, r0
}
 801d962:	4618      	mov	r0, r3
 801d964:	3708      	adds	r7, #8
 801d966:	46bd      	mov	sp, r7
 801d968:	bd80      	pop	{r7, pc}

0801d96a <lv_slider_get_max_value>:
 * Get the maximum value of a slider
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
 801d96a:	b580      	push	{r7, lr}
 801d96c:	b082      	sub	sp, #8
 801d96e:	af00      	add	r7, sp, #0
 801d970:	6078      	str	r0, [r7, #4]
    return lv_bar_get_max_value(slider);
 801d972:	6878      	ldr	r0, [r7, #4]
 801d974:	f7f7 fc5b 	bl	801522e <lv_bar_get_max_value>
 801d978:	4603      	mov	r3, r0
}
 801d97a:	4618      	mov	r0, r3
 801d97c:	3708      	adds	r7, #8
 801d97e:	46bd      	mov	sp, r7
 801d980:	bd80      	pop	{r7, pc}
	...

0801d984 <lv_slider_create>:
 * @param par pointer to an object, it will be the parent of the new slider
 * @param copy pointer to a slider object, if not NULL then the new object will be copied from it
 * @return pointer to the created slider
 */
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b086      	sub	sp, #24
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
 801d98c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("slider create started");

    /*Create the ancestor slider*/
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 801d98e:	6839      	ldr	r1, [r7, #0]
 801d990:	6878      	ldr	r0, [r7, #4]
 801d992:	f7f7 fa6d 	bl	8014e70 <lv_bar_create>
 801d996:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_slider);
 801d998:	697b      	ldr	r3, [r7, #20]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d100      	bne.n	801d9a0 <lv_slider_create+0x1c>
 801d99e:	e7fe      	b.n	801d99e <lv_slider_create+0x1a>
    if(new_slider == NULL) return NULL;
 801d9a0:	697b      	ldr	r3, [r7, #20]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d101      	bne.n	801d9aa <lv_slider_create+0x26>
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	e07a      	b.n	801daa0 <lv_slider_create+0x11c>

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 801d9aa:	4b3f      	ldr	r3, [pc, #252]	; (801daa8 <lv_slider_create+0x124>)
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d105      	bne.n	801d9be <lv_slider_create+0x3a>
 801d9b2:	6978      	ldr	r0, [r7, #20]
 801d9b4:	f7e9 fc5f 	bl	8007276 <lv_obj_get_design_cb>
 801d9b8:	4602      	mov	r2, r0
 801d9ba:	4b3b      	ldr	r3, [pc, #236]	; (801daa8 <lv_slider_create+0x124>)
 801d9bc:	601a      	str	r2, [r3, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 801d9be:	4b3b      	ldr	r3, [pc, #236]	; (801daac <lv_slider_create+0x128>)
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d105      	bne.n	801d9d2 <lv_slider_create+0x4e>
 801d9c6:	6978      	ldr	r0, [r7, #20]
 801d9c8:	f7e9 fc49 	bl	800725e <lv_obj_get_signal_cb>
 801d9cc:	4602      	mov	r2, r0
 801d9ce:	4b37      	ldr	r3, [pc, #220]	; (801daac <lv_slider_create+0x128>)
 801d9d0:	601a      	str	r2, [r3, #0]

    /*Allocate the slider type specific extended data*/
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 801d9d2:	211c      	movs	r1, #28
 801d9d4:	6978      	ldr	r0, [r7, #20]
 801d9d6:	f7e9 fa8d 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801d9da:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801d9dc:	693b      	ldr	r3, [r7, #16]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d100      	bne.n	801d9e4 <lv_slider_create+0x60>
 801d9e2:	e7fe      	b.n	801d9e2 <lv_slider_create+0x5e>
    if(ext == NULL) return NULL;
 801d9e4:	693b      	ldr	r3, [r7, #16]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d101      	bne.n	801d9ee <lv_slider_create+0x6a>
 801d9ea:	2300      	movs	r3, #0
 801d9ec:	e058      	b.n	801daa0 <lv_slider_create+0x11c>

    /*Initialize the allocated 'ext' */
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d9f4:	831a      	strh	r2, [r3, #24]
    ext->style_knob = &lv_style_pretty;
 801d9f6:	693b      	ldr	r3, [r7, #16]
 801d9f8:	4a2d      	ldr	r2, [pc, #180]	; (801dab0 <lv_slider_create+0x12c>)
 801d9fa:	615a      	str	r2, [r3, #20]
    ext->knob_in    = 0;
 801d9fc:	693a      	ldr	r2, [r7, #16]
 801d9fe:	7e93      	ldrb	r3, [r2, #26]
 801da00:	f36f 0300 	bfc	r3, #0, #1
 801da04:	7693      	strb	r3, [r2, #26]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 801da06:	492b      	ldr	r1, [pc, #172]	; (801dab4 <lv_slider_create+0x130>)
 801da08:	6978      	ldr	r0, [r7, #20]
 801da0a:	f7e9 fa57 	bl	8006ebc <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 801da0e:	492a      	ldr	r1, [pc, #168]	; (801dab8 <lv_slider_create+0x134>)
 801da10:	6978      	ldr	r0, [r7, #20]
 801da12:	f7e9 fa61 	bl	8006ed8 <lv_obj_set_design_cb>

    /*Init the new slider slider*/
    if(copy == NULL) {
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d12b      	bne.n	801da74 <lv_slider_create+0xf0>
        lv_obj_set_click(new_slider, true);
 801da1c:	2101      	movs	r1, #1
 801da1e:	6978      	ldr	r0, [r7, #20]
 801da20:	f7e9 f92b 	bl	8006c7a <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 801da24:	2110      	movs	r1, #16
 801da26:	6978      	ldr	r0, [r7, #20]
 801da28:	f7e9 f97c 	bl	8006d24 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801da2c:	f001 fab2 	bl	801ef94 <lv_theme_get_current>
 801da30:	60b8      	str	r0, [r7, #8]
        if(th) {
 801da32:	68bb      	ldr	r3, [r7, #8]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d015      	beq.n	801da64 <lv_slider_create+0xe0>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 801da38:	68bb      	ldr	r3, [r7, #8]
 801da3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da3c:	461a      	mov	r2, r3
 801da3e:	2100      	movs	r1, #0
 801da40:	6978      	ldr	r0, [r7, #20]
 801da42:	f000 f863 	bl	801db0c <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 801da46:	68bb      	ldr	r3, [r7, #8]
 801da48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da4a:	461a      	mov	r2, r3
 801da4c:	2101      	movs	r1, #1
 801da4e:	6978      	ldr	r0, [r7, #20]
 801da50:	f000 f85c 	bl	801db0c <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 801da54:	68bb      	ldr	r3, [r7, #8]
 801da56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801da58:	461a      	mov	r2, r3
 801da5a:	2102      	movs	r1, #2
 801da5c:	6978      	ldr	r0, [r7, #20]
 801da5e:	f000 f855 	bl	801db0c <lv_slider_set_style>
 801da62:	e01c      	b.n	801da9e <lv_slider_create+0x11a>
        } else {
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 801da64:	693b      	ldr	r3, [r7, #16]
 801da66:	695b      	ldr	r3, [r3, #20]
 801da68:	461a      	mov	r2, r3
 801da6a:	2102      	movs	r1, #2
 801da6c:	6978      	ldr	r0, [r7, #20]
 801da6e:	f000 f84d 	bl	801db0c <lv_slider_set_style>
 801da72:	e014      	b.n	801da9e <lv_slider_create+0x11a>
        }
    }
    /*Copy an existing slider*/
    else {
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801da74:	6838      	ldr	r0, [r7, #0]
 801da76:	f7e9 fc0a 	bl	800728e <lv_obj_get_ext_attr>
 801da7a:	60f8      	str	r0, [r7, #12]
        ext->style_knob            = copy_ext->style_knob;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	695a      	ldr	r2, [r3, #20]
 801da80:	693b      	ldr	r3, [r7, #16]
 801da82:	615a      	str	r2, [r3, #20]
        ext->knob_in               = copy_ext->knob_in;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	7e9b      	ldrb	r3, [r3, #26]
 801da88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801da8c:	b2d9      	uxtb	r1, r3
 801da8e:	693a      	ldr	r2, [r7, #16]
 801da90:	7e93      	ldrb	r3, [r2, #26]
 801da92:	f361 0300 	bfi	r3, r1, #0, #1
 801da96:	7693      	strb	r3, [r2, #26]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_slider);
 801da98:	6978      	ldr	r0, [r7, #20]
 801da9a:	f7e9 f8da 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("slider created");

    return new_slider;
 801da9e:	697b      	ldr	r3, [r7, #20]
}
 801daa0:	4618      	mov	r0, r3
 801daa2:	3718      	adds	r7, #24
 801daa4:	46bd      	mov	sp, r7
 801daa6:	bd80      	pop	{r7, pc}
 801daa8:	20002ae8 	.word	0x20002ae8
 801daac:	20002aec 	.word	0x20002aec
 801dab0:	20006b78 	.word	0x20006b78
 801dab4:	0801e4b1 	.word	0x0801e4b1
 801dab8:	0801dbeb 	.word	0x0801dbeb

0801dabc <lv_slider_set_knob_in>:
 * @param slider pointer to slider object
 * @param in true: the knob is drawn always in the slider;
 *           false: the knob can be out on the edges
 */
void lv_slider_set_knob_in(lv_obj_t * slider, bool in)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b084      	sub	sp, #16
 801dac0:	af00      	add	r7, sp, #0
 801dac2:	6078      	str	r0, [r7, #4]
 801dac4:	460b      	mov	r3, r1
 801dac6:	70fb      	strb	r3, [r7, #3]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801dac8:	6878      	ldr	r0, [r7, #4]
 801daca:	f7e9 fbe0 	bl	800728e <lv_obj_get_ext_attr>
 801dace:	60f8      	str	r0, [r7, #12]
    if(ext->knob_in == in) return;
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	7e9b      	ldrb	r3, [r3, #26]
 801dad4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	78fa      	ldrb	r2, [r7, #3]
 801dadc:	429a      	cmp	r2, r3
 801dade:	d011      	beq.n	801db04 <lv_slider_set_knob_in+0x48>

    ext->knob_in = in == false ? 0 : 1;
 801dae0:	78fb      	ldrb	r3, [r7, #3]
 801dae2:	f083 0301 	eor.w	r3, r3, #1
 801dae6:	b2db      	uxtb	r3, r3
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d001      	beq.n	801daf0 <lv_slider_set_knob_in+0x34>
 801daec:	2100      	movs	r1, #0
 801daee:	e000      	b.n	801daf2 <lv_slider_set_knob_in+0x36>
 801daf0:	2101      	movs	r1, #1
 801daf2:	68fa      	ldr	r2, [r7, #12]
 801daf4:	7e93      	ldrb	r3, [r2, #26]
 801daf6:	f361 0300 	bfi	r3, r1, #0, #1
 801dafa:	7693      	strb	r3, [r2, #26]
    lv_obj_invalidate(slider);
 801dafc:	6878      	ldr	r0, [r7, #4]
 801dafe:	f7e8 f99a 	bl	8005e36 <lv_obj_invalidate>
 801db02:	e000      	b.n	801db06 <lv_slider_set_knob_in+0x4a>
    if(ext->knob_in == in) return;
 801db04:	bf00      	nop
}
 801db06:	3710      	adds	r7, #16
 801db08:	46bd      	mov	sp, r7
 801db0a:	bd80      	pop	{r7, pc}

0801db0c <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b086      	sub	sp, #24
 801db10:	af00      	add	r7, sp, #0
 801db12:	60f8      	str	r0, [r7, #12]
 801db14:	460b      	mov	r3, r1
 801db16:	607a      	str	r2, [r7, #4]
 801db18:	72fb      	strb	r3, [r7, #11]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801db1a:	68f8      	ldr	r0, [r7, #12]
 801db1c:	f7e9 fbb7 	bl	800728e <lv_obj_get_ext_attr>
 801db20:	6178      	str	r0, [r7, #20]

    switch(type) {
 801db22:	7afb      	ldrb	r3, [r7, #11]
 801db24:	2b01      	cmp	r3, #1
 801db26:	d00a      	beq.n	801db3e <lv_slider_set_style+0x32>
 801db28:	2b02      	cmp	r3, #2
 801db2a:	d00e      	beq.n	801db4a <lv_slider_set_style+0x3e>
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	d000      	beq.n	801db32 <lv_slider_set_style+0x26>
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
 801db30:	e012      	b.n	801db58 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 801db32:	687a      	ldr	r2, [r7, #4]
 801db34:	2100      	movs	r1, #0
 801db36:	68f8      	ldr	r0, [r7, #12]
 801db38:	f7f7 fb30 	bl	801519c <lv_bar_set_style>
 801db3c:	e00c      	b.n	801db58 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 801db3e:	687a      	ldr	r2, [r7, #4]
 801db40:	2101      	movs	r1, #1
 801db42:	68f8      	ldr	r0, [r7, #12]
 801db44:	f7f7 fb2a 	bl	801519c <lv_bar_set_style>
 801db48:	e006      	b.n	801db58 <lv_slider_set_style+0x4c>
            ext->style_knob = style;
 801db4a:	697b      	ldr	r3, [r7, #20]
 801db4c:	687a      	ldr	r2, [r7, #4]
 801db4e:	615a      	str	r2, [r3, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 801db50:	68f8      	ldr	r0, [r7, #12]
 801db52:	f7e9 f9e5 	bl	8006f20 <lv_obj_refresh_ext_draw_pad>
            break;
 801db56:	bf00      	nop
}
 801db58:	bf00      	nop
 801db5a:	3718      	adds	r7, #24
 801db5c:	46bd      	mov	sp, r7
 801db5e:	bd80      	pop	{r7, pc}

0801db60 <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b084      	sub	sp, #16
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801db68:	6878      	ldr	r0, [r7, #4]
 801db6a:	f7e9 fb90 	bl	800728e <lv_obj_get_ext_attr>
 801db6e:	60f8      	str	r0, [r7, #12]

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801db76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801db7a:	d003      	beq.n	801db84 <lv_slider_get_value+0x24>
        return ext->drag_value;
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801db82:	e003      	b.n	801db8c <lv_slider_get_value+0x2c>
    else
        return lv_bar_get_value(slider);
 801db84:	6878      	ldr	r0, [r7, #4]
 801db86:	f7f7 fb2a 	bl	80151de <lv_bar_get_value>
 801db8a:	4603      	mov	r3, r0
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	3710      	adds	r7, #16
 801db90:	46bd      	mov	sp, r7
 801db92:	bd80      	pop	{r7, pc}

0801db94 <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b084      	sub	sp, #16
 801db98:	af00      	add	r7, sp, #0
 801db9a:	6078      	str	r0, [r7, #4]
 801db9c:	460b      	mov	r3, r1
 801db9e:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801dba0:	2300      	movs	r3, #0
 801dba2:	60fb      	str	r3, [r7, #12]
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 801dba4:	6878      	ldr	r0, [r7, #4]
 801dba6:	f7e9 fb72 	bl	800728e <lv_obj_get_ext_attr>
 801dbaa:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801dbac:	78fb      	ldrb	r3, [r7, #3]
 801dbae:	2b01      	cmp	r3, #1
 801dbb0:	d009      	beq.n	801dbc6 <lv_slider_get_style+0x32>
 801dbb2:	2b02      	cmp	r3, #2
 801dbb4:	d00d      	beq.n	801dbd2 <lv_slider_get_style+0x3e>
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d10f      	bne.n	801dbda <lv_slider_get_style+0x46>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
 801dbba:	2100      	movs	r1, #0
 801dbbc:	6878      	ldr	r0, [r7, #4]
 801dbbe:	f7f7 fb45 	bl	801524c <lv_bar_get_style>
 801dbc2:	60f8      	str	r0, [r7, #12]
 801dbc4:	e00c      	b.n	801dbe0 <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 801dbc6:	2101      	movs	r1, #1
 801dbc8:	6878      	ldr	r0, [r7, #4]
 801dbca:	f7f7 fb3f 	bl	801524c <lv_bar_get_style>
 801dbce:	60f8      	str	r0, [r7, #12]
 801dbd0:	e006      	b.n	801dbe0 <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 801dbd2:	68bb      	ldr	r3, [r7, #8]
 801dbd4:	695b      	ldr	r3, [r3, #20]
 801dbd6:	60fb      	str	r3, [r7, #12]
 801dbd8:	e002      	b.n	801dbe0 <lv_slider_get_style+0x4c>
        default: style = NULL; break;
 801dbda:	2300      	movs	r3, #0
 801dbdc:	60fb      	str	r3, [r7, #12]
 801dbde:	bf00      	nop
    }

    return style;
 801dbe0:	68fb      	ldr	r3, [r7, #12]
}
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	3710      	adds	r7, #16
 801dbe6:	46bd      	mov	sp, r7
 801dbe8:	bd80      	pop	{r7, pc}

0801dbea <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
 801dbea:	b590      	push	{r4, r7, lr}
 801dbec:	b0ad      	sub	sp, #180	; 0xb4
 801dbee:	af00      	add	r7, sp, #0
 801dbf0:	60f8      	str	r0, [r7, #12]
 801dbf2:	60b9      	str	r1, [r7, #8]
 801dbf4:	4613      	mov	r3, r2
 801dbf6:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801dbf8:	79fb      	ldrb	r3, [r7, #7]
 801dbfa:	2b02      	cmp	r3, #2
 801dbfc:	d102      	bne.n	801dc04 <lv_slider_design+0x1a>
        return false;
 801dbfe:	2300      	movs	r3, #0
 801dc00:	f000 bc52 	b.w	801e4a8 <lv_slider_design+0x8be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801dc04:	79fb      	ldrb	r3, [r7, #7]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	f040 844d 	bne.w	801e4a6 <lv_slider_design+0x8bc>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801dc0c:	68f8      	ldr	r0, [r7, #12]
 801dc0e:	f7e9 fb3e 	bl	800728e <lv_obj_get_ext_attr>
 801dc12:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 801dc16:	2100      	movs	r1, #0
 801dc18:	68f8      	ldr	r0, [r7, #12]
 801dc1a:	f7ff ffbb 	bl	801db94 <lv_slider_get_style>
 801dc1e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 801dc22:	2102      	movs	r1, #2
 801dc24:	68f8      	ldr	r0, [r7, #12]
 801dc26:	f7ff ffb5 	bl	801db94 <lv_slider_get_style>
 801dc2a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 801dc2e:	2101      	movs	r1, #1
 801dc30:	68f8      	ldr	r0, [r7, #12]
 801dc32:	f7ff ffaf 	bl	801db94 <lv_slider_get_style>
 801dc36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 801dc3a:	68f8      	ldr	r0, [r7, #12]
 801dc3c:	f7e9 fad9 	bl	80071f2 <lv_obj_get_opa_scale>
 801dc40:	4603      	mov	r3, r0
 801dc42:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	3310      	adds	r3, #16
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	f7ff fe40 	bl	801d8d0 <lv_area_get_width>
 801dc50:	4603      	mov	r3, r0
 801dc52:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	3310      	adds	r3, #16
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	f7ff fe4f 	bl	801d8fe <lv_area_get_height>
 801dc60:	4603      	mov	r3, r0
 801dc62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	f103 0210 	add.w	r2, r3, #16
 801dc6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dc70:	4611      	mov	r1, r2
 801dc72:	4618      	mov	r0, r3
 801dc74:	f7ff fe1e 	bl	801d8b4 <lv_area_copy>

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 801dc78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc7c:	8adb      	ldrh	r3, [r3, #22]
 801dc7e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 801dc82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc86:	8b1b      	ldrh	r3, [r3, #24]
 801dc88:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 801dc8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc90:	8b5b      	ldrh	r3, [r3, #26]
 801dc92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 801dc96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc9a:	8b9b      	ldrh	r3, [r3, #28]
 801dc9c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801dca0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801dca4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801dca8:	4413      	add	r3, r2
 801dcaa:	1d1c      	adds	r4, r3, #4
 801dcac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f7ff fe24 	bl	801d8fe <lv_area_get_height>
 801dcb6:	4603      	mov	r3, r0
 801dcb8:	429c      	cmp	r4, r3
 801dcba:	dd0d      	ble.n	801dcd8 <lv_slider_design+0xee>
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dcbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	f7ff fe1c 	bl	801d8fe <lv_area_get_height>
 801dcc6:	4603      	mov	r3, r0
 801dcc8:	3b04      	subs	r3, #4
 801dcca:	105b      	asrs	r3, r3, #1
 801dccc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            pad_bottom_bg = pad_top_bg;
 801dcd0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801dcd4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801dcd8:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801dcdc:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 801dce0:	4413      	add	r3, r2
 801dce2:	1d1c      	adds	r4, r3, #4
 801dce4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dce8:	4618      	mov	r0, r3
 801dcea:	f7ff fdf1 	bl	801d8d0 <lv_area_get_width>
 801dcee:	4603      	mov	r3, r0
 801dcf0:	429c      	cmp	r4, r3
 801dcf2:	dd13      	ble.n	801dd1c <lv_slider_design+0x132>
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dcf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f7ff fde9 	bl	801d8d0 <lv_area_get_width>
 801dcfe:	4603      	mov	r3, r0
 801dd00:	3b04      	subs	r3, #4
 801dd02:	105b      	asrs	r3, r3, #1
 801dd04:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dd08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7ff fddf 	bl	801d8d0 <lv_area_get_width>
 801dd12:	4603      	mov	r3, r0
 801dd14:	3b04      	subs	r3, #4
 801dd16:	105b      	asrs	r3, r3, #1
 801dd18:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 801dd1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801dd20:	7e9b      	ldrb	r3, [r3, #26]
 801dd22:	f003 0301 	and.w	r3, r3, #1
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d028      	beq.n	801dd7e <lv_slider_design+0x194>
            area_bg.x1 += pad_left_bg;
 801dd2c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dd30:	b29a      	uxth	r2, r3
 801dd32:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801dd36:	4413      	add	r3, r2
 801dd38:	b29b      	uxth	r3, r3
 801dd3a:	b21b      	sxth	r3, r3
 801dd3c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= pad_right_bg;
 801dd40:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801dd44:	b29a      	uxth	r2, r3
 801dd46:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801dd4a:	1ad3      	subs	r3, r2, r3
 801dd4c:	b29b      	uxth	r3, r3
 801dd4e:	b21b      	sxth	r3, r3
 801dd50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += pad_top_bg;
 801dd54:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dd58:	b29a      	uxth	r2, r3
 801dd5a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801dd5e:	4413      	add	r3, r2
 801dd60:	b29b      	uxth	r3, r3
 801dd62:	b21b      	sxth	r3, r3
 801dd64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= pad_bottom_bg;
 801dd68:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dd6c:	b29a      	uxth	r2, r3
 801dd6e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801dd72:	1ad3      	subs	r3, r2, r3
 801dd74:	b29b      	uxth	r3, r3
 801dd76:	b21b      	sxth	r3, r3
 801dd78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801dd7c:	e047      	b.n	801de0e <lv_slider_design+0x224>
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 801dd7e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dd82:	b29a      	uxth	r2, r3
 801dd84:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801dd88:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801dd8c:	4299      	cmp	r1, r3
 801dd8e:	da02      	bge.n	801dd96 <lv_slider_design+0x1ac>
 801dd90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801dd94:	e000      	b.n	801dd98 <lv_slider_design+0x1ae>
 801dd96:	2300      	movs	r3, #0
 801dd98:	4413      	add	r3, r2
 801dd9a:	b29b      	uxth	r3, r3
 801dd9c:	b21b      	sxth	r3, r3
 801dd9e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 801dda2:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801dda6:	b29a      	uxth	r2, r3
 801dda8:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801ddac:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ddb0:	4299      	cmp	r1, r3
 801ddb2:	da02      	bge.n	801ddba <lv_slider_design+0x1d0>
 801ddb4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801ddb8:	e000      	b.n	801ddbc <lv_slider_design+0x1d2>
 801ddba:	2300      	movs	r3, #0
 801ddbc:	1ad3      	subs	r3, r2, r3
 801ddbe:	b29b      	uxth	r3, r3
 801ddc0:	b21b      	sxth	r3, r3
 801ddc2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 801ddc6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801ddca:	b29a      	uxth	r2, r3
 801ddcc:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801ddd0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ddd4:	4299      	cmp	r1, r3
 801ddd6:	dd02      	ble.n	801ddde <lv_slider_design+0x1f4>
 801ddd8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801dddc:	e000      	b.n	801dde0 <lv_slider_design+0x1f6>
 801ddde:	2300      	movs	r3, #0
 801dde0:	4413      	add	r3, r2
 801dde2:	b29b      	uxth	r3, r3
 801dde4:	b21b      	sxth	r3, r3
 801dde6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 801ddea:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801ddee:	b29a      	uxth	r2, r3
 801ddf0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801ddf4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ddf8:	4299      	cmp	r1, r3
 801ddfa:	dd02      	ble.n	801de02 <lv_slider_design+0x218>
 801ddfc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801de00:	e000      	b.n	801de04 <lv_slider_design+0x21a>
 801de02:	2300      	movs	r3, #0
 801de04:	1ad3      	subs	r3, r2, r3
 801de06:	b29b      	uxth	r3, r3
 801de08:	b21b      	sxth	r3, r3
 801de0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the slider is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 801de0e:	68f8      	ldr	r0, [r7, #12]
 801de10:	f7e9 fa55 	bl	80072be <lv_obj_is_focused>
 801de14:	4603      	mov	r3, r0
 801de16:	2b00      	cmp	r3, #0
 801de18:	d012      	beq.n	801de40 <lv_slider_design+0x256>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801de1a:	f107 0314 	add.w	r3, r7, #20
 801de1e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801de22:	4618      	mov	r0, r3
 801de24:	f7ea fca2 	bl	800876c <lv_style_copy>
            style_tmp.body.border.width = 0;
 801de28:	2300      	movs	r3, #0
 801de2a:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801de2c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801de30:	f107 0214 	add.w	r2, r7, #20
 801de34:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801de38:	68b9      	ldr	r1, [r7, #8]
 801de3a:	f7ee fedc 	bl	800cbf6 <lv_draw_rect>
 801de3e:	e008      	b.n	801de52 <lv_slider_design+0x268>
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 801de40:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801de44:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801de48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801de4c:	68b9      	ldr	r1, [r7, #8]
 801de4e:	f7ee fed2 	bl	800cbf6 <lv_draw_rect>
        }
#endif

        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);
 801de52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801de56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de5a:	4611      	mov	r1, r2
 801de5c:	4618      	mov	r0, r3
 801de5e:	f7ff fd29 	bl	801d8b4 <lv_area_copy>

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 801de62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de66:	8adb      	ldrh	r3, [r3, #22]
 801de68:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 801de6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de70:	8b1b      	ldrh	r3, [r3, #24]
 801de72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 801de76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de7a:	8b5b      	ldrh	r3, [r3, #26]
 801de7c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 801de80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de84:	8b9b      	ldrh	r3, [r3, #28]
 801de86:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801de8a:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 801de8e:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801de92:	4413      	add	r3, r2
 801de94:	1d1c      	adds	r4, r3, #4
 801de96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de9a:	4618      	mov	r0, r3
 801de9c:	f7ff fd2f 	bl	801d8fe <lv_area_get_height>
 801dea0:	4603      	mov	r3, r0
 801dea2:	429c      	cmp	r4, r3
 801dea4:	dd0d      	ble.n	801dec2 <lv_slider_design+0x2d8>
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dea6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801deaa:	4618      	mov	r0, r3
 801deac:	f7ff fd27 	bl	801d8fe <lv_area_get_height>
 801deb0:	4603      	mov	r3, r0
 801deb2:	3b04      	subs	r3, #4
 801deb4:	105b      	asrs	r3, r3, #1
 801deb6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
            pad_bottom_indic = pad_top_indic;
 801deba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801debe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801dec2:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 801dec6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801deca:	4413      	add	r3, r2
 801decc:	1d1c      	adds	r4, r3, #4
 801dece:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ded2:	4618      	mov	r0, r3
 801ded4:	f7ff fcfc 	bl	801d8d0 <lv_area_get_width>
 801ded8:	4603      	mov	r3, r0
 801deda:	429c      	cmp	r4, r3
 801dedc:	dd0d      	ble.n	801defa <lv_slider_design+0x310>
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dede:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dee2:	4618      	mov	r0, r3
 801dee4:	f7ff fcf4 	bl	801d8d0 <lv_area_get_width>
 801dee8:	4603      	mov	r3, r0
 801deea:	3b04      	subs	r3, #4
 801deec:	105b      	asrs	r3, r3, #1
 801deee:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            pad_right_indic = pad_left_indic;
 801def2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801def6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        }

        area_indic.x1 += pad_left_indic;
 801defa:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801defe:	b29a      	uxth	r2, r3
 801df00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801df04:	4413      	add	r3, r2
 801df06:	b29b      	uxth	r3, r3
 801df08:	b21b      	sxth	r3, r3
 801df0a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        area_indic.x2 -= pad_right_indic;
 801df0e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801df12:	b29a      	uxth	r2, r3
 801df14:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 801df18:	1ad3      	subs	r3, r2, r3
 801df1a:	b29b      	uxth	r3, r3
 801df1c:	b21b      	sxth	r3, r3
 801df1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        area_indic.y1 += pad_top_indic;
 801df22:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801df26:	b29a      	uxth	r2, r3
 801df28:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801df2c:	4413      	add	r3, r2
 801df2e:	b29b      	uxth	r3, r3
 801df30:	b21b      	sxth	r3, r3
 801df32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        area_indic.y2 -= pad_bottom_indic;
 801df36:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801df3a:	b29a      	uxth	r2, r3
 801df3c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 801df40:	1ad3      	subs	r3, r2, r3
 801df42:	b29b      	uxth	r3, r3
 801df44:	b21b      	sxth	r3, r3
 801df46:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        lv_coord_t cur_value = lv_slider_get_value(slider);
 801df4a:	68f8      	ldr	r0, [r7, #12]
 801df4c:	f7ff fe08 	bl	801db60 <lv_slider_get_value>
 801df50:	4603      	mov	r3, r0
 801df52:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_coord_t min_value = lv_slider_get_min_value(slider);
 801df56:	68f8      	ldr	r0, [r7, #12]
 801df58:	f7ff fcfb 	bl	801d952 <lv_slider_get_min_value>
 801df5c:	4603      	mov	r3, r0
 801df5e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t max_value = lv_slider_get_max_value(slider);
 801df62:	68f8      	ldr	r0, [r7, #12]
 801df64:	f7ff fd01 	bl	801d96a <lv_slider_get_max_value>
 801df68:	4603      	mov	r3, r0
 801df6a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 801df6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801df72:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801df76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801df7a:	d004      	beq.n	801df86 <lv_slider_design+0x39c>
 801df7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801df80:	8b1b      	ldrh	r3, [r3, #24]
 801df82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        if(slider_w >= slider_h) {
 801df86:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801df8a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801df8e:	429a      	cmp	r2, r3
 801df90:	db7e      	blt.n	801e090 <lv_slider_design+0x4a6>
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
 801df92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801df96:	4618      	mov	r0, r3
 801df98:	f7ff fc9a 	bl	801d8d0 <lv_area_get_width>
 801df9c:	4603      	mov	r3, r0
 801df9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801dfa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801dfa6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dfae:	d03e      	beq.n	801e02e <lv_slider_design+0x444>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801dfb0:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801dfb4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801dfb8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801dfbc:	4611      	mov	r1, r2
 801dfbe:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801dfc2:	1a8a      	subs	r2, r1, r2
 801dfc4:	fb02 f203 	mul.w	r2, r2, r3
 801dfc8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801dfcc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801dfd0:	1acb      	subs	r3, r1, r3
 801dfd2:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_x =
 801dfd6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801dfda:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801dfde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801dfe2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801dfe6:	4611      	mov	r1, r2
 801dfe8:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801dfec:	1a8a      	subs	r2, r1, r2
 801dfee:	fb02 f203 	mul.w	r2, r2, r3
 801dff2:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801dff6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801dffa:	1acb      	subs	r3, r1, r3
 801dffc:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_x =
 801e000:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801e004:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 801e008:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 801e00c:	1ad3      	subs	r3, r2, r3
 801e00e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e012:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e016:	fb02 f303 	mul.w	r3, r2, r3
 801e01a:	121b      	asrs	r3, r3, #8
 801e01c:	b29a      	uxth	r2, r3
 801e01e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e022:	4413      	add	r3, r2
 801e024:	b29b      	uxth	r3, r3
 801e026:	b21b      	sxth	r3, r3
 801e028:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 801e02c:	e012      	b.n	801e054 <lv_slider_design+0x46a>
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 801e02e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801e032:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e036:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e03a:	1a8a      	subs	r2, r1, r2
 801e03c:	fb02 f203 	mul.w	r2, r2, r3
 801e040:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e044:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e048:	1acb      	subs	r3, r1, r3
 801e04a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e04e:	b21b      	sxth	r3, r3
 801e050:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 801e054:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801e058:	b29a      	uxth	r2, r3
 801e05a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e05e:	b29b      	uxth	r3, r3
 801e060:	4413      	add	r3, r2
 801e062:	b29b      	uxth	r3, r3
 801e064:	3b01      	subs	r3, #1
 801e066:	b29b      	uxth	r3, r3
 801e068:	b21b      	sxth	r3, r3
 801e06a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

            /*Draw the indicator but don't draw an ugly 1px wide rectangle on the left on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801e06e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801e072:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e076:	429a      	cmp	r2, r3
 801e078:	f000 8087 	beq.w	801e18a <lv_slider_design+0x5a0>
 801e07c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e080:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801e084:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e088:	68b9      	ldr	r1, [r7, #8]
 801e08a:	f7ee fdb4 	bl	800cbf6 <lv_draw_rect>
 801e08e:	e07c      	b.n	801e18a <lv_slider_design+0x5a0>

        } else {
            lv_coord_t indic_h = lv_area_get_height(&area_indic);
 801e090:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e094:	4618      	mov	r0, r3
 801e096:	f7ff fc32 	bl	801d8fe <lv_area_get_height>
 801e09a:	4603      	mov	r3, r0
 801e09c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e0a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0ac:	d03e      	beq.n	801e12c <lv_slider_design+0x542>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e0ae:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e0b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e0b6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e0ba:	4611      	mov	r1, r2
 801e0bc:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e0c0:	1a8a      	subs	r2, r1, r2
 801e0c2:	fb02 f203 	mul.w	r2, r2, r3
 801e0c6:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e0ca:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e0ce:	1acb      	subs	r3, r1, r3
 801e0d0:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_y =
 801e0d4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                lv_coord_t anim_end_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e0d8:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e0dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e0e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e0e4:	4611      	mov	r1, r2
 801e0e6:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e0ea:	1a8a      	subs	r2, r1, r2
 801e0ec:	fb02 f203 	mul.w	r2, r2, r3
 801e0f0:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e0f4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e0f8:	1acb      	subs	r3, r1, r3
 801e0fa:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_y =
 801e0fe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 801e102:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 801e106:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e10a:	1ad3      	subs	r3, r2, r3
 801e10c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e110:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e114:	fb02 f303 	mul.w	r3, r2, r3
 801e118:	121b      	asrs	r3, r3, #8
 801e11a:	b29a      	uxth	r2, r3
 801e11c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801e120:	4413      	add	r3, r2
 801e122:	b29b      	uxth	r3, r3
 801e124:	b21b      	sxth	r3, r3
 801e126:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 801e12a:	e012      	b.n	801e152 <lv_slider_design+0x568>
            } else
#endif
            {
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 801e12c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e130:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e134:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e138:	1a8a      	subs	r2, r1, r2
 801e13a:	fb02 f203 	mul.w	r2, r2, r3
 801e13e:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e142:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e146:	1acb      	subs	r3, r1, r3
 801e148:	fb92 f3f3 	sdiv	r3, r2, r3
 801e14c:	b21b      	sxth	r3, r3
 801e14e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 801e152:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e156:	b29a      	uxth	r2, r3
 801e158:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801e15c:	b29b      	uxth	r3, r3
 801e15e:	1ad3      	subs	r3, r2, r3
 801e160:	b29b      	uxth	r3, r3
 801e162:	3301      	adds	r3, #1
 801e164:	b29b      	uxth	r3, r3
 801e166:	b21b      	sxth	r3, r3
 801e168:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801e16c:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801e170:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e174:	429a      	cmp	r2, r3
 801e176:	d008      	beq.n	801e18a <lv_slider_design+0x5a0>
 801e178:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e17c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801e180:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e184:	68b9      	ldr	r1, [r7, #8]
 801e186:	f7ee fd36 	bl	800cbf6 <lv_draw_rect>
        /*Before the knob add the border if required*/
#if LV_USE_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 801e18a:	68f8      	ldr	r0, [r7, #12]
 801e18c:	f7e9 f897 	bl	80072be <lv_obj_is_focused>
 801e190:	4603      	mov	r3, r0
 801e192:	2b00      	cmp	r3, #0
 801e194:	d013      	beq.n	801e1be <lv_slider_design+0x5d4>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801e196:	f107 0314 	add.w	r3, r7, #20
 801e19a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801e19e:	4618      	mov	r0, r3
 801e1a0:	f7ea fae4 	bl	800876c <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801e1ac:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e1b0:	f107 0214 	add.w	r2, r7, #20
 801e1b4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801e1b8:	68b9      	ldr	r1, [r7, #8]
 801e1ba:	f7ee fd1c 	bl	800cbf6 <lv_draw_rect>
        }
#endif

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	f103 0210 	add.w	r2, r3, #16
 801e1c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e1c8:	4611      	mov	r1, r2
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	f7ff fb72 	bl	801d8b4 <lv_area_copy>

        if(slider_w >= slider_h) {
 801e1d0:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801e1d4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e1d8:	429a      	cmp	r2, r3
 801e1da:	f2c0 80ae 	blt.w	801e33a <lv_slider_design+0x750>
            if(ext->knob_in == 0) {
 801e1de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e1e2:	7e9b      	ldrb	r3, [r3, #26]
 801e1e4:	f003 0301 	and.w	r3, r3, #1
 801e1e8:	b2db      	uxtb	r3, r3
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d11b      	bne.n	801e226 <lv_slider_design+0x63c>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801e1ee:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e1f2:	b29a      	uxth	r2, r3
 801e1f4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e1f8:	0fd9      	lsrs	r1, r3, #31
 801e1fa:	440b      	add	r3, r1
 801e1fc:	105b      	asrs	r3, r3, #1
 801e1fe:	b21b      	sxth	r3, r3
 801e200:	b29b      	uxth	r3, r3
 801e202:	1ad3      	subs	r3, r2, r3
 801e204:	b29b      	uxth	r3, r3
 801e206:	b21b      	sxth	r3, r3
 801e208:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801e20c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e210:	b29a      	uxth	r2, r3
 801e212:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e216:	4413      	add	r3, r2
 801e218:	b29b      	uxth	r3, r3
 801e21a:	3b01      	subs	r3, #1
 801e21c:	b29b      	uxth	r3, r3
 801e21e:	b21b      	sxth	r3, r3
 801e220:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801e224:	e07e      	b.n	801e324 <lv_slider_design+0x73a>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e22a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e22e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e232:	d048      	beq.n	801e2c6 <lv_slider_design+0x6dc>
                    lv_coord_t w = slider_w - slider_h - 1;
 801e234:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 801e238:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e23c:	1ad3      	subs	r3, r2, r3
 801e23e:	b29b      	uxth	r3, r3
 801e240:	3b01      	subs	r3, #1
 801e242:	b29b      	uxth	r3, r3
 801e244:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e248:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e24c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e250:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e254:	4611      	mov	r1, r2
 801e256:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e25a:	1a8a      	subs	r2, r1, r2
 801e25c:	fb02 f203 	mul.w	r2, r2, r3
 801e260:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e264:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e268:	1acb      	subs	r3, r1, r3
 801e26a:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 801e26e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e272:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e276:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e27a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e27e:	4611      	mov	r1, r2
 801e280:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e284:	1a8a      	subs	r2, r1, r2
 801e286:	fb02 f203 	mul.w	r2, r2, r3
 801e28a:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e28e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e292:	1acb      	subs	r3, r1, r3
 801e294:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 801e298:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801e29c:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801e2a0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e2a4:	1ad3      	subs	r3, r2, r3
 801e2a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e2aa:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e2ae:	fb02 f303 	mul.w	r3, r2, r3
 801e2b2:	121b      	asrs	r3, r3, #8
 801e2b4:	b29a      	uxth	r2, r3
 801e2b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801e2ba:	4413      	add	r3, r2
 801e2bc:	b29b      	uxth	r3, r3
 801e2be:	b21b      	sxth	r3, r3
 801e2c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801e2c4:	e016      	b.n	801e2f4 <lv_slider_design+0x70a>
                } else
#endif
                {
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 801e2c6:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801e2ca:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e2ce:	1ad3      	subs	r3, r2, r3
 801e2d0:	3b01      	subs	r3, #1
 801e2d2:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e2d6:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e2da:	1a8a      	subs	r2, r1, r2
 801e2dc:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 801e2e0:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e2e4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e2e8:	1acb      	subs	r3, r1, r3
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 801e2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2ee:	b21b      	sxth	r3, r3
 801e2f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                }

                knob_area.x1 += slider->coords.x1;
 801e2f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e2f8:	b29a      	uxth	r2, r3
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e300:	b29b      	uxth	r3, r3
 801e302:	4413      	add	r3, r2
 801e304:	b29b      	uxth	r3, r3
 801e306:	b21b      	sxth	r3, r3
 801e308:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801e30c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e310:	b29a      	uxth	r2, r3
 801e312:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e316:	4413      	add	r3, r2
 801e318:	b29b      	uxth	r3, r3
 801e31a:	3b01      	subs	r3, #1
 801e31c:	b29b      	uxth	r3, r3
 801e31e:	b21b      	sxth	r3, r3
 801e320:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            }

            knob_area.y1 = slider->coords.y1;
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e32a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            knob_area.y2 = slider->coords.y2;
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e334:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e338:	e0ac      	b.n	801e494 <lv_slider_design+0x8aa>
        } else {
            if(ext->knob_in == 0) {
 801e33a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e33e:	7e9b      	ldrb	r3, [r3, #26]
 801e340:	f003 0301 	and.w	r3, r3, #1
 801e344:	b2db      	uxtb	r3, r3
 801e346:	2b00      	cmp	r3, #0
 801e348:	d11b      	bne.n	801e382 <lv_slider_design+0x798>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801e34a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801e34e:	b29a      	uxth	r2, r3
 801e350:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801e354:	0fd9      	lsrs	r1, r3, #31
 801e356:	440b      	add	r3, r1
 801e358:	105b      	asrs	r3, r3, #1
 801e35a:	b21b      	sxth	r3, r3
 801e35c:	b29b      	uxth	r3, r3
 801e35e:	1ad3      	subs	r3, r2, r3
 801e360:	b29b      	uxth	r3, r3
 801e362:	b21b      	sxth	r3, r3
 801e364:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801e368:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801e36c:	b29a      	uxth	r2, r3
 801e36e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e372:	4413      	add	r3, r2
 801e374:	b29b      	uxth	r3, r3
 801e376:	3b01      	subs	r3, #1
 801e378:	b29b      	uxth	r3, r3
 801e37a:	b21b      	sxth	r3, r3
 801e37c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e380:	e07e      	b.n	801e480 <lv_slider_design+0x896>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e386:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e38e:	d048      	beq.n	801e422 <lv_slider_design+0x838>
                    lv_coord_t h = slider_h - slider_w - 1;
 801e390:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801e394:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e398:	1ad3      	subs	r3, r2, r3
 801e39a:	b29b      	uxth	r3, r3
 801e39c:	3b01      	subs	r3, #1
 801e39e:	b29b      	uxth	r3, r3
 801e3a0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e3a4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e3a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e3ac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e3b0:	4611      	mov	r1, r2
 801e3b2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e3b6:	1a8a      	subs	r2, r1, r2
 801e3b8:	fb02 f203 	mul.w	r2, r2, r3
 801e3bc:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e3c0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e3c4:	1acb      	subs	r3, r1, r3
 801e3c6:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 801e3ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e3ce:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e3d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e3d6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e3da:	4611      	mov	r1, r2
 801e3dc:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e3e0:	1a8a      	subs	r2, r1, r2
 801e3e2:	fb02 f203 	mul.w	r2, r2, r3
 801e3e6:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e3ea:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e3ee:	1acb      	subs	r3, r1, r3
 801e3f0:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 801e3f4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801e3f8:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801e3fc:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e400:	1ad3      	subs	r3, r2, r3
 801e402:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e406:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e40a:	fb02 f303 	mul.w	r3, r2, r3
 801e40e:	121b      	asrs	r3, r3, #8
 801e410:	b29a      	uxth	r2, r3
 801e412:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 801e416:	4413      	add	r3, r2
 801e418:	b29b      	uxth	r3, r3
 801e41a:	b21b      	sxth	r3, r3
 801e41c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e420:	e016      	b.n	801e450 <lv_slider_design+0x866>
                } else
#endif
                {
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 801e422:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801e426:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801e42a:	1ad3      	subs	r3, r2, r3
 801e42c:	3b01      	subs	r3, #1
 801e42e:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e432:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e436:	1a8a      	subs	r2, r1, r2
 801e438:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 801e43c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e440:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e444:	1acb      	subs	r3, r1, r3
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 801e446:	fb92 f3f3 	sdiv	r3, r2, r3
 801e44a:	b21b      	sxth	r3, r3
 801e44c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                }

                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e456:	b29a      	uxth	r2, r3
 801e458:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801e45c:	b29b      	uxth	r3, r3
 801e45e:	1ad3      	subs	r3, r2, r3
 801e460:	b29b      	uxth	r3, r3
 801e462:	b21b      	sxth	r3, r3
 801e464:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801e468:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801e46c:	b29a      	uxth	r2, r3
 801e46e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e472:	1ad3      	subs	r3, r2, r3
 801e474:	b29b      	uxth	r3, r3
 801e476:	3b01      	subs	r3, #1
 801e478:	b29b      	uxth	r3, r3
 801e47a:	b21b      	sxth	r3, r3
 801e47c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }
            knob_area.x1 = slider->coords.x1;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e486:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            knob_area.x2 = slider->coords.x2;
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801e490:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 801e494:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e498:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801e49c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e4a0:	68b9      	ldr	r1, [r7, #8]
 801e4a2:	f7ee fba8 	bl	800cbf6 <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801e4a6:	2301      	movs	r3, #1
}
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	37b4      	adds	r7, #180	; 0xb4
 801e4ac:	46bd      	mov	sp, r7
 801e4ae:	bd90      	pop	{r4, r7, pc}

0801e4b0 <lv_slider_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
 801e4b0:	b590      	push	{r4, r7, lr}
 801e4b2:	b093      	sub	sp, #76	; 0x4c
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	60f8      	str	r0, [r7, #12]
 801e4b8:	460b      	mov	r3, r1
 801e4ba:	607a      	str	r2, [r7, #4]
 801e4bc:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 801e4be:	4bba      	ldr	r3, [pc, #744]	; (801e7a8 <lv_slider_signal+0x2f8>)
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	7af9      	ldrb	r1, [r7, #11]
 801e4c4:	687a      	ldr	r2, [r7, #4]
 801e4c6:	68f8      	ldr	r0, [r7, #12]
 801e4c8:	4798      	blx	r3
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(res != LV_RES_OK) return res;
 801e4d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	d002      	beq.n	801e4de <lv_slider_signal+0x2e>
 801e4d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e4dc:	e233      	b.n	801e946 <lv_slider_signal+0x496>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801e4de:	68f8      	ldr	r0, [r7, #12]
 801e4e0:	f7e8 fed5 	bl	800728e <lv_obj_get_ext_attr>
 801e4e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 801e4e6:	68f8      	ldr	r0, [r7, #12]
 801e4e8:	f7e8 fde6 	bl	80070b8 <lv_obj_get_width>
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t h = lv_obj_get_height(slider);
 801e4f0:	68f8      	ldr	r0, [r7, #12]
 801e4f2:	f7e8 fdef 	bl	80070d4 <lv_obj_get_height>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	873b      	strh	r3, [r7, #56]	; 0x38

    if(sign == LV_SIGNAL_PRESSED) {
 801e4fa:	7afb      	ldrb	r3, [r7, #11]
 801e4fc:	2b07      	cmp	r3, #7
 801e4fe:	d107      	bne.n	801e510 <lv_slider_signal+0x60>
        ext->drag_value = lv_slider_get_value(slider);
 801e500:	68f8      	ldr	r0, [r7, #12]
 801e502:	f7ff fb2d 	bl	801db60 <lv_slider_get_value>
 801e506:	4603      	mov	r3, r0
 801e508:	461a      	mov	r2, r3
 801e50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e50c:	831a      	strh	r2, [r3, #24]
 801e50e:	e218      	b.n	801e942 <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801e510:	7afb      	ldrb	r3, [r7, #11]
 801e512:	2b08      	cmp	r3, #8
 801e514:	f040 80b4 	bne.w	801e680 <lv_slider_signal+0x1d0>
        lv_indev_get_point(param, &p);
 801e518:	f107 0310 	add.w	r3, r7, #16
 801e51c:	4619      	mov	r1, r3
 801e51e:	6878      	ldr	r0, [r7, #4]
 801e520:	f7e7 f85c 	bl	80055dc <lv_indev_get_point>
        int16_t tmp = 0;
 801e524:	2300      	movs	r3, #0
 801e526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(w > h) {
 801e52a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801e52e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e532:	429a      	cmp	r2, r3
 801e534:	dd37      	ble.n	801e5a6 <lv_slider_signal+0xf6>
            lv_coord_t knob_w = h;
 801e536:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801e538:	82fb      	strh	r3, [r7, #22]
            p.x -=
 801e53a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e53e:	b29a      	uxth	r2, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 801e540:	68fb      	ldr	r3, [r7, #12]
 801e542:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e546:	b299      	uxth	r1, r3
 801e548:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e54c:	0fd8      	lsrs	r0, r3, #31
 801e54e:	4403      	add	r3, r0
 801e550:	105b      	asrs	r3, r3, #1
 801e552:	b21b      	sxth	r3, r3
 801e554:	b29b      	uxth	r3, r3
 801e556:	440b      	add	r3, r1
 801e558:	b29b      	uxth	r3, r3
            p.x -=
 801e55a:	1ad3      	subs	r3, r2, r3
 801e55c:	b29b      	uxth	r3, r3
 801e55e:	b21b      	sxth	r3, r3
 801e560:	823b      	strh	r3, [r7, #16]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801e562:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e566:	461a      	mov	r2, r3
 801e568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e56a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e56e:	4619      	mov	r1, r3
 801e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e576:	1acb      	subs	r3, r1, r3
 801e578:	3301      	adds	r3, #1
 801e57a:	fb03 f202 	mul.w	r2, r3, r2
 801e57e:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 801e582:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e586:	1acb      	subs	r3, r1, r3
 801e588:	fb92 f3f3 	sdiv	r3, r2, r3
 801e58c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp += ext->bar.min_value;
 801e590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e592:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e596:	b29a      	uxth	r2, r3
 801e598:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e59c:	4413      	add	r3, r2
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801e5a4:	e036      	b.n	801e614 <lv_slider_signal+0x164>
        } else {
            lv_coord_t knob_h = w;
 801e5a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e5a8:	833b      	strh	r3, [r7, #24]
            p.y -=
 801e5aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e5ae:	b29a      	uxth	r2, r3
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e5b6:	b299      	uxth	r1, r3
 801e5b8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801e5bc:	0fd8      	lsrs	r0, r3, #31
 801e5be:	4403      	add	r3, r0
 801e5c0:	105b      	asrs	r3, r3, #1
 801e5c2:	b21b      	sxth	r3, r3
 801e5c4:	b29b      	uxth	r3, r3
 801e5c6:	440b      	add	r3, r1
 801e5c8:	b29b      	uxth	r3, r3
            p.y -=
 801e5ca:	1ad3      	subs	r3, r2, r3
 801e5cc:	b29b      	uxth	r3, r3
 801e5ce:	b21b      	sxth	r3, r3
 801e5d0:	827b      	strh	r3, [r7, #18]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801e5d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e5d6:	461a      	mov	r2, r3
 801e5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e5de:	4619      	mov	r1, r3
 801e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e5e6:	1acb      	subs	r3, r1, r3
 801e5e8:	3301      	adds	r3, #1
 801e5ea:	fb03 f202 	mul.w	r2, r3, r2
 801e5ee:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 801e5f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e5f6:	1acb      	subs	r3, r1, r3
 801e5f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 801e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e606:	b29a      	uxth	r2, r3
 801e608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e60c:	1ad3      	subs	r3, r2, r3
 801e60e:	b29b      	uxth	r3, r3
 801e610:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        if(tmp < ext->bar.min_value)
 801e614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e61a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e61e:	429a      	cmp	r2, r3
 801e620:	da04      	bge.n	801e62c <lv_slider_signal+0x17c>
            tmp = ext->bar.min_value;
 801e622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e624:	885b      	ldrh	r3, [r3, #2]
 801e626:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801e62a:	e00a      	b.n	801e642 <lv_slider_signal+0x192>
        else if(tmp > ext->bar.max_value)
 801e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e62e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e632:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e636:	429a      	cmp	r2, r3
 801e638:	dd03      	ble.n	801e642 <lv_slider_signal+0x192>
            tmp = ext->bar.max_value;
 801e63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e63c:	889b      	ldrh	r3, [r3, #4]
 801e63e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if(tmp != ext->drag_value) {
 801e642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e644:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e648:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e64c:	429a      	cmp	r2, r3
 801e64e:	f000 8178 	beq.w	801e942 <lv_slider_signal+0x492>
            ext->drag_value = tmp;
 801e652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e654:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e658:	831a      	strh	r2, [r3, #24]
            lv_obj_invalidate(slider);
 801e65a:	68f8      	ldr	r0, [r7, #12]
 801e65c:	f7e7 fbeb 	bl	8005e36 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e660:	2200      	movs	r2, #0
 801e662:	210e      	movs	r1, #14
 801e664:	68f8      	ldr	r0, [r7, #12]
 801e666:	f7e8 fb98 	bl	8006d9a <lv_event_send>
 801e66a:	4603      	mov	r3, r0
 801e66c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e670:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e674:	2b01      	cmp	r3, #1
 801e676:	f000 8164 	beq.w	801e942 <lv_slider_signal+0x492>
 801e67a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e67e:	e162      	b.n	801e946 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e680:	7afb      	ldrb	r3, [r7, #11]
 801e682:	2b0a      	cmp	r3, #10
 801e684:	d002      	beq.n	801e68c <lv_slider_signal+0x1dc>
 801e686:	7afb      	ldrb	r3, [r7, #11]
 801e688:	2b09      	cmp	r3, #9
 801e68a:	d12f      	bne.n	801e6ec <lv_slider_signal+0x23c>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 801e68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e68e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e692:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e696:	d007      	beq.n	801e6a8 <lv_slider_signal+0x1f8>
 801e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e69a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e69e:	2200      	movs	r2, #0
 801e6a0:	4619      	mov	r1, r3
 801e6a2:	68f8      	ldr	r0, [r7, #12]
 801e6a4:	f7ff f942 	bl	801d92c <lv_slider_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801e6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801e6ae:	831a      	strh	r2, [r3, #24]

#if LV_USE_GROUP
        /*Leave edit mode if released. (No need to wait for LONG_PRESS) */
        lv_group_t * g             = lv_obj_get_group(slider);
 801e6b0:	68f8      	ldr	r0, [r7, #12]
 801e6b2:	f7e8 fdf8 	bl	80072a6 <lv_obj_get_group>
 801e6b6:	61f8      	str	r0, [r7, #28]
        bool editing               = lv_group_get_editing(g);
 801e6b8:	69f8      	ldr	r0, [r7, #28]
 801e6ba:	f7e6 fdee 	bl	800529a <lv_group_get_editing>
 801e6be:	4603      	mov	r3, r0
 801e6c0:	76fb      	strb	r3, [r7, #27]
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e6c2:	f7e6 ff2f 	bl	8005524 <lv_indev_get_act>
 801e6c6:	4603      	mov	r3, r0
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	f7e6 ff37 	bl	800553c <lv_indev_get_type>
 801e6ce:	4603      	mov	r3, r0
 801e6d0:	76bb      	strb	r3, [r7, #26]
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e6d2:	7ebb      	ldrb	r3, [r7, #26]
 801e6d4:	2b04      	cmp	r3, #4
 801e6d6:	f040 8133 	bne.w	801e940 <lv_slider_signal+0x490>
            if(editing) lv_group_set_editing(g, false);
 801e6da:	7efb      	ldrb	r3, [r7, #27]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	f000 812f 	beq.w	801e940 <lv_slider_signal+0x490>
 801e6e2:	2100      	movs	r1, #0
 801e6e4:	69f8      	ldr	r0, [r7, #28]
 801e6e6:	f7e6 fd4f 	bl	8005188 <lv_group_set_editing>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e6ea:	e129      	b.n	801e940 <lv_slider_signal+0x490>
        }
#endif

    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801e6ec:	7afb      	ldrb	r3, [r7, #11]
 801e6ee:	2b02      	cmp	r3, #2
 801e6f0:	d11d      	bne.n	801e72e <lv_slider_signal+0x27e>
        /* The knob size depends on slider size.
         * During the drawing method the ext. size is used by the knob so refresh the ext. size.*/
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e6f2:	68f8      	ldr	r0, [r7, #12]
 801e6f4:	f7e8 fce0 	bl	80070b8 <lv_obj_get_width>
 801e6f8:	4603      	mov	r3, r0
 801e6fa:	461c      	mov	r4, r3
 801e6fc:	6878      	ldr	r0, [r7, #4]
 801e6fe:	f7ff f8e7 	bl	801d8d0 <lv_area_get_width>
 801e702:	4603      	mov	r3, r0
 801e704:	429c      	cmp	r4, r3
 801e706:	d10b      	bne.n	801e720 <lv_slider_signal+0x270>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 801e708:	68f8      	ldr	r0, [r7, #12]
 801e70a:	f7e8 fce3 	bl	80070d4 <lv_obj_get_height>
 801e70e:	4603      	mov	r3, r0
 801e710:	461c      	mov	r4, r3
 801e712:	6878      	ldr	r0, [r7, #4]
 801e714:	f7ff f8f3 	bl	801d8fe <lv_area_get_height>
 801e718:	4603      	mov	r3, r0
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e71a:	429c      	cmp	r4, r3
 801e71c:	f000 8111 	beq.w	801e942 <lv_slider_signal+0x492>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 801e720:	68fb      	ldr	r3, [r7, #12]
 801e722:	69db      	ldr	r3, [r3, #28]
 801e724:	2200      	movs	r2, #0
 801e726:	2105      	movs	r1, #5
 801e728:	68f8      	ldr	r0, [r7, #12]
 801e72a:	4798      	blx	r3
 801e72c:	e109      	b.n	801e942 <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801e72e:	7afb      	ldrb	r3, [r7, #11]
 801e730:	2b05      	cmp	r3, #5
 801e732:	f040 8087 	bne.w	801e844 <lv_slider_signal+0x394>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 801e736:	2100      	movs	r1, #0
 801e738:	68f8      	ldr	r0, [r7, #12]
 801e73a:	f7ff fa2b 	bl	801db94 <lv_slider_get_style>
 801e73e:	62b8      	str	r0, [r7, #40]	; 0x28
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 801e740:	2102      	movs	r1, #2
 801e742:	68f8      	ldr	r0, [r7, #12]
 801e744:	f7ff fa26 	bl	801db94 <lv_slider_get_style>
 801e748:	6278      	str	r0, [r7, #36]	; 0x24

        lv_coord_t shadow_w = knob_style->body.shadow.width;
 801e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e74c:	8a5b      	ldrh	r3, [r3, #18]
 801e74e:	847b      	strh	r3, [r7, #34]	; 0x22
        if(ext->knob_in == 0) {
 801e750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e752:	7e9b      	ldrb	r3, [r3, #26]
 801e754:	f003 0301 	and.w	r3, r3, #1
 801e758:	b2db      	uxtb	r3, r3
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d126      	bne.n	801e7ac <lv_slider_signal+0x2fc>
            /* The smaller size is the knob diameter*/
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 801e75e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e762:	0fda      	lsrs	r2, r3, #31
 801e764:	4413      	add	r3, r2
 801e766:	105b      	asrs	r3, r3, #1
 801e768:	b21b      	sxth	r3, r3
 801e76a:	1c5a      	adds	r2, r3, #1
 801e76c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e770:	441a      	add	r2, r3
 801e772:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801e776:	0fd9      	lsrs	r1, r3, #31
 801e778:	440b      	add	r3, r1
 801e77a:	105b      	asrs	r3, r3, #1
 801e77c:	b21b      	sxth	r3, r3
 801e77e:	1c59      	adds	r1, r3, #1
 801e780:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e784:	440b      	add	r3, r1
 801e786:	4293      	cmp	r3, r2
 801e788:	bfa8      	it	ge
 801e78a:	4613      	movge	r3, r2
 801e78c:	843b      	strh	r3, [r7, #32]
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 801e78e:	68fb      	ldr	r3, [r7, #12]
 801e790:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e798:	429a      	cmp	r2, r3
 801e79a:	f340 80d2 	ble.w	801e942 <lv_slider_signal+0x492>
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	8c3a      	ldrh	r2, [r7, #32]
 801e7a2:	869a      	strh	r2, [r3, #52]	; 0x34
 801e7a4:	e0cd      	b.n	801e942 <lv_slider_signal+0x492>
 801e7a6:	bf00      	nop
 801e7a8:	20002aec 	.word	0x20002aec
        } else {
            lv_coord_t pad = 0;
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.top);
 801e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e7b8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7bc:	4293      	cmp	r3, r2
 801e7be:	bfa8      	it	ge
 801e7c0:	4613      	movge	r3, r2
 801e7c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 801e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e7cc:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7d0:	4293      	cmp	r3, r2
 801e7d2:	bfa8      	it	ge
 801e7d4:	4613      	movge	r3, r2
 801e7d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 801e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e7e0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7e4:	4293      	cmp	r3, r2
 801e7e6:	bfa8      	it	ge
 801e7e8:	4613      	movge	r3, r2
 801e7ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 801e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7f0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801e7f4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7f8:	4293      	cmp	r3, r2
 801e7fa:	bfa8      	it	ge
 801e7fc:	4613      	movge	r3, r2
 801e7fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(pad < 0) pad = -pad;
 801e802:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801e806:	2b00      	cmp	r3, #0
 801e808:	da05      	bge.n	801e816 <lv_slider_signal+0x366>
 801e80a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e80e:	425b      	negs	r3, r3
 801e810:	b29b      	uxth	r3, r3
 801e812:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e81c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e820:	429a      	cmp	r2, r3
 801e822:	dd03      	ble.n	801e82c <lv_slider_signal+0x37c>
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e82a:	869a      	strh	r2, [r3, #52]	; 0x34

            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e832:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801e836:	429a      	cmp	r2, r3
 801e838:	f340 8083 	ble.w	801e942 <lv_slider_signal+0x492>
 801e83c:	68fb      	ldr	r3, [r7, #12]
 801e83e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e840:	869a      	strh	r2, [r3, #52]	; 0x34
 801e842:	e07e      	b.n	801e942 <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 801e844:	7afb      	ldrb	r3, [r7, #11]
 801e846:	2b11      	cmp	r3, #17
 801e848:	d14f      	bne.n	801e8ea <lv_slider_signal+0x43a>
        char c = *((char *)param);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	781b      	ldrb	r3, [r3, #0]
 801e84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801e852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e854:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801e858:	831a      	strh	r2, [r3, #24]

        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801e85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e85e:	2b13      	cmp	r3, #19
 801e860:	d003      	beq.n	801e86a <lv_slider_signal+0x3ba>
 801e862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e866:	2b11      	cmp	r3, #17
 801e868:	d11b      	bne.n	801e8a2 <lv_slider_signal+0x3f2>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 801e86a:	68f8      	ldr	r0, [r7, #12]
 801e86c:	f7ff f978 	bl	801db60 <lv_slider_get_value>
 801e870:	4603      	mov	r3, r0
 801e872:	b29b      	uxth	r3, r3
 801e874:	3301      	adds	r3, #1
 801e876:	b29b      	uxth	r3, r3
 801e878:	b21b      	sxth	r3, r3
 801e87a:	2201      	movs	r2, #1
 801e87c:	4619      	mov	r1, r3
 801e87e:	68f8      	ldr	r0, [r7, #12]
 801e880:	f7ff f854 	bl	801d92c <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e884:	2200      	movs	r2, #0
 801e886:	210e      	movs	r1, #14
 801e888:	68f8      	ldr	r0, [r7, #12]
 801e88a:	f7e8 fa86 	bl	8006d9a <lv_event_send>
 801e88e:	4603      	mov	r3, r0
 801e890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e898:	2b01      	cmp	r3, #1
 801e89a:	d052      	beq.n	801e942 <lv_slider_signal+0x492>
 801e89c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e8a0:	e051      	b.n	801e946 <lv_slider_signal+0x496>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801e8a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e8a6:	2b14      	cmp	r3, #20
 801e8a8:	d003      	beq.n	801e8b2 <lv_slider_signal+0x402>
 801e8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e8ae:	2b12      	cmp	r3, #18
 801e8b0:	d147      	bne.n	801e942 <lv_slider_signal+0x492>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 801e8b2:	68f8      	ldr	r0, [r7, #12]
 801e8b4:	f7ff f954 	bl	801db60 <lv_slider_get_value>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	b29b      	uxth	r3, r3
 801e8bc:	3b01      	subs	r3, #1
 801e8be:	b29b      	uxth	r3, r3
 801e8c0:	b21b      	sxth	r3, r3
 801e8c2:	2201      	movs	r2, #1
 801e8c4:	4619      	mov	r1, r3
 801e8c6:	68f8      	ldr	r0, [r7, #12]
 801e8c8:	f7ff f830 	bl	801d92c <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e8cc:	2200      	movs	r2, #0
 801e8ce:	210e      	movs	r1, #14
 801e8d0:	68f8      	ldr	r0, [r7, #12]
 801e8d2:	f7e8 fa62 	bl	8006d9a <lv_event_send>
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e8dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e8e0:	2b01      	cmp	r3, #1
 801e8e2:	d02e      	beq.n	801e942 <lv_slider_signal+0x492>
 801e8e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e8e8:	e02d      	b.n	801e946 <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801e8ea:	7afb      	ldrb	r3, [r7, #11]
 801e8ec:	2b12      	cmp	r3, #18
 801e8ee:	d105      	bne.n	801e8fc <lv_slider_signal+0x44c>
        bool * editable = (bool *)param;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	633b      	str	r3, [r7, #48]	; 0x30
        *editable       = true;
 801e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8f6:	2201      	movs	r2, #1
 801e8f8:	701a      	strb	r2, [r3, #0]
 801e8fa:	e022      	b.n	801e942 <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801e8fc:	7afb      	ldrb	r3, [r7, #11]
 801e8fe:	2b06      	cmp	r3, #6
 801e900:	d11f      	bne.n	801e942 <lv_slider_signal+0x492>
        lv_obj_type_t * buf = param;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e906:	2300      	movs	r3, #0
 801e908:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 801e90c:	e00b      	b.n	801e926 <lv_slider_signal+0x476>
            if(buf->type[i] == NULL) break;
 801e90e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801e912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d009      	beq.n	801e930 <lv_slider_signal+0x480>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e91c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801e920:	3301      	adds	r3, #1
 801e922:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 801e926:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801e92a:	2b06      	cmp	r3, #6
 801e92c:	d9ef      	bls.n	801e90e <lv_slider_signal+0x45e>
 801e92e:	e000      	b.n	801e932 <lv_slider_signal+0x482>
            if(buf->type[i] == NULL) break;
 801e930:	bf00      	nop
        }
        buf->type[i] = "lv_slider";
 801e932:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801e936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e938:	4905      	ldr	r1, [pc, #20]	; (801e950 <lv_slider_signal+0x4a0>)
 801e93a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e93e:	e000      	b.n	801e942 <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e940:	bf00      	nop
    }

    return res;
 801e942:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801e946:	4618      	mov	r0, r3
 801e948:	374c      	adds	r7, #76	; 0x4c
 801e94a:	46bd      	mov	sp, r7
 801e94c:	bd90      	pop	{r4, r7, pc}
 801e94e:	bf00      	nop
 801e950:	08029d10 	.word	0x08029d10

0801e954 <lv_slider_set_value>:
{
 801e954:	b580      	push	{r7, lr}
 801e956:	b082      	sub	sp, #8
 801e958:	af00      	add	r7, sp, #0
 801e95a:	6078      	str	r0, [r7, #4]
 801e95c:	460b      	mov	r3, r1
 801e95e:	807b      	strh	r3, [r7, #2]
 801e960:	4613      	mov	r3, r2
 801e962:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 801e964:	787a      	ldrb	r2, [r7, #1]
 801e966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e96a:	4619      	mov	r1, r3
 801e96c:	6878      	ldr	r0, [r7, #4]
 801e96e:	f7f6 fb45 	bl	8014ffc <lv_bar_set_value>
}
 801e972:	bf00      	nop
 801e974:	3708      	adds	r7, #8
 801e976:	46bd      	mov	sp, r7
 801e978:	bd80      	pop	{r7, pc}

0801e97a <lv_slider_set_range>:
{
 801e97a:	b580      	push	{r7, lr}
 801e97c:	b082      	sub	sp, #8
 801e97e:	af00      	add	r7, sp, #0
 801e980:	6078      	str	r0, [r7, #4]
 801e982:	460b      	mov	r3, r1
 801e984:	807b      	strh	r3, [r7, #2]
 801e986:	4613      	mov	r3, r2
 801e988:	803b      	strh	r3, [r7, #0]
    lv_bar_set_range(slider, min, max);
 801e98a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e98e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e992:	4619      	mov	r1, r3
 801e994:	6878      	ldr	r0, [r7, #4]
 801e996:	f7f6 fbb5 	bl	8015104 <lv_bar_set_range>
}
 801e99a:	bf00      	nop
 801e99c:	3708      	adds	r7, #8
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	bd80      	pop	{r7, pc}

0801e9a2 <lv_sw_get_state>:
 * Get the state of a switch
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_sw_get_state(const lv_obj_t * sw)
{
 801e9a2:	b580      	push	{r7, lr}
 801e9a4:	b082      	sub	sp, #8
 801e9a6:	af00      	add	r7, sp, #0
 801e9a8:	6078      	str	r0, [r7, #4]
    return lv_bar_get_value(sw) < LV_SW_MAX_VALUE / 2 ? false : true;
 801e9aa:	6878      	ldr	r0, [r7, #4]
 801e9ac:	f7f6 fc17 	bl	80151de <lv_bar_get_value>
 801e9b0:	4603      	mov	r3, r0
 801e9b2:	2b31      	cmp	r3, #49	; 0x31
 801e9b4:	bfcc      	ite	gt
 801e9b6:	2301      	movgt	r3, #1
 801e9b8:	2300      	movle	r3, #0
 801e9ba:	b2db      	uxtb	r3, r3
}
 801e9bc:	4618      	mov	r0, r3
 801e9be:	3708      	adds	r7, #8
 801e9c0:	46bd      	mov	sp, r7
 801e9c2:	bd80      	pop	{r7, pc}

0801e9c4 <lv_sw_create>:
 * @param par pointer to an object, it will be the parent of the new switch
 * @param copy pointer to a switch object, if not NULL then the new object will be copied from it
 * @return pointer to the created switch
 */
lv_obj_t * lv_sw_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801e9c4:	b580      	push	{r7, lr}
 801e9c6:	b086      	sub	sp, #24
 801e9c8:	af00      	add	r7, sp, #0
 801e9ca:	6078      	str	r0, [r7, #4]
 801e9cc:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("switch create started");

    /*Create the ancestor of switch*/
    lv_obj_t * new_sw = lv_slider_create(par, copy);
 801e9ce:	6839      	ldr	r1, [r7, #0]
 801e9d0:	6878      	ldr	r0, [r7, #4]
 801e9d2:	f7fe ffd7 	bl	801d984 <lv_slider_create>
 801e9d6:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_sw);
 801e9d8:	697b      	ldr	r3, [r7, #20]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d100      	bne.n	801e9e0 <lv_sw_create+0x1c>
 801e9de:	e7fe      	b.n	801e9de <lv_sw_create+0x1a>
    if(new_sw == NULL) return NULL;
 801e9e0:	697b      	ldr	r3, [r7, #20]
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d101      	bne.n	801e9ea <lv_sw_create+0x26>
 801e9e6:	2300      	movs	r3, #0
 801e9e8:	e08b      	b.n	801eb02 <lv_sw_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_sw);
 801e9ea:	4b48      	ldr	r3, [pc, #288]	; (801eb0c <lv_sw_create+0x148>)
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d105      	bne.n	801e9fe <lv_sw_create+0x3a>
 801e9f2:	6978      	ldr	r0, [r7, #20]
 801e9f4:	f7e8 fc33 	bl	800725e <lv_obj_get_signal_cb>
 801e9f8:	4602      	mov	r2, r0
 801e9fa:	4b44      	ldr	r3, [pc, #272]	; (801eb0c <lv_sw_create+0x148>)
 801e9fc:	601a      	str	r2, [r3, #0]

    /*Allocate the switch type specific extended data*/
    lv_sw_ext_t * ext = lv_obj_allocate_ext_attr(new_sw, sizeof(lv_sw_ext_t));
 801e9fe:	212c      	movs	r1, #44	; 0x2c
 801ea00:	6978      	ldr	r0, [r7, #20]
 801ea02:	f7e8 fa77 	bl	8006ef4 <lv_obj_allocate_ext_attr>
 801ea06:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ea08:	693b      	ldr	r3, [r7, #16]
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d100      	bne.n	801ea10 <lv_sw_create+0x4c>
 801ea0e:	e7fe      	b.n	801ea0e <lv_sw_create+0x4a>
    if(ext == NULL) return NULL;
 801ea10:	693b      	ldr	r3, [r7, #16]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d101      	bne.n	801ea1a <lv_sw_create+0x56>
 801ea16:	2300      	movs	r3, #0
 801ea18:	e073      	b.n	801eb02 <lv_sw_create+0x13e>

    /*Initialize the allocated 'ext' */
    ext->changed = 0;
 801ea1a:	693a      	ldr	r2, [r7, #16]
 801ea1c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ea20:	f36f 0300 	bfc	r3, #0, #1
 801ea24:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
#if LV_USE_ANIMATION
    ext->anim_time = 0;
 801ea28:	693b      	ldr	r3, [r7, #16]
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    ext->style_knob_off = ext->slider.style_knob;
 801ea2e:	693b      	ldr	r3, [r7, #16]
 801ea30:	695a      	ldr	r2, [r3, #20]
 801ea32:	693b      	ldr	r3, [r7, #16]
 801ea34:	61da      	str	r2, [r3, #28]
    ext->style_knob_on  = ext->slider.style_knob;
 801ea36:	693b      	ldr	r3, [r7, #16]
 801ea38:	695a      	ldr	r2, [r3, #20]
 801ea3a:	693b      	ldr	r3, [r7, #16]
 801ea3c:	621a      	str	r2, [r3, #32]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_sw, lv_sw_signal);
 801ea3e:	4934      	ldr	r1, [pc, #208]	; (801eb10 <lv_sw_create+0x14c>)
 801ea40:	6978      	ldr	r0, [r7, #20]
 801ea42:	f7e8 fa3b 	bl	8006ebc <lv_obj_set_signal_cb>

    /*Init the new switch switch*/
    if(copy == NULL) {
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d131      	bne.n	801eab0 <lv_sw_create+0xec>
        lv_obj_set_size(new_sw, 2 * LV_DPI / 3, LV_DPI / 3);
 801ea4c:	2221      	movs	r2, #33	; 0x21
 801ea4e:	2142      	movs	r1, #66	; 0x42
 801ea50:	6978      	ldr	r0, [r7, #20]
 801ea52:	f7e7 fba4 	bl	800619e <lv_obj_set_size>
        lv_slider_set_knob_in(new_sw, true);
 801ea56:	2101      	movs	r1, #1
 801ea58:	6978      	ldr	r0, [r7, #20]
 801ea5a:	f7ff f82f 	bl	801dabc <lv_slider_set_knob_in>
        lv_slider_set_range(new_sw, 0, LV_SW_MAX_VALUE);
 801ea5e:	2264      	movs	r2, #100	; 0x64
 801ea60:	2100      	movs	r1, #0
 801ea62:	6978      	ldr	r0, [r7, #20]
 801ea64:	f7ff ff89 	bl	801e97a <lv_slider_set_range>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801ea68:	f000 fa94 	bl	801ef94 <lv_theme_get_current>
 801ea6c:	60b8      	str	r0, [r7, #8]
        if(th) {
 801ea6e:	68bb      	ldr	r3, [r7, #8]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d045      	beq.n	801eb00 <lv_sw_create+0x13c>
            lv_sw_set_style(new_sw, LV_SW_STYLE_BG, th->style.sw.bg);
 801ea74:	68bb      	ldr	r3, [r7, #8]
 801ea76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ea78:	461a      	mov	r2, r3
 801ea7a:	2100      	movs	r1, #0
 801ea7c:	6978      	ldr	r0, [r7, #20]
 801ea7e:	f000 f87f 	bl	801eb80 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_INDIC, th->style.sw.indic);
 801ea82:	68bb      	ldr	r3, [r7, #8]
 801ea84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ea86:	461a      	mov	r2, r3
 801ea88:	2101      	movs	r1, #1
 801ea8a:	6978      	ldr	r0, [r7, #20]
 801ea8c:	f000 f878 	bl	801eb80 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_OFF, th->style.sw.knob_off);
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ea94:	461a      	mov	r2, r3
 801ea96:	2102      	movs	r1, #2
 801ea98:	6978      	ldr	r0, [r7, #20]
 801ea9a:	f000 f871 	bl	801eb80 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_ON, th->style.sw.knob_on);
 801ea9e:	68bb      	ldr	r3, [r7, #8]
 801eaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	2103      	movs	r1, #3
 801eaa8:	6978      	ldr	r0, [r7, #20]
 801eaaa:	f000 f869 	bl	801eb80 <lv_sw_set_style>
 801eaae:	e027      	b.n	801eb00 <lv_sw_create+0x13c>
        }

    }
    /*Copy an existing switch*/
    else {
        lv_sw_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801eab0:	6838      	ldr	r0, [r7, #0]
 801eab2:	f7e8 fbec 	bl	800728e <lv_obj_get_ext_attr>
 801eab6:	60f8      	str	r0, [r7, #12]
        ext->style_knob_off    = copy_ext->style_knob_off;
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	69da      	ldr	r2, [r3, #28]
 801eabc:	693b      	ldr	r3, [r7, #16]
 801eabe:	61da      	str	r2, [r3, #28]
        ext->style_knob_on     = copy_ext->style_knob_on;
 801eac0:	68fb      	ldr	r3, [r7, #12]
 801eac2:	6a1a      	ldr	r2, [r3, #32]
 801eac4:	693b      	ldr	r3, [r7, #16]
 801eac6:	621a      	str	r2, [r3, #32]
#if LV_USE_ANIMATION
        ext->anim_time = copy_ext->anim_time;
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801eacc:	693b      	ldr	r3, [r7, #16]
 801eace:	851a      	strh	r2, [r3, #40]	; 0x28
#endif

        if(lv_sw_get_state(new_sw))
 801ead0:	6978      	ldr	r0, [r7, #20]
 801ead2:	f7ff ff66 	bl	801e9a2 <lv_sw_get_state>
 801ead6:	4603      	mov	r3, r0
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d007      	beq.n	801eaec <lv_sw_create+0x128>
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801eadc:	693b      	ldr	r3, [r7, #16]
 801eade:	6a1b      	ldr	r3, [r3, #32]
 801eae0:	461a      	mov	r2, r3
 801eae2:	2102      	movs	r1, #2
 801eae4:	6978      	ldr	r0, [r7, #20]
 801eae6:	f7ff f811 	bl	801db0c <lv_slider_set_style>
 801eaea:	e006      	b.n	801eafa <lv_sw_create+0x136>
        else
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801eaec:	693b      	ldr	r3, [r7, #16]
 801eaee:	69db      	ldr	r3, [r3, #28]
 801eaf0:	461a      	mov	r2, r3
 801eaf2:	2102      	movs	r1, #2
 801eaf4:	6978      	ldr	r0, [r7, #20]
 801eaf6:	f7ff f809 	bl	801db0c <lv_slider_set_style>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_sw);
 801eafa:	6978      	ldr	r0, [r7, #20]
 801eafc:	f7e8 f8a9 	bl	8006c52 <lv_obj_refresh_style>
    }

    LV_LOG_INFO("switch created");

    return new_sw;
 801eb00:	697b      	ldr	r3, [r7, #20]
}
 801eb02:	4618      	mov	r0, r3
 801eb04:	3718      	adds	r7, #24
 801eb06:	46bd      	mov	sp, r7
 801eb08:	bd80      	pop	{r7, pc}
 801eb0a:	bf00      	nop
 801eb0c:	20002af0 	.word	0x20002af0
 801eb10:	0801ec1d 	.word	0x0801ec1d

0801eb14 <lv_sw_on>:
 * Turn ON the switch
 * @param sw pointer to a switch objec
 * @param anim LV_ANOM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_on(lv_obj_t * sw, lv_anim_enable_t anim)
{
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b084      	sub	sp, #16
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb20:	6878      	ldr	r0, [r7, #4]
 801eb22:	f7e8 fbb4 	bl	800728e <lv_obj_get_ext_attr>
 801eb26:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, LV_SW_MAX_VALUE, anim);
 801eb28:	78fb      	ldrb	r3, [r7, #3]
 801eb2a:	461a      	mov	r2, r3
 801eb2c:	2164      	movs	r1, #100	; 0x64
 801eb2e:	6878      	ldr	r0, [r7, #4]
 801eb30:	f7ff ff10 	bl	801e954 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	6a1b      	ldr	r3, [r3, #32]
 801eb38:	461a      	mov	r2, r3
 801eb3a:	2102      	movs	r1, #2
 801eb3c:	6878      	ldr	r0, [r7, #4]
 801eb3e:	f7fe ffe5 	bl	801db0c <lv_slider_set_style>
}
 801eb42:	bf00      	nop
 801eb44:	3710      	adds	r7, #16
 801eb46:	46bd      	mov	sp, r7
 801eb48:	bd80      	pop	{r7, pc}

0801eb4a <lv_sw_off>:
 * Turn OFF the switch
 * @param sw pointer to a switch object
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_off(lv_obj_t * sw, lv_anim_enable_t anim)
{
 801eb4a:	b580      	push	{r7, lr}
 801eb4c:	b084      	sub	sp, #16
 801eb4e:	af00      	add	r7, sp, #0
 801eb50:	6078      	str	r0, [r7, #4]
 801eb52:	460b      	mov	r3, r1
 801eb54:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb56:	6878      	ldr	r0, [r7, #4]
 801eb58:	f7e8 fb99 	bl	800728e <lv_obj_get_ext_attr>
 801eb5c:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, 0, anim);
 801eb5e:	78fb      	ldrb	r3, [r7, #3]
 801eb60:	461a      	mov	r2, r3
 801eb62:	2100      	movs	r1, #0
 801eb64:	6878      	ldr	r0, [r7, #4]
 801eb66:	f7ff fef5 	bl	801e954 <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	69db      	ldr	r3, [r3, #28]
 801eb6e:	461a      	mov	r2, r3
 801eb70:	2102      	movs	r1, #2
 801eb72:	6878      	ldr	r0, [r7, #4]
 801eb74:	f7fe ffca 	bl	801db0c <lv_slider_set_style>
}
 801eb78:	bf00      	nop
 801eb7a:	3710      	adds	r7, #16
 801eb7c:	46bd      	mov	sp, r7
 801eb7e:	bd80      	pop	{r7, pc}

0801eb80 <lv_sw_set_style>:
 * @param sw pointer to a switch object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_sw_set_style(lv_obj_t * sw, lv_sw_style_t type, const lv_style_t * style)
{
 801eb80:	b580      	push	{r7, lr}
 801eb82:	b086      	sub	sp, #24
 801eb84:	af00      	add	r7, sp, #0
 801eb86:	60f8      	str	r0, [r7, #12]
 801eb88:	460b      	mov	r3, r1
 801eb8a:	607a      	str	r2, [r7, #4]
 801eb8c:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb8e:	68f8      	ldr	r0, [r7, #12]
 801eb90:	f7e8 fb7d 	bl	800728e <lv_obj_get_ext_attr>
 801eb94:	6178      	str	r0, [r7, #20]

    switch(type) {
 801eb96:	7afb      	ldrb	r3, [r7, #11]
 801eb98:	2b03      	cmp	r3, #3
 801eb9a:	d83b      	bhi.n	801ec14 <lv_sw_set_style+0x94>
 801eb9c:	a201      	add	r2, pc, #4	; (adr r2, 801eba4 <lv_sw_set_style+0x24>)
 801eb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eba2:	bf00      	nop
 801eba4:	0801ebb5 	.word	0x0801ebb5
 801eba8:	0801ebc1 	.word	0x0801ebc1
 801ebac:	0801ebcd 	.word	0x0801ebcd
 801ebb0:	0801ebf1 	.word	0x0801ebf1
        case LV_SLIDER_STYLE_BG: lv_slider_set_style(sw, LV_SLIDER_STYLE_BG, style); break;
 801ebb4:	687a      	ldr	r2, [r7, #4]
 801ebb6:	2100      	movs	r1, #0
 801ebb8:	68f8      	ldr	r0, [r7, #12]
 801ebba:	f7fe ffa7 	bl	801db0c <lv_slider_set_style>
 801ebbe:	e029      	b.n	801ec14 <lv_sw_set_style+0x94>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(sw, LV_SLIDER_STYLE_INDIC, style); break;
 801ebc0:	687a      	ldr	r2, [r7, #4]
 801ebc2:	2101      	movs	r1, #1
 801ebc4:	68f8      	ldr	r0, [r7, #12]
 801ebc6:	f7f6 fae9 	bl	801519c <lv_bar_set_style>
 801ebca:	e023      	b.n	801ec14 <lv_sw_set_style+0x94>
        case LV_SW_STYLE_KNOB_OFF:
            ext->style_knob_off = style;
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	687a      	ldr	r2, [r7, #4]
 801ebd0:	61da      	str	r2, [r3, #28]
            if(lv_sw_get_state(sw) == 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 801ebd2:	68f8      	ldr	r0, [r7, #12]
 801ebd4:	f7ff fee5 	bl	801e9a2 <lv_sw_get_state>
 801ebd8:	4603      	mov	r3, r0
 801ebda:	f083 0301 	eor.w	r3, r3, #1
 801ebde:	b2db      	uxtb	r3, r3
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d014      	beq.n	801ec0e <lv_sw_set_style+0x8e>
 801ebe4:	687a      	ldr	r2, [r7, #4]
 801ebe6:	2102      	movs	r1, #2
 801ebe8:	68f8      	ldr	r0, [r7, #12]
 801ebea:	f7fe ff8f 	bl	801db0c <lv_slider_set_style>
            break;
 801ebee:	e00e      	b.n	801ec0e <lv_sw_set_style+0x8e>
        case LV_SW_STYLE_KNOB_ON:
            ext->style_knob_on = style;
 801ebf0:	697b      	ldr	r3, [r7, #20]
 801ebf2:	687a      	ldr	r2, [r7, #4]
 801ebf4:	621a      	str	r2, [r3, #32]
            if(lv_sw_get_state(sw) != 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 801ebf6:	68f8      	ldr	r0, [r7, #12]
 801ebf8:	f7ff fed3 	bl	801e9a2 <lv_sw_get_state>
 801ebfc:	4603      	mov	r3, r0
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d007      	beq.n	801ec12 <lv_sw_set_style+0x92>
 801ec02:	687a      	ldr	r2, [r7, #4]
 801ec04:	2102      	movs	r1, #2
 801ec06:	68f8      	ldr	r0, [r7, #12]
 801ec08:	f7fe ff80 	bl	801db0c <lv_slider_set_style>
            break;
 801ec0c:	e001      	b.n	801ec12 <lv_sw_set_style+0x92>
            break;
 801ec0e:	bf00      	nop
 801ec10:	e000      	b.n	801ec14 <lv_sw_set_style+0x94>
            break;
 801ec12:	bf00      	nop
    }
}
 801ec14:	bf00      	nop
 801ec16:	3718      	adds	r7, #24
 801ec18:	46bd      	mov	sp, r7
 801ec1a:	bd80      	pop	{r7, pc}

0801ec1c <lv_sw_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_sw_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b092      	sub	sp, #72	; 0x48
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	60f8      	str	r0, [r7, #12]
 801ec24:	460b      	mov	r3, r1
 801ec26:	607a      	str	r2, [r7, #4]
 801ec28:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801ec2a:	68f8      	ldr	r0, [r7, #12]
 801ec2c:	f7e8 fb2f 	bl	800728e <lv_obj_get_ext_attr>
 801ec30:	6438      	str	r0, [r7, #64]	; 0x40

    /*Save the current (old) value before slider signal modifies it. It will be required in the
     * later calculations*/
    int16_t old_val;
    if(sign == LV_SIGNAL_PRESSING)
 801ec32:	7afb      	ldrb	r3, [r7, #11]
 801ec34:	2b08      	cmp	r3, #8
 801ec36:	d104      	bne.n	801ec42 <lv_sw_signal+0x26>
        old_val = ext->slider.drag_value;
 801ec38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec3a:	8b1b      	ldrh	r3, [r3, #24]
 801ec3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ec40:	e005      	b.n	801ec4e <lv_sw_signal+0x32>
    else
        old_val = lv_slider_get_value(sw);
 801ec42:	68f8      	ldr	r0, [r7, #12]
 801ec44:	f7fe ff8c 	bl	801db60 <lv_slider_get_value>
 801ec48:	4603      	mov	r3, r0
 801ec4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    /*Don't let the slider to call the action. Switch handles it differently*/
    lv_event_cb_t event_cb = sw->event_cb;
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	699b      	ldr	r3, [r3, #24]
 801ec52:	63fb      	str	r3, [r7, #60]	; 0x3c
    sw->event_cb           = NULL;
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	2200      	movs	r2, #0
 801ec58:	619a      	str	r2, [r3, #24]

    lv_res_t res;
    /* Include the ancient signal function */

    res = ancestor_signal(sw, sign, param);
 801ec5a:	4bbd      	ldr	r3, [pc, #756]	; (801ef50 <lv_sw_signal+0x334>)
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	7af9      	ldrb	r1, [r7, #11]
 801ec60:	687a      	ldr	r2, [r7, #4]
 801ec62:	68f8      	ldr	r0, [r7, #12]
 801ec64:	4798      	blx	r3
 801ec66:	4603      	mov	r3, r0
 801ec68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(res != LV_RES_OK) return res;
 801ec6c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ec70:	2b01      	cmp	r3, #1
 801ec72:	d002      	beq.n	801ec7a <lv_sw_signal+0x5e>
 801ec74:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ec78:	e186      	b.n	801ef88 <lv_sw_signal+0x36c>

    sw->event_cb = event_cb;
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec7e:	619a      	str	r2, [r3, #24]

    if(sign == LV_SIGNAL_CLEANUP) {
 801ec80:	7afb      	ldrb	r3, [r7, #11]
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	f000 817e 	beq.w	801ef84 <lv_sw_signal+0x368>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_PRESSED) {
 801ec88:	7afb      	ldrb	r3, [r7, #11]
 801ec8a:	2b07      	cmp	r3, #7
 801ec8c:	d11e      	bne.n	801eccc <lv_sw_signal+0xb0>

        /*Save the x coordinate of the pressed point to see if the switch was slid*/
        lv_indev_t * indev = lv_indev_get_act();
 801ec8e:	f7e6 fc49 	bl	8005524 <lv_indev_get_act>
 801ec92:	6278      	str	r0, [r7, #36]	; 0x24
        if(indev) {
 801ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d009      	beq.n	801ecae <lv_sw_signal+0x92>
            lv_point_t p;
            lv_indev_get_point(indev, &p);
 801ec9a:	f107 0320 	add.w	r3, r7, #32
 801ec9e:	4619      	mov	r1, r3
 801eca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eca2:	f7e6 fc9b 	bl	80055dc <lv_indev_get_point>
            ext->start_x = p.x;
 801eca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ecaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ecac:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        ext->slided  = 0;
 801ecae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ecb0:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ecb4:	f36f 0341 	bfc	r3, #1, #1
 801ecb8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        ext->changed = 0;
 801ecbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ecbe:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ecc2:	f36f 0300 	bfc	r3, #0, #1
 801ecc6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801ecca:	e15b      	b.n	801ef84 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801eccc:	7afb      	ldrb	r3, [r7, #11]
 801ecce:	2b08      	cmp	r3, #8
 801ecd0:	d15d      	bne.n	801ed8e <lv_sw_signal+0x172>
        /*See if the switch was slid (moved at least a little)*/
        lv_indev_t * indev = lv_indev_get_act();
 801ecd2:	f7e6 fc27 	bl	8005524 <lv_indev_get_act>
 801ecd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(indev) {
 801ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d01c      	beq.n	801ed18 <lv_sw_signal+0xfc>
            lv_point_t p = {0, 0};
 801ecde:	2300      	movs	r3, #0
 801ece0:	83bb      	strh	r3, [r7, #28]
 801ece2:	2300      	movs	r3, #0
 801ece4:	83fb      	strh	r3, [r7, #30]
            lv_indev_get_point(indev, &p);
 801ece6:	f107 031c 	add.w	r3, r7, #28
 801ecea:	4619      	mov	r1, r3
 801ecec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ecee:	f7e6 fc75 	bl	80055dc <lv_indev_get_point>
            if(LV_MATH_ABS(p.x - ext->start_x) > LV_INDEV_DEF_DRAG_LIMIT) ext->slided = 1;
 801ecf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801ecf6:	461a      	mov	r2, r3
 801ecf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ecfa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801ecfe:	1ad3      	subs	r3, r2, r3
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	bfb8      	it	lt
 801ed04:	425b      	neglt	r3, r3
 801ed06:	2b0a      	cmp	r3, #10
 801ed08:	dd06      	ble.n	801ed18 <lv_sw_signal+0xfc>
 801ed0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed0c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ed10:	f043 0302 	orr.w	r3, r3, #2
 801ed14:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        }

        /*If didn't slide then revert the min/max value. So click without slide won't move the
         * switch as a slider*/
        if(ext->slided == 0) {
 801ed18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed1a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801ed1e:	f003 0302 	and.w	r3, r3, #2
 801ed22:	b2db      	uxtb	r3, r3
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d10c      	bne.n	801ed42 <lv_sw_signal+0x126>
            if(lv_sw_get_state(sw))
 801ed28:	68f8      	ldr	r0, [r7, #12]
 801ed2a:	f7ff fe3a 	bl	801e9a2 <lv_sw_get_state>
 801ed2e:	4603      	mov	r3, r0
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	d003      	beq.n	801ed3c <lv_sw_signal+0x120>
                ext->slider.drag_value = LV_SW_MAX_VALUE;
 801ed34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed36:	2264      	movs	r2, #100	; 0x64
 801ed38:	831a      	strh	r2, [r3, #24]
 801ed3a:	e002      	b.n	801ed42 <lv_sw_signal+0x126>
            else
                ext->slider.drag_value = 0;
 801ed3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed3e:	2200      	movs	r2, #0
 801ed40:	831a      	strh	r2, [r3, #24]
        }

        /*If explicitly changed (by slide) don't need to be toggled on release*/
        int16_t threshold = LV_SW_MAX_VALUE / 2;
 801ed42:	2332      	movs	r3, #50	; 0x32
 801ed44:	857b      	strh	r3, [r7, #42]	; 0x2a
        if((old_val < threshold && ext->slider.drag_value > threshold) ||
 801ed46:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801ed4a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ed4e:	429a      	cmp	r2, r3
 801ed50:	da06      	bge.n	801ed60 <lv_sw_signal+0x144>
 801ed52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed54:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ed58:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801ed5c:	429a      	cmp	r2, r3
 801ed5e:	db0e      	blt.n	801ed7e <lv_sw_signal+0x162>
 801ed60:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801ed64:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	f340 810b 	ble.w	801ef84 <lv_sw_signal+0x368>
           (old_val > threshold && ext->slider.drag_value < threshold)) {
 801ed6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed70:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ed74:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	f340 8103 	ble.w	801ef84 <lv_sw_signal+0x368>
            ext->changed = 1;
 801ed7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed80:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ed84:	f043 0301 	orr.w	r3, r3, #1
 801ed88:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801ed8c:	e0fa      	b.n	801ef84 <lv_sw_signal+0x368>
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 801ed8e:	7afb      	ldrb	r3, [r7, #11]
 801ed90:	2b09      	cmp	r3, #9
 801ed92:	d12d      	bne.n	801edf0 <lv_sw_signal+0x1d4>
        if(lv_sw_get_state(sw)) {
 801ed94:	68f8      	ldr	r0, [r7, #12]
 801ed96:	f7ff fe04 	bl	801e9a2 <lv_sw_get_state>
 801ed9a:	4603      	mov	r3, r0
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d013      	beq.n	801edc8 <lv_sw_signal+0x1ac>
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801eda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eda2:	6a1b      	ldr	r3, [r3, #32]
 801eda4:	461a      	mov	r2, r3
 801eda6:	2102      	movs	r1, #2
 801eda8:	68f8      	ldr	r0, [r7, #12]
 801edaa:	f7fe feaf 	bl	801db0c <lv_slider_set_style>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, LV_ANIM_ON);
 801edae:	2201      	movs	r2, #1
 801edb0:	2164      	movs	r1, #100	; 0x64
 801edb2:	68f8      	ldr	r0, [r7, #12]
 801edb4:	f7ff fdce 	bl	801e954 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 801edb8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801edbc:	2b01      	cmp	r3, #1
 801edbe:	f000 80e1 	beq.w	801ef84 <lv_sw_signal+0x368>
 801edc2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801edc6:	e0df      	b.n	801ef88 <lv_sw_signal+0x36c>
        } else {
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801edc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edca:	69db      	ldr	r3, [r3, #28]
 801edcc:	461a      	mov	r2, r3
 801edce:	2102      	movs	r1, #2
 801edd0:	68f8      	ldr	r0, [r7, #12]
 801edd2:	f7fe fe9b 	bl	801db0c <lv_slider_set_style>
            lv_slider_set_value(sw, 0, LV_ANIM_ON);
 801edd6:	2201      	movs	r2, #1
 801edd8:	2100      	movs	r1, #0
 801edda:	68f8      	ldr	r0, [r7, #12]
 801eddc:	f7ff fdba 	bl	801e954 <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 801ede0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ede4:	2b01      	cmp	r3, #1
 801ede6:	f000 80cd 	beq.w	801ef84 <lv_sw_signal+0x368>
 801edea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801edee:	e0cb      	b.n	801ef88 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 801edf0:	7afb      	ldrb	r3, [r7, #11]
 801edf2:	2b0a      	cmp	r3, #10
 801edf4:	d153      	bne.n	801ee9e <lv_sw_signal+0x282>
        /*If not dragged then toggle the switch*/
        if(ext->changed == 0) {
 801edf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edf8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801edfc:	f003 0301 	and.w	r3, r3, #1
 801ee00:	b2db      	uxtb	r3, r3
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d124      	bne.n	801ee50 <lv_sw_signal+0x234>
            int32_t state;
            if(lv_sw_get_state(sw)) {
 801ee06:	68f8      	ldr	r0, [r7, #12]
 801ee08:	f7ff fdcb 	bl	801e9a2 <lv_sw_get_state>
 801ee0c:	4603      	mov	r3, r0
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d006      	beq.n	801ee20 <lv_sw_signal+0x204>
                lv_sw_off(sw, LV_ANIM_ON);
 801ee12:	2101      	movs	r1, #1
 801ee14:	68f8      	ldr	r0, [r7, #12]
 801ee16:	f7ff fe98 	bl	801eb4a <lv_sw_off>
                state = 0;
 801ee1a:	2300      	movs	r3, #0
 801ee1c:	61bb      	str	r3, [r7, #24]
 801ee1e:	e005      	b.n	801ee2c <lv_sw_signal+0x210>
            } else {
                lv_sw_on(sw, LV_ANIM_ON);
 801ee20:	2101      	movs	r1, #1
 801ee22:	68f8      	ldr	r0, [r7, #12]
 801ee24:	f7ff fe76 	bl	801eb14 <lv_sw_on>
                state = 1;
 801ee28:	2301      	movs	r3, #1
 801ee2a:	61bb      	str	r3, [r7, #24]
            }

            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ee2c:	f107 0318 	add.w	r3, r7, #24
 801ee30:	461a      	mov	r2, r3
 801ee32:	210e      	movs	r1, #14
 801ee34:	68f8      	ldr	r0, [r7, #12]
 801ee36:	f7e7 ffb0 	bl	8006d9a <lv_event_send>
 801ee3a:	4603      	mov	r3, r0
 801ee3c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ee40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee44:	2b01      	cmp	r3, #1
 801ee46:	f000 809d 	beq.w	801ef84 <lv_sw_signal+0x368>
 801ee4a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee4e:	e09b      	b.n	801ef88 <lv_sw_signal+0x36c>
        }
        /*If the switch was dragged then calculate the new state based on the current position*/
        else {
            int16_t v = lv_slider_get_value(sw);
 801ee50:	68f8      	ldr	r0, [r7, #12]
 801ee52:	f7fe fe85 	bl	801db60 <lv_slider_get_value>
 801ee56:	4603      	mov	r3, r0
 801ee58:	863b      	strh	r3, [r7, #48]	; 0x30
            int32_t state;
            if(v > LV_SW_MAX_VALUE / 2) {
 801ee5a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ee5e:	2b32      	cmp	r3, #50	; 0x32
 801ee60:	dd06      	ble.n	801ee70 <lv_sw_signal+0x254>
                lv_sw_on(sw, LV_ANIM_ON);
 801ee62:	2101      	movs	r1, #1
 801ee64:	68f8      	ldr	r0, [r7, #12]
 801ee66:	f7ff fe55 	bl	801eb14 <lv_sw_on>
                state = 1;
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	617b      	str	r3, [r7, #20]
 801ee6e:	e005      	b.n	801ee7c <lv_sw_signal+0x260>
            } else {
                lv_sw_off(sw, LV_ANIM_ON);
 801ee70:	2101      	movs	r1, #1
 801ee72:	68f8      	ldr	r0, [r7, #12]
 801ee74:	f7ff fe69 	bl	801eb4a <lv_sw_off>
                state = 0;
 801ee78:	2300      	movs	r3, #0
 801ee7a:	617b      	str	r3, [r7, #20]
            }
            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ee7c:	f107 0314 	add.w	r3, r7, #20
 801ee80:	461a      	mov	r2, r3
 801ee82:	210e      	movs	r1, #14
 801ee84:	68f8      	ldr	r0, [r7, #12]
 801ee86:	f7e7 ff88 	bl	8006d9a <lv_event_send>
 801ee8a:	4603      	mov	r3, r0
 801ee8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ee90:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee94:	2b01      	cmp	r3, #1
 801ee96:	d075      	beq.n	801ef84 <lv_sw_signal+0x368>
 801ee98:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee9c:	e074      	b.n	801ef88 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 801ee9e:	7afb      	ldrb	r3, [r7, #11]
 801eea0:	2b11      	cmp	r3, #17
 801eea2:	d143      	bne.n	801ef2c <lv_sw_signal+0x310>
        char c = *((char *)param);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	781b      	ldrb	r3, [r3, #0]
 801eea8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint32_t state;
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801eeac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eeb0:	2b13      	cmp	r3, #19
 801eeb2:	d003      	beq.n	801eebc <lv_sw_signal+0x2a0>
 801eeb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eeb8:	2b11      	cmp	r3, #17
 801eeba:	d117      	bne.n	801eeec <lv_sw_signal+0x2d0>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, true);
 801eebc:	2201      	movs	r2, #1
 801eebe:	2164      	movs	r1, #100	; 0x64
 801eec0:	68f8      	ldr	r0, [r7, #12]
 801eec2:	f7ff fd47 	bl	801e954 <lv_slider_set_value>
            state = 1;
 801eec6:	2301      	movs	r3, #1
 801eec8:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801eeca:	f107 0310 	add.w	r3, r7, #16
 801eece:	461a      	mov	r2, r3
 801eed0:	210e      	movs	r1, #14
 801eed2:	68f8      	ldr	r0, [r7, #12]
 801eed4:	f7e7 ff61 	bl	8006d9a <lv_event_send>
 801eed8:	4603      	mov	r3, r0
 801eeda:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801eede:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801eee2:	2b01      	cmp	r3, #1
 801eee4:	d04e      	beq.n	801ef84 <lv_sw_signal+0x368>
 801eee6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801eeea:	e04d      	b.n	801ef88 <lv_sw_signal+0x36c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801eeec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eef0:	2b14      	cmp	r3, #20
 801eef2:	d003      	beq.n	801eefc <lv_sw_signal+0x2e0>
 801eef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eef8:	2b12      	cmp	r3, #18
 801eefa:	d143      	bne.n	801ef84 <lv_sw_signal+0x368>
            lv_slider_set_value(sw, 0, true);
 801eefc:	2201      	movs	r2, #1
 801eefe:	2100      	movs	r1, #0
 801ef00:	68f8      	ldr	r0, [r7, #12]
 801ef02:	f7ff fd27 	bl	801e954 <lv_slider_set_value>
            state = 0;
 801ef06:	2300      	movs	r3, #0
 801ef08:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ef0a:	f107 0310 	add.w	r3, r7, #16
 801ef0e:	461a      	mov	r2, r3
 801ef10:	210e      	movs	r1, #14
 801ef12:	68f8      	ldr	r0, [r7, #12]
 801ef14:	f7e7 ff41 	bl	8006d9a <lv_event_send>
 801ef18:	4603      	mov	r3, r0
 801ef1a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ef1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ef22:	2b01      	cmp	r3, #1
 801ef24:	d02e      	beq.n	801ef84 <lv_sw_signal+0x368>
 801ef26:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ef2a:	e02d      	b.n	801ef88 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ef2c:	7afb      	ldrb	r3, [r7, #11]
 801ef2e:	2b12      	cmp	r3, #18
 801ef30:	d105      	bne.n	801ef3e <lv_sw_signal+0x322>
        bool * editable = (bool *)param;
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	637b      	str	r3, [r7, #52]	; 0x34
        *editable       = false; /*The ancestor slider is editable the switch is not*/
 801ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef38:	2200      	movs	r2, #0
 801ef3a:	701a      	strb	r2, [r3, #0]
 801ef3c:	e022      	b.n	801ef84 <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801ef3e:	7afb      	ldrb	r3, [r7, #11]
 801ef40:	2b06      	cmp	r3, #6
 801ef42:	d11f      	bne.n	801ef84 <lv_sw_signal+0x368>
        lv_obj_type_t * buf = param;
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ef48:	2300      	movs	r3, #0
 801ef4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801ef4e:	e00d      	b.n	801ef6c <lv_sw_signal+0x350>
 801ef50:	20002af0 	.word	0x20002af0
            if(buf->type[i] == NULL) break;
 801ef54:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d009      	beq.n	801ef76 <lv_sw_signal+0x35a>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ef62:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ef66:	3301      	adds	r3, #1
 801ef68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801ef6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ef70:	2b06      	cmp	r3, #6
 801ef72:	d9ef      	bls.n	801ef54 <lv_sw_signal+0x338>
 801ef74:	e000      	b.n	801ef78 <lv_sw_signal+0x35c>
            if(buf->type[i] == NULL) break;
 801ef76:	bf00      	nop
        }
        buf->type[i] = "lv_sw";
 801ef78:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef7e:	4904      	ldr	r1, [pc, #16]	; (801ef90 <lv_sw_signal+0x374>)
 801ef80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ef84:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}
 801ef88:	4618      	mov	r0, r3
 801ef8a:	3748      	adds	r7, #72	; 0x48
 801ef8c:	46bd      	mov	sp, r7
 801ef8e:	bd80      	pop	{r7, pc}
 801ef90:	08029d1c 	.word	0x08029d1c

0801ef94 <lv_theme_get_current>:
/**
 * Get the current system theme.
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
 801ef94:	b480      	push	{r7}
 801ef96:	af00      	add	r7, sp, #0
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited)
 801ef98:	4b07      	ldr	r3, [pc, #28]	; (801efb8 <lv_theme_get_current+0x24>)
 801ef9a:	781b      	ldrb	r3, [r3, #0]
 801ef9c:	f083 0301 	eor.w	r3, r3, #1
 801efa0:	b2db      	uxtb	r3, r3
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d001      	beq.n	801efaa <lv_theme_get_current+0x16>
        return NULL;
 801efa6:	2300      	movs	r3, #0
 801efa8:	e000      	b.n	801efac <lv_theme_get_current+0x18>
    else
        return &current_theme;
 801efaa:	4b04      	ldr	r3, [pc, #16]	; (801efbc <lv_theme_get_current+0x28>)
#endif
}
 801efac:	4618      	mov	r0, r3
 801efae:	46bd      	mov	sp, r7
 801efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efb4:	4770      	bx	lr
 801efb6:	bf00      	nop
 801efb8:	20002af4 	.word	0x20002af4
 801efbc:	20002af8 	.word	0x20002af8

0801efc0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b082      	sub	sp, #8
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	4603      	mov	r3, r0
 801efc8:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 801efca:	2200      	movs	r2, #0
 801efcc:	2104      	movs	r1, #4
 801efce:	4806      	ldr	r0, [pc, #24]	; (801efe8 <ST7789_WriteCommand+0x28>)
 801efd0:	f7e3 fb5a 	bl	8002688 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), 1);
 801efd4:	1df9      	adds	r1, r7, #7
 801efd6:	2301      	movs	r3, #1
 801efd8:	2201      	movs	r2, #1
 801efda:	4804      	ldr	r0, [pc, #16]	; (801efec <ST7789_WriteCommand+0x2c>)
 801efdc:	f7e4 fc48 	bl	8003870 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &cmd, sizeof(cmd));
}
 801efe0:	bf00      	nop
 801efe2:	3708      	adds	r7, #8
 801efe4:	46bd      	mov	sp, r7
 801efe6:	bd80      	pop	{r7, pc}
 801efe8:	40020000 	.word	0x40020000
 801efec:	2000698c 	.word	0x2000698c

0801eff0 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 801eff0:	b580      	push	{r7, lr}
 801eff2:	b084      	sub	sp, #16
 801eff4:	af00      	add	r7, sp, #0
 801eff6:	6078      	str	r0, [r7, #4]
 801eff8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Set();
 801effa:	2201      	movs	r2, #1
 801effc:	2104      	movs	r1, #4
 801effe:	4810      	ldr	r0, [pc, #64]	; (801f040 <ST7789_WriteData+0x50>)
 801f000:	f7e3 fb42 	bl	8002688 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 801f004:	e014      	b.n	801f030 <ST7789_WriteData+0x40>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 801f006:	683b      	ldr	r3, [r7, #0]
 801f008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f00c:	4293      	cmp	r3, r2
 801f00e:	bf28      	it	cs
 801f010:	4613      	movcs	r3, r2
 801f012:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, 10);
 801f014:	89fa      	ldrh	r2, [r7, #14]
 801f016:	230a      	movs	r3, #10
 801f018:	6879      	ldr	r1, [r7, #4]
 801f01a:	480a      	ldr	r0, [pc, #40]	; (801f044 <ST7789_WriteData+0x54>)
 801f01c:	f7e4 fc28 	bl	8003870 <HAL_SPI_Transmit>
		//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
		buff += chunk_size;
 801f020:	89fb      	ldrh	r3, [r7, #14]
 801f022:	687a      	ldr	r2, [r7, #4]
 801f024:	4413      	add	r3, r2
 801f026:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 801f028:	89fb      	ldrh	r3, [r7, #14]
 801f02a:	683a      	ldr	r2, [r7, #0]
 801f02c:	1ad3      	subs	r3, r2, r3
 801f02e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 801f030:	683b      	ldr	r3, [r7, #0]
 801f032:	2b00      	cmp	r3, #0
 801f034:	d1e7      	bne.n	801f006 <ST7789_WriteData+0x16>
	}

}
 801f036:	bf00      	nop
 801f038:	3710      	adds	r7, #16
 801f03a:	46bd      	mov	sp, r7
 801f03c:	bd80      	pop	{r7, pc}
 801f03e:	bf00      	nop
 801f040:	40020000 	.word	0x40020000
 801f044:	2000698c 	.word	0x2000698c

0801f048 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 801f048:	b580      	push	{r7, lr}
 801f04a:	b082      	sub	sp, #8
 801f04c:	af00      	add	r7, sp, #0
 801f04e:	4603      	mov	r3, r0
 801f050:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 801f052:	2201      	movs	r2, #1
 801f054:	2104      	movs	r1, #4
 801f056:	4806      	ldr	r0, [pc, #24]	; (801f070 <ST7789_WriteSmallData+0x28>)
 801f058:	f7e3 fb16 	bl	8002688 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), 1);
 801f05c:	1df9      	adds	r1, r7, #7
 801f05e:	2301      	movs	r3, #1
 801f060:	2201      	movs	r2, #1
 801f062:	4804      	ldr	r0, [pc, #16]	; (801f074 <ST7789_WriteSmallData+0x2c>)
 801f064:	f7e4 fc04 	bl	8003870 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &data, sizeof(data));
}
 801f068:	bf00      	nop
 801f06a:	3708      	adds	r7, #8
 801f06c:	46bd      	mov	sp, r7
 801f06e:	bd80      	pop	{r7, pc}
 801f070:	40020000 	.word	0x40020000
 801f074:	2000698c 	.word	0x2000698c

0801f078 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b082      	sub	sp, #8
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	4603      	mov	r3, r0
 801f080:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 801f082:	2036      	movs	r0, #54	; 0x36
 801f084:	f7ff ff9c 	bl	801efc0 <ST7789_WriteCommand>
	switch (m) {
 801f088:	79fb      	ldrb	r3, [r7, #7]
 801f08a:	2b03      	cmp	r3, #3
 801f08c:	d81a      	bhi.n	801f0c4 <ST7789_SetRotation+0x4c>
 801f08e:	a201      	add	r2, pc, #4	; (adr r2, 801f094 <ST7789_SetRotation+0x1c>)
 801f090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f094:	0801f0a5 	.word	0x0801f0a5
 801f098:	0801f0ad 	.word	0x0801f0ad
 801f09c:	0801f0b5 	.word	0x0801f0b5
 801f0a0:	0801f0bd 	.word	0x0801f0bd
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 801f0a4:	20c0      	movs	r0, #192	; 0xc0
 801f0a6:	f7ff ffcf 	bl	801f048 <ST7789_WriteSmallData>
		break;
 801f0aa:	e00c      	b.n	801f0c6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 801f0ac:	20a0      	movs	r0, #160	; 0xa0
 801f0ae:	f7ff ffcb 	bl	801f048 <ST7789_WriteSmallData>
		break;
 801f0b2:	e008      	b.n	801f0c6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 801f0b4:	2000      	movs	r0, #0
 801f0b6:	f7ff ffc7 	bl	801f048 <ST7789_WriteSmallData>
		break;
 801f0ba:	e004      	b.n	801f0c6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 801f0bc:	2060      	movs	r0, #96	; 0x60
 801f0be:	f7ff ffc3 	bl	801f048 <ST7789_WriteSmallData>
		break;
 801f0c2:	e000      	b.n	801f0c6 <ST7789_SetRotation+0x4e>
	default:
		break;
 801f0c4:	bf00      	nop
	}
}
 801f0c6:	bf00      	nop
 801f0c8:	3708      	adds	r7, #8
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	bd80      	pop	{r7, pc}
 801f0ce:	bf00      	nop

0801f0d0 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 801f0d0:	b590      	push	{r4, r7, lr}
 801f0d2:	b087      	sub	sp, #28
 801f0d4:	af00      	add	r7, sp, #0
 801f0d6:	4604      	mov	r4, r0
 801f0d8:	4608      	mov	r0, r1
 801f0da:	4611      	mov	r1, r2
 801f0dc:	461a      	mov	r2, r3
 801f0de:	4623      	mov	r3, r4
 801f0e0:	80fb      	strh	r3, [r7, #6]
 801f0e2:	4603      	mov	r3, r0
 801f0e4:	80bb      	strh	r3, [r7, #4]
 801f0e6:	460b      	mov	r3, r1
 801f0e8:	807b      	strh	r3, [r7, #2]
 801f0ea:	4613      	mov	r3, r2
 801f0ec:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 801f0ee:	88fb      	ldrh	r3, [r7, #6]
 801f0f0:	82fb      	strh	r3, [r7, #22]
 801f0f2:	887b      	ldrh	r3, [r7, #2]
 801f0f4:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 801f0f6:	88bb      	ldrh	r3, [r7, #4]
 801f0f8:	827b      	strh	r3, [r7, #18]
 801f0fa:	883b      	ldrh	r3, [r7, #0]
 801f0fc:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 801f0fe:	202a      	movs	r0, #42	; 0x2a
 801f100:	f7ff ff5e 	bl	801efc0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 801f104:	8afb      	ldrh	r3, [r7, #22]
 801f106:	0a1b      	lsrs	r3, r3, #8
 801f108:	b29b      	uxth	r3, r3
 801f10a:	b2db      	uxtb	r3, r3
 801f10c:	733b      	strb	r3, [r7, #12]
 801f10e:	8afb      	ldrh	r3, [r7, #22]
 801f110:	b2db      	uxtb	r3, r3
 801f112:	737b      	strb	r3, [r7, #13]
 801f114:	8abb      	ldrh	r3, [r7, #20]
 801f116:	0a1b      	lsrs	r3, r3, #8
 801f118:	b29b      	uxth	r3, r3
 801f11a:	b2db      	uxtb	r3, r3
 801f11c:	73bb      	strb	r3, [r7, #14]
 801f11e:	8abb      	ldrh	r3, [r7, #20]
 801f120:	b2db      	uxtb	r3, r3
 801f122:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 801f124:	f107 030c 	add.w	r3, r7, #12
 801f128:	2104      	movs	r1, #4
 801f12a:	4618      	mov	r0, r3
 801f12c:	f7ff ff60 	bl	801eff0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 801f130:	202b      	movs	r0, #43	; 0x2b
 801f132:	f7ff ff45 	bl	801efc0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 801f136:	8a7b      	ldrh	r3, [r7, #18]
 801f138:	0a1b      	lsrs	r3, r3, #8
 801f13a:	b29b      	uxth	r3, r3
 801f13c:	b2db      	uxtb	r3, r3
 801f13e:	723b      	strb	r3, [r7, #8]
 801f140:	8a7b      	ldrh	r3, [r7, #18]
 801f142:	b2db      	uxtb	r3, r3
 801f144:	727b      	strb	r3, [r7, #9]
 801f146:	8a3b      	ldrh	r3, [r7, #16]
 801f148:	0a1b      	lsrs	r3, r3, #8
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	b2db      	uxtb	r3, r3
 801f14e:	72bb      	strb	r3, [r7, #10]
 801f150:	8a3b      	ldrh	r3, [r7, #16]
 801f152:	b2db      	uxtb	r3, r3
 801f154:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 801f156:	f107 0308 	add.w	r3, r7, #8
 801f15a:	2104      	movs	r1, #4
 801f15c:	4618      	mov	r0, r3
 801f15e:	f7ff ff47 	bl	801eff0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 801f162:	202c      	movs	r0, #44	; 0x2c
 801f164:	f7ff ff2c 	bl	801efc0 <ST7789_WriteCommand>
}
 801f168:	bf00      	nop
 801f16a:	371c      	adds	r7, #28
 801f16c:	46bd      	mov	sp, r7
 801f16e:	bd90      	pop	{r4, r7, pc}

0801f170 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 801f170:	b590      	push	{r4, r7, lr}
 801f172:	b08b      	sub	sp, #44	; 0x2c
 801f174:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 801f176:	2019      	movs	r0, #25
 801f178:	f7e2 fcb8 	bl	8001aec <HAL_Delay>
    ST7789_RST_Clr();
 801f17c:	2200      	movs	r2, #0
 801f17e:	2102      	movs	r1, #2
 801f180:	4846      	ldr	r0, [pc, #280]	; (801f29c <ST7789_Init+0x12c>)
 801f182:	f7e3 fa81 	bl	8002688 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 801f186:	2019      	movs	r0, #25
 801f188:	f7e2 fcb0 	bl	8001aec <HAL_Delay>
    ST7789_RST_Set();
 801f18c:	2201      	movs	r2, #1
 801f18e:	2102      	movs	r1, #2
 801f190:	4842      	ldr	r0, [pc, #264]	; (801f29c <ST7789_Init+0x12c>)
 801f192:	f7e3 fa79 	bl	8002688 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 801f196:	2032      	movs	r0, #50	; 0x32
 801f198:	f7e2 fca8 	bl	8001aec <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 801f19c:	203a      	movs	r0, #58	; 0x3a
 801f19e:	f7ff ff0f 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 801f1a2:	2055      	movs	r0, #85	; 0x55
 801f1a4:	f7ff ff50 	bl	801f048 <ST7789_WriteSmallData>

    ST7789_WriteCommand(0xB2);				//	Porch control
 801f1a8:	20b2      	movs	r0, #178	; 0xb2
 801f1aa:	f7ff ff09 	bl	801efc0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 801f1ae:	4a3c      	ldr	r2, [pc, #240]	; (801f2a0 <ST7789_Init+0x130>)
 801f1b0:	f107 0320 	add.w	r3, r7, #32
 801f1b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f1b8:	6018      	str	r0, [r3, #0]
 801f1ba:	3304      	adds	r3, #4
 801f1bc:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 801f1be:	f107 0320 	add.w	r3, r7, #32
 801f1c2:	2105      	movs	r1, #5
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f7ff ff13 	bl	801eff0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 801f1ca:	2002      	movs	r0, #2
 801f1cc:	f7ff ff54 	bl	801f078 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 801f1d0:	20b7      	movs	r0, #183	; 0xb7
 801f1d2:	f7ff fef5 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 801f1d6:	2035      	movs	r0, #53	; 0x35
 801f1d8:	f7ff ff36 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 801f1dc:	20bb      	movs	r0, #187	; 0xbb
 801f1de:	f7ff feef 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 801f1e2:	2019      	movs	r0, #25
 801f1e4:	f7ff ff30 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 801f1e8:	20c0      	movs	r0, #192	; 0xc0
 801f1ea:	f7ff fee9 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 801f1ee:	202c      	movs	r0, #44	; 0x2c
 801f1f0:	f7ff ff2a 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 801f1f4:	20c2      	movs	r0, #194	; 0xc2
 801f1f6:	f7ff fee3 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 801f1fa:	2001      	movs	r0, #1
 801f1fc:	f7ff ff24 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 801f200:	20c3      	movs	r0, #195	; 0xc3
 801f202:	f7ff fedd 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 801f206:	2012      	movs	r0, #18
 801f208:	f7ff ff1e 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 801f20c:	20c4      	movs	r0, #196	; 0xc4
 801f20e:	f7ff fed7 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 801f212:	2020      	movs	r0, #32
 801f214:	f7ff ff18 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 801f218:	20c6      	movs	r0, #198	; 0xc6
 801f21a:	f7ff fed1 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 801f21e:	200f      	movs	r0, #15
 801f220:	f7ff ff12 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 801f224:	20d0      	movs	r0, #208	; 0xd0
 801f226:	f7ff fecb 	bl	801efc0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 801f22a:	20a4      	movs	r0, #164	; 0xa4
 801f22c:	f7ff ff0c 	bl	801f048 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 801f230:	20a1      	movs	r0, #161	; 0xa1
 801f232:	f7ff ff09 	bl	801f048 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 801f236:	20e0      	movs	r0, #224	; 0xe0
 801f238:	f7ff fec2 	bl	801efc0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 801f23c:	4b19      	ldr	r3, [pc, #100]	; (801f2a4 <ST7789_Init+0x134>)
 801f23e:	f107 0410 	add.w	r4, r7, #16
 801f242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f244:	c407      	stmia	r4!, {r0, r1, r2}
 801f246:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 801f248:	f107 0310 	add.w	r3, r7, #16
 801f24c:	210e      	movs	r1, #14
 801f24e:	4618      	mov	r0, r3
 801f250:	f7ff fece 	bl	801eff0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 801f254:	20e1      	movs	r0, #225	; 0xe1
 801f256:	f7ff feb3 	bl	801efc0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 801f25a:	4b13      	ldr	r3, [pc, #76]	; (801f2a8 <ST7789_Init+0x138>)
 801f25c:	463c      	mov	r4, r7
 801f25e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f260:	c407      	stmia	r4!, {r0, r1, r2}
 801f262:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 801f264:	463b      	mov	r3, r7
 801f266:	210e      	movs	r1, #14
 801f268:	4618      	mov	r0, r3
 801f26a:	f7ff fec1 	bl	801eff0 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 801f26e:	2021      	movs	r0, #33	; 0x21
 801f270:	f7ff fea6 	bl	801efc0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 801f274:	2011      	movs	r0, #17
 801f276:	f7ff fea3 	bl	801efc0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 801f27a:	2013      	movs	r0, #19
 801f27c:	f7ff fea0 	bl	801efc0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 801f280:	2029      	movs	r0, #41	; 0x29
 801f282:	f7ff fe9d 	bl	801efc0 <ST7789_WriteCommand>

	HAL_Delay(50);
 801f286:	2032      	movs	r0, #50	; 0x32
 801f288:	f7e2 fc30 	bl	8001aec <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 801f28c:	2000      	movs	r0, #0
 801f28e:	f000 f80d 	bl	801f2ac <ST7789_Fill_Color>
}
 801f292:	bf00      	nop
 801f294:	372c      	adds	r7, #44	; 0x2c
 801f296:	46bd      	mov	sp, r7
 801f298:	bd90      	pop	{r4, r7, pc}
 801f29a:	bf00      	nop
 801f29c:	40020000 	.word	0x40020000
 801f2a0:	08029d24 	.word	0x08029d24
 801f2a4:	08029d2c 	.word	0x08029d2c
 801f2a8:	08029d3c 	.word	0x08029d3c

0801f2ac <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 801f2ac:	b580      	push	{r7, lr}
 801f2ae:	b084      	sub	sp, #16
 801f2b0:	af00      	add	r7, sp, #0
 801f2b2:	4603      	mov	r3, r0
 801f2b4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 801f2b6:	23ef      	movs	r3, #239	; 0xef
 801f2b8:	22ef      	movs	r2, #239	; 0xef
 801f2ba:	2100      	movs	r1, #0
 801f2bc:	2000      	movs	r0, #0
 801f2be:	f7ff ff07 	bl	801f0d0 <ST7789_SetAddressWindow>
	for (i = 0; i < ST7789_WIDTH; i++)
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	81fb      	strh	r3, [r7, #14]
 801f2c6:	e019      	b.n	801f2fc <ST7789_Fill_Color+0x50>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	81bb      	strh	r3, [r7, #12]
 801f2cc:	e010      	b.n	801f2f0 <ST7789_Fill_Color+0x44>
			uint8_t data[] = {color >> 8, color & 0xFF};
 801f2ce:	88fb      	ldrh	r3, [r7, #6]
 801f2d0:	0a1b      	lsrs	r3, r3, #8
 801f2d2:	b29b      	uxth	r3, r3
 801f2d4:	b2db      	uxtb	r3, r3
 801f2d6:	723b      	strb	r3, [r7, #8]
 801f2d8:	88fb      	ldrh	r3, [r7, #6]
 801f2da:	b2db      	uxtb	r3, r3
 801f2dc:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 801f2de:	f107 0308 	add.w	r3, r7, #8
 801f2e2:	2102      	movs	r1, #2
 801f2e4:	4618      	mov	r0, r3
 801f2e6:	f7ff fe83 	bl	801eff0 <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 801f2ea:	89bb      	ldrh	r3, [r7, #12]
 801f2ec:	3301      	adds	r3, #1
 801f2ee:	81bb      	strh	r3, [r7, #12]
 801f2f0:	89bb      	ldrh	r3, [r7, #12]
 801f2f2:	2bef      	cmp	r3, #239	; 0xef
 801f2f4:	d9eb      	bls.n	801f2ce <ST7789_Fill_Color+0x22>
	for (i = 0; i < ST7789_WIDTH; i++)
 801f2f6:	89fb      	ldrh	r3, [r7, #14]
 801f2f8:	3301      	adds	r3, #1
 801f2fa:	81fb      	strh	r3, [r7, #14]
 801f2fc:	89fb      	ldrh	r3, [r7, #14]
 801f2fe:	2bef      	cmp	r3, #239	; 0xef
 801f300:	d9e2      	bls.n	801f2c8 <ST7789_Fill_Color+0x1c>
		}
}
 801f302:	bf00      	nop
 801f304:	3710      	adds	r7, #16
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}
	...

0801f30c <ST7789_SPI_Send>:
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
}

static void ST7789_SPI_Send(uint8_t *data, uint16_t size)
{
 801f30c:	b580      	push	{r7, lr}
 801f30e:	b082      	sub	sp, #8
 801f310:	af00      	add	r7, sp, #0
 801f312:	6078      	str	r0, [r7, #4]
 801f314:	460b      	mov	r3, r1
 801f316:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&ST7789_SPI_PORT,data,size,1);
 801f318:	887a      	ldrh	r2, [r7, #2]
 801f31a:	2301      	movs	r3, #1
 801f31c:	6879      	ldr	r1, [r7, #4]
 801f31e:	4803      	ldr	r0, [pc, #12]	; (801f32c <ST7789_SPI_Send+0x20>)
 801f320:	f7e4 faa6 	bl	8003870 <HAL_SPI_Transmit>
}
 801f324:	bf00      	nop
 801f326:	3708      	adds	r7, #8
 801f328:	46bd      	mov	sp, r7
 801f32a:	bd80      	pop	{r7, pc}
 801f32c:	2000698c 	.word	0x2000698c

0801f330 <ST7789_Send_Data>:

void ST7789_Send_Data(uint16_t x, uint16_t y, uint16_t x_end, uint16_t y_end, uint8_t *p){
 801f330:	b590      	push	{r4, r7, lr}
 801f332:	b083      	sub	sp, #12
 801f334:	af00      	add	r7, sp, #0
 801f336:	4604      	mov	r4, r0
 801f338:	4608      	mov	r0, r1
 801f33a:	4611      	mov	r1, r2
 801f33c:	461a      	mov	r2, r3
 801f33e:	4623      	mov	r3, r4
 801f340:	80fb      	strh	r3, [r7, #6]
 801f342:	4603      	mov	r3, r0
 801f344:	80bb      	strh	r3, [r7, #4]
 801f346:	460b      	mov	r3, r1
 801f348:	807b      	strh	r3, [r7, #2]
 801f34a:	4613      	mov	r3, r2
 801f34c:	803b      	strh	r3, [r7, #0]
	ST7789_SetAddressWindow(x, y, x_end, y_end);
 801f34e:	883b      	ldrh	r3, [r7, #0]
 801f350:	887a      	ldrh	r2, [r7, #2]
 801f352:	88b9      	ldrh	r1, [r7, #4]
 801f354:	88f8      	ldrh	r0, [r7, #6]
 801f356:	f7ff febb 	bl	801f0d0 <ST7789_SetAddressWindow>
	ST7789_DC_Set();
 801f35a:	2201      	movs	r2, #1
 801f35c:	2104      	movs	r1, #4
 801f35e:	480d      	ldr	r0, [pc, #52]	; (801f394 <ST7789_Send_Data+0x64>)
 801f360:	f7e3 f992 	bl	8002688 <HAL_GPIO_WritePin>
	ST7789_SPI_Send(p,(x_end - x + 1) * (y_end - y + 1) * 2);
 801f364:	887a      	ldrh	r2, [r7, #2]
 801f366:	88fb      	ldrh	r3, [r7, #6]
 801f368:	1ad3      	subs	r3, r2, r3
 801f36a:	3301      	adds	r3, #1
 801f36c:	b29a      	uxth	r2, r3
 801f36e:	8839      	ldrh	r1, [r7, #0]
 801f370:	88bb      	ldrh	r3, [r7, #4]
 801f372:	1acb      	subs	r3, r1, r3
 801f374:	3301      	adds	r3, #1
 801f376:	b29b      	uxth	r3, r3
 801f378:	fb12 f303 	smulbb	r3, r2, r3
 801f37c:	b29b      	uxth	r3, r3
 801f37e:	005b      	lsls	r3, r3, #1
 801f380:	b29b      	uxth	r3, r3
 801f382:	4619      	mov	r1, r3
 801f384:	69b8      	ldr	r0, [r7, #24]
 801f386:	f7ff ffc1 	bl	801f30c <ST7789_SPI_Send>
}
 801f38a:	bf00      	nop
 801f38c:	370c      	adds	r7, #12
 801f38e:	46bd      	mov	sp, r7
 801f390:	bd90      	pop	{r4, r7, pc}
 801f392:	bf00      	nop
 801f394:	40020000 	.word	0x40020000

0801f398 <tos_Tft_init>:
#if DMA_ACTIVE
static lv_disp_drv_t * st7789disp_p;
#endif

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);
void tos_Tft_init(void){
 801f398:	b580      	push	{r7, lr}
 801f39a:	b08a      	sub	sp, #40	; 0x28
 801f39c:	af00      	add	r7, sp, #0
	  ST7789_Init();
 801f39e:	f7ff fee7 	bl	801f170 <ST7789_Init>
	  lv_init();
 801f3a2:	f7e6 f9db 	bl	800575c <lv_init>

	 static lv_disp_buf_t disp_buf;
	 static lv_color_t buf[LV_HOR_RES_MAX * LV_VER_RES_MAX / 10];
	 lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX / 10);
 801f3a6:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 801f3aa:	2200      	movs	r2, #0
 801f3ac:	4909      	ldr	r1, [pc, #36]	; (801f3d4 <tos_Tft_init+0x3c>)
 801f3ae:	480a      	ldr	r0, [pc, #40]	; (801f3d8 <tos_Tft_init+0x40>)
 801f3b0:	f7f3 f84c 	bl	801244c <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 801f3b4:	1d3b      	adds	r3, r7, #4
 801f3b6:	4618      	mov	r0, r3
 801f3b8:	f7f3 f80b 	bl	80123d2 <lv_disp_drv_init>
	  disp_drv.buffer = &disp_buf;
 801f3bc:	4b06      	ldr	r3, [pc, #24]	; (801f3d8 <tos_Tft_init+0x40>)
 801f3be:	60bb      	str	r3, [r7, #8]
	  disp_drv.flush_cb = st7789_flush_cb;
 801f3c0:	4b06      	ldr	r3, [pc, #24]	; (801f3dc <tos_Tft_init+0x44>)
 801f3c2:	613b      	str	r3, [r7, #16]
	  lv_disp_drv_register(&disp_drv);
 801f3c4:	1d3b      	adds	r3, r7, #4
 801f3c6:	4618      	mov	r0, r3
 801f3c8:	f7f3 f85e 	bl	8012488 <lv_disp_drv_register>

}
 801f3cc:	bf00      	nop
 801f3ce:	3728      	adds	r7, #40	; 0x28
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	bd80      	pop	{r7, pc}
 801f3d4:	20002cc0 	.word	0x20002cc0
 801f3d8:	20002ca4 	.word	0x20002ca4
 801f3dc:	0801f3e1 	.word	0x0801f3e1

0801f3e0 <st7789_flush_cb>:

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 801f3e0:	b590      	push	{r4, r7, lr}
 801f3e2:	b087      	sub	sp, #28
 801f3e4:	af02      	add	r7, sp, #8
 801f3e6:	60f8      	str	r0, [r7, #12]
 801f3e8:	60b9      	str	r1, [r7, #8]
 801f3ea:	607a      	str	r2, [r7, #4]
	 	if(area->x2 < 0) return;
 801f3ec:	68bb      	ldr	r3, [r7, #8]
 801f3ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	db27      	blt.n	801f446 <st7789_flush_cb+0x66>
	    if(area->y2 < 0) return;
 801f3f6:	68bb      	ldr	r3, [r7, #8]
 801f3f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	db24      	blt.n	801f44a <st7789_flush_cb+0x6a>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 801f400:	68bb      	ldr	r3, [r7, #8]
 801f402:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f406:	2bef      	cmp	r3, #239	; 0xef
 801f408:	dc21      	bgt.n	801f44e <st7789_flush_cb+0x6e>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 801f40a:	68bb      	ldr	r3, [r7, #8]
 801f40c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f410:	2bef      	cmp	r3, #239	; 0xef
 801f412:	dc1e      	bgt.n	801f452 <st7789_flush_cb+0x72>

#if DMA_ACTIVE
	      ST7789_Send_Data_DMA(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
	      st7789disp_p=disp_drv;
#else
	ST7789_Send_Data(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
 801f414:	68bb      	ldr	r3, [r7, #8]
 801f416:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f41a:	b298      	uxth	r0, r3
 801f41c:	68bb      	ldr	r3, [r7, #8]
 801f41e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f422:	b299      	uxth	r1, r3
 801f424:	68bb      	ldr	r3, [r7, #8]
 801f426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f42a:	b29a      	uxth	r2, r3
 801f42c:	68bb      	ldr	r3, [r7, #8]
 801f42e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f432:	b29c      	uxth	r4, r3
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	9300      	str	r3, [sp, #0]
 801f438:	4623      	mov	r3, r4
 801f43a:	f7ff ff79 	bl	801f330 <ST7789_Send_Data>
    lv_disp_flush_ready(disp_drv);
 801f43e:	68f8      	ldr	r0, [r7, #12]
 801f440:	f7f3 f91c 	bl	801267c <lv_disp_flush_ready>
 801f444:	e006      	b.n	801f454 <st7789_flush_cb+0x74>
	 	if(area->x2 < 0) return;
 801f446:	bf00      	nop
 801f448:	e004      	b.n	801f454 <st7789_flush_cb+0x74>
	    if(area->y2 < 0) return;
 801f44a:	bf00      	nop
 801f44c:	e002      	b.n	801f454 <st7789_flush_cb+0x74>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 801f44e:	bf00      	nop
 801f450:	e000      	b.n	801f454 <st7789_flush_cb+0x74>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 801f452:	bf00      	nop
#endif
}
 801f454:	3714      	adds	r7, #20
 801f456:	46bd      	mov	sp, r7
 801f458:	bd90      	pop	{r4, r7, pc}

0801f45a <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 801f45a:	b580      	push	{r7, lr}
 801f45c:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 801f45e:	f7f3 f8a3 	bl	80125a8 <lv_disp_get_default>
 801f462:	4603      	mov	r3, r0
 801f464:	4618      	mov	r0, r3
 801f466:	f7e5 fd6b 	bl	8004f40 <lv_disp_get_scr_act>
 801f46a:	4603      	mov	r3, r0
}
 801f46c:	4618      	mov	r0, r3
 801f46e:	bd80      	pop	{r7, pc}

0801f470 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 801f470:	b580      	push	{r7, lr}
 801f472:	b084      	sub	sp, #16
 801f474:	af00      	add	r7, sp, #0
 801f476:	60f8      	str	r0, [r7, #12]
 801f478:	460b      	mov	r3, r1
 801f47a:	607a      	str	r2, [r7, #4]
 801f47c:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 801f47e:	6879      	ldr	r1, [r7, #4]
 801f480:	68f8      	ldr	r0, [r7, #12]
 801f482:	f7e7 fbd4 	bl	8006c2e <lv_obj_set_style>
}
 801f486:	bf00      	nop
 801f488:	3710      	adds	r7, #16
 801f48a:	46bd      	mov	sp, r7
 801f48c:	bd80      	pop	{r7, pc}

0801f48e <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801f48e:	b580      	push	{r7, lr}
 801f490:	b084      	sub	sp, #16
 801f492:	af00      	add	r7, sp, #0
 801f494:	60f8      	str	r0, [r7, #12]
 801f496:	460b      	mov	r3, r1
 801f498:	607a      	str	r2, [r7, #4]
 801f49a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801f49c:	6879      	ldr	r1, [r7, #4]
 801f49e:	68f8      	ldr	r0, [r7, #12]
 801f4a0:	f7e7 fbc5 	bl	8006c2e <lv_obj_set_style>
}
 801f4a4:	bf00      	nop
 801f4a6:	3710      	adds	r7, #16
 801f4a8:	46bd      	mov	sp, r7
 801f4aa:	bd80      	pop	{r7, pc}

0801f4ac <tos_MainScreen_Init>:

@param theme:
false ->Light Theme
true ->Dark Theme
*/
void tos_MainScreen_Init(uint8_t screenType,bool theme) {
 801f4ac:	b580      	push	{r7, lr}
 801f4ae:	b082      	sub	sp, #8
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	4603      	mov	r3, r0
 801f4b4:	460a      	mov	r2, r1
 801f4b6:	71fb      	strb	r3, [r7, #7]
 801f4b8:	4613      	mov	r3, r2
 801f4ba:	71bb      	strb	r3, [r7, #6]
		    weekDayStr="Gun";
 801f4bc:	4b3d      	ldr	r3, [pc, #244]	; (801f5b4 <tos_MainScreen_Init+0x108>)
 801f4be:	4a3e      	ldr	r2, [pc, #248]	; (801f5b8 <tos_MainScreen_Init+0x10c>)
 801f4c0:	601a      	str	r2, [r3, #0]
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 801f4c2:	493e      	ldr	r1, [pc, #248]	; (801f5bc <tos_MainScreen_Init+0x110>)
 801f4c4:	483e      	ldr	r0, [pc, #248]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4c6:	f7e9 f951 	bl	800876c <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 801f4ca:	4a3d      	ldr	r2, [pc, #244]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4cc:	4b3d      	ldr	r3, [pc, #244]	; (801f5c4 <tos_MainScreen_Init+0x118>)
 801f4ce:	881b      	ldrh	r3, [r3, #0]
 801f4d0:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 801f4d2:	4a3b      	ldr	r2, [pc, #236]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4d4:	4b3b      	ldr	r3, [pc, #236]	; (801f5c4 <tos_MainScreen_Init+0x118>)
 801f4d6:	881b      	ldrh	r3, [r3, #0]
 801f4d8:	8093      	strh	r3, [r2, #4]
	if(theme){
 801f4da:	79bb      	ldrb	r3, [r7, #6]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d009      	beq.n	801f4f4 <tos_MainScreen_Init+0x48>
		lv_style_copy(&style_screen, &lv_style_plain);
 801f4e0:	4936      	ldr	r1, [pc, #216]	; (801f5bc <tos_MainScreen_Init+0x110>)
 801f4e2:	4837      	ldr	r0, [pc, #220]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4e4:	f7e9 f942 	bl	800876c <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_BLACK;
 801f4e8:	4b35      	ldr	r3, [pc, #212]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4ea:	2200      	movs	r2, #0
 801f4ec:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 801f4ee:	4b34      	ldr	r3, [pc, #208]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	809a      	strh	r2, [r3, #4]
	}
	lv_obj_set_style(lv_scr_act(), &style_screen);
 801f4f4:	f7ff ffb1 	bl	801f45a <lv_scr_act>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	4931      	ldr	r1, [pc, #196]	; (801f5c0 <tos_MainScreen_Init+0x114>)
 801f4fc:	4618      	mov	r0, r3
 801f4fe:	f7e7 fb96 	bl	8006c2e <lv_obj_set_style>

	MainScreenType= screenType;
 801f502:	4a31      	ldr	r2, [pc, #196]	; (801f5c8 <tos_MainScreen_Init+0x11c>)
 801f504:	79fb      	ldrb	r3, [r7, #7]
 801f506:	7013      	strb	r3, [r2, #0]
	MS_taskController=true;
 801f508:	4b30      	ldr	r3, [pc, #192]	; (801f5cc <tos_MainScreen_Init+0x120>)
 801f50a:	2201      	movs	r2, #1
 801f50c:	701a      	strb	r2, [r3, #0]
	switch(screenType){
 801f50e:	79fb      	ldrb	r3, [r7, #7]
 801f510:	2b01      	cmp	r3, #1
 801f512:	d010      	beq.n	801f536 <tos_MainScreen_Init+0x8a>
 801f514:	2b02      	cmp	r3, #2
 801f516:	d01b      	beq.n	801f550 <tos_MainScreen_Init+0xa4>
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d125      	bne.n	801f568 <tos_MainScreen_Init+0xbc>
	case tos_mainScreen_Type1: tos_DigitalType_Init(0,theme);
 801f51c:	79bb      	ldrb	r3, [r7, #6]
 801f51e:	4619      	mov	r1, r3
 801f520:	2000      	movs	r0, #0
 801f522:	f000 fc2f 	bl	801fd84 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f526:	2300      	movs	r3, #0
 801f528:	2201      	movs	r2, #1
 801f52a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f52e:	4828      	ldr	r0, [pc, #160]	; (801f5d0 <tos_MainScreen_Init+0x124>)
 801f530:	f7f4 fc7e 	bl	8013e30 <lv_task_create>
 801f534:	e01d      	b.n	801f572 <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type2: tos_DigitalType_Init(1,theme);
 801f536:	79bb      	ldrb	r3, [r7, #6]
 801f538:	4619      	mov	r1, r3
 801f53a:	2001      	movs	r0, #1
 801f53c:	f000 fc22 	bl	801fd84 <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f540:	2300      	movs	r3, #0
 801f542:	2201      	movs	r2, #1
 801f544:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f548:	4821      	ldr	r0, [pc, #132]	; (801f5d0 <tos_MainScreen_Init+0x124>)
 801f54a:	f7f4 fc71 	bl	8013e30 <lv_task_create>
 801f54e:	e010      	b.n	801f572 <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type3: tos_AnalogueType_Init(theme);
 801f550:	79bb      	ldrb	r3, [r7, #6]
 801f552:	4618      	mov	r0, r3
 801f554:	f000 f848 	bl	801f5e8 <tos_AnalogueType_Init>
	lv_task_create(analogueDataPrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f558:	2300      	movs	r3, #0
 801f55a:	2201      	movs	r2, #1
 801f55c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f560:	481c      	ldr	r0, [pc, #112]	; (801f5d4 <tos_MainScreen_Init+0x128>)
 801f562:	f7f4 fc65 	bl	8013e30 <lv_task_create>
 801f566:	e004      	b.n	801f572 <tos_MainScreen_Init+0xc6>
	default: tos_DigitalType_Init(0,theme);
 801f568:	79bb      	ldrb	r3, [r7, #6]
 801f56a:	4619      	mov	r1, r3
 801f56c:	2000      	movs	r0, #0
 801f56e:	f000 fc09 	bl	801fd84 <tos_DigitalType_Init>
	}
	lv_task_create(batteryValueUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f572:	2300      	movs	r3, #0
 801f574:	2201      	movs	r2, #1
 801f576:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f57a:	4817      	ldr	r0, [pc, #92]	; (801f5d8 <tos_MainScreen_Init+0x12c>)
 801f57c:	f7f4 fc58 	bl	8013e30 <lv_task_create>
	lv_task_create(bluetoothStatusUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f580:	2300      	movs	r3, #0
 801f582:	2201      	movs	r2, #1
 801f584:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f588:	4814      	ldr	r0, [pc, #80]	; (801f5dc <tos_MainScreen_Init+0x130>)
 801f58a:	f7f4 fc51 	bl	8013e30 <lv_task_create>
	lv_task_create(steps_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f58e:	2300      	movs	r3, #0
 801f590:	2201      	movs	r2, #1
 801f592:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f596:	4812      	ldr	r0, [pc, #72]	; (801f5e0 <tos_MainScreen_Init+0x134>)
 801f598:	f7f4 fc4a 	bl	8013e30 <lv_task_create>
	lv_task_create(kCals_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f59c:	2300      	movs	r3, #0
 801f59e:	2201      	movs	r2, #1
 801f5a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f5a4:	480f      	ldr	r0, [pc, #60]	; (801f5e4 <tos_MainScreen_Init+0x138>)
 801f5a6:	f7f4 fc43 	bl	8013e30 <lv_task_create>



}
 801f5aa:	bf00      	nop
 801f5ac:	3708      	adds	r7, #8
 801f5ae:	46bd      	mov	sp, r7
 801f5b0:	bd80      	pop	{r7, pc}
 801f5b2:	bf00      	nop
 801f5b4:	20006e68 	.word	0x20006e68
 801f5b8:	08029d4c 	.word	0x08029d4c
 801f5bc:	20006c68 	.word	0x20006c68
 801f5c0:	200059c0 	.word	0x200059c0
 801f5c4:	08029d50 	.word	0x08029d50
 801f5c8:	20006e08 	.word	0x20006e08
 801f5cc:	20006e85 	.word	0x20006e85
 801f5d0:	08020e29 	.word	0x08020e29
 801f5d4:	08020f71 	.word	0x08020f71
 801f5d8:	08020a99 	.word	0x08020a99
 801f5dc:	08020af9 	.word	0x08020af9
 801f5e0:	08021029 	.word	0x08021029
 801f5e4:	08021171 	.word	0x08021171

0801f5e8 <tos_AnalogueType_Init>:

//Analogue Type
void tos_AnalogueType_Init(bool theme){
 801f5e8:	b580      	push	{r7, lr}
 801f5ea:	b084      	sub	sp, #16
 801f5ec:	af02      	add	r7, sp, #8
 801f5ee:	4603      	mov	r3, r0
 801f5f0:	71fb      	strb	r3, [r7, #7]

	static lv_style_t dDate_style,weekD_style;
    lv_style_copy(&dDate_style, &lv_style_plain);
 801f5f2:	49b9      	ldr	r1, [pc, #740]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f5f4:	48b9      	ldr	r0, [pc, #740]	; (801f8dc <tos_AnalogueType_Init+0x2f4>)
 801f5f6:	f7e9 f8b9 	bl	800876c <lv_style_copy>
    dDate_style.text.font =&digital_font_for_number_30;
 801f5fa:	4bb8      	ldr	r3, [pc, #736]	; (801f8dc <tos_AnalogueType_Init+0x2f4>)
 801f5fc:	4ab8      	ldr	r2, [pc, #736]	; (801f8e0 <tos_AnalogueType_Init+0x2f8>)
 801f5fe:	625a      	str	r2, [r3, #36]	; 0x24
	lv_style_copy(&weekD_style, &lv_style_plain);
 801f600:	49b5      	ldr	r1, [pc, #724]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f602:	48b8      	ldr	r0, [pc, #736]	; (801f8e4 <tos_AnalogueType_Init+0x2fc>)
 801f604:	f7e9 f8b2 	bl	800876c <lv_style_copy>
	weekD_style.text.font =&lv_font_roboto_22;
 801f608:	4bb6      	ldr	r3, [pc, #728]	; (801f8e4 <tos_AnalogueType_Init+0x2fc>)
 801f60a:	4ab7      	ldr	r2, [pc, #732]	; (801f8e8 <tos_AnalogueType_Init+0x300>)
 801f60c:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 801f60e:	79fb      	ldrb	r3, [r7, #7]
 801f610:	2b00      	cmp	r3, #0
 801f612:	d007      	beq.n	801f624 <tos_AnalogueType_Init+0x3c>
    	dDate_style.text.color = LV_COLOR_SILVER;
 801f614:	4ab1      	ldr	r2, [pc, #708]	; (801f8dc <tos_AnalogueType_Init+0x2f4>)
 801f616:	4bb5      	ldr	r3, [pc, #724]	; (801f8ec <tos_AnalogueType_Init+0x304>)
 801f618:	881b      	ldrh	r3, [r3, #0]
 801f61a:	8413      	strh	r3, [r2, #32]
    	weekD_style.text.color = LV_COLOR_SILVER;
 801f61c:	4ab1      	ldr	r2, [pc, #708]	; (801f8e4 <tos_AnalogueType_Init+0x2fc>)
 801f61e:	4bb3      	ldr	r3, [pc, #716]	; (801f8ec <tos_AnalogueType_Init+0x304>)
 801f620:	881b      	ldrh	r3, [r3, #0]
 801f622:	8413      	strh	r3, [r2, #32]
    }

    if(theme){
    }
    //Battery
    	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 801f624:	f7ff ff19 	bl	801f45a <lv_scr_act>
 801f628:	4603      	mov	r3, r0
 801f62a:	2100      	movs	r1, #0
 801f62c:	4618      	mov	r0, r3
 801f62e:	f7f9 ff71 	bl	8019514 <lv_label_create>
 801f632:	4602      	mov	r2, r0
 801f634:	4bae      	ldr	r3, [pc, #696]	; (801f8f0 <tos_AnalogueType_Init+0x308>)
 801f636:	601a      	str	r2, [r3, #0]
    	lv_style_copy(&battery_style, &lv_style_plain);
 801f638:	49a7      	ldr	r1, [pc, #668]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f63a:	48ae      	ldr	r0, [pc, #696]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f63c:	f7e9 f896 	bl	800876c <lv_style_copy>
    	battery_style.text.color = LV_COLOR_GREEN;
 801f640:	4aac      	ldr	r2, [pc, #688]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f642:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f646:	2104      	movs	r1, #4
 801f648:	f361 0302 	bfi	r3, r1, #0, #3
 801f64c:	f882 3020 	strb.w	r3, [r2, #32]
 801f650:	4aa8      	ldr	r2, [pc, #672]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f652:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f656:	f36f 03c7 	bfc	r3, #3, #5
 801f65a:	f882 3020 	strb.w	r3, [r2, #32]
 801f65e:	4aa5      	ldr	r2, [pc, #660]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f660:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f664:	f36f 0304 	bfc	r3, #0, #5
 801f668:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801f66c:	4aa1      	ldr	r2, [pc, #644]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f66e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f672:	f36f 1347 	bfc	r3, #5, #3
 801f676:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 801f67a:	4b9d      	ldr	r3, [pc, #628]	; (801f8f0 <tos_AnalogueType_Init+0x308>)
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	4a9d      	ldr	r2, [pc, #628]	; (801f8f4 <tos_AnalogueType_Init+0x30c>)
 801f680:	2100      	movs	r1, #0
 801f682:	4618      	mov	r0, r3
 801f684:	f7ff fef4 	bl	801f470 <lv_label_set_style>
    	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 801f688:	4b99      	ldr	r3, [pc, #612]	; (801f8f0 <tos_AnalogueType_Init+0x308>)
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	499a      	ldr	r1, [pc, #616]	; (801f8f8 <tos_AnalogueType_Init+0x310>)
 801f68e:	4618      	mov	r0, r3
 801f690:	f7fa f872 	bl	8019778 <lv_label_set_text>
    	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 801f694:	4b96      	ldr	r3, [pc, #600]	; (801f8f0 <tos_AnalogueType_Init+0x308>)
 801f696:	6818      	ldr	r0, [r3, #0]
 801f698:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f69c:	9300      	str	r3, [sp, #0]
 801f69e:	2364      	movs	r3, #100	; 0x64
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	2100      	movs	r1, #0
 801f6a4:	f7e6 fe1e 	bl	80062e4 <lv_obj_align>

    	//Bluetooth
    	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 801f6a8:	f7ff fed7 	bl	801f45a <lv_scr_act>
 801f6ac:	4603      	mov	r3, r0
 801f6ae:	2100      	movs	r1, #0
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f7f9 ff2f 	bl	8019514 <lv_label_create>
 801f6b6:	4602      	mov	r2, r0
 801f6b8:	4b90      	ldr	r3, [pc, #576]	; (801f8fc <tos_AnalogueType_Init+0x314>)
 801f6ba:	601a      	str	r2, [r3, #0]
        lv_style_copy(&bluetooth_style, &lv_style_plain);
 801f6bc:	4986      	ldr	r1, [pc, #536]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f6be:	4890      	ldr	r0, [pc, #576]	; (801f900 <tos_AnalogueType_Init+0x318>)
 801f6c0:	f7e9 f854 	bl	800876c <lv_style_copy>
    	bluetooth_style.text.color = LV_COLOR_WHITE;
 801f6c4:	4a8e      	ldr	r2, [pc, #568]	; (801f900 <tos_AnalogueType_Init+0x318>)
 801f6c6:	4b8f      	ldr	r3, [pc, #572]	; (801f904 <tos_AnalogueType_Init+0x31c>)
 801f6c8:	881b      	ldrh	r3, [r3, #0]
 801f6ca:	8413      	strh	r3, [r2, #32]
    	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 801f6cc:	4b8b      	ldr	r3, [pc, #556]	; (801f8fc <tos_AnalogueType_Init+0x314>)
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	4a8b      	ldr	r2, [pc, #556]	; (801f900 <tos_AnalogueType_Init+0x318>)
 801f6d2:	2100      	movs	r1, #0
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	f7ff fecb 	bl	801f470 <lv_label_set_style>
    	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 801f6da:	4b88      	ldr	r3, [pc, #544]	; (801f8fc <tos_AnalogueType_Init+0x314>)
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	498a      	ldr	r1, [pc, #552]	; (801f908 <tos_AnalogueType_Init+0x320>)
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f7fa f849 	bl	8019778 <lv_label_set_text>
    	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 801f6e6:	4b85      	ldr	r3, [pc, #532]	; (801f8fc <tos_AnalogueType_Init+0x314>)
 801f6e8:	6818      	ldr	r0, [r3, #0]
 801f6ea:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f6ee:	9300      	str	r3, [sp, #0]
 801f6f0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	2100      	movs	r1, #0
 801f6f8:	f7e6 fdf4 	bl	80062e4 <lv_obj_align>
    	//

      //Analogue Quadran
    	static lv_style_t analogue_quadran_style;
       lv_style_copy(&analogue_quadran_style, &lv_style_pretty_color);
 801f6fc:	4983      	ldr	r1, [pc, #524]	; (801f90c <tos_AnalogueType_Init+0x324>)
 801f6fe:	4884      	ldr	r0, [pc, #528]	; (801f910 <tos_AnalogueType_Init+0x328>)
 801f700:	f7e9 f834 	bl	800876c <lv_style_copy>
       analogue_quadran_style.line.width = 2;
 801f704:	4b82      	ldr	r3, [pc, #520]	; (801f910 <tos_AnalogueType_Init+0x328>)
 801f706:	2202      	movs	r2, #2
 801f708:	86da      	strh	r2, [r3, #54]	; 0x36
       analogue_quadran_style.line.color = LV_COLOR_SILVER;
 801f70a:	4a81      	ldr	r2, [pc, #516]	; (801f910 <tos_AnalogueType_Init+0x328>)
 801f70c:	4b77      	ldr	r3, [pc, #476]	; (801f8ec <tos_AnalogueType_Init+0x304>)
 801f70e:	881b      	ldrh	r3, [r3, #0]
 801f710:	8693      	strh	r3, [r2, #52]	; 0x34
       analogue_quadran_style.body.padding.left = 20;
 801f712:	4b7f      	ldr	r3, [pc, #508]	; (801f910 <tos_AnalogueType_Init+0x328>)
 801f714:	2214      	movs	r2, #20
 801f716:	835a      	strh	r2, [r3, #26]


       analogueQuadran = lv_lmeter_create(lv_scr_act(), NULL);
 801f718:	f7ff fe9f 	bl	801f45a <lv_scr_act>
 801f71c:	4603      	mov	r3, r0
 801f71e:	2100      	movs	r1, #0
 801f720:	4618      	mov	r0, r3
 801f722:	f7fb fa1b 	bl	801ab5c <lv_lmeter_create>
 801f726:	4602      	mov	r2, r0
 801f728:	4b7a      	ldr	r3, [pc, #488]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f72a:	601a      	str	r2, [r3, #0]
       lv_lmeter_set_range(analogueQuadran, 0, 59);
 801f72c:	4b79      	ldr	r3, [pc, #484]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	223b      	movs	r2, #59	; 0x3b
 801f732:	2100      	movs	r1, #0
 801f734:	4618      	mov	r0, r3
 801f736:	f7fb facb 	bl	801acd0 <lv_lmeter_set_range>
       lv_lmeter_set_scale(analogueQuadran, 360, 60);
 801f73a:	4b76      	ldr	r3, [pc, #472]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	223c      	movs	r2, #60	; 0x3c
 801f740:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801f744:	4618      	mov	r0, r3
 801f746:	f7fb fb0d 	bl	801ad64 <lv_lmeter_set_scale>
       lv_lmeter_set_style(analogueQuadran, LV_LMETER_STYLE_MAIN, &analogue_quadran_style);
 801f74a:	4b72      	ldr	r3, [pc, #456]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	4a70      	ldr	r2, [pc, #448]	; (801f910 <tos_AnalogueType_Init+0x328>)
 801f750:	2100      	movs	r1, #0
 801f752:	4618      	mov	r0, r3
 801f754:	f7ff fe9b 	bl	801f48e <lv_lmeter_set_style>
       lv_obj_set_size(analogueQuadran, 240, 240);
 801f758:	4b6e      	ldr	r3, [pc, #440]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	22f0      	movs	r2, #240	; 0xf0
 801f75e:	21f0      	movs	r1, #240	; 0xf0
 801f760:	4618      	mov	r0, r3
 801f762:	f7e6 fd1c 	bl	800619e <lv_obj_set_size>
       lv_obj_align(analogueQuadran, NULL, LV_ALIGN_CENTER, 0, 0);
 801f766:	4b6b      	ldr	r3, [pc, #428]	; (801f914 <tos_AnalogueType_Init+0x32c>)
 801f768:	6818      	ldr	r0, [r3, #0]
 801f76a:	2300      	movs	r3, #0
 801f76c:	9300      	str	r3, [sp, #0]
 801f76e:	2300      	movs	r3, #0
 801f770:	2200      	movs	r2, #0
 801f772:	2100      	movs	r1, #0
 801f774:	f7e6 fdb6 	bl	80062e4 <lv_obj_align>

       //Hours
       static lv_style_t hours_Style;
       	  lv_style_copy(&hours_Style, &lv_style_plain);
 801f778:	4957      	ldr	r1, [pc, #348]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f77a:	4867      	ldr	r0, [pc, #412]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f77c:	f7e8 fff6 	bl	800876c <lv_style_copy>
       	  hours_Style.line.color = LV_COLOR_MAGENTA;
 801f780:	4a65      	ldr	r2, [pc, #404]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f782:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f786:	f36f 0302 	bfc	r3, #0, #3
 801f78a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f78e:	4a62      	ldr	r2, [pc, #392]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f790:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f794:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801f798:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f79c:	4a5e      	ldr	r2, [pc, #376]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f79e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f7a2:	f043 031f 	orr.w	r3, r3, #31
 801f7a6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801f7aa:	4a5b      	ldr	r2, [pc, #364]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f7ac:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f7b0:	f36f 1347 	bfc	r3, #5, #3
 801f7b4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       	  hours_Style.line.width = 3;
 801f7b8:	4b57      	ldr	r3, [pc, #348]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f7ba:	2203      	movs	r2, #3
 801f7bc:	86da      	strh	r2, [r3, #54]	; 0x36

       	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 801f7be:	f7ff fe4c 	bl	801f45a <lv_scr_act>
 801f7c2:	4603      	mov	r3, r0
 801f7c4:	2100      	movs	r1, #0
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7f5 f8a2 	bl	8014910 <lv_arc_create>
 801f7cc:	4602      	mov	r2, r0
 801f7ce:	4b53      	ldr	r3, [pc, #332]	; (801f91c <tos_AnalogueType_Init+0x334>)
 801f7d0:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(hoursArc, 240, 240);
 801f7d2:	4b52      	ldr	r3, [pc, #328]	; (801f91c <tos_AnalogueType_Init+0x334>)
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	22f0      	movs	r2, #240	; 0xf0
 801f7d8:	21f0      	movs	r1, #240	; 0xf0
 801f7da:	4618      	mov	r0, r3
 801f7dc:	f7e6 fcdf 	bl	800619e <lv_obj_set_size>
       	  lv_arc_set_angles(hoursArc, 180, 180);
 801f7e0:	4b4e      	ldr	r3, [pc, #312]	; (801f91c <tos_AnalogueType_Init+0x334>)
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	22b4      	movs	r2, #180	; 0xb4
 801f7e6:	21b4      	movs	r1, #180	; 0xb4
 801f7e8:	4618      	mov	r0, r3
 801f7ea:	f7f5 f90d 	bl	8014a08 <lv_arc_set_angles>
       	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 801f7ee:	4b4b      	ldr	r3, [pc, #300]	; (801f91c <tos_AnalogueType_Init+0x334>)
 801f7f0:	681b      	ldr	r3, [r3, #0]
 801f7f2:	4a49      	ldr	r2, [pc, #292]	; (801f918 <tos_AnalogueType_Init+0x330>)
 801f7f4:	2100      	movs	r1, #0
 801f7f6:	4618      	mov	r0, r3
 801f7f8:	f7f5 f92f 	bl	8014a5a <lv_arc_set_style>
       	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f7fc:	4b47      	ldr	r3, [pc, #284]	; (801f91c <tos_AnalogueType_Init+0x334>)
 801f7fe:	6818      	ldr	r0, [r3, #0]
 801f800:	2300      	movs	r3, #0
 801f802:	9300      	str	r3, [sp, #0]
 801f804:	2300      	movs	r3, #0
 801f806:	2200      	movs	r2, #0
 801f808:	2100      	movs	r1, #0
 801f80a:	f7e6 fd6b 	bl	80062e4 <lv_obj_align>

       	  //Minutes
       	static lv_style_t minutes_Style;
       	  lv_style_copy(&minutes_Style, &lv_style_plain);
 801f80e:	4932      	ldr	r1, [pc, #200]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f810:	4843      	ldr	r0, [pc, #268]	; (801f920 <tos_AnalogueType_Init+0x338>)
 801f812:	f7e8 ffab 	bl	800876c <lv_style_copy>
       	  minutes_Style.line.color = LV_COLOR_AQUA;
 801f816:	4a42      	ldr	r2, [pc, #264]	; (801f920 <tos_AnalogueType_Init+0x338>)
 801f818:	4b42      	ldr	r3, [pc, #264]	; (801f924 <tos_AnalogueType_Init+0x33c>)
 801f81a:	881b      	ldrh	r3, [r3, #0]
 801f81c:	8693      	strh	r3, [r2, #52]	; 0x34
       	  minutes_Style.line.width = 3;
 801f81e:	4b40      	ldr	r3, [pc, #256]	; (801f920 <tos_AnalogueType_Init+0x338>)
 801f820:	2203      	movs	r2, #3
 801f822:	86da      	strh	r2, [r3, #54]	; 0x36

       	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 801f824:	f7ff fe19 	bl	801f45a <lv_scr_act>
 801f828:	4603      	mov	r3, r0
 801f82a:	2100      	movs	r1, #0
 801f82c:	4618      	mov	r0, r3
 801f82e:	f7f5 f86f 	bl	8014910 <lv_arc_create>
 801f832:	4602      	mov	r2, r0
 801f834:	4b3c      	ldr	r3, [pc, #240]	; (801f928 <tos_AnalogueType_Init+0x340>)
 801f836:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(minutesArc, 225, 225);
 801f838:	4b3b      	ldr	r3, [pc, #236]	; (801f928 <tos_AnalogueType_Init+0x340>)
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	22e1      	movs	r2, #225	; 0xe1
 801f83e:	21e1      	movs	r1, #225	; 0xe1
 801f840:	4618      	mov	r0, r3
 801f842:	f7e6 fcac 	bl	800619e <lv_obj_set_size>
       	  lv_arc_set_angles(minutesArc, 180, 180);
 801f846:	4b38      	ldr	r3, [pc, #224]	; (801f928 <tos_AnalogueType_Init+0x340>)
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	22b4      	movs	r2, #180	; 0xb4
 801f84c:	21b4      	movs	r1, #180	; 0xb4
 801f84e:	4618      	mov	r0, r3
 801f850:	f7f5 f8da 	bl	8014a08 <lv_arc_set_angles>
       	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 801f854:	4b34      	ldr	r3, [pc, #208]	; (801f928 <tos_AnalogueType_Init+0x340>)
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	4a31      	ldr	r2, [pc, #196]	; (801f920 <tos_AnalogueType_Init+0x338>)
 801f85a:	2100      	movs	r1, #0
 801f85c:	4618      	mov	r0, r3
 801f85e:	f7f5 f8fc 	bl	8014a5a <lv_arc_set_style>
       	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f862:	4b31      	ldr	r3, [pc, #196]	; (801f928 <tos_AnalogueType_Init+0x340>)
 801f864:	6818      	ldr	r0, [r3, #0]
 801f866:	2300      	movs	r3, #0
 801f868:	9300      	str	r3, [sp, #0]
 801f86a:	2300      	movs	r3, #0
 801f86c:	2200      	movs	r2, #0
 801f86e:	2100      	movs	r1, #0
 801f870:	f7e6 fd38 	bl	80062e4 <lv_obj_align>

       	  //Seconds
       	static lv_style_t seconds_Style;
       	  lv_style_copy(&seconds_Style, &lv_style_plain);
 801f874:	4918      	ldr	r1, [pc, #96]	; (801f8d8 <tos_AnalogueType_Init+0x2f0>)
 801f876:	482d      	ldr	r0, [pc, #180]	; (801f92c <tos_AnalogueType_Init+0x344>)
 801f878:	f7e8 ff78 	bl	800876c <lv_style_copy>
       	  seconds_Style.line.color = LV_COLOR_ORANGE;
 801f87c:	4a2b      	ldr	r2, [pc, #172]	; (801f92c <tos_AnalogueType_Init+0x344>)
 801f87e:	4b2c      	ldr	r3, [pc, #176]	; (801f930 <tos_AnalogueType_Init+0x348>)
 801f880:	881b      	ldrh	r3, [r3, #0]
 801f882:	8693      	strh	r3, [r2, #52]	; 0x34
       	  seconds_Style.line.width = 3;
 801f884:	4b29      	ldr	r3, [pc, #164]	; (801f92c <tos_AnalogueType_Init+0x344>)
 801f886:	2203      	movs	r2, #3
 801f888:	86da      	strh	r2, [r3, #54]	; 0x36

       	  secondsArc = lv_arc_create(lv_scr_act(), NULL);
 801f88a:	f7ff fde6 	bl	801f45a <lv_scr_act>
 801f88e:	4603      	mov	r3, r0
 801f890:	2100      	movs	r1, #0
 801f892:	4618      	mov	r0, r3
 801f894:	f7f5 f83c 	bl	8014910 <lv_arc_create>
 801f898:	4602      	mov	r2, r0
 801f89a:	4b26      	ldr	r3, [pc, #152]	; (801f934 <tos_AnalogueType_Init+0x34c>)
 801f89c:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(secondsArc, 205, 205);
 801f89e:	4b25      	ldr	r3, [pc, #148]	; (801f934 <tos_AnalogueType_Init+0x34c>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	22cd      	movs	r2, #205	; 0xcd
 801f8a4:	21cd      	movs	r1, #205	; 0xcd
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f7e6 fc79 	bl	800619e <lv_obj_set_size>
       	  lv_arc_set_angles(secondsArc, 180, 180);
 801f8ac:	4b21      	ldr	r3, [pc, #132]	; (801f934 <tos_AnalogueType_Init+0x34c>)
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	22b4      	movs	r2, #180	; 0xb4
 801f8b2:	21b4      	movs	r1, #180	; 0xb4
 801f8b4:	4618      	mov	r0, r3
 801f8b6:	f7f5 f8a7 	bl	8014a08 <lv_arc_set_angles>
       	  lv_arc_set_style(secondsArc, LV_ARC_STYLE_MAIN, &seconds_Style);
 801f8ba:	4b1e      	ldr	r3, [pc, #120]	; (801f934 <tos_AnalogueType_Init+0x34c>)
 801f8bc:	681b      	ldr	r3, [r3, #0]
 801f8be:	4a1b      	ldr	r2, [pc, #108]	; (801f92c <tos_AnalogueType_Init+0x344>)
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	4618      	mov	r0, r3
 801f8c4:	f7f5 f8c9 	bl	8014a5a <lv_arc_set_style>
       	  lv_obj_align(secondsArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f8c8:	4b1a      	ldr	r3, [pc, #104]	; (801f934 <tos_AnalogueType_Init+0x34c>)
 801f8ca:	6818      	ldr	r0, [r3, #0]
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	9300      	str	r3, [sp, #0]
 801f8d0:	2300      	movs	r3, #0
 801f8d2:	2200      	movs	r2, #0
 801f8d4:	2100      	movs	r1, #0
 801f8d6:	e02f      	b.n	801f938 <tos_AnalogueType_Init+0x350>
 801f8d8:	20006c68 	.word	0x20006c68
 801f8dc:	200059fc 	.word	0x200059fc
 801f8e0:	200027e8 	.word	0x200027e8
 801f8e4:	20005a38 	.word	0x20005a38
 801f8e8:	200017c0 	.word	0x200017c0
 801f8ec:	08029d84 	.word	0x08029d84
 801f8f0:	20006ed4 	.word	0x20006ed4
 801f8f4:	20006e8c 	.word	0x20006e8c
 801f8f8:	08029d54 	.word	0x08029d54
 801f8fc:	20006e70 	.word	0x20006e70
 801f900:	20006e24 	.word	0x20006e24
 801f904:	08029d50 	.word	0x08029d50
 801f908:	08029d58 	.word	0x08029d58
 801f90c:	20006a88 	.word	0x20006a88
 801f910:	20005a74 	.word	0x20005a74
 801f914:	20006ecc 	.word	0x20006ecc
 801f918:	20005ab0 	.word	0x20005ab0
 801f91c:	20006e20 	.word	0x20006e20
 801f920:	20005aec 	.word	0x20005aec
 801f924:	08029d88 	.word	0x08029d88
 801f928:	20006e60 	.word	0x20006e60
 801f92c:	20005b28 	.word	0x20005b28
 801f930:	08029d8c 	.word	0x08029d8c
 801f934:	20006e10 	.word	0x20006e10
 801f938:	f7e6 fcd4 	bl	80062e4 <lv_obj_align>

       	 //Steps
       	static lv_style_t steps_Style,description_Style;
       			   		  lv_style_copy(&steps_Style, &lv_style_plain);
 801f93c:	49c0      	ldr	r1, [pc, #768]	; (801fc40 <tos_AnalogueType_Init+0x658>)
 801f93e:	48c1      	ldr	r0, [pc, #772]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f940:	f7e8 ff14 	bl	800876c <lv_style_copy>
       			   		  steps_Style.line.color = LV_COLOR_GREEN;
 801f944:	4abf      	ldr	r2, [pc, #764]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f946:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f94a:	2104      	movs	r1, #4
 801f94c:	f361 0302 	bfi	r3, r1, #0, #3
 801f950:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f954:	4abb      	ldr	r2, [pc, #748]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f956:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f95a:	f36f 03c7 	bfc	r3, #3, #5
 801f95e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f962:	4ab8      	ldr	r2, [pc, #736]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f964:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f968:	f36f 0304 	bfc	r3, #0, #5
 801f96c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801f970:	4ab4      	ldr	r2, [pc, #720]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f972:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f976:	f36f 1347 	bfc	r3, #5, #3
 801f97a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  steps_Style.line.width = 5;
 801f97e:	4bb1      	ldr	r3, [pc, #708]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f980:	2205      	movs	r2, #5
 801f982:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  steps_Style.text.color = LV_COLOR_GREEN;
 801f984:	4aaf      	ldr	r2, [pc, #700]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f986:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f98a:	2104      	movs	r1, #4
 801f98c:	f361 0302 	bfi	r3, r1, #0, #3
 801f990:	f882 3020 	strb.w	r3, [r2, #32]
 801f994:	4aab      	ldr	r2, [pc, #684]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f996:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f99a:	f36f 03c7 	bfc	r3, #3, #5
 801f99e:	f882 3020 	strb.w	r3, [r2, #32]
 801f9a2:	4aa8      	ldr	r2, [pc, #672]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f9a4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f9a8:	f36f 0304 	bfc	r3, #0, #5
 801f9ac:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801f9b0:	4aa4      	ldr	r2, [pc, #656]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f9b2:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f9b6:	f36f 1347 	bfc	r3, #5, #3
 801f9ba:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  steps_Style.text.font = &lv_font_roboto_22;
 801f9be:	4ba1      	ldr	r3, [pc, #644]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801f9c0:	4aa1      	ldr	r2, [pc, #644]	; (801fc48 <tos_AnalogueType_Init+0x660>)
 801f9c2:	625a      	str	r2, [r3, #36]	; 0x24

       			   		  lv_style_copy(&description_Style, &lv_style_plain);
 801f9c4:	499e      	ldr	r1, [pc, #632]	; (801fc40 <tos_AnalogueType_Init+0x658>)
 801f9c6:	48a1      	ldr	r0, [pc, #644]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801f9c8:	f7e8 fed0 	bl	800876c <lv_style_copy>
       			   		  description_Style.text.font = &lv_font_unscii_8;
 801f9cc:	4b9f      	ldr	r3, [pc, #636]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801f9ce:	4aa0      	ldr	r2, [pc, #640]	; (801fc50 <tos_AnalogueType_Init+0x668>)
 801f9d0:	625a      	str	r2, [r3, #36]	; 0x24
       			   		  description_Style.text.color = LV_COLOR_GRAY;
 801f9d2:	4a9e      	ldr	r2, [pc, #632]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801f9d4:	4b9f      	ldr	r3, [pc, #636]	; (801fc54 <tos_AnalogueType_Init+0x66c>)
 801f9d6:	881b      	ldrh	r3, [r3, #0]
 801f9d8:	8413      	strh	r3, [r2, #32]
       			   		    if(theme){
 801f9da:	79fb      	ldrb	r3, [r7, #7]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d003      	beq.n	801f9e8 <tos_AnalogueType_Init+0x400>
       			   		    	description_Style.text.color = LV_COLOR_WHITE;
 801f9e0:	4a9a      	ldr	r2, [pc, #616]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801f9e2:	4b9d      	ldr	r3, [pc, #628]	; (801fc58 <tos_AnalogueType_Init+0x670>)
 801f9e4:	881b      	ldrh	r3, [r3, #0]
 801f9e6:	8413      	strh	r3, [r2, #32]
       			   		    }

       			   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 801f9e8:	f7ff fd37 	bl	801f45a <lv_scr_act>
 801f9ec:	4603      	mov	r3, r0
 801f9ee:	2100      	movs	r1, #0
 801f9f0:	4618      	mov	r0, r3
 801f9f2:	f7f9 fd8f 	bl	8019514 <lv_label_create>
 801f9f6:	4602      	mov	r2, r0
 801f9f8:	4b98      	ldr	r3, [pc, #608]	; (801fc5c <tos_AnalogueType_Init+0x674>)
 801f9fa:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(stepsLbl, 150);
 801f9fc:	4b97      	ldr	r3, [pc, #604]	; (801fc5c <tos_AnalogueType_Init+0x674>)
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	2196      	movs	r1, #150	; 0x96
 801fa02:	4618      	mov	r0, r3
 801fa04:	f7e6 fc44 	bl	8006290 <lv_obj_set_width>
       			   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 801fa08:	4b94      	ldr	r3, [pc, #592]	; (801fc5c <tos_AnalogueType_Init+0x674>)
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	4a8d      	ldr	r2, [pc, #564]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801fa0e:	2100      	movs	r1, #0
 801fa10:	4618      	mov	r0, r3
 801fa12:	f7ff fd2d 	bl	801f470 <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", steps);
 801fa16:	4b92      	ldr	r3, [pc, #584]	; (801fc60 <tos_AnalogueType_Init+0x678>)
 801fa18:	881b      	ldrh	r3, [r3, #0]
 801fa1a:	4a92      	ldr	r2, [pc, #584]	; (801fc64 <tos_AnalogueType_Init+0x67c>)
 801fa1c:	2108      	movs	r1, #8
 801fa1e:	4892      	ldr	r0, [pc, #584]	; (801fc68 <tos_AnalogueType_Init+0x680>)
 801fa20:	f008 f8e6 	bl	8027bf0 <sniprintf>
       			   		 lv_label_set_text(stepsLbl, buffer);
 801fa24:	4b8d      	ldr	r3, [pc, #564]	; (801fc5c <tos_AnalogueType_Init+0x674>)
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	498f      	ldr	r1, [pc, #572]	; (801fc68 <tos_AnalogueType_Init+0x680>)
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	f7f9 fea4 	bl	8019778 <lv_label_set_text>
       			   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 801fa30:	4b8a      	ldr	r3, [pc, #552]	; (801fc5c <tos_AnalogueType_Init+0x674>)
 801fa32:	6818      	ldr	r0, [r3, #0]
 801fa34:	2328      	movs	r3, #40	; 0x28
 801fa36:	9300      	str	r3, [sp, #0]
 801fa38:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	2100      	movs	r1, #0
 801fa40:	f7e6 fc50 	bl	80062e4 <lv_obj_align>

       			         stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 801fa44:	f7ff fd09 	bl	801f45a <lv_scr_act>
 801fa48:	4603      	mov	r3, r0
 801fa4a:	2100      	movs	r1, #0
 801fa4c:	4618      	mov	r0, r3
 801fa4e:	f7f9 fd61 	bl	8019514 <lv_label_create>
 801fa52:	4602      	mov	r2, r0
 801fa54:	4b85      	ldr	r3, [pc, #532]	; (801fc6c <tos_AnalogueType_Init+0x684>)
 801fa56:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 801fa58:	4b84      	ldr	r3, [pc, #528]	; (801fc6c <tos_AnalogueType_Init+0x684>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	4a7b      	ldr	r2, [pc, #492]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801fa5e:	2100      	movs	r1, #0
 801fa60:	4618      	mov	r0, r3
 801fa62:	f7ff fd05 	bl	801f470 <lv_label_set_style>
       			   		 lv_label_set_text(stepsDescLbl, "steps");
 801fa66:	4b81      	ldr	r3, [pc, #516]	; (801fc6c <tos_AnalogueType_Init+0x684>)
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	4981      	ldr	r1, [pc, #516]	; (801fc70 <tos_AnalogueType_Init+0x688>)
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	f7f9 fe83 	bl	8019778 <lv_label_set_text>
       			   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -40, 55);
 801fa72:	4b7e      	ldr	r3, [pc, #504]	; (801fc6c <tos_AnalogueType_Init+0x684>)
 801fa74:	6818      	ldr	r0, [r3, #0]
 801fa76:	2337      	movs	r3, #55	; 0x37
 801fa78:	9300      	str	r3, [sp, #0]
 801fa7a:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801fa7e:	2200      	movs	r2, #0
 801fa80:	2100      	movs	r1, #0
 801fa82:	f7e6 fc2f 	bl	80062e4 <lv_obj_align>

       			   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 801fa86:	f7ff fce8 	bl	801f45a <lv_scr_act>
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	2100      	movs	r1, #0
 801fa8e:	4618      	mov	r0, r3
 801fa90:	f7f4 ff3e 	bl	8014910 <lv_arc_create>
 801fa94:	4602      	mov	r2, r0
 801fa96:	4b77      	ldr	r3, [pc, #476]	; (801fc74 <tos_AnalogueType_Init+0x68c>)
 801fa98:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(stepsArc, 65, 65);
 801fa9a:	4b76      	ldr	r3, [pc, #472]	; (801fc74 <tos_AnalogueType_Init+0x68c>)
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	2241      	movs	r2, #65	; 0x41
 801faa0:	2141      	movs	r1, #65	; 0x41
 801faa2:	4618      	mov	r0, r3
 801faa4:	f7e6 fb7b 	bl	800619e <lv_obj_set_size>
       			   		  lv_arc_set_angles(stepsArc, 0, 360);
 801faa8:	4b72      	ldr	r3, [pc, #456]	; (801fc74 <tos_AnalogueType_Init+0x68c>)
 801faaa:	681b      	ldr	r3, [r3, #0]
 801faac:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801fab0:	2100      	movs	r1, #0
 801fab2:	4618      	mov	r0, r3
 801fab4:	f7f4 ffa8 	bl	8014a08 <lv_arc_set_angles>
       			   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 801fab8:	4b6e      	ldr	r3, [pc, #440]	; (801fc74 <tos_AnalogueType_Init+0x68c>)
 801faba:	681b      	ldr	r3, [r3, #0]
 801fabc:	4a61      	ldr	r2, [pc, #388]	; (801fc44 <tos_AnalogueType_Init+0x65c>)
 801fabe:	2100      	movs	r1, #0
 801fac0:	4618      	mov	r0, r3
 801fac2:	f7f4 ffca 	bl	8014a5a <lv_arc_set_style>
       			   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -40, 40);
 801fac6:	4b6b      	ldr	r3, [pc, #428]	; (801fc74 <tos_AnalogueType_Init+0x68c>)
 801fac8:	6818      	ldr	r0, [r3, #0]
 801faca:	2328      	movs	r3, #40	; 0x28
 801facc:	9300      	str	r3, [sp, #0]
 801face:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801fad2:	2200      	movs	r2, #0
 801fad4:	2100      	movs	r1, #0
 801fad6:	f7e6 fc05 	bl	80062e4 <lv_obj_align>

       			   		  //Kcal
       			   	static lv_style_t kCals_Style;
       			   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 801fada:	4959      	ldr	r1, [pc, #356]	; (801fc40 <tos_AnalogueType_Init+0x658>)
 801fadc:	4866      	ldr	r0, [pc, #408]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fade:	f7e8 fe45 	bl	800876c <lv_style_copy>
       			   		  kCals_Style.line.color = LV_COLOR_RED;
 801fae2:	4a65      	ldr	r2, [pc, #404]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fae4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801fae8:	f36f 0302 	bfc	r3, #0, #3
 801faec:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801faf0:	4a61      	ldr	r2, [pc, #388]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801faf2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801faf6:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801fafa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801fafe:	4a5e      	ldr	r2, [pc, #376]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb00:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801fb04:	f36f 0304 	bfc	r3, #0, #5
 801fb08:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801fb0c:	4a5a      	ldr	r2, [pc, #360]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb0e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801fb12:	f36f 1347 	bfc	r3, #5, #3
 801fb16:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  kCals_Style.line.width = 3;
 801fb1a:	4b57      	ldr	r3, [pc, #348]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb1c:	2203      	movs	r2, #3
 801fb1e:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  kCals_Style.text.color = LV_COLOR_RED;
 801fb20:	4a55      	ldr	r2, [pc, #340]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb22:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fb26:	f36f 0302 	bfc	r3, #0, #3
 801fb2a:	f882 3020 	strb.w	r3, [r2, #32]
 801fb2e:	4a52      	ldr	r2, [pc, #328]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb30:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fb34:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801fb38:	f882 3020 	strb.w	r3, [r2, #32]
 801fb3c:	4a4e      	ldr	r2, [pc, #312]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb3e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fb42:	f36f 0304 	bfc	r3, #0, #5
 801fb46:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801fb4a:	4a4b      	ldr	r2, [pc, #300]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb4c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fb50:	f36f 1347 	bfc	r3, #5, #3
 801fb54:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  kCals_Style.text.font = &lv_font_roboto_22;
 801fb58:	4b47      	ldr	r3, [pc, #284]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb5a:	4a3b      	ldr	r2, [pc, #236]	; (801fc48 <tos_AnalogueType_Init+0x660>)
 801fb5c:	625a      	str	r2, [r3, #36]	; 0x24

       			   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 801fb5e:	f7ff fc7c 	bl	801f45a <lv_scr_act>
 801fb62:	4603      	mov	r3, r0
 801fb64:	2100      	movs	r1, #0
 801fb66:	4618      	mov	r0, r3
 801fb68:	f7f9 fcd4 	bl	8019514 <lv_label_create>
 801fb6c:	4602      	mov	r2, r0
 801fb6e:	4b43      	ldr	r3, [pc, #268]	; (801fc7c <tos_AnalogueType_Init+0x694>)
 801fb70:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(kCalsLbl, 150);
 801fb72:	4b42      	ldr	r3, [pc, #264]	; (801fc7c <tos_AnalogueType_Init+0x694>)
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	2196      	movs	r1, #150	; 0x96
 801fb78:	4618      	mov	r0, r3
 801fb7a:	f7e6 fb89 	bl	8006290 <lv_obj_set_width>
       			   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 801fb7e:	4b3f      	ldr	r3, [pc, #252]	; (801fc7c <tos_AnalogueType_Init+0x694>)
 801fb80:	681b      	ldr	r3, [r3, #0]
 801fb82:	4a3d      	ldr	r2, [pc, #244]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fb84:	2100      	movs	r1, #0
 801fb86:	4618      	mov	r0, r3
 801fb88:	f7ff fc72 	bl	801f470 <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", kCals);
 801fb8c:	4b3c      	ldr	r3, [pc, #240]	; (801fc80 <tos_AnalogueType_Init+0x698>)
 801fb8e:	881b      	ldrh	r3, [r3, #0]
 801fb90:	4a34      	ldr	r2, [pc, #208]	; (801fc64 <tos_AnalogueType_Init+0x67c>)
 801fb92:	2108      	movs	r1, #8
 801fb94:	4834      	ldr	r0, [pc, #208]	; (801fc68 <tos_AnalogueType_Init+0x680>)
 801fb96:	f008 f82b 	bl	8027bf0 <sniprintf>
       			   		 lv_label_set_text(kCalsLbl, buffer);
 801fb9a:	4b38      	ldr	r3, [pc, #224]	; (801fc7c <tos_AnalogueType_Init+0x694>)
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	4932      	ldr	r1, [pc, #200]	; (801fc68 <tos_AnalogueType_Init+0x680>)
 801fba0:	4618      	mov	r0, r3
 801fba2:	f7f9 fde9 	bl	8019778 <lv_label_set_text>
       			   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 801fba6:	4b35      	ldr	r3, [pc, #212]	; (801fc7c <tos_AnalogueType_Init+0x694>)
 801fba8:	6818      	ldr	r0, [r3, #0]
 801fbaa:	2328      	movs	r3, #40	; 0x28
 801fbac:	9300      	str	r3, [sp, #0]
 801fbae:	2328      	movs	r3, #40	; 0x28
 801fbb0:	2200      	movs	r2, #0
 801fbb2:	2100      	movs	r1, #0
 801fbb4:	f7e6 fb96 	bl	80062e4 <lv_obj_align>

       			   		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 801fbb8:	f7ff fc4f 	bl	801f45a <lv_scr_act>
 801fbbc:	4603      	mov	r3, r0
 801fbbe:	2100      	movs	r1, #0
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	f7f9 fca7 	bl	8019514 <lv_label_create>
 801fbc6:	4602      	mov	r2, r0
 801fbc8:	4b2e      	ldr	r3, [pc, #184]	; (801fc84 <tos_AnalogueType_Init+0x69c>)
 801fbca:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 801fbcc:	4b2d      	ldr	r3, [pc, #180]	; (801fc84 <tos_AnalogueType_Init+0x69c>)
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	4a1e      	ldr	r2, [pc, #120]	; (801fc4c <tos_AnalogueType_Init+0x664>)
 801fbd2:	2100      	movs	r1, #0
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f7ff fc4b 	bl	801f470 <lv_label_set_style>
       			   		 lv_label_set_text(kCalsDescLbl, "kCals");
 801fbda:	4b2a      	ldr	r3, [pc, #168]	; (801fc84 <tos_AnalogueType_Init+0x69c>)
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	492a      	ldr	r1, [pc, #168]	; (801fc88 <tos_AnalogueType_Init+0x6a0>)
 801fbe0:	4618      	mov	r0, r3
 801fbe2:	f7f9 fdc9 	bl	8019778 <lv_label_set_text>
       			   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 40, 55);
 801fbe6:	4b27      	ldr	r3, [pc, #156]	; (801fc84 <tos_AnalogueType_Init+0x69c>)
 801fbe8:	6818      	ldr	r0, [r3, #0]
 801fbea:	2337      	movs	r3, #55	; 0x37
 801fbec:	9300      	str	r3, [sp, #0]
 801fbee:	2328      	movs	r3, #40	; 0x28
 801fbf0:	2200      	movs	r2, #0
 801fbf2:	2100      	movs	r1, #0
 801fbf4:	f7e6 fb76 	bl	80062e4 <lv_obj_align>

       			   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 801fbf8:	f7ff fc2f 	bl	801f45a <lv_scr_act>
 801fbfc:	4603      	mov	r3, r0
 801fbfe:	2100      	movs	r1, #0
 801fc00:	4618      	mov	r0, r3
 801fc02:	f7f4 fe85 	bl	8014910 <lv_arc_create>
 801fc06:	4602      	mov	r2, r0
 801fc08:	4b20      	ldr	r3, [pc, #128]	; (801fc8c <tos_AnalogueType_Init+0x6a4>)
 801fc0a:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(kCalsArc, 65, 65);
 801fc0c:	4b1f      	ldr	r3, [pc, #124]	; (801fc8c <tos_AnalogueType_Init+0x6a4>)
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	2241      	movs	r2, #65	; 0x41
 801fc12:	2141      	movs	r1, #65	; 0x41
 801fc14:	4618      	mov	r0, r3
 801fc16:	f7e6 fac2 	bl	800619e <lv_obj_set_size>
       			   		  lv_arc_set_angles(kCalsArc, 0, 360);
 801fc1a:	4b1c      	ldr	r3, [pc, #112]	; (801fc8c <tos_AnalogueType_Init+0x6a4>)
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801fc22:	2100      	movs	r1, #0
 801fc24:	4618      	mov	r0, r3
 801fc26:	f7f4 feef 	bl	8014a08 <lv_arc_set_angles>
       			   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 801fc2a:	4b18      	ldr	r3, [pc, #96]	; (801fc8c <tos_AnalogueType_Init+0x6a4>)
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	4a12      	ldr	r2, [pc, #72]	; (801fc78 <tos_AnalogueType_Init+0x690>)
 801fc30:	2100      	movs	r1, #0
 801fc32:	4618      	mov	r0, r3
 801fc34:	f7f4 ff11 	bl	8014a5a <lv_arc_set_style>
       			   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 40, 40);
 801fc38:	4b14      	ldr	r3, [pc, #80]	; (801fc8c <tos_AnalogueType_Init+0x6a4>)
 801fc3a:	6818      	ldr	r0, [r3, #0]
 801fc3c:	e028      	b.n	801fc90 <tos_AnalogueType_Init+0x6a8>
 801fc3e:	bf00      	nop
 801fc40:	20006c68 	.word	0x20006c68
 801fc44:	20005b64 	.word	0x20005b64
 801fc48:	200017c0 	.word	0x200017c0
 801fc4c:	20005ba0 	.word	0x20005ba0
 801fc50:	200026cc 	.word	0x200026cc
 801fc54:	08029d90 	.word	0x08029d90
 801fc58:	08029d50 	.word	0x08029d50
 801fc5c:	20006e88 	.word	0x20006e88
 801fc60:	20006e64 	.word	0x20006e64
 801fc64:	08029d5c 	.word	0x08029d5c
 801fc68:	20006e74 	.word	0x20006e74
 801fc6c:	20006e1c 	.word	0x20006e1c
 801fc70:	08029d64 	.word	0x08029d64
 801fc74:	20006e6c 	.word	0x20006e6c
 801fc78:	20005bdc 	.word	0x20005bdc
 801fc7c:	20006ee4 	.word	0x20006ee4
 801fc80:	20006e0a 	.word	0x20006e0a
 801fc84:	20006ed0 	.word	0x20006ed0
 801fc88:	08029d6c 	.word	0x08029d6c
 801fc8c:	20006eec 	.word	0x20006eec
 801fc90:	2328      	movs	r3, #40	; 0x28
 801fc92:	9300      	str	r3, [sp, #0]
 801fc94:	2328      	movs	r3, #40	; 0x28
 801fc96:	2200      	movs	r2, #0
 801fc98:	2100      	movs	r1, #0
 801fc9a:	f7e6 fb23 	bl	80062e4 <lv_obj_align>

       			       //Digital Date
       			   		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 801fc9e:	f7ff fbdc 	bl	801f45a <lv_scr_act>
 801fca2:	4603      	mov	r3, r0
 801fca4:	2100      	movs	r1, #0
 801fca6:	4618      	mov	r0, r3
 801fca8:	f7f9 fc34 	bl	8019514 <lv_label_create>
 801fcac:	4602      	mov	r2, r0
 801fcae:	4b2b      	ldr	r3, [pc, #172]	; (801fd5c <tos_AnalogueType_Init+0x774>)
 801fcb0:	601a      	str	r2, [r3, #0]
       			   		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 801fcb2:	4b2a      	ldr	r3, [pc, #168]	; (801fd5c <tos_AnalogueType_Init+0x774>)
 801fcb4:	681b      	ldr	r3, [r3, #0]
 801fcb6:	4a2a      	ldr	r2, [pc, #168]	; (801fd60 <tos_AnalogueType_Init+0x778>)
 801fcb8:	2100      	movs	r1, #0
 801fcba:	4618      	mov	r0, r3
 801fcbc:	f7ff fbd8 	bl	801f470 <lv_label_set_style>
       			     	    snprintf(buffer, 9, "%02d:%02d:%04d", date,month,year);
 801fcc0:	4b28      	ldr	r3, [pc, #160]	; (801fd64 <tos_AnalogueType_Init+0x77c>)
 801fcc2:	781b      	ldrb	r3, [r3, #0]
 801fcc4:	4619      	mov	r1, r3
 801fcc6:	4b28      	ldr	r3, [pc, #160]	; (801fd68 <tos_AnalogueType_Init+0x780>)
 801fcc8:	781b      	ldrb	r3, [r3, #0]
 801fcca:	461a      	mov	r2, r3
 801fccc:	4b27      	ldr	r3, [pc, #156]	; (801fd6c <tos_AnalogueType_Init+0x784>)
 801fcce:	881b      	ldrh	r3, [r3, #0]
 801fcd0:	9301      	str	r3, [sp, #4]
 801fcd2:	9200      	str	r2, [sp, #0]
 801fcd4:	460b      	mov	r3, r1
 801fcd6:	4a26      	ldr	r2, [pc, #152]	; (801fd70 <tos_AnalogueType_Init+0x788>)
 801fcd8:	2109      	movs	r1, #9
 801fcda:	4826      	ldr	r0, [pc, #152]	; (801fd74 <tos_AnalogueType_Init+0x78c>)
 801fcdc:	f007 ff88 	bl	8027bf0 <sniprintf>
       			 		    lv_label_set_text(digitalDate, buffer);
 801fce0:	4b1e      	ldr	r3, [pc, #120]	; (801fd5c <tos_AnalogueType_Init+0x774>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	4923      	ldr	r1, [pc, #140]	; (801fd74 <tos_AnalogueType_Init+0x78c>)
 801fce6:	4618      	mov	r0, r3
 801fce8:	f7f9 fd46 	bl	8019778 <lv_label_set_text>
       			   		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 801fcec:	4b1b      	ldr	r3, [pc, #108]	; (801fd5c <tos_AnalogueType_Init+0x774>)
 801fcee:	6818      	ldr	r0, [r3, #0]
 801fcf0:	f06f 0322 	mvn.w	r3, #34	; 0x22
 801fcf4:	9300      	str	r3, [sp, #0]
 801fcf6:	2300      	movs	r3, #0
 801fcf8:	2200      	movs	r2, #0
 801fcfa:	2100      	movs	r1, #0
 801fcfc:	f7e6 faf2 	bl	80062e4 <lv_obj_align>

       			   		    //Week Day
       			   		    weekDay = lv_label_create(lv_scr_act(), NULL);
 801fd00:	f7ff fbab 	bl	801f45a <lv_scr_act>
 801fd04:	4603      	mov	r3, r0
 801fd06:	2100      	movs	r1, #0
 801fd08:	4618      	mov	r0, r3
 801fd0a:	f7f9 fc03 	bl	8019514 <lv_label_create>
 801fd0e:	4602      	mov	r2, r0
 801fd10:	4b19      	ldr	r3, [pc, #100]	; (801fd78 <tos_AnalogueType_Init+0x790>)
 801fd12:	601a      	str	r2, [r3, #0]
       			   		    lv_obj_set_width(weekDay, 150);
 801fd14:	4b18      	ldr	r3, [pc, #96]	; (801fd78 <tos_AnalogueType_Init+0x790>)
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	2196      	movs	r1, #150	; 0x96
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	f7e6 fab8 	bl	8006290 <lv_obj_set_width>
       			   		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 801fd20:	4b15      	ldr	r3, [pc, #84]	; (801fd78 <tos_AnalogueType_Init+0x790>)
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	4a15      	ldr	r2, [pc, #84]	; (801fd7c <tos_AnalogueType_Init+0x794>)
 801fd26:	2100      	movs	r1, #0
 801fd28:	4618      	mov	r0, r3
 801fd2a:	f7ff fba1 	bl	801f470 <lv_label_set_style>
       			   		    lv_label_set_text(weekDay,weekDayStr);
 801fd2e:	4b12      	ldr	r3, [pc, #72]	; (801fd78 <tos_AnalogueType_Init+0x790>)
 801fd30:	681a      	ldr	r2, [r3, #0]
 801fd32:	4b13      	ldr	r3, [pc, #76]	; (801fd80 <tos_AnalogueType_Init+0x798>)
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	4619      	mov	r1, r3
 801fd38:	4610      	mov	r0, r2
 801fd3a:	f7f9 fd1d 	bl	8019778 <lv_label_set_text>
       			   		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 801fd3e:	4b0e      	ldr	r3, [pc, #56]	; (801fd78 <tos_AnalogueType_Init+0x790>)
 801fd40:	6818      	ldr	r0, [r3, #0]
 801fd42:	f06f 0309 	mvn.w	r3, #9
 801fd46:	9300      	str	r3, [sp, #0]
 801fd48:	2300      	movs	r3, #0
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	2100      	movs	r1, #0
 801fd4e:	f7e6 fac9 	bl	80062e4 <lv_obj_align>
}
 801fd52:	bf00      	nop
 801fd54:	3708      	adds	r7, #8
 801fd56:	46bd      	mov	sp, r7
 801fd58:	bd80      	pop	{r7, pc}
 801fd5a:	bf00      	nop
 801fd5c:	20006e0c 	.word	0x20006e0c
 801fd60:	200059fc 	.word	0x200059fc
 801fd64:	200073b4 	.word	0x200073b4
 801fd68:	20006e18 	.word	0x20006e18
 801fd6c:	20006eda 	.word	0x20006eda
 801fd70:	08029d74 	.word	0x08029d74
 801fd74:	20006e74 	.word	0x20006e74
 801fd78:	20006e04 	.word	0x20006e04
 801fd7c:	20005a38 	.word	0x20005a38
 801fd80:	20006e68 	.word	0x20006e68

0801fd84 <tos_DigitalType_Init>:
void dType1_Clock_Init(bool theme);
void dType2_Clock_Init(bool theme);

/*
*/
void tos_DigitalType_Init(uint8_t clockType,bool theme) {
 801fd84:	b580      	push	{r7, lr}
 801fd86:	b084      	sub	sp, #16
 801fd88:	af02      	add	r7, sp, #8
 801fd8a:	4603      	mov	r3, r0
 801fd8c:	460a      	mov	r2, r1
 801fd8e:	71fb      	strb	r3, [r7, #7]
 801fd90:	4613      	mov	r3, r2
 801fd92:	71bb      	strb	r3, [r7, #6]
	switch(clockType){
 801fd94:	79fb      	ldrb	r3, [r7, #7]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d002      	beq.n	801fda0 <tos_DigitalType_Init+0x1c>
 801fd9a:	2b01      	cmp	r3, #1
 801fd9c:	d005      	beq.n	801fdaa <tos_DigitalType_Init+0x26>
 801fd9e:	e009      	b.n	801fdb4 <tos_DigitalType_Init+0x30>
	case 0: dType1_Clock_Init(theme); break;
 801fda0:	79bb      	ldrb	r3, [r7, #6]
 801fda2:	4618      	mov	r0, r3
 801fda4:	f000 f886 	bl	801feb4 <dType1_Clock_Init>
 801fda8:	e004      	b.n	801fdb4 <tos_DigitalType_Init+0x30>
	case 1: dType2_Clock_Init(theme); break;
 801fdaa:	79bb      	ldrb	r3, [r7, #6]
 801fdac:	4618      	mov	r0, r3
 801fdae:	f000 fbb1 	bl	8020514 <dType2_Clock_Init>
 801fdb2:	bf00      	nop
	}
	//Battery
	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 801fdb4:	f7ff fb51 	bl	801f45a <lv_scr_act>
 801fdb8:	4603      	mov	r3, r0
 801fdba:	2100      	movs	r1, #0
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	f7f9 fba9 	bl	8019514 <lv_label_create>
 801fdc2:	4602      	mov	r2, r0
 801fdc4:	4b33      	ldr	r3, [pc, #204]	; (801fe94 <tos_DigitalType_Init+0x110>)
 801fdc6:	601a      	str	r2, [r3, #0]
	lv_style_copy(&battery_style, &lv_style_plain);
 801fdc8:	4933      	ldr	r1, [pc, #204]	; (801fe98 <tos_DigitalType_Init+0x114>)
 801fdca:	4834      	ldr	r0, [pc, #208]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fdcc:	f7e8 fcce 	bl	800876c <lv_style_copy>
	battery_style.text.color = LV_COLOR_GREEN;
 801fdd0:	4a32      	ldr	r2, [pc, #200]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fdd2:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fdd6:	2104      	movs	r1, #4
 801fdd8:	f361 0302 	bfi	r3, r1, #0, #3
 801fddc:	f882 3020 	strb.w	r3, [r2, #32]
 801fde0:	4a2e      	ldr	r2, [pc, #184]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fde2:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fde6:	f36f 03c7 	bfc	r3, #3, #5
 801fdea:	f882 3020 	strb.w	r3, [r2, #32]
 801fdee:	4a2b      	ldr	r2, [pc, #172]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fdf0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fdf4:	f36f 0304 	bfc	r3, #0, #5
 801fdf8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801fdfc:	4a27      	ldr	r2, [pc, #156]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fdfe:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fe02:	f36f 1347 	bfc	r3, #5, #3
 801fe06:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 801fe0a:	4b22      	ldr	r3, [pc, #136]	; (801fe94 <tos_DigitalType_Init+0x110>)
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	4a23      	ldr	r2, [pc, #140]	; (801fe9c <tos_DigitalType_Init+0x118>)
 801fe10:	2100      	movs	r1, #0
 801fe12:	4618      	mov	r0, r3
 801fe14:	f7ff fb2c 	bl	801f470 <lv_label_set_style>
	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 801fe18:	4b1e      	ldr	r3, [pc, #120]	; (801fe94 <tos_DigitalType_Init+0x110>)
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	4920      	ldr	r1, [pc, #128]	; (801fea0 <tos_DigitalType_Init+0x11c>)
 801fe1e:	4618      	mov	r0, r3
 801fe20:	f7f9 fcaa 	bl	8019778 <lv_label_set_text>
	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 801fe24:	4b1b      	ldr	r3, [pc, #108]	; (801fe94 <tos_DigitalType_Init+0x110>)
 801fe26:	6818      	ldr	r0, [r3, #0]
 801fe28:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe2c:	9300      	str	r3, [sp, #0]
 801fe2e:	2364      	movs	r3, #100	; 0x64
 801fe30:	2200      	movs	r2, #0
 801fe32:	2100      	movs	r1, #0
 801fe34:	f7e6 fa56 	bl	80062e4 <lv_obj_align>

	//Bluetooth
	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 801fe38:	f7ff fb0f 	bl	801f45a <lv_scr_act>
 801fe3c:	4603      	mov	r3, r0
 801fe3e:	2100      	movs	r1, #0
 801fe40:	4618      	mov	r0, r3
 801fe42:	f7f9 fb67 	bl	8019514 <lv_label_create>
 801fe46:	4602      	mov	r2, r0
 801fe48:	4b16      	ldr	r3, [pc, #88]	; (801fea4 <tos_DigitalType_Init+0x120>)
 801fe4a:	601a      	str	r2, [r3, #0]
    lv_style_copy(&bluetooth_style, &lv_style_plain);
 801fe4c:	4912      	ldr	r1, [pc, #72]	; (801fe98 <tos_DigitalType_Init+0x114>)
 801fe4e:	4816      	ldr	r0, [pc, #88]	; (801fea8 <tos_DigitalType_Init+0x124>)
 801fe50:	f7e8 fc8c 	bl	800876c <lv_style_copy>
	bluetooth_style.text.color = LV_COLOR_WHITE;
 801fe54:	4a14      	ldr	r2, [pc, #80]	; (801fea8 <tos_DigitalType_Init+0x124>)
 801fe56:	4b15      	ldr	r3, [pc, #84]	; (801feac <tos_DigitalType_Init+0x128>)
 801fe58:	881b      	ldrh	r3, [r3, #0]
 801fe5a:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 801fe5c:	4b11      	ldr	r3, [pc, #68]	; (801fea4 <tos_DigitalType_Init+0x120>)
 801fe5e:	681b      	ldr	r3, [r3, #0]
 801fe60:	4a11      	ldr	r2, [pc, #68]	; (801fea8 <tos_DigitalType_Init+0x124>)
 801fe62:	2100      	movs	r1, #0
 801fe64:	4618      	mov	r0, r3
 801fe66:	f7ff fb03 	bl	801f470 <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 801fe6a:	4b0e      	ldr	r3, [pc, #56]	; (801fea4 <tos_DigitalType_Init+0x120>)
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	4910      	ldr	r1, [pc, #64]	; (801feb0 <tos_DigitalType_Init+0x12c>)
 801fe70:	4618      	mov	r0, r3
 801fe72:	f7f9 fc81 	bl	8019778 <lv_label_set_text>
	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 801fe76:	4b0b      	ldr	r3, [pc, #44]	; (801fea4 <tos_DigitalType_Init+0x120>)
 801fe78:	6818      	ldr	r0, [r3, #0]
 801fe7a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe7e:	9300      	str	r3, [sp, #0]
 801fe80:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe84:	2200      	movs	r2, #0
 801fe86:	2100      	movs	r1, #0
 801fe88:	f7e6 fa2c 	bl	80062e4 <lv_obj_align>
}
 801fe8c:	bf00      	nop
 801fe8e:	3708      	adds	r7, #8
 801fe90:	46bd      	mov	sp, r7
 801fe92:	bd80      	pop	{r7, pc}
 801fe94:	20006ed4 	.word	0x20006ed4
 801fe98:	20006c68 	.word	0x20006c68
 801fe9c:	20006e8c 	.word	0x20006e8c
 801fea0:	08029d54 	.word	0x08029d54
 801fea4:	20006e70 	.word	0x20006e70
 801fea8:	20006e24 	.word	0x20006e24
 801feac:	08029d50 	.word	0x08029d50
 801feb0:	08029d58 	.word	0x08029d58

0801feb4 <dType1_Clock_Init>:



/*Analogue and digital Type*/
void dType1_Clock_Init(bool theme) {
 801feb4:	b580      	push	{r7, lr}
 801feb6:	b084      	sub	sp, #16
 801feb8:	af02      	add	r7, sp, #8
 801feba:	4603      	mov	r3, r0
 801febc:	71fb      	strb	r3, [r7, #7]

	  //Digital Clock
	static lv_style_t dClock_style,dDate_style;
		lv_style_copy(&dClock_style, &lv_style_plain);
 801febe:	49bd      	ldr	r1, [pc, #756]	; (80201b4 <dType1_Clock_Init+0x300>)
 801fec0:	48bd      	ldr	r0, [pc, #756]	; (80201b8 <dType1_Clock_Init+0x304>)
 801fec2:	f7e8 fc53 	bl	800876c <lv_style_copy>
	    dClock_style.text.font =&lv_font_roboto_22;
 801fec6:	4bbc      	ldr	r3, [pc, #752]	; (80201b8 <dType1_Clock_Init+0x304>)
 801fec8:	4abc      	ldr	r2, [pc, #752]	; (80201bc <dType1_Clock_Init+0x308>)
 801feca:	625a      	str	r2, [r3, #36]	; 0x24
	    lv_style_copy(&dDate_style, &lv_style_plain);
 801fecc:	49b9      	ldr	r1, [pc, #740]	; (80201b4 <dType1_Clock_Init+0x300>)
 801fece:	48bc      	ldr	r0, [pc, #752]	; (80201c0 <dType1_Clock_Init+0x30c>)
 801fed0:	f7e8 fc4c 	bl	800876c <lv_style_copy>
	    dDate_style.text.font =&lv_font_roboto_16;
 801fed4:	4bba      	ldr	r3, [pc, #744]	; (80201c0 <dType1_Clock_Init+0x30c>)
 801fed6:	4abb      	ldr	r2, [pc, #748]	; (80201c4 <dType1_Clock_Init+0x310>)
 801fed8:	625a      	str	r2, [r3, #36]	; 0x24
	    if(theme){
 801feda:	79fb      	ldrb	r3, [r7, #7]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d007      	beq.n	801fef0 <dType1_Clock_Init+0x3c>
	    	dClock_style.text.color = LV_COLOR_WHITE;
 801fee0:	4ab5      	ldr	r2, [pc, #724]	; (80201b8 <dType1_Clock_Init+0x304>)
 801fee2:	4bb9      	ldr	r3, [pc, #740]	; (80201c8 <dType1_Clock_Init+0x314>)
 801fee4:	881b      	ldrh	r3, [r3, #0]
 801fee6:	8413      	strh	r3, [r2, #32]
	    	dDate_style.text.color = LV_COLOR_WHITE;
 801fee8:	4ab5      	ldr	r2, [pc, #724]	; (80201c0 <dType1_Clock_Init+0x30c>)
 801feea:	4bb7      	ldr	r3, [pc, #732]	; (80201c8 <dType1_Clock_Init+0x314>)
 801feec:	881b      	ldrh	r3, [r3, #0]
 801feee:	8413      	strh	r3, [r2, #32]
	    }

	    digitalClock = lv_label_create(lv_scr_act(), NULL);
 801fef0:	f7ff fab3 	bl	801f45a <lv_scr_act>
 801fef4:	4603      	mov	r3, r0
 801fef6:	2100      	movs	r1, #0
 801fef8:	4618      	mov	r0, r3
 801fefa:	f7f9 fb0b 	bl	8019514 <lv_label_create>
 801fefe:	4602      	mov	r2, r0
 801ff00:	4bb2      	ldr	r3, [pc, #712]	; (80201cc <dType1_Clock_Init+0x318>)
 801ff02:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalClock, 150);
 801ff04:	4bb1      	ldr	r3, [pc, #708]	; (80201cc <dType1_Clock_Init+0x318>)
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	2196      	movs	r1, #150	; 0x96
 801ff0a:	4618      	mov	r0, r3
 801ff0c:	f7e6 f9c0 	bl	8006290 <lv_obj_set_width>
	    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 801ff10:	4bae      	ldr	r3, [pc, #696]	; (80201cc <dType1_Clock_Init+0x318>)
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	4aa8      	ldr	r2, [pc, #672]	; (80201b8 <dType1_Clock_Init+0x304>)
 801ff16:	2100      	movs	r1, #0
 801ff18:	4618      	mov	r0, r3
 801ff1a:	f7ff faa9 	bl	801f470 <lv_label_set_style>
	    snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 801ff1e:	4bac      	ldr	r3, [pc, #688]	; (80201d0 <dType1_Clock_Init+0x31c>)
 801ff20:	781b      	ldrb	r3, [r3, #0]
 801ff22:	4619      	mov	r1, r3
 801ff24:	4bab      	ldr	r3, [pc, #684]	; (80201d4 <dType1_Clock_Init+0x320>)
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	461a      	mov	r2, r3
 801ff2a:	4bab      	ldr	r3, [pc, #684]	; (80201d8 <dType1_Clock_Init+0x324>)
 801ff2c:	781b      	ldrb	r3, [r3, #0]
 801ff2e:	9301      	str	r3, [sp, #4]
 801ff30:	9200      	str	r2, [sp, #0]
 801ff32:	460b      	mov	r3, r1
 801ff34:	4aa9      	ldr	r2, [pc, #676]	; (80201dc <dType1_Clock_Init+0x328>)
 801ff36:	2109      	movs	r1, #9
 801ff38:	48a9      	ldr	r0, [pc, #676]	; (80201e0 <dType1_Clock_Init+0x32c>)
 801ff3a:	f007 fe59 	bl	8027bf0 <sniprintf>
	    lv_label_set_text(digitalClock, buffer);
 801ff3e:	4ba3      	ldr	r3, [pc, #652]	; (80201cc <dType1_Clock_Init+0x318>)
 801ff40:	681b      	ldr	r3, [r3, #0]
 801ff42:	49a7      	ldr	r1, [pc, #668]	; (80201e0 <dType1_Clock_Init+0x32c>)
 801ff44:	4618      	mov	r0, r3
 801ff46:	f7f9 fc17 	bl	8019778 <lv_label_set_text>
	    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 801ff4a:	4ba0      	ldr	r3, [pc, #640]	; (80201cc <dType1_Clock_Init+0x318>)
 801ff4c:	6818      	ldr	r0, [r3, #0]
 801ff4e:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 801ff52:	9300      	str	r3, [sp, #0]
 801ff54:	2300      	movs	r3, #0
 801ff56:	2200      	movs	r2, #0
 801ff58:	2100      	movs	r1, #0
 801ff5a:	f7e6 f9c3 	bl	80062e4 <lv_obj_align>

	    //Digital Date
	    digitalDate = lv_label_create(lv_scr_act(), NULL);
 801ff5e:	f7ff fa7c 	bl	801f45a <lv_scr_act>
 801ff62:	4603      	mov	r3, r0
 801ff64:	2100      	movs	r1, #0
 801ff66:	4618      	mov	r0, r3
 801ff68:	f7f9 fad4 	bl	8019514 <lv_label_create>
 801ff6c:	4602      	mov	r2, r0
 801ff6e:	4b9d      	ldr	r3, [pc, #628]	; (80201e4 <dType1_Clock_Init+0x330>)
 801ff70:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalDate, 150);
 801ff72:	4b9c      	ldr	r3, [pc, #624]	; (80201e4 <dType1_Clock_Init+0x330>)
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	2196      	movs	r1, #150	; 0x96
 801ff78:	4618      	mov	r0, r3
 801ff7a:	f7e6 f989 	bl	8006290 <lv_obj_set_width>
	    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 801ff7e:	4b99      	ldr	r3, [pc, #612]	; (80201e4 <dType1_Clock_Init+0x330>)
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	4a8f      	ldr	r2, [pc, #572]	; (80201c0 <dType1_Clock_Init+0x30c>)
 801ff84:	2100      	movs	r1, #0
 801ff86:	4618      	mov	r0, r3
 801ff88:	f7ff fa72 	bl	801f470 <lv_label_set_style>
    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 801ff8c:	4b96      	ldr	r3, [pc, #600]	; (80201e8 <dType1_Clock_Init+0x334>)
 801ff8e:	781b      	ldrb	r3, [r3, #0]
 801ff90:	4619      	mov	r1, r3
 801ff92:	4b96      	ldr	r3, [pc, #600]	; (80201ec <dType1_Clock_Init+0x338>)
 801ff94:	781b      	ldrb	r3, [r3, #0]
 801ff96:	461a      	mov	r2, r3
 801ff98:	4b95      	ldr	r3, [pc, #596]	; (80201f0 <dType1_Clock_Init+0x33c>)
 801ff9a:	881b      	ldrh	r3, [r3, #0]
 801ff9c:	9301      	str	r3, [sp, #4]
 801ff9e:	9200      	str	r2, [sp, #0]
 801ffa0:	460b      	mov	r3, r1
 801ffa2:	4a94      	ldr	r2, [pc, #592]	; (80201f4 <dType1_Clock_Init+0x340>)
 801ffa4:	2110      	movs	r1, #16
 801ffa6:	488e      	ldr	r0, [pc, #568]	; (80201e0 <dType1_Clock_Init+0x32c>)
 801ffa8:	f007 fe22 	bl	8027bf0 <sniprintf>
		lv_label_set_text(digitalDate, buffer);
 801ffac:	4b8d      	ldr	r3, [pc, #564]	; (80201e4 <dType1_Clock_Init+0x330>)
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	498b      	ldr	r1, [pc, #556]	; (80201e0 <dType1_Clock_Init+0x32c>)
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	f7f9 fbe0 	bl	8019778 <lv_label_set_text>
	    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 801ffb8:	4b8a      	ldr	r3, [pc, #552]	; (80201e4 <dType1_Clock_Init+0x330>)
 801ffba:	6818      	ldr	r0, [r3, #0]
 801ffbc:	f06f 0336 	mvn.w	r3, #54	; 0x36
 801ffc0:	9300      	str	r3, [sp, #0]
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	2100      	movs	r1, #0
 801ffc8:	f7e6 f98c 	bl	80062e4 <lv_obj_align>

	    //Week Day
	    weekDay = lv_label_create(lv_scr_act(), NULL);
 801ffcc:	f7ff fa45 	bl	801f45a <lv_scr_act>
 801ffd0:	4603      	mov	r3, r0
 801ffd2:	2100      	movs	r1, #0
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	f7f9 fa9d 	bl	8019514 <lv_label_create>
 801ffda:	4602      	mov	r2, r0
 801ffdc:	4b86      	ldr	r3, [pc, #536]	; (80201f8 <dType1_Clock_Init+0x344>)
 801ffde:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(weekDay, 150);
 801ffe0:	4b85      	ldr	r3, [pc, #532]	; (80201f8 <dType1_Clock_Init+0x344>)
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	2196      	movs	r1, #150	; 0x96
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7e6 f952 	bl	8006290 <lv_obj_set_width>
	    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &dClock_style);
 801ffec:	4b82      	ldr	r3, [pc, #520]	; (80201f8 <dType1_Clock_Init+0x344>)
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	4a71      	ldr	r2, [pc, #452]	; (80201b8 <dType1_Clock_Init+0x304>)
 801fff2:	2100      	movs	r1, #0
 801fff4:	4618      	mov	r0, r3
 801fff6:	f7ff fa3b 	bl	801f470 <lv_label_set_style>
	    lv_label_set_text(weekDay,weekDayStr);
 801fffa:	4b7f      	ldr	r3, [pc, #508]	; (80201f8 <dType1_Clock_Init+0x344>)
 801fffc:	681a      	ldr	r2, [r3, #0]
 801fffe:	4b7f      	ldr	r3, [pc, #508]	; (80201fc <dType1_Clock_Init+0x348>)
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	4619      	mov	r1, r3
 8020004:	4610      	mov	r0, r2
 8020006:	f7f9 fbb7 	bl	8019778 <lv_label_set_text>
	    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 802000a:	4b7b      	ldr	r3, [pc, #492]	; (80201f8 <dType1_Clock_Init+0x344>)
 802000c:	6818      	ldr	r0, [r3, #0]
 802000e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020012:	9300      	str	r3, [sp, #0]
 8020014:	2300      	movs	r3, #0
 8020016:	2200      	movs	r2, #0
 8020018:	2100      	movs	r1, #0
 802001a:	f7e6 f963 	bl	80062e4 <lv_obj_align>

	  //Analog
	  //Hours
	    static lv_style_t hours_Style;
	  lv_style_copy(&hours_Style, &lv_style_plain);
 802001e:	4965      	ldr	r1, [pc, #404]	; (80201b4 <dType1_Clock_Init+0x300>)
 8020020:	4877      	ldr	r0, [pc, #476]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020022:	f7e8 fba3 	bl	800876c <lv_style_copy>
	  hours_Style.line.color = LV_COLOR_RED;
 8020026:	4a76      	ldr	r2, [pc, #472]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020028:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802002c:	f36f 0302 	bfc	r3, #0, #3
 8020030:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020034:	4a72      	ldr	r2, [pc, #456]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020036:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802003a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 802003e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020042:	4a6f      	ldr	r2, [pc, #444]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020044:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020048:	f36f 0304 	bfc	r3, #0, #5
 802004c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8020050:	4a6b      	ldr	r2, [pc, #428]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020052:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020056:	f36f 1347 	bfc	r3, #5, #3
 802005a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  hours_Style.line.width = 6;
 802005e:	4b68      	ldr	r3, [pc, #416]	; (8020200 <dType1_Clock_Init+0x34c>)
 8020060:	2206      	movs	r2, #6
 8020062:	86da      	strh	r2, [r3, #54]	; 0x36

	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 8020064:	f7ff f9f9 	bl	801f45a <lv_scr_act>
 8020068:	4603      	mov	r3, r0
 802006a:	2100      	movs	r1, #0
 802006c:	4618      	mov	r0, r3
 802006e:	f7f4 fc4f 	bl	8014910 <lv_arc_create>
 8020072:	4602      	mov	r2, r0
 8020074:	4b63      	ldr	r3, [pc, #396]	; (8020204 <dType1_Clock_Init+0x350>)
 8020076:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(hoursArc, 215, 215);
 8020078:	4b62      	ldr	r3, [pc, #392]	; (8020204 <dType1_Clock_Init+0x350>)
 802007a:	681b      	ldr	r3, [r3, #0]
 802007c:	22d7      	movs	r2, #215	; 0xd7
 802007e:	21d7      	movs	r1, #215	; 0xd7
 8020080:	4618      	mov	r0, r3
 8020082:	f7e6 f88c 	bl	800619e <lv_obj_set_size>
	  lv_arc_set_angles(hoursArc, 180, 180);
 8020086:	4b5f      	ldr	r3, [pc, #380]	; (8020204 <dType1_Clock_Init+0x350>)
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	22b4      	movs	r2, #180	; 0xb4
 802008c:	21b4      	movs	r1, #180	; 0xb4
 802008e:	4618      	mov	r0, r3
 8020090:	f7f4 fcba 	bl	8014a08 <lv_arc_set_angles>
	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 8020094:	4b5b      	ldr	r3, [pc, #364]	; (8020204 <dType1_Clock_Init+0x350>)
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	4a59      	ldr	r2, [pc, #356]	; (8020200 <dType1_Clock_Init+0x34c>)
 802009a:	2100      	movs	r1, #0
 802009c:	4618      	mov	r0, r3
 802009e:	f7f4 fcdc 	bl	8014a5a <lv_arc_set_style>
	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 80200a2:	4b58      	ldr	r3, [pc, #352]	; (8020204 <dType1_Clock_Init+0x350>)
 80200a4:	6818      	ldr	r0, [r3, #0]
 80200a6:	2300      	movs	r3, #0
 80200a8:	9300      	str	r3, [sp, #0]
 80200aa:	2300      	movs	r3, #0
 80200ac:	2200      	movs	r2, #0
 80200ae:	2100      	movs	r1, #0
 80200b0:	f7e6 f918 	bl	80062e4 <lv_obj_align>

	  //Minutes
	  static lv_style_t minutes_Style;
	  lv_style_copy(&minutes_Style, &lv_style_plain);
 80200b4:	493f      	ldr	r1, [pc, #252]	; (80201b4 <dType1_Clock_Init+0x300>)
 80200b6:	4854      	ldr	r0, [pc, #336]	; (8020208 <dType1_Clock_Init+0x354>)
 80200b8:	f7e8 fb58 	bl	800876c <lv_style_copy>
	  minutes_Style.line.color = LV_COLOR_BLUE;
 80200bc:	4a52      	ldr	r2, [pc, #328]	; (8020208 <dType1_Clock_Init+0x354>)
 80200be:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80200c2:	f36f 0302 	bfc	r3, #0, #3
 80200c6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80200ca:	4a4f      	ldr	r2, [pc, #316]	; (8020208 <dType1_Clock_Init+0x354>)
 80200cc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80200d0:	f36f 03c7 	bfc	r3, #3, #5
 80200d4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80200d8:	4a4b      	ldr	r2, [pc, #300]	; (8020208 <dType1_Clock_Init+0x354>)
 80200da:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80200de:	f043 031f 	orr.w	r3, r3, #31
 80200e2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80200e6:	4a48      	ldr	r2, [pc, #288]	; (8020208 <dType1_Clock_Init+0x354>)
 80200e8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80200ec:	f36f 1347 	bfc	r3, #5, #3
 80200f0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  minutes_Style.line.width = 5;
 80200f4:	4b44      	ldr	r3, [pc, #272]	; (8020208 <dType1_Clock_Init+0x354>)
 80200f6:	2205      	movs	r2, #5
 80200f8:	86da      	strh	r2, [r3, #54]	; 0x36

	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 80200fa:	f7ff f9ae 	bl	801f45a <lv_scr_act>
 80200fe:	4603      	mov	r3, r0
 8020100:	2100      	movs	r1, #0
 8020102:	4618      	mov	r0, r3
 8020104:	f7f4 fc04 	bl	8014910 <lv_arc_create>
 8020108:	4602      	mov	r2, r0
 802010a:	4b40      	ldr	r3, [pc, #256]	; (802020c <dType1_Clock_Init+0x358>)
 802010c:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(minutesArc, 230, 230);
 802010e:	4b3f      	ldr	r3, [pc, #252]	; (802020c <dType1_Clock_Init+0x358>)
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	22e6      	movs	r2, #230	; 0xe6
 8020114:	21e6      	movs	r1, #230	; 0xe6
 8020116:	4618      	mov	r0, r3
 8020118:	f7e6 f841 	bl	800619e <lv_obj_set_size>
	  lv_arc_set_angles(minutesArc, 180, 180);
 802011c:	4b3b      	ldr	r3, [pc, #236]	; (802020c <dType1_Clock_Init+0x358>)
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	22b4      	movs	r2, #180	; 0xb4
 8020122:	21b4      	movs	r1, #180	; 0xb4
 8020124:	4618      	mov	r0, r3
 8020126:	f7f4 fc6f 	bl	8014a08 <lv_arc_set_angles>
	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 802012a:	4b38      	ldr	r3, [pc, #224]	; (802020c <dType1_Clock_Init+0x358>)
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	4a36      	ldr	r2, [pc, #216]	; (8020208 <dType1_Clock_Init+0x354>)
 8020130:	2100      	movs	r1, #0
 8020132:	4618      	mov	r0, r3
 8020134:	f7f4 fc91 	bl	8014a5a <lv_arc_set_style>
	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8020138:	4b34      	ldr	r3, [pc, #208]	; (802020c <dType1_Clock_Init+0x358>)
 802013a:	6818      	ldr	r0, [r3, #0]
 802013c:	2300      	movs	r3, #0
 802013e:	9300      	str	r3, [sp, #0]
 8020140:	2300      	movs	r3, #0
 8020142:	2200      	movs	r2, #0
 8020144:	2100      	movs	r1, #0
 8020146:	f7e6 f8cd 	bl	80062e4 <lv_obj_align>

	  //Steps
	  static  lv_style_t steps_Style,description_Style;
	 		  lv_style_copy(&steps_Style, &lv_style_plain);
 802014a:	491a      	ldr	r1, [pc, #104]	; (80201b4 <dType1_Clock_Init+0x300>)
 802014c:	4830      	ldr	r0, [pc, #192]	; (8020210 <dType1_Clock_Init+0x35c>)
 802014e:	f7e8 fb0d 	bl	800876c <lv_style_copy>
	 		  steps_Style.line.color = LV_COLOR_GREEN;
 8020152:	4a2f      	ldr	r2, [pc, #188]	; (8020210 <dType1_Clock_Init+0x35c>)
 8020154:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020158:	2104      	movs	r1, #4
 802015a:	f361 0302 	bfi	r3, r1, #0, #3
 802015e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020162:	4a2b      	ldr	r2, [pc, #172]	; (8020210 <dType1_Clock_Init+0x35c>)
 8020164:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020168:	f36f 03c7 	bfc	r3, #3, #5
 802016c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020170:	4a27      	ldr	r2, [pc, #156]	; (8020210 <dType1_Clock_Init+0x35c>)
 8020172:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020176:	f36f 0304 	bfc	r3, #0, #5
 802017a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 802017e:	4a24      	ldr	r2, [pc, #144]	; (8020210 <dType1_Clock_Init+0x35c>)
 8020180:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020184:	f36f 1347 	bfc	r3, #5, #3
 8020188:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  steps_Style.line.width = 5;
 802018c:	4b20      	ldr	r3, [pc, #128]	; (8020210 <dType1_Clock_Init+0x35c>)
 802018e:	2205      	movs	r2, #5
 8020190:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  steps_Style.text.color = LV_COLOR_GREEN;
 8020192:	4a1f      	ldr	r2, [pc, #124]	; (8020210 <dType1_Clock_Init+0x35c>)
 8020194:	f892 3020 	ldrb.w	r3, [r2, #32]
 8020198:	2104      	movs	r1, #4
 802019a:	f361 0302 	bfi	r3, r1, #0, #3
 802019e:	f882 3020 	strb.w	r3, [r2, #32]
 80201a2:	4a1b      	ldr	r2, [pc, #108]	; (8020210 <dType1_Clock_Init+0x35c>)
 80201a4:	f892 3020 	ldrb.w	r3, [r2, #32]
 80201a8:	f36f 03c7 	bfc	r3, #3, #5
 80201ac:	f882 3020 	strb.w	r3, [r2, #32]
 80201b0:	e030      	b.n	8020214 <dType1_Clock_Init+0x360>
 80201b2:	bf00      	nop
 80201b4:	20006c68 	.word	0x20006c68
 80201b8:	20005c18 	.word	0x20005c18
 80201bc:	200017c0 	.word	0x200017c0
 80201c0:	20005c54 	.word	0x20005c54
 80201c4:	20000bec 	.word	0x20000bec
 80201c8:	08029d50 	.word	0x08029d50
 80201cc:	20006e14 	.word	0x20006e14
 80201d0:	20006ee9 	.word	0x20006ee9
 80201d4:	20006ee8 	.word	0x20006ee8
 80201d8:	20006ed8 	.word	0x20006ed8
 80201dc:	08029d94 	.word	0x08029d94
 80201e0:	20006e74 	.word	0x20006e74
 80201e4:	20006e0c 	.word	0x20006e0c
 80201e8:	200073b4 	.word	0x200073b4
 80201ec:	20006e18 	.word	0x20006e18
 80201f0:	20006eda 	.word	0x20006eda
 80201f4:	08029d74 	.word	0x08029d74
 80201f8:	20006e04 	.word	0x20006e04
 80201fc:	20006e68 	.word	0x20006e68
 8020200:	20005c90 	.word	0x20005c90
 8020204:	20006e20 	.word	0x20006e20
 8020208:	20005ccc 	.word	0x20005ccc
 802020c:	20006e60 	.word	0x20006e60
 8020210:	20005d08 	.word	0x20005d08
 8020214:	4aab      	ldr	r2, [pc, #684]	; (80204c4 <dType1_Clock_Init+0x610>)
 8020216:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802021a:	f36f 0304 	bfc	r3, #0, #5
 802021e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8020222:	4aa8      	ldr	r2, [pc, #672]	; (80204c4 <dType1_Clock_Init+0x610>)
 8020224:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020228:	f36f 1347 	bfc	r3, #5, #3
 802022c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  steps_Style.text.font = &lv_font_roboto_22;
 8020230:	4ba4      	ldr	r3, [pc, #656]	; (80204c4 <dType1_Clock_Init+0x610>)
 8020232:	4aa5      	ldr	r2, [pc, #660]	; (80204c8 <dType1_Clock_Init+0x614>)
 8020234:	625a      	str	r2, [r3, #36]	; 0x24

	 		  lv_style_copy(&description_Style, &lv_style_plain);
 8020236:	49a5      	ldr	r1, [pc, #660]	; (80204cc <dType1_Clock_Init+0x618>)
 8020238:	48a5      	ldr	r0, [pc, #660]	; (80204d0 <dType1_Clock_Init+0x61c>)
 802023a:	f7e8 fa97 	bl	800876c <lv_style_copy>
	 		  description_Style.text.font = &lv_font_unscii_8;
 802023e:	4ba4      	ldr	r3, [pc, #656]	; (80204d0 <dType1_Clock_Init+0x61c>)
 8020240:	4aa4      	ldr	r2, [pc, #656]	; (80204d4 <dType1_Clock_Init+0x620>)
 8020242:	625a      	str	r2, [r3, #36]	; 0x24
	 		  description_Style.text.color = LV_COLOR_GRAY;
 8020244:	4aa2      	ldr	r2, [pc, #648]	; (80204d0 <dType1_Clock_Init+0x61c>)
 8020246:	4ba4      	ldr	r3, [pc, #656]	; (80204d8 <dType1_Clock_Init+0x624>)
 8020248:	881b      	ldrh	r3, [r3, #0]
 802024a:	8413      	strh	r3, [r2, #32]
	 		    if(theme){
 802024c:	79fb      	ldrb	r3, [r7, #7]
 802024e:	2b00      	cmp	r3, #0
 8020250:	d003      	beq.n	802025a <dType1_Clock_Init+0x3a6>
	 		    	description_Style.text.color = LV_COLOR_WHITE;
 8020252:	4a9f      	ldr	r2, [pc, #636]	; (80204d0 <dType1_Clock_Init+0x61c>)
 8020254:	4ba1      	ldr	r3, [pc, #644]	; (80204dc <dType1_Clock_Init+0x628>)
 8020256:	881b      	ldrh	r3, [r3, #0]
 8020258:	8413      	strh	r3, [r2, #32]
	 		    }

	 		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 802025a:	f7ff f8fe 	bl	801f45a <lv_scr_act>
 802025e:	4603      	mov	r3, r0
 8020260:	2100      	movs	r1, #0
 8020262:	4618      	mov	r0, r3
 8020264:	f7f9 f956 	bl	8019514 <lv_label_create>
 8020268:	4602      	mov	r2, r0
 802026a:	4b9d      	ldr	r3, [pc, #628]	; (80204e0 <dType1_Clock_Init+0x62c>)
 802026c:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(stepsLbl, 150);
 802026e:	4b9c      	ldr	r3, [pc, #624]	; (80204e0 <dType1_Clock_Init+0x62c>)
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	2196      	movs	r1, #150	; 0x96
 8020274:	4618      	mov	r0, r3
 8020276:	f7e6 f80b 	bl	8006290 <lv_obj_set_width>
	 		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 802027a:	4b99      	ldr	r3, [pc, #612]	; (80204e0 <dType1_Clock_Init+0x62c>)
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	4a91      	ldr	r2, [pc, #580]	; (80204c4 <dType1_Clock_Init+0x610>)
 8020280:	2100      	movs	r1, #0
 8020282:	4618      	mov	r0, r3
 8020284:	f7ff f8f4 	bl	801f470 <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", steps);
 8020288:	4b96      	ldr	r3, [pc, #600]	; (80204e4 <dType1_Clock_Init+0x630>)
 802028a:	881b      	ldrh	r3, [r3, #0]
 802028c:	4a96      	ldr	r2, [pc, #600]	; (80204e8 <dType1_Clock_Init+0x634>)
 802028e:	2108      	movs	r1, #8
 8020290:	4896      	ldr	r0, [pc, #600]	; (80204ec <dType1_Clock_Init+0x638>)
 8020292:	f007 fcad 	bl	8027bf0 <sniprintf>
	 		 lv_label_set_text(stepsLbl, buffer);
 8020296:	4b92      	ldr	r3, [pc, #584]	; (80204e0 <dType1_Clock_Init+0x62c>)
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	4994      	ldr	r1, [pc, #592]	; (80204ec <dType1_Clock_Init+0x638>)
 802029c:	4618      	mov	r0, r3
 802029e:	f7f9 fa6b 	bl	8019778 <lv_label_set_text>
	 		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 80202a2:	4b8f      	ldr	r3, [pc, #572]	; (80204e0 <dType1_Clock_Init+0x62c>)
 80202a4:	6818      	ldr	r0, [r3, #0]
 80202a6:	2328      	movs	r3, #40	; 0x28
 80202a8:	9300      	str	r3, [sp, #0]
 80202aa:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80202ae:	2200      	movs	r2, #0
 80202b0:	2100      	movs	r1, #0
 80202b2:	f7e6 f817 	bl	80062e4 <lv_obj_align>

	 		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 80202b6:	f7ff f8d0 	bl	801f45a <lv_scr_act>
 80202ba:	4603      	mov	r3, r0
 80202bc:	2100      	movs	r1, #0
 80202be:	4618      	mov	r0, r3
 80202c0:	f7f9 f928 	bl	8019514 <lv_label_create>
 80202c4:	4602      	mov	r2, r0
 80202c6:	4b8a      	ldr	r3, [pc, #552]	; (80204f0 <dType1_Clock_Init+0x63c>)
 80202c8:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80202ca:	4b89      	ldr	r3, [pc, #548]	; (80204f0 <dType1_Clock_Init+0x63c>)
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	4a80      	ldr	r2, [pc, #512]	; (80204d0 <dType1_Clock_Init+0x61c>)
 80202d0:	2100      	movs	r1, #0
 80202d2:	4618      	mov	r0, r3
 80202d4:	f7ff f8cc 	bl	801f470 <lv_label_set_style>
	 		 lv_label_set_text(stepsDescLbl, "steps");
 80202d8:	4b85      	ldr	r3, [pc, #532]	; (80204f0 <dType1_Clock_Init+0x63c>)
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	4985      	ldr	r1, [pc, #532]	; (80204f4 <dType1_Clock_Init+0x640>)
 80202de:	4618      	mov	r0, r3
 80202e0:	f7f9 fa4a 	bl	8019778 <lv_label_set_text>
	 		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 80202e4:	4b82      	ldr	r3, [pc, #520]	; (80204f0 <dType1_Clock_Init+0x63c>)
 80202e6:	6818      	ldr	r0, [r3, #0]
 80202e8:	2337      	movs	r3, #55	; 0x37
 80202ea:	9300      	str	r3, [sp, #0]
 80202ec:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80202f0:	2200      	movs	r2, #0
 80202f2:	2100      	movs	r1, #0
 80202f4:	f7e5 fff6 	bl	80062e4 <lv_obj_align>

	 		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80202f8:	f7ff f8af 	bl	801f45a <lv_scr_act>
 80202fc:	4603      	mov	r3, r0
 80202fe:	2100      	movs	r1, #0
 8020300:	4618      	mov	r0, r3
 8020302:	f7f4 fb05 	bl	8014910 <lv_arc_create>
 8020306:	4602      	mov	r2, r0
 8020308:	4b7b      	ldr	r3, [pc, #492]	; (80204f8 <dType1_Clock_Init+0x644>)
 802030a:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(stepsArc, 40, 40);
 802030c:	4b7a      	ldr	r3, [pc, #488]	; (80204f8 <dType1_Clock_Init+0x644>)
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	2228      	movs	r2, #40	; 0x28
 8020312:	2128      	movs	r1, #40	; 0x28
 8020314:	4618      	mov	r0, r3
 8020316:	f7e5 ff42 	bl	800619e <lv_obj_set_size>
	 		  lv_arc_set_angles(stepsArc, 0, 360);
 802031a:	4b77      	ldr	r3, [pc, #476]	; (80204f8 <dType1_Clock_Init+0x644>)
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020322:	2100      	movs	r1, #0
 8020324:	4618      	mov	r0, r3
 8020326:	f7f4 fb6f 	bl	8014a08 <lv_arc_set_angles>
	 		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 802032a:	4b73      	ldr	r3, [pc, #460]	; (80204f8 <dType1_Clock_Init+0x644>)
 802032c:	681b      	ldr	r3, [r3, #0]
 802032e:	4a65      	ldr	r2, [pc, #404]	; (80204c4 <dType1_Clock_Init+0x610>)
 8020330:	2100      	movs	r1, #0
 8020332:	4618      	mov	r0, r3
 8020334:	f7f4 fb91 	bl	8014a5a <lv_arc_set_style>
	 		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 0);
 8020338:	4b6f      	ldr	r3, [pc, #444]	; (80204f8 <dType1_Clock_Init+0x644>)
 802033a:	6818      	ldr	r0, [r3, #0]
 802033c:	2300      	movs	r3, #0
 802033e:	9300      	str	r3, [sp, #0]
 8020340:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8020344:	2200      	movs	r2, #0
 8020346:	2100      	movs	r1, #0
 8020348:	f7e5 ffcc 	bl	80062e4 <lv_obj_align>

	 		  //Kcal
	 		 static lv_style_t kCals_Style;
	 		  lv_style_copy(&kCals_Style, &lv_style_plain);
 802034c:	495f      	ldr	r1, [pc, #380]	; (80204cc <dType1_Clock_Init+0x618>)
 802034e:	486b      	ldr	r0, [pc, #428]	; (80204fc <dType1_Clock_Init+0x648>)
 8020350:	f7e8 fa0c 	bl	800876c <lv_style_copy>
	 		  kCals_Style.line.color = LV_COLOR_RED;
 8020354:	4a69      	ldr	r2, [pc, #420]	; (80204fc <dType1_Clock_Init+0x648>)
 8020356:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802035a:	f36f 0302 	bfc	r3, #0, #3
 802035e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020362:	4a66      	ldr	r2, [pc, #408]	; (80204fc <dType1_Clock_Init+0x648>)
 8020364:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020368:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 802036c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020370:	4a62      	ldr	r2, [pc, #392]	; (80204fc <dType1_Clock_Init+0x648>)
 8020372:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020376:	f36f 0304 	bfc	r3, #0, #5
 802037a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 802037e:	4a5f      	ldr	r2, [pc, #380]	; (80204fc <dType1_Clock_Init+0x648>)
 8020380:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020384:	f36f 1347 	bfc	r3, #5, #3
 8020388:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  kCals_Style.line.width = 5;
 802038c:	4b5b      	ldr	r3, [pc, #364]	; (80204fc <dType1_Clock_Init+0x648>)
 802038e:	2205      	movs	r2, #5
 8020390:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  kCals_Style.text.color = LV_COLOR_RED;
 8020392:	4a5a      	ldr	r2, [pc, #360]	; (80204fc <dType1_Clock_Init+0x648>)
 8020394:	f892 3020 	ldrb.w	r3, [r2, #32]
 8020398:	f36f 0302 	bfc	r3, #0, #3
 802039c:	f882 3020 	strb.w	r3, [r2, #32]
 80203a0:	4a56      	ldr	r2, [pc, #344]	; (80204fc <dType1_Clock_Init+0x648>)
 80203a2:	f892 3020 	ldrb.w	r3, [r2, #32]
 80203a6:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80203aa:	f882 3020 	strb.w	r3, [r2, #32]
 80203ae:	4a53      	ldr	r2, [pc, #332]	; (80204fc <dType1_Clock_Init+0x648>)
 80203b0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80203b4:	f36f 0304 	bfc	r3, #0, #5
 80203b8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80203bc:	4a4f      	ldr	r2, [pc, #316]	; (80204fc <dType1_Clock_Init+0x648>)
 80203be:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80203c2:	f36f 1347 	bfc	r3, #5, #3
 80203c6:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  kCals_Style.text.font = &lv_font_roboto_22;
 80203ca:	4b4c      	ldr	r3, [pc, #304]	; (80204fc <dType1_Clock_Init+0x648>)
 80203cc:	4a3e      	ldr	r2, [pc, #248]	; (80204c8 <dType1_Clock_Init+0x614>)
 80203ce:	625a      	str	r2, [r3, #36]	; 0x24

	 		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 80203d0:	f7ff f843 	bl	801f45a <lv_scr_act>
 80203d4:	4603      	mov	r3, r0
 80203d6:	2100      	movs	r1, #0
 80203d8:	4618      	mov	r0, r3
 80203da:	f7f9 f89b 	bl	8019514 <lv_label_create>
 80203de:	4602      	mov	r2, r0
 80203e0:	4b47      	ldr	r3, [pc, #284]	; (8020500 <dType1_Clock_Init+0x64c>)
 80203e2:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(kCalsLbl, 150);
 80203e4:	4b46      	ldr	r3, [pc, #280]	; (8020500 <dType1_Clock_Init+0x64c>)
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	2196      	movs	r1, #150	; 0x96
 80203ea:	4618      	mov	r0, r3
 80203ec:	f7e5 ff50 	bl	8006290 <lv_obj_set_width>
	 		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80203f0:	4b43      	ldr	r3, [pc, #268]	; (8020500 <dType1_Clock_Init+0x64c>)
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	4a41      	ldr	r2, [pc, #260]	; (80204fc <dType1_Clock_Init+0x648>)
 80203f6:	2100      	movs	r1, #0
 80203f8:	4618      	mov	r0, r3
 80203fa:	f7ff f839 	bl	801f470 <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", kCals);
 80203fe:	4b41      	ldr	r3, [pc, #260]	; (8020504 <dType1_Clock_Init+0x650>)
 8020400:	881b      	ldrh	r3, [r3, #0]
 8020402:	4a39      	ldr	r2, [pc, #228]	; (80204e8 <dType1_Clock_Init+0x634>)
 8020404:	2108      	movs	r1, #8
 8020406:	4839      	ldr	r0, [pc, #228]	; (80204ec <dType1_Clock_Init+0x638>)
 8020408:	f007 fbf2 	bl	8027bf0 <sniprintf>
	 		 lv_label_set_text(kCalsLbl, buffer);
 802040c:	4b3c      	ldr	r3, [pc, #240]	; (8020500 <dType1_Clock_Init+0x64c>)
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	4936      	ldr	r1, [pc, #216]	; (80204ec <dType1_Clock_Init+0x638>)
 8020412:	4618      	mov	r0, r3
 8020414:	f7f9 f9b0 	bl	8019778 <lv_label_set_text>
	 		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8020418:	4b39      	ldr	r3, [pc, #228]	; (8020500 <dType1_Clock_Init+0x64c>)
 802041a:	6818      	ldr	r0, [r3, #0]
 802041c:	2328      	movs	r3, #40	; 0x28
 802041e:	9300      	str	r3, [sp, #0]
 8020420:	233c      	movs	r3, #60	; 0x3c
 8020422:	2200      	movs	r2, #0
 8020424:	2100      	movs	r1, #0
 8020426:	f7e5 ff5d 	bl	80062e4 <lv_obj_align>


	 		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 802042a:	f7ff f816 	bl	801f45a <lv_scr_act>
 802042e:	4603      	mov	r3, r0
 8020430:	2100      	movs	r1, #0
 8020432:	4618      	mov	r0, r3
 8020434:	f7f9 f86e 	bl	8019514 <lv_label_create>
 8020438:	4602      	mov	r2, r0
 802043a:	4b33      	ldr	r3, [pc, #204]	; (8020508 <dType1_Clock_Init+0x654>)
 802043c:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802043e:	4b32      	ldr	r3, [pc, #200]	; (8020508 <dType1_Clock_Init+0x654>)
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	4a23      	ldr	r2, [pc, #140]	; (80204d0 <dType1_Clock_Init+0x61c>)
 8020444:	2100      	movs	r1, #0
 8020446:	4618      	mov	r0, r3
 8020448:	f7ff f812 	bl	801f470 <lv_label_set_style>
	 		 lv_label_set_text(kCalsDescLbl, "kCals");
 802044c:	4b2e      	ldr	r3, [pc, #184]	; (8020508 <dType1_Clock_Init+0x654>)
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	492e      	ldr	r1, [pc, #184]	; (802050c <dType1_Clock_Init+0x658>)
 8020452:	4618      	mov	r0, r3
 8020454:	f7f9 f990 	bl	8019778 <lv_label_set_text>
	 		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8020458:	4b2b      	ldr	r3, [pc, #172]	; (8020508 <dType1_Clock_Init+0x654>)
 802045a:	6818      	ldr	r0, [r3, #0]
 802045c:	2337      	movs	r3, #55	; 0x37
 802045e:	9300      	str	r3, [sp, #0]
 8020460:	233c      	movs	r3, #60	; 0x3c
 8020462:	2200      	movs	r2, #0
 8020464:	2100      	movs	r1, #0
 8020466:	f7e5 ff3d 	bl	80062e4 <lv_obj_align>

	 		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 802046a:	f7fe fff6 	bl	801f45a <lv_scr_act>
 802046e:	4603      	mov	r3, r0
 8020470:	2100      	movs	r1, #0
 8020472:	4618      	mov	r0, r3
 8020474:	f7f4 fa4c 	bl	8014910 <lv_arc_create>
 8020478:	4602      	mov	r2, r0
 802047a:	4b25      	ldr	r3, [pc, #148]	; (8020510 <dType1_Clock_Init+0x65c>)
 802047c:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(kCalsArc, 40, 40);
 802047e:	4b24      	ldr	r3, [pc, #144]	; (8020510 <dType1_Clock_Init+0x65c>)
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	2228      	movs	r2, #40	; 0x28
 8020484:	2128      	movs	r1, #40	; 0x28
 8020486:	4618      	mov	r0, r3
 8020488:	f7e5 fe89 	bl	800619e <lv_obj_set_size>
	 		  lv_arc_set_angles(kCalsArc, 0, 360);
 802048c:	4b20      	ldr	r3, [pc, #128]	; (8020510 <dType1_Clock_Init+0x65c>)
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020494:	2100      	movs	r1, #0
 8020496:	4618      	mov	r0, r3
 8020498:	f7f4 fab6 	bl	8014a08 <lv_arc_set_angles>
	 		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 802049c:	4b1c      	ldr	r3, [pc, #112]	; (8020510 <dType1_Clock_Init+0x65c>)
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	4a16      	ldr	r2, [pc, #88]	; (80204fc <dType1_Clock_Init+0x648>)
 80204a2:	2100      	movs	r1, #0
 80204a4:	4618      	mov	r0, r3
 80204a6:	f7f4 fad8 	bl	8014a5a <lv_arc_set_style>
	 		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 0);
 80204aa:	4b19      	ldr	r3, [pc, #100]	; (8020510 <dType1_Clock_Init+0x65c>)
 80204ac:	6818      	ldr	r0, [r3, #0]
 80204ae:	2300      	movs	r3, #0
 80204b0:	9300      	str	r3, [sp, #0]
 80204b2:	233c      	movs	r3, #60	; 0x3c
 80204b4:	2200      	movs	r2, #0
 80204b6:	2100      	movs	r1, #0
 80204b8:	f7e5 ff14 	bl	80062e4 <lv_obj_align>
}
 80204bc:	bf00      	nop
 80204be:	3708      	adds	r7, #8
 80204c0:	46bd      	mov	sp, r7
 80204c2:	bd80      	pop	{r7, pc}
 80204c4:	20005d08 	.word	0x20005d08
 80204c8:	200017c0 	.word	0x200017c0
 80204cc:	20006c68 	.word	0x20006c68
 80204d0:	20005d44 	.word	0x20005d44
 80204d4:	200026cc 	.word	0x200026cc
 80204d8:	08029d90 	.word	0x08029d90
 80204dc:	08029d50 	.word	0x08029d50
 80204e0:	20006e88 	.word	0x20006e88
 80204e4:	20006e64 	.word	0x20006e64
 80204e8:	08029d5c 	.word	0x08029d5c
 80204ec:	20006e74 	.word	0x20006e74
 80204f0:	20006e1c 	.word	0x20006e1c
 80204f4:	08029d64 	.word	0x08029d64
 80204f8:	20006e6c 	.word	0x20006e6c
 80204fc:	20005d80 	.word	0x20005d80
 8020500:	20006ee4 	.word	0x20006ee4
 8020504:	20006e0a 	.word	0x20006e0a
 8020508:	20006ed0 	.word	0x20006ed0
 802050c:	08029d6c 	.word	0x08029d6c
 8020510:	20006eec 	.word	0x20006eec

08020514 <dType2_Clock_Init>:
/*Only digital Type*/
void dType2_Clock_Init(bool theme) {
 8020514:	b580      	push	{r7, lr}
 8020516:	b084      	sub	sp, #16
 8020518:	af02      	add	r7, sp, #8
 802051a:	4603      	mov	r3, r0
 802051c:	71fb      	strb	r3, [r7, #7]
	//Digital Clock
	static lv_style_t dClock_style,dDate_style,weekD_style;
			lv_style_copy(&dClock_style, &lv_style_plain);
 802051e:	49b4      	ldr	r1, [pc, #720]	; (80207f0 <dType2_Clock_Init+0x2dc>)
 8020520:	48b4      	ldr	r0, [pc, #720]	; (80207f4 <dType2_Clock_Init+0x2e0>)
 8020522:	f7e8 f923 	bl	800876c <lv_style_copy>
		    dClock_style.text.font =&digital_font_for_number_65;
 8020526:	4bb3      	ldr	r3, [pc, #716]	; (80207f4 <dType2_Clock_Init+0x2e0>)
 8020528:	4ab3      	ldr	r2, [pc, #716]	; (80207f8 <dType2_Clock_Init+0x2e4>)
 802052a:	625a      	str	r2, [r3, #36]	; 0x24
		    lv_style_copy(&dDate_style, &lv_style_plain);
 802052c:	49b0      	ldr	r1, [pc, #704]	; (80207f0 <dType2_Clock_Init+0x2dc>)
 802052e:	48b3      	ldr	r0, [pc, #716]	; (80207fc <dType2_Clock_Init+0x2e8>)
 8020530:	f7e8 f91c 	bl	800876c <lv_style_copy>
		    dDate_style.text.font =&digital_font_for_number_30;
 8020534:	4bb1      	ldr	r3, [pc, #708]	; (80207fc <dType2_Clock_Init+0x2e8>)
 8020536:	4ab2      	ldr	r2, [pc, #712]	; (8020800 <dType2_Clock_Init+0x2ec>)
 8020538:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&weekD_style, &lv_style_plain);
 802053a:	49ad      	ldr	r1, [pc, #692]	; (80207f0 <dType2_Clock_Init+0x2dc>)
 802053c:	48b1      	ldr	r0, [pc, #708]	; (8020804 <dType2_Clock_Init+0x2f0>)
 802053e:	f7e8 f915 	bl	800876c <lv_style_copy>
			weekD_style.text.font =&lv_font_roboto_22;
 8020542:	4bb0      	ldr	r3, [pc, #704]	; (8020804 <dType2_Clock_Init+0x2f0>)
 8020544:	4ab0      	ldr	r2, [pc, #704]	; (8020808 <dType2_Clock_Init+0x2f4>)
 8020546:	625a      	str	r2, [r3, #36]	; 0x24
		    if(theme){
 8020548:	79fb      	ldrb	r3, [r7, #7]
 802054a:	2b00      	cmp	r3, #0
 802054c:	d00b      	beq.n	8020566 <dType2_Clock_Init+0x52>
		    	dClock_style.text.color = LV_COLOR_WHITE;
 802054e:	4aa9      	ldr	r2, [pc, #676]	; (80207f4 <dType2_Clock_Init+0x2e0>)
 8020550:	4bae      	ldr	r3, [pc, #696]	; (802080c <dType2_Clock_Init+0x2f8>)
 8020552:	881b      	ldrh	r3, [r3, #0]
 8020554:	8413      	strh	r3, [r2, #32]
		    	dDate_style.text.color = LV_COLOR_WHITE;
 8020556:	4aa9      	ldr	r2, [pc, #676]	; (80207fc <dType2_Clock_Init+0x2e8>)
 8020558:	4bac      	ldr	r3, [pc, #688]	; (802080c <dType2_Clock_Init+0x2f8>)
 802055a:	881b      	ldrh	r3, [r3, #0]
 802055c:	8413      	strh	r3, [r2, #32]
		    	weekD_style.text.color = LV_COLOR_WHITE;
 802055e:	4aa9      	ldr	r2, [pc, #676]	; (8020804 <dType2_Clock_Init+0x2f0>)
 8020560:	4baa      	ldr	r3, [pc, #680]	; (802080c <dType2_Clock_Init+0x2f8>)
 8020562:	881b      	ldrh	r3, [r3, #0]
 8020564:	8413      	strh	r3, [r2, #32]
		    }

		    digitalClock = lv_label_create(lv_scr_act(), NULL);
 8020566:	f7fe ff78 	bl	801f45a <lv_scr_act>
 802056a:	4603      	mov	r3, r0
 802056c:	2100      	movs	r1, #0
 802056e:	4618      	mov	r0, r3
 8020570:	f7f8 ffd0 	bl	8019514 <lv_label_create>
 8020574:	4602      	mov	r2, r0
 8020576:	4ba6      	ldr	r3, [pc, #664]	; (8020810 <dType2_Clock_Init+0x2fc>)
 8020578:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 802057a:	4ba5      	ldr	r3, [pc, #660]	; (8020810 <dType2_Clock_Init+0x2fc>)
 802057c:	681b      	ldr	r3, [r3, #0]
 802057e:	4a9d      	ldr	r2, [pc, #628]	; (80207f4 <dType2_Clock_Init+0x2e0>)
 8020580:	2100      	movs	r1, #0
 8020582:	4618      	mov	r0, r3
 8020584:	f7fe ff74 	bl	801f470 <lv_label_set_style>
		    lv_obj_set_width(digitalClock, 200);
 8020588:	4ba1      	ldr	r3, [pc, #644]	; (8020810 <dType2_Clock_Init+0x2fc>)
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	21c8      	movs	r1, #200	; 0xc8
 802058e:	4618      	mov	r0, r3
 8020590:	f7e5 fe7e 	bl	8006290 <lv_obj_set_width>
		    snprintf(buffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 8020594:	4b9f      	ldr	r3, [pc, #636]	; (8020814 <dType2_Clock_Init+0x300>)
 8020596:	781b      	ldrb	r3, [r3, #0]
 8020598:	4619      	mov	r1, r3
 802059a:	4b9f      	ldr	r3, [pc, #636]	; (8020818 <dType2_Clock_Init+0x304>)
 802059c:	781b      	ldrb	r3, [r3, #0]
 802059e:	461a      	mov	r2, r3
 80205a0:	4b9e      	ldr	r3, [pc, #632]	; (802081c <dType2_Clock_Init+0x308>)
 80205a2:	781b      	ldrb	r3, [r3, #0]
 80205a4:	9301      	str	r3, [sp, #4]
 80205a6:	9200      	str	r2, [sp, #0]
 80205a8:	460b      	mov	r3, r1
 80205aa:	4a9d      	ldr	r2, [pc, #628]	; (8020820 <dType2_Clock_Init+0x30c>)
 80205ac:	2110      	movs	r1, #16
 80205ae:	489d      	ldr	r0, [pc, #628]	; (8020824 <dType2_Clock_Init+0x310>)
 80205b0:	f007 fb1e 	bl	8027bf0 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 80205b4:	4b96      	ldr	r3, [pc, #600]	; (8020810 <dType2_Clock_Init+0x2fc>)
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	499a      	ldr	r1, [pc, #616]	; (8020824 <dType2_Clock_Init+0x310>)
 80205ba:	4618      	mov	r0, r3
 80205bc:	f7f9 f8dc 	bl	8019778 <lv_label_set_text>
		    lv_label_set_align(digitalClock, LV_LABEL_ALIGN_CENTER);
 80205c0:	4b93      	ldr	r3, [pc, #588]	; (8020810 <dType2_Clock_Init+0x2fc>)
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	2101      	movs	r1, #1
 80205c6:	4618      	mov	r0, r3
 80205c8:	f7f9 f9ce 	bl	8019968 <lv_label_set_align>
		    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 80205cc:	4b90      	ldr	r3, [pc, #576]	; (8020810 <dType2_Clock_Init+0x2fc>)
 80205ce:	6818      	ldr	r0, [r3, #0]
 80205d0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80205d4:	9300      	str	r3, [sp, #0]
 80205d6:	2300      	movs	r3, #0
 80205d8:	2200      	movs	r2, #0
 80205da:	2100      	movs	r1, #0
 80205dc:	f7e5 fe82 	bl	80062e4 <lv_obj_align>

		    //Digital Date
		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 80205e0:	f7fe ff3b 	bl	801f45a <lv_scr_act>
 80205e4:	4603      	mov	r3, r0
 80205e6:	2100      	movs	r1, #0
 80205e8:	4618      	mov	r0, r3
 80205ea:	f7f8 ff93 	bl	8019514 <lv_label_create>
 80205ee:	4602      	mov	r2, r0
 80205f0:	4b8d      	ldr	r3, [pc, #564]	; (8020828 <dType2_Clock_Init+0x314>)
 80205f2:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 80205f4:	4b8c      	ldr	r3, [pc, #560]	; (8020828 <dType2_Clock_Init+0x314>)
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	4a80      	ldr	r2, [pc, #512]	; (80207fc <dType2_Clock_Init+0x2e8>)
 80205fa:	2100      	movs	r1, #0
 80205fc:	4618      	mov	r0, r3
 80205fe:	f7fe ff37 	bl	801f470 <lv_label_set_style>
	    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8020602:	4b8a      	ldr	r3, [pc, #552]	; (802082c <dType2_Clock_Init+0x318>)
 8020604:	781b      	ldrb	r3, [r3, #0]
 8020606:	4619      	mov	r1, r3
 8020608:	4b89      	ldr	r3, [pc, #548]	; (8020830 <dType2_Clock_Init+0x31c>)
 802060a:	781b      	ldrb	r3, [r3, #0]
 802060c:	461a      	mov	r2, r3
 802060e:	4b89      	ldr	r3, [pc, #548]	; (8020834 <dType2_Clock_Init+0x320>)
 8020610:	881b      	ldrh	r3, [r3, #0]
 8020612:	9301      	str	r3, [sp, #4]
 8020614:	9200      	str	r2, [sp, #0]
 8020616:	460b      	mov	r3, r1
 8020618:	4a87      	ldr	r2, [pc, #540]	; (8020838 <dType2_Clock_Init+0x324>)
 802061a:	2110      	movs	r1, #16
 802061c:	4881      	ldr	r0, [pc, #516]	; (8020824 <dType2_Clock_Init+0x310>)
 802061e:	f007 fae7 	bl	8027bf0 <sniprintf>
			lv_label_set_text(digitalDate, buffer);
 8020622:	4b81      	ldr	r3, [pc, #516]	; (8020828 <dType2_Clock_Init+0x314>)
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	497f      	ldr	r1, [pc, #508]	; (8020824 <dType2_Clock_Init+0x310>)
 8020628:	4618      	mov	r0, r3
 802062a:	f7f9 f8a5 	bl	8019778 <lv_label_set_text>
		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 802062e:	4b7e      	ldr	r3, [pc, #504]	; (8020828 <dType2_Clock_Init+0x314>)
 8020630:	6818      	ldr	r0, [r3, #0]
 8020632:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020636:	9300      	str	r3, [sp, #0]
 8020638:	2300      	movs	r3, #0
 802063a:	2200      	movs	r2, #0
 802063c:	2100      	movs	r1, #0
 802063e:	f7e5 fe51 	bl	80062e4 <lv_obj_align>

		    //Week Day
		    weekDay = lv_label_create(lv_scr_act(), NULL);
 8020642:	f7fe ff0a 	bl	801f45a <lv_scr_act>
 8020646:	4603      	mov	r3, r0
 8020648:	2100      	movs	r1, #0
 802064a:	4618      	mov	r0, r3
 802064c:	f7f8 ff62 	bl	8019514 <lv_label_create>
 8020650:	4602      	mov	r2, r0
 8020652:	4b7a      	ldr	r3, [pc, #488]	; (802083c <dType2_Clock_Init+0x328>)
 8020654:	601a      	str	r2, [r3, #0]
		    lv_obj_set_width(weekDay, 150);
 8020656:	4b79      	ldr	r3, [pc, #484]	; (802083c <dType2_Clock_Init+0x328>)
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	2196      	movs	r1, #150	; 0x96
 802065c:	4618      	mov	r0, r3
 802065e:	f7e5 fe17 	bl	8006290 <lv_obj_set_width>
		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 8020662:	4b76      	ldr	r3, [pc, #472]	; (802083c <dType2_Clock_Init+0x328>)
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	4a67      	ldr	r2, [pc, #412]	; (8020804 <dType2_Clock_Init+0x2f0>)
 8020668:	2100      	movs	r1, #0
 802066a:	4618      	mov	r0, r3
 802066c:	f7fe ff00 	bl	801f470 <lv_label_set_style>
		    lv_label_set_text(weekDay,weekDayStr);
 8020670:	4b72      	ldr	r3, [pc, #456]	; (802083c <dType2_Clock_Init+0x328>)
 8020672:	681a      	ldr	r2, [r3, #0]
 8020674:	4b72      	ldr	r3, [pc, #456]	; (8020840 <dType2_Clock_Init+0x32c>)
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	4619      	mov	r1, r3
 802067a:	4610      	mov	r0, r2
 802067c:	f7f9 f87c 	bl	8019778 <lv_label_set_text>
		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020680:	4b6e      	ldr	r3, [pc, #440]	; (802083c <dType2_Clock_Init+0x328>)
 8020682:	6818      	ldr	r0, [r3, #0]
 8020684:	f06f 0309 	mvn.w	r3, #9
 8020688:	9300      	str	r3, [sp, #0]
 802068a:	2300      	movs	r3, #0
 802068c:	2200      	movs	r2, #0
 802068e:	2100      	movs	r1, #0
 8020690:	f7e5 fe28 	bl	80062e4 <lv_obj_align>

		    //Steps
		    static lv_style_t steps_Style,description_Style;
		   		  lv_style_copy(&steps_Style, &lv_style_plain);
 8020694:	4956      	ldr	r1, [pc, #344]	; (80207f0 <dType2_Clock_Init+0x2dc>)
 8020696:	486b      	ldr	r0, [pc, #428]	; (8020844 <dType2_Clock_Init+0x330>)
 8020698:	f7e8 f868 	bl	800876c <lv_style_copy>
		   		  steps_Style.line.color = LV_COLOR_GREEN;
 802069c:	4a69      	ldr	r2, [pc, #420]	; (8020844 <dType2_Clock_Init+0x330>)
 802069e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80206a2:	2104      	movs	r1, #4
 80206a4:	f361 0302 	bfi	r3, r1, #0, #3
 80206a8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80206ac:	4a65      	ldr	r2, [pc, #404]	; (8020844 <dType2_Clock_Init+0x330>)
 80206ae:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80206b2:	f36f 03c7 	bfc	r3, #3, #5
 80206b6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80206ba:	4a62      	ldr	r2, [pc, #392]	; (8020844 <dType2_Clock_Init+0x330>)
 80206bc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80206c0:	f36f 0304 	bfc	r3, #0, #5
 80206c4:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80206c8:	4a5e      	ldr	r2, [pc, #376]	; (8020844 <dType2_Clock_Init+0x330>)
 80206ca:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80206ce:	f36f 1347 	bfc	r3, #5, #3
 80206d2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  steps_Style.line.width = 5;
 80206d6:	4b5b      	ldr	r3, [pc, #364]	; (8020844 <dType2_Clock_Init+0x330>)
 80206d8:	2205      	movs	r2, #5
 80206da:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  steps_Style.text.color = LV_COLOR_GREEN;
 80206dc:	4a59      	ldr	r2, [pc, #356]	; (8020844 <dType2_Clock_Init+0x330>)
 80206de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80206e2:	2104      	movs	r1, #4
 80206e4:	f361 0302 	bfi	r3, r1, #0, #3
 80206e8:	f882 3020 	strb.w	r3, [r2, #32]
 80206ec:	4a55      	ldr	r2, [pc, #340]	; (8020844 <dType2_Clock_Init+0x330>)
 80206ee:	f892 3020 	ldrb.w	r3, [r2, #32]
 80206f2:	f36f 03c7 	bfc	r3, #3, #5
 80206f6:	f882 3020 	strb.w	r3, [r2, #32]
 80206fa:	4a52      	ldr	r2, [pc, #328]	; (8020844 <dType2_Clock_Init+0x330>)
 80206fc:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020700:	f36f 0304 	bfc	r3, #0, #5
 8020704:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8020708:	4a4e      	ldr	r2, [pc, #312]	; (8020844 <dType2_Clock_Init+0x330>)
 802070a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802070e:	f36f 1347 	bfc	r3, #5, #3
 8020712:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  steps_Style.text.font = &lv_font_roboto_22;
 8020716:	4b4b      	ldr	r3, [pc, #300]	; (8020844 <dType2_Clock_Init+0x330>)
 8020718:	4a3b      	ldr	r2, [pc, #236]	; (8020808 <dType2_Clock_Init+0x2f4>)
 802071a:	625a      	str	r2, [r3, #36]	; 0x24

		   		  lv_style_copy(&description_Style, &lv_style_plain);
 802071c:	4934      	ldr	r1, [pc, #208]	; (80207f0 <dType2_Clock_Init+0x2dc>)
 802071e:	484a      	ldr	r0, [pc, #296]	; (8020848 <dType2_Clock_Init+0x334>)
 8020720:	f7e8 f824 	bl	800876c <lv_style_copy>
		   		  description_Style.text.font = &lv_font_unscii_8;
 8020724:	4b48      	ldr	r3, [pc, #288]	; (8020848 <dType2_Clock_Init+0x334>)
 8020726:	4a49      	ldr	r2, [pc, #292]	; (802084c <dType2_Clock_Init+0x338>)
 8020728:	625a      	str	r2, [r3, #36]	; 0x24
		   		  description_Style.text.color = LV_COLOR_GRAY;
 802072a:	4a47      	ldr	r2, [pc, #284]	; (8020848 <dType2_Clock_Init+0x334>)
 802072c:	4b48      	ldr	r3, [pc, #288]	; (8020850 <dType2_Clock_Init+0x33c>)
 802072e:	881b      	ldrh	r3, [r3, #0]
 8020730:	8413      	strh	r3, [r2, #32]
		   		    if(theme){
 8020732:	79fb      	ldrb	r3, [r7, #7]
 8020734:	2b00      	cmp	r3, #0
 8020736:	d003      	beq.n	8020740 <dType2_Clock_Init+0x22c>
		   		    	description_Style.text.color = LV_COLOR_WHITE;
 8020738:	4a43      	ldr	r2, [pc, #268]	; (8020848 <dType2_Clock_Init+0x334>)
 802073a:	4b34      	ldr	r3, [pc, #208]	; (802080c <dType2_Clock_Init+0x2f8>)
 802073c:	881b      	ldrh	r3, [r3, #0]
 802073e:	8413      	strh	r3, [r2, #32]
		   		    }

		   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8020740:	f7fe fe8b 	bl	801f45a <lv_scr_act>
 8020744:	4603      	mov	r3, r0
 8020746:	2100      	movs	r1, #0
 8020748:	4618      	mov	r0, r3
 802074a:	f7f8 fee3 	bl	8019514 <lv_label_create>
 802074e:	4602      	mov	r2, r0
 8020750:	4b40      	ldr	r3, [pc, #256]	; (8020854 <dType2_Clock_Init+0x340>)
 8020752:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(stepsLbl, 150);
 8020754:	4b3f      	ldr	r3, [pc, #252]	; (8020854 <dType2_Clock_Init+0x340>)
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	2196      	movs	r1, #150	; 0x96
 802075a:	4618      	mov	r0, r3
 802075c:	f7e5 fd98 	bl	8006290 <lv_obj_set_width>
		   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8020760:	4b3c      	ldr	r3, [pc, #240]	; (8020854 <dType2_Clock_Init+0x340>)
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	4a37      	ldr	r2, [pc, #220]	; (8020844 <dType2_Clock_Init+0x330>)
 8020766:	2100      	movs	r1, #0
 8020768:	4618      	mov	r0, r3
 802076a:	f7fe fe81 	bl	801f470 <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", steps);
 802076e:	4b3a      	ldr	r3, [pc, #232]	; (8020858 <dType2_Clock_Init+0x344>)
 8020770:	881b      	ldrh	r3, [r3, #0]
 8020772:	4a3a      	ldr	r2, [pc, #232]	; (802085c <dType2_Clock_Init+0x348>)
 8020774:	2108      	movs	r1, #8
 8020776:	482b      	ldr	r0, [pc, #172]	; (8020824 <dType2_Clock_Init+0x310>)
 8020778:	f007 fa3a 	bl	8027bf0 <sniprintf>
		   		 lv_label_set_text(stepsLbl, buffer);
 802077c:	4b35      	ldr	r3, [pc, #212]	; (8020854 <dType2_Clock_Init+0x340>)
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	4928      	ldr	r1, [pc, #160]	; (8020824 <dType2_Clock_Init+0x310>)
 8020782:	4618      	mov	r0, r3
 8020784:	f7f8 fff8 	bl	8019778 <lv_label_set_text>
		   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8020788:	4b32      	ldr	r3, [pc, #200]	; (8020854 <dType2_Clock_Init+0x340>)
 802078a:	6818      	ldr	r0, [r3, #0]
 802078c:	2328      	movs	r3, #40	; 0x28
 802078e:	9300      	str	r3, [sp, #0]
 8020790:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8020794:	2200      	movs	r2, #0
 8020796:	2100      	movs	r1, #0
 8020798:	f7e5 fda4 	bl	80062e4 <lv_obj_align>

		   		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 802079c:	f7fe fe5d 	bl	801f45a <lv_scr_act>
 80207a0:	4603      	mov	r3, r0
 80207a2:	2100      	movs	r1, #0
 80207a4:	4618      	mov	r0, r3
 80207a6:	f7f8 feb5 	bl	8019514 <lv_label_create>
 80207aa:	4602      	mov	r2, r0
 80207ac:	4b2c      	ldr	r3, [pc, #176]	; (8020860 <dType2_Clock_Init+0x34c>)
 80207ae:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80207b0:	4b2b      	ldr	r3, [pc, #172]	; (8020860 <dType2_Clock_Init+0x34c>)
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	4a24      	ldr	r2, [pc, #144]	; (8020848 <dType2_Clock_Init+0x334>)
 80207b6:	2100      	movs	r1, #0
 80207b8:	4618      	mov	r0, r3
 80207ba:	f7fe fe59 	bl	801f470 <lv_label_set_style>
		   		 lv_label_set_text(stepsDescLbl, "steps");
 80207be:	4b28      	ldr	r3, [pc, #160]	; (8020860 <dType2_Clock_Init+0x34c>)
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	4928      	ldr	r1, [pc, #160]	; (8020864 <dType2_Clock_Init+0x350>)
 80207c4:	4618      	mov	r0, r3
 80207c6:	f7f8 ffd7 	bl	8019778 <lv_label_set_text>
		   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 80207ca:	4b25      	ldr	r3, [pc, #148]	; (8020860 <dType2_Clock_Init+0x34c>)
 80207cc:	6818      	ldr	r0, [r3, #0]
 80207ce:	2337      	movs	r3, #55	; 0x37
 80207d0:	9300      	str	r3, [sp, #0]
 80207d2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80207d6:	2200      	movs	r2, #0
 80207d8:	2100      	movs	r1, #0
 80207da:	f7e5 fd83 	bl	80062e4 <lv_obj_align>

		   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80207de:	f7fe fe3c 	bl	801f45a <lv_scr_act>
 80207e2:	4603      	mov	r3, r0
 80207e4:	2100      	movs	r1, #0
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7f4 f892 	bl	8014910 <lv_arc_create>
 80207ec:	4602      	mov	r2, r0
 80207ee:	e03b      	b.n	8020868 <dType2_Clock_Init+0x354>
 80207f0:	20006c68 	.word	0x20006c68
 80207f4:	20005dbc 	.word	0x20005dbc
 80207f8:	20002818 	.word	0x20002818
 80207fc:	20005df8 	.word	0x20005df8
 8020800:	200027e8 	.word	0x200027e8
 8020804:	20005e34 	.word	0x20005e34
 8020808:	200017c0 	.word	0x200017c0
 802080c:	08029d50 	.word	0x08029d50
 8020810:	20006e14 	.word	0x20006e14
 8020814:	20006ee9 	.word	0x20006ee9
 8020818:	20006ee8 	.word	0x20006ee8
 802081c:	20006ed8 	.word	0x20006ed8
 8020820:	08029d94 	.word	0x08029d94
 8020824:	20006e74 	.word	0x20006e74
 8020828:	20006e0c 	.word	0x20006e0c
 802082c:	200073b4 	.word	0x200073b4
 8020830:	20006e18 	.word	0x20006e18
 8020834:	20006eda 	.word	0x20006eda
 8020838:	08029d74 	.word	0x08029d74
 802083c:	20006e04 	.word	0x20006e04
 8020840:	20006e68 	.word	0x20006e68
 8020844:	20005e70 	.word	0x20005e70
 8020848:	20005eac 	.word	0x20005eac
 802084c:	200026cc 	.word	0x200026cc
 8020850:	08029d90 	.word	0x08029d90
 8020854:	20006e88 	.word	0x20006e88
 8020858:	20006e64 	.word	0x20006e64
 802085c:	08029d5c 	.word	0x08029d5c
 8020860:	20006e1c 	.word	0x20006e1c
 8020864:	08029d64 	.word	0x08029d64
 8020868:	4b6e      	ldr	r3, [pc, #440]	; (8020a24 <dType2_Clock_Init+0x510>)
 802086a:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(stepsArc, 80, 80);
 802086c:	4b6d      	ldr	r3, [pc, #436]	; (8020a24 <dType2_Clock_Init+0x510>)
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	2250      	movs	r2, #80	; 0x50
 8020872:	2150      	movs	r1, #80	; 0x50
 8020874:	4618      	mov	r0, r3
 8020876:	f7e5 fc92 	bl	800619e <lv_obj_set_size>
		   		  lv_arc_set_angles(stepsArc, 0, 360);
 802087a:	4b6a      	ldr	r3, [pc, #424]	; (8020a24 <dType2_Clock_Init+0x510>)
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020882:	2100      	movs	r1, #0
 8020884:	4618      	mov	r0, r3
 8020886:	f7f4 f8bf 	bl	8014a08 <lv_arc_set_angles>
		   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 802088a:	4b66      	ldr	r3, [pc, #408]	; (8020a24 <dType2_Clock_Init+0x510>)
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	4a66      	ldr	r2, [pc, #408]	; (8020a28 <dType2_Clock_Init+0x514>)
 8020890:	2100      	movs	r1, #0
 8020892:	4618      	mov	r0, r3
 8020894:	f7f4 f8e1 	bl	8014a5a <lv_arc_set_style>
		   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 40);
 8020898:	4b62      	ldr	r3, [pc, #392]	; (8020a24 <dType2_Clock_Init+0x510>)
 802089a:	6818      	ldr	r0, [r3, #0]
 802089c:	2328      	movs	r3, #40	; 0x28
 802089e:	9300      	str	r3, [sp, #0]
 80208a0:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80208a4:	2200      	movs	r2, #0
 80208a6:	2100      	movs	r1, #0
 80208a8:	f7e5 fd1c 	bl	80062e4 <lv_obj_align>

		   		  //Kcal
		   		static lv_style_t kCals_Style;
		   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 80208ac:	495f      	ldr	r1, [pc, #380]	; (8020a2c <dType2_Clock_Init+0x518>)
 80208ae:	4860      	ldr	r0, [pc, #384]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208b0:	f7e7 ff5c 	bl	800876c <lv_style_copy>
		   		  kCals_Style.line.color = LV_COLOR_RED;
 80208b4:	4a5e      	ldr	r2, [pc, #376]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208b6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80208ba:	f36f 0302 	bfc	r3, #0, #3
 80208be:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80208c2:	4a5b      	ldr	r2, [pc, #364]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208c4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80208c8:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80208cc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80208d0:	4a57      	ldr	r2, [pc, #348]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208d2:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80208d6:	f36f 0304 	bfc	r3, #0, #5
 80208da:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80208de:	4a54      	ldr	r2, [pc, #336]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208e0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80208e4:	f36f 1347 	bfc	r3, #5, #3
 80208e8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  kCals_Style.line.width = 5;
 80208ec:	4b50      	ldr	r3, [pc, #320]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208ee:	2205      	movs	r2, #5
 80208f0:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  kCals_Style.text.color = LV_COLOR_RED;
 80208f2:	4a4f      	ldr	r2, [pc, #316]	; (8020a30 <dType2_Clock_Init+0x51c>)
 80208f4:	f892 3020 	ldrb.w	r3, [r2, #32]
 80208f8:	f36f 0302 	bfc	r3, #0, #3
 80208fc:	f882 3020 	strb.w	r3, [r2, #32]
 8020900:	4a4b      	ldr	r2, [pc, #300]	; (8020a30 <dType2_Clock_Init+0x51c>)
 8020902:	f892 3020 	ldrb.w	r3, [r2, #32]
 8020906:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 802090a:	f882 3020 	strb.w	r3, [r2, #32]
 802090e:	4a48      	ldr	r2, [pc, #288]	; (8020a30 <dType2_Clock_Init+0x51c>)
 8020910:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020914:	f36f 0304 	bfc	r3, #0, #5
 8020918:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 802091c:	4a44      	ldr	r2, [pc, #272]	; (8020a30 <dType2_Clock_Init+0x51c>)
 802091e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020922:	f36f 1347 	bfc	r3, #5, #3
 8020926:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  kCals_Style.text.font = &lv_font_roboto_22;
 802092a:	4b41      	ldr	r3, [pc, #260]	; (8020a30 <dType2_Clock_Init+0x51c>)
 802092c:	4a41      	ldr	r2, [pc, #260]	; (8020a34 <dType2_Clock_Init+0x520>)
 802092e:	625a      	str	r2, [r3, #36]	; 0x24

		   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8020930:	f7fe fd93 	bl	801f45a <lv_scr_act>
 8020934:	4603      	mov	r3, r0
 8020936:	2100      	movs	r1, #0
 8020938:	4618      	mov	r0, r3
 802093a:	f7f8 fdeb 	bl	8019514 <lv_label_create>
 802093e:	4602      	mov	r2, r0
 8020940:	4b3d      	ldr	r3, [pc, #244]	; (8020a38 <dType2_Clock_Init+0x524>)
 8020942:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(kCalsLbl, 150);
 8020944:	4b3c      	ldr	r3, [pc, #240]	; (8020a38 <dType2_Clock_Init+0x524>)
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	2196      	movs	r1, #150	; 0x96
 802094a:	4618      	mov	r0, r3
 802094c:	f7e5 fca0 	bl	8006290 <lv_obj_set_width>
		   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8020950:	4b39      	ldr	r3, [pc, #228]	; (8020a38 <dType2_Clock_Init+0x524>)
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	4a36      	ldr	r2, [pc, #216]	; (8020a30 <dType2_Clock_Init+0x51c>)
 8020956:	2100      	movs	r1, #0
 8020958:	4618      	mov	r0, r3
 802095a:	f7fe fd89 	bl	801f470 <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", kCals);
 802095e:	4b37      	ldr	r3, [pc, #220]	; (8020a3c <dType2_Clock_Init+0x528>)
 8020960:	881b      	ldrh	r3, [r3, #0]
 8020962:	4a37      	ldr	r2, [pc, #220]	; (8020a40 <dType2_Clock_Init+0x52c>)
 8020964:	2108      	movs	r1, #8
 8020966:	4837      	ldr	r0, [pc, #220]	; (8020a44 <dType2_Clock_Init+0x530>)
 8020968:	f007 f942 	bl	8027bf0 <sniprintf>
		   		 lv_label_set_text(kCalsLbl, buffer);
 802096c:	4b32      	ldr	r3, [pc, #200]	; (8020a38 <dType2_Clock_Init+0x524>)
 802096e:	681b      	ldr	r3, [r3, #0]
 8020970:	4934      	ldr	r1, [pc, #208]	; (8020a44 <dType2_Clock_Init+0x530>)
 8020972:	4618      	mov	r0, r3
 8020974:	f7f8 ff00 	bl	8019778 <lv_label_set_text>
		   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8020978:	4b2f      	ldr	r3, [pc, #188]	; (8020a38 <dType2_Clock_Init+0x524>)
 802097a:	6818      	ldr	r0, [r3, #0]
 802097c:	2328      	movs	r3, #40	; 0x28
 802097e:	9300      	str	r3, [sp, #0]
 8020980:	233c      	movs	r3, #60	; 0x3c
 8020982:	2200      	movs	r2, #0
 8020984:	2100      	movs	r1, #0
 8020986:	f7e5 fcad 	bl	80062e4 <lv_obj_align>

		   		 kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 802098a:	f7fe fd66 	bl	801f45a <lv_scr_act>
 802098e:	4603      	mov	r3, r0
 8020990:	2100      	movs	r1, #0
 8020992:	4618      	mov	r0, r3
 8020994:	f7f8 fdbe 	bl	8019514 <lv_label_create>
 8020998:	4602      	mov	r2, r0
 802099a:	4b2b      	ldr	r3, [pc, #172]	; (8020a48 <dType2_Clock_Init+0x534>)
 802099c:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802099e:	4b2a      	ldr	r3, [pc, #168]	; (8020a48 <dType2_Clock_Init+0x534>)
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	4a2a      	ldr	r2, [pc, #168]	; (8020a4c <dType2_Clock_Init+0x538>)
 80209a4:	2100      	movs	r1, #0
 80209a6:	4618      	mov	r0, r3
 80209a8:	f7fe fd62 	bl	801f470 <lv_label_set_style>
		   		 lv_label_set_text(kCalsDescLbl, "kCals");
 80209ac:	4b26      	ldr	r3, [pc, #152]	; (8020a48 <dType2_Clock_Init+0x534>)
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	4927      	ldr	r1, [pc, #156]	; (8020a50 <dType2_Clock_Init+0x53c>)
 80209b2:	4618      	mov	r0, r3
 80209b4:	f7f8 fee0 	bl	8019778 <lv_label_set_text>
		   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 80209b8:	4b23      	ldr	r3, [pc, #140]	; (8020a48 <dType2_Clock_Init+0x534>)
 80209ba:	6818      	ldr	r0, [r3, #0]
 80209bc:	2337      	movs	r3, #55	; 0x37
 80209be:	9300      	str	r3, [sp, #0]
 80209c0:	233c      	movs	r3, #60	; 0x3c
 80209c2:	2200      	movs	r2, #0
 80209c4:	2100      	movs	r1, #0
 80209c6:	f7e5 fc8d 	bl	80062e4 <lv_obj_align>

		   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 80209ca:	f7fe fd46 	bl	801f45a <lv_scr_act>
 80209ce:	4603      	mov	r3, r0
 80209d0:	2100      	movs	r1, #0
 80209d2:	4618      	mov	r0, r3
 80209d4:	f7f3 ff9c 	bl	8014910 <lv_arc_create>
 80209d8:	4602      	mov	r2, r0
 80209da:	4b1e      	ldr	r3, [pc, #120]	; (8020a54 <dType2_Clock_Init+0x540>)
 80209dc:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(kCalsArc, 80, 80);
 80209de:	4b1d      	ldr	r3, [pc, #116]	; (8020a54 <dType2_Clock_Init+0x540>)
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	2250      	movs	r2, #80	; 0x50
 80209e4:	2150      	movs	r1, #80	; 0x50
 80209e6:	4618      	mov	r0, r3
 80209e8:	f7e5 fbd9 	bl	800619e <lv_obj_set_size>
		   		  lv_arc_set_angles(kCalsArc, 0, 360);
 80209ec:	4b19      	ldr	r3, [pc, #100]	; (8020a54 <dType2_Clock_Init+0x540>)
 80209ee:	681b      	ldr	r3, [r3, #0]
 80209f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80209f4:	2100      	movs	r1, #0
 80209f6:	4618      	mov	r0, r3
 80209f8:	f7f4 f806 	bl	8014a08 <lv_arc_set_angles>
		   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 80209fc:	4b15      	ldr	r3, [pc, #84]	; (8020a54 <dType2_Clock_Init+0x540>)
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	4a0b      	ldr	r2, [pc, #44]	; (8020a30 <dType2_Clock_Init+0x51c>)
 8020a02:	2100      	movs	r1, #0
 8020a04:	4618      	mov	r0, r3
 8020a06:	f7f4 f828 	bl	8014a5a <lv_arc_set_style>
		   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 40);
 8020a0a:	4b12      	ldr	r3, [pc, #72]	; (8020a54 <dType2_Clock_Init+0x540>)
 8020a0c:	6818      	ldr	r0, [r3, #0]
 8020a0e:	2328      	movs	r3, #40	; 0x28
 8020a10:	9300      	str	r3, [sp, #0]
 8020a12:	233c      	movs	r3, #60	; 0x3c
 8020a14:	2200      	movs	r2, #0
 8020a16:	2100      	movs	r1, #0
 8020a18:	f7e5 fc64 	bl	80062e4 <lv_obj_align>
}
 8020a1c:	bf00      	nop
 8020a1e:	3708      	adds	r7, #8
 8020a20:	46bd      	mov	sp, r7
 8020a22:	bd80      	pop	{r7, pc}
 8020a24:	20006e6c 	.word	0x20006e6c
 8020a28:	20005e70 	.word	0x20005e70
 8020a2c:	20006c68 	.word	0x20006c68
 8020a30:	20005ee8 	.word	0x20005ee8
 8020a34:	200017c0 	.word	0x200017c0
 8020a38:	20006ee4 	.word	0x20006ee4
 8020a3c:	20006e0a 	.word	0x20006e0a
 8020a40:	08029d5c 	.word	0x08029d5c
 8020a44:	20006e74 	.word	0x20006e74
 8020a48:	20006ed0 	.word	0x20006ed0
 8020a4c:	20005eac 	.word	0x20005eac
 8020a50:	08029d6c 	.word	0x08029d6c
 8020a54:	20006eec 	.word	0x20006eec

08020a58 <MainScreen_Updater>:
/*This function using for update values*/
void MainScreen_Updater(void){
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	af00      	add	r7, sp, #0
	if(MS_taskController){
 8020a5c:	4b0c      	ldr	r3, [pc, #48]	; (8020a90 <MainScreen_Updater+0x38>)
 8020a5e:	781b      	ldrb	r3, [r3, #0]
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d012      	beq.n	8020a8a <MainScreen_Updater+0x32>
	switch(MainScreenType){
 8020a64:	4b0b      	ldr	r3, [pc, #44]	; (8020a94 <MainScreen_Updater+0x3c>)
 8020a66:	781b      	ldrb	r3, [r3, #0]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d002      	beq.n	8020a72 <MainScreen_Updater+0x1a>
 8020a6c:	2b02      	cmp	r3, #2
 8020a6e:	d005      	beq.n	8020a7c <MainScreen_Updater+0x24>
	case tos_mainScreen_Type3:
		seconds_angle_loader();
		minutes_angle_loader();
		hours_angle_loader();
		break;
	default: break;
 8020a70:	e00c      	b.n	8020a8c <MainScreen_Updater+0x34>
		minutes_angle_loader();
 8020a72:	f000 f905 	bl	8020c80 <minutes_angle_loader>
		hours_angle_loader();
 8020a76:	f000 f87f 	bl	8020b78 <hours_angle_loader>
		break;
 8020a7a:	e007      	b.n	8020a8c <MainScreen_Updater+0x34>
		seconds_angle_loader();
 8020a7c:	f000 f96c 	bl	8020d58 <seconds_angle_loader>
		minutes_angle_loader();
 8020a80:	f000 f8fe 	bl	8020c80 <minutes_angle_loader>
		hours_angle_loader();
 8020a84:	f000 f878 	bl	8020b78 <hours_angle_loader>
		break;
 8020a88:	e000      	b.n	8020a8c <MainScreen_Updater+0x34>
	}
	}
 8020a8a:	bf00      	nop
}
 8020a8c:	bf00      	nop
 8020a8e:	bd80      	pop	{r7, pc}
 8020a90:	20006e85 	.word	0x20006e85
 8020a94:	20006e08 	.word	0x20006e08

08020a98 <batteryValueUpdater>:



/* This function using for battery value update
*/
void batteryValueUpdater(lv_task_t *t){
 8020a98:	b580      	push	{r7, lr}
 8020a9a:	b084      	sub	sp, #16
 8020a9c:	af02      	add	r7, sp, #8
 8020a9e:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020aa0:	4b10      	ldr	r3, [pc, #64]	; (8020ae4 <batteryValueUpdater+0x4c>)
 8020aa2:	781b      	ldrb	r3, [r3, #0]
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d016      	beq.n	8020ad6 <batteryValueUpdater+0x3e>
		  lv_label_set_text(batteryLbl, batteryVal);
 8020aa8:	4b0f      	ldr	r3, [pc, #60]	; (8020ae8 <batteryValueUpdater+0x50>)
 8020aaa:	681a      	ldr	r2, [r3, #0]
 8020aac:	4b0f      	ldr	r3, [pc, #60]	; (8020aec <batteryValueUpdater+0x54>)
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	4619      	mov	r1, r3
 8020ab2:	4610      	mov	r0, r2
 8020ab4:	f7f8 fe60 	bl	8019778 <lv_label_set_text>
		  battery_style.text.color = batteryColor;
 8020ab8:	4a0d      	ldr	r2, [pc, #52]	; (8020af0 <batteryValueUpdater+0x58>)
 8020aba:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <batteryValueUpdater+0x5c>)
 8020abc:	881b      	ldrh	r3, [r3, #0]
 8020abe:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8020ac0:	4b09      	ldr	r3, [pc, #36]	; (8020ae8 <batteryValueUpdater+0x50>)
 8020ac2:	6818      	ldr	r0, [r3, #0]
 8020ac4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020ac8:	9300      	str	r3, [sp, #0]
 8020aca:	2364      	movs	r3, #100	; 0x64
 8020acc:	2200      	movs	r2, #0
 8020ace:	2100      	movs	r1, #0
 8020ad0:	f7e5 fc08 	bl	80062e4 <lv_obj_align>
}else lv_task_del(t);}
 8020ad4:	e002      	b.n	8020adc <batteryValueUpdater+0x44>
 8020ad6:	6878      	ldr	r0, [r7, #4]
 8020ad8:	f7f3 f9e2 	bl	8013ea0 <lv_task_del>
 8020adc:	bf00      	nop
 8020ade:	3708      	adds	r7, #8
 8020ae0:	46bd      	mov	sp, r7
 8020ae2:	bd80      	pop	{r7, pc}
 8020ae4:	20006e85 	.word	0x20006e85
 8020ae8:	20006ed4 	.word	0x20006ed4
 8020aec:	20006ee0 	.word	0x20006ee0
 8020af0:	20006e8c 	.word	0x20006e8c
 8020af4:	20006edc 	.word	0x20006edc

08020af8 <bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void bluetoothStatusUpdater(lv_task_t *t){
 8020af8:	b580      	push	{r7, lr}
 8020afa:	b084      	sub	sp, #16
 8020afc:	af02      	add	r7, sp, #8
 8020afe:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020b00:	4b15      	ldr	r3, [pc, #84]	; (8020b58 <bluetoothStatusUpdater+0x60>)
 8020b02:	781b      	ldrb	r3, [r3, #0]
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d020      	beq.n	8020b4a <bluetoothStatusUpdater+0x52>
		if(bluetoothStatus){
 8020b08:	4b14      	ldr	r3, [pc, #80]	; (8020b5c <bluetoothStatusUpdater+0x64>)
 8020b0a:	781b      	ldrb	r3, [r3, #0]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d015      	beq.n	8020b3c <bluetoothStatusUpdater+0x44>
		      bluetooth_style.text.color = bluetoothColor;
 8020b10:	4a13      	ldr	r2, [pc, #76]	; (8020b60 <bluetoothStatusUpdater+0x68>)
 8020b12:	4b14      	ldr	r3, [pc, #80]	; (8020b64 <bluetoothStatusUpdater+0x6c>)
 8020b14:	881b      	ldrh	r3, [r3, #0]
 8020b16:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8020b18:	4b13      	ldr	r3, [pc, #76]	; (8020b68 <bluetoothStatusUpdater+0x70>)
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	4913      	ldr	r1, [pc, #76]	; (8020b6c <bluetoothStatusUpdater+0x74>)
 8020b1e:	4618      	mov	r0, r3
 8020b20:	f7f8 fe2a 	bl	8019778 <lv_label_set_text>
			  lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8020b24:	4b10      	ldr	r3, [pc, #64]	; (8020b68 <bluetoothStatusUpdater+0x70>)
 8020b26:	6818      	ldr	r0, [r3, #0]
 8020b28:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020b2c:	9300      	str	r3, [sp, #0]
 8020b2e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020b32:	2200      	movs	r2, #0
 8020b34:	2100      	movs	r1, #0
 8020b36:	f7e5 fbd5 	bl	80062e4 <lv_obj_align>
		}
		else lv_label_set_text(bluetoothLbl, " ");
	}else lv_task_del(t);
}
 8020b3a:	e009      	b.n	8020b50 <bluetoothStatusUpdater+0x58>
		else lv_label_set_text(bluetoothLbl, " ");
 8020b3c:	4b0a      	ldr	r3, [pc, #40]	; (8020b68 <bluetoothStatusUpdater+0x70>)
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	490b      	ldr	r1, [pc, #44]	; (8020b70 <bluetoothStatusUpdater+0x78>)
 8020b42:	4618      	mov	r0, r3
 8020b44:	f7f8 fe18 	bl	8019778 <lv_label_set_text>
}
 8020b48:	e002      	b.n	8020b50 <bluetoothStatusUpdater+0x58>
	}else lv_task_del(t);
 8020b4a:	6878      	ldr	r0, [r7, #4]
 8020b4c:	f7f3 f9a8 	bl	8013ea0 <lv_task_del>
}
 8020b50:	bf00      	nop
 8020b52:	3708      	adds	r7, #8
 8020b54:	46bd      	mov	sp, r7
 8020b56:	bd80      	pop	{r7, pc}
 8020b58:	20006e85 	.word	0x20006e85
 8020b5c:	20006e84 	.word	0x20006e84
 8020b60:	20006e24 	.word	0x20006e24
 8020b64:	20006ec8 	.word	0x20006ec8
 8020b68:	20006e70 	.word	0x20006e70
 8020b6c:	08029d58 	.word	0x08029d58
 8020b70:	08029da4 	.word	0x08029da4
 8020b74:	00000000 	.word	0x00000000

08020b78 <hours_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set hours 
*/
void hours_angle_loader(void)
{	/*saat 12 veya 0 olduğunda saat çubuğu ilerlemiyor çöz*/
 8020b78:	b590      	push	{r4, r7, lr}
 8020b7a:	b085      	sub	sp, #20
 8020b7c:	af00      	add	r7, sp, #0
		uint8_t hoursTmpVal=hours;
 8020b7e:	4b3a      	ldr	r3, [pc, #232]	; (8020c68 <hours_angle_loader+0xf0>)
 8020b80:	781b      	ldrb	r3, [r3, #0]
 8020b82:	73fb      	strb	r3, [r7, #15]
		if(hours>=12)hoursTmpVal=hours%12;
 8020b84:	4b38      	ldr	r3, [pc, #224]	; (8020c68 <hours_angle_loader+0xf0>)
 8020b86:	781b      	ldrb	r3, [r3, #0]
 8020b88:	2b0b      	cmp	r3, #11
 8020b8a:	d90b      	bls.n	8020ba4 <hours_angle_loader+0x2c>
 8020b8c:	4b36      	ldr	r3, [pc, #216]	; (8020c68 <hours_angle_loader+0xf0>)
 8020b8e:	781a      	ldrb	r2, [r3, #0]
 8020b90:	4b36      	ldr	r3, [pc, #216]	; (8020c6c <hours_angle_loader+0xf4>)
 8020b92:	fba3 1302 	umull	r1, r3, r3, r2
 8020b96:	08d9      	lsrs	r1, r3, #3
 8020b98:	460b      	mov	r3, r1
 8020b9a:	005b      	lsls	r3, r3, #1
 8020b9c:	440b      	add	r3, r1
 8020b9e:	009b      	lsls	r3, r3, #2
 8020ba0:	1ad3      	subs	r3, r2, r3
 8020ba2:	73fb      	strb	r3, [r7, #15]
		double hoursTemp = tos_Ratio(hoursTmpVal*60, 0, 11*60,0, 359);
 8020ba4:	7bfa      	ldrb	r2, [r7, #15]
 8020ba6:	4613      	mov	r3, r2
 8020ba8:	011b      	lsls	r3, r3, #4
 8020baa:	1a9b      	subs	r3, r3, r2
 8020bac:	009b      	lsls	r3, r3, #2
 8020bae:	4618      	mov	r0, r3
 8020bb0:	f7df fcc8 	bl	8000544 <__aeabi_i2d>
 8020bb4:	4603      	mov	r3, r0
 8020bb6:	460c      	mov	r4, r1
 8020bb8:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8020c50 <hours_angle_loader+0xd8>
 8020bbc:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8020c58 <hours_angle_loader+0xe0>
 8020bc0:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8020c60 <hours_angle_loader+0xe8>
 8020bc4:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8020c58 <hours_angle_loader+0xe0>
 8020bc8:	ec44 3b10 	vmov	d0, r3, r4
 8020bcc:	f005 fe12 	bl	80267f4 <tos_Ratio>
 8020bd0:	ed87 0b00 	vstr	d0, [r7]
		if(hoursTemp < 180) lv_arc_set_angles(hoursArc, 180-hoursTemp ,180);
 8020bd4:	f04f 0200 	mov.w	r2, #0
 8020bd8:	4b25      	ldr	r3, [pc, #148]	; (8020c70 <hours_angle_loader+0xf8>)
 8020bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020bde:	f7df ff8d 	bl	8000afc <__aeabi_dcmplt>
 8020be2:	4603      	mov	r3, r0
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d016      	beq.n	8020c16 <hours_angle_loader+0x9e>
 8020be8:	4b22      	ldr	r3, [pc, #136]	; (8020c74 <hours_angle_loader+0xfc>)
 8020bea:	681c      	ldr	r4, [r3, #0]
 8020bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020bf0:	f04f 0000 	mov.w	r0, #0
 8020bf4:	491e      	ldr	r1, [pc, #120]	; (8020c70 <hours_angle_loader+0xf8>)
 8020bf6:	f7df fb57 	bl	80002a8 <__aeabi_dsub>
 8020bfa:	4602      	mov	r2, r0
 8020bfc:	460b      	mov	r3, r1
 8020bfe:	4610      	mov	r0, r2
 8020c00:	4619      	mov	r1, r3
 8020c02:	f7df ffe1 	bl	8000bc8 <__aeabi_d2uiz>
 8020c06:	4603      	mov	r3, r0
 8020c08:	b29b      	uxth	r3, r3
 8020c0a:	22b4      	movs	r2, #180	; 0xb4
 8020c0c:	4619      	mov	r1, r3
 8020c0e:	4620      	mov	r0, r4
 8020c10:	f7f3 fefa 	bl	8014a08 <lv_arc_set_angles>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
}
 8020c14:	e015      	b.n	8020c42 <hours_angle_loader+0xca>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
 8020c16:	4b17      	ldr	r3, [pc, #92]	; (8020c74 <hours_angle_loader+0xfc>)
 8020c18:	681c      	ldr	r4, [r3, #0]
 8020c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020c1e:	f04f 0000 	mov.w	r0, #0
 8020c22:	4915      	ldr	r1, [pc, #84]	; (8020c78 <hours_angle_loader+0x100>)
 8020c24:	f7df fb40 	bl	80002a8 <__aeabi_dsub>
 8020c28:	4602      	mov	r2, r0
 8020c2a:	460b      	mov	r3, r1
 8020c2c:	4610      	mov	r0, r2
 8020c2e:	4619      	mov	r1, r3
 8020c30:	f7df ffca 	bl	8000bc8 <__aeabi_d2uiz>
 8020c34:	4603      	mov	r3, r0
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	22b4      	movs	r2, #180	; 0xb4
 8020c3a:	4619      	mov	r1, r3
 8020c3c:	4620      	mov	r0, r4
 8020c3e:	f7f3 fee3 	bl	8014a08 <lv_arc_set_angles>
}
 8020c42:	bf00      	nop
 8020c44:	3714      	adds	r7, #20
 8020c46:	46bd      	mov	sp, r7
 8020c48:	bd90      	pop	{r4, r7, pc}
 8020c4a:	bf00      	nop
 8020c4c:	f3af 8000 	nop.w
 8020c50:	00000000 	.word	0x00000000
 8020c54:	40767000 	.word	0x40767000
	...
 8020c64:	4084a000 	.word	0x4084a000
 8020c68:	20006ee9 	.word	0x20006ee9
 8020c6c:	aaaaaaab 	.word	0xaaaaaaab
 8020c70:	40668000 	.word	0x40668000
 8020c74:	20006e20 	.word	0x20006e20
 8020c78:	4080e000 	.word	0x4080e000
 8020c7c:	00000000 	.word	0x00000000

08020c80 <minutes_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set minutes
*/
void minutes_angle_loader(void)
{
 8020c80:	b590      	push	{r4, r7, lr}
 8020c82:	b083      	sub	sp, #12
 8020c84:	af00      	add	r7, sp, #0
	double minutesTemp = tos_Ratio(minutes*60, 0, 59*60, 0, 359);
 8020c86:	4b30      	ldr	r3, [pc, #192]	; (8020d48 <minutes_angle_loader+0xc8>)
 8020c88:	781b      	ldrb	r3, [r3, #0]
 8020c8a:	461a      	mov	r2, r3
 8020c8c:	4613      	mov	r3, r2
 8020c8e:	011b      	lsls	r3, r3, #4
 8020c90:	1a9b      	subs	r3, r3, r2
 8020c92:	009b      	lsls	r3, r3, #2
 8020c94:	4618      	mov	r0, r3
 8020c96:	f7df fc55 	bl	8000544 <__aeabi_i2d>
 8020c9a:	4603      	mov	r3, r0
 8020c9c:	460c      	mov	r4, r1
 8020c9e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8020d30 <minutes_angle_loader+0xb0>
 8020ca2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8020d38 <minutes_angle_loader+0xb8>
 8020ca6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8020d40 <minutes_angle_loader+0xc0>
 8020caa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020d38 <minutes_angle_loader+0xb8>
 8020cae:	ec44 3b10 	vmov	d0, r3, r4
 8020cb2:	f005 fd9f 	bl	80267f4 <tos_Ratio>
 8020cb6:	ed87 0b00 	vstr	d0, [r7]
		if(minutesTemp < 180) lv_arc_set_angles(minutesArc, 180-minutesTemp ,180);
 8020cba:	f04f 0200 	mov.w	r2, #0
 8020cbe:	4b23      	ldr	r3, [pc, #140]	; (8020d4c <minutes_angle_loader+0xcc>)
 8020cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020cc4:	f7df ff1a 	bl	8000afc <__aeabi_dcmplt>
 8020cc8:	4603      	mov	r3, r0
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	d016      	beq.n	8020cfc <minutes_angle_loader+0x7c>
 8020cce:	4b20      	ldr	r3, [pc, #128]	; (8020d50 <minutes_angle_loader+0xd0>)
 8020cd0:	681c      	ldr	r4, [r3, #0]
 8020cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020cd6:	f04f 0000 	mov.w	r0, #0
 8020cda:	491c      	ldr	r1, [pc, #112]	; (8020d4c <minutes_angle_loader+0xcc>)
 8020cdc:	f7df fae4 	bl	80002a8 <__aeabi_dsub>
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	460b      	mov	r3, r1
 8020ce4:	4610      	mov	r0, r2
 8020ce6:	4619      	mov	r1, r3
 8020ce8:	f7df ff6e 	bl	8000bc8 <__aeabi_d2uiz>
 8020cec:	4603      	mov	r3, r0
 8020cee:	b29b      	uxth	r3, r3
 8020cf0:	22b4      	movs	r2, #180	; 0xb4
 8020cf2:	4619      	mov	r1, r3
 8020cf4:	4620      	mov	r0, r4
 8020cf6:	f7f3 fe87 	bl	8014a08 <lv_arc_set_angles>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);

}
 8020cfa:	e015      	b.n	8020d28 <minutes_angle_loader+0xa8>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);
 8020cfc:	4b14      	ldr	r3, [pc, #80]	; (8020d50 <minutes_angle_loader+0xd0>)
 8020cfe:	681c      	ldr	r4, [r3, #0]
 8020d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020d04:	f04f 0000 	mov.w	r0, #0
 8020d08:	4912      	ldr	r1, [pc, #72]	; (8020d54 <minutes_angle_loader+0xd4>)
 8020d0a:	f7df facd 	bl	80002a8 <__aeabi_dsub>
 8020d0e:	4602      	mov	r2, r0
 8020d10:	460b      	mov	r3, r1
 8020d12:	4610      	mov	r0, r2
 8020d14:	4619      	mov	r1, r3
 8020d16:	f7df ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8020d1a:	4603      	mov	r3, r0
 8020d1c:	b29b      	uxth	r3, r3
 8020d1e:	22b4      	movs	r2, #180	; 0xb4
 8020d20:	4619      	mov	r1, r3
 8020d22:	4620      	mov	r0, r4
 8020d24:	f7f3 fe70 	bl	8014a08 <lv_arc_set_angles>
}
 8020d28:	bf00      	nop
 8020d2a:	370c      	adds	r7, #12
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	bd90      	pop	{r4, r7, pc}
 8020d30:	00000000 	.word	0x00000000
 8020d34:	40767000 	.word	0x40767000
	...
 8020d44:	40aba800 	.word	0x40aba800
 8020d48:	20006ee8 	.word	0x20006ee8
 8020d4c:	40668000 	.word	0x40668000
 8020d50:	20006e60 	.word	0x20006e60
 8020d54:	4080e000 	.word	0x4080e000

08020d58 <seconds_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set Seconds
*/
void seconds_angle_loader(void)
{
 8020d58:	b590      	push	{r4, r7, lr}
 8020d5a:	b083      	sub	sp, #12
 8020d5c:	af00      	add	r7, sp, #0
	double secondsTemp = tos_Ratio(seconds, 0, 59, 0, 359);
 8020d5e:	4b2e      	ldr	r3, [pc, #184]	; (8020e18 <seconds_angle_loader+0xc0>)
 8020d60:	781b      	ldrb	r3, [r3, #0]
 8020d62:	4618      	mov	r0, r3
 8020d64:	f7df fbde 	bl	8000524 <__aeabi_ui2d>
 8020d68:	4603      	mov	r3, r0
 8020d6a:	460c      	mov	r4, r1
 8020d6c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8020e00 <seconds_angle_loader+0xa8>
 8020d70:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8020e08 <seconds_angle_loader+0xb0>
 8020d74:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8020e10 <seconds_angle_loader+0xb8>
 8020d78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020e08 <seconds_angle_loader+0xb0>
 8020d7c:	ec44 3b10 	vmov	d0, r3, r4
 8020d80:	f005 fd38 	bl	80267f4 <tos_Ratio>
 8020d84:	ed87 0b00 	vstr	d0, [r7]
		if(secondsTemp < 180) lv_arc_set_angles(secondsArc, 180-secondsTemp ,180);
 8020d88:	f04f 0200 	mov.w	r2, #0
 8020d8c:	4b23      	ldr	r3, [pc, #140]	; (8020e1c <seconds_angle_loader+0xc4>)
 8020d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020d92:	f7df feb3 	bl	8000afc <__aeabi_dcmplt>
 8020d96:	4603      	mov	r3, r0
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d016      	beq.n	8020dca <seconds_angle_loader+0x72>
 8020d9c:	4b20      	ldr	r3, [pc, #128]	; (8020e20 <seconds_angle_loader+0xc8>)
 8020d9e:	681c      	ldr	r4, [r3, #0]
 8020da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020da4:	f04f 0000 	mov.w	r0, #0
 8020da8:	491c      	ldr	r1, [pc, #112]	; (8020e1c <seconds_angle_loader+0xc4>)
 8020daa:	f7df fa7d 	bl	80002a8 <__aeabi_dsub>
 8020dae:	4602      	mov	r2, r0
 8020db0:	460b      	mov	r3, r1
 8020db2:	4610      	mov	r0, r2
 8020db4:	4619      	mov	r1, r3
 8020db6:	f7df ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8020dba:	4603      	mov	r3, r0
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	22b4      	movs	r2, #180	; 0xb4
 8020dc0:	4619      	mov	r1, r3
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	f7f3 fe20 	bl	8014a08 <lv_arc_set_angles>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);

}
 8020dc8:	e015      	b.n	8020df6 <seconds_angle_loader+0x9e>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);
 8020dca:	4b15      	ldr	r3, [pc, #84]	; (8020e20 <seconds_angle_loader+0xc8>)
 8020dcc:	681c      	ldr	r4, [r3, #0]
 8020dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020dd2:	f04f 0000 	mov.w	r0, #0
 8020dd6:	4913      	ldr	r1, [pc, #76]	; (8020e24 <seconds_angle_loader+0xcc>)
 8020dd8:	f7df fa66 	bl	80002a8 <__aeabi_dsub>
 8020ddc:	4602      	mov	r2, r0
 8020dde:	460b      	mov	r3, r1
 8020de0:	4610      	mov	r0, r2
 8020de2:	4619      	mov	r1, r3
 8020de4:	f7df fef0 	bl	8000bc8 <__aeabi_d2uiz>
 8020de8:	4603      	mov	r3, r0
 8020dea:	b29b      	uxth	r3, r3
 8020dec:	22b4      	movs	r2, #180	; 0xb4
 8020dee:	4619      	mov	r1, r3
 8020df0:	4620      	mov	r0, r4
 8020df2:	f7f3 fe09 	bl	8014a08 <lv_arc_set_angles>
}
 8020df6:	bf00      	nop
 8020df8:	370c      	adds	r7, #12
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd90      	pop	{r4, r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	00000000 	.word	0x00000000
 8020e04:	40767000 	.word	0x40767000
	...
 8020e14:	404d8000 	.word	0x404d8000
 8020e18:	20006ed8 	.word	0x20006ed8
 8020e1c:	40668000 	.word	0x40668000
 8020e20:	20006e10 	.word	0x20006e10
 8020e24:	4080e000 	.word	0x4080e000

08020e28 <digitalTimePrintTheScreen>:

/* This function using for digital clock print to screen*/
void digitalTimePrintTheScreen(lv_task_t *t){
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b084      	sub	sp, #16
 8020e2c:	af02      	add	r7, sp, #8
 8020e2e:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020e30:	4b3f      	ldr	r3, [pc, #252]	; (8020f30 <digitalTimePrintTheScreen+0x108>)
 8020e32:	781b      	ldrb	r3, [r3, #0]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d073      	beq.n	8020f20 <digitalTimePrintTheScreen+0xf8>
		snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 8020e38:	4b3e      	ldr	r3, [pc, #248]	; (8020f34 <digitalTimePrintTheScreen+0x10c>)
 8020e3a:	781b      	ldrb	r3, [r3, #0]
 8020e3c:	4619      	mov	r1, r3
 8020e3e:	4b3e      	ldr	r3, [pc, #248]	; (8020f38 <digitalTimePrintTheScreen+0x110>)
 8020e40:	781b      	ldrb	r3, [r3, #0]
 8020e42:	461a      	mov	r2, r3
 8020e44:	4b3d      	ldr	r3, [pc, #244]	; (8020f3c <digitalTimePrintTheScreen+0x114>)
 8020e46:	781b      	ldrb	r3, [r3, #0]
 8020e48:	9301      	str	r3, [sp, #4]
 8020e4a:	9200      	str	r2, [sp, #0]
 8020e4c:	460b      	mov	r3, r1
 8020e4e:	4a3c      	ldr	r2, [pc, #240]	; (8020f40 <digitalTimePrintTheScreen+0x118>)
 8020e50:	2109      	movs	r1, #9
 8020e52:	483c      	ldr	r0, [pc, #240]	; (8020f44 <digitalTimePrintTheScreen+0x11c>)
 8020e54:	f006 fecc 	bl	8027bf0 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 8020e58:	4b3b      	ldr	r3, [pc, #236]	; (8020f48 <digitalTimePrintTheScreen+0x120>)
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	4939      	ldr	r1, [pc, #228]	; (8020f44 <digitalTimePrintTheScreen+0x11c>)
 8020e5e:	4618      	mov	r0, r3
 8020e60:	f7f8 fc8a 	bl	8019778 <lv_label_set_text>
			lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8020e64:	4b38      	ldr	r3, [pc, #224]	; (8020f48 <digitalTimePrintTheScreen+0x120>)
 8020e66:	6818      	ldr	r0, [r3, #0]
 8020e68:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8020e6c:	9300      	str	r3, [sp, #0]
 8020e6e:	2300      	movs	r3, #0
 8020e70:	2200      	movs	r2, #0
 8020e72:	2100      	movs	r1, #0
 8020e74:	f7e5 fa36 	bl	80062e4 <lv_obj_align>
			        //Digital Date
			    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8020e78:	4b34      	ldr	r3, [pc, #208]	; (8020f4c <digitalTimePrintTheScreen+0x124>)
 8020e7a:	781b      	ldrb	r3, [r3, #0]
 8020e7c:	4619      	mov	r1, r3
 8020e7e:	4b34      	ldr	r3, [pc, #208]	; (8020f50 <digitalTimePrintTheScreen+0x128>)
 8020e80:	781b      	ldrb	r3, [r3, #0]
 8020e82:	461a      	mov	r2, r3
 8020e84:	4b33      	ldr	r3, [pc, #204]	; (8020f54 <digitalTimePrintTheScreen+0x12c>)
 8020e86:	881b      	ldrh	r3, [r3, #0]
 8020e88:	9301      	str	r3, [sp, #4]
 8020e8a:	9200      	str	r2, [sp, #0]
 8020e8c:	460b      	mov	r3, r1
 8020e8e:	4a32      	ldr	r2, [pc, #200]	; (8020f58 <digitalTimePrintTheScreen+0x130>)
 8020e90:	2110      	movs	r1, #16
 8020e92:	482c      	ldr	r0, [pc, #176]	; (8020f44 <digitalTimePrintTheScreen+0x11c>)
 8020e94:	f006 feac 	bl	8027bf0 <sniprintf>
					lv_label_set_text(digitalDate, buffer);
 8020e98:	4b30      	ldr	r3, [pc, #192]	; (8020f5c <digitalTimePrintTheScreen+0x134>)
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	4929      	ldr	r1, [pc, #164]	; (8020f44 <digitalTimePrintTheScreen+0x11c>)
 8020e9e:	4618      	mov	r0, r3
 8020ea0:	f7f8 fc6a 	bl	8019778 <lv_label_set_text>
			    	//Week Day
			    	lv_label_set_text(weekDay, weekDayStr);
 8020ea4:	4b2e      	ldr	r3, [pc, #184]	; (8020f60 <digitalTimePrintTheScreen+0x138>)
 8020ea6:	681a      	ldr	r2, [r3, #0]
 8020ea8:	4b2e      	ldr	r3, [pc, #184]	; (8020f64 <digitalTimePrintTheScreen+0x13c>)
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	4619      	mov	r1, r3
 8020eae:	4610      	mov	r0, r2
 8020eb0:	f7f8 fc62 	bl	8019778 <lv_label_set_text>
			    	dateTmp=date;
 8020eb4:	4b25      	ldr	r3, [pc, #148]	; (8020f4c <digitalTimePrintTheScreen+0x124>)
 8020eb6:	781a      	ldrb	r2, [r3, #0]
 8020eb8:	4b2b      	ldr	r3, [pc, #172]	; (8020f68 <digitalTimePrintTheScreen+0x140>)
 8020eba:	701a      	strb	r2, [r3, #0]

					switch(MainScreenType){
 8020ebc:	4b2b      	ldr	r3, [pc, #172]	; (8020f6c <digitalTimePrintTheScreen+0x144>)
 8020ebe:	781b      	ldrb	r3, [r3, #0]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d002      	beq.n	8020eca <digitalTimePrintTheScreen+0xa2>
 8020ec4:	2b01      	cmp	r3, #1
 8020ec6:	d015      	beq.n	8020ef4 <digitalTimePrintTheScreen+0xcc>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
					break;
					}
	}else lv_task_del(t);
}
 8020ec8:	e02e      	b.n	8020f28 <digitalTimePrintTheScreen+0x100>
					case 0: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 8020eca:	4b24      	ldr	r3, [pc, #144]	; (8020f5c <digitalTimePrintTheScreen+0x134>)
 8020ecc:	6818      	ldr	r0, [r3, #0]
 8020ece:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8020ed2:	9300      	str	r3, [sp, #0]
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	2200      	movs	r2, #0
 8020ed8:	2100      	movs	r1, #0
 8020eda:	f7e5 fa03 	bl	80062e4 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8020ede:	4b20      	ldr	r3, [pc, #128]	; (8020f60 <digitalTimePrintTheScreen+0x138>)
 8020ee0:	6818      	ldr	r0, [r3, #0]
 8020ee2:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020ee6:	9300      	str	r3, [sp, #0]
 8020ee8:	2300      	movs	r3, #0
 8020eea:	2200      	movs	r2, #0
 8020eec:	2100      	movs	r1, #0
 8020eee:	f7e5 f9f9 	bl	80062e4 <lv_obj_align>
					break;
 8020ef2:	e019      	b.n	8020f28 <digitalTimePrintTheScreen+0x100>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8020ef4:	4b19      	ldr	r3, [pc, #100]	; (8020f5c <digitalTimePrintTheScreen+0x134>)
 8020ef6:	6818      	ldr	r0, [r3, #0]
 8020ef8:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020efc:	9300      	str	r3, [sp, #0]
 8020efe:	2300      	movs	r3, #0
 8020f00:	2200      	movs	r2, #0
 8020f02:	2100      	movs	r1, #0
 8020f04:	f7e5 f9ee 	bl	80062e4 <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020f08:	4b15      	ldr	r3, [pc, #84]	; (8020f60 <digitalTimePrintTheScreen+0x138>)
 8020f0a:	6818      	ldr	r0, [r3, #0]
 8020f0c:	f06f 0309 	mvn.w	r3, #9
 8020f10:	9300      	str	r3, [sp, #0]
 8020f12:	2300      	movs	r3, #0
 8020f14:	2200      	movs	r2, #0
 8020f16:	2100      	movs	r1, #0
 8020f18:	f7e5 f9e4 	bl	80062e4 <lv_obj_align>
					break;
 8020f1c:	bf00      	nop
 8020f1e:	e003      	b.n	8020f28 <digitalTimePrintTheScreen+0x100>
	}else lv_task_del(t);
 8020f20:	6878      	ldr	r0, [r7, #4]
 8020f22:	f7f2 ffbd 	bl	8013ea0 <lv_task_del>
}
 8020f26:	e7ff      	b.n	8020f28 <digitalTimePrintTheScreen+0x100>
 8020f28:	bf00      	nop
 8020f2a:	3708      	adds	r7, #8
 8020f2c:	46bd      	mov	sp, r7
 8020f2e:	bd80      	pop	{r7, pc}
 8020f30:	20006e85 	.word	0x20006e85
 8020f34:	20006ee9 	.word	0x20006ee9
 8020f38:	20006ee8 	.word	0x20006ee8
 8020f3c:	20006ed8 	.word	0x20006ed8
 8020f40:	08029d94 	.word	0x08029d94
 8020f44:	20006e74 	.word	0x20006e74
 8020f48:	20006e14 	.word	0x20006e14
 8020f4c:	200073b4 	.word	0x200073b4
 8020f50:	20006e18 	.word	0x20006e18
 8020f54:	20006eda 	.word	0x20006eda
 8020f58:	08029d74 	.word	0x08029d74
 8020f5c:	20006e0c 	.word	0x20006e0c
 8020f60:	20006e04 	.word	0x20006e04
 8020f64:	20006e68 	.word	0x20006e68
 8020f68:	20006e00 	.word	0x20006e00
 8020f6c:	20006e08 	.word	0x20006e08

08020f70 <analogueDataPrintTheScreen>:
/*This function using for date and week day print to screen on analogue clock*/
void analogueDataPrintTheScreen(lv_task_t *t){
 8020f70:	b580      	push	{r7, lr}
 8020f72:	b084      	sub	sp, #16
 8020f74:	af02      	add	r7, sp, #8
 8020f76:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020f78:	4b20      	ldr	r3, [pc, #128]	; (8020ffc <analogueDataPrintTheScreen+0x8c>)
 8020f7a:	781b      	ldrb	r3, [r3, #0]
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d036      	beq.n	8020fee <analogueDataPrintTheScreen+0x7e>
		 //Digital Date
			snprintf(buffer, 16, " "); //For cleaning buff
 8020f80:	4a1f      	ldr	r2, [pc, #124]	; (8021000 <analogueDataPrintTheScreen+0x90>)
 8020f82:	4b20      	ldr	r3, [pc, #128]	; (8021004 <analogueDataPrintTheScreen+0x94>)
 8020f84:	881b      	ldrh	r3, [r3, #0]
 8020f86:	8013      	strh	r3, [r2, #0]
		    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8020f88:	4b1f      	ldr	r3, [pc, #124]	; (8021008 <analogueDataPrintTheScreen+0x98>)
 8020f8a:	781b      	ldrb	r3, [r3, #0]
 8020f8c:	4619      	mov	r1, r3
 8020f8e:	4b1f      	ldr	r3, [pc, #124]	; (802100c <analogueDataPrintTheScreen+0x9c>)
 8020f90:	781b      	ldrb	r3, [r3, #0]
 8020f92:	461a      	mov	r2, r3
 8020f94:	4b1e      	ldr	r3, [pc, #120]	; (8021010 <analogueDataPrintTheScreen+0xa0>)
 8020f96:	881b      	ldrh	r3, [r3, #0]
 8020f98:	9301      	str	r3, [sp, #4]
 8020f9a:	9200      	str	r2, [sp, #0]
 8020f9c:	460b      	mov	r3, r1
 8020f9e:	4a1d      	ldr	r2, [pc, #116]	; (8021014 <analogueDataPrintTheScreen+0xa4>)
 8020fa0:	2110      	movs	r1, #16
 8020fa2:	4817      	ldr	r0, [pc, #92]	; (8021000 <analogueDataPrintTheScreen+0x90>)
 8020fa4:	f006 fe24 	bl	8027bf0 <sniprintf>
				lv_label_set_text(digitalDate, buffer);
 8020fa8:	4b1b      	ldr	r3, [pc, #108]	; (8021018 <analogueDataPrintTheScreen+0xa8>)
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	4914      	ldr	r1, [pc, #80]	; (8021000 <analogueDataPrintTheScreen+0x90>)
 8020fae:	4618      	mov	r0, r3
 8020fb0:	f7f8 fbe2 	bl	8019778 <lv_label_set_text>
		    	//Week Day
		    	lv_label_set_text(weekDay, weekDayStr);
 8020fb4:	4b19      	ldr	r3, [pc, #100]	; (802101c <analogueDataPrintTheScreen+0xac>)
 8020fb6:	681a      	ldr	r2, [r3, #0]
 8020fb8:	4b19      	ldr	r3, [pc, #100]	; (8021020 <analogueDataPrintTheScreen+0xb0>)
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	4619      	mov	r1, r3
 8020fbe:	4610      	mov	r0, r2
 8020fc0:	f7f8 fbda 	bl	8019778 <lv_label_set_text>
		    	lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8020fc4:	4b14      	ldr	r3, [pc, #80]	; (8021018 <analogueDataPrintTheScreen+0xa8>)
 8020fc6:	6818      	ldr	r0, [r3, #0]
 8020fc8:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020fcc:	9300      	str	r3, [sp, #0]
 8020fce:	2300      	movs	r3, #0
 8020fd0:	2200      	movs	r2, #0
 8020fd2:	2100      	movs	r1, #0
 8020fd4:	f7e5 f986 	bl	80062e4 <lv_obj_align>
		    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020fd8:	4b10      	ldr	r3, [pc, #64]	; (802101c <analogueDataPrintTheScreen+0xac>)
 8020fda:	6818      	ldr	r0, [r3, #0]
 8020fdc:	f06f 0309 	mvn.w	r3, #9
 8020fe0:	9300      	str	r3, [sp, #0]
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	2100      	movs	r1, #0
 8020fe8:	f7e5 f97c 	bl	80062e4 <lv_obj_align>
	}else lv_task_del(t);
}
 8020fec:	e002      	b.n	8020ff4 <analogueDataPrintTheScreen+0x84>
	}else lv_task_del(t);
 8020fee:	6878      	ldr	r0, [r7, #4]
 8020ff0:	f7f2 ff56 	bl	8013ea0 <lv_task_del>
}
 8020ff4:	bf00      	nop
 8020ff6:	3708      	adds	r7, #8
 8020ff8:	46bd      	mov	sp, r7
 8020ffa:	bd80      	pop	{r7, pc}
 8020ffc:	20006e85 	.word	0x20006e85
 8021000:	20006e74 	.word	0x20006e74
 8021004:	08029da4 	.word	0x08029da4
 8021008:	200073b4 	.word	0x200073b4
 802100c:	20006e18 	.word	0x20006e18
 8021010:	20006eda 	.word	0x20006eda
 8021014:	08029d74 	.word	0x08029d74
 8021018:	20006e0c 	.word	0x20006e0c
 802101c:	20006e04 	.word	0x20006e04
 8021020:	20006e68 	.word	0x20006e68
 8021024:	00000000 	.word	0x00000000

08021028 <steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void steps_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8021028:	b590      	push	{r4, r7, lr}
 802102a:	b087      	sub	sp, #28
 802102c:	af02      	add	r7, sp, #8
 802102e:	6078      	str	r0, [r7, #4]
 8021030:	4b45      	ldr	r3, [pc, #276]	; (8021148 <steps_angle_loader+0x120>)
 8021032:	781b      	ldrb	r3, [r3, #0]
 8021034:	2b00      	cmp	r3, #0
 8021036:	d072      	beq.n	802111e <steps_angle_loader+0xf6>
	snprintf(buffer, 8, "%04d", steps);
 8021038:	4b44      	ldr	r3, [pc, #272]	; (802114c <steps_angle_loader+0x124>)
 802103a:	881b      	ldrh	r3, [r3, #0]
 802103c:	4a44      	ldr	r2, [pc, #272]	; (8021150 <steps_angle_loader+0x128>)
 802103e:	2108      	movs	r1, #8
 8021040:	4844      	ldr	r0, [pc, #272]	; (8021154 <steps_angle_loader+0x12c>)
 8021042:	f006 fdd5 	bl	8027bf0 <sniprintf>
		 lv_label_set_text(stepsLbl, buffer);
 8021046:	4b44      	ldr	r3, [pc, #272]	; (8021158 <steps_angle_loader+0x130>)
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	4942      	ldr	r1, [pc, #264]	; (8021154 <steps_angle_loader+0x12c>)
 802104c:	4618      	mov	r0, r3
 802104e:	f7f8 fb93 	bl	8019778 <lv_label_set_text>
		 if(MainScreenType ==tos_mainScreen_Type3)lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 8021052:	4b42      	ldr	r3, [pc, #264]	; (802115c <steps_angle_loader+0x134>)
 8021054:	781b      	ldrb	r3, [r3, #0]
 8021056:	2b02      	cmp	r3, #2
 8021058:	d10a      	bne.n	8021070 <steps_angle_loader+0x48>
 802105a:	4b3f      	ldr	r3, [pc, #252]	; (8021158 <steps_angle_loader+0x130>)
 802105c:	6818      	ldr	r0, [r3, #0]
 802105e:	2328      	movs	r3, #40	; 0x28
 8021060:	9300      	str	r3, [sp, #0]
 8021062:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8021066:	2200      	movs	r2, #0
 8021068:	2100      	movs	r1, #0
 802106a:	f7e5 f93b 	bl	80062e4 <lv_obj_align>
 802106e:	e009      	b.n	8021084 <steps_angle_loader+0x5c>
		 else lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8021070:	4b39      	ldr	r3, [pc, #228]	; (8021158 <steps_angle_loader+0x130>)
 8021072:	6818      	ldr	r0, [r3, #0]
 8021074:	2328      	movs	r3, #40	; 0x28
 8021076:	9300      	str	r3, [sp, #0]
 8021078:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802107c:	2200      	movs	r2, #0
 802107e:	2100      	movs	r1, #0
 8021080:	f7e5 f930 	bl	80062e4 <lv_obj_align>

		double stepsTemp = tos_Ratio(steps, 0, 10000, 0, 359);
 8021084:	4b31      	ldr	r3, [pc, #196]	; (802114c <steps_angle_loader+0x124>)
 8021086:	881b      	ldrh	r3, [r3, #0]
 8021088:	4618      	mov	r0, r3
 802108a:	f7df fa4b 	bl	8000524 <__aeabi_ui2d>
 802108e:	4603      	mov	r3, r0
 8021090:	460c      	mov	r4, r1
 8021092:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8021130 <steps_angle_loader+0x108>
 8021096:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8021138 <steps_angle_loader+0x110>
 802109a:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8021140 <steps_angle_loader+0x118>
 802109e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8021138 <steps_angle_loader+0x110>
 80210a2:	ec44 3b10 	vmov	d0, r3, r4
 80210a6:	f005 fba5 	bl	80267f4 <tos_Ratio>
 80210aa:	ed87 0b02 	vstr	d0, [r7, #8]
		if(stepsTemp < 180) lv_arc_set_angles(stepsArc, 180-stepsTemp ,180);
 80210ae:	f04f 0200 	mov.w	r2, #0
 80210b2:	4b2b      	ldr	r3, [pc, #172]	; (8021160 <steps_angle_loader+0x138>)
 80210b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80210b8:	f7df fd20 	bl	8000afc <__aeabi_dcmplt>
 80210bc:	4603      	mov	r3, r0
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d016      	beq.n	80210f0 <steps_angle_loader+0xc8>
 80210c2:	4b28      	ldr	r3, [pc, #160]	; (8021164 <steps_angle_loader+0x13c>)
 80210c4:	681c      	ldr	r4, [r3, #0]
 80210c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210ca:	f04f 0000 	mov.w	r0, #0
 80210ce:	4924      	ldr	r1, [pc, #144]	; (8021160 <steps_angle_loader+0x138>)
 80210d0:	f7df f8ea 	bl	80002a8 <__aeabi_dsub>
 80210d4:	4602      	mov	r2, r0
 80210d6:	460b      	mov	r3, r1
 80210d8:	4610      	mov	r0, r2
 80210da:	4619      	mov	r1, r3
 80210dc:	f7df fd74 	bl	8000bc8 <__aeabi_d2uiz>
 80210e0:	4603      	mov	r3, r0
 80210e2:	b29b      	uxth	r3, r3
 80210e4:	22b4      	movs	r2, #180	; 0xb4
 80210e6:	4619      	mov	r1, r3
 80210e8:	4620      	mov	r0, r4
 80210ea:	f7f3 fc8d 	bl	8014a08 <lv_arc_set_angles>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
}else lv_task_del(t);
}
 80210ee:	e019      	b.n	8021124 <steps_angle_loader+0xfc>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
 80210f0:	4b1c      	ldr	r3, [pc, #112]	; (8021164 <steps_angle_loader+0x13c>)
 80210f2:	681c      	ldr	r4, [r3, #0]
 80210f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210f8:	f04f 0000 	mov.w	r0, #0
 80210fc:	491a      	ldr	r1, [pc, #104]	; (8021168 <steps_angle_loader+0x140>)
 80210fe:	f7df f8d3 	bl	80002a8 <__aeabi_dsub>
 8021102:	4602      	mov	r2, r0
 8021104:	460b      	mov	r3, r1
 8021106:	4610      	mov	r0, r2
 8021108:	4619      	mov	r1, r3
 802110a:	f7df fd5d 	bl	8000bc8 <__aeabi_d2uiz>
 802110e:	4603      	mov	r3, r0
 8021110:	b29b      	uxth	r3, r3
 8021112:	22b4      	movs	r2, #180	; 0xb4
 8021114:	4619      	mov	r1, r3
 8021116:	4620      	mov	r0, r4
 8021118:	f7f3 fc76 	bl	8014a08 <lv_arc_set_angles>
}
 802111c:	e002      	b.n	8021124 <steps_angle_loader+0xfc>
}else lv_task_del(t);
 802111e:	6878      	ldr	r0, [r7, #4]
 8021120:	f7f2 febe 	bl	8013ea0 <lv_task_del>
}
 8021124:	bf00      	nop
 8021126:	3714      	adds	r7, #20
 8021128:	46bd      	mov	sp, r7
 802112a:	bd90      	pop	{r4, r7, pc}
 802112c:	f3af 8000 	nop.w
 8021130:	00000000 	.word	0x00000000
 8021134:	40767000 	.word	0x40767000
	...
 8021144:	40c38800 	.word	0x40c38800
 8021148:	20006e85 	.word	0x20006e85
 802114c:	20006e64 	.word	0x20006e64
 8021150:	08029d5c 	.word	0x08029d5c
 8021154:	20006e74 	.word	0x20006e74
 8021158:	20006e88 	.word	0x20006e88
 802115c:	20006e08 	.word	0x20006e08
 8021160:	40668000 	.word	0x40668000
 8021164:	20006e6c 	.word	0x20006e6c
 8021168:	4080e000 	.word	0x4080e000
 802116c:	00000000 	.word	0x00000000

08021170 <kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCals
*/
void kCals_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8021170:	b590      	push	{r4, r7, lr}
 8021172:	b087      	sub	sp, #28
 8021174:	af02      	add	r7, sp, #8
 8021176:	6078      	str	r0, [r7, #4]
 8021178:	4b43      	ldr	r3, [pc, #268]	; (8021288 <kCals_angle_loader+0x118>)
 802117a:	781b      	ldrb	r3, [r3, #0]
 802117c:	2b00      	cmp	r3, #0
 802117e:	d070      	beq.n	8021262 <kCals_angle_loader+0xf2>
	 	 	 snprintf(buffer, 8, "%04d", kCals);
 8021180:	4b42      	ldr	r3, [pc, #264]	; (802128c <kCals_angle_loader+0x11c>)
 8021182:	881b      	ldrh	r3, [r3, #0]
 8021184:	4a42      	ldr	r2, [pc, #264]	; (8021290 <kCals_angle_loader+0x120>)
 8021186:	2108      	movs	r1, #8
 8021188:	4842      	ldr	r0, [pc, #264]	; (8021294 <kCals_angle_loader+0x124>)
 802118a:	f006 fd31 	bl	8027bf0 <sniprintf>
			 lv_label_set_text(kCalsLbl, buffer);
 802118e:	4b42      	ldr	r3, [pc, #264]	; (8021298 <kCals_angle_loader+0x128>)
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	4940      	ldr	r1, [pc, #256]	; (8021294 <kCals_angle_loader+0x124>)
 8021194:	4618      	mov	r0, r3
 8021196:	f7f8 faef 	bl	8019778 <lv_label_set_text>
			 if(MainScreenType ==tos_mainScreen_Type3) lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 802119a:	4b40      	ldr	r3, [pc, #256]	; (802129c <kCals_angle_loader+0x12c>)
 802119c:	781b      	ldrb	r3, [r3, #0]
 802119e:	2b02      	cmp	r3, #2
 80211a0:	d109      	bne.n	80211b6 <kCals_angle_loader+0x46>
 80211a2:	4b3d      	ldr	r3, [pc, #244]	; (8021298 <kCals_angle_loader+0x128>)
 80211a4:	6818      	ldr	r0, [r3, #0]
 80211a6:	2328      	movs	r3, #40	; 0x28
 80211a8:	9300      	str	r3, [sp, #0]
 80211aa:	2328      	movs	r3, #40	; 0x28
 80211ac:	2200      	movs	r2, #0
 80211ae:	2100      	movs	r1, #0
 80211b0:	f7e5 f898 	bl	80062e4 <lv_obj_align>
 80211b4:	e008      	b.n	80211c8 <kCals_angle_loader+0x58>
			 else lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 80211b6:	4b38      	ldr	r3, [pc, #224]	; (8021298 <kCals_angle_loader+0x128>)
 80211b8:	6818      	ldr	r0, [r3, #0]
 80211ba:	2328      	movs	r3, #40	; 0x28
 80211bc:	9300      	str	r3, [sp, #0]
 80211be:	233c      	movs	r3, #60	; 0x3c
 80211c0:	2200      	movs	r2, #0
 80211c2:	2100      	movs	r1, #0
 80211c4:	f7e5 f88e 	bl	80062e4 <lv_obj_align>

		double kCalsTemp = tos_Ratio(kCals, 0, 10000, 0, 359);
 80211c8:	4b30      	ldr	r3, [pc, #192]	; (802128c <kCals_angle_loader+0x11c>)
 80211ca:	881b      	ldrh	r3, [r3, #0]
 80211cc:	4618      	mov	r0, r3
 80211ce:	f7df f9a9 	bl	8000524 <__aeabi_ui2d>
 80211d2:	4603      	mov	r3, r0
 80211d4:	460c      	mov	r4, r1
 80211d6:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8021270 <kCals_angle_loader+0x100>
 80211da:	ed9f 3b27 	vldr	d3, [pc, #156]	; 8021278 <kCals_angle_loader+0x108>
 80211de:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8021280 <kCals_angle_loader+0x110>
 80211e2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8021278 <kCals_angle_loader+0x108>
 80211e6:	ec44 3b10 	vmov	d0, r3, r4
 80211ea:	f005 fb03 	bl	80267f4 <tos_Ratio>
 80211ee:	ed87 0b02 	vstr	d0, [r7, #8]
		if(kCalsTemp < 180) lv_arc_set_angles(kCalsArc, 180-kCalsTemp ,180);
 80211f2:	f04f 0200 	mov.w	r2, #0
 80211f6:	4b2a      	ldr	r3, [pc, #168]	; (80212a0 <kCals_angle_loader+0x130>)
 80211f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80211fc:	f7df fc7e 	bl	8000afc <__aeabi_dcmplt>
 8021200:	4603      	mov	r3, r0
 8021202:	2b00      	cmp	r3, #0
 8021204:	d016      	beq.n	8021234 <kCals_angle_loader+0xc4>
 8021206:	4b27      	ldr	r3, [pc, #156]	; (80212a4 <kCals_angle_loader+0x134>)
 8021208:	681c      	ldr	r4, [r3, #0]
 802120a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802120e:	f04f 0000 	mov.w	r0, #0
 8021212:	4923      	ldr	r1, [pc, #140]	; (80212a0 <kCals_angle_loader+0x130>)
 8021214:	f7df f848 	bl	80002a8 <__aeabi_dsub>
 8021218:	4602      	mov	r2, r0
 802121a:	460b      	mov	r3, r1
 802121c:	4610      	mov	r0, r2
 802121e:	4619      	mov	r1, r3
 8021220:	f7df fcd2 	bl	8000bc8 <__aeabi_d2uiz>
 8021224:	4603      	mov	r3, r0
 8021226:	b29b      	uxth	r3, r3
 8021228:	22b4      	movs	r2, #180	; 0xb4
 802122a:	4619      	mov	r1, r3
 802122c:	4620      	mov	r0, r4
 802122e:	f7f3 fbeb 	bl	8014a08 <lv_arc_set_angles>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
}else lv_task_del(t);
}
 8021232:	e019      	b.n	8021268 <kCals_angle_loader+0xf8>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
 8021234:	4b1b      	ldr	r3, [pc, #108]	; (80212a4 <kCals_angle_loader+0x134>)
 8021236:	681c      	ldr	r4, [r3, #0]
 8021238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802123c:	f04f 0000 	mov.w	r0, #0
 8021240:	4919      	ldr	r1, [pc, #100]	; (80212a8 <kCals_angle_loader+0x138>)
 8021242:	f7df f831 	bl	80002a8 <__aeabi_dsub>
 8021246:	4602      	mov	r2, r0
 8021248:	460b      	mov	r3, r1
 802124a:	4610      	mov	r0, r2
 802124c:	4619      	mov	r1, r3
 802124e:	f7df fcbb 	bl	8000bc8 <__aeabi_d2uiz>
 8021252:	4603      	mov	r3, r0
 8021254:	b29b      	uxth	r3, r3
 8021256:	22b4      	movs	r2, #180	; 0xb4
 8021258:	4619      	mov	r1, r3
 802125a:	4620      	mov	r0, r4
 802125c:	f7f3 fbd4 	bl	8014a08 <lv_arc_set_angles>
}
 8021260:	e002      	b.n	8021268 <kCals_angle_loader+0xf8>
}else lv_task_del(t);
 8021262:	6878      	ldr	r0, [r7, #4]
 8021264:	f7f2 fe1c 	bl	8013ea0 <lv_task_del>
}
 8021268:	bf00      	nop
 802126a:	3714      	adds	r7, #20
 802126c:	46bd      	mov	sp, r7
 802126e:	bd90      	pop	{r4, r7, pc}
 8021270:	00000000 	.word	0x00000000
 8021274:	40767000 	.word	0x40767000
	...
 8021284:	40c38800 	.word	0x40c38800
 8021288:	20006e85 	.word	0x20006e85
 802128c:	20006e0a 	.word	0x20006e0a
 8021290:	08029d5c 	.word	0x08029d5c
 8021294:	20006e74 	.word	0x20006e74
 8021298:	20006ee4 	.word	0x20006ee4
 802129c:	20006e08 	.word	0x20006e08
 80212a0:	40668000 	.word	0x40668000
 80212a4:	20006eec 	.word	0x20006eec
 80212a8:	4080e000 	.word	0x4080e000

080212ac <MainScreen_SetTime>:
//Getter and setter functions
void MainScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 80212ac:	b480      	push	{r7}
 80212ae:	b083      	sub	sp, #12
 80212b0:	af00      	add	r7, sp, #0
 80212b2:	4603      	mov	r3, r0
 80212b4:	71fb      	strb	r3, [r7, #7]
 80212b6:	460b      	mov	r3, r1
 80212b8:	71bb      	strb	r3, [r7, #6]
 80212ba:	4613      	mov	r3, r2
 80212bc:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 80212be:	4a07      	ldr	r2, [pc, #28]	; (80212dc <MainScreen_SetTime+0x30>)
 80212c0:	79fb      	ldrb	r3, [r7, #7]
 80212c2:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 80212c4:	4a06      	ldr	r2, [pc, #24]	; (80212e0 <MainScreen_SetTime+0x34>)
 80212c6:	79bb      	ldrb	r3, [r7, #6]
 80212c8:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 80212ca:	4a06      	ldr	r2, [pc, #24]	; (80212e4 <MainScreen_SetTime+0x38>)
 80212cc:	797b      	ldrb	r3, [r7, #5]
 80212ce:	7013      	strb	r3, [r2, #0]
}
 80212d0:	bf00      	nop
 80212d2:	370c      	adds	r7, #12
 80212d4:	46bd      	mov	sp, r7
 80212d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212da:	4770      	bx	lr
 80212dc:	20006ee9 	.word	0x20006ee9
 80212e0:	20006ee8 	.word	0x20006ee8
 80212e4:	20006ed8 	.word	0x20006ed8

080212e8 <MainScreen_SetDate>:
void MainScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 80212e8:	b480      	push	{r7}
 80212ea:	b083      	sub	sp, #12
 80212ec:	af00      	add	r7, sp, #0
 80212ee:	603b      	str	r3, [r7, #0]
 80212f0:	4603      	mov	r3, r0
 80212f2:	71fb      	strb	r3, [r7, #7]
 80212f4:	460b      	mov	r3, r1
 80212f6:	71bb      	strb	r3, [r7, #6]
 80212f8:	4613      	mov	r3, r2
 80212fa:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 80212fc:	79fb      	ldrb	r3, [r7, #7]
 80212fe:	b29b      	uxth	r3, r3
 8021300:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8021304:	b29a      	uxth	r2, r3
 8021306:	4b08      	ldr	r3, [pc, #32]	; (8021328 <MainScreen_SetDate+0x40>)
 8021308:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 802130a:	4a08      	ldr	r2, [pc, #32]	; (802132c <MainScreen_SetDate+0x44>)
 802130c:	79bb      	ldrb	r3, [r7, #6]
 802130e:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8021310:	4a07      	ldr	r2, [pc, #28]	; (8021330 <MainScreen_SetDate+0x48>)
 8021312:	797b      	ldrb	r3, [r7, #5]
 8021314:	7013      	strb	r3, [r2, #0]
	weekDayStr =getWeekDay;
 8021316:	4a07      	ldr	r2, [pc, #28]	; (8021334 <MainScreen_SetDate+0x4c>)
 8021318:	683b      	ldr	r3, [r7, #0]
 802131a:	6013      	str	r3, [r2, #0]

}
 802131c:	bf00      	nop
 802131e:	370c      	adds	r7, #12
 8021320:	46bd      	mov	sp, r7
 8021322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021326:	4770      	bx	lr
 8021328:	20006eda 	.word	0x20006eda
 802132c:	20006e18 	.word	0x20006e18
 8021330:	200073b4 	.word	0x200073b4
 8021334:	20006e68 	.word	0x20006e68

08021338 <MainScreen_SetBatteryVal>:
void MainScreen_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	steps =getSteps;
	kCals =getKcals;
}
void MainScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8021338:	b480      	push	{r7}
 802133a:	b083      	sub	sp, #12
 802133c:	af00      	add	r7, sp, #0
 802133e:	6078      	str	r0, [r7, #4]
 8021340:	8039      	strh	r1, [r7, #0]
	batteryVal =getBatteryVal;
 8021342:	4a06      	ldr	r2, [pc, #24]	; (802135c <MainScreen_SetBatteryVal+0x24>)
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	6013      	str	r3, [r2, #0]
	batteryColor =getBatteryColor;
 8021348:	4a05      	ldr	r2, [pc, #20]	; (8021360 <MainScreen_SetBatteryVal+0x28>)
 802134a:	883b      	ldrh	r3, [r7, #0]
 802134c:	8013      	strh	r3, [r2, #0]
}
 802134e:	bf00      	nop
 8021350:	370c      	adds	r7, #12
 8021352:	46bd      	mov	sp, r7
 8021354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021358:	4770      	bx	lr
 802135a:	bf00      	nop
 802135c:	20006ee0 	.word	0x20006ee0
 8021360:	20006edc 	.word	0x20006edc

08021364 <MainScreen_SetBluetoothStatusVal>:
void MainScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 8021364:	b480      	push	{r7}
 8021366:	b083      	sub	sp, #12
 8021368:	af00      	add	r7, sp, #0
 802136a:	4603      	mov	r3, r0
 802136c:	80b9      	strh	r1, [r7, #4]
 802136e:	71fb      	strb	r3, [r7, #7]
	bluetoothStatus =getBluetoothStatus;
 8021370:	4a05      	ldr	r2, [pc, #20]	; (8021388 <MainScreen_SetBluetoothStatusVal+0x24>)
 8021372:	79fb      	ldrb	r3, [r7, #7]
 8021374:	7013      	strb	r3, [r2, #0]
	bluetoothColor =getBluetoothColor;
 8021376:	4a05      	ldr	r2, [pc, #20]	; (802138c <MainScreen_SetBluetoothStatusVal+0x28>)
 8021378:	88bb      	ldrh	r3, [r7, #4]
 802137a:	8013      	strh	r3, [r2, #0]
}
 802137c:	bf00      	nop
 802137e:	370c      	adds	r7, #12
 8021380:	46bd      	mov	sp, r7
 8021382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021386:	4770      	bx	lr
 8021388:	20006e84 	.word	0x20006e84
 802138c:	20006ec8 	.word	0x20006ec8

08021390 <MainScreen_TaskControllerSet>:
void MainScreen_TaskControllerSet(bool active){
 8021390:	b480      	push	{r7}
 8021392:	b083      	sub	sp, #12
 8021394:	af00      	add	r7, sp, #0
 8021396:	4603      	mov	r3, r0
 8021398:	71fb      	strb	r3, [r7, #7]
	MS_taskController = active;
 802139a:	4a04      	ldr	r2, [pc, #16]	; (80213ac <MainScreen_TaskControllerSet+0x1c>)
 802139c:	79fb      	ldrb	r3, [r7, #7]
 802139e:	7013      	strb	r3, [r2, #0]
}
 80213a0:	bf00      	nop
 80213a2:	370c      	adds	r7, #12
 80213a4:	46bd      	mov	sp, r7
 80213a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213aa:	4770      	bx	lr
 80213ac:	20006e85 	.word	0x20006e85

080213b0 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80213b0:	b480      	push	{r7}
 80213b2:	b085      	sub	sp, #20
 80213b4:	af00      	add	r7, sp, #0
 80213b6:	4603      	mov	r3, r0
 80213b8:	71fb      	strb	r3, [r7, #7]
 80213ba:	460b      	mov	r3, r1
 80213bc:	71bb      	strb	r3, [r7, #6]
 80213be:	4613      	mov	r3, r2
 80213c0:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80213c2:	79bb      	ldrb	r3, [r7, #6]
 80213c4:	095b      	lsrs	r3, r3, #5
 80213c6:	b2db      	uxtb	r3, r3
 80213c8:	f003 0307 	and.w	r3, r3, #7
 80213cc:	b2da      	uxtb	r2, r3
 80213ce:	7b3b      	ldrb	r3, [r7, #12]
 80213d0:	f362 0302 	bfi	r3, r2, #0, #3
 80213d4:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80213d6:	79fb      	ldrb	r3, [r7, #7]
 80213d8:	08db      	lsrs	r3, r3, #3
 80213da:	b2db      	uxtb	r3, r3
 80213dc:	f003 031f 	and.w	r3, r3, #31
 80213e0:	b2da      	uxtb	r2, r3
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	f362 03c7 	bfi	r3, r2, #3, #5
 80213e8:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80213ea:	797b      	ldrb	r3, [r7, #5]
 80213ec:	08db      	lsrs	r3, r3, #3
 80213ee:	b2db      	uxtb	r3, r3
 80213f0:	f003 031f 	and.w	r3, r3, #31
 80213f4:	b2da      	uxtb	r2, r3
 80213f6:	7b7b      	ldrb	r3, [r7, #13]
 80213f8:	f362 0304 	bfi	r3, r2, #0, #5
 80213fc:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80213fe:	79bb      	ldrb	r3, [r7, #6]
 8021400:	089b      	lsrs	r3, r3, #2
 8021402:	b2db      	uxtb	r3, r3
 8021404:	f003 0307 	and.w	r3, r3, #7
 8021408:	b2da      	uxtb	r2, r3
 802140a:	7b7b      	ldrb	r3, [r7, #13]
 802140c:	f362 1347 	bfi	r3, r2, #5, #3
 8021410:	737b      	strb	r3, [r7, #13]
    return color;
 8021412:	89bb      	ldrh	r3, [r7, #12]
}
 8021414:	4618      	mov	r0, r3
 8021416:	3714      	adds	r7, #20
 8021418:	46bd      	mov	sp, r7
 802141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802141e:	4770      	bx	lr

08021420 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8021420:	b580      	push	{r7, lr}
 8021422:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8021424:	f7f1 f8c0 	bl	80125a8 <lv_disp_get_default>
 8021428:	4603      	mov	r3, r0
 802142a:	4618      	mov	r0, r3
 802142c:	f7e3 fd88 	bl	8004f40 <lv_disp_get_scr_act>
 8021430:	4603      	mov	r3, r0
}
 8021432:	4618      	mov	r0, r3
 8021434:	bd80      	pop	{r7, pc}

08021436 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8021436:	b580      	push	{r7, lr}
 8021438:	b084      	sub	sp, #16
 802143a:	af00      	add	r7, sp, #0
 802143c:	60f8      	str	r0, [r7, #12]
 802143e:	460b      	mov	r3, r1
 8021440:	607a      	str	r2, [r7, #4]
 8021442:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8021444:	6879      	ldr	r1, [r7, #4]
 8021446:	68f8      	ldr	r0, [r7, #12]
 8021448:	f7e5 fbf1 	bl	8006c2e <lv_obj_set_style>
}
 802144c:	bf00      	nop
 802144e:	3710      	adds	r7, #16
 8021450:	46bd      	mov	sp, r7
 8021452:	bd80      	pop	{r7, pc}

08021454 <tos_MenuScreen_Init>:
void MenuScreen_MenuItem(char * itemTitle,const void * itemImg);
void MenuScreen_ItemController(uint8_t item);
void MenuScreen_OpenMenu(uint8_t item);
static uint8_t item=0,befItem=255;

void tos_MenuScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 8021454:	b590      	push	{r4, r7, lr}
 8021456:	b083      	sub	sp, #12
 8021458:	af00      	add	r7, sp, #0
 802145a:	4603      	mov	r3, r0
 802145c:	6039      	str	r1, [r7, #0]
 802145e:	71fb      	strb	r3, [r7, #7]
		lv_style_copy(&style_screen, &lv_style_plain);
 8021460:	491a      	ldr	r1, [pc, #104]	; (80214cc <tos_MenuScreen_Init+0x78>)
 8021462:	481b      	ldr	r0, [pc, #108]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 8021464:	f7e7 f982 	bl	800876c <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_WHITE;
 8021468:	4a19      	ldr	r2, [pc, #100]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 802146a:	4b1a      	ldr	r3, [pc, #104]	; (80214d4 <tos_MenuScreen_Init+0x80>)
 802146c:	881b      	ldrh	r3, [r3, #0]
 802146e:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8021470:	4a17      	ldr	r2, [pc, #92]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 8021472:	4b18      	ldr	r3, [pc, #96]	; (80214d4 <tos_MenuScreen_Init+0x80>)
 8021474:	881b      	ldrh	r3, [r3, #0]
 8021476:	8093      	strh	r3, [r2, #4]
		if(theme){
 8021478:	79fb      	ldrb	r3, [r7, #7]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d005      	beq.n	802148a <tos_MenuScreen_Init+0x36>
			style_screen.body.main_color = LV_COLOR_BLACK;
 802147e:	4b14      	ldr	r3, [pc, #80]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 8021480:	2200      	movs	r2, #0
 8021482:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 8021484:	4b12      	ldr	r3, [pc, #72]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 8021486:	2200      	movs	r2, #0
 8021488:	809a      	strh	r2, [r3, #4]
		}
		style_screen.text.color = lv_color_make(68,133,247);
 802148a:	4c11      	ldr	r4, [pc, #68]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 802148c:	22f7      	movs	r2, #247	; 0xf7
 802148e:	2185      	movs	r1, #133	; 0x85
 8021490:	2044      	movs	r0, #68	; 0x44
 8021492:	f7ff ff8d 	bl	80213b0 <lv_color_make>
 8021496:	8420      	strh	r0, [r4, #32]
		style_screen.text.font = &lv_font_roboto_28;
 8021498:	4b0d      	ldr	r3, [pc, #52]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 802149a:	4a0f      	ldr	r2, [pc, #60]	; (80214d8 <tos_MenuScreen_Init+0x84>)
 802149c:	625a      	str	r2, [r3, #36]	; 0x24
		lv_obj_set_style(lv_scr_act(), &style_screen);
 802149e:	f7ff ffbf 	bl	8021420 <lv_scr_act>
 80214a2:	4603      	mov	r3, r0
 80214a4:	490a      	ldr	r1, [pc, #40]	; (80214d0 <tos_MenuScreen_Init+0x7c>)
 80214a6:	4618      	mov	r0, r3
 80214a8:	f7e5 fbc1 	bl	8006c2e <lv_obj_set_style>
		MenuIsOpen=true;
 80214ac:	4b0b      	ldr	r3, [pc, #44]	; (80214dc <tos_MenuScreen_Init+0x88>)
 80214ae:	2201      	movs	r2, #1
 80214b0:	701a      	strb	r2, [r3, #0]
		MenuS_TaskController=true;
 80214b2:	4b0b      	ldr	r3, [pc, #44]	; (80214e0 <tos_MenuScreen_Init+0x8c>)
 80214b4:	2201      	movs	r2, #1
 80214b6:	701a      	strb	r2, [r3, #0]
		Menutheme=theme;
 80214b8:	4a0a      	ldr	r2, [pc, #40]	; (80214e4 <tos_MenuScreen_Init+0x90>)
 80214ba:	79fb      	ldrb	r3, [r7, #7]
 80214bc:	7013      	strb	r3, [r2, #0]
		M_hrtc=hrtc;
 80214be:	4a0a      	ldr	r2, [pc, #40]	; (80214e8 <tos_MenuScreen_Init+0x94>)
 80214c0:	683b      	ldr	r3, [r7, #0]
 80214c2:	6013      	str	r3, [r2, #0]
}
 80214c4:	bf00      	nop
 80214c6:	370c      	adds	r7, #12
 80214c8:	46bd      	mov	sp, r7
 80214ca:	bd90      	pop	{r4, r7, pc}
 80214cc:	20006c68 	.word	0x20006c68
 80214d0:	20005f24 	.word	0x20005f24
 80214d4:	08029da8 	.word	0x08029da8
 80214d8:	20002394 	.word	0x20002394
 80214dc:	20005f60 	.word	0x20005f60
 80214e0:	20006ef4 	.word	0x20006ef4
 80214e4:	20006ef5 	.word	0x20006ef5
 80214e8:	20006ef0 	.word	0x20006ef0

080214ec <tos_Menu_Controller>:
void tos_Menu_Controller(void){
 80214ec:	b580      	push	{r7, lr}
 80214ee:	af00      	add	r7, sp, #0
	if(MenuS_TaskController){
 80214f0:	4b38      	ldr	r3, [pc, #224]	; (80215d4 <tos_Menu_Controller+0xe8>)
 80214f2:	781b      	ldrb	r3, [r3, #0]
 80214f4:	2b00      	cmp	r3, #0
 80214f6:	d06a      	beq.n	80215ce <tos_Menu_Controller+0xe2>
			  if(SettingsScreen_isSettingsOpen())  SettingsScreen_ButtonController();
 80214f8:	f003 fabe 	bl	8024a78 <SettingsScreen_isSettingsOpen>
 80214fc:	4603      	mov	r3, r0
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d002      	beq.n	8021508 <tos_Menu_Controller+0x1c>
 8021502:	f002 fded 	bl	80240e0 <SettingsScreen_ButtonController>
				  MenuScreen_ItemController(item);
				  befItem=item;
				}
			  }
	}
}
 8021506:	e062      	b.n	80215ce <tos_Menu_Controller+0xe2>
				  if(1==tos_EnterButton_Listenner_For_MenuControl()) MenuScreen_OpenMenu(item);
 8021508:	f005 f948 	bl	802679c <tos_EnterButton_Listenner_For_MenuControl>
 802150c:	4603      	mov	r3, r0
 802150e:	2b01      	cmp	r3, #1
 8021510:	d104      	bne.n	802151c <tos_Menu_Controller+0x30>
 8021512:	4b31      	ldr	r3, [pc, #196]	; (80215d8 <tos_Menu_Controller+0xec>)
 8021514:	781b      	ldrb	r3, [r3, #0]
 8021516:	4618      	mov	r0, r3
 8021518:	f000 f862 	bl	80215e0 <MenuScreen_OpenMenu>
				  if(StopWatch_TaskControllerGet())  StopWatch_ButtonController();
 802151c:	f004 fe14 	bl	8026148 <StopWatch_TaskControllerGet>
 8021520:	4603      	mov	r3, r0
 8021522:	2b00      	cmp	r3, #0
 8021524:	d002      	beq.n	802152c <tos_Menu_Controller+0x40>
 8021526:	f004 fcaf 	bl	8025e88 <StopWatch_ButtonController>
 802152a:	e041      	b.n	80215b0 <tos_Menu_Controller+0xc4>
				  else if(RunMode_TaskControllerGet())    RunMode_ButtonController();
 802152c:	f002 f9be 	bl	80238ac <RunMode_TaskControllerGet>
 8021530:	4603      	mov	r3, r0
 8021532:	2b00      	cmp	r3, #0
 8021534:	d002      	beq.n	802153c <tos_Menu_Controller+0x50>
 8021536:	f001 ff75 	bl	8023424 <RunMode_ButtonController>
 802153a:	e039      	b.n	80215b0 <tos_Menu_Controller+0xc4>
				  else if(MusicPlayer_TaskControllerGet())   MusicPlayer_ButtonController();
 802153c:	f000 fd14 	bl	8021f68 <MusicPlayer_TaskControllerGet>
 8021540:	4603      	mov	r3, r0
 8021542:	2b00      	cmp	r3, #0
 8021544:	d002      	beq.n	802154c <tos_Menu_Controller+0x60>
 8021546:	f000 fc1f 	bl	8021d88 <MusicPlayer_ButtonController>
 802154a:	e031      	b.n	80215b0 <tos_Menu_Controller+0xc4>
				  else if(NotificationScreen_TaskControllerGet())   NotificationScreen_ButtonController();
 802154c:	f001 f8ae 	bl	80226ac <NotificationScreen_TaskControllerGet>
 8021550:	4603      	mov	r3, r0
 8021552:	2b00      	cmp	r3, #0
 8021554:	d002      	beq.n	802155c <tos_Menu_Controller+0x70>
 8021556:	f000 fdad 	bl	80220b4 <NotificationScreen_ButtonController>
 802155a:	e029      	b.n	80215b0 <tos_Menu_Controller+0xc4>
					  if(1==tos_LeftButton_Listenner_For_MenuControl()){
 802155c:	f005 f8f2 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 8021560:	4603      	mov	r3, r0
 8021562:	2b01      	cmp	r3, #1
 8021564:	d10f      	bne.n	8021586 <tos_Menu_Controller+0x9a>
						  if(item>ITEM_MIN)item--;
 8021566:	4b1c      	ldr	r3, [pc, #112]	; (80215d8 <tos_Menu_Controller+0xec>)
 8021568:	781b      	ldrb	r3, [r3, #0]
 802156a:	2b00      	cmp	r3, #0
 802156c:	d006      	beq.n	802157c <tos_Menu_Controller+0x90>
 802156e:	4b1a      	ldr	r3, [pc, #104]	; (80215d8 <tos_Menu_Controller+0xec>)
 8021570:	781b      	ldrb	r3, [r3, #0]
 8021572:	3b01      	subs	r3, #1
 8021574:	b2da      	uxtb	r2, r3
 8021576:	4b18      	ldr	r3, [pc, #96]	; (80215d8 <tos_Menu_Controller+0xec>)
 8021578:	701a      	strb	r2, [r3, #0]
 802157a:	e004      	b.n	8021586 <tos_Menu_Controller+0x9a>
							  	MenuS_TaskController=false;
 802157c:	4b15      	ldr	r3, [pc, #84]	; (80215d4 <tos_Menu_Controller+0xe8>)
 802157e:	2200      	movs	r2, #0
 8021580:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8021582:	f005 fb6b 	bl	8026c5c <tos_Set_Current_Screen>
					  if(1==tos_RightButton_Listenner_For_MenuControl()){
 8021586:	f005 f8b1 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 802158a:	4603      	mov	r3, r0
 802158c:	2b01      	cmp	r3, #1
 802158e:	d10f      	bne.n	80215b0 <tos_Menu_Controller+0xc4>
						  if(item<ITEM_MAX)item++;
 8021590:	4b11      	ldr	r3, [pc, #68]	; (80215d8 <tos_Menu_Controller+0xec>)
 8021592:	781b      	ldrb	r3, [r3, #0]
 8021594:	2b04      	cmp	r3, #4
 8021596:	d806      	bhi.n	80215a6 <tos_Menu_Controller+0xba>
 8021598:	4b0f      	ldr	r3, [pc, #60]	; (80215d8 <tos_Menu_Controller+0xec>)
 802159a:	781b      	ldrb	r3, [r3, #0]
 802159c:	3301      	adds	r3, #1
 802159e:	b2da      	uxtb	r2, r3
 80215a0:	4b0d      	ldr	r3, [pc, #52]	; (80215d8 <tos_Menu_Controller+0xec>)
 80215a2:	701a      	strb	r2, [r3, #0]
 80215a4:	e004      	b.n	80215b0 <tos_Menu_Controller+0xc4>
							  	MenuS_TaskController=false;
 80215a6:	4b0b      	ldr	r3, [pc, #44]	; (80215d4 <tos_Menu_Controller+0xe8>)
 80215a8:	2200      	movs	r2, #0
 80215aa:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 80215ac:	f005 fb56 	bl	8026c5c <tos_Set_Current_Screen>
				  if(befItem!=item){
 80215b0:	4b0a      	ldr	r3, [pc, #40]	; (80215dc <tos_Menu_Controller+0xf0>)
 80215b2:	781a      	ldrb	r2, [r3, #0]
 80215b4:	4b08      	ldr	r3, [pc, #32]	; (80215d8 <tos_Menu_Controller+0xec>)
 80215b6:	781b      	ldrb	r3, [r3, #0]
 80215b8:	429a      	cmp	r2, r3
 80215ba:	d008      	beq.n	80215ce <tos_Menu_Controller+0xe2>
				  MenuScreen_ItemController(item);
 80215bc:	4b06      	ldr	r3, [pc, #24]	; (80215d8 <tos_Menu_Controller+0xec>)
 80215be:	781b      	ldrb	r3, [r3, #0]
 80215c0:	4618      	mov	r0, r3
 80215c2:	f000 f88d 	bl	80216e0 <MenuScreen_ItemController>
				  befItem=item;
 80215c6:	4b04      	ldr	r3, [pc, #16]	; (80215d8 <tos_Menu_Controller+0xec>)
 80215c8:	781a      	ldrb	r2, [r3, #0]
 80215ca:	4b04      	ldr	r3, [pc, #16]	; (80215dc <tos_Menu_Controller+0xf0>)
 80215cc:	701a      	strb	r2, [r3, #0]
}
 80215ce:	bf00      	nop
 80215d0:	bd80      	pop	{r7, pc}
 80215d2:	bf00      	nop
 80215d4:	20006ef4 	.word	0x20006ef4
 80215d8:	20005f61 	.word	0x20005f61
 80215dc:	2000282c 	.word	0x2000282c

080215e0 <MenuScreen_OpenMenu>:

void MenuScreen_OpenMenu(uint8_t item){
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b082      	sub	sp, #8
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	4603      	mov	r3, r0
 80215e8:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 80215ea:	f7ff ff19 	bl	8021420 <lv_scr_act>
 80215ee:	4603      	mov	r3, r0
 80215f0:	4618      	mov	r0, r3
 80215f2:	f7e4 fc05 	bl	8005e00 <lv_obj_clean>
	StepAndKcal_TaskControllerSet(false);
 80215f6:	2000      	movs	r0, #0
 80215f8:	f004 fae0 	bl	8025bbc <StepAndKcal_TaskControllerSet>
	StopWatch_TaskControllerSet(false);
 80215fc:	2000      	movs	r0, #0
 80215fe:	f004 fd93 	bl	8026128 <StopWatch_TaskControllerSet>
	RunMode_TaskControllerSet(false);
 8021602:	2000      	movs	r0, #0
 8021604:	f002 f942 	bl	802388c <RunMode_TaskControllerSet>
	MusicPlayer_TaskControllerSet(false);
 8021608:	2000      	movs	r0, #0
 802160a:	f000 fc9d 	bl	8021f48 <MusicPlayer_TaskControllerSet>
	NotificationScreen_TaskControllerSet(false);
 802160e:	2000      	movs	r0, #0
 8021610:	f001 f83c 	bl	802268c <NotificationScreen_TaskControllerSet>

	if(!MenuIsOpen){
 8021614:	4b2f      	ldr	r3, [pc, #188]	; (80216d4 <MenuScreen_OpenMenu+0xf4>)
 8021616:	781b      	ldrb	r3, [r3, #0]
 8021618:	f083 0301 	eor.w	r3, r3, #1
 802161c:	b2db      	uxtb	r3, r3
 802161e:	2b00      	cmp	r3, #0
 8021620:	d007      	beq.n	8021632 <MenuScreen_OpenMenu+0x52>
		  MenuIsOpen=true;
 8021622:	4b2c      	ldr	r3, [pc, #176]	; (80216d4 <MenuScreen_OpenMenu+0xf4>)
 8021624:	2201      	movs	r2, #1
 8021626:	701a      	strb	r2, [r3, #0]
		  MenuScreen_ItemController(item);
 8021628:	79fb      	ldrb	r3, [r7, #7]
 802162a:	4618      	mov	r0, r3
 802162c:	f000 f858 	bl	80216e0 <MenuScreen_ItemController>
		  return;
 8021630:	e04d      	b.n	80216ce <MenuScreen_OpenMenu+0xee>
	}

	MenuIsOpen=false;
 8021632:	4b28      	ldr	r3, [pc, #160]	; (80216d4 <MenuScreen_OpenMenu+0xf4>)
 8021634:	2200      	movs	r2, #0
 8021636:	701a      	strb	r2, [r3, #0]

	switch(item){
 8021638:	79fb      	ldrb	r3, [r7, #7]
 802163a:	2b05      	cmp	r3, #5
 802163c:	d846      	bhi.n	80216cc <MenuScreen_OpenMenu+0xec>
 802163e:	a201      	add	r2, pc, #4	; (adr r2, 8021644 <MenuScreen_OpenMenu+0x64>)
 8021640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021644:	0802165d 	.word	0x0802165d
 8021648:	08021671 	.word	0x08021671
 802164c:	08021683 	.word	0x08021683
 8021650:	08021697 	.word	0x08021697
 8021654:	080216a9 	.word	0x080216a9
 8021658:	080216bb 	.word	0x080216bb
	case ITEM0:
	/*Steps And kCals*/
	tos_StepAndKcalScreen_Init(true,Menutheme);
 802165c:	4b1e      	ldr	r3, [pc, #120]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 802165e:	781b      	ldrb	r3, [r3, #0]
 8021660:	4619      	mov	r1, r3
 8021662:	2001      	movs	r0, #1
 8021664:	f003 fe1e 	bl	80252a4 <tos_StepAndKcalScreen_Init>
	StepAndKcal_TaskControllerSet(true);
 8021668:	2001      	movs	r0, #1
 802166a:	f004 faa7 	bl	8025bbc <StepAndKcal_TaskControllerSet>
	break;
 802166e:	e02e      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	case ITEM1:
	/*Stopwatch*/
	tos_StopWatchScreen_Init(Menutheme);
 8021670:	4b19      	ldr	r3, [pc, #100]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 8021672:	781b      	ldrb	r3, [r3, #0]
 8021674:	4618      	mov	r0, r3
 8021676:	f004 facb 	bl	8025c10 <tos_StopWatchScreen_Init>
	StopWatch_TaskControllerSet(true);
 802167a:	2001      	movs	r0, #1
 802167c:	f004 fd54 	bl	8026128 <StopWatch_TaskControllerSet>
		break;
 8021680:	e025      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	case ITEM2:
	/*Run Mode*/
	tos_RunModeScreen_Init(true,Menutheme); //unit type alma yazılacak
 8021682:	4b15      	ldr	r3, [pc, #84]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 8021684:	781b      	ldrb	r3, [r3, #0]
 8021686:	4619      	mov	r1, r3
 8021688:	2001      	movs	r0, #1
 802168a:	f001 f883 	bl	8022794 <tos_RunModeScreen_Init>
	RunMode_TaskControllerSet(true);
 802168e:	2001      	movs	r0, #1
 8021690:	f002 f8fc 	bl	802388c <RunMode_TaskControllerSet>
	break;
 8021694:	e01b      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	case ITEM3:
	/*Music Player*/
	tos_MusicPlayerScreen_Init(Menutheme);
 8021696:	4b10      	ldr	r3, [pc, #64]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 8021698:	781b      	ldrb	r3, [r3, #0]
 802169a:	4618      	mov	r0, r3
 802169c:	f000 f916 	bl	80218cc <tos_MusicPlayerScreen_Init>
	MusicPlayer_TaskControllerSet(true);
 80216a0:	2001      	movs	r0, #1
 80216a2:	f000 fc51 	bl	8021f48 <MusicPlayer_TaskControllerSet>
	break;
 80216a6:	e012      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	case ITEM4:
	/*Notification*/
	tos_NotificationScreen_Init(Menutheme);
 80216a8:	4b0b      	ldr	r3, [pc, #44]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 80216aa:	781b      	ldrb	r3, [r3, #0]
 80216ac:	4618      	mov	r0, r3
 80216ae:	f000 fc95 	bl	8021fdc <tos_NotificationScreen_Init>
	NotificationScreen_TaskControllerSet(true);
 80216b2:	2001      	movs	r0, #1
 80216b4:	f000 ffea 	bl	802268c <NotificationScreen_TaskControllerSet>
	break;
 80216b8:	e009      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	case ITEM5:
	/*Sys Settings*/
	tos_SettingsScreen_Init(Menutheme,M_hrtc);
 80216ba:	4b07      	ldr	r3, [pc, #28]	; (80216d8 <MenuScreen_OpenMenu+0xf8>)
 80216bc:	781a      	ldrb	r2, [r3, #0]
 80216be:	4b07      	ldr	r3, [pc, #28]	; (80216dc <MenuScreen_OpenMenu+0xfc>)
 80216c0:	681b      	ldr	r3, [r3, #0]
 80216c2:	4619      	mov	r1, r3
 80216c4:	4610      	mov	r0, r2
 80216c6:	f002 f963 	bl	8023990 <tos_SettingsScreen_Init>
	//Close a veya save e basınca buraya dönmüyor !!
	break;
 80216ca:	e000      	b.n	80216ce <MenuScreen_OpenMenu+0xee>

	default: return;
 80216cc:	bf00      	nop
	}
}
 80216ce:	3708      	adds	r7, #8
 80216d0:	46bd      	mov	sp, r7
 80216d2:	bd80      	pop	{r7, pc}
 80216d4:	20005f60 	.word	0x20005f60
 80216d8:	20006ef5 	.word	0x20006ef5
 80216dc:	20006ef0 	.word	0x20006ef0

080216e0 <MenuScreen_ItemController>:

void MenuScreen_ItemController(uint8_t item){
 80216e0:	b580      	push	{r7, lr}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	4603      	mov	r3, r0
 80216e8:	71fb      	strb	r3, [r7, #7]
		switch(item){
 80216ea:	79fb      	ldrb	r3, [r7, #7]
 80216ec:	2b05      	cmp	r3, #5
 80216ee:	d82d      	bhi.n	802174c <MenuScreen_ItemController+0x6c>
 80216f0:	a201      	add	r2, pc, #4	; (adr r2, 80216f8 <MenuScreen_ItemController+0x18>)
 80216f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216f6:	bf00      	nop
 80216f8:	08021711 	.word	0x08021711
 80216fc:	0802171b 	.word	0x0802171b
 8021700:	08021725 	.word	0x08021725
 8021704:	0802172f 	.word	0x0802172f
 8021708:	08021739 	.word	0x08021739
 802170c:	08021743 	.word	0x08021743
		case ITEM0:	MenuScreen_MenuItem("STEPS AND KCALS", &tos75x75); break;
 8021710:	4910      	ldr	r1, [pc, #64]	; (8021754 <MenuScreen_ItemController+0x74>)
 8021712:	4811      	ldr	r0, [pc, #68]	; (8021758 <MenuScreen_ItemController+0x78>)
 8021714:	f000 f82c 	bl	8021770 <MenuScreen_MenuItem>
 8021718:	e019      	b.n	802174e <MenuScreen_ItemController+0x6e>

		case ITEM1: MenuScreen_MenuItem("STOPWATCH", &tos75x75); break;
 802171a:	490e      	ldr	r1, [pc, #56]	; (8021754 <MenuScreen_ItemController+0x74>)
 802171c:	480f      	ldr	r0, [pc, #60]	; (802175c <MenuScreen_ItemController+0x7c>)
 802171e:	f000 f827 	bl	8021770 <MenuScreen_MenuItem>
 8021722:	e014      	b.n	802174e <MenuScreen_ItemController+0x6e>

		case ITEM2: MenuScreen_MenuItem("RUN MODE", &tos75x75); break;
 8021724:	490b      	ldr	r1, [pc, #44]	; (8021754 <MenuScreen_ItemController+0x74>)
 8021726:	480e      	ldr	r0, [pc, #56]	; (8021760 <MenuScreen_ItemController+0x80>)
 8021728:	f000 f822 	bl	8021770 <MenuScreen_MenuItem>
 802172c:	e00f      	b.n	802174e <MenuScreen_ItemController+0x6e>

		case ITEM3: MenuScreen_MenuItem("MUSIC PLAYER", &tos75x75); break;
 802172e:	4909      	ldr	r1, [pc, #36]	; (8021754 <MenuScreen_ItemController+0x74>)
 8021730:	480c      	ldr	r0, [pc, #48]	; (8021764 <MenuScreen_ItemController+0x84>)
 8021732:	f000 f81d 	bl	8021770 <MenuScreen_MenuItem>
 8021736:	e00a      	b.n	802174e <MenuScreen_ItemController+0x6e>

		case ITEM4: MenuScreen_MenuItem("NOTIFICATIONS", &tos75x75); break;
 8021738:	4906      	ldr	r1, [pc, #24]	; (8021754 <MenuScreen_ItemController+0x74>)
 802173a:	480b      	ldr	r0, [pc, #44]	; (8021768 <MenuScreen_ItemController+0x88>)
 802173c:	f000 f818 	bl	8021770 <MenuScreen_MenuItem>
 8021740:	e005      	b.n	802174e <MenuScreen_ItemController+0x6e>

		case ITEM5: MenuScreen_MenuItem("SYSTEM SETTINGS", &tos75x75); break;
 8021742:	4904      	ldr	r1, [pc, #16]	; (8021754 <MenuScreen_ItemController+0x74>)
 8021744:	4809      	ldr	r0, [pc, #36]	; (802176c <MenuScreen_ItemController+0x8c>)
 8021746:	f000 f813 	bl	8021770 <MenuScreen_MenuItem>
 802174a:	e000      	b.n	802174e <MenuScreen_ItemController+0x6e>

		default: return;
 802174c:	bf00      	nop
		}
}
 802174e:	3708      	adds	r7, #8
 8021750:	46bd      	mov	sp, r7
 8021752:	bd80      	pop	{r7, pc}
 8021754:	08044f44 	.word	0x08044f44
 8021758:	08029dac 	.word	0x08029dac
 802175c:	08029dbc 	.word	0x08029dbc
 8021760:	08029dc8 	.word	0x08029dc8
 8021764:	08029dd4 	.word	0x08029dd4
 8021768:	08029de4 	.word	0x08029de4
 802176c:	08029df4 	.word	0x08029df4

08021770 <MenuScreen_MenuItem>:

void MenuScreen_MenuItem(char * itemTitle,const void * itemImg){
 8021770:	b580      	push	{r7, lr}
 8021772:	b086      	sub	sp, #24
 8021774:	af02      	add	r7, sp, #8
 8021776:	6078      	str	r0, [r7, #4]
 8021778:	6039      	str	r1, [r7, #0]
	lv_obj_clean(lv_scr_act());
 802177a:	f7ff fe51 	bl	8021420 <lv_scr_act>
 802177e:	4603      	mov	r3, r0
 8021780:	4618      	mov	r0, r3
 8021782:	f7e4 fb3d 	bl	8005e00 <lv_obj_clean>
		lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8021786:	f7ff fe4b 	bl	8021420 <lv_scr_act>
 802178a:	4603      	mov	r3, r0
 802178c:	2100      	movs	r1, #0
 802178e:	4618      	mov	r0, r3
 8021790:	f7f7 fb34 	bl	8018dfc <lv_img_create>
 8021794:	60f8      	str	r0, [r7, #12]
		lv_img_set_src(img1, itemImg);
 8021796:	6839      	ldr	r1, [r7, #0]
 8021798:	68f8      	ldr	r0, [r7, #12]
 802179a:	f7f7 fbcd 	bl	8018f38 <lv_img_set_src>
		lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 802179e:	f06f 0313 	mvn.w	r3, #19
 80217a2:	9300      	str	r3, [sp, #0]
 80217a4:	2300      	movs	r3, #0
 80217a6:	2200      	movs	r2, #0
 80217a8:	2100      	movs	r1, #0
 80217aa:	68f8      	ldr	r0, [r7, #12]
 80217ac:	f7e4 fd9a 	bl	80062e4 <lv_obj_align>

		lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 80217b0:	f7ff fe36 	bl	8021420 <lv_scr_act>
 80217b4:	4603      	mov	r3, r0
 80217b6:	2100      	movs	r1, #0
 80217b8:	4618      	mov	r0, r3
 80217ba:	f7f7 feab 	bl	8019514 <lv_label_create>
 80217be:	60b8      	str	r0, [r7, #8]
	 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 80217c0:	4a0d      	ldr	r2, [pc, #52]	; (80217f8 <MenuScreen_MenuItem+0x88>)
 80217c2:	2100      	movs	r1, #0
 80217c4:	68b8      	ldr	r0, [r7, #8]
 80217c6:	f7ff fe36 	bl	8021436 <lv_label_set_style>
	   	snprintf(menuBuffer, 20, "%s", itemTitle);
 80217ca:	687b      	ldr	r3, [r7, #4]
 80217cc:	4a0b      	ldr	r2, [pc, #44]	; (80217fc <MenuScreen_MenuItem+0x8c>)
 80217ce:	2114      	movs	r1, #20
 80217d0:	480b      	ldr	r0, [pc, #44]	; (8021800 <MenuScreen_MenuItem+0x90>)
 80217d2:	f006 fa0d 	bl	8027bf0 <sniprintf>
	 	lv_label_set_text(tosLbl,menuBuffer);
 80217d6:	490a      	ldr	r1, [pc, #40]	; (8021800 <MenuScreen_MenuItem+0x90>)
 80217d8:	68b8      	ldr	r0, [r7, #8]
 80217da:	f7f7 ffcd 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 80217de:	2332      	movs	r3, #50	; 0x32
 80217e0:	9300      	str	r3, [sp, #0]
 80217e2:	2300      	movs	r3, #0
 80217e4:	2200      	movs	r2, #0
 80217e6:	2100      	movs	r1, #0
 80217e8:	68b8      	ldr	r0, [r7, #8]
 80217ea:	f7e4 fd7b 	bl	80062e4 <lv_obj_align>
}
 80217ee:	bf00      	nop
 80217f0:	3710      	adds	r7, #16
 80217f2:	46bd      	mov	sp, r7
 80217f4:	bd80      	pop	{r7, pc}
 80217f6:	bf00      	nop
 80217f8:	20005f24 	.word	0x20005f24
 80217fc:	08029e04 	.word	0x08029e04
 8021800:	20006ef8 	.word	0x20006ef8

08021804 <MenuScreen_TaskControllerSet>:
//Setter And Getter Functions
bool MenuScreen_TaskControllerGet(void){
	return MenuS_TaskController;
}
void MenuScreen_TaskControllerSet(bool active){
 8021804:	b480      	push	{r7}
 8021806:	b083      	sub	sp, #12
 8021808:	af00      	add	r7, sp, #0
 802180a:	4603      	mov	r3, r0
 802180c:	71fb      	strb	r3, [r7, #7]
	MenuS_TaskController=active;
 802180e:	4a04      	ldr	r2, [pc, #16]	; (8021820 <MenuScreen_TaskControllerSet+0x1c>)
 8021810:	79fb      	ldrb	r3, [r7, #7]
 8021812:	7013      	strb	r3, [r2, #0]
}
 8021814:	bf00      	nop
 8021816:	370c      	adds	r7, #12
 8021818:	46bd      	mov	sp, r7
 802181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181e:	4770      	bx	lr
 8021820:	20006ef4 	.word	0x20006ef4

08021824 <MenuScreen_SetItem>:
void MenuScreen_SetItem(uint8_t SelectItem){
 8021824:	b480      	push	{r7}
 8021826:	b083      	sub	sp, #12
 8021828:	af00      	add	r7, sp, #0
 802182a:	4603      	mov	r3, r0
 802182c:	71fb      	strb	r3, [r7, #7]
	item=SelectItem;
 802182e:	4a04      	ldr	r2, [pc, #16]	; (8021840 <MenuScreen_SetItem+0x1c>)
 8021830:	79fb      	ldrb	r3, [r7, #7]
 8021832:	7013      	strb	r3, [r2, #0]
}
 8021834:	bf00      	nop
 8021836:	370c      	adds	r7, #12
 8021838:	46bd      	mov	sp, r7
 802183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802183e:	4770      	bx	lr
 8021840:	20005f61 	.word	0x20005f61

08021844 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8021844:	b480      	push	{r7}
 8021846:	b085      	sub	sp, #20
 8021848:	af00      	add	r7, sp, #0
 802184a:	4603      	mov	r3, r0
 802184c:	71fb      	strb	r3, [r7, #7]
 802184e:	460b      	mov	r3, r1
 8021850:	71bb      	strb	r3, [r7, #6]
 8021852:	4613      	mov	r3, r2
 8021854:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8021856:	79bb      	ldrb	r3, [r7, #6]
 8021858:	095b      	lsrs	r3, r3, #5
 802185a:	b2db      	uxtb	r3, r3
 802185c:	f003 0307 	and.w	r3, r3, #7
 8021860:	b2da      	uxtb	r2, r3
 8021862:	7b3b      	ldrb	r3, [r7, #12]
 8021864:	f362 0302 	bfi	r3, r2, #0, #3
 8021868:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802186a:	79fb      	ldrb	r3, [r7, #7]
 802186c:	08db      	lsrs	r3, r3, #3
 802186e:	b2db      	uxtb	r3, r3
 8021870:	f003 031f 	and.w	r3, r3, #31
 8021874:	b2da      	uxtb	r2, r3
 8021876:	7b3b      	ldrb	r3, [r7, #12]
 8021878:	f362 03c7 	bfi	r3, r2, #3, #5
 802187c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802187e:	797b      	ldrb	r3, [r7, #5]
 8021880:	08db      	lsrs	r3, r3, #3
 8021882:	b2db      	uxtb	r3, r3
 8021884:	f003 031f 	and.w	r3, r3, #31
 8021888:	b2da      	uxtb	r2, r3
 802188a:	7b7b      	ldrb	r3, [r7, #13]
 802188c:	f362 0304 	bfi	r3, r2, #0, #5
 8021890:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8021892:	79bb      	ldrb	r3, [r7, #6]
 8021894:	089b      	lsrs	r3, r3, #2
 8021896:	b2db      	uxtb	r3, r3
 8021898:	f003 0307 	and.w	r3, r3, #7
 802189c:	b2da      	uxtb	r2, r3
 802189e:	7b7b      	ldrb	r3, [r7, #13]
 80218a0:	f362 1347 	bfi	r3, r2, #5, #3
 80218a4:	737b      	strb	r3, [r7, #13]
    return color;
 80218a6:	89bb      	ldrh	r3, [r7, #12]
}
 80218a8:	4618      	mov	r0, r3
 80218aa:	3714      	adds	r7, #20
 80218ac:	46bd      	mov	sp, r7
 80218ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b2:	4770      	bx	lr

080218b4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80218b8:	f7f0 fe76 	bl	80125a8 <lv_disp_get_default>
 80218bc:	4603      	mov	r3, r0
 80218be:	4618      	mov	r0, r3
 80218c0:	f7e3 fb3e 	bl	8004f40 <lv_disp_get_scr_act>
 80218c4:	4603      	mov	r3, r0
}
 80218c6:	4618      	mov	r0, r3
 80218c8:	bd80      	pop	{r7, pc}
	...

080218cc <tos_MusicPlayerScreen_Init>:
void MusicPlayerUpdateVal(void);
void soundVolumeController(bool vol);


/*This function using for initialization Music Player screen*/
void tos_MusicPlayerScreen_Init(bool theme){
 80218cc:	b590      	push	{r4, r7, lr}
 80218ce:	b083      	sub	sp, #12
 80218d0:	af00      	add	r7, sp, #0
 80218d2:	4603      	mov	r3, r0
 80218d4:	71fb      	strb	r3, [r7, #7]

	lv_obj_clean(lv_scr_act());
 80218d6:	f7ff ffed 	bl	80218b4 <lv_scr_act>
 80218da:	4603      	mov	r3, r0
 80218dc:	4618      	mov	r0, r3
 80218de:	f7e4 fa8f 	bl	8005e00 <lv_obj_clean>
		lv_style_copy(&description_Style, &lv_style_plain);
 80218e2:	492c      	ldr	r1, [pc, #176]	; (8021994 <tos_MusicPlayerScreen_Init+0xc8>)
 80218e4:	482c      	ldr	r0, [pc, #176]	; (8021998 <tos_MusicPlayerScreen_Init+0xcc>)
 80218e6:	f7e6 ff41 	bl	800876c <lv_style_copy>
		description_Style.text.font = &lv_font_roboto_22;
 80218ea:	4b2b      	ldr	r3, [pc, #172]	; (8021998 <tos_MusicPlayerScreen_Init+0xcc>)
 80218ec:	4a2b      	ldr	r2, [pc, #172]	; (802199c <tos_MusicPlayerScreen_Init+0xd0>)
 80218ee:	625a      	str	r2, [r3, #36]	; 0x24
		description_Style.text.color = LV_COLOR_GRAY;
 80218f0:	4a29      	ldr	r2, [pc, #164]	; (8021998 <tos_MusicPlayerScreen_Init+0xcc>)
 80218f2:	4b2b      	ldr	r3, [pc, #172]	; (80219a0 <tos_MusicPlayerScreen_Init+0xd4>)
 80218f4:	881b      	ldrh	r3, [r3, #0]
 80218f6:	8413      	strh	r3, [r2, #32]

		lv_style_copy(&style_screen, &lv_style_plain);
 80218f8:	4926      	ldr	r1, [pc, #152]	; (8021994 <tos_MusicPlayerScreen_Init+0xc8>)
 80218fa:	482a      	ldr	r0, [pc, #168]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 80218fc:	f7e6 ff36 	bl	800876c <lv_style_copy>
		if(theme){
 8021900:	79fb      	ldrb	r3, [r7, #7]
 8021902:	2b00      	cmp	r3, #0
 8021904:	d00d      	beq.n	8021922 <tos_MusicPlayerScreen_Init+0x56>
			style_screen.body.main_color = LV_COLOR_BLACK;
 8021906:	4b27      	ldr	r3, [pc, #156]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 8021908:	2200      	movs	r2, #0
 802190a:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 802190c:	4b25      	ldr	r3, [pc, #148]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 802190e:	2200      	movs	r2, #0
 8021910:	809a      	strh	r2, [r3, #4]
			description_Style.text.color = lv_color_make(0xc0, 0xc0, 0xc0);
 8021912:	4c21      	ldr	r4, [pc, #132]	; (8021998 <tos_MusicPlayerScreen_Init+0xcc>)
 8021914:	22c0      	movs	r2, #192	; 0xc0
 8021916:	21c0      	movs	r1, #192	; 0xc0
 8021918:	20c0      	movs	r0, #192	; 0xc0
 802191a:	f7ff ff93 	bl	8021844 <lv_color_make>
 802191e:	8420      	strh	r0, [r4, #32]
 8021920:	e00e      	b.n	8021940 <tos_MusicPlayerScreen_Init+0x74>
		}else{
			style_screen.body.main_color = LV_COLOR_WHITE;
 8021922:	4a20      	ldr	r2, [pc, #128]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 8021924:	4b20      	ldr	r3, [pc, #128]	; (80219a8 <tos_MusicPlayerScreen_Init+0xdc>)
 8021926:	881b      	ldrh	r3, [r3, #0]
 8021928:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 802192a:	4a1e      	ldr	r2, [pc, #120]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 802192c:	4b1e      	ldr	r3, [pc, #120]	; (80219a8 <tos_MusicPlayerScreen_Init+0xdc>)
 802192e:	881b      	ldrh	r3, [r3, #0]
 8021930:	8093      	strh	r3, [r2, #4]
			description_Style.text.color = lv_color_make(0x37, 0x37, 0x37);
 8021932:	4c19      	ldr	r4, [pc, #100]	; (8021998 <tos_MusicPlayerScreen_Init+0xcc>)
 8021934:	2237      	movs	r2, #55	; 0x37
 8021936:	2137      	movs	r1, #55	; 0x37
 8021938:	2037      	movs	r0, #55	; 0x37
 802193a:	f7ff ff83 	bl	8021844 <lv_color_make>
 802193e:	8420      	strh	r0, [r4, #32]
		}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8021940:	f7ff ffb8 	bl	80218b4 <lv_scr_act>
 8021944:	4603      	mov	r3, r0
 8021946:	4917      	ldr	r1, [pc, #92]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd8>)
 8021948:	4618      	mov	r0, r3
 802194a:	f7e5 f970 	bl	8006c2e <lv_obj_set_style>

		MP_theme=theme;
 802194e:	4a17      	ldr	r2, [pc, #92]	; (80219ac <tos_MusicPlayerScreen_Init+0xe0>)
 8021950:	79fb      	ldrb	r3, [r7, #7]
 8021952:	7013      	strb	r3, [r2, #0]
		MP_isButtonPressed=false;
 8021954:	4b16      	ldr	r3, [pc, #88]	; (80219b0 <tos_MusicPlayerScreen_Init+0xe4>)
 8021956:	2200      	movs	r2, #0
 8021958:	701a      	strb	r2, [r3, #0]
		MP_buttonMode=false;
 802195a:	4b16      	ldr	r3, [pc, #88]	; (80219b4 <tos_MusicPlayerScreen_Init+0xe8>)
 802195c:	2200      	movs	r2, #0
 802195e:	701a      	strb	r2, [r3, #0]

		MusicPlayerSound_Init(theme);
 8021960:	79fb      	ldrb	r3, [r7, #7]
 8021962:	4618      	mov	r0, r3
 8021964:	f000 f89a 	bl	8021a9c <MusicPlayerSound_Init>
		MusicPlayerPlayingVal_Init(theme);
 8021968:	79fb      	ldrb	r3, [r7, #7]
 802196a:	4618      	mov	r0, r3
 802196c:	f000 f984 	bl	8021c78 <MusicPlayerPlayingVal_Init>
		MusicPlayerDescriptionLbl_Init(theme);
 8021970:	79fb      	ldrb	r3, [r7, #7]
 8021972:	4618      	mov	r0, r3
 8021974:	f000 f9a8 	bl	8021cc8 <MusicPlayerDescriptionLbl_Init>

		MP_taskController=true;
 8021978:	4b0f      	ldr	r3, [pc, #60]	; (80219b8 <tos_MusicPlayerScreen_Init+0xec>)
 802197a:	2201      	movs	r2, #1
 802197c:	701a      	strb	r2, [r3, #0]
		lv_task_create(MusicPlayerScreen_Updater, 750, LV_TASK_PRIO_LOWEST, NULL);
 802197e:	2300      	movs	r3, #0
 8021980:	2201      	movs	r2, #1
 8021982:	f240 21ee 	movw	r1, #750	; 0x2ee
 8021986:	480d      	ldr	r0, [pc, #52]	; (80219bc <tos_MusicPlayerScreen_Init+0xf0>)
 8021988:	f7f2 fa52 	bl	8013e30 <lv_task_create>
}
 802198c:	bf00      	nop
 802198e:	370c      	adds	r7, #12
 8021990:	46bd      	mov	sp, r7
 8021992:	bd90      	pop	{r4, r7, pc}
 8021994:	20006c68 	.word	0x20006c68
 8021998:	20005fa0 	.word	0x20005fa0
 802199c:	200017c0 	.word	0x200017c0
 80219a0:	08029e08 	.word	0x08029e08
 80219a4:	20005f64 	.word	0x20005f64
 80219a8:	08029e0c 	.word	0x08029e0c
 80219ac:	20006f35 	.word	0x20006f35
 80219b0:	20006f14 	.word	0x20006f14
 80219b4:	20006f24 	.word	0x20006f24
 80219b8:	20006f1c 	.word	0x20006f1c
 80219bc:	080219c1 	.word	0x080219c1

080219c0 <MusicPlayerScreen_Updater>:


/*This function using for update variables*/
void MusicPlayerScreen_Updater(lv_task_t *t){
 80219c0:	b580      	push	{r7, lr}
 80219c2:	b084      	sub	sp, #16
 80219c4:	af02      	add	r7, sp, #8
 80219c6:	6078      	str	r0, [r7, #4]
	if(MP_taskController){
 80219c8:	4b2a      	ldr	r3, [pc, #168]	; (8021a74 <MusicPlayerScreen_Updater+0xb4>)
 80219ca:	781b      	ldrb	r3, [r3, #0]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d049      	beq.n	8021a64 <MusicPlayerScreen_Updater+0xa4>
		if(NULL != MP_SongName) 	lv_label_set_text(MP_SongNameLbl, MP_SongName);
 80219d0:	4b29      	ldr	r3, [pc, #164]	; (8021a78 <MusicPlayerScreen_Updater+0xb8>)
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d008      	beq.n	80219ea <MusicPlayerScreen_Updater+0x2a>
 80219d8:	4b28      	ldr	r3, [pc, #160]	; (8021a7c <MusicPlayerScreen_Updater+0xbc>)
 80219da:	681a      	ldr	r2, [r3, #0]
 80219dc:	4b26      	ldr	r3, [pc, #152]	; (8021a78 <MusicPlayerScreen_Updater+0xb8>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	4619      	mov	r1, r3
 80219e2:	4610      	mov	r0, r2
 80219e4:	f7f7 fec8 	bl	8019778 <lv_label_set_text>
 80219e8:	e005      	b.n	80219f6 <MusicPlayerScreen_Updater+0x36>
		else lv_label_set_text(MP_SongNameLbl, "unknow");
 80219ea:	4b24      	ldr	r3, [pc, #144]	; (8021a7c <MusicPlayerScreen_Updater+0xbc>)
 80219ec:	681b      	ldr	r3, [r3, #0]
 80219ee:	4924      	ldr	r1, [pc, #144]	; (8021a80 <MusicPlayerScreen_Updater+0xc0>)
 80219f0:	4618      	mov	r0, r3
 80219f2:	f7f7 fec1 	bl	8019778 <lv_label_set_text>
		if(NULL != MP_SongActrist) lv_label_set_text(MP_SingerLbl, MP_SongActrist);
 80219f6:	4b23      	ldr	r3, [pc, #140]	; (8021a84 <MusicPlayerScreen_Updater+0xc4>)
 80219f8:	681b      	ldr	r3, [r3, #0]
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d008      	beq.n	8021a10 <MusicPlayerScreen_Updater+0x50>
 80219fe:	4b22      	ldr	r3, [pc, #136]	; (8021a88 <MusicPlayerScreen_Updater+0xc8>)
 8021a00:	681a      	ldr	r2, [r3, #0]
 8021a02:	4b20      	ldr	r3, [pc, #128]	; (8021a84 <MusicPlayerScreen_Updater+0xc4>)
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	4619      	mov	r1, r3
 8021a08:	4610      	mov	r0, r2
 8021a0a:	f7f7 feb5 	bl	8019778 <lv_label_set_text>
 8021a0e:	e005      	b.n	8021a1c <MusicPlayerScreen_Updater+0x5c>
		else lv_label_set_text(MP_SingerLbl, "unknow");
 8021a10:	4b1d      	ldr	r3, [pc, #116]	; (8021a88 <MusicPlayerScreen_Updater+0xc8>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	491a      	ldr	r1, [pc, #104]	; (8021a80 <MusicPlayerScreen_Updater+0xc0>)
 8021a16:	4618      	mov	r0, r3
 8021a18:	f7f7 feae 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8021a1c:	4b17      	ldr	r3, [pc, #92]	; (8021a7c <MusicPlayerScreen_Updater+0xbc>)
 8021a1e:	6818      	ldr	r0, [r3, #0]
 8021a20:	2332      	movs	r3, #50	; 0x32
 8021a22:	9300      	str	r3, [sp, #0]
 8021a24:	2300      	movs	r3, #0
 8021a26:	2200      	movs	r2, #0
 8021a28:	2100      	movs	r1, #0
 8021a2a:	f7e4 fc5b 	bl	80062e4 <lv_obj_align>
	 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 8021a2e:	4b16      	ldr	r3, [pc, #88]	; (8021a88 <MusicPlayerScreen_Updater+0xc8>)
 8021a30:	6818      	ldr	r0, [r3, #0]
 8021a32:	2355      	movs	r3, #85	; 0x55
 8021a34:	9300      	str	r3, [sp, #0]
 8021a36:	2300      	movs	r3, #0
 8021a38:	2200      	movs	r2, #0
 8021a3a:	2100      	movs	r1, #0
 8021a3c:	f7e4 fc52 	bl	80062e4 <lv_obj_align>
	    lv_bar_set_value(MP_soundValBar, MP_SoundVal, LV_ANIM_OFF);
 8021a40:	4b12      	ldr	r3, [pc, #72]	; (8021a8c <MusicPlayerScreen_Updater+0xcc>)
 8021a42:	6818      	ldr	r0, [r3, #0]
 8021a44:	4b12      	ldr	r3, [pc, #72]	; (8021a90 <MusicPlayerScreen_Updater+0xd0>)
 8021a46:	781b      	ldrb	r3, [r3, #0]
 8021a48:	b21b      	sxth	r3, r3
 8021a4a:	2200      	movs	r2, #0
 8021a4c:	4619      	mov	r1, r3
 8021a4e:	f7f3 fad5 	bl	8014ffc <lv_bar_set_value>
		MusicPlayerImgSet(MP_statu,MP_theme);
 8021a52:	4b10      	ldr	r3, [pc, #64]	; (8021a94 <MusicPlayerScreen_Updater+0xd4>)
 8021a54:	781a      	ldrb	r2, [r3, #0]
 8021a56:	4b10      	ldr	r3, [pc, #64]	; (8021a98 <MusicPlayerScreen_Updater+0xd8>)
 8021a58:	781b      	ldrb	r3, [r3, #0]
 8021a5a:	4619      	mov	r1, r3
 8021a5c:	4610      	mov	r0, r2
 8021a5e:	f000 fa1f 	bl	8021ea0 <MusicPlayerImgSet>
	}else lv_task_del(t);
}
 8021a62:	e002      	b.n	8021a6a <MusicPlayerScreen_Updater+0xaa>
	}else lv_task_del(t);
 8021a64:	6878      	ldr	r0, [r7, #4]
 8021a66:	f7f2 fa1b 	bl	8013ea0 <lv_task_del>
}
 8021a6a:	bf00      	nop
 8021a6c:	3708      	adds	r7, #8
 8021a6e:	46bd      	mov	sp, r7
 8021a70:	bd80      	pop	{r7, pc}
 8021a72:	bf00      	nop
 8021a74:	20006f1c 	.word	0x20006f1c
 8021a78:	20006f18 	.word	0x20006f18
 8021a7c:	20006f30 	.word	0x20006f30
 8021a80:	08029e10 	.word	0x08029e10
 8021a84:	20006f20 	.word	0x20006f20
 8021a88:	20006f28 	.word	0x20006f28
 8021a8c:	20006f0c 	.word	0x20006f0c
 8021a90:	20006f2c 	.word	0x20006f2c
 8021a94:	20006f34 	.word	0x20006f34
 8021a98:	20006f35 	.word	0x20006f35

08021a9c <MusicPlayerSound_Init>:
/**/
void MusicPlayerSound_Init(bool theme){
 8021a9c:	b590      	push	{r4, r7, lr}
 8021a9e:	b087      	sub	sp, #28
 8021aa0:	af02      	add	r7, sp, #8
 8021aa2:	4603      	mov	r3, r0
 8021aa4:	71fb      	strb	r3, [r7, #7]

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 8021aa6:	496b      	ldr	r1, [pc, #428]	; (8021c54 <MusicPlayerSound_Init+0x1b8>)
 8021aa8:	486b      	ldr	r0, [pc, #428]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021aaa:	f7e6 fe5f 	bl	800876c <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8021aae:	4b6a      	ldr	r3, [pc, #424]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021ab0:	2200      	movs	r2, #0
 8021ab2:	841a      	strh	r2, [r3, #32]
    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8021ab4:	79fb      	ldrb	r3, [r7, #7]
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d003      	beq.n	8021ac2 <MusicPlayerSound_Init+0x26>
 8021aba:	4a67      	ldr	r2, [pc, #412]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021abc:	4b67      	ldr	r3, [pc, #412]	; (8021c5c <MusicPlayerSound_Init+0x1c0>)
 8021abe:	881b      	ldrh	r3, [r3, #0]
 8021ac0:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;	//373737
 8021ac2:	4b65      	ldr	r3, [pc, #404]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021ac4:	4a66      	ldr	r2, [pc, #408]	; (8021c60 <MusicPlayerSound_Init+0x1c4>)
 8021ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 8021ac8:	79fb      	ldrb	r3, [r7, #7]
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d00e      	beq.n	8021aec <MusicPlayerSound_Init+0x50>
        obj_Style.body.main_color   = lv_color_make(0x00, 0x00, 0x00);
 8021ace:	4c62      	ldr	r4, [pc, #392]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	2100      	movs	r1, #0
 8021ad4:	2000      	movs	r0, #0
 8021ad6:	f7ff feb5 	bl	8021844 <lv_color_make>
 8021ada:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x00, 0x00, 0x00);
 8021adc:	4c5e      	ldr	r4, [pc, #376]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021ade:	2200      	movs	r2, #0
 8021ae0:	2100      	movs	r1, #0
 8021ae2:	2000      	movs	r0, #0
 8021ae4:	f7ff feae 	bl	8021844 <lv_color_make>
 8021ae8:	80a0      	strh	r0, [r4, #4]
 8021aea:	e00d      	b.n	8021b08 <MusicPlayerSound_Init+0x6c>
    }else {
        obj_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8021aec:	4c5a      	ldr	r4, [pc, #360]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021aee:	2237      	movs	r2, #55	; 0x37
 8021af0:	2137      	movs	r1, #55	; 0x37
 8021af2:	2037      	movs	r0, #55	; 0x37
 8021af4:	f7ff fea6 	bl	8021844 <lv_color_make>
 8021af8:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 8021afa:	4c57      	ldr	r4, [pc, #348]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021afc:	2237      	movs	r2, #55	; 0x37
 8021afe:	2137      	movs	r1, #55	; 0x37
 8021b00:	2037      	movs	r0, #55	; 0x37
 8021b02:	f7ff fe9f 	bl	8021844 <lv_color_make>
 8021b06:	80a0      	strh	r0, [r4, #4]
    }
    obj_Style.body.radius= 10;
 8021b08:	4b53      	ldr	r3, [pc, #332]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021b0a:	220a      	movs	r2, #10
 8021b0c:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8021b0e:	4b52      	ldr	r3, [pc, #328]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021b10:	22c8      	movs	r2, #200	; 0xc8
 8021b12:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 8021b14:	4950      	ldr	r1, [pc, #320]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021b16:	4853      	ldr	r0, [pc, #332]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b18:	f7e6 fe28 	bl	800876c <lv_style_copy>
    if(theme){
 8021b1c:	79fb      	ldrb	r3, [r7, #7]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d00e      	beq.n	8021b40 <MusicPlayerSound_Init+0xa4>
        indic_Style.body.main_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 8021b22:	4c50      	ldr	r4, [pc, #320]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b24:	22c0      	movs	r2, #192	; 0xc0
 8021b26:	21c0      	movs	r1, #192	; 0xc0
 8021b28:	20c0      	movs	r0, #192	; 0xc0
 8021b2a:	f7ff fe8b 	bl	8021844 <lv_color_make>
 8021b2e:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 8021b30:	4c4c      	ldr	r4, [pc, #304]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b32:	22c0      	movs	r2, #192	; 0xc0
 8021b34:	21c0      	movs	r1, #192	; 0xc0
 8021b36:	20c0      	movs	r0, #192	; 0xc0
 8021b38:	f7ff fe84 	bl	8021844 <lv_color_make>
 8021b3c:	80a0      	strh	r0, [r4, #4]
 8021b3e:	e00d      	b.n	8021b5c <MusicPlayerSound_Init+0xc0>
    }else {
        indic_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8021b40:	4c48      	ldr	r4, [pc, #288]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b42:	2237      	movs	r2, #55	; 0x37
 8021b44:	2137      	movs	r1, #55	; 0x37
 8021b46:	2037      	movs	r0, #55	; 0x37
 8021b48:	f7ff fe7c 	bl	8021844 <lv_color_make>
 8021b4c:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 8021b4e:	4c45      	ldr	r4, [pc, #276]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b50:	2237      	movs	r2, #55	; 0x37
 8021b52:	2137      	movs	r1, #55	; 0x37
 8021b54:	2037      	movs	r0, #55	; 0x37
 8021b56:	f7ff fe75 	bl	8021844 <lv_color_make>
 8021b5a:	80a0      	strh	r0, [r4, #4]
    }
    indic_Style.body.opa=255;
 8021b5c:	4b41      	ldr	r3, [pc, #260]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b5e:	22ff      	movs	r2, #255	; 0xff
 8021b60:	721a      	strb	r2, [r3, #8]

    MP_soundValBar = lv_bar_create(lv_scr_act(), NULL);
 8021b62:	f7ff fea7 	bl	80218b4 <lv_scr_act>
 8021b66:	4603      	mov	r3, r0
 8021b68:	2100      	movs	r1, #0
 8021b6a:	4618      	mov	r0, r3
 8021b6c:	f7f3 f980 	bl	8014e70 <lv_bar_create>
 8021b70:	4602      	mov	r2, r0
 8021b72:	4b3d      	ldr	r3, [pc, #244]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021b74:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_BG, &obj_Style);
 8021b76:	4b3c      	ldr	r3, [pc, #240]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021b78:	681b      	ldr	r3, [r3, #0]
 8021b7a:	4a37      	ldr	r2, [pc, #220]	; (8021c58 <MusicPlayerSound_Init+0x1bc>)
 8021b7c:	2100      	movs	r1, #0
 8021b7e:	4618      	mov	r0, r3
 8021b80:	f7f3 fb0c 	bl	801519c <lv_bar_set_style>
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_INDIC, &indic_Style);
 8021b84:	4b38      	ldr	r3, [pc, #224]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	4a36      	ldr	r2, [pc, #216]	; (8021c64 <MusicPlayerSound_Init+0x1c8>)
 8021b8a:	2101      	movs	r1, #1
 8021b8c:	4618      	mov	r0, r3
 8021b8e:	f7f3 fb05 	bl	801519c <lv_bar_set_style>
    lv_obj_set_size(MP_soundValBar, 150, 25);
 8021b92:	4b35      	ldr	r3, [pc, #212]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021b94:	681b      	ldr	r3, [r3, #0]
 8021b96:	2219      	movs	r2, #25
 8021b98:	2196      	movs	r1, #150	; 0x96
 8021b9a:	4618      	mov	r0, r3
 8021b9c:	f7e4 faff 	bl	800619e <lv_obj_set_size>
    lv_obj_align(MP_soundValBar, NULL, LV_ALIGN_CENTER, 0, -100);
 8021ba0:	4b31      	ldr	r3, [pc, #196]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021ba2:	6818      	ldr	r0, [r3, #0]
 8021ba4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8021ba8:	9300      	str	r3, [sp, #0]
 8021baa:	2300      	movs	r3, #0
 8021bac:	2200      	movs	r2, #0
 8021bae:	2100      	movs	r1, #0
 8021bb0:	f7e4 fb98 	bl	80062e4 <lv_obj_align>
    lv_bar_set_range(MP_soundValBar,0,100);
 8021bb4:	4b2c      	ldr	r3, [pc, #176]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	2264      	movs	r2, #100	; 0x64
 8021bba:	2100      	movs	r1, #0
 8021bbc:	4618      	mov	r0, r3
 8021bbe:	f7f3 faa1 	bl	8015104 <lv_bar_set_range>
    lv_bar_set_value(MP_soundValBar, 0, LV_ANIM_OFF);
 8021bc2:	4b29      	ldr	r3, [pc, #164]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	2200      	movs	r2, #0
 8021bc8:	2100      	movs	r1, #0
 8021bca:	4618      	mov	r0, r3
 8021bcc:	f7f3 fa16 	bl	8014ffc <lv_bar_set_value>

    lv_obj_t * plusLbl = lv_label_create(lv_scr_act(), NULL);
 8021bd0:	f7ff fe70 	bl	80218b4 <lv_scr_act>
 8021bd4:	4603      	mov	r3, r0
 8021bd6:	2100      	movs	r1, #0
 8021bd8:	4618      	mov	r0, r3
 8021bda:	f7f7 fc9b 	bl	8019514 <lv_label_create>
 8021bde:	60f8      	str	r0, [r7, #12]
    lv_label_set_recolor(plusLbl, true);
 8021be0:	2101      	movs	r1, #1
 8021be2:	68f8      	ldr	r0, [r7, #12]
 8021be4:	f7f7 fee4 	bl	80199b0 <lv_label_set_recolor>
	lv_label_set_text(plusLbl, "#FFFFFF +#");
 8021be8:	4920      	ldr	r1, [pc, #128]	; (8021c6c <MusicPlayerSound_Init+0x1d0>)
 8021bea:	68f8      	ldr	r0, [r7, #12]
 8021bec:	f7f7 fdc4 	bl	8019778 <lv_label_set_text>
    lv_arc_set_style(plusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021bf0:	4a1f      	ldr	r2, [pc, #124]	; (8021c70 <MusicPlayerSound_Init+0x1d4>)
 8021bf2:	2100      	movs	r1, #0
 8021bf4:	68f8      	ldr	r0, [r7, #12]
 8021bf6:	f7f2 ff30 	bl	8014a5a <lv_arc_set_style>
 	lv_obj_align(plusLbl, MP_soundValBar, LV_ALIGN_CENTER, 65, 0);
 8021bfa:	4b1b      	ldr	r3, [pc, #108]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021bfc:	6819      	ldr	r1, [r3, #0]
 8021bfe:	2300      	movs	r3, #0
 8021c00:	9300      	str	r3, [sp, #0]
 8021c02:	2341      	movs	r3, #65	; 0x41
 8021c04:	2200      	movs	r2, #0
 8021c06:	68f8      	ldr	r0, [r7, #12]
 8021c08:	f7e4 fb6c 	bl	80062e4 <lv_obj_align>

    lv_obj_t * minusLbl = lv_label_create(lv_scr_act(), NULL);
 8021c0c:	f7ff fe52 	bl	80218b4 <lv_scr_act>
 8021c10:	4603      	mov	r3, r0
 8021c12:	2100      	movs	r1, #0
 8021c14:	4618      	mov	r0, r3
 8021c16:	f7f7 fc7d 	bl	8019514 <lv_label_create>
 8021c1a:	60b8      	str	r0, [r7, #8]
    lv_label_set_recolor(minusLbl, true);
 8021c1c:	2101      	movs	r1, #1
 8021c1e:	68b8      	ldr	r0, [r7, #8]
 8021c20:	f7f7 fec6 	bl	80199b0 <lv_label_set_recolor>
	lv_label_set_text(minusLbl, "#FFFFFF -#");
 8021c24:	4913      	ldr	r1, [pc, #76]	; (8021c74 <MusicPlayerSound_Init+0x1d8>)
 8021c26:	68b8      	ldr	r0, [r7, #8]
 8021c28:	f7f7 fda6 	bl	8019778 <lv_label_set_text>
    lv_arc_set_style(minusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021c2c:	4a10      	ldr	r2, [pc, #64]	; (8021c70 <MusicPlayerSound_Init+0x1d4>)
 8021c2e:	2100      	movs	r1, #0
 8021c30:	68b8      	ldr	r0, [r7, #8]
 8021c32:	f7f2 ff12 	bl	8014a5a <lv_arc_set_style>
 	lv_obj_align(minusLbl, MP_soundValBar, LV_ALIGN_CENTER, -65, 0);
 8021c36:	4b0c      	ldr	r3, [pc, #48]	; (8021c68 <MusicPlayerSound_Init+0x1cc>)
 8021c38:	6819      	ldr	r1, [r3, #0]
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	9300      	str	r3, [sp, #0]
 8021c3e:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8021c42:	2200      	movs	r2, #0
 8021c44:	68b8      	ldr	r0, [r7, #8]
 8021c46:	f7e4 fb4d 	bl	80062e4 <lv_obj_align>

}
 8021c4a:	bf00      	nop
 8021c4c:	3714      	adds	r7, #20
 8021c4e:	46bd      	mov	sp, r7
 8021c50:	bd90      	pop	{r4, r7, pc}
 8021c52:	bf00      	nop
 8021c54:	20006c68 	.word	0x20006c68
 8021c58:	20005fdc 	.word	0x20005fdc
 8021c5c:	08029e30 	.word	0x08029e30
 8021c60:	200027e8 	.word	0x200027e8
 8021c64:	20006018 	.word	0x20006018
 8021c68:	20006f0c 	.word	0x20006f0c
 8021c6c:	08029e18 	.word	0x08029e18
 8021c70:	20005fa0 	.word	0x20005fa0
 8021c74:	08029e24 	.word	0x08029e24

08021c78 <MusicPlayerPlayingVal_Init>:
/*his function using for initialization playing statu image obj.*/
void MusicPlayerPlayingVal_Init(bool theme){
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b084      	sub	sp, #16
 8021c7c:	af02      	add	r7, sp, #8
 8021c7e:	4603      	mov	r3, r0
 8021c80:	71fb      	strb	r3, [r7, #7]

	MP_PlayingVAl_Img = lv_img_create(lv_scr_act(), NULL);
 8021c82:	f7ff fe17 	bl	80218b4 <lv_scr_act>
 8021c86:	4603      	mov	r3, r0
 8021c88:	2100      	movs	r1, #0
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	f7f7 f8b6 	bl	8018dfc <lv_img_create>
 8021c90:	4602      	mov	r2, r0
 8021c92:	4b0b      	ldr	r3, [pc, #44]	; (8021cc0 <MusicPlayerPlayingVal_Init+0x48>)
 8021c94:	601a      	str	r2, [r3, #0]
	MusicPlayerImgSet(MP_statu,theme);
 8021c96:	4b0b      	ldr	r3, [pc, #44]	; (8021cc4 <MusicPlayerPlayingVal_Init+0x4c>)
 8021c98:	781b      	ldrb	r3, [r3, #0]
 8021c9a:	79fa      	ldrb	r2, [r7, #7]
 8021c9c:	4611      	mov	r1, r2
 8021c9e:	4618      	mov	r0, r3
 8021ca0:	f000 f8fe 	bl	8021ea0 <MusicPlayerImgSet>
	lv_obj_align(MP_PlayingVAl_Img, NULL, LV_ALIGN_CENTER, 0,0);
 8021ca4:	4b06      	ldr	r3, [pc, #24]	; (8021cc0 <MusicPlayerPlayingVal_Init+0x48>)
 8021ca6:	6818      	ldr	r0, [r3, #0]
 8021ca8:	2300      	movs	r3, #0
 8021caa:	9300      	str	r3, [sp, #0]
 8021cac:	2300      	movs	r3, #0
 8021cae:	2200      	movs	r2, #0
 8021cb0:	2100      	movs	r1, #0
 8021cb2:	f7e4 fb17 	bl	80062e4 <lv_obj_align>

}
 8021cb6:	bf00      	nop
 8021cb8:	3708      	adds	r7, #8
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	bd80      	pop	{r7, pc}
 8021cbe:	bf00      	nop
 8021cc0:	20006f10 	.word	0x20006f10
 8021cc4:	20006f34 	.word	0x20006f34

08021cc8 <MusicPlayerDescriptionLbl_Init>:
/*This funct}ion using for initialization description(name & songer) of music */
void MusicPlayerDescriptionLbl_Init(bool theme){
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	b084      	sub	sp, #16
 8021ccc:	af02      	add	r7, sp, #8
 8021cce:	4603      	mov	r3, r0
 8021cd0:	71fb      	strb	r3, [r7, #7]

 	MP_SongNameLbl = lv_label_create(lv_scr_act(), NULL);
 8021cd2:	f7ff fdef 	bl	80218b4 <lv_scr_act>
 8021cd6:	4603      	mov	r3, r0
 8021cd8:	2100      	movs	r1, #0
 8021cda:	4618      	mov	r0, r3
 8021cdc:	f7f7 fc1a 	bl	8019514 <lv_label_create>
 8021ce0:	4602      	mov	r2, r0
 8021ce2:	4b24      	ldr	r3, [pc, #144]	; (8021d74 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021ce4:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SongNameLbl, 240);
 8021ce6:	4b23      	ldr	r3, [pc, #140]	; (8021d74 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	21f0      	movs	r1, #240	; 0xf0
 8021cec:	4618      	mov	r0, r3
 8021cee:	f7e4 facf 	bl	8006290 <lv_obj_set_width>
	lv_label_set_text(MP_SongNameLbl, "song name");
 8021cf2:	4b20      	ldr	r3, [pc, #128]	; (8021d74 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	4920      	ldr	r1, [pc, #128]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xb0>)
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f7f7 fd3d 	bl	8019778 <lv_label_set_text>
    lv_arc_set_style(MP_SongNameLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021cfe:	4b1d      	ldr	r3, [pc, #116]	; (8021d74 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	4a1e      	ldr	r2, [pc, #120]	; (8021d7c <MusicPlayerDescriptionLbl_Init+0xb4>)
 8021d04:	2100      	movs	r1, #0
 8021d06:	4618      	mov	r0, r3
 8021d08:	f7f2 fea7 	bl	8014a5a <lv_arc_set_style>
 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8021d0c:	4b19      	ldr	r3, [pc, #100]	; (8021d74 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021d0e:	6818      	ldr	r0, [r3, #0]
 8021d10:	2332      	movs	r3, #50	; 0x32
 8021d12:	9300      	str	r3, [sp, #0]
 8021d14:	2300      	movs	r3, #0
 8021d16:	2200      	movs	r2, #0
 8021d18:	2100      	movs	r1, #0
 8021d1a:	f7e4 fae3 	bl	80062e4 <lv_obj_align>

	MP_SingerLbl = lv_label_create(lv_scr_act(), NULL);
 8021d1e:	f7ff fdc9 	bl	80218b4 <lv_scr_act>
 8021d22:	4603      	mov	r3, r0
 8021d24:	2100      	movs	r1, #0
 8021d26:	4618      	mov	r0, r3
 8021d28:	f7f7 fbf4 	bl	8019514 <lv_label_create>
 8021d2c:	4602      	mov	r2, r0
 8021d2e:	4b14      	ldr	r3, [pc, #80]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d30:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SingerLbl, 240);
 8021d32:	4b13      	ldr	r3, [pc, #76]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d34:	681b      	ldr	r3, [r3, #0]
 8021d36:	21f0      	movs	r1, #240	; 0xf0
 8021d38:	4618      	mov	r0, r3
 8021d3a:	f7e4 faa9 	bl	8006290 <lv_obj_set_width>
	lv_label_set_text(MP_SingerLbl, "song actrist");
 8021d3e:	4b10      	ldr	r3, [pc, #64]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	4910      	ldr	r1, [pc, #64]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xbc>)
 8021d44:	4618      	mov	r0, r3
 8021d46:	f7f7 fd17 	bl	8019778 <lv_label_set_text>
    lv_arc_set_style(MP_SingerLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021d4a:	4b0d      	ldr	r3, [pc, #52]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	4a0b      	ldr	r2, [pc, #44]	; (8021d7c <MusicPlayerDescriptionLbl_Init+0xb4>)
 8021d50:	2100      	movs	r1, #0
 8021d52:	4618      	mov	r0, r3
 8021d54:	f7f2 fe81 	bl	8014a5a <lv_arc_set_style>
 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 8021d58:	4b09      	ldr	r3, [pc, #36]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d5a:	6818      	ldr	r0, [r3, #0]
 8021d5c:	2355      	movs	r3, #85	; 0x55
 8021d5e:	9300      	str	r3, [sp, #0]
 8021d60:	2300      	movs	r3, #0
 8021d62:	2200      	movs	r2, #0
 8021d64:	2100      	movs	r1, #0
 8021d66:	f7e4 fabd 	bl	80062e4 <lv_obj_align>


}
 8021d6a:	bf00      	nop
 8021d6c:	3708      	adds	r7, #8
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	bd80      	pop	{r7, pc}
 8021d72:	bf00      	nop
 8021d74:	20006f30 	.word	0x20006f30
 8021d78:	08029e34 	.word	0x08029e34
 8021d7c:	20005fa0 	.word	0x20005fa0
 8021d80:	20006f28 	.word	0x20006f28
 8021d84:	08029e40 	.word	0x08029e40

08021d88 <MusicPlayer_ButtonController>:
/*This function using for control to buttons*/
void MusicPlayer_ButtonController(void){
 8021d88:	b580      	push	{r7, lr}
 8021d8a:	af00      	add	r7, sp, #0
	if(!MP_isButtonPressed){
 8021d8c:	4b2b      	ldr	r3, [pc, #172]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021d8e:	781b      	ldrb	r3, [r3, #0]
 8021d90:	f083 0301 	eor.w	r3, r3, #1
 8021d94:	b2db      	uxtb	r3, r3
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d04e      	beq.n	8021e38 <MusicPlayer_ButtonController+0xb0>
		if(1==tos_LeftButton_Listenner_For_MenuControl()) {
 8021d9a:	f004 fcd3 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 8021d9e:	4603      	mov	r3, r0
 8021da0:	2b01      	cmp	r3, #1
 8021da2:	d119      	bne.n	8021dd8 <MusicPlayer_ButtonController+0x50>
					MP_isButtonPressed=true;
 8021da4:	4b25      	ldr	r3, [pc, #148]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021da6:	2201      	movs	r2, #1
 8021da8:	701a      	strb	r2, [r3, #0]
				  if(MP_buttonMode) soundVolumeController(false);
 8021daa:	4b25      	ldr	r3, [pc, #148]	; (8021e40 <MusicPlayer_ButtonController+0xb8>)
 8021dac:	781b      	ldrb	r3, [r3, #0]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d003      	beq.n	8021dba <MusicPlayer_ButtonController+0x32>
 8021db2:	2000      	movs	r0, #0
 8021db4:	f000 f848 	bl	8021e48 <soundVolumeController>
 8021db8:	e00e      	b.n	8021dd8 <MusicPlayer_ButtonController+0x50>
				  else{
					  if((1==MP_statu) || (2==MP_statu)) MP_statu=0;
 8021dba:	4b22      	ldr	r3, [pc, #136]	; (8021e44 <MusicPlayer_ButtonController+0xbc>)
 8021dbc:	781b      	ldrb	r3, [r3, #0]
 8021dbe:	2b01      	cmp	r3, #1
 8021dc0:	d003      	beq.n	8021dca <MusicPlayer_ButtonController+0x42>
 8021dc2:	4b20      	ldr	r3, [pc, #128]	; (8021e44 <MusicPlayer_ButtonController+0xbc>)
 8021dc4:	781b      	ldrb	r3, [r3, #0]
 8021dc6:	2b02      	cmp	r3, #2
 8021dc8:	d103      	bne.n	8021dd2 <MusicPlayer_ButtonController+0x4a>
 8021dca:	4b1e      	ldr	r3, [pc, #120]	; (8021e44 <MusicPlayer_ButtonController+0xbc>)
 8021dcc:	2200      	movs	r2, #0
 8021dce:	701a      	strb	r2, [r3, #0]
 8021dd0:	e002      	b.n	8021dd8 <MusicPlayer_ButtonController+0x50>
					  else MP_statu=1;
 8021dd2:	4b1c      	ldr	r3, [pc, #112]	; (8021e44 <MusicPlayer_ButtonController+0xbc>)
 8021dd4:	2201      	movs	r2, #1
 8021dd6:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if(2==tos_LeftButton_Listenner_For_MenuControl()){
 8021dd8:	f004 fcb4 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 8021ddc:	4603      	mov	r3, r0
 8021dde:	2b02      	cmp	r3, #2
 8021de0:	d105      	bne.n	8021dee <MusicPlayer_ButtonController+0x66>
					MP_isButtonPressed=true;
 8021de2:	4b16      	ldr	r3, [pc, #88]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021de4:	2201      	movs	r2, #1
 8021de6:	701a      	strb	r2, [r3, #0]
				   MP_statu=2;
 8021de8:	4b16      	ldr	r3, [pc, #88]	; (8021e44 <MusicPlayer_ButtonController+0xbc>)
 8021dea:	2202      	movs	r2, #2
 8021dec:	701a      	strb	r2, [r3, #0]
			  }

			  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8021dee:	f004 fc7d 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8021df2:	4603      	mov	r3, r0
 8021df4:	2b01      	cmp	r3, #1
 8021df6:	d109      	bne.n	8021e0c <MusicPlayer_ButtonController+0x84>
					MP_isButtonPressed=true;
 8021df8:	4b10      	ldr	r3, [pc, #64]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021dfa:	2201      	movs	r2, #1
 8021dfc:	701a      	strb	r2, [r3, #0]
				  if(MP_buttonMode) soundVolumeController(true);
 8021dfe:	4b10      	ldr	r3, [pc, #64]	; (8021e40 <MusicPlayer_ButtonController+0xb8>)
 8021e00:	781b      	ldrb	r3, [r3, #0]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d002      	beq.n	8021e0c <MusicPlayer_ButtonController+0x84>
 8021e06:	2001      	movs	r0, #1
 8021e08:	f000 f81e 	bl	8021e48 <soundVolumeController>

			  }
			  if(2==tos_RightButton_Listenner_For_MenuControl()){
 8021e0c:	f004 fc6e 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8021e10:	4603      	mov	r3, r0
 8021e12:	2b02      	cmp	r3, #2
 8021e14:	d10d      	bne.n	8021e32 <MusicPlayer_ButtonController+0xaa>
					MP_isButtonPressed=true;
 8021e16:	4b09      	ldr	r3, [pc, #36]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021e18:	2201      	movs	r2, #1
 8021e1a:	701a      	strb	r2, [r3, #0]
				  if(MP_buttonMode)MP_buttonMode=false;
 8021e1c:	4b08      	ldr	r3, [pc, #32]	; (8021e40 <MusicPlayer_ButtonController+0xb8>)
 8021e1e:	781b      	ldrb	r3, [r3, #0]
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	d003      	beq.n	8021e2c <MusicPlayer_ButtonController+0xa4>
 8021e24:	4b06      	ldr	r3, [pc, #24]	; (8021e40 <MusicPlayer_ButtonController+0xb8>)
 8021e26:	2200      	movs	r2, #0
 8021e28:	701a      	strb	r2, [r3, #0]
 8021e2a:	e002      	b.n	8021e32 <MusicPlayer_ButtonController+0xaa>
				  else MP_buttonMode=true;
 8021e2c:	4b04      	ldr	r3, [pc, #16]	; (8021e40 <MusicPlayer_ButtonController+0xb8>)
 8021e2e:	2201      	movs	r2, #1
 8021e30:	701a      	strb	r2, [r3, #0]
			  }
				MP_isButtonPressed=false;
 8021e32:	4b02      	ldr	r3, [pc, #8]	; (8021e3c <MusicPlayer_ButtonController+0xb4>)
 8021e34:	2200      	movs	r2, #0
 8021e36:	701a      	strb	r2, [r3, #0]
	}

}
 8021e38:	bf00      	nop
 8021e3a:	bd80      	pop	{r7, pc}
 8021e3c:	20006f14 	.word	0x20006f14
 8021e40:	20006f24 	.word	0x20006f24
 8021e44:	20006f34 	.word	0x20006f34

08021e48 <soundVolumeController>:
/*This function using for plus or minus volume
 * @param vol
 * true -> plus
 * false -> minus */
void soundVolumeController(bool vol){
 8021e48:	b480      	push	{r7}
 8021e4a:	b083      	sub	sp, #12
 8021e4c:	af00      	add	r7, sp, #0
 8021e4e:	4603      	mov	r3, r0
 8021e50:	71fb      	strb	r3, [r7, #7]
	if(vol && MP_SoundVal<100) MP_SoundVal+=5;
 8021e52:	79fb      	ldrb	r3, [r7, #7]
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d00a      	beq.n	8021e6e <soundVolumeController+0x26>
 8021e58:	4b10      	ldr	r3, [pc, #64]	; (8021e9c <soundVolumeController+0x54>)
 8021e5a:	781b      	ldrb	r3, [r3, #0]
 8021e5c:	2b63      	cmp	r3, #99	; 0x63
 8021e5e:	d806      	bhi.n	8021e6e <soundVolumeController+0x26>
 8021e60:	4b0e      	ldr	r3, [pc, #56]	; (8021e9c <soundVolumeController+0x54>)
 8021e62:	781b      	ldrb	r3, [r3, #0]
 8021e64:	3305      	adds	r3, #5
 8021e66:	b2da      	uxtb	r2, r3
 8021e68:	4b0c      	ldr	r3, [pc, #48]	; (8021e9c <soundVolumeController+0x54>)
 8021e6a:	701a      	strb	r2, [r3, #0]
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
}
 8021e6c:	e00f      	b.n	8021e8e <soundVolumeController+0x46>
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
 8021e6e:	79fb      	ldrb	r3, [r7, #7]
 8021e70:	f083 0301 	eor.w	r3, r3, #1
 8021e74:	b2db      	uxtb	r3, r3
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	d009      	beq.n	8021e8e <soundVolumeController+0x46>
 8021e7a:	4b08      	ldr	r3, [pc, #32]	; (8021e9c <soundVolumeController+0x54>)
 8021e7c:	781b      	ldrb	r3, [r3, #0]
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d005      	beq.n	8021e8e <soundVolumeController+0x46>
 8021e82:	4b06      	ldr	r3, [pc, #24]	; (8021e9c <soundVolumeController+0x54>)
 8021e84:	781b      	ldrb	r3, [r3, #0]
 8021e86:	3b05      	subs	r3, #5
 8021e88:	b2da      	uxtb	r2, r3
 8021e8a:	4b04      	ldr	r3, [pc, #16]	; (8021e9c <soundVolumeController+0x54>)
 8021e8c:	701a      	strb	r2, [r3, #0]
}
 8021e8e:	bf00      	nop
 8021e90:	370c      	adds	r7, #12
 8021e92:	46bd      	mov	sp, r7
 8021e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e98:	4770      	bx	lr
 8021e9a:	bf00      	nop
 8021e9c:	20006f2c 	.word	0x20006f2c

08021ea0 <MusicPlayerImgSet>:
 * 1 -> pause
 * 2 -> stop
 * @param theme using for image backgraud select
 * false -> white
 * true -> black*/
void  MusicPlayerImgSet(uint8_t statu,bool theme){
 8021ea0:	b580      	push	{r7, lr}
 8021ea2:	b082      	sub	sp, #8
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	4603      	mov	r3, r0
 8021ea8:	460a      	mov	r2, r1
 8021eaa:	71fb      	strb	r3, [r7, #7]
 8021eac:	4613      	mov	r3, r2
 8021eae:	71bb      	strb	r3, [r7, #6]

	switch(statu){
 8021eb0:	79fb      	ldrb	r3, [r7, #7]
 8021eb2:	2b01      	cmp	r3, #1
 8021eb4:	d015      	beq.n	8021ee2 <MusicPlayerImgSet+0x42>
 8021eb6:	2b02      	cmp	r3, #2
 8021eb8:	d024      	beq.n	8021f04 <MusicPlayerImgSet+0x64>
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d000      	beq.n	8021ec0 <MusicPlayerImgSet+0x20>
		break;
	case 2:
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
		break;
	default: return;
 8021ebe:	e032      	b.n	8021f26 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&playBlack50x50 );
 8021ec0:	79bb      	ldrb	r3, [r7, #6]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d006      	beq.n	8021ed4 <MusicPlayerImgSet+0x34>
 8021ec6:	4b19      	ldr	r3, [pc, #100]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	4919      	ldr	r1, [pc, #100]	; (8021f30 <MusicPlayerImgSet+0x90>)
 8021ecc:	4618      	mov	r0, r3
 8021ece:	f7f7 f833 	bl	8018f38 <lv_img_set_src>
		break;
 8021ed2:	e028      	b.n	8021f26 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&playWhite50x50 );
 8021ed4:	4b15      	ldr	r3, [pc, #84]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	4916      	ldr	r1, [pc, #88]	; (8021f34 <MusicPlayerImgSet+0x94>)
 8021eda:	4618      	mov	r0, r3
 8021edc:	f7f7 f82c 	bl	8018f38 <lv_img_set_src>
		break;
 8021ee0:	e021      	b.n	8021f26 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&pauseBlack50x50 );
 8021ee2:	79bb      	ldrb	r3, [r7, #6]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d006      	beq.n	8021ef6 <MusicPlayerImgSet+0x56>
 8021ee8:	4b10      	ldr	r3, [pc, #64]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	4912      	ldr	r1, [pc, #72]	; (8021f38 <MusicPlayerImgSet+0x98>)
 8021eee:	4618      	mov	r0, r3
 8021ef0:	f7f7 f822 	bl	8018f38 <lv_img_set_src>
		break;
 8021ef4:	e017      	b.n	8021f26 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&pauseWhite50x50 );
 8021ef6:	4b0d      	ldr	r3, [pc, #52]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	4910      	ldr	r1, [pc, #64]	; (8021f3c <MusicPlayerImgSet+0x9c>)
 8021efc:	4618      	mov	r0, r3
 8021efe:	f7f7 f81b 	bl	8018f38 <lv_img_set_src>
		break;
 8021f02:	e010      	b.n	8021f26 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
 8021f04:	79bb      	ldrb	r3, [r7, #6]
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d006      	beq.n	8021f18 <MusicPlayerImgSet+0x78>
 8021f0a:	4b08      	ldr	r3, [pc, #32]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	490c      	ldr	r1, [pc, #48]	; (8021f40 <MusicPlayerImgSet+0xa0>)
 8021f10:	4618      	mov	r0, r3
 8021f12:	f7f7 f811 	bl	8018f38 <lv_img_set_src>
		break;
 8021f16:	e005      	b.n	8021f24 <MusicPlayerImgSet+0x84>
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
 8021f18:	4b04      	ldr	r3, [pc, #16]	; (8021f2c <MusicPlayerImgSet+0x8c>)
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	4909      	ldr	r1, [pc, #36]	; (8021f44 <MusicPlayerImgSet+0xa4>)
 8021f1e:	4618      	mov	r0, r3
 8021f20:	f7f7 f80a 	bl	8018f38 <lv_img_set_src>
		break;
 8021f24:	bf00      	nop
	}
}
 8021f26:	3708      	adds	r7, #8
 8021f28:	46bd      	mov	sp, r7
 8021f2a:	bd80      	pop	{r7, pc}
 8021f2c:	20006f10 	.word	0x20006f10
 8021f30:	0803d610 	.word	0x0803d610
 8021f34:	0803e9a4 	.word	0x0803e9a4
 8021f38:	0803aee8 	.word	0x0803aee8
 8021f3c:	0803c27c 	.word	0x0803c27c
 8021f40:	08040fb0 	.word	0x08040fb0
 8021f44:	08042344 	.word	0x08042344

08021f48 <MusicPlayer_TaskControllerSet>:
//Setter Getter Functions
void MusicPlayer_TaskControllerSet(bool active){
 8021f48:	b480      	push	{r7}
 8021f4a:	b083      	sub	sp, #12
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	4603      	mov	r3, r0
 8021f50:	71fb      	strb	r3, [r7, #7]
	MP_taskController = active;
 8021f52:	4a04      	ldr	r2, [pc, #16]	; (8021f64 <MusicPlayer_TaskControllerSet+0x1c>)
 8021f54:	79fb      	ldrb	r3, [r7, #7]
 8021f56:	7013      	strb	r3, [r2, #0]
}
 8021f58:	bf00      	nop
 8021f5a:	370c      	adds	r7, #12
 8021f5c:	46bd      	mov	sp, r7
 8021f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f62:	4770      	bx	lr
 8021f64:	20006f1c 	.word	0x20006f1c

08021f68 <MusicPlayer_TaskControllerGet>:
	MP_SongName = name;
}
void MusicPlayer_MP_SoundVAlSet(uint8_t volume){
	MP_SoundVal = volume;
}
bool MusicPlayer_TaskControllerGet(void){
 8021f68:	b480      	push	{r7}
 8021f6a:	af00      	add	r7, sp, #0
	return MP_taskController;
 8021f6c:	4b03      	ldr	r3, [pc, #12]	; (8021f7c <MusicPlayer_TaskControllerGet+0x14>)
 8021f6e:	781b      	ldrb	r3, [r3, #0]
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	46bd      	mov	sp, r7
 8021f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f78:	4770      	bx	lr
 8021f7a:	bf00      	nop
 8021f7c:	20006f1c 	.word	0x20006f1c

08021f80 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8021f80:	b580      	push	{r7, lr}
 8021f82:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8021f84:	f7f0 fb10 	bl	80125a8 <lv_disp_get_default>
 8021f88:	4603      	mov	r3, r0
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	f7e2 ffd8 	bl	8004f40 <lv_disp_get_scr_act>
 8021f90:	4603      	mov	r3, r0
}
 8021f92:	4618      	mov	r0, r3
 8021f94:	bd80      	pop	{r7, pc}

08021f96 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8021f96:	b580      	push	{r7, lr}
 8021f98:	b084      	sub	sp, #16
 8021f9a:	af00      	add	r7, sp, #0
 8021f9c:	60f8      	str	r0, [r7, #12]
 8021f9e:	460b      	mov	r3, r1
 8021fa0:	607a      	str	r2, [r7, #4]
 8021fa2:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8021fa4:	6879      	ldr	r1, [r7, #4]
 8021fa6:	68f8      	ldr	r0, [r7, #12]
 8021fa8:	f7e4 fe41 	bl	8006c2e <lv_obj_set_style>
}
 8021fac:	bf00      	nop
 8021fae:	3710      	adds	r7, #16
 8021fb0:	46bd      	mov	sp, r7
 8021fb2:	bd80      	pop	{r7, pc}

08021fb4 <lv_cb_set_checked>:
 * Set the state of the check box
 * @param cb pointer to a check box object
 * @param checked true: make the check box checked; false: make it unchecked
 */
static inline void lv_cb_set_checked(lv_obj_t * cb, bool checked)
{
 8021fb4:	b580      	push	{r7, lr}
 8021fb6:	b082      	sub	sp, #8
 8021fb8:	af00      	add	r7, sp, #0
 8021fba:	6078      	str	r0, [r7, #4]
 8021fbc:	460b      	mov	r3, r1
 8021fbe:	70fb      	strb	r3, [r7, #3]
    lv_btn_set_state(cb, checked ? LV_BTN_STATE_TGL_REL : LV_BTN_STATE_REL);
 8021fc0:	78fb      	ldrb	r3, [r7, #3]
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d001      	beq.n	8021fca <lv_cb_set_checked+0x16>
 8021fc6:	2302      	movs	r3, #2
 8021fc8:	e000      	b.n	8021fcc <lv_cb_set_checked+0x18>
 8021fca:	2300      	movs	r3, #0
 8021fcc:	4619      	mov	r1, r3
 8021fce:	6878      	ldr	r0, [r7, #4]
 8021fd0:	f7f3 fd18 	bl	8015a04 <lv_btn_set_state>
}
 8021fd4:	bf00      	nop
 8021fd6:	3708      	adds	r7, #8
 8021fd8:	46bd      	mov	sp, r7
 8021fda:	bd80      	pop	{r7, pc}

08021fdc <tos_NotificationScreen_Init>:
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node);
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected);
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex);
void NotificationScreen_NotificationBox(char * appNotification);
/*This function using for initialization notification screen*/
void tos_NotificationScreen_Init(bool theme){
 8021fdc:	b580      	push	{r7, lr}
 8021fde:	b082      	sub	sp, #8
 8021fe0:	af00      	add	r7, sp, #0
 8021fe2:	4603      	mov	r3, r0
 8021fe4:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8021fe6:	f7ff ffcb 	bl	8021f80 <lv_scr_act>
 8021fea:	4603      	mov	r3, r0
 8021fec:	4618      	mov	r0, r3
 8021fee:	f7e3 ff07 	bl	8005e00 <lv_obj_clean>
	lv_style_copy(&style_screen, &lv_style_plain);
 8021ff2:	4927      	ldr	r1, [pc, #156]	; (8022090 <tos_NotificationScreen_Init+0xb4>)
 8021ff4:	4827      	ldr	r0, [pc, #156]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8021ff6:	f7e6 fbb9 	bl	800876c <lv_style_copy>
	if(theme){
 8021ffa:	79fb      	ldrb	r3, [r7, #7]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d006      	beq.n	802200e <tos_NotificationScreen_Init+0x32>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8022000:	4b24      	ldr	r3, [pc, #144]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8022002:	2200      	movs	r2, #0
 8022004:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8022006:	4b23      	ldr	r3, [pc, #140]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8022008:	2200      	movs	r2, #0
 802200a:	809a      	strh	r2, [r3, #4]
 802200c:	e007      	b.n	802201e <tos_NotificationScreen_Init+0x42>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802200e:	4a21      	ldr	r2, [pc, #132]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8022010:	4b21      	ldr	r3, [pc, #132]	; (8022098 <tos_NotificationScreen_Init+0xbc>)
 8022012:	881b      	ldrh	r3, [r3, #0]
 8022014:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8022016:	4a1f      	ldr	r2, [pc, #124]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8022018:	4b1f      	ldr	r3, [pc, #124]	; (8022098 <tos_NotificationScreen_Init+0xbc>)
 802201a:	881b      	ldrh	r3, [r3, #0]
 802201c:	8093      	strh	r3, [r2, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 802201e:	f7ff ffaf 	bl	8021f80 <lv_scr_act>
 8022022:	4603      	mov	r3, r0
 8022024:	491b      	ldr	r1, [pc, #108]	; (8022094 <tos_NotificationScreen_Init+0xb8>)
 8022026:	4618      	mov	r0, r3
 8022028:	f7e4 fe01 	bl	8006c2e <lv_obj_set_style>
    NotificationScreen_ItemsStyleInit(theme);
 802202c:	79fb      	ldrb	r3, [r7, #7]
 802202e:	4618      	mov	r0, r3
 8022030:	f000 fa52 	bl	80224d8 <NotificationScreen_ItemsStyleInit>

	root=tos_Notification_CreateRoot(root);
 8022034:	4b19      	ldr	r3, [pc, #100]	; (802209c <tos_NotificationScreen_Init+0xc0>)
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	4618      	mov	r0, r3
 802203a:	f004 fe57 	bl	8026cec <tos_Notification_CreateRoot>
 802203e:	4602      	mov	r2, r0
 8022040:	4b16      	ldr	r3, [pc, #88]	; (802209c <tos_NotificationScreen_Init+0xc0>)
 8022042:	601a      	str	r2, [r3, #0]
    node=tos_Notification_SetFirstNode(root,node);
 8022044:	4b15      	ldr	r3, [pc, #84]	; (802209c <tos_NotificationScreen_Init+0xc0>)
 8022046:	681a      	ldr	r2, [r3, #0]
 8022048:	4b15      	ldr	r3, [pc, #84]	; (80220a0 <tos_NotificationScreen_Init+0xc4>)
 802204a:	681b      	ldr	r3, [r3, #0]
 802204c:	4619      	mov	r1, r3
 802204e:	4610      	mov	r0, r2
 8022050:	f004 fe5b 	bl	8026d0a <tos_Notification_SetFirstNode>
 8022054:	4602      	mov	r2, r0
 8022056:	4b12      	ldr	r3, [pc, #72]	; (80220a0 <tos_NotificationScreen_Init+0xc4>)
 8022058:	601a      	str	r2, [r3, #0]

    myPos=0;
 802205a:	4b12      	ldr	r3, [pc, #72]	; (80220a4 <tos_NotificationScreen_Init+0xc8>)
 802205c:	2200      	movs	r2, #0
 802205e:	701a      	strb	r2, [r3, #0]
    isOpenNotificationBox=false;
 8022060:	4b11      	ldr	r3, [pc, #68]	; (80220a8 <tos_NotificationScreen_Init+0xcc>)
 8022062:	2200      	movs	r2, #0
 8022064:	701a      	strb	r2, [r3, #0]
    NS_isBtnPressed=false;
 8022066:	4b11      	ldr	r3, [pc, #68]	; (80220ac <tos_NotificationScreen_Init+0xd0>)
 8022068:	2200      	movs	r2, #0
 802206a:	701a      	strb	r2, [r3, #0]
    NotificationScreen_SetOnScreenItems(root,node,myPos);
 802206c:	4b0b      	ldr	r3, [pc, #44]	; (802209c <tos_NotificationScreen_Init+0xc0>)
 802206e:	6818      	ldr	r0, [r3, #0]
 8022070:	4b0b      	ldr	r3, [pc, #44]	; (80220a0 <tos_NotificationScreen_Init+0xc4>)
 8022072:	6819      	ldr	r1, [r3, #0]
 8022074:	4b0b      	ldr	r3, [pc, #44]	; (80220a4 <tos_NotificationScreen_Init+0xc8>)
 8022076:	f993 3000 	ldrsb.w	r3, [r3]
 802207a:	461a      	mov	r2, r3
 802207c:	f000 f9d6 	bl	802242c <NotificationScreen_SetOnScreenItems>
    NS_taskController=true;
 8022080:	4b0b      	ldr	r3, [pc, #44]	; (80220b0 <tos_NotificationScreen_Init+0xd4>)
 8022082:	2201      	movs	r2, #1
 8022084:	701a      	strb	r2, [r3, #0]

}
 8022086:	bf00      	nop
 8022088:	3708      	adds	r7, #8
 802208a:	46bd      	mov	sp, r7
 802208c:	bd80      	pop	{r7, pc}
 802208e:	bf00      	nop
 8022090:	20006c68 	.word	0x20006c68
 8022094:	20006054 	.word	0x20006054
 8022098:	08029e50 	.word	0x08029e50
 802209c:	20006f48 	.word	0x20006f48
 80220a0:	20006f3c 	.word	0x20006f3c
 80220a4:	20006f60 	.word	0x20006f60
 80220a8:	20006f4c 	.word	0x20006f4c
 80220ac:	20006f40 	.word	0x20006f40
 80220b0:	20006f38 	.word	0x20006f38

080220b4 <NotificationScreen_ButtonController>:
/*This function using for control to buttons*/
void NotificationScreen_ButtonController(void){
 80220b4:	b590      	push	{r4, r7, lr}
 80220b6:	b083      	sub	sp, #12
 80220b8:	af00      	add	r7, sp, #0
	if(!NS_isBtnPressed){
 80220ba:	4b5b      	ldr	r3, [pc, #364]	; (8022228 <NotificationScreen_ButtonController+0x174>)
 80220bc:	781b      	ldrb	r3, [r3, #0]
 80220be:	f083 0301 	eor.w	r3, r3, #1
 80220c2:	b2db      	uxtb	r3, r3
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	f000 80ab 	beq.w	8022220 <NotificationScreen_ButtonController+0x16c>
		NS_isBtnPressed=true;
 80220ca:	4b57      	ldr	r3, [pc, #348]	; (8022228 <NotificationScreen_ButtonController+0x174>)
 80220cc:	2201      	movs	r2, #1
 80220ce:	701a      	strb	r2, [r3, #0]
		  if(1==tos_LeftButton_Listenner_For_MenuControl()) {
 80220d0:	f004 fb38 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 80220d4:	4603      	mov	r3, r0
 80220d6:	2b01      	cmp	r3, #1
 80220d8:	d12e      	bne.n	8022138 <NotificationScreen_ButtonController+0x84>
			  //plus
			  if(!isOpenNotificationBox){
 80220da:	4b54      	ldr	r3, [pc, #336]	; (802222c <NotificationScreen_ButtonController+0x178>)
 80220dc:	781b      	ldrb	r3, [r3, #0]
 80220de:	f083 0301 	eor.w	r3, r3, #1
 80220e2:	b2db      	uxtb	r3, r3
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	d01e      	beq.n	8022126 <NotificationScreen_ButtonController+0x72>
				lv_obj_clean(lv_scr_act());
 80220e8:	f7ff ff4a 	bl	8021f80 <lv_scr_act>
 80220ec:	4603      	mov	r3, r0
 80220ee:	4618      	mov	r0, r3
 80220f0:	f7e3 fe86 	bl	8005e00 <lv_obj_clean>
				if(myPos<0)myPos++;
 80220f4:	4b4e      	ldr	r3, [pc, #312]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 80220f6:	f993 3000 	ldrsb.w	r3, [r3]
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	da08      	bge.n	8022110 <NotificationScreen_ButtonController+0x5c>
 80220fe:	4b4c      	ldr	r3, [pc, #304]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 8022100:	f993 3000 	ldrsb.w	r3, [r3]
 8022104:	b2db      	uxtb	r3, r3
 8022106:	3301      	adds	r3, #1
 8022108:	b2db      	uxtb	r3, r3
 802210a:	b25a      	sxtb	r2, r3
 802210c:	4b48      	ldr	r3, [pc, #288]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 802210e:	701a      	strb	r2, [r3, #0]
				NotificationScreen_SetOnScreenItems(root,node,myPos);
 8022110:	4b48      	ldr	r3, [pc, #288]	; (8022234 <NotificationScreen_ButtonController+0x180>)
 8022112:	6818      	ldr	r0, [r3, #0]
 8022114:	4b48      	ldr	r3, [pc, #288]	; (8022238 <NotificationScreen_ButtonController+0x184>)
 8022116:	6819      	ldr	r1, [r3, #0]
 8022118:	4b45      	ldr	r3, [pc, #276]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 802211a:	f993 3000 	ldrsb.w	r3, [r3]
 802211e:	461a      	mov	r2, r3
 8022120:	f000 f984 	bl	802242c <NotificationScreen_SetOnScreenItems>
 8022124:	e008      	b.n	8022138 <NotificationScreen_ButtonController+0x84>
			  }else{isOpenNotificationBox=false;
 8022126:	4b41      	ldr	r3, [pc, #260]	; (802222c <NotificationScreen_ButtonController+0x178>)
 8022128:	2200      	movs	r2, #0
 802212a:	701a      	strb	r2, [r3, #0]
				  lv_mbox_start_auto_close(notBox,0);
 802212c:	4b43      	ldr	r3, [pc, #268]	; (802223c <NotificationScreen_ButtonController+0x188>)
 802212e:	681b      	ldr	r3, [r3, #0]
 8022130:	2100      	movs	r1, #0
 8022132:	4618      	mov	r0, r3
 8022134:	f7f9 f994 	bl	801b460 <lv_mbox_start_auto_close>
			  }
		  }
		  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8022138:	f004 fad8 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 802213c:	4603      	mov	r3, r0
 802213e:	2b01      	cmp	r3, #1
 8022140:	d14d      	bne.n	80221de <NotificationScreen_ButtonController+0x12a>
			  if(!isOpenNotificationBox){
 8022142:	4b3a      	ldr	r3, [pc, #232]	; (802222c <NotificationScreen_ButtonController+0x178>)
 8022144:	781b      	ldrb	r3, [r3, #0]
 8022146:	f083 0301 	eor.w	r3, r3, #1
 802214a:	b2db      	uxtb	r3, r3
 802214c:	2b00      	cmp	r3, #0
 802214e:	d026      	beq.n	802219e <NotificationScreen_ButtonController+0xea>
			  //minus
				lv_obj_clean(lv_scr_act());
 8022150:	f7ff ff16 	bl	8021f80 <lv_scr_act>
 8022154:	4603      	mov	r3, r0
 8022156:	4618      	mov	r0, r3
 8022158:	f7e3 fe52 	bl	8005e00 <lv_obj_clean>
				if(myPos>-NotificationScreen_GetMaxScroll(node))myPos--;
 802215c:	4b34      	ldr	r3, [pc, #208]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 802215e:	f993 3000 	ldrsb.w	r3, [r3]
 8022162:	461c      	mov	r4, r3
 8022164:	4b34      	ldr	r3, [pc, #208]	; (8022238 <NotificationScreen_ButtonController+0x184>)
 8022166:	681b      	ldr	r3, [r3, #0]
 8022168:	4618      	mov	r0, r3
 802216a:	f000 fa75 	bl	8022658 <NotificationScreen_GetMaxScroll>
 802216e:	4603      	mov	r3, r0
 8022170:	425b      	negs	r3, r3
 8022172:	429c      	cmp	r4, r3
 8022174:	dd08      	ble.n	8022188 <NotificationScreen_ButtonController+0xd4>
 8022176:	4b2e      	ldr	r3, [pc, #184]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 8022178:	f993 3000 	ldrsb.w	r3, [r3]
 802217c:	b2db      	uxtb	r3, r3
 802217e:	3b01      	subs	r3, #1
 8022180:	b2db      	uxtb	r3, r3
 8022182:	b25a      	sxtb	r2, r3
 8022184:	4b2a      	ldr	r3, [pc, #168]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 8022186:	701a      	strb	r2, [r3, #0]
				NotificationScreen_SetOnScreenItems(root,node,myPos);
 8022188:	4b2a      	ldr	r3, [pc, #168]	; (8022234 <NotificationScreen_ButtonController+0x180>)
 802218a:	6818      	ldr	r0, [r3, #0]
 802218c:	4b2a      	ldr	r3, [pc, #168]	; (8022238 <NotificationScreen_ButtonController+0x184>)
 802218e:	6819      	ldr	r1, [r3, #0]
 8022190:	4b27      	ldr	r3, [pc, #156]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 8022192:	f993 3000 	ldrsb.w	r3, [r3]
 8022196:	461a      	mov	r2, r3
 8022198:	f000 f948 	bl	802242c <NotificationScreen_SetOnScreenItems>
 802219c:	e01f      	b.n	80221de <NotificationScreen_ButtonController+0x12a>
			  }else {isOpenNotificationBox=false;
 802219e:	4b23      	ldr	r3, [pc, #140]	; (802222c <NotificationScreen_ButtonController+0x178>)
 80221a0:	2200      	movs	r2, #0
 80221a2:	701a      	strb	r2, [r3, #0]
			  //remove
				lv_obj_clean(lv_scr_act());
 80221a4:	f7ff feec 	bl	8021f80 <lv_scr_act>
 80221a8:	4603      	mov	r3, r0
 80221aa:	4618      	mov	r0, r3
 80221ac:	f7e3 fe28 	bl	8005e00 <lv_obj_clean>
				notBox = NULL;
 80221b0:	4b22      	ldr	r3, [pc, #136]	; (802223c <NotificationScreen_ButtonController+0x188>)
 80221b2:	2200      	movs	r2, #0
 80221b4:	601a      	str	r2, [r3, #0]
			    tos_NotificationDelItem(root,node,selectedItem);
 80221b6:	4b1f      	ldr	r3, [pc, #124]	; (8022234 <NotificationScreen_ButtonController+0x180>)
 80221b8:	6818      	ldr	r0, [r3, #0]
 80221ba:	4b1f      	ldr	r3, [pc, #124]	; (8022238 <NotificationScreen_ButtonController+0x184>)
 80221bc:	6819      	ldr	r1, [r3, #0]
 80221be:	4b20      	ldr	r3, [pc, #128]	; (8022240 <NotificationScreen_ButtonController+0x18c>)
 80221c0:	781b      	ldrb	r3, [r3, #0]
 80221c2:	b29b      	uxth	r3, r3
 80221c4:	461a      	mov	r2, r3
 80221c6:	f004 fe46 	bl	8026e56 <tos_NotificationDelItem>
				NotificationScreen_SetOnScreenItems(root,node,myPos);
 80221ca:	4b1a      	ldr	r3, [pc, #104]	; (8022234 <NotificationScreen_ButtonController+0x180>)
 80221cc:	6818      	ldr	r0, [r3, #0]
 80221ce:	4b1a      	ldr	r3, [pc, #104]	; (8022238 <NotificationScreen_ButtonController+0x184>)
 80221d0:	6819      	ldr	r1, [r3, #0]
 80221d2:	4b17      	ldr	r3, [pc, #92]	; (8022230 <NotificationScreen_ButtonController+0x17c>)
 80221d4:	f993 3000 	ldrsb.w	r3, [r3]
 80221d8:	461a      	mov	r2, r3
 80221da:	f000 f927 	bl	802242c <NotificationScreen_SetOnScreenItems>

			  }
		  }
		  if(2==tos_RightButton_Listenner_For_MenuControl()){
 80221de:	f004 fa85 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 80221e2:	4603      	mov	r3, r0
 80221e4:	2b02      	cmp	r3, #2
 80221e6:	d118      	bne.n	802221a <NotificationScreen_ButtonController+0x166>
			  //open
			  if(!isOpenNotificationBox){
 80221e8:	4b10      	ldr	r3, [pc, #64]	; (802222c <NotificationScreen_ButtonController+0x178>)
 80221ea:	781b      	ldrb	r3, [r3, #0]
 80221ec:	f083 0301 	eor.w	r3, r3, #1
 80221f0:	b2db      	uxtb	r3, r3
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d011      	beq.n	802221a <NotificationScreen_ButtonController+0x166>
				  isOpenNotificationBox=true;
 80221f6:	4b0d      	ldr	r3, [pc, #52]	; (802222c <NotificationScreen_ButtonController+0x178>)
 80221f8:	2201      	movs	r2, #1
 80221fa:	701a      	strb	r2, [r3, #0]
				  char * tmp=tos_NotificationGetItem(root,selectedItem)->appNot;
 80221fc:	4b0d      	ldr	r3, [pc, #52]	; (8022234 <NotificationScreen_ButtonController+0x180>)
 80221fe:	681a      	ldr	r2, [r3, #0]
 8022200:	4b0f      	ldr	r3, [pc, #60]	; (8022240 <NotificationScreen_ButtonController+0x18c>)
 8022202:	781b      	ldrb	r3, [r3, #0]
 8022204:	b29b      	uxth	r3, r3
 8022206:	4619      	mov	r1, r3
 8022208:	4610      	mov	r0, r2
 802220a:	f004 fddb 	bl	8026dc4 <tos_NotificationGetItem>
 802220e:	4603      	mov	r3, r0
 8022210:	685b      	ldr	r3, [r3, #4]
 8022212:	607b      	str	r3, [r7, #4]
				    NotificationScreen_NotificationBox(tmp);
 8022214:	6878      	ldr	r0, [r7, #4]
 8022216:	f000 f8b7 	bl	8022388 <NotificationScreen_NotificationBox>
			  }
		  }
			NS_isBtnPressed=false;
 802221a:	4b03      	ldr	r3, [pc, #12]	; (8022228 <NotificationScreen_ButtonController+0x174>)
 802221c:	2200      	movs	r2, #0
 802221e:	701a      	strb	r2, [r3, #0]
	}
}
 8022220:	bf00      	nop
 8022222:	370c      	adds	r7, #12
 8022224:	46bd      	mov	sp, r7
 8022226:	bd90      	pop	{r4, r7, pc}
 8022228:	20006f40 	.word	0x20006f40
 802222c:	20006f4c 	.word	0x20006f4c
 8022230:	20006f60 	.word	0x20006f60
 8022234:	20006f48 	.word	0x20006f48
 8022238:	20006f3c 	.word	0x20006f3c
 802223c:	20006f44 	.word	0x20006f44
 8022240:	20006f4d 	.word	0x20006f4d

08022244 <NotificationScreen_Items>:
/*This function using for create notification items
 * @param appName using for get app name
 * @param appNotification for get app notification text
 * @param pos set item position
 * @param isSelected get statu (is first item on screen?) */
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected){
 8022244:	b580      	push	{r7, lr}
 8022246:	b08a      	sub	sp, #40	; 0x28
 8022248:	af02      	add	r7, sp, #8
 802224a:	60f8      	str	r0, [r7, #12]
 802224c:	60b9      	str	r1, [r7, #8]
 802224e:	607a      	str	r2, [r7, #4]
 8022250:	70fb      	strb	r3, [r7, #3]
	  lv_obj_t * itemCanvas = lv_page_create(lv_scr_act(), NULL);
 8022252:	f7ff fe95 	bl	8021f80 <lv_scr_act>
 8022256:	4603      	mov	r3, r0
 8022258:	2100      	movs	r1, #0
 802225a:	4618      	mov	r0, r3
 802225c:	f7f9 fc32 	bl	801bac4 <lv_page_create>
 8022260:	61f8      	str	r0, [r7, #28]
	  lv_obj_set_size(itemCanvas, 200, 50);
 8022262:	2232      	movs	r2, #50	; 0x32
 8022264:	21c8      	movs	r1, #200	; 0xc8
 8022266:	69f8      	ldr	r0, [r7, #28]
 8022268:	f7e3 ff99 	bl	800619e <lv_obj_set_size>
	  lv_page_set_sb_mode(itemCanvas,LV_SB_MODE_OFF);
 802226c:	2100      	movs	r1, #0
 802226e:	69f8      	ldr	r0, [r7, #28]
 8022270:	f7f9 fd9a 	bl	801bda8 <lv_page_set_sb_mode>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_BG, &bg_style);
 8022274:	4a3b      	ldr	r2, [pc, #236]	; (8022364 <NotificationScreen_Items+0x120>)
 8022276:	2100      	movs	r1, #0
 8022278:	69f8      	ldr	r0, [r7, #28]
 802227a:	f7f9 fdf5 	bl	801be68 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SB, &sb_style);
 802227e:	4a3a      	ldr	r2, [pc, #232]	; (8022368 <NotificationScreen_Items+0x124>)
 8022280:	2102      	movs	r1, #2
 8022282:	69f8      	ldr	r0, [r7, #28]
 8022284:	f7f9 fdf0 	bl	801be68 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SCRL, &scrl_style);
 8022288:	4a38      	ldr	r2, [pc, #224]	; (802236c <NotificationScreen_Items+0x128>)
 802228a:	2101      	movs	r1, #1
 802228c:	69f8      	ldr	r0, [r7, #28]
 802228e:	f7f9 fdeb 	bl	801be68 <lv_page_set_style>
	  lv_obj_align(itemCanvas, NULL, LV_ALIGN_CENTER, pos.x, pos.y);
 8022292:	88bb      	ldrh	r3, [r7, #4]
 8022294:	b21a      	sxth	r2, r3
 8022296:	88fb      	ldrh	r3, [r7, #6]
 8022298:	b21b      	sxth	r3, r3
 802229a:	9300      	str	r3, [sp, #0]
 802229c:	4613      	mov	r3, r2
 802229e:	2200      	movs	r2, #0
 80222a0:	2100      	movs	r1, #0
 80222a2:	69f8      	ldr	r0, [r7, #28]
 80222a4:	f7e4 f81e 	bl	80062e4 <lv_obj_align>

	  if(strlen(appName)>=12)  {
 80222a8:	68f8      	ldr	r0, [r7, #12]
 80222aa:	f7dd ff9b 	bl	80001e4 <strlen>
 80222ae:	4603      	mov	r3, r0
 80222b0:	2b0b      	cmp	r3, #11
 80222b2:	d906      	bls.n	80222c2 <NotificationScreen_Items+0x7e>
		snprintf(NS_buffer,14, "%.9s ...",appName);
 80222b4:	68fb      	ldr	r3, [r7, #12]
 80222b6:	4a2e      	ldr	r2, [pc, #184]	; (8022370 <NotificationScreen_Items+0x12c>)
 80222b8:	210e      	movs	r1, #14
 80222ba:	482e      	ldr	r0, [pc, #184]	; (8022374 <NotificationScreen_Items+0x130>)
 80222bc:	f005 fc98 	bl	8027bf0 <sniprintf>
 80222c0:	e005      	b.n	80222ce <NotificationScreen_Items+0x8a>
	  }else snprintf(NS_buffer,14, "%s",appName);
 80222c2:	68fb      	ldr	r3, [r7, #12]
 80222c4:	4a2c      	ldr	r2, [pc, #176]	; (8022378 <NotificationScreen_Items+0x134>)
 80222c6:	210e      	movs	r1, #14
 80222c8:	482a      	ldr	r0, [pc, #168]	; (8022374 <NotificationScreen_Items+0x130>)
 80222ca:	f005 fc91 	bl	8027bf0 <sniprintf>

	  lv_obj_t * appNameLbl = lv_label_create(itemCanvas, NULL);
 80222ce:	2100      	movs	r1, #0
 80222d0:	69f8      	ldr	r0, [r7, #28]
 80222d2:	f7f7 f91f 	bl	8019514 <lv_label_create>
 80222d6:	61b8      	str	r0, [r7, #24]
	  lv_obj_set_width(appNameLbl, 50);
 80222d8:	2132      	movs	r1, #50	; 0x32
 80222da:	69b8      	ldr	r0, [r7, #24]
 80222dc:	f7e3 ffd8 	bl	8006290 <lv_obj_set_width>
	  lv_label_set_style(appNameLbl, LV_LABEL_STYLE_MAIN, &appName_Style);
 80222e0:	4a26      	ldr	r2, [pc, #152]	; (802237c <NotificationScreen_Items+0x138>)
 80222e2:	2100      	movs	r1, #0
 80222e4:	69b8      	ldr	r0, [r7, #24]
 80222e6:	f7ff fe56 	bl	8021f96 <lv_label_set_style>
	  lv_label_set_text(appNameLbl, NS_buffer);
 80222ea:	4922      	ldr	r1, [pc, #136]	; (8022374 <NotificationScreen_Items+0x130>)
 80222ec:	69b8      	ldr	r0, [r7, #24]
 80222ee:	f7f7 fa43 	bl	8019778 <lv_label_set_text>
	  lv_obj_align(appNameLbl, itemCanvas, LV_ALIGN_IN_TOP_LEFT, 20, 0);
 80222f2:	2300      	movs	r3, #0
 80222f4:	9300      	str	r3, [sp, #0]
 80222f6:	2314      	movs	r3, #20
 80222f8:	2201      	movs	r2, #1
 80222fa:	69f9      	ldr	r1, [r7, #28]
 80222fc:	69b8      	ldr	r0, [r7, #24]
 80222fe:	f7e3 fff1 	bl	80062e4 <lv_obj_align>

	  lv_obj_t * appNotLbl = lv_label_create(itemCanvas, NULL);
 8022302:	2100      	movs	r1, #0
 8022304:	69f8      	ldr	r0, [r7, #28]
 8022306:	f7f7 f905 	bl	8019514 <lv_label_create>
 802230a:	6178      	str	r0, [r7, #20]
	  lv_label_set_text(appNotLbl, appNotification);
 802230c:	68b9      	ldr	r1, [r7, #8]
 802230e:	6978      	ldr	r0, [r7, #20]
 8022310:	f7f7 fa32 	bl	8019778 <lv_label_set_text>
	  lv_label_set_style(appNotLbl, LV_LABEL_STYLE_MAIN, &notification_Style);
 8022314:	4a1a      	ldr	r2, [pc, #104]	; (8022380 <NotificationScreen_Items+0x13c>)
 8022316:	2100      	movs	r1, #0
 8022318:	6978      	ldr	r0, [r7, #20]
 802231a:	f7ff fe3c 	bl	8021f96 <lv_label_set_style>
	  lv_obj_align(appNotLbl, itemCanvas, LV_ALIGN_IN_BOTTOM_LEFT, 20, 0);
 802231e:	2300      	movs	r3, #0
 8022320:	9300      	str	r3, [sp, #0]
 8022322:	2314      	movs	r3, #20
 8022324:	2204      	movs	r2, #4
 8022326:	69f9      	ldr	r1, [r7, #28]
 8022328:	6978      	ldr	r0, [r7, #20]
 802232a:	f7e3 ffdb 	bl	80062e4 <lv_obj_align>

	  lv_obj_t * isSelettedItem = lv_cb_create(itemCanvas, NULL);
 802232e:	2100      	movs	r1, #0
 8022330:	69f8      	ldr	r0, [r7, #28]
 8022332:	f7f5 fa55 	bl	80177e0 <lv_cb_create>
 8022336:	6138      	str	r0, [r7, #16]
	  lv_obj_align(isSelettedItem, itemCanvas, LV_ALIGN_IN_RIGHT_MID, 80, 0);
 8022338:	2300      	movs	r3, #0
 802233a:	9300      	str	r3, [sp, #0]
 802233c:	2350      	movs	r3, #80	; 0x50
 802233e:	2208      	movs	r2, #8
 8022340:	69f9      	ldr	r1, [r7, #28]
 8022342:	6938      	ldr	r0, [r7, #16]
 8022344:	f7e3 ffce 	bl	80062e4 <lv_obj_align>
	  lv_cb_set_checked(isSelettedItem,isSelected);
 8022348:	78fb      	ldrb	r3, [r7, #3]
 802234a:	4619      	mov	r1, r3
 802234c:	6938      	ldr	r0, [r7, #16]
 802234e:	f7ff fe31 	bl	8021fb4 <lv_cb_set_checked>
	  lv_cb_set_text(isSelettedItem,"");
 8022352:	490c      	ldr	r1, [pc, #48]	; (8022384 <NotificationScreen_Items+0x140>)
 8022354:	6938      	ldr	r0, [r7, #16]
 8022356:	f7f5 fb35 	bl	80179c4 <lv_cb_set_text>
}
 802235a:	bf00      	nop
 802235c:	3720      	adds	r7, #32
 802235e:	46bd      	mov	sp, r7
 8022360:	bd80      	pop	{r7, pc}
 8022362:	bf00      	nop
 8022364:	200060cc 	.word	0x200060cc
 8022368:	20006090 	.word	0x20006090
 802236c:	20006108 	.word	0x20006108
 8022370:	08029e54 	.word	0x08029e54
 8022374:	20006f50 	.word	0x20006f50
 8022378:	08029e60 	.word	0x08029e60
 802237c:	20006144 	.word	0x20006144
 8022380:	20006180 	.word	0x20006180
 8022384:	08029e64 	.word	0x08029e64

08022388 <NotificationScreen_NotificationBox>:
/*This function using for notification box*/
void NotificationScreen_NotificationBox(char * appNotification){
 8022388:	b580      	push	{r7, lr}
 802238a:	b084      	sub	sp, #16
 802238c:	af02      	add	r7, sp, #8
 802238e:	6078      	str	r0, [r7, #4]
    static const char * btns[] ={"Okey", "Delete", ""};

    notBox = lv_mbox_create(lv_scr_act(), NULL);
 8022390:	f7ff fdf6 	bl	8021f80 <lv_scr_act>
 8022394:	4603      	mov	r3, r0
 8022396:	2100      	movs	r1, #0
 8022398:	4618      	mov	r0, r3
 802239a:	f7f8 ff47 	bl	801b22c <lv_mbox_create>
 802239e:	4602      	mov	r2, r0
 80223a0:	4b1d      	ldr	r3, [pc, #116]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223a2:	601a      	str	r2, [r3, #0]
    lv_mbox_add_btns(notBox, btns);
 80223a4:	4b1c      	ldr	r3, [pc, #112]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223a6:	681b      	ldr	r3, [r3, #0]
 80223a8:	491c      	ldr	r1, [pc, #112]	; (802241c <NotificationScreen_NotificationBox+0x94>)
 80223aa:	4618      	mov	r0, r3
 80223ac:	f7f8 ffec 	bl	801b388 <lv_mbox_add_btns>
    lv_mbox_set_text(notBox, appNotification);
 80223b0:	4b19      	ldr	r3, [pc, #100]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	6879      	ldr	r1, [r7, #4]
 80223b6:	4618      	mov	r0, r3
 80223b8:	f7f9 f83c 	bl	801b434 <lv_mbox_set_text>
    lv_obj_set_width(notBox, 200);
 80223bc:	4b16      	ldr	r3, [pc, #88]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223be:	681b      	ldr	r3, [r3, #0]
 80223c0:	21c8      	movs	r1, #200	; 0xc8
 80223c2:	4618      	mov	r0, r3
 80223c4:	f7e3 ff64 	bl	8006290 <lv_obj_set_width>
    lv_obj_set_height(notBox, 150);
 80223c8:	4b13      	ldr	r3, [pc, #76]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	2196      	movs	r1, #150	; 0x96
 80223ce:	4618      	mov	r0, r3
 80223d0:	f7e3 ff73 	bl	80062ba <lv_obj_set_height>
    lv_obj_align(notBox, NULL, LV_ALIGN_CENTER, 0, 0);
 80223d4:	4b10      	ldr	r3, [pc, #64]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223d6:	6818      	ldr	r0, [r3, #0]
 80223d8:	2300      	movs	r3, #0
 80223da:	9300      	str	r3, [sp, #0]
 80223dc:	2300      	movs	r3, #0
 80223de:	2200      	movs	r2, #0
 80223e0:	2100      	movs	r1, #0
 80223e2:	f7e3 ff7f 	bl	80062e4 <lv_obj_align>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BG,  &sb_style);
 80223e6:	4b0c      	ldr	r3, [pc, #48]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223e8:	681b      	ldr	r3, [r3, #0]
 80223ea:	4a0d      	ldr	r2, [pc, #52]	; (8022420 <NotificationScreen_NotificationBox+0x98>)
 80223ec:	2100      	movs	r1, #0
 80223ee:	4618      	mov	r0, r3
 80223f0:	f7f9 f8b8 	bl	801b564 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_REL,  &scrl_style);
 80223f4:	4b08      	ldr	r3, [pc, #32]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	4a0a      	ldr	r2, [pc, #40]	; (8022424 <NotificationScreen_NotificationBox+0x9c>)
 80223fa:	2102      	movs	r1, #2
 80223fc:	4618      	mov	r0, r3
 80223fe:	f7f9 f8b1 	bl	801b564 <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_TGL_PR,  &bg_style);
 8022402:	4b05      	ldr	r3, [pc, #20]	; (8022418 <NotificationScreen_NotificationBox+0x90>)
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	4a08      	ldr	r2, [pc, #32]	; (8022428 <NotificationScreen_NotificationBox+0xa0>)
 8022408:	2105      	movs	r1, #5
 802240a:	4618      	mov	r0, r3
 802240c:	f7f9 f8aa 	bl	801b564 <lv_mbox_set_style>
}
 8022410:	bf00      	nop
 8022412:	3708      	adds	r7, #8
 8022414:	46bd      	mov	sp, r7
 8022416:	bd80      	pop	{r7, pc}
 8022418:	20006f44 	.word	0x20006f44
 802241c:	20002830 	.word	0x20002830
 8022420:	20006090 	.word	0x20006090
 8022424:	20006108 	.word	0x20006108
 8022428:	200060cc 	.word	0x200060cc

0802242c <NotificationScreen_SetOnScreenItems>:

/*This function using for notification items set values(app name,app notification,position)
 * @param root using for first node
 * @param node using for all nodes
 * @param posIndex using for set position index*/
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex){
 802242c:	b5b0      	push	{r4, r5, r7, lr}
 802242e:	b086      	sub	sp, #24
 8022430:	af00      	add	r7, sp, #0
 8022432:	60f8      	str	r0, [r7, #12]
 8022434:	60b9      	str	r1, [r7, #8]
 8022436:	4613      	mov	r3, r2
 8022438:	71fb      	strb	r3, [r7, #7]
	bool selected= false;
 802243a:	2300      	movs	r3, #0
 802243c:	75fb      	strb	r3, [r7, #23]
       for(uint8_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 802243e:	2301      	movs	r3, #1
 8022440:	75bb      	strb	r3, [r7, #22]
 8022442:	e03a      	b.n	80224ba <NotificationScreen_SetOnScreenItems+0x8e>
    	   	   if(tos_NotificationGetItem(root,i) !=NULL){
 8022444:	7dbb      	ldrb	r3, [r7, #22]
 8022446:	b29b      	uxth	r3, r3
 8022448:	4619      	mov	r1, r3
 802244a:	68f8      	ldr	r0, [r7, #12]
 802244c:	f004 fcba 	bl	8026dc4 <tos_NotificationGetItem>
 8022450:	4603      	mov	r3, r0
 8022452:	2b00      	cmp	r3, #0
 8022454:	d02e      	beq.n	80224b4 <NotificationScreen_SetOnScreenItems+0x88>
    	           if(posIndex==0){selectedItem=i; selected=true;}
 8022456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802245a:	2b00      	cmp	r3, #0
 802245c:	d105      	bne.n	802246a <NotificationScreen_SetOnScreenItems+0x3e>
 802245e:	4a1d      	ldr	r2, [pc, #116]	; (80224d4 <NotificationScreen_SetOnScreenItems+0xa8>)
 8022460:	7dbb      	ldrb	r3, [r7, #22]
 8022462:	7013      	strb	r3, [r2, #0]
 8022464:	2301      	movs	r3, #1
 8022466:	75fb      	strb	r3, [r7, #23]
 8022468:	e001      	b.n	802246e <NotificationScreen_SetOnScreenItems+0x42>
    	           else selected=false;
 802246a:	2300      	movs	r3, #0
 802246c:	75fb      	strb	r3, [r7, #23]
        NotificationScreen_Items(tos_NotificationGetItem(root,i)->appName,
 802246e:	7dbb      	ldrb	r3, [r7, #22]
 8022470:	b29b      	uxth	r3, r3
 8022472:	4619      	mov	r1, r3
 8022474:	68f8      	ldr	r0, [r7, #12]
 8022476:	f004 fca5 	bl	8026dc4 <tos_NotificationGetItem>
 802247a:	4603      	mov	r3, r0
 802247c:	681c      	ldr	r4, [r3, #0]
        		tos_NotificationGetItem(root,i)->appNot,
 802247e:	7dbb      	ldrb	r3, [r7, #22]
 8022480:	b29b      	uxth	r3, r3
 8022482:	4619      	mov	r1, r3
 8022484:	68f8      	ldr	r0, [r7, #12]
 8022486:	f004 fc9d 	bl	8026dc4 <tos_NotificationGetItem>
 802248a:	4603      	mov	r3, r0
        NotificationScreen_Items(tos_NotificationGetItem(root,i)->appName,
 802248c:	685d      	ldr	r5, [r3, #4]
 802248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022492:	4618      	mov	r0, r3
 8022494:	f000 f8be 	bl	8022614 <NotificationScreen_ItemsetPos>
 8022498:	4603      	mov	r3, r0
 802249a:	613b      	str	r3, [r7, #16]
 802249c:	7dfb      	ldrb	r3, [r7, #23]
 802249e:	693a      	ldr	r2, [r7, #16]
 80224a0:	4629      	mov	r1, r5
 80224a2:	4620      	mov	r0, r4
 80224a4:	f7ff fece 	bl	8022244 <NotificationScreen_Items>
				NotificationScreen_ItemsetPos(posIndex),selected);
        posIndex++;
 80224a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224ac:	b2db      	uxtb	r3, r3
 80224ae:	3301      	adds	r3, #1
 80224b0:	b2db      	uxtb	r3, r3
 80224b2:	71fb      	strb	r3, [r7, #7]
       for(uint8_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 80224b4:	7dbb      	ldrb	r3, [r7, #22]
 80224b6:	3301      	adds	r3, #1
 80224b8:	75bb      	strb	r3, [r7, #22]
 80224ba:	68b8      	ldr	r0, [r7, #8]
 80224bc:	f004 fc65 	bl	8026d8a <tos_NotificationGetSize>
 80224c0:	4603      	mov	r3, r0
 80224c2:	461a      	mov	r2, r3
 80224c4:	7dbb      	ldrb	r3, [r7, #22]
 80224c6:	4293      	cmp	r3, r2
 80224c8:	d3bc      	bcc.n	8022444 <NotificationScreen_SetOnScreenItems+0x18>
    }
    }
}
 80224ca:	bf00      	nop
 80224cc:	3718      	adds	r7, #24
 80224ce:	46bd      	mov	sp, r7
 80224d0:	bdb0      	pop	{r4, r5, r7, pc}
 80224d2:	bf00      	nop
 80224d4:	20006f4d 	.word	0x20006f4d

080224d8 <NotificationScreen_ItemsStyleInit>:
/*This function using for set notification style init
 * created a style init because when create a notification then be not get again memory
 * @param theme using for select theme
 * true -> dark
 * false -> light*/
void NotificationScreen_ItemsStyleInit(bool theme){
 80224d8:	b580      	push	{r7, lr}
 80224da:	b082      	sub	sp, #8
 80224dc:	af00      	add	r7, sp, #0
 80224de:	4603      	mov	r3, r0
 80224e0:	71fb      	strb	r3, [r7, #7]
    lv_style_copy(&scrl_style, &lv_style_plain);
 80224e2:	4941      	ldr	r1, [pc, #260]	; (80225e8 <NotificationScreen_ItemsStyleInit+0x110>)
 80224e4:	4841      	ldr	r0, [pc, #260]	; (80225ec <NotificationScreen_ItemsStyleInit+0x114>)
 80224e6:	f7e6 f941 	bl	800876c <lv_style_copy>
    scrl_style.body.main_color = LV_COLOR_SILVER;
 80224ea:	4a40      	ldr	r2, [pc, #256]	; (80225ec <NotificationScreen_ItemsStyleInit+0x114>)
 80224ec:	4b40      	ldr	r3, [pc, #256]	; (80225f0 <NotificationScreen_ItemsStyleInit+0x118>)
 80224ee:	881b      	ldrh	r3, [r3, #0]
 80224f0:	8053      	strh	r3, [r2, #2]
    scrl_style.body.grad_color = LV_COLOR_SILVER;
 80224f2:	4a3e      	ldr	r2, [pc, #248]	; (80225ec <NotificationScreen_ItemsStyleInit+0x114>)
 80224f4:	4b3e      	ldr	r3, [pc, #248]	; (80225f0 <NotificationScreen_ItemsStyleInit+0x118>)
 80224f6:	881b      	ldrh	r3, [r3, #0]
 80224f8:	8093      	strh	r3, [r2, #4]
    scrl_style.body.border.color = LV_COLOR_BLACK;
 80224fa:	4b3c      	ldr	r3, [pc, #240]	; (80225ec <NotificationScreen_ItemsStyleInit+0x114>)
 80224fc:	2200      	movs	r2, #0
 80224fe:	815a      	strh	r2, [r3, #10]
    scrl_style.body.border.width = 0;
 8022500:	4b3a      	ldr	r3, [pc, #232]	; (80225ec <NotificationScreen_ItemsStyleInit+0x114>)
 8022502:	2200      	movs	r2, #0
 8022504:	819a      	strh	r2, [r3, #12]

    lv_style_copy(&sb_style, &lv_style_plain);
 8022506:	4938      	ldr	r1, [pc, #224]	; (80225e8 <NotificationScreen_ItemsStyleInit+0x110>)
 8022508:	483a      	ldr	r0, [pc, #232]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 802250a:	f7e6 f92f 	bl	800876c <lv_style_copy>
    sb_style.body.main_color = LV_COLOR_WHITE;
 802250e:	4a39      	ldr	r2, [pc, #228]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022510:	4b39      	ldr	r3, [pc, #228]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 8022512:	881b      	ldrh	r3, [r3, #0]
 8022514:	8053      	strh	r3, [r2, #2]
    sb_style.body.grad_color = LV_COLOR_WHITE;
 8022516:	4a37      	ldr	r2, [pc, #220]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022518:	4b37      	ldr	r3, [pc, #220]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 802251a:	881b      	ldrh	r3, [r3, #0]
 802251c:	8093      	strh	r3, [r2, #4]
    sb_style.body.border.color = LV_COLOR_BLACK;
 802251e:	4b35      	ldr	r3, [pc, #212]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022520:	2200      	movs	r2, #0
 8022522:	815a      	strh	r2, [r3, #10]
    sb_style.text.color =LV_COLOR_BLACK;
 8022524:	4b33      	ldr	r3, [pc, #204]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022526:	2200      	movs	r2, #0
 8022528:	841a      	strh	r2, [r3, #32]
    sb_style.body.border.width = 1;
 802252a:	4b32      	ldr	r3, [pc, #200]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 802252c:	2201      	movs	r2, #1
 802252e:	819a      	strh	r2, [r3, #12]
    sb_style.body.border.opa = LV_OPA_70;
 8022530:	4b30      	ldr	r3, [pc, #192]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022532:	22b2      	movs	r2, #178	; 0xb2
 8022534:	73da      	strb	r2, [r3, #15]
    sb_style.body.opa = LV_OPA_70;
 8022536:	4b2f      	ldr	r3, [pc, #188]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022538:	22b2      	movs	r2, #178	; 0xb2
 802253a:	721a      	strb	r2, [r3, #8]
    sb_style.body.padding.right = 3;
 802253c:	4b2d      	ldr	r3, [pc, #180]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 802253e:	2203      	movs	r2, #3
 8022540:	839a      	strh	r2, [r3, #28]
    sb_style.body.padding.bottom = 3;
 8022542:	4b2c      	ldr	r3, [pc, #176]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022544:	2203      	movs	r2, #3
 8022546:	831a      	strh	r2, [r3, #24]
    sb_style.body.padding.inner = 8;
 8022548:	4b2a      	ldr	r3, [pc, #168]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 802254a:	2208      	movs	r2, #8
 802254c:	83da      	strh	r2, [r3, #30]
    lv_style_copy(&bg_style, &lv_style_plain);
 802254e:	4926      	ldr	r1, [pc, #152]	; (80225e8 <NotificationScreen_ItemsStyleInit+0x110>)
 8022550:	482a      	ldr	r0, [pc, #168]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022552:	f7e6 f90b 	bl	800876c <lv_style_copy>
    bg_style.body.main_color = LV_COLOR_WHITE;
 8022556:	4a29      	ldr	r2, [pc, #164]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022558:	4b27      	ldr	r3, [pc, #156]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 802255a:	881b      	ldrh	r3, [r3, #0]
 802255c:	8053      	strh	r3, [r2, #2]
    bg_style.body.grad_color = LV_COLOR_WHITE;
 802255e:	4a27      	ldr	r2, [pc, #156]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022560:	4b25      	ldr	r3, [pc, #148]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 8022562:	881b      	ldrh	r3, [r3, #0]
 8022564:	8093      	strh	r3, [r2, #4]
    bg_style.body.border.color = LV_COLOR_WHITE;
 8022566:	4a25      	ldr	r2, [pc, #148]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022568:	4b23      	ldr	r3, [pc, #140]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 802256a:	881b      	ldrh	r3, [r3, #0]
 802256c:	8153      	strh	r3, [r2, #10]
    bg_style.body.border.width = 0;
 802256e:	4b23      	ldr	r3, [pc, #140]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022570:	2200      	movs	r2, #0
 8022572:	819a      	strh	r2, [r3, #12]
    bg_style.body.border.opa = LV_OPA_70;
 8022574:	4b21      	ldr	r3, [pc, #132]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 8022576:	22b2      	movs	r2, #178	; 0xb2
 8022578:	73da      	strb	r2, [r3, #15]
    bg_style.body.opa = LV_OPA_70;
 802257a:	4b20      	ldr	r3, [pc, #128]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 802257c:	22b2      	movs	r2, #178	; 0xb2
 802257e:	721a      	strb	r2, [r3, #8]
    if(theme){
 8022580:	79fb      	ldrb	r3, [r7, #7]
 8022582:	2b00      	cmp	r3, #0
 8022584:	d016      	beq.n	80225b4 <NotificationScreen_ItemsStyleInit+0xdc>
    	sb_style.body.main_color = LV_COLOR_BLACK;
 8022586:	4b1b      	ldr	r3, [pc, #108]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022588:	2200      	movs	r2, #0
 802258a:	805a      	strh	r2, [r3, #2]
        sb_style.body.grad_color = LV_COLOR_BLACK;
 802258c:	4b19      	ldr	r3, [pc, #100]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 802258e:	2200      	movs	r2, #0
 8022590:	809a      	strh	r2, [r3, #4]
        sb_style.body.border.color = LV_COLOR_WHITE;
 8022592:	4a18      	ldr	r2, [pc, #96]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 8022594:	4b18      	ldr	r3, [pc, #96]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 8022596:	881b      	ldrh	r3, [r3, #0]
 8022598:	8153      	strh	r3, [r2, #10]
        bg_style.body.main_color = LV_COLOR_BLACK;
 802259a:	4b18      	ldr	r3, [pc, #96]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 802259c:	2200      	movs	r2, #0
 802259e:	805a      	strh	r2, [r3, #2]
        bg_style.body.grad_color = LV_COLOR_BLACK;
 80225a0:	4b16      	ldr	r3, [pc, #88]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 80225a2:	2200      	movs	r2, #0
 80225a4:	809a      	strh	r2, [r3, #4]
        bg_style.body.border.color = LV_COLOR_BLACK;
 80225a6:	4b15      	ldr	r3, [pc, #84]	; (80225fc <NotificationScreen_ItemsStyleInit+0x124>)
 80225a8:	2200      	movs	r2, #0
 80225aa:	815a      	strh	r2, [r3, #10]
        sb_style.text.color =LV_COLOR_WHITE;
 80225ac:	4a11      	ldr	r2, [pc, #68]	; (80225f4 <NotificationScreen_ItemsStyleInit+0x11c>)
 80225ae:	4b12      	ldr	r3, [pc, #72]	; (80225f8 <NotificationScreen_ItemsStyleInit+0x120>)
 80225b0:	881b      	ldrh	r3, [r3, #0]
 80225b2:	8413      	strh	r3, [r2, #32]
    }

	lv_style_copy(&appName_Style, &lv_style_plain);
 80225b4:	490c      	ldr	r1, [pc, #48]	; (80225e8 <NotificationScreen_ItemsStyleInit+0x110>)
 80225b6:	4812      	ldr	r0, [pc, #72]	; (8022600 <NotificationScreen_ItemsStyleInit+0x128>)
 80225b8:	f7e6 f8d8 	bl	800876c <lv_style_copy>
	appName_Style.text.font = &lv_font_roboto_22;
 80225bc:	4b10      	ldr	r3, [pc, #64]	; (8022600 <NotificationScreen_ItemsStyleInit+0x128>)
 80225be:	4a11      	ldr	r2, [pc, #68]	; (8022604 <NotificationScreen_ItemsStyleInit+0x12c>)
 80225c0:	625a      	str	r2, [r3, #36]	; 0x24
	appName_Style.text.color = LV_COLOR_AQUA;
 80225c2:	4a0f      	ldr	r2, [pc, #60]	; (8022600 <NotificationScreen_ItemsStyleInit+0x128>)
 80225c4:	4b10      	ldr	r3, [pc, #64]	; (8022608 <NotificationScreen_ItemsStyleInit+0x130>)
 80225c6:	881b      	ldrh	r3, [r3, #0]
 80225c8:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&notification_Style, &lv_style_plain);
 80225ca:	4907      	ldr	r1, [pc, #28]	; (80225e8 <NotificationScreen_ItemsStyleInit+0x110>)
 80225cc:	480f      	ldr	r0, [pc, #60]	; (802260c <NotificationScreen_ItemsStyleInit+0x134>)
 80225ce:	f7e6 f8cd 	bl	800876c <lv_style_copy>
	notification_Style.text.font = &lv_font_roboto_16;
 80225d2:	4b0e      	ldr	r3, [pc, #56]	; (802260c <NotificationScreen_ItemsStyleInit+0x134>)
 80225d4:	4a0e      	ldr	r2, [pc, #56]	; (8022610 <NotificationScreen_ItemsStyleInit+0x138>)
 80225d6:	625a      	str	r2, [r3, #36]	; 0x24
	notification_Style.text.color = LV_COLOR_BLACK;
 80225d8:	4b0c      	ldr	r3, [pc, #48]	; (802260c <NotificationScreen_ItemsStyleInit+0x134>)
 80225da:	2200      	movs	r2, #0
 80225dc:	841a      	strh	r2, [r3, #32]
}
 80225de:	bf00      	nop
 80225e0:	3708      	adds	r7, #8
 80225e2:	46bd      	mov	sp, r7
 80225e4:	bd80      	pop	{r7, pc}
 80225e6:	bf00      	nop
 80225e8:	20006c68 	.word	0x20006c68
 80225ec:	20006108 	.word	0x20006108
 80225f0:	08029e68 	.word	0x08029e68
 80225f4:	20006090 	.word	0x20006090
 80225f8:	08029e50 	.word	0x08029e50
 80225fc:	200060cc 	.word	0x200060cc
 8022600:	20006144 	.word	0x20006144
 8022604:	200017c0 	.word	0x200017c0
 8022608:	08029e6c 	.word	0x08029e6c
 802260c:	20006180 	.word	0x20006180
 8022610:	20000bec 	.word	0x20000bec

08022614 <NotificationScreen_ItemsetPos>:
/*This function using for set items position
 * @param index using for set position axis y*/
tos_Position NotificationScreen_ItemsetPos(int8_t index){
 8022614:	b480      	push	{r7}
 8022616:	b085      	sub	sp, #20
 8022618:	af00      	add	r7, sp, #0
 802261a:	4603      	mov	r3, r0
 802261c:	71fb      	strb	r3, [r7, #7]
	tos_Position tmp;
	tmp.x=0; tmp.y=(index*55)-90;
 802261e:	2300      	movs	r3, #0
 8022620:	813b      	strh	r3, [r7, #8]
 8022622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022626:	b29b      	uxth	r3, r3
 8022628:	461a      	mov	r2, r3
 802262a:	00d2      	lsls	r2, r2, #3
 802262c:	1ad2      	subs	r2, r2, r3
 802262e:	00d2      	lsls	r2, r2, #3
 8022630:	1ad3      	subs	r3, r2, r3
 8022632:	b29b      	uxth	r3, r3
 8022634:	3b5a      	subs	r3, #90	; 0x5a
 8022636:	b29b      	uxth	r3, r3
 8022638:	817b      	strh	r3, [r7, #10]
	return tmp;
 802263a:	68bb      	ldr	r3, [r7, #8]
 802263c:	60fb      	str	r3, [r7, #12]
 802263e:	2300      	movs	r3, #0
 8022640:	89ba      	ldrh	r2, [r7, #12]
 8022642:	f362 030f 	bfi	r3, r2, #0, #16
 8022646:	89fa      	ldrh	r2, [r7, #14]
 8022648:	f362 431f 	bfi	r3, r2, #16, #16
}
 802264c:	4618      	mov	r0, r3
 802264e:	3714      	adds	r7, #20
 8022650:	46bd      	mov	sp, r7
 8022652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022656:	4770      	bx	lr

08022658 <NotificationScreen_GetMaxScroll>:
/*This function using for return can get max going scroll value
 * @param node using for get node*/
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node){
 8022658:	b580      	push	{r7, lr}
 802265a:	b084      	sub	sp, #16
 802265c:	af00      	add	r7, sp, #0
 802265e:	6078      	str	r0, [r7, #4]
	if(tos_NotificationGetSize(node)>=5){
 8022660:	6878      	ldr	r0, [r7, #4]
 8022662:	f004 fb92 	bl	8026d8a <tos_NotificationGetSize>
 8022666:	4603      	mov	r3, r0
 8022668:	2b04      	cmp	r3, #4
 802266a:	d909      	bls.n	8022680 <NotificationScreen_GetMaxScroll+0x28>
		int8_t max=tos_NotificationGetSize(node)-2;
 802266c:	6878      	ldr	r0, [r7, #4]
 802266e:	f004 fb8c 	bl	8026d8a <tos_NotificationGetSize>
 8022672:	4603      	mov	r3, r0
 8022674:	3b02      	subs	r3, #2
 8022676:	b2db      	uxtb	r3, r3
 8022678:	73fb      	strb	r3, [r7, #15]
		return max;
 802267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802267e:	e000      	b.n	8022682 <NotificationScreen_GetMaxScroll+0x2a>
	} return 0;
 8022680:	2300      	movs	r3, #0
}
 8022682:	4618      	mov	r0, r3
 8022684:	3710      	adds	r7, #16
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
	...

0802268c <NotificationScreen_TaskControllerSet>:

//Setter Getter Functions
void NotificationScreen_TaskControllerSet(bool active){
 802268c:	b480      	push	{r7}
 802268e:	b083      	sub	sp, #12
 8022690:	af00      	add	r7, sp, #0
 8022692:	4603      	mov	r3, r0
 8022694:	71fb      	strb	r3, [r7, #7]
	NS_taskController = active;
 8022696:	4a04      	ldr	r2, [pc, #16]	; (80226a8 <NotificationScreen_TaskControllerSet+0x1c>)
 8022698:	79fb      	ldrb	r3, [r7, #7]
 802269a:	7013      	strb	r3, [r2, #0]
}
 802269c:	bf00      	nop
 802269e:	370c      	adds	r7, #12
 80226a0:	46bd      	mov	sp, r7
 80226a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a6:	4770      	bx	lr
 80226a8:	20006f38 	.word	0x20006f38

080226ac <NotificationScreen_TaskControllerGet>:
bool NotificationScreen_TaskControllerGet(void){
 80226ac:	b480      	push	{r7}
 80226ae:	af00      	add	r7, sp, #0
	return NS_taskController;
 80226b0:	4b03      	ldr	r3, [pc, #12]	; (80226c0 <NotificationScreen_TaskControllerGet+0x14>)
 80226b2:	781b      	ldrb	r3, [r3, #0]
}
 80226b4:	4618      	mov	r0, r3
 80226b6:	46bd      	mov	sp, r7
 80226b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226bc:	4770      	bx	lr
 80226be:	bf00      	nop
 80226c0:	20006f38 	.word	0x20006f38

080226c4 <NotificationScreen_GetNotifications>:
void NotificationScreen_GetNotifications(char *appName,char* appNotification){
 80226c4:	b580      	push	{r7, lr}
 80226c6:	b082      	sub	sp, #8
 80226c8:	af00      	add	r7, sp, #0
 80226ca:	6078      	str	r0, [r7, #4]
 80226cc:	6039      	str	r1, [r7, #0]
	  node=tos_NotificationPushItem(node,appName,appNotification);
 80226ce:	4b07      	ldr	r3, [pc, #28]	; (80226ec <NotificationScreen_GetNotifications+0x28>)
 80226d0:	681b      	ldr	r3, [r3, #0]
 80226d2:	683a      	ldr	r2, [r7, #0]
 80226d4:	6879      	ldr	r1, [r7, #4]
 80226d6:	4618      	mov	r0, r3
 80226d8:	f004 fb97 	bl	8026e0a <tos_NotificationPushItem>
 80226dc:	4602      	mov	r2, r0
 80226de:	4b03      	ldr	r3, [pc, #12]	; (80226ec <NotificationScreen_GetNotifications+0x28>)
 80226e0:	601a      	str	r2, [r3, #0]
}
 80226e2:	bf00      	nop
 80226e4:	3708      	adds	r7, #8
 80226e6:	46bd      	mov	sp, r7
 80226e8:	bd80      	pop	{r7, pc}
 80226ea:	bf00      	nop
 80226ec:	20006f3c 	.word	0x20006f3c

080226f0 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80226f0:	b480      	push	{r7}
 80226f2:	b085      	sub	sp, #20
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	4603      	mov	r3, r0
 80226f8:	71fb      	strb	r3, [r7, #7]
 80226fa:	460b      	mov	r3, r1
 80226fc:	71bb      	strb	r3, [r7, #6]
 80226fe:	4613      	mov	r3, r2
 8022700:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8022702:	79bb      	ldrb	r3, [r7, #6]
 8022704:	095b      	lsrs	r3, r3, #5
 8022706:	b2db      	uxtb	r3, r3
 8022708:	f003 0307 	and.w	r3, r3, #7
 802270c:	b2da      	uxtb	r2, r3
 802270e:	7b3b      	ldrb	r3, [r7, #12]
 8022710:	f362 0302 	bfi	r3, r2, #0, #3
 8022714:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8022716:	79fb      	ldrb	r3, [r7, #7]
 8022718:	08db      	lsrs	r3, r3, #3
 802271a:	b2db      	uxtb	r3, r3
 802271c:	f003 031f 	and.w	r3, r3, #31
 8022720:	b2da      	uxtb	r2, r3
 8022722:	7b3b      	ldrb	r3, [r7, #12]
 8022724:	f362 03c7 	bfi	r3, r2, #3, #5
 8022728:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802272a:	797b      	ldrb	r3, [r7, #5]
 802272c:	08db      	lsrs	r3, r3, #3
 802272e:	b2db      	uxtb	r3, r3
 8022730:	f003 031f 	and.w	r3, r3, #31
 8022734:	b2da      	uxtb	r2, r3
 8022736:	7b7b      	ldrb	r3, [r7, #13]
 8022738:	f362 0304 	bfi	r3, r2, #0, #5
 802273c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 802273e:	79bb      	ldrb	r3, [r7, #6]
 8022740:	089b      	lsrs	r3, r3, #2
 8022742:	b2db      	uxtb	r3, r3
 8022744:	f003 0307 	and.w	r3, r3, #7
 8022748:	b2da      	uxtb	r2, r3
 802274a:	7b7b      	ldrb	r3, [r7, #13]
 802274c:	f362 1347 	bfi	r3, r2, #5, #3
 8022750:	737b      	strb	r3, [r7, #13]
    return color;
 8022752:	89bb      	ldrh	r3, [r7, #12]
}
 8022754:	4618      	mov	r0, r3
 8022756:	3714      	adds	r7, #20
 8022758:	46bd      	mov	sp, r7
 802275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802275e:	4770      	bx	lr

08022760 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8022760:	b580      	push	{r7, lr}
 8022762:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8022764:	f7ef ff20 	bl	80125a8 <lv_disp_get_default>
 8022768:	4603      	mov	r3, r0
 802276a:	4618      	mov	r0, r3
 802276c:	f7e2 fbe8 	bl	8004f40 <lv_disp_get_scr_act>
 8022770:	4603      	mov	r3, r0
}
 8022772:	4618      	mov	r0, r3
 8022774:	bd80      	pop	{r7, pc}

08022776 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8022776:	b580      	push	{r7, lr}
 8022778:	b084      	sub	sp, #16
 802277a:	af00      	add	r7, sp, #0
 802277c:	60f8      	str	r0, [r7, #12]
 802277e:	460b      	mov	r3, r1
 8022780:	607a      	str	r2, [r7, #4]
 8022782:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8022784:	6879      	ldr	r1, [r7, #4]
 8022786:	68f8      	ldr	r0, [r7, #12]
 8022788:	f7e4 fa51 	bl	8006c2e <lv_obj_set_style>
}
 802278c:	bf00      	nop
 802278e:	3710      	adds	r7, #16
 8022790:	46bd      	mov	sp, r7
 8022792:	bd80      	pop	{r7, pc}

08022794 <tos_RunModeScreen_Init>:
void RunMode_steps_angle_loader(void);
void RunMode_kCals_angle_loader(void);
void RunMode_distances_angle_loader(void);

/*This function using for initialization Run Mode screen*/
void tos_RunModeScreen_Init(bool unitType,bool theme){
 8022794:	b580      	push	{r7, lr}
 8022796:	b082      	sub	sp, #8
 8022798:	af00      	add	r7, sp, #0
 802279a:	4603      	mov	r3, r0
 802279c:	460a      	mov	r2, r1
 802279e:	71fb      	strb	r3, [r7, #7]
 80227a0:	4613      	mov	r3, r2
 80227a2:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 80227a4:	f7ff ffdc 	bl	8022760 <lv_scr_act>
 80227a8:	4603      	mov	r3, r0
 80227aa:	4618      	mov	r0, r3
 80227ac:	f7e3 fb28 	bl	8005e00 <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 80227b0:	492e      	ldr	r1, [pc, #184]	; (802286c <tos_RunModeScreen_Init+0xd8>)
 80227b2:	482f      	ldr	r0, [pc, #188]	; (8022870 <tos_RunModeScreen_Init+0xdc>)
 80227b4:	f7e5 ffda 	bl	800876c <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 80227b8:	4b2d      	ldr	r3, [pc, #180]	; (8022870 <tos_RunModeScreen_Init+0xdc>)
 80227ba:	4a2e      	ldr	r2, [pc, #184]	; (8022874 <tos_RunModeScreen_Init+0xe0>)
 80227bc:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 80227be:	4a2c      	ldr	r2, [pc, #176]	; (8022870 <tos_RunModeScreen_Init+0xdc>)
 80227c0:	4b2d      	ldr	r3, [pc, #180]	; (8022878 <tos_RunModeScreen_Init+0xe4>)
 80227c2:	881b      	ldrh	r3, [r3, #0]
 80227c4:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 80227c6:	4929      	ldr	r1, [pc, #164]	; (802286c <tos_RunModeScreen_Init+0xd8>)
 80227c8:	482c      	ldr	r0, [pc, #176]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 80227ca:	f7e5 ffcf 	bl	800876c <lv_style_copy>
	if(theme){
 80227ce:	79bb      	ldrb	r3, [r7, #6]
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	d00a      	beq.n	80227ea <tos_RunModeScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 80227d4:	4b29      	ldr	r3, [pc, #164]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 80227d6:	2200      	movs	r2, #0
 80227d8:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 80227da:	4b28      	ldr	r3, [pc, #160]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 80227dc:	2200      	movs	r2, #0
 80227de:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 80227e0:	4a23      	ldr	r2, [pc, #140]	; (8022870 <tos_RunModeScreen_Init+0xdc>)
 80227e2:	4b27      	ldr	r3, [pc, #156]	; (8022880 <tos_RunModeScreen_Init+0xec>)
 80227e4:	881b      	ldrh	r3, [r3, #0]
 80227e6:	8413      	strh	r3, [r2, #32]
 80227e8:	e00b      	b.n	8022802 <tos_RunModeScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 80227ea:	4a24      	ldr	r2, [pc, #144]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 80227ec:	4b25      	ldr	r3, [pc, #148]	; (8022884 <tos_RunModeScreen_Init+0xf0>)
 80227ee:	881b      	ldrh	r3, [r3, #0]
 80227f0:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 80227f2:	4a22      	ldr	r2, [pc, #136]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 80227f4:	4b23      	ldr	r3, [pc, #140]	; (8022884 <tos_RunModeScreen_Init+0xf0>)
 80227f6:	881b      	ldrh	r3, [r3, #0]
 80227f8:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 80227fa:	4a1d      	ldr	r2, [pc, #116]	; (8022870 <tos_RunModeScreen_Init+0xdc>)
 80227fc:	4b20      	ldr	r3, [pc, #128]	; (8022880 <tos_RunModeScreen_Init+0xec>)
 80227fe:	881b      	ldrh	r3, [r3, #0]
 8022800:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8022802:	f7ff ffad 	bl	8022760 <lv_scr_act>
 8022806:	4603      	mov	r3, r0
 8022808:	491c      	ldr	r1, [pc, #112]	; (802287c <tos_RunModeScreen_Init+0xe8>)
 802280a:	4618      	mov	r0, r3
 802280c:	f7e4 fa0f 	bl	8006c2e <lv_obj_set_style>

	RMfirstVAl=true;
 8022810:	4b1d      	ldr	r3, [pc, #116]	; (8022888 <tos_RunModeScreen_Init+0xf4>)
 8022812:	2201      	movs	r2, #1
 8022814:	701a      	strb	r2, [r3, #0]
	RMtimeSetVal=0;
 8022816:	4b1d      	ldr	r3, [pc, #116]	; (802288c <tos_RunModeScreen_Init+0xf8>)
 8022818:	2200      	movs	r2, #0
 802281a:	701a      	strb	r2, [r3, #0]
	isStartRun=false;
 802281c:	4b1c      	ldr	r3, [pc, #112]	; (8022890 <tos_RunModeScreen_Init+0xfc>)
 802281e:	2200      	movs	r2, #0
 8022820:	701a      	strb	r2, [r3, #0]

	RM_theme=theme;
 8022822:	4a1c      	ldr	r2, [pc, #112]	; (8022894 <tos_RunModeScreen_Init+0x100>)
 8022824:	79bb      	ldrb	r3, [r7, #6]
 8022826:	7013      	strb	r3, [r2, #0]
	RM_unitType=unitType;
 8022828:	4a1b      	ldr	r2, [pc, #108]	; (8022898 <tos_RunModeScreen_Init+0x104>)
 802282a:	79fb      	ldrb	r3, [r7, #7]
 802282c:	7013      	strb	r3, [r2, #0]
	RunMode_Obj_Init();
 802282e:	f000 f839 	bl	80228a4 <RunMode_Obj_Init>
	RunMode_Steps(theme);
 8022832:	79bb      	ldrb	r3, [r7, #6]
 8022834:	4618      	mov	r0, r3
 8022836:	f000 f9bd 	bl	8022bb4 <RunMode_Steps>
	RunMode_kCals(theme);
 802283a:	79bb      	ldrb	r3, [r7, #6]
 802283c:	4618      	mov	r0, r3
 802283e:	f000 f8ff 	bl	8022a40 <RunMode_kCals>
	RunMode_Distances(unitType,theme);
 8022842:	79ba      	ldrb	r2, [r7, #6]
 8022844:	79fb      	ldrb	r3, [r7, #7]
 8022846:	4611      	mov	r1, r2
 8022848:	4618      	mov	r0, r3
 802284a:	f000 fa69 	bl	8022d20 <RunMode_Distances>
	RM_taskController=true;
 802284e:	4b13      	ldr	r3, [pc, #76]	; (802289c <tos_RunModeScreen_Init+0x108>)
 8022850:	2201      	movs	r2, #1
 8022852:	701a      	strb	r2, [r3, #0]
	lv_task_create(RunModeScreen_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8022854:	2300      	movs	r3, #0
 8022856:	2201      	movs	r2, #1
 8022858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802285c:	4810      	ldr	r0, [pc, #64]	; (80228a0 <tos_RunModeScreen_Init+0x10c>)
 802285e:	f7f1 fae7 	bl	8013e30 <lv_task_create>
}
 8022862:	bf00      	nop
 8022864:	3708      	adds	r7, #8
 8022866:	46bd      	mov	sp, r7
 8022868:	bd80      	pop	{r7, pc}
 802286a:	bf00      	nop
 802286c:	20006c68 	.word	0x20006c68
 8022870:	200061f8 	.word	0x200061f8
 8022874:	200026cc 	.word	0x200026cc
 8022878:	08029e80 	.word	0x08029e80
 802287c:	200061bc 	.word	0x200061bc
 8022880:	08029e84 	.word	0x08029e84
 8022884:	08029e88 	.word	0x08029e88
 8022888:	20006fec 	.word	0x20006fec
 802288c:	20006fb0 	.word	0x20006fb0
 8022890:	20006fe4 	.word	0x20006fe4
 8022894:	20006fb1 	.word	0x20006fb1
 8022898:	20006f64 	.word	0x20006f64
 802289c:	20006fd4 	.word	0x20006fd4
 80228a0:	08022ea9 	.word	0x08022ea9

080228a4 <RunMode_Obj_Init>:


/*This function using for create and set objects on screen*/
void RunMode_Obj_Init(void){
 80228a4:	b590      	push	{r4, r7, lr}
 80228a6:	b085      	sub	sp, #20
 80228a8:	af04      	add	r7, sp, #16

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 80228aa:	4957      	ldr	r1, [pc, #348]	; (8022a08 <RunMode_Obj_Init+0x164>)
 80228ac:	4857      	ldr	r0, [pc, #348]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228ae:	f7e5 ff5d 	bl	800876c <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 80228b2:	4b56      	ldr	r3, [pc, #344]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228b4:	2200      	movs	r2, #0
 80228b6:	841a      	strh	r2, [r3, #32]
    if(RM_theme) obj_Style.text.color = LV_COLOR_SILVER;
 80228b8:	4b55      	ldr	r3, [pc, #340]	; (8022a10 <RunMode_Obj_Init+0x16c>)
 80228ba:	781b      	ldrb	r3, [r3, #0]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d003      	beq.n	80228c8 <RunMode_Obj_Init+0x24>
 80228c0:	4a52      	ldr	r2, [pc, #328]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228c2:	4b54      	ldr	r3, [pc, #336]	; (8022a14 <RunMode_Obj_Init+0x170>)
 80228c4:	881b      	ldrh	r3, [r3, #0]
 80228c6:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;
 80228c8:	4b50      	ldr	r3, [pc, #320]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228ca:	4a53      	ldr	r2, [pc, #332]	; (8022a18 <RunMode_Obj_Init+0x174>)
 80228cc:	625a      	str	r2, [r3, #36]	; 0x24
    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 80228ce:	4c4f      	ldr	r4, [pc, #316]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228d0:	2200      	movs	r2, #0
 80228d2:	21a5      	movs	r1, #165	; 0xa5
 80228d4:	20ff      	movs	r0, #255	; 0xff
 80228d6:	f7ff ff0b 	bl	80226f0 <lv_color_make>
 80228da:	8060      	strh	r0, [r4, #2]
    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 80228dc:	4c4b      	ldr	r4, [pc, #300]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228de:	2200      	movs	r2, #0
 80228e0:	21a5      	movs	r1, #165	; 0xa5
 80228e2:	20ff      	movs	r0, #255	; 0xff
 80228e4:	f7ff ff04 	bl	80226f0 <lv_color_make>
 80228e8:	80a0      	strh	r0, [r4, #4]
    obj_Style.body.radius= 10;
 80228ea:	4b48      	ldr	r3, [pc, #288]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228ec:	220a      	movs	r2, #10
 80228ee:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 80228f0:	4b46      	ldr	r3, [pc, #280]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228f2:	22c8      	movs	r2, #200	; 0xc8
 80228f4:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 80228f6:	4945      	ldr	r1, [pc, #276]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80228f8:	4848      	ldr	r0, [pc, #288]	; (8022a1c <RunMode_Obj_Init+0x178>)
 80228fa:	f7e5 ff37 	bl	800876c <lv_style_copy>
    indic_Style.body.main_color   = lv_color_make(0x00, 0xFF, 0xFF);
 80228fe:	4c47      	ldr	r4, [pc, #284]	; (8022a1c <RunMode_Obj_Init+0x178>)
 8022900:	22ff      	movs	r2, #255	; 0xff
 8022902:	21ff      	movs	r1, #255	; 0xff
 8022904:	2000      	movs	r0, #0
 8022906:	f7ff fef3 	bl	80226f0 <lv_color_make>
 802290a:	8060      	strh	r0, [r4, #2]
    indic_Style.body.grad_color   = lv_color_make(0x00, 0xFF, 0xFF);
 802290c:	4c43      	ldr	r4, [pc, #268]	; (8022a1c <RunMode_Obj_Init+0x178>)
 802290e:	22ff      	movs	r2, #255	; 0xff
 8022910:	21ff      	movs	r1, #255	; 0xff
 8022912:	2000      	movs	r0, #0
 8022914:	f7ff feec 	bl	80226f0 <lv_color_make>
 8022918:	80a0      	strh	r0, [r4, #4]
    indic_Style.body.opa=255;
 802291a:	4b40      	ldr	r3, [pc, #256]	; (8022a1c <RunMode_Obj_Init+0x178>)
 802291c:	22ff      	movs	r2, #255	; 0xff
 802291e:	721a      	strb	r2, [r3, #8]

    RM_targetTimeBar = lv_bar_create(lv_scr_act(), NULL);
 8022920:	f7ff ff1e 	bl	8022760 <lv_scr_act>
 8022924:	4603      	mov	r3, r0
 8022926:	2100      	movs	r1, #0
 8022928:	4618      	mov	r0, r3
 802292a:	f7f2 faa1 	bl	8014e70 <lv_bar_create>
 802292e:	4602      	mov	r2, r0
 8022930:	4b3b      	ldr	r3, [pc, #236]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022932:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_BG, &obj_Style);
 8022934:	4b3a      	ldr	r3, [pc, #232]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	4a34      	ldr	r2, [pc, #208]	; (8022a0c <RunMode_Obj_Init+0x168>)
 802293a:	2100      	movs	r1, #0
 802293c:	4618      	mov	r0, r3
 802293e:	f7f2 fc2d 	bl	801519c <lv_bar_set_style>
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_INDIC, &indic_Style);
 8022942:	4b37      	ldr	r3, [pc, #220]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	4a35      	ldr	r2, [pc, #212]	; (8022a1c <RunMode_Obj_Init+0x178>)
 8022948:	2101      	movs	r1, #1
 802294a:	4618      	mov	r0, r3
 802294c:	f7f2 fc26 	bl	801519c <lv_bar_set_style>
    lv_obj_set_size(RM_targetTimeBar, 150, 30);
 8022950:	4b33      	ldr	r3, [pc, #204]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022952:	681b      	ldr	r3, [r3, #0]
 8022954:	221e      	movs	r2, #30
 8022956:	2196      	movs	r1, #150	; 0x96
 8022958:	4618      	mov	r0, r3
 802295a:	f7e3 fc20 	bl	800619e <lv_obj_set_size>
    lv_obj_align(RM_targetTimeBar, NULL, LV_ALIGN_CENTER, 0, 80);
 802295e:	4b30      	ldr	r3, [pc, #192]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022960:	6818      	ldr	r0, [r3, #0]
 8022962:	2350      	movs	r3, #80	; 0x50
 8022964:	9300      	str	r3, [sp, #0]
 8022966:	2300      	movs	r3, #0
 8022968:	2200      	movs	r2, #0
 802296a:	2100      	movs	r1, #0
 802296c:	f7e3 fcba 	bl	80062e4 <lv_obj_align>
    lv_bar_set_range(RM_targetTimeBar,0,100);
 8022970:	4b2b      	ldr	r3, [pc, #172]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	2264      	movs	r2, #100	; 0x64
 8022976:	2100      	movs	r1, #0
 8022978:	4618      	mov	r0, r3
 802297a:	f7f2 fbc3 	bl	8015104 <lv_bar_set_range>
    lv_bar_set_value(RM_targetTimeBar, 0, LV_ANIM_OFF);
 802297e:	4b28      	ldr	r3, [pc, #160]	; (8022a20 <RunMode_Obj_Init+0x17c>)
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	2200      	movs	r2, #0
 8022984:	2100      	movs	r1, #0
 8022986:	4618      	mov	r0, r3
 8022988:	f7f2 fb38 	bl	8014ffc <lv_bar_set_value>

    //MAGENTA -> FF00FF
   	//AQUA -> 00FFFF
	//ORANGE -> FFA500

    RM_Lbl = lv_label_create(lv_scr_act(), NULL);
 802298c:	f7ff fee8 	bl	8022760 <lv_scr_act>
 8022990:	4603      	mov	r3, r0
 8022992:	2100      	movs	r1, #0
 8022994:	4618      	mov	r0, r3
 8022996:	f7f6 fdbd 	bl	8019514 <lv_label_create>
 802299a:	4602      	mov	r2, r0
 802299c:	4b21      	ldr	r3, [pc, #132]	; (8022a24 <RunMode_Obj_Init+0x180>)
 802299e:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(RM_Lbl, true);
 80229a0:	4b20      	ldr	r3, [pc, #128]	; (8022a24 <RunMode_Obj_Init+0x180>)
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	2101      	movs	r1, #1
 80229a6:	4618      	mov	r0, r3
 80229a8:	f7f7 f802 	bl	80199b0 <lv_label_set_recolor>
 	lv_label_set_style(RM_Lbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 80229ac:	4b1d      	ldr	r3, [pc, #116]	; (8022a24 <RunMode_Obj_Init+0x180>)
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	4a16      	ldr	r2, [pc, #88]	; (8022a0c <RunMode_Obj_Init+0x168>)
 80229b2:	2100      	movs	r1, #0
 80229b4:	4618      	mov	r0, r3
 80229b6:	f7ff fede 	bl	8022776 <lv_label_set_style>
	snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80229ba:	4b1b      	ldr	r3, [pc, #108]	; (8022a28 <RunMode_Obj_Init+0x184>)
 80229bc:	781b      	ldrb	r3, [r3, #0]
 80229be:	4618      	mov	r0, r3
 80229c0:	4b1a      	ldr	r3, [pc, #104]	; (8022a2c <RunMode_Obj_Init+0x188>)
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	461a      	mov	r2, r3
 80229c6:	4b1a      	ldr	r3, [pc, #104]	; (8022a30 <RunMode_Obj_Init+0x18c>)
 80229c8:	781b      	ldrb	r3, [r3, #0]
 80229ca:	4619      	mov	r1, r3
 80229cc:	4b19      	ldr	r3, [pc, #100]	; (8022a34 <RunMode_Obj_Init+0x190>)
 80229ce:	881b      	ldrh	r3, [r3, #0]
 80229d0:	9302      	str	r3, [sp, #8]
 80229d2:	9101      	str	r1, [sp, #4]
 80229d4:	9200      	str	r2, [sp, #0]
 80229d6:	4603      	mov	r3, r0
 80229d8:	4a17      	ldr	r2, [pc, #92]	; (8022a38 <RunMode_Obj_Init+0x194>)
 80229da:	2140      	movs	r1, #64	; 0x40
 80229dc:	4817      	ldr	r0, [pc, #92]	; (8022a3c <RunMode_Obj_Init+0x198>)
 80229de:	f005 f907 	bl	8027bf0 <sniprintf>
			RMhours,RMminutes,RMseconds,RMmilisecs);
	lv_label_set_text(RM_Lbl, runModeBuffer);
 80229e2:	4b10      	ldr	r3, [pc, #64]	; (8022a24 <RunMode_Obj_Init+0x180>)
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	4915      	ldr	r1, [pc, #84]	; (8022a3c <RunMode_Obj_Init+0x198>)
 80229e8:	4618      	mov	r0, r3
 80229ea:	f7f6 fec5 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 80229ee:	4b0d      	ldr	r3, [pc, #52]	; (8022a24 <RunMode_Obj_Init+0x180>)
 80229f0:	6818      	ldr	r0, [r3, #0]
 80229f2:	2328      	movs	r3, #40	; 0x28
 80229f4:	9300      	str	r3, [sp, #0]
 80229f6:	2300      	movs	r3, #0
 80229f8:	2200      	movs	r2, #0
 80229fa:	2100      	movs	r1, #0
 80229fc:	f7e3 fc72 	bl	80062e4 <lv_obj_align>
}
 8022a00:	bf00      	nop
 8022a02:	3704      	adds	r7, #4
 8022a04:	46bd      	mov	sp, r7
 8022a06:	bd90      	pop	{r4, r7, pc}
 8022a08:	20006c68 	.word	0x20006c68
 8022a0c:	20006234 	.word	0x20006234
 8022a10:	20006fb1 	.word	0x20006fb1
 8022a14:	08029e84 	.word	0x08029e84
 8022a18:	200027e8 	.word	0x200027e8
 8022a1c:	20006270 	.word	0x20006270
 8022a20:	20006fc8 	.word	0x20006fc8
 8022a24:	20006f68 	.word	0x20006f68
 8022a28:	20006f65 	.word	0x20006f65
 8022a2c:	20006fac 	.word	0x20006fac
 8022a30:	20006fb8 	.word	0x20006fb8
 8022a34:	20006ff0 	.word	0x20006ff0
 8022a38:	08029e8c 	.word	0x08029e8c
 8022a3c:	20006f6c 	.word	0x20006f6c

08022a40 <RunMode_kCals>:
/* This function using for initiation kCAls Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_kCals(bool theme){
 8022a40:	b590      	push	{r4, r7, lr}
 8022a42:	b087      	sub	sp, #28
 8022a44:	af02      	add	r7, sp, #8
 8022a46:	4603      	mov	r3, r0
 8022a48:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022a4a:	f7ff fe89 	bl	8022760 <lv_scr_act>
 8022a4e:	4603      	mov	r3, r0
 8022a50:	2100      	movs	r1, #0
 8022a52:	4618      	mov	r0, r3
 8022a54:	f7f6 f9d2 	bl	8018dfc <lv_img_create>
 8022a58:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 8022a5a:	79fb      	ldrb	r3, [r7, #7]
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d004      	beq.n	8022a6a <RunMode_kCals+0x2a>
 8022a60:	494a      	ldr	r1, [pc, #296]	; (8022b8c <RunMode_kCals+0x14c>)
 8022a62:	68f8      	ldr	r0, [r7, #12]
 8022a64:	f7f6 fa68 	bl	8018f38 <lv_img_set_src>
 8022a68:	e003      	b.n	8022a72 <RunMode_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 8022a6a:	4949      	ldr	r1, [pc, #292]	; (8022b90 <RunMode_kCals+0x150>)
 8022a6c:	68f8      	ldr	r0, [r7, #12]
 8022a6e:	f7f6 fa63 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -75, -60);
 8022a72:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022a76:	9300      	str	r3, [sp, #0]
 8022a78:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022a7c:	2200      	movs	r2, #0
 8022a7e:	2100      	movs	r1, #0
 8022a80:	68f8      	ldr	r0, [r7, #12]
 8022a82:	f7e3 fc2f 	bl	80062e4 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022a86:	f7ff fe6b 	bl	8022760 <lv_scr_act>
 8022a8a:	4603      	mov	r3, r0
 8022a8c:	2100      	movs	r1, #0
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f7f6 fd40 	bl	8019514 <lv_label_create>
 8022a94:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022a96:	4a3f      	ldr	r2, [pc, #252]	; (8022b94 <RunMode_kCals+0x154>)
 8022a98:	2100      	movs	r1, #0
 8022a9a:	68b8      	ldr	r0, [r7, #8]
 8022a9c:	f7ff fe6b 	bl	8022776 <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8022aa0:	493d      	ldr	r1, [pc, #244]	; (8022b98 <RunMode_kCals+0x158>)
 8022aa2:	68b8      	ldr	r0, [r7, #8]
 8022aa4:	f7f6 fe68 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -75, 3);
 8022aa8:	2303      	movs	r3, #3
 8022aaa:	9300      	str	r3, [sp, #0]
 8022aac:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022ab0:	2200      	movs	r2, #0
 8022ab2:	2100      	movs	r1, #0
 8022ab4:	68b8      	ldr	r0, [r7, #8]
 8022ab6:	f7e3 fc15 	bl	80062e4 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 8022aba:	4938      	ldr	r1, [pc, #224]	; (8022b9c <RunMode_kCals+0x15c>)
 8022abc:	4838      	ldr	r0, [pc, #224]	; (8022ba0 <RunMode_kCals+0x160>)
 8022abe:	f7e5 fe55 	bl	800876c <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8022ac2:	4c37      	ldr	r4, [pc, #220]	; (8022ba0 <RunMode_kCals+0x160>)
 8022ac4:	2269      	movs	r2, #105	; 0x69
 8022ac6:	21cd      	movs	r1, #205	; 0xcd
 8022ac8:	20ff      	movs	r0, #255	; 0xff
 8022aca:	f7ff fe11 	bl	80226f0 <lv_color_make>
 8022ace:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 8022ad0:	4b33      	ldr	r3, [pc, #204]	; (8022ba0 <RunMode_kCals+0x160>)
 8022ad2:	2203      	movs	r2, #3
 8022ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 8022ad6:	4c32      	ldr	r4, [pc, #200]	; (8022ba0 <RunMode_kCals+0x160>)
 8022ad8:	2269      	movs	r2, #105	; 0x69
 8022ada:	21cd      	movs	r1, #205	; 0xcd
 8022adc:	20ff      	movs	r0, #255	; 0xff
 8022ade:	f7ff fe07 	bl	80226f0 <lv_color_make>
 8022ae2:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8022ae4:	4b2e      	ldr	r3, [pc, #184]	; (8022ba0 <RunMode_kCals+0x160>)
 8022ae6:	4a2f      	ldr	r2, [pc, #188]	; (8022ba4 <RunMode_kCals+0x164>)
 8022ae8:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8022aea:	f7ff fe39 	bl	8022760 <lv_scr_act>
 8022aee:	4603      	mov	r3, r0
 8022af0:	2100      	movs	r1, #0
 8022af2:	4618      	mov	r0, r3
 8022af4:	f7f1 ff0c 	bl	8014910 <lv_arc_create>
 8022af8:	4602      	mov	r2, r0
 8022afa:	4b2b      	ldr	r3, [pc, #172]	; (8022ba8 <RunMode_kCals+0x168>)
 8022afc:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_kCalsArc, 60, 60);
 8022afe:	4b2a      	ldr	r3, [pc, #168]	; (8022ba8 <RunMode_kCals+0x168>)
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	223c      	movs	r2, #60	; 0x3c
 8022b04:	213c      	movs	r1, #60	; 0x3c
 8022b06:	4618      	mov	r0, r3
 8022b08:	f7e3 fb49 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(RM_kCalsArc, 0, 360);
 8022b0c:	4b26      	ldr	r3, [pc, #152]	; (8022ba8 <RunMode_kCals+0x168>)
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022b14:	2100      	movs	r1, #0
 8022b16:	4618      	mov	r0, r3
 8022b18:	f7f1 ff76 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(RM_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8022b1c:	4b22      	ldr	r3, [pc, #136]	; (8022ba8 <RunMode_kCals+0x168>)
 8022b1e:	681b      	ldr	r3, [r3, #0]
 8022b20:	4a1f      	ldr	r2, [pc, #124]	; (8022ba0 <RunMode_kCals+0x160>)
 8022b22:	2100      	movs	r1, #0
 8022b24:	4618      	mov	r0, r3
 8022b26:	f7f1 ff98 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(RM_kCalsArc, NULL, LV_ALIGN_CENTER, -75, -60);
 8022b2a:	4b1f      	ldr	r3, [pc, #124]	; (8022ba8 <RunMode_kCals+0x168>)
 8022b2c:	6818      	ldr	r0, [r3, #0]
 8022b2e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022b32:	9300      	str	r3, [sp, #0]
 8022b34:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022b38:	2200      	movs	r2, #0
 8022b3a:	2100      	movs	r1, #0
 8022b3c:	f7e3 fbd2 	bl	80062e4 <lv_obj_align>

    RM_kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8022b40:	f7ff fe0e 	bl	8022760 <lv_scr_act>
 8022b44:	4603      	mov	r3, r0
 8022b46:	2100      	movs	r1, #0
 8022b48:	4618      	mov	r0, r3
 8022b4a:	f7f6 fce3 	bl	8019514 <lv_label_create>
 8022b4e:	4602      	mov	r2, r0
 8022b50:	4b16      	ldr	r3, [pc, #88]	; (8022bac <RunMode_kCals+0x16c>)
 8022b52:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8022b54:	4b15      	ldr	r3, [pc, #84]	; (8022bac <RunMode_kCals+0x16c>)
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	4a11      	ldr	r2, [pc, #68]	; (8022ba0 <RunMode_kCals+0x160>)
 8022b5a:	2100      	movs	r1, #0
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	f7ff fe0a 	bl	8022776 <lv_label_set_style>
   	lv_label_set_text(RM_kCalsLbl, "0000");
 8022b62:	4b12      	ldr	r3, [pc, #72]	; (8022bac <RunMode_kCals+0x16c>)
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	4912      	ldr	r1, [pc, #72]	; (8022bb0 <RunMode_kCals+0x170>)
 8022b68:	4618      	mov	r0, r3
 8022b6a:	f7f6 fe05 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 8022b6e:	4b0f      	ldr	r3, [pc, #60]	; (8022bac <RunMode_kCals+0x16c>)
 8022b70:	6818      	ldr	r0, [r3, #0]
 8022b72:	f06f 030e 	mvn.w	r3, #14
 8022b76:	9300      	str	r3, [sp, #0]
 8022b78:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	2100      	movs	r1, #0
 8022b80:	f7e3 fbb0 	bl	80062e4 <lv_obj_align>

}
 8022b84:	bf00      	nop
 8022b86:	3714      	adds	r7, #20
 8022b88:	46bd      	mov	sp, r7
 8022b8a:	bd90      	pop	{r4, r7, pc}
 8022b8c:	08037fa0 	.word	0x08037fa0
 8022b90:	080388dc 	.word	0x080388dc
 8022b94:	200061f8 	.word	0x200061f8
 8022b98:	08029ebc 	.word	0x08029ebc
 8022b9c:	20006c68 	.word	0x20006c68
 8022ba0:	200062ac 	.word	0x200062ac
 8022ba4:	200027e8 	.word	0x200027e8
 8022ba8:	20006fe0 	.word	0x20006fe0
 8022bac:	20006fd8 	.word	0x20006fd8
 8022bb0:	08029ec4 	.word	0x08029ec4

08022bb4 <RunMode_Steps>:
/* This function using for initiation Steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Steps(bool theme){
 8022bb4:	b590      	push	{r4, r7, lr}
 8022bb6:	b087      	sub	sp, #28
 8022bb8:	af02      	add	r7, sp, #8
 8022bba:	4603      	mov	r3, r0
 8022bbc:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022bbe:	f7ff fdcf 	bl	8022760 <lv_scr_act>
 8022bc2:	4603      	mov	r3, r0
 8022bc4:	2100      	movs	r1, #0
 8022bc6:	4618      	mov	r0, r3
 8022bc8:	f7f6 f918 	bl	8018dfc <lv_img_create>
 8022bcc:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8022bce:	79fb      	ldrb	r3, [r7, #7]
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	d004      	beq.n	8022bde <RunMode_Steps+0x2a>
 8022bd4:	4948      	ldr	r1, [pc, #288]	; (8022cf8 <RunMode_Steps+0x144>)
 8022bd6:	68f8      	ldr	r0, [r7, #12]
 8022bd8:	f7f6 f9ae 	bl	8018f38 <lv_img_set_src>
 8022bdc:	e003      	b.n	8022be6 <RunMode_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8022bde:	4947      	ldr	r1, [pc, #284]	; (8022cfc <RunMode_Steps+0x148>)
 8022be0:	68f8      	ldr	r0, [r7, #12]
 8022be2:	f7f6 f9a9 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -60);
 8022be6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022bea:	9300      	str	r3, [sp, #0]
 8022bec:	2300      	movs	r3, #0
 8022bee:	2200      	movs	r2, #0
 8022bf0:	2100      	movs	r1, #0
 8022bf2:	68f8      	ldr	r0, [r7, #12]
 8022bf4:	f7e3 fb76 	bl	80062e4 <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022bf8:	f7ff fdb2 	bl	8022760 <lv_scr_act>
 8022bfc:	4603      	mov	r3, r0
 8022bfe:	2100      	movs	r1, #0
 8022c00:	4618      	mov	r0, r3
 8022c02:	f7f6 fc87 	bl	8019514 <lv_label_create>
 8022c06:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022c08:	4a3d      	ldr	r2, [pc, #244]	; (8022d00 <RunMode_Steps+0x14c>)
 8022c0a:	2100      	movs	r1, #0
 8022c0c:	68b8      	ldr	r0, [r7, #8]
 8022c0e:	f7ff fdb2 	bl	8022776 <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8022c12:	493c      	ldr	r1, [pc, #240]	; (8022d04 <RunMode_Steps+0x150>)
 8022c14:	68b8      	ldr	r0, [r7, #8]
 8022c16:	f7f6 fdaf 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, 3);
 8022c1a:	2303      	movs	r3, #3
 8022c1c:	9300      	str	r3, [sp, #0]
 8022c1e:	2300      	movs	r3, #0
 8022c20:	2200      	movs	r2, #0
 8022c22:	2100      	movs	r1, #0
 8022c24:	68b8      	ldr	r0, [r7, #8]
 8022c26:	f7e3 fb5d 	bl	80062e4 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 8022c2a:	4937      	ldr	r1, [pc, #220]	; (8022d08 <RunMode_Steps+0x154>)
 8022c2c:	4837      	ldr	r0, [pc, #220]	; (8022d0c <RunMode_Steps+0x158>)
 8022c2e:	f7e5 fd9d 	bl	800876c <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8022c32:	4c36      	ldr	r4, [pc, #216]	; (8022d0c <RunMode_Steps+0x158>)
 8022c34:	2235      	movs	r2, #53	; 0x35
 8022c36:	21cc      	movs	r1, #204	; 0xcc
 8022c38:	2065      	movs	r0, #101	; 0x65
 8022c3a:	f7ff fd59 	bl	80226f0 <lv_color_make>
 8022c3e:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8022c40:	4b32      	ldr	r3, [pc, #200]	; (8022d0c <RunMode_Steps+0x158>)
 8022c42:	2203      	movs	r2, #3
 8022c44:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8022c46:	4c31      	ldr	r4, [pc, #196]	; (8022d0c <RunMode_Steps+0x158>)
 8022c48:	2235      	movs	r2, #53	; 0x35
 8022c4a:	21cc      	movs	r1, #204	; 0xcc
 8022c4c:	2065      	movs	r0, #101	; 0x65
 8022c4e:	f7ff fd4f 	bl	80226f0 <lv_color_make>
 8022c52:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8022c54:	4b2d      	ldr	r3, [pc, #180]	; (8022d0c <RunMode_Steps+0x158>)
 8022c56:	4a2e      	ldr	r2, [pc, #184]	; (8022d10 <RunMode_Steps+0x15c>)
 8022c58:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8022c5a:	f7ff fd81 	bl	8022760 <lv_scr_act>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	2100      	movs	r1, #0
 8022c62:	4618      	mov	r0, r3
 8022c64:	f7f1 fe54 	bl	8014910 <lv_arc_create>
 8022c68:	4602      	mov	r2, r0
 8022c6a:	4b2a      	ldr	r3, [pc, #168]	; (8022d14 <RunMode_Steps+0x160>)
 8022c6c:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_stepsArc, 60, 60);
 8022c6e:	4b29      	ldr	r3, [pc, #164]	; (8022d14 <RunMode_Steps+0x160>)
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	223c      	movs	r2, #60	; 0x3c
 8022c74:	213c      	movs	r1, #60	; 0x3c
 8022c76:	4618      	mov	r0, r3
 8022c78:	f7e3 fa91 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(RM_stepsArc, 0, 360);
 8022c7c:	4b25      	ldr	r3, [pc, #148]	; (8022d14 <RunMode_Steps+0x160>)
 8022c7e:	681b      	ldr	r3, [r3, #0]
 8022c80:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022c84:	2100      	movs	r1, #0
 8022c86:	4618      	mov	r0, r3
 8022c88:	f7f1 febe 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(RM_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8022c8c:	4b21      	ldr	r3, [pc, #132]	; (8022d14 <RunMode_Steps+0x160>)
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	4a1e      	ldr	r2, [pc, #120]	; (8022d0c <RunMode_Steps+0x158>)
 8022c92:	2100      	movs	r1, #0
 8022c94:	4618      	mov	r0, r3
 8022c96:	f7f1 fee0 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(RM_stepsArc, NULL, LV_ALIGN_CENTER, 0, -60);
 8022c9a:	4b1e      	ldr	r3, [pc, #120]	; (8022d14 <RunMode_Steps+0x160>)
 8022c9c:	6818      	ldr	r0, [r3, #0]
 8022c9e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022ca2:	9300      	str	r3, [sp, #0]
 8022ca4:	2300      	movs	r3, #0
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	2100      	movs	r1, #0
 8022caa:	f7e3 fb1b 	bl	80062e4 <lv_obj_align>

    RM_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8022cae:	f7ff fd57 	bl	8022760 <lv_scr_act>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	2100      	movs	r1, #0
 8022cb6:	4618      	mov	r0, r3
 8022cb8:	f7f6 fc2c 	bl	8019514 <lv_label_create>
 8022cbc:	4602      	mov	r2, r0
 8022cbe:	4b16      	ldr	r3, [pc, #88]	; (8022d18 <RunMode_Steps+0x164>)
 8022cc0:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8022cc2:	4b15      	ldr	r3, [pc, #84]	; (8022d18 <RunMode_Steps+0x164>)
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	4a11      	ldr	r2, [pc, #68]	; (8022d0c <RunMode_Steps+0x158>)
 8022cc8:	2100      	movs	r1, #0
 8022cca:	4618      	mov	r0, r3
 8022ccc:	f7ff fd53 	bl	8022776 <lv_label_set_style>
   	lv_label_set_text(RM_stepsLbl, "00000");
 8022cd0:	4b11      	ldr	r3, [pc, #68]	; (8022d18 <RunMode_Steps+0x164>)
 8022cd2:	681b      	ldr	r3, [r3, #0]
 8022cd4:	4911      	ldr	r1, [pc, #68]	; (8022d1c <RunMode_Steps+0x168>)
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	f7f6 fd4e 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8022cdc:	4b0e      	ldr	r3, [pc, #56]	; (8022d18 <RunMode_Steps+0x164>)
 8022cde:	6818      	ldr	r0, [r3, #0]
 8022ce0:	f06f 030e 	mvn.w	r3, #14
 8022ce4:	9300      	str	r3, [sp, #0]
 8022ce6:	2300      	movs	r3, #0
 8022ce8:	2200      	movs	r2, #0
 8022cea:	2100      	movs	r1, #0
 8022cec:	f7e3 fafa 	bl	80062e4 <lv_obj_align>

}
 8022cf0:	bf00      	nop
 8022cf2:	3714      	adds	r7, #20
 8022cf4:	46bd      	mov	sp, r7
 8022cf6:	bd90      	pop	{r4, r7, pc}
 8022cf8:	0803f2e0 	.word	0x0803f2e0
 8022cfc:	0803fc1c 	.word	0x0803fc1c
 8022d00:	200061f8 	.word	0x200061f8
 8022d04:	08029ebc 	.word	0x08029ebc
 8022d08:	20006c68 	.word	0x20006c68
 8022d0c:	200062e8 	.word	0x200062e8
 8022d10:	200027e8 	.word	0x200027e8
 8022d14:	20006fdc 	.word	0x20006fdc
 8022d18:	20006fbc 	.word	0x20006fbc
 8022d1c:	08029ecc 	.word	0x08029ecc

08022d20 <RunMode_Distances>:
/* This function using for initiation Distances Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Distances(bool unitType,bool theme){
 8022d20:	b590      	push	{r4, r7, lr}
 8022d22:	b087      	sub	sp, #28
 8022d24:	af02      	add	r7, sp, #8
 8022d26:	4603      	mov	r3, r0
 8022d28:	460a      	mov	r2, r1
 8022d2a:	71fb      	strb	r3, [r7, #7]
 8022d2c:	4613      	mov	r3, r2
 8022d2e:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022d30:	f7ff fd16 	bl	8022760 <lv_scr_act>
 8022d34:	4603      	mov	r3, r0
 8022d36:	2100      	movs	r1, #0
 8022d38:	4618      	mov	r0, r3
 8022d3a:	f7f6 f85f 	bl	8018dfc <lv_img_create>
 8022d3e:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 8022d40:	79bb      	ldrb	r3, [r7, #6]
 8022d42:	2b00      	cmp	r3, #0
 8022d44:	d004      	beq.n	8022d50 <RunMode_Distances+0x30>
 8022d46:	494d      	ldr	r1, [pc, #308]	; (8022e7c <RunMode_Distances+0x15c>)
 8022d48:	68f8      	ldr	r0, [r7, #12]
 8022d4a:	f7f6 f8f5 	bl	8018f38 <lv_img_set_src>
 8022d4e:	e003      	b.n	8022d58 <RunMode_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 8022d50:	494b      	ldr	r1, [pc, #300]	; (8022e80 <RunMode_Distances+0x160>)
 8022d52:	68f8      	ldr	r0, [r7, #12]
 8022d54:	f7f6 f8f0 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 75, -60);
 8022d58:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022d5c:	9300      	str	r3, [sp, #0]
 8022d5e:	234b      	movs	r3, #75	; 0x4b
 8022d60:	2200      	movs	r2, #0
 8022d62:	2100      	movs	r1, #0
 8022d64:	68f8      	ldr	r0, [r7, #12]
 8022d66:	f7e3 fabd 	bl	80062e4 <lv_obj_align>

 	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022d6a:	f7ff fcf9 	bl	8022760 <lv_scr_act>
 8022d6e:	4603      	mov	r3, r0
 8022d70:	2100      	movs	r1, #0
 8022d72:	4618      	mov	r0, r3
 8022d74:	f7f6 fbce 	bl	8019514 <lv_label_create>
 8022d78:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022d7a:	4a42      	ldr	r2, [pc, #264]	; (8022e84 <RunMode_Distances+0x164>)
 8022d7c:	2100      	movs	r1, #0
 8022d7e:	68b8      	ldr	r0, [r7, #8]
 8022d80:	f7ff fcf9 	bl	8022776 <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 8022d84:	79fb      	ldrb	r3, [r7, #7]
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	d004      	beq.n	8022d94 <RunMode_Distances+0x74>
 8022d8a:	493f      	ldr	r1, [pc, #252]	; (8022e88 <RunMode_Distances+0x168>)
 8022d8c:	68b8      	ldr	r0, [r7, #8]
 8022d8e:	f7f6 fcf3 	bl	8019778 <lv_label_set_text>
 8022d92:	e003      	b.n	8022d9c <RunMode_Distances+0x7c>
 	else lv_label_set_text(distDescLbl, "miles");
 8022d94:	493d      	ldr	r1, [pc, #244]	; (8022e8c <RunMode_Distances+0x16c>)
 8022d96:	68b8      	ldr	r0, [r7, #8]
 8022d98:	f7f6 fcee 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 75, 3);
 8022d9c:	2303      	movs	r3, #3
 8022d9e:	9300      	str	r3, [sp, #0]
 8022da0:	234b      	movs	r3, #75	; 0x4b
 8022da2:	2200      	movs	r2, #0
 8022da4:	2100      	movs	r1, #0
 8022da6:	68b8      	ldr	r0, [r7, #8]
 8022da8:	f7e3 fa9c 	bl	80062e4 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8022dac:	4938      	ldr	r1, [pc, #224]	; (8022e90 <RunMode_Distances+0x170>)
 8022dae:	4839      	ldr	r0, [pc, #228]	; (8022e94 <RunMode_Distances+0x174>)
 8022db0:	f7e5 fcdc 	bl	800876c <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8022db4:	4c37      	ldr	r4, [pc, #220]	; (8022e94 <RunMode_Distances+0x174>)
 8022db6:	2220      	movs	r2, #32
 8022db8:	2117      	movs	r1, #23
 8022dba:	20d6      	movs	r0, #214	; 0xd6
 8022dbc:	f7ff fc98 	bl	80226f0 <lv_color_make>
 8022dc0:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8022dc2:	4b34      	ldr	r3, [pc, #208]	; (8022e94 <RunMode_Distances+0x174>)
 8022dc4:	2203      	movs	r2, #3
 8022dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 8022dc8:	4c32      	ldr	r4, [pc, #200]	; (8022e94 <RunMode_Distances+0x174>)
 8022dca:	2220      	movs	r2, #32
 8022dcc:	2117      	movs	r1, #23
 8022dce:	20d6      	movs	r0, #214	; 0xd6
 8022dd0:	f7ff fc8e 	bl	80226f0 <lv_color_make>
 8022dd4:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 8022dd6:	4b2f      	ldr	r3, [pc, #188]	; (8022e94 <RunMode_Distances+0x174>)
 8022dd8:	4a2f      	ldr	r2, [pc, #188]	; (8022e98 <RunMode_Distances+0x178>)
 8022dda:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_distArc = lv_arc_create(lv_scr_act(), NULL);
 8022ddc:	f7ff fcc0 	bl	8022760 <lv_scr_act>
 8022de0:	4603      	mov	r3, r0
 8022de2:	2100      	movs	r1, #0
 8022de4:	4618      	mov	r0, r3
 8022de6:	f7f1 fd93 	bl	8014910 <lv_arc_create>
 8022dea:	4602      	mov	r2, r0
 8022dec:	4b2b      	ldr	r3, [pc, #172]	; (8022e9c <RunMode_Distances+0x17c>)
 8022dee:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_distArc, 60, 60);
 8022df0:	4b2a      	ldr	r3, [pc, #168]	; (8022e9c <RunMode_Distances+0x17c>)
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	223c      	movs	r2, #60	; 0x3c
 8022df6:	213c      	movs	r1, #60	; 0x3c
 8022df8:	4618      	mov	r0, r3
 8022dfa:	f7e3 f9d0 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(RM_distArc, 0, 360);
 8022dfe:	4b27      	ldr	r3, [pc, #156]	; (8022e9c <RunMode_Distances+0x17c>)
 8022e00:	681b      	ldr	r3, [r3, #0]
 8022e02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022e06:	2100      	movs	r1, #0
 8022e08:	4618      	mov	r0, r3
 8022e0a:	f7f1 fdfd 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(RM_distArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8022e0e:	4b23      	ldr	r3, [pc, #140]	; (8022e9c <RunMode_Distances+0x17c>)
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	4a20      	ldr	r2, [pc, #128]	; (8022e94 <RunMode_Distances+0x174>)
 8022e14:	2100      	movs	r1, #0
 8022e16:	4618      	mov	r0, r3
 8022e18:	f7f1 fe1f 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(RM_distArc, NULL, LV_ALIGN_CENTER, 75, -60);
 8022e1c:	4b1f      	ldr	r3, [pc, #124]	; (8022e9c <RunMode_Distances+0x17c>)
 8022e1e:	6818      	ldr	r0, [r3, #0]
 8022e20:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022e24:	9300      	str	r3, [sp, #0]
 8022e26:	234b      	movs	r3, #75	; 0x4b
 8022e28:	2200      	movs	r2, #0
 8022e2a:	2100      	movs	r1, #0
 8022e2c:	f7e3 fa5a 	bl	80062e4 <lv_obj_align>

    RM_distLbl = lv_label_create(lv_scr_act(), NULL);
 8022e30:	f7ff fc96 	bl	8022760 <lv_scr_act>
 8022e34:	4603      	mov	r3, r0
 8022e36:	2100      	movs	r1, #0
 8022e38:	4618      	mov	r0, r3
 8022e3a:	f7f6 fb6b 	bl	8019514 <lv_label_create>
 8022e3e:	4602      	mov	r2, r0
 8022e40:	4b17      	ldr	r3, [pc, #92]	; (8022ea0 <RunMode_Distances+0x180>)
 8022e42:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_distLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 8022e44:	4b16      	ldr	r3, [pc, #88]	; (8022ea0 <RunMode_Distances+0x180>)
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	4a12      	ldr	r2, [pc, #72]	; (8022e94 <RunMode_Distances+0x174>)
 8022e4a:	2100      	movs	r1, #0
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	f7ff fc92 	bl	8022776 <lv_label_set_style>
   	lv_label_set_text(RM_distLbl, "00.000");
 8022e52:	4b13      	ldr	r3, [pc, #76]	; (8022ea0 <RunMode_Distances+0x180>)
 8022e54:	681b      	ldr	r3, [r3, #0]
 8022e56:	4913      	ldr	r1, [pc, #76]	; (8022ea4 <RunMode_Distances+0x184>)
 8022e58:	4618      	mov	r0, r3
 8022e5a:	f7f6 fc8d 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75, -15);
 8022e5e:	4b10      	ldr	r3, [pc, #64]	; (8022ea0 <RunMode_Distances+0x180>)
 8022e60:	6818      	ldr	r0, [r3, #0]
 8022e62:	f06f 030e 	mvn.w	r3, #14
 8022e66:	9300      	str	r3, [sp, #0]
 8022e68:	234b      	movs	r3, #75	; 0x4b
 8022e6a:	2200      	movs	r2, #0
 8022e6c:	2100      	movs	r1, #0
 8022e6e:	f7e3 fa39 	bl	80062e4 <lv_obj_align>
}
 8022e72:	bf00      	nop
 8022e74:	3714      	adds	r7, #20
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd90      	pop	{r4, r7, pc}
 8022e7a:	bf00      	nop
 8022e7c:	08039218 	.word	0x08039218
 8022e80:	08039b54 	.word	0x08039b54
 8022e84:	200061f8 	.word	0x200061f8
 8022e88:	08029ed4 	.word	0x08029ed4
 8022e8c:	08029ed8 	.word	0x08029ed8
 8022e90:	20006c68 	.word	0x20006c68
 8022e94:	20006324 	.word	0x20006324
 8022e98:	200027e8 	.word	0x200027e8
 8022e9c:	20006fe8 	.word	0x20006fe8
 8022ea0:	20006fb4 	.word	0x20006fb4
 8022ea4:	08029ee0 	.word	0x08029ee0

08022ea8 <RunModeScreen_Updater>:
/*This function using for update all updater functions*/
void RunModeScreen_Updater(lv_task_t *t){
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b082      	sub	sp, #8
 8022eac:	af00      	add	r7, sp, #0
 8022eae:	6078      	str	r0, [r7, #4]
	if(RM_taskController){
 8022eb0:	4b09      	ldr	r3, [pc, #36]	; (8022ed8 <RunModeScreen_Updater+0x30>)
 8022eb2:	781b      	ldrb	r3, [r3, #0]
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	d008      	beq.n	8022eca <RunModeScreen_Updater+0x22>
		 RunMode_RunMode_Updater();
 8022eb8:	f000 f812 	bl	8022ee0 <RunMode_RunMode_Updater>
		 RunMode_steps_angle_loader();
 8022ebc:	f000 f8bc 	bl	8023038 <RunMode_steps_angle_loader>
		 RunMode_kCals_angle_loader();
 8022ec0:	f000 f952 	bl	8023168 <RunMode_kCals_angle_loader>
		 RunMode_distances_angle_loader();
 8022ec4:	f000 f9ec 	bl	80232a0 <RunMode_distances_angle_loader>
	}else lv_task_del(t);
}
 8022ec8:	e002      	b.n	8022ed0 <RunModeScreen_Updater+0x28>
	}else lv_task_del(t);
 8022eca:	6878      	ldr	r0, [r7, #4]
 8022ecc:	f7f0 ffe8 	bl	8013ea0 <lv_task_del>
}
 8022ed0:	bf00      	nop
 8022ed2:	3708      	adds	r7, #8
 8022ed4:	46bd      	mov	sp, r7
 8022ed6:	bd80      	pop	{r7, pc}
 8022ed8:	20006fd4 	.word	0x20006fd4
 8022edc:	00000000 	.word	0x00000000

08022ee0 <RunMode_RunMode_Updater>:
/*This function using for update to current label*/
void RunMode_RunMode_Updater(void){
 8022ee0:	b5b0      	push	{r4, r5, r7, lr}
 8022ee2:	b086      	sub	sp, #24
 8022ee4:	af04      	add	r7, sp, #16
		if(0==RMtimeSetVal){
 8022ee6:	4b48      	ldr	r3, [pc, #288]	; (8023008 <RunMode_RunMode_Updater+0x128>)
 8022ee8:	781b      	ldrb	r3, [r3, #0]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d17e      	bne.n	8022fec <RunMode_RunMode_Updater+0x10c>
			uint16_t targetValTmp = RMtargetSeconds+(RMtargetMinutes*60)+(RMtargetHours*60*60);
 8022eee:	4b47      	ldr	r3, [pc, #284]	; (802300c <RunMode_RunMode_Updater+0x12c>)
 8022ef0:	781b      	ldrb	r3, [r3, #0]
 8022ef2:	b29a      	uxth	r2, r3
 8022ef4:	4b46      	ldr	r3, [pc, #280]	; (8023010 <RunMode_RunMode_Updater+0x130>)
 8022ef6:	781b      	ldrb	r3, [r3, #0]
 8022ef8:	b29b      	uxth	r3, r3
 8022efa:	4619      	mov	r1, r3
 8022efc:	0109      	lsls	r1, r1, #4
 8022efe:	1acb      	subs	r3, r1, r3
 8022f00:	4619      	mov	r1, r3
 8022f02:	0109      	lsls	r1, r1, #4
 8022f04:	1acb      	subs	r3, r1, r3
 8022f06:	011b      	lsls	r3, r3, #4
 8022f08:	b299      	uxth	r1, r3
 8022f0a:	4b42      	ldr	r3, [pc, #264]	; (8023014 <RunMode_RunMode_Updater+0x134>)
 8022f0c:	781b      	ldrb	r3, [r3, #0]
 8022f0e:	b29b      	uxth	r3, r3
 8022f10:	4618      	mov	r0, r3
 8022f12:	0100      	lsls	r0, r0, #4
 8022f14:	1ac3      	subs	r3, r0, r3
 8022f16:	009b      	lsls	r3, r3, #2
 8022f18:	b29b      	uxth	r3, r3
 8022f1a:	440b      	add	r3, r1
 8022f1c:	b29b      	uxth	r3, r3
 8022f1e:	4413      	add	r3, r2
 8022f20:	80fb      	strh	r3, [r7, #6]
			uint16_t nowValTmp = RMseconds+(RMminutes*60)+(RMhours*60*60);
 8022f22:	4b3d      	ldr	r3, [pc, #244]	; (8023018 <RunMode_RunMode_Updater+0x138>)
 8022f24:	781b      	ldrb	r3, [r3, #0]
 8022f26:	b29a      	uxth	r2, r3
 8022f28:	4b3c      	ldr	r3, [pc, #240]	; (802301c <RunMode_RunMode_Updater+0x13c>)
 8022f2a:	781b      	ldrb	r3, [r3, #0]
 8022f2c:	b29b      	uxth	r3, r3
 8022f2e:	4619      	mov	r1, r3
 8022f30:	0109      	lsls	r1, r1, #4
 8022f32:	1acb      	subs	r3, r1, r3
 8022f34:	4619      	mov	r1, r3
 8022f36:	0109      	lsls	r1, r1, #4
 8022f38:	1acb      	subs	r3, r1, r3
 8022f3a:	011b      	lsls	r3, r3, #4
 8022f3c:	b299      	uxth	r1, r3
 8022f3e:	4b38      	ldr	r3, [pc, #224]	; (8023020 <RunMode_RunMode_Updater+0x140>)
 8022f40:	781b      	ldrb	r3, [r3, #0]
 8022f42:	b29b      	uxth	r3, r3
 8022f44:	4618      	mov	r0, r3
 8022f46:	0100      	lsls	r0, r0, #4
 8022f48:	1ac3      	subs	r3, r0, r3
 8022f4a:	009b      	lsls	r3, r3, #2
 8022f4c:	b29b      	uxth	r3, r3
 8022f4e:	440b      	add	r3, r1
 8022f50:	b29b      	uxth	r3, r3
 8022f52:	4413      	add	r3, r2
 8022f54:	80bb      	strh	r3, [r7, #4]
			uint8_t targetBarTmp = tos_Ratio(nowValTmp, 0,targetValTmp ,0, 100);
 8022f56:	88bb      	ldrh	r3, [r7, #4]
 8022f58:	4618      	mov	r0, r3
 8022f5a:	f7dd fae3 	bl	8000524 <__aeabi_ui2d>
 8022f5e:	4604      	mov	r4, r0
 8022f60:	460d      	mov	r5, r1
 8022f62:	88fb      	ldrh	r3, [r7, #6]
 8022f64:	4618      	mov	r0, r3
 8022f66:	f7dd fadd 	bl	8000524 <__aeabi_ui2d>
 8022f6a:	4602      	mov	r2, r0
 8022f6c:	460b      	mov	r3, r1
 8022f6e:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8022ff8 <RunMode_RunMode_Updater+0x118>
 8022f72:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8023000 <RunMode_RunMode_Updater+0x120>
 8022f76:	ec43 2b12 	vmov	d2, r2, r3
 8022f7a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023000 <RunMode_RunMode_Updater+0x120>
 8022f7e:	ec45 4b10 	vmov	d0, r4, r5
 8022f82:	f003 fc37 	bl	80267f4 <tos_Ratio>
 8022f86:	ec54 3b10 	vmov	r3, r4, d0
 8022f8a:	4618      	mov	r0, r3
 8022f8c:	4621      	mov	r1, r4
 8022f8e:	f7dd fe1b 	bl	8000bc8 <__aeabi_d2uiz>
 8022f92:	4603      	mov	r3, r0
 8022f94:	70fb      	strb	r3, [r7, #3]
		    lv_bar_set_value(RM_targetTimeBar, targetBarTmp, LV_ANIM_OFF);
 8022f96:	4b23      	ldr	r3, [pc, #140]	; (8023024 <RunMode_RunMode_Updater+0x144>)
 8022f98:	681b      	ldr	r3, [r3, #0]
 8022f9a:	78fa      	ldrb	r2, [r7, #3]
 8022f9c:	b211      	sxth	r1, r2
 8022f9e:	2200      	movs	r2, #0
 8022fa0:	4618      	mov	r0, r3
 8022fa2:	f7f2 f82b 	bl	8014ffc <lv_bar_set_value>

		snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8022fa6:	4b1d      	ldr	r3, [pc, #116]	; (802301c <RunMode_RunMode_Updater+0x13c>)
 8022fa8:	781b      	ldrb	r3, [r3, #0]
 8022faa:	4618      	mov	r0, r3
 8022fac:	4b1c      	ldr	r3, [pc, #112]	; (8023020 <RunMode_RunMode_Updater+0x140>)
 8022fae:	781b      	ldrb	r3, [r3, #0]
 8022fb0:	461a      	mov	r2, r3
 8022fb2:	4b19      	ldr	r3, [pc, #100]	; (8023018 <RunMode_RunMode_Updater+0x138>)
 8022fb4:	781b      	ldrb	r3, [r3, #0]
 8022fb6:	4619      	mov	r1, r3
 8022fb8:	4b1b      	ldr	r3, [pc, #108]	; (8023028 <RunMode_RunMode_Updater+0x148>)
 8022fba:	881b      	ldrh	r3, [r3, #0]
 8022fbc:	9302      	str	r3, [sp, #8]
 8022fbe:	9101      	str	r1, [sp, #4]
 8022fc0:	9200      	str	r2, [sp, #0]
 8022fc2:	4603      	mov	r3, r0
 8022fc4:	4a19      	ldr	r2, [pc, #100]	; (802302c <RunMode_RunMode_Updater+0x14c>)
 8022fc6:	2140      	movs	r1, #64	; 0x40
 8022fc8:	4819      	ldr	r0, [pc, #100]	; (8023030 <RunMode_RunMode_Updater+0x150>)
 8022fca:	f004 fe11 	bl	8027bf0 <sniprintf>
				RMhours,RMminutes,RMseconds,RMmilisecs);
		lv_label_set_text(RM_Lbl, runModeBuffer);
 8022fce:	4b19      	ldr	r3, [pc, #100]	; (8023034 <RunMode_RunMode_Updater+0x154>)
 8022fd0:	681b      	ldr	r3, [r3, #0]
 8022fd2:	4917      	ldr	r1, [pc, #92]	; (8023030 <RunMode_RunMode_Updater+0x150>)
 8022fd4:	4618      	mov	r0, r3
 8022fd6:	f7f6 fbcf 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8022fda:	4b16      	ldr	r3, [pc, #88]	; (8023034 <RunMode_RunMode_Updater+0x154>)
 8022fdc:	6818      	ldr	r0, [r3, #0]
 8022fde:	2328      	movs	r3, #40	; 0x28
 8022fe0:	9300      	str	r3, [sp, #0]
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	2200      	movs	r2, #0
 8022fe6:	2100      	movs	r1, #0
 8022fe8:	f7e3 f97c 	bl	80062e4 <lv_obj_align>
	}
}
 8022fec:	bf00      	nop
 8022fee:	3708      	adds	r7, #8
 8022ff0:	46bd      	mov	sp, r7
 8022ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8022ff4:	f3af 8000 	nop.w
 8022ff8:	00000000 	.word	0x00000000
 8022ffc:	40590000 	.word	0x40590000
	...
 8023008:	20006fb0 	.word	0x20006fb0
 802300c:	2000283c 	.word	0x2000283c
 8023010:	20006fcc 	.word	0x20006fcc
 8023014:	20006fd5 	.word	0x20006fd5
 8023018:	20006fb8 	.word	0x20006fb8
 802301c:	20006f65 	.word	0x20006f65
 8023020:	20006fac 	.word	0x20006fac
 8023024:	20006fc8 	.word	0x20006fc8
 8023028:	20006ff0 	.word	0x20006ff0
 802302c:	08029e8c 	.word	0x08029e8c
 8023030:	20006f6c 	.word	0x20006f6c
 8023034:	20006f68 	.word	0x20006f68

08023038 <RunMode_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void RunMode_steps_angle_loader(void)
{	    snprintf(runModeBuffer,8, "%05d",(RMsteps-RMstepsBeff));
 8023038:	b590      	push	{r4, r7, lr}
 802303a:	b085      	sub	sp, #20
 802303c:	af02      	add	r7, sp, #8
 802303e:	4b42      	ldr	r3, [pc, #264]	; (8023148 <RunMode_steps_angle_loader+0x110>)
 8023040:	881b      	ldrh	r3, [r3, #0]
 8023042:	461a      	mov	r2, r3
 8023044:	4b41      	ldr	r3, [pc, #260]	; (802314c <RunMode_steps_angle_loader+0x114>)
 8023046:	881b      	ldrh	r3, [r3, #0]
 8023048:	1ad3      	subs	r3, r2, r3
 802304a:	4a41      	ldr	r2, [pc, #260]	; (8023150 <RunMode_steps_angle_loader+0x118>)
 802304c:	2108      	movs	r1, #8
 802304e:	4841      	ldr	r0, [pc, #260]	; (8023154 <RunMode_steps_angle_loader+0x11c>)
 8023050:	f004 fdce 	bl	8027bf0 <sniprintf>
 		lv_label_set_text(RM_stepsLbl, runModeBuffer);
 8023054:	4b40      	ldr	r3, [pc, #256]	; (8023158 <RunMode_steps_angle_loader+0x120>)
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	493e      	ldr	r1, [pc, #248]	; (8023154 <RunMode_steps_angle_loader+0x11c>)
 802305a:	4618      	mov	r0, r3
 802305c:	f7f6 fb8c 	bl	8019778 <lv_label_set_text>
 		lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8023060:	4b3d      	ldr	r3, [pc, #244]	; (8023158 <RunMode_steps_angle_loader+0x120>)
 8023062:	6818      	ldr	r0, [r3, #0]
 8023064:	f06f 030e 	mvn.w	r3, #14
 8023068:	9300      	str	r3, [sp, #0]
 802306a:	2300      	movs	r3, #0
 802306c:	2200      	movs	r2, #0
 802306e:	2100      	movs	r1, #0
 8023070:	f7e3 f938 	bl	80062e4 <lv_obj_align>

 		if((RMsteps-RMstepsBeff)<=10000){
 8023074:	4b34      	ldr	r3, [pc, #208]	; (8023148 <RunMode_steps_angle_loader+0x110>)
 8023076:	881b      	ldrh	r3, [r3, #0]
 8023078:	461a      	mov	r2, r3
 802307a:	4b34      	ldr	r3, [pc, #208]	; (802314c <RunMode_steps_angle_loader+0x114>)
 802307c:	881b      	ldrh	r3, [r3, #0]
 802307e:	1ad3      	subs	r3, r2, r3
 8023080:	f242 7210 	movw	r2, #10000	; 0x2710
 8023084:	4293      	cmp	r3, r2
 8023086:	dc4f      	bgt.n	8023128 <RunMode_steps_angle_loader+0xf0>
 			double stepsTemp = tos_Ratio((RMsteps-RMstepsBeff), 0, 10000, 0, 359);
 8023088:	4b2f      	ldr	r3, [pc, #188]	; (8023148 <RunMode_steps_angle_loader+0x110>)
 802308a:	881b      	ldrh	r3, [r3, #0]
 802308c:	461a      	mov	r2, r3
 802308e:	4b2f      	ldr	r3, [pc, #188]	; (802314c <RunMode_steps_angle_loader+0x114>)
 8023090:	881b      	ldrh	r3, [r3, #0]
 8023092:	1ad3      	subs	r3, r2, r3
 8023094:	4618      	mov	r0, r3
 8023096:	f7dd fa55 	bl	8000544 <__aeabi_i2d>
 802309a:	4603      	mov	r3, r0
 802309c:	460c      	mov	r4, r1
 802309e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8023130 <RunMode_steps_angle_loader+0xf8>
 80230a2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8023138 <RunMode_steps_angle_loader+0x100>
 80230a6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8023140 <RunMode_steps_angle_loader+0x108>
 80230aa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023138 <RunMode_steps_angle_loader+0x100>
 80230ae:	ec44 3b10 	vmov	d0, r3, r4
 80230b2:	f003 fb9f 	bl	80267f4 <tos_Ratio>
 80230b6:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(RM_stepsArc, 180-stepsTemp ,180);
 80230ba:	f04f 0200 	mov.w	r2, #0
 80230be:	4b27      	ldr	r3, [pc, #156]	; (802315c <RunMode_steps_angle_loader+0x124>)
 80230c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80230c4:	f7dd fd1a 	bl	8000afc <__aeabi_dcmplt>
 80230c8:	4603      	mov	r3, r0
 80230ca:	2b00      	cmp	r3, #0
 80230cc:	d016      	beq.n	80230fc <RunMode_steps_angle_loader+0xc4>
 80230ce:	4b24      	ldr	r3, [pc, #144]	; (8023160 <RunMode_steps_angle_loader+0x128>)
 80230d0:	681c      	ldr	r4, [r3, #0]
 80230d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80230d6:	f04f 0000 	mov.w	r0, #0
 80230da:	4920      	ldr	r1, [pc, #128]	; (802315c <RunMode_steps_angle_loader+0x124>)
 80230dc:	f7dd f8e4 	bl	80002a8 <__aeabi_dsub>
 80230e0:	4602      	mov	r2, r0
 80230e2:	460b      	mov	r3, r1
 80230e4:	4610      	mov	r0, r2
 80230e6:	4619      	mov	r1, r3
 80230e8:	f7dd fd6e 	bl	8000bc8 <__aeabi_d2uiz>
 80230ec:	4603      	mov	r3, r0
 80230ee:	b29b      	uxth	r3, r3
 80230f0:	22b4      	movs	r2, #180	; 0xb4
 80230f2:	4619      	mov	r1, r3
 80230f4:	4620      	mov	r0, r4
 80230f6:	f7f1 fc87 	bl	8014a08 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 		}
}
 80230fa:	e015      	b.n	8023128 <RunMode_steps_angle_loader+0xf0>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 80230fc:	4b18      	ldr	r3, [pc, #96]	; (8023160 <RunMode_steps_angle_loader+0x128>)
 80230fe:	681c      	ldr	r4, [r3, #0]
 8023100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023104:	f04f 0000 	mov.w	r0, #0
 8023108:	4916      	ldr	r1, [pc, #88]	; (8023164 <RunMode_steps_angle_loader+0x12c>)
 802310a:	f7dd f8cd 	bl	80002a8 <__aeabi_dsub>
 802310e:	4602      	mov	r2, r0
 8023110:	460b      	mov	r3, r1
 8023112:	4610      	mov	r0, r2
 8023114:	4619      	mov	r1, r3
 8023116:	f7dd fd57 	bl	8000bc8 <__aeabi_d2uiz>
 802311a:	4603      	mov	r3, r0
 802311c:	b29b      	uxth	r3, r3
 802311e:	22b4      	movs	r2, #180	; 0xb4
 8023120:	4619      	mov	r1, r3
 8023122:	4620      	mov	r0, r4
 8023124:	f7f1 fc70 	bl	8014a08 <lv_arc_set_angles>
}
 8023128:	bf00      	nop
 802312a:	370c      	adds	r7, #12
 802312c:	46bd      	mov	sp, r7
 802312e:	bd90      	pop	{r4, r7, pc}
 8023130:	00000000 	.word	0x00000000
 8023134:	40767000 	.word	0x40767000
	...
 8023144:	40c38800 	.word	0x40c38800
 8023148:	20006fee 	.word	0x20006fee
 802314c:	20006fe6 	.word	0x20006fe6
 8023150:	08029ee8 	.word	0x08029ee8
 8023154:	20006f6c 	.word	0x20006f6c
 8023158:	20006fbc 	.word	0x20006fbc
 802315c:	40668000 	.word	0x40668000
 8023160:	20006fdc 	.word	0x20006fdc
 8023164:	4080e000 	.word	0x4080e000

08023168 <RunMode_kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_kCals_angle_loader(void)
{ 		snprintf(runModeBuffer,8, "%05d",(RMkCals-RMkCalsBeff));
 8023168:	b590      	push	{r4, r7, lr}
 802316a:	b085      	sub	sp, #20
 802316c:	af02      	add	r7, sp, #8
 802316e:	4b44      	ldr	r3, [pc, #272]	; (8023280 <RunMode_kCals_angle_loader+0x118>)
 8023170:	881b      	ldrh	r3, [r3, #0]
 8023172:	461a      	mov	r2, r3
 8023174:	4b43      	ldr	r3, [pc, #268]	; (8023284 <RunMode_kCals_angle_loader+0x11c>)
 8023176:	881b      	ldrh	r3, [r3, #0]
 8023178:	1ad3      	subs	r3, r2, r3
 802317a:	4a43      	ldr	r2, [pc, #268]	; (8023288 <RunMode_kCals_angle_loader+0x120>)
 802317c:	2108      	movs	r1, #8
 802317e:	4843      	ldr	r0, [pc, #268]	; (802328c <RunMode_kCals_angle_loader+0x124>)
 8023180:	f004 fd36 	bl	8027bf0 <sniprintf>
 		lv_label_set_text(RM_kCalsLbl, runModeBuffer);
 8023184:	4b42      	ldr	r3, [pc, #264]	; (8023290 <RunMode_kCals_angle_loader+0x128>)
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	4940      	ldr	r1, [pc, #256]	; (802328c <RunMode_kCals_angle_loader+0x124>)
 802318a:	4618      	mov	r0, r3
 802318c:	f7f6 faf4 	bl	8019778 <lv_label_set_text>
 	   	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 8023190:	4b3f      	ldr	r3, [pc, #252]	; (8023290 <RunMode_kCals_angle_loader+0x128>)
 8023192:	6818      	ldr	r0, [r3, #0]
 8023194:	f06f 030e 	mvn.w	r3, #14
 8023198:	9300      	str	r3, [sp, #0]
 802319a:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 802319e:	2200      	movs	r2, #0
 80231a0:	2100      	movs	r1, #0
 80231a2:	f7e3 f89f 	bl	80062e4 <lv_obj_align>

 	   	if((RMkCals-RMkCalsBeff)<=10000){
 80231a6:	4b36      	ldr	r3, [pc, #216]	; (8023280 <RunMode_kCals_angle_loader+0x118>)
 80231a8:	881b      	ldrh	r3, [r3, #0]
 80231aa:	461a      	mov	r2, r3
 80231ac:	4b35      	ldr	r3, [pc, #212]	; (8023284 <RunMode_kCals_angle_loader+0x11c>)
 80231ae:	881b      	ldrh	r3, [r3, #0]
 80231b0:	1ad3      	subs	r3, r2, r3
 80231b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80231b6:	4293      	cmp	r3, r2
 80231b8:	dc4f      	bgt.n	802325a <RunMode_kCals_angle_loader+0xf2>
 			double kCalsTemp = tos_Ratio((RMkCals-RMkCalsBeff), 0, 10000, 0, 359);
 80231ba:	4b31      	ldr	r3, [pc, #196]	; (8023280 <RunMode_kCals_angle_loader+0x118>)
 80231bc:	881b      	ldrh	r3, [r3, #0]
 80231be:	461a      	mov	r2, r3
 80231c0:	4b30      	ldr	r3, [pc, #192]	; (8023284 <RunMode_kCals_angle_loader+0x11c>)
 80231c2:	881b      	ldrh	r3, [r3, #0]
 80231c4:	1ad3      	subs	r3, r2, r3
 80231c6:	4618      	mov	r0, r3
 80231c8:	f7dd f9bc 	bl	8000544 <__aeabi_i2d>
 80231cc:	4603      	mov	r3, r0
 80231ce:	460c      	mov	r4, r1
 80231d0:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8023268 <RunMode_kCals_angle_loader+0x100>
 80231d4:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8023270 <RunMode_kCals_angle_loader+0x108>
 80231d8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8023278 <RunMode_kCals_angle_loader+0x110>
 80231dc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8023270 <RunMode_kCals_angle_loader+0x108>
 80231e0:	ec44 3b10 	vmov	d0, r3, r4
 80231e4:	f003 fb06 	bl	80267f4 <tos_Ratio>
 80231e8:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(RM_kCalsArc, 180-kCalsTemp ,180);
 80231ec:	f04f 0200 	mov.w	r2, #0
 80231f0:	4b28      	ldr	r3, [pc, #160]	; (8023294 <RunMode_kCals_angle_loader+0x12c>)
 80231f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80231f6:	f7dd fc81 	bl	8000afc <__aeabi_dcmplt>
 80231fa:	4603      	mov	r3, r0
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	d016      	beq.n	802322e <RunMode_kCals_angle_loader+0xc6>
 8023200:	4b25      	ldr	r3, [pc, #148]	; (8023298 <RunMode_kCals_angle_loader+0x130>)
 8023202:	681c      	ldr	r4, [r3, #0]
 8023204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023208:	f04f 0000 	mov.w	r0, #0
 802320c:	4921      	ldr	r1, [pc, #132]	; (8023294 <RunMode_kCals_angle_loader+0x12c>)
 802320e:	f7dd f84b 	bl	80002a8 <__aeabi_dsub>
 8023212:	4602      	mov	r2, r0
 8023214:	460b      	mov	r3, r1
 8023216:	4610      	mov	r0, r2
 8023218:	4619      	mov	r1, r3
 802321a:	f7dd fcd5 	bl	8000bc8 <__aeabi_d2uiz>
 802321e:	4603      	mov	r3, r0
 8023220:	b29b      	uxth	r3, r3
 8023222:	22b4      	movs	r2, #180	; 0xb4
 8023224:	4619      	mov	r1, r3
 8023226:	4620      	mov	r0, r4
 8023228:	f7f1 fbee 	bl	8014a08 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 802322c:	e015      	b.n	802325a <RunMode_kCals_angle_loader+0xf2>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 802322e:	4b1a      	ldr	r3, [pc, #104]	; (8023298 <RunMode_kCals_angle_loader+0x130>)
 8023230:	681c      	ldr	r4, [r3, #0]
 8023232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023236:	f04f 0000 	mov.w	r0, #0
 802323a:	4918      	ldr	r1, [pc, #96]	; (802329c <RunMode_kCals_angle_loader+0x134>)
 802323c:	f7dd f834 	bl	80002a8 <__aeabi_dsub>
 8023240:	4602      	mov	r2, r0
 8023242:	460b      	mov	r3, r1
 8023244:	4610      	mov	r0, r2
 8023246:	4619      	mov	r1, r3
 8023248:	f7dd fcbe 	bl	8000bc8 <__aeabi_d2uiz>
 802324c:	4603      	mov	r3, r0
 802324e:	b29b      	uxth	r3, r3
 8023250:	22b4      	movs	r2, #180	; 0xb4
 8023252:	4619      	mov	r1, r3
 8023254:	4620      	mov	r0, r4
 8023256:	f7f1 fbd7 	bl	8014a08 <lv_arc_set_angles>
}
 802325a:	bf00      	nop
 802325c:	370c      	adds	r7, #12
 802325e:	46bd      	mov	sp, r7
 8023260:	bd90      	pop	{r4, r7, pc}
 8023262:	bf00      	nop
 8023264:	f3af 8000 	nop.w
 8023268:	00000000 	.word	0x00000000
 802326c:	40767000 	.word	0x40767000
	...
 802327c:	40c38800 	.word	0x40c38800
 8023280:	20006fae 	.word	0x20006fae
 8023284:	20006fc4 	.word	0x20006fc4
 8023288:	08029ee8 	.word	0x08029ee8
 802328c:	20006f6c 	.word	0x20006f6c
 8023290:	20006fd8 	.word	0x20006fd8
 8023294:	40668000 	.word	0x40668000
 8023298:	20006fe0 	.word	0x20006fe0
 802329c:	4080e000 	.word	0x4080e000

080232a0 <RunMode_distances_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_distances_angle_loader(void){
 80232a0:	b590      	push	{r4, r7, lr}
 80232a2:	b089      	sub	sp, #36	; 0x24
 80232a4:	af02      	add	r7, sp, #8
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 80232a6:	4b54      	ldr	r3, [pc, #336]	; (80233f8 <RunMode_distances_angle_loader+0x158>)
 80232a8:	781a      	ldrb	r2, [r3, #0]
 80232aa:	4b54      	ldr	r3, [pc, #336]	; (80233fc <RunMode_distances_angle_loader+0x15c>)
 80232ac:	881b      	ldrh	r3, [r3, #0]
 80232ae:	4619      	mov	r1, r3
 80232b0:	4610      	mov	r0, r2
 80232b2:	f003 fb1d 	bl	80268f0 <tos_distance_Calc>
 80232b6:	eef0 7a40 	vmov.f32	s15, s0
 80232ba:	4b51      	ldr	r3, [pc, #324]	; (8023400 <RunMode_distances_angle_loader+0x160>)
 80232bc:	edc3 7a00 	vstr	s15, [r3]
		float distTmp =RMdistances-RMdistancesBeff;
 80232c0:	4b4f      	ldr	r3, [pc, #316]	; (8023400 <RunMode_distances_angle_loader+0x160>)
 80232c2:	ed93 7a00 	vldr	s14, [r3]
 80232c6:	4b4f      	ldr	r3, [pc, #316]	; (8023404 <RunMode_distances_angle_loader+0x164>)
 80232c8:	edd3 7a00 	vldr	s15, [r3]
 80232cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80232d0:	edc7 7a05 	vstr	s15, [r7, #20]
		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 80232d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80232d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80232dc:	ee17 3a90 	vmov	r3, s15
 80232e0:	827b      	strh	r3, [r7, #18]
 80232e2:	8a7b      	ldrh	r3, [r7, #18]
 80232e4:	ee07 3a90 	vmov	s15, r3
 80232e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80232ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80232f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80232f4:	edc7 7a03 	vstr	s15, [r7, #12]
 80232f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80232fc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8023408 <RunMode_distances_angle_loader+0x168>
 8023300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023304:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(runModeBuffer,8, "%02d.%03d",tmp1,(uint16_t)tmp2);
 8023308:	8a7b      	ldrh	r3, [r7, #18]
 802330a:	edd7 7a03 	vldr	s15, [r7, #12]
 802330e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023312:	ee17 2a90 	vmov	r2, s15
 8023316:	b292      	uxth	r2, r2
 8023318:	9200      	str	r2, [sp, #0]
 802331a:	4a3c      	ldr	r2, [pc, #240]	; (802340c <RunMode_distances_angle_loader+0x16c>)
 802331c:	2108      	movs	r1, #8
 802331e:	483c      	ldr	r0, [pc, #240]	; (8023410 <RunMode_distances_angle_loader+0x170>)
 8023320:	f004 fc66 	bl	8027bf0 <sniprintf>
	 	lv_label_set_text(RM_distLbl, runModeBuffer);
 8023324:	4b3b      	ldr	r3, [pc, #236]	; (8023414 <RunMode_distances_angle_loader+0x174>)
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	4939      	ldr	r1, [pc, #228]	; (8023410 <RunMode_distances_angle_loader+0x170>)
 802332a:	4618      	mov	r0, r3
 802332c:	f7f6 fa24 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75,-15);
 8023330:	4b38      	ldr	r3, [pc, #224]	; (8023414 <RunMode_distances_angle_loader+0x174>)
 8023332:	6818      	ldr	r0, [r3, #0]
 8023334:	f06f 030e 	mvn.w	r3, #14
 8023338:	9300      	str	r3, [sp, #0]
 802333a:	234b      	movs	r3, #75	; 0x4b
 802333c:	2200      	movs	r2, #0
 802333e:	2100      	movs	r1, #0
 8023340:	f7e2 ffd0 	bl	80062e4 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8023344:	6978      	ldr	r0, [r7, #20]
 8023346:	f7dd f90f 	bl	8000568 <__aeabi_f2d>
 802334a:	4603      	mov	r3, r0
 802334c:	460c      	mov	r4, r1
 802334e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80233e0 <RunMode_distances_angle_loader+0x140>
 8023352:	ed9f 3b25 	vldr	d3, [pc, #148]	; 80233e8 <RunMode_distances_angle_loader+0x148>
 8023356:	ed9f 2b26 	vldr	d2, [pc, #152]	; 80233f0 <RunMode_distances_angle_loader+0x150>
 802335a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80233e8 <RunMode_distances_angle_loader+0x148>
 802335e:	ec44 3b10 	vmov	d0, r3, r4
 8023362:	f003 fa47 	bl	80267f4 <tos_Ratio>
 8023366:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(RM_distArc, 180-distanceTemp ,180);
 802336a:	f04f 0200 	mov.w	r2, #0
 802336e:	4b2a      	ldr	r3, [pc, #168]	; (8023418 <RunMode_distances_angle_loader+0x178>)
 8023370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8023374:	f7dd fbc2 	bl	8000afc <__aeabi_dcmplt>
 8023378:	4603      	mov	r3, r0
 802337a:	2b00      	cmp	r3, #0
 802337c:	d016      	beq.n	80233ac <RunMode_distances_angle_loader+0x10c>
 802337e:	4b27      	ldr	r3, [pc, #156]	; (802341c <RunMode_distances_angle_loader+0x17c>)
 8023380:	681c      	ldr	r4, [r3, #0]
 8023382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023386:	f04f 0000 	mov.w	r0, #0
 802338a:	4923      	ldr	r1, [pc, #140]	; (8023418 <RunMode_distances_angle_loader+0x178>)
 802338c:	f7dc ff8c 	bl	80002a8 <__aeabi_dsub>
 8023390:	4602      	mov	r2, r0
 8023392:	460b      	mov	r3, r1
 8023394:	4610      	mov	r0, r2
 8023396:	4619      	mov	r1, r3
 8023398:	f7dd fc16 	bl	8000bc8 <__aeabi_d2uiz>
 802339c:	4603      	mov	r3, r0
 802339e:	b29b      	uxth	r3, r3
 80233a0:	22b4      	movs	r2, #180	; 0xb4
 80233a2:	4619      	mov	r1, r3
 80233a4:	4620      	mov	r0, r4
 80233a6:	f7f1 fb2f 	bl	8014a08 <lv_arc_set_angles>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
}
 80233aa:	e015      	b.n	80233d8 <RunMode_distances_angle_loader+0x138>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
 80233ac:	4b1b      	ldr	r3, [pc, #108]	; (802341c <RunMode_distances_angle_loader+0x17c>)
 80233ae:	681c      	ldr	r4, [r3, #0]
 80233b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80233b4:	f04f 0000 	mov.w	r0, #0
 80233b8:	4919      	ldr	r1, [pc, #100]	; (8023420 <RunMode_distances_angle_loader+0x180>)
 80233ba:	f7dc ff75 	bl	80002a8 <__aeabi_dsub>
 80233be:	4602      	mov	r2, r0
 80233c0:	460b      	mov	r3, r1
 80233c2:	4610      	mov	r0, r2
 80233c4:	4619      	mov	r1, r3
 80233c6:	f7dd fbff 	bl	8000bc8 <__aeabi_d2uiz>
 80233ca:	4603      	mov	r3, r0
 80233cc:	b29b      	uxth	r3, r3
 80233ce:	22b4      	movs	r2, #180	; 0xb4
 80233d0:	4619      	mov	r1, r3
 80233d2:	4620      	mov	r0, r4
 80233d4:	f7f1 fb18 	bl	8014a08 <lv_arc_set_angles>
}
 80233d8:	bf00      	nop
 80233da:	371c      	adds	r7, #28
 80233dc:	46bd      	mov	sp, r7
 80233de:	bd90      	pop	{r4, r7, pc}
 80233e0:	00000000 	.word	0x00000000
 80233e4:	40767000 	.word	0x40767000
	...
 80233f4:	408f4000 	.word	0x408f4000
 80233f8:	20006f64 	.word	0x20006f64
 80233fc:	20006fee 	.word	0x20006fee
 8023400:	20006fd0 	.word	0x20006fd0
 8023404:	20006fc0 	.word	0x20006fc0
 8023408:	447a0000 	.word	0x447a0000
 802340c:	08029ef0 	.word	0x08029ef0
 8023410:	20006f6c 	.word	0x20006f6c
 8023414:	20006fb4 	.word	0x20006fb4
 8023418:	40668000 	.word	0x40668000
 802341c:	20006fe8 	.word	0x20006fe8
 8023420:	4080e000 	.word	0x4080e000

08023424 <RunMode_ButtonController>:
/*This function using for control to buttons*/
void RunMode_ButtonController(void){
 8023424:	b580      	push	{r7, lr}
 8023426:	af00      	add	r7, sp, #0
	  if(1==tos_LeftButton_Listenner_For_MenuControl()) {
 8023428:	f003 f98c 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 802342c:	4603      	mov	r3, r0
 802342e:	2b01      	cmp	r3, #1
 8023430:	d101      	bne.n	8023436 <RunMode_ButtonController+0x12>
		  //Time Set
		  RunMode_RunTimeUpdateVal();
 8023432:	f000 f8d5 	bl	80235e0 <RunMode_RunTimeUpdateVal>
	  }
	  if(2==tos_LeftButton_Listenner_For_MenuControl()){
 8023436:	f003 f985 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 802343a:	4603      	mov	r3, r0
 802343c:	2b02      	cmp	r3, #2
 802343e:	d101      	bne.n	8023444 <RunMode_ButtonController+0x20>
		  //Time Set Open/Close
		  RunMode_RunTimeSetVal();
 8023440:	f000 f8b8 	bl	80235b4 <RunMode_RunTimeSetVal>
	  }

	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8023444:	f003 f952 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8023448:	4603      	mov	r3, r0
 802344a:	2b01      	cmp	r3, #1
 802344c:	d119      	bne.n	8023482 <RunMode_ButtonController+0x5e>
		  //Timer start/stop
		  if(0==RMtimeSetVal && !isStartRun){ RunMode_FistValueSet();
 802344e:	4b1f      	ldr	r3, [pc, #124]	; (80234cc <RunMode_ButtonController+0xa8>)
 8023450:	781b      	ldrb	r3, [r3, #0]
 8023452:	2b00      	cmp	r3, #0
 8023454:	d10f      	bne.n	8023476 <RunMode_ButtonController+0x52>
 8023456:	4b1e      	ldr	r3, [pc, #120]	; (80234d0 <RunMode_ButtonController+0xac>)
 8023458:	781b      	ldrb	r3, [r3, #0]
 802345a:	f083 0301 	eor.w	r3, r3, #1
 802345e:	b2db      	uxtb	r3, r3
 8023460:	2b00      	cmp	r3, #0
 8023462:	d008      	beq.n	8023476 <RunMode_ButtonController+0x52>
 8023464:	f000 f9de 	bl	8023824 <RunMode_FistValueSet>
			  HAL_TIM_Base_Start_IT(&TOS_RUNMODE_TIMER); isStartRun=true;
 8023468:	481a      	ldr	r0, [pc, #104]	; (80234d4 <RunMode_ButtonController+0xb0>)
 802346a:	f7e0 fc0c 	bl	8003c86 <HAL_TIM_Base_Start_IT>
 802346e:	4b18      	ldr	r3, [pc, #96]	; (80234d0 <RunMode_ButtonController+0xac>)
 8023470:	2201      	movs	r2, #1
 8023472:	701a      	strb	r2, [r3, #0]
 8023474:	e005      	b.n	8023482 <RunMode_ButtonController+0x5e>
		  }
		  else { isStartRun=false;
 8023476:	4b16      	ldr	r3, [pc, #88]	; (80234d0 <RunMode_ButtonController+0xac>)
 8023478:	2200      	movs	r2, #0
 802347a:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 802347c:	4815      	ldr	r0, [pc, #84]	; (80234d4 <RunMode_ButtonController+0xb0>)
 802347e:	f7e0 fc26 	bl	8003cce <HAL_TIM_Base_Stop_IT>
		  }
	  }
	  if(2==tos_RightButton_Listenner_For_MenuControl()){
 8023482:	f003 f933 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8023486:	4603      	mov	r3, r0
 8023488:	2b02      	cmp	r3, #2
 802348a:	d11c      	bne.n	80234c6 <RunMode_ButtonController+0xa2>
		  //Clear and stop
		   RMmilisecs=0; RMfirstVAl=true;
 802348c:	4b12      	ldr	r3, [pc, #72]	; (80234d8 <RunMode_ButtonController+0xb4>)
 802348e:	2200      	movs	r2, #0
 8023490:	801a      	strh	r2, [r3, #0]
 8023492:	4b12      	ldr	r3, [pc, #72]	; (80234dc <RunMode_ButtonController+0xb8>)
 8023494:	2201      	movs	r2, #1
 8023496:	701a      	strb	r2, [r3, #0]
			  RMseconds=0;RMminutes=0;RMhours=0;RMtargetSeconds=0;RMtargetMinutes=0;RMtargetHours=0;
 8023498:	4b11      	ldr	r3, [pc, #68]	; (80234e0 <RunMode_ButtonController+0xbc>)
 802349a:	2200      	movs	r2, #0
 802349c:	701a      	strb	r2, [r3, #0]
 802349e:	4b11      	ldr	r3, [pc, #68]	; (80234e4 <RunMode_ButtonController+0xc0>)
 80234a0:	2200      	movs	r2, #0
 80234a2:	701a      	strb	r2, [r3, #0]
 80234a4:	4b10      	ldr	r3, [pc, #64]	; (80234e8 <RunMode_ButtonController+0xc4>)
 80234a6:	2200      	movs	r2, #0
 80234a8:	701a      	strb	r2, [r3, #0]
 80234aa:	4b10      	ldr	r3, [pc, #64]	; (80234ec <RunMode_ButtonController+0xc8>)
 80234ac:	2200      	movs	r2, #0
 80234ae:	701a      	strb	r2, [r3, #0]
 80234b0:	4b0f      	ldr	r3, [pc, #60]	; (80234f0 <RunMode_ButtonController+0xcc>)
 80234b2:	2200      	movs	r2, #0
 80234b4:	701a      	strb	r2, [r3, #0]
 80234b6:	4b0f      	ldr	r3, [pc, #60]	; (80234f4 <RunMode_ButtonController+0xd0>)
 80234b8:	2200      	movs	r2, #0
 80234ba:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 80234bc:	4805      	ldr	r0, [pc, #20]	; (80234d4 <RunMode_ButtonController+0xb0>)
 80234be:	f7e0 fc06 	bl	8003cce <HAL_TIM_Base_Stop_IT>
			  RunMode_RunTimeLblController();
 80234c2:	f000 f8d3 	bl	802366c <RunMode_RunTimeLblController>
	  }
}
 80234c6:	bf00      	nop
 80234c8:	bd80      	pop	{r7, pc}
 80234ca:	bf00      	nop
 80234cc:	20006fb0 	.word	0x20006fb0
 80234d0:	20006fe4 	.word	0x20006fe4
 80234d4:	200068ac 	.word	0x200068ac
 80234d8:	20006ff0 	.word	0x20006ff0
 80234dc:	20006fec 	.word	0x20006fec
 80234e0:	20006fb8 	.word	0x20006fb8
 80234e4:	20006fac 	.word	0x20006fac
 80234e8:	20006f65 	.word	0x20006f65
 80234ec:	2000283c 	.word	0x2000283c
 80234f0:	20006fd5 	.word	0x20006fd5
 80234f4:	20006fcc 	.word	0x20006fcc

080234f8 <RunMode_Update_Time>:
/*This function using for update time
 * this function must be called in timer interupt function*/
void RunMode_Update_Time(void){
 80234f8:	b580      	push	{r7, lr}
 80234fa:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(RM_taskController){
 80234fc:	4b24      	ldr	r3, [pc, #144]	; (8023590 <RunMode_Update_Time+0x98>)
 80234fe:	781b      	ldrb	r3, [r3, #0]
 8023500:	2b00      	cmp	r3, #0
 8023502:	d042      	beq.n	802358a <RunMode_Update_Time+0x92>
		if(RMtargetHours==RMhours && RMtargetMinutes ==RMminutes && RMtargetSeconds==RMseconds)
 8023504:	4b23      	ldr	r3, [pc, #140]	; (8023594 <RunMode_Update_Time+0x9c>)
 8023506:	781a      	ldrb	r2, [r3, #0]
 8023508:	4b23      	ldr	r3, [pc, #140]	; (8023598 <RunMode_Update_Time+0xa0>)
 802350a:	781b      	ldrb	r3, [r3, #0]
 802350c:	429a      	cmp	r2, r3
 802350e:	d10e      	bne.n	802352e <RunMode_Update_Time+0x36>
 8023510:	4b22      	ldr	r3, [pc, #136]	; (802359c <RunMode_Update_Time+0xa4>)
 8023512:	781a      	ldrb	r2, [r3, #0]
 8023514:	4b22      	ldr	r3, [pc, #136]	; (80235a0 <RunMode_Update_Time+0xa8>)
 8023516:	781b      	ldrb	r3, [r3, #0]
 8023518:	429a      	cmp	r2, r3
 802351a:	d108      	bne.n	802352e <RunMode_Update_Time+0x36>
 802351c:	4b21      	ldr	r3, [pc, #132]	; (80235a4 <RunMode_Update_Time+0xac>)
 802351e:	781a      	ldrb	r2, [r3, #0]
 8023520:	4b21      	ldr	r3, [pc, #132]	; (80235a8 <RunMode_Update_Time+0xb0>)
 8023522:	781b      	ldrb	r3, [r3, #0]
 8023524:	429a      	cmp	r2, r3
 8023526:	d102      	bne.n	802352e <RunMode_Update_Time+0x36>
		HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8023528:	4820      	ldr	r0, [pc, #128]	; (80235ac <RunMode_Update_Time+0xb4>)
 802352a:	f7e0 fbd0 	bl	8003cce <HAL_TIM_Base_Stop_IT>
		RMmilisecs++;
 802352e:	4b20      	ldr	r3, [pc, #128]	; (80235b0 <RunMode_Update_Time+0xb8>)
 8023530:	881b      	ldrh	r3, [r3, #0]
 8023532:	3301      	adds	r3, #1
 8023534:	b29a      	uxth	r2, r3
 8023536:	4b1e      	ldr	r3, [pc, #120]	; (80235b0 <RunMode_Update_Time+0xb8>)
 8023538:	801a      	strh	r2, [r3, #0]
			if(RMmilisecs==1000){
 802353a:	4b1d      	ldr	r3, [pc, #116]	; (80235b0 <RunMode_Update_Time+0xb8>)
 802353c:	881b      	ldrh	r3, [r3, #0]
 802353e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8023542:	d122      	bne.n	802358a <RunMode_Update_Time+0x92>
				RMmilisecs=0;
 8023544:	4b1a      	ldr	r3, [pc, #104]	; (80235b0 <RunMode_Update_Time+0xb8>)
 8023546:	2200      	movs	r2, #0
 8023548:	801a      	strh	r2, [r3, #0]
				RMseconds++;
 802354a:	4b17      	ldr	r3, [pc, #92]	; (80235a8 <RunMode_Update_Time+0xb0>)
 802354c:	781b      	ldrb	r3, [r3, #0]
 802354e:	3301      	adds	r3, #1
 8023550:	b2da      	uxtb	r2, r3
 8023552:	4b15      	ldr	r3, [pc, #84]	; (80235a8 <RunMode_Update_Time+0xb0>)
 8023554:	701a      	strb	r2, [r3, #0]
				if(RMseconds==60){
 8023556:	4b14      	ldr	r3, [pc, #80]	; (80235a8 <RunMode_Update_Time+0xb0>)
 8023558:	781b      	ldrb	r3, [r3, #0]
 802355a:	2b3c      	cmp	r3, #60	; 0x3c
 802355c:	d115      	bne.n	802358a <RunMode_Update_Time+0x92>
					RMseconds=0;
 802355e:	4b12      	ldr	r3, [pc, #72]	; (80235a8 <RunMode_Update_Time+0xb0>)
 8023560:	2200      	movs	r2, #0
 8023562:	701a      	strb	r2, [r3, #0]
					RMminutes++;
 8023564:	4b0e      	ldr	r3, [pc, #56]	; (80235a0 <RunMode_Update_Time+0xa8>)
 8023566:	781b      	ldrb	r3, [r3, #0]
 8023568:	3301      	adds	r3, #1
 802356a:	b2da      	uxtb	r2, r3
 802356c:	4b0c      	ldr	r3, [pc, #48]	; (80235a0 <RunMode_Update_Time+0xa8>)
 802356e:	701a      	strb	r2, [r3, #0]
					if(RMminutes==60){
 8023570:	4b0b      	ldr	r3, [pc, #44]	; (80235a0 <RunMode_Update_Time+0xa8>)
 8023572:	781b      	ldrb	r3, [r3, #0]
 8023574:	2b3c      	cmp	r3, #60	; 0x3c
 8023576:	d108      	bne.n	802358a <RunMode_Update_Time+0x92>
						RMminutes=0;
 8023578:	4b09      	ldr	r3, [pc, #36]	; (80235a0 <RunMode_Update_Time+0xa8>)
 802357a:	2200      	movs	r2, #0
 802357c:	701a      	strb	r2, [r3, #0]
						RMhours++;
 802357e:	4b06      	ldr	r3, [pc, #24]	; (8023598 <RunMode_Update_Time+0xa0>)
 8023580:	781b      	ldrb	r3, [r3, #0]
 8023582:	3301      	adds	r3, #1
 8023584:	b2da      	uxtb	r2, r3
 8023586:	4b04      	ldr	r3, [pc, #16]	; (8023598 <RunMode_Update_Time+0xa0>)
 8023588:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}

}
 802358a:	bf00      	nop
 802358c:	bd80      	pop	{r7, pc}
 802358e:	bf00      	nop
 8023590:	20006fd4 	.word	0x20006fd4
 8023594:	20006fcc 	.word	0x20006fcc
 8023598:	20006f65 	.word	0x20006f65
 802359c:	20006fd5 	.word	0x20006fd5
 80235a0:	20006fac 	.word	0x20006fac
 80235a4:	2000283c 	.word	0x2000283c
 80235a8:	20006fb8 	.word	0x20006fb8
 80235ac:	200068ac 	.word	0x200068ac
 80235b0:	20006ff0 	.word	0x20006ff0

080235b4 <RunMode_RunTimeSetVal>:
/*This function using for  control the set target values chouser*/
void RunMode_RunTimeSetVal(void){
 80235b4:	b580      	push	{r7, lr}
 80235b6:	af00      	add	r7, sp, #0
	RMtimeSetVal++;
 80235b8:	4b08      	ldr	r3, [pc, #32]	; (80235dc <RunMode_RunTimeSetVal+0x28>)
 80235ba:	781b      	ldrb	r3, [r3, #0]
 80235bc:	3301      	adds	r3, #1
 80235be:	b2da      	uxtb	r2, r3
 80235c0:	4b06      	ldr	r3, [pc, #24]	; (80235dc <RunMode_RunTimeSetVal+0x28>)
 80235c2:	701a      	strb	r2, [r3, #0]
	if(4==RMtimeSetVal)RMtimeSetVal=0;
 80235c4:	4b05      	ldr	r3, [pc, #20]	; (80235dc <RunMode_RunTimeSetVal+0x28>)
 80235c6:	781b      	ldrb	r3, [r3, #0]
 80235c8:	2b04      	cmp	r3, #4
 80235ca:	d102      	bne.n	80235d2 <RunMode_RunTimeSetVal+0x1e>
 80235cc:	4b03      	ldr	r3, [pc, #12]	; (80235dc <RunMode_RunTimeSetVal+0x28>)
 80235ce:	2200      	movs	r2, #0
 80235d0:	701a      	strb	r2, [r3, #0]
	RunMode_RunTimeLblController();
 80235d2:	f000 f84b 	bl	802366c <RunMode_RunTimeLblController>
}
 80235d6:	bf00      	nop
 80235d8:	bd80      	pop	{r7, pc}
 80235da:	bf00      	nop
 80235dc:	20006fb0 	.word	0x20006fb0

080235e0 <RunMode_RunTimeUpdateVal>:

/*This function using for  update and plus the target values*/
void RunMode_RunTimeUpdateVal(void){
 80235e0:	b580      	push	{r7, lr}
 80235e2:	af00      	add	r7, sp, #0
	switch(RMtimeSetVal){
 80235e4:	4b1d      	ldr	r3, [pc, #116]	; (802365c <RunMode_RunTimeUpdateVal+0x7c>)
 80235e6:	781b      	ldrb	r3, [r3, #0]
 80235e8:	2b02      	cmp	r3, #2
 80235ea:	d012      	beq.n	8023612 <RunMode_RunTimeUpdateVal+0x32>
 80235ec:	2b03      	cmp	r3, #3
 80235ee:	d01e      	beq.n	802362e <RunMode_RunTimeUpdateVal+0x4e>
 80235f0:	2b01      	cmp	r3, #1
 80235f2:	d000      	beq.n	80235f6 <RunMode_RunTimeUpdateVal+0x16>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
	default: break;
 80235f4:	e02e      	b.n	8023654 <RunMode_RunTimeUpdateVal+0x74>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 80235f6:	4b1a      	ldr	r3, [pc, #104]	; (8023660 <RunMode_RunTimeUpdateVal+0x80>)
 80235f8:	781b      	ldrb	r3, [r3, #0]
 80235fa:	3301      	adds	r3, #1
 80235fc:	b2da      	uxtb	r2, r3
 80235fe:	4b18      	ldr	r3, [pc, #96]	; (8023660 <RunMode_RunTimeUpdateVal+0x80>)
 8023600:	701a      	strb	r2, [r3, #0]
 8023602:	4b17      	ldr	r3, [pc, #92]	; (8023660 <RunMode_RunTimeUpdateVal+0x80>)
 8023604:	781b      	ldrb	r3, [r3, #0]
 8023606:	2b18      	cmp	r3, #24
 8023608:	d11f      	bne.n	802364a <RunMode_RunTimeUpdateVal+0x6a>
 802360a:	4b15      	ldr	r3, [pc, #84]	; (8023660 <RunMode_RunTimeUpdateVal+0x80>)
 802360c:	2200      	movs	r2, #0
 802360e:	701a      	strb	r2, [r3, #0]
 8023610:	e01b      	b.n	802364a <RunMode_RunTimeUpdateVal+0x6a>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 8023612:	4b14      	ldr	r3, [pc, #80]	; (8023664 <RunMode_RunTimeUpdateVal+0x84>)
 8023614:	781b      	ldrb	r3, [r3, #0]
 8023616:	3301      	adds	r3, #1
 8023618:	b2da      	uxtb	r2, r3
 802361a:	4b12      	ldr	r3, [pc, #72]	; (8023664 <RunMode_RunTimeUpdateVal+0x84>)
 802361c:	701a      	strb	r2, [r3, #0]
 802361e:	4b11      	ldr	r3, [pc, #68]	; (8023664 <RunMode_RunTimeUpdateVal+0x84>)
 8023620:	781b      	ldrb	r3, [r3, #0]
 8023622:	2b3c      	cmp	r3, #60	; 0x3c
 8023624:	d113      	bne.n	802364e <RunMode_RunTimeUpdateVal+0x6e>
 8023626:	4b0f      	ldr	r3, [pc, #60]	; (8023664 <RunMode_RunTimeUpdateVal+0x84>)
 8023628:	2200      	movs	r2, #0
 802362a:	701a      	strb	r2, [r3, #0]
 802362c:	e00f      	b.n	802364e <RunMode_RunTimeUpdateVal+0x6e>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 802362e:	4b0e      	ldr	r3, [pc, #56]	; (8023668 <RunMode_RunTimeUpdateVal+0x88>)
 8023630:	781b      	ldrb	r3, [r3, #0]
 8023632:	3301      	adds	r3, #1
 8023634:	b2da      	uxtb	r2, r3
 8023636:	4b0c      	ldr	r3, [pc, #48]	; (8023668 <RunMode_RunTimeUpdateVal+0x88>)
 8023638:	701a      	strb	r2, [r3, #0]
 802363a:	4b0b      	ldr	r3, [pc, #44]	; (8023668 <RunMode_RunTimeUpdateVal+0x88>)
 802363c:	781b      	ldrb	r3, [r3, #0]
 802363e:	2b3c      	cmp	r3, #60	; 0x3c
 8023640:	d107      	bne.n	8023652 <RunMode_RunTimeUpdateVal+0x72>
 8023642:	4b09      	ldr	r3, [pc, #36]	; (8023668 <RunMode_RunTimeUpdateVal+0x88>)
 8023644:	2200      	movs	r2, #0
 8023646:	701a      	strb	r2, [r3, #0]
 8023648:	e003      	b.n	8023652 <RunMode_RunTimeUpdateVal+0x72>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 802364a:	bf00      	nop
 802364c:	e002      	b.n	8023654 <RunMode_RunTimeUpdateVal+0x74>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 802364e:	bf00      	nop
 8023650:	e000      	b.n	8023654 <RunMode_RunTimeUpdateVal+0x74>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 8023652:	bf00      	nop
	}
	RunMode_RunTimeLblController();
 8023654:	f000 f80a 	bl	802366c <RunMode_RunTimeLblController>
}
 8023658:	bf00      	nop
 802365a:	bd80      	pop	{r7, pc}
 802365c:	20006fb0 	.word	0x20006fb0
 8023660:	20006fcc 	.word	0x20006fcc
 8023664:	20006fd5 	.word	0x20006fd5
 8023668:	2000283c 	.word	0x2000283c

0802366c <RunMode_RunTimeLblController>:

/*This function using for update set time label*/
void RunMode_RunTimeLblController(void){
 802366c:	b580      	push	{r7, lr}
 802366e:	b084      	sub	sp, #16
 8023670:	af04      	add	r7, sp, #16
	switch(RMtimeSetVal){
 8023672:	4b5d      	ldr	r3, [pc, #372]	; (80237e8 <RunMode_RunTimeLblController+0x17c>)
 8023674:	781b      	ldrb	r3, [r3, #0]
 8023676:	2b02      	cmp	r3, #2
 8023678:	d032      	beq.n	80236e0 <RunMode_RunTimeLblController+0x74>
 802367a:	2b03      	cmp	r3, #3
 802367c:	d05e      	beq.n	802373c <RunMode_RunTimeLblController+0xd0>
 802367e:	2b01      	cmp	r3, #1
 8023680:	f040 808a 	bne.w	8023798 <RunMode_RunTimeLblController+0x12c>
	case 1:
			if(RM_theme)
 8023684:	4b59      	ldr	r3, [pc, #356]	; (80237ec <RunMode_RunTimeLblController+0x180>)
 8023686:	781b      	ldrb	r3, [r3, #0]
 8023688:	2b00      	cmp	r3, #0
 802368a:	d014      	beq.n	80236b6 <RunMode_RunTimeLblController+0x4a>
				 snprintf(runModeBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802368c:	4b58      	ldr	r3, [pc, #352]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 802368e:	781b      	ldrb	r3, [r3, #0]
 8023690:	4618      	mov	r0, r3
 8023692:	4b58      	ldr	r3, [pc, #352]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 8023694:	781b      	ldrb	r3, [r3, #0]
 8023696:	461a      	mov	r2, r3
 8023698:	4b57      	ldr	r3, [pc, #348]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 802369a:	781b      	ldrb	r3, [r3, #0]
 802369c:	4619      	mov	r1, r3
 802369e:	4b57      	ldr	r3, [pc, #348]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 80236a0:	881b      	ldrh	r3, [r3, #0]
 80236a2:	9302      	str	r3, [sp, #8]
 80236a4:	9101      	str	r1, [sp, #4]
 80236a6:	9200      	str	r2, [sp, #0]
 80236a8:	4603      	mov	r3, r0
 80236aa:	4a55      	ldr	r2, [pc, #340]	; (8023800 <RunMode_RunTimeLblController+0x194>)
 80236ac:	2140      	movs	r1, #64	; 0x40
 80236ae:	4855      	ldr	r0, [pc, #340]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 80236b0:	f004 fa9e 	bl	8027bf0 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 80236b4:	e085      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80236b6:	4b4e      	ldr	r3, [pc, #312]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 80236b8:	781b      	ldrb	r3, [r3, #0]
 80236ba:	4618      	mov	r0, r3
 80236bc:	4b4d      	ldr	r3, [pc, #308]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 80236be:	781b      	ldrb	r3, [r3, #0]
 80236c0:	461a      	mov	r2, r3
 80236c2:	4b4d      	ldr	r3, [pc, #308]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 80236c4:	781b      	ldrb	r3, [r3, #0]
 80236c6:	4619      	mov	r1, r3
 80236c8:	4b4c      	ldr	r3, [pc, #304]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 80236ca:	881b      	ldrh	r3, [r3, #0]
 80236cc:	9302      	str	r3, [sp, #8]
 80236ce:	9101      	str	r1, [sp, #4]
 80236d0:	9200      	str	r2, [sp, #0]
 80236d2:	4603      	mov	r3, r0
 80236d4:	4a4c      	ldr	r2, [pc, #304]	; (8023808 <RunMode_RunTimeLblController+0x19c>)
 80236d6:	2140      	movs	r1, #64	; 0x40
 80236d8:	484a      	ldr	r0, [pc, #296]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 80236da:	f004 fa89 	bl	8027bf0 <sniprintf>
		break;
 80236de:	e070      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
	case 2:
			if(RM_theme)
 80236e0:	4b42      	ldr	r3, [pc, #264]	; (80237ec <RunMode_RunTimeLblController+0x180>)
 80236e2:	781b      	ldrb	r3, [r3, #0]
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	d014      	beq.n	8023712 <RunMode_RunTimeLblController+0xa6>
				 snprintf(runModeBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#.%03d",
 80236e8:	4b41      	ldr	r3, [pc, #260]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 80236ea:	781b      	ldrb	r3, [r3, #0]
 80236ec:	4618      	mov	r0, r3
 80236ee:	4b41      	ldr	r3, [pc, #260]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 80236f0:	781b      	ldrb	r3, [r3, #0]
 80236f2:	461a      	mov	r2, r3
 80236f4:	4b40      	ldr	r3, [pc, #256]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 80236f6:	781b      	ldrb	r3, [r3, #0]
 80236f8:	4619      	mov	r1, r3
 80236fa:	4b40      	ldr	r3, [pc, #256]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 80236fc:	881b      	ldrh	r3, [r3, #0]
 80236fe:	9302      	str	r3, [sp, #8]
 8023700:	9101      	str	r1, [sp, #4]
 8023702:	9200      	str	r2, [sp, #0]
 8023704:	4603      	mov	r3, r0
 8023706:	4a41      	ldr	r2, [pc, #260]	; (802380c <RunMode_RunTimeLblController+0x1a0>)
 8023708:	2140      	movs	r1, #64	; 0x40
 802370a:	483e      	ldr	r0, [pc, #248]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 802370c:	f004 fa70 	bl	8027bf0 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8023710:	e057      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
 8023712:	4b37      	ldr	r3, [pc, #220]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 8023714:	781b      	ldrb	r3, [r3, #0]
 8023716:	4618      	mov	r0, r3
 8023718:	4b36      	ldr	r3, [pc, #216]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 802371a:	781b      	ldrb	r3, [r3, #0]
 802371c:	461a      	mov	r2, r3
 802371e:	4b36      	ldr	r3, [pc, #216]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 8023720:	781b      	ldrb	r3, [r3, #0]
 8023722:	4619      	mov	r1, r3
 8023724:	4b35      	ldr	r3, [pc, #212]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 8023726:	881b      	ldrh	r3, [r3, #0]
 8023728:	9302      	str	r3, [sp, #8]
 802372a:	9101      	str	r1, [sp, #4]
 802372c:	9200      	str	r2, [sp, #0]
 802372e:	4603      	mov	r3, r0
 8023730:	4a37      	ldr	r2, [pc, #220]	; (8023810 <RunMode_RunTimeLblController+0x1a4>)
 8023732:	2140      	movs	r1, #64	; 0x40
 8023734:	4833      	ldr	r0, [pc, #204]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 8023736:	f004 fa5b 	bl	8027bf0 <sniprintf>
		break;
 802373a:	e042      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
	case 3:
		if(RM_theme)
 802373c:	4b2b      	ldr	r3, [pc, #172]	; (80237ec <RunMode_RunTimeLblController+0x180>)
 802373e:	781b      	ldrb	r3, [r3, #0]
 8023740:	2b00      	cmp	r3, #0
 8023742:	d014      	beq.n	802376e <RunMode_RunTimeLblController+0x102>
			 snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#.%03d",
 8023744:	4b2a      	ldr	r3, [pc, #168]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 8023746:	781b      	ldrb	r3, [r3, #0]
 8023748:	4618      	mov	r0, r3
 802374a:	4b2a      	ldr	r3, [pc, #168]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 802374c:	781b      	ldrb	r3, [r3, #0]
 802374e:	461a      	mov	r2, r3
 8023750:	4b29      	ldr	r3, [pc, #164]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 8023752:	781b      	ldrb	r3, [r3, #0]
 8023754:	4619      	mov	r1, r3
 8023756:	4b29      	ldr	r3, [pc, #164]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 8023758:	881b      	ldrh	r3, [r3, #0]
 802375a:	9302      	str	r3, [sp, #8]
 802375c:	9101      	str	r1, [sp, #4]
 802375e:	9200      	str	r2, [sp, #0]
 8023760:	4603      	mov	r3, r0
 8023762:	4a2c      	ldr	r2, [pc, #176]	; (8023814 <RunMode_RunTimeLblController+0x1a8>)
 8023764:	2140      	movs	r1, #64	; 0x40
 8023766:	4827      	ldr	r0, [pc, #156]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 8023768:	f004 fa42 	bl	8027bf0 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 802376c:	e029      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
 802376e:	4b20      	ldr	r3, [pc, #128]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 8023770:	781b      	ldrb	r3, [r3, #0]
 8023772:	4618      	mov	r0, r3
 8023774:	4b1f      	ldr	r3, [pc, #124]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 8023776:	781b      	ldrb	r3, [r3, #0]
 8023778:	461a      	mov	r2, r3
 802377a:	4b1f      	ldr	r3, [pc, #124]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 802377c:	781b      	ldrb	r3, [r3, #0]
 802377e:	4619      	mov	r1, r3
 8023780:	4b1e      	ldr	r3, [pc, #120]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 8023782:	881b      	ldrh	r3, [r3, #0]
 8023784:	9302      	str	r3, [sp, #8]
 8023786:	9101      	str	r1, [sp, #4]
 8023788:	9200      	str	r2, [sp, #0]
 802378a:	4603      	mov	r3, r0
 802378c:	4a22      	ldr	r2, [pc, #136]	; (8023818 <RunMode_RunTimeLblController+0x1ac>)
 802378e:	2140      	movs	r1, #64	; 0x40
 8023790:	481c      	ldr	r0, [pc, #112]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 8023792:	f004 fa2d 	bl	8027bf0 <sniprintf>
		break;
 8023796:	e014      	b.n	80237c2 <RunMode_RunTimeLblController+0x156>
	default: snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8023798:	4b15      	ldr	r3, [pc, #84]	; (80237f0 <RunMode_RunTimeLblController+0x184>)
 802379a:	781b      	ldrb	r3, [r3, #0]
 802379c:	4618      	mov	r0, r3
 802379e:	4b15      	ldr	r3, [pc, #84]	; (80237f4 <RunMode_RunTimeLblController+0x188>)
 80237a0:	781b      	ldrb	r3, [r3, #0]
 80237a2:	461a      	mov	r2, r3
 80237a4:	4b14      	ldr	r3, [pc, #80]	; (80237f8 <RunMode_RunTimeLblController+0x18c>)
 80237a6:	781b      	ldrb	r3, [r3, #0]
 80237a8:	4619      	mov	r1, r3
 80237aa:	4b14      	ldr	r3, [pc, #80]	; (80237fc <RunMode_RunTimeLblController+0x190>)
 80237ac:	881b      	ldrh	r3, [r3, #0]
 80237ae:	9302      	str	r3, [sp, #8]
 80237b0:	9101      	str	r1, [sp, #4]
 80237b2:	9200      	str	r2, [sp, #0]
 80237b4:	4603      	mov	r3, r0
 80237b6:	4a19      	ldr	r2, [pc, #100]	; (802381c <RunMode_RunTimeLblController+0x1b0>)
 80237b8:	2140      	movs	r1, #64	; 0x40
 80237ba:	4812      	ldr	r0, [pc, #72]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 80237bc:	f004 fa18 	bl	8027bf0 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs); break;
 80237c0:	bf00      	nop
	}
	lv_label_set_text(RM_Lbl, runModeBuffer);
 80237c2:	4b17      	ldr	r3, [pc, #92]	; (8023820 <RunMode_RunTimeLblController+0x1b4>)
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	490f      	ldr	r1, [pc, #60]	; (8023804 <RunMode_RunTimeLblController+0x198>)
 80237c8:	4618      	mov	r0, r3
 80237ca:	f7f5 ffd5 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 80237ce:	4b14      	ldr	r3, [pc, #80]	; (8023820 <RunMode_RunTimeLblController+0x1b4>)
 80237d0:	6818      	ldr	r0, [r3, #0]
 80237d2:	2328      	movs	r3, #40	; 0x28
 80237d4:	9300      	str	r3, [sp, #0]
 80237d6:	2300      	movs	r3, #0
 80237d8:	2200      	movs	r2, #0
 80237da:	2100      	movs	r1, #0
 80237dc:	f7e2 fd82 	bl	80062e4 <lv_obj_align>

}
 80237e0:	bf00      	nop
 80237e2:	46bd      	mov	sp, r7
 80237e4:	bd80      	pop	{r7, pc}
 80237e6:	bf00      	nop
 80237e8:	20006fb0 	.word	0x20006fb0
 80237ec:	20006fb1 	.word	0x20006fb1
 80237f0:	20006fcc 	.word	0x20006fcc
 80237f4:	20006fd5 	.word	0x20006fd5
 80237f8:	2000283c 	.word	0x2000283c
 80237fc:	20006ff0 	.word	0x20006ff0
 8023800:	08029efc 	.word	0x08029efc
 8023804:	20006f6c 	.word	0x20006f6c
 8023808:	08029f2c 	.word	0x08029f2c
 802380c:	08029f5c 	.word	0x08029f5c
 8023810:	08029f8c 	.word	0x08029f8c
 8023814:	08029fbc 	.word	0x08029fbc
 8023818:	08029fec 	.word	0x08029fec
 802381c:	08029e8c 	.word	0x08029e8c
 8023820:	20006f68 	.word	0x20006f68

08023824 <RunMode_FistValueSet>:
//Setter Getter Functions
void RunMode_FistValueSet(void){
 8023824:	b580      	push	{r7, lr}
 8023826:	af00      	add	r7, sp, #0
	if(RMfirstVAl){
 8023828:	4b10      	ldr	r3, [pc, #64]	; (802386c <RunMode_FistValueSet+0x48>)
 802382a:	781b      	ldrb	r3, [r3, #0]
 802382c:	2b00      	cmp	r3, #0
 802382e:	d01b      	beq.n	8023868 <RunMode_FistValueSet+0x44>
		RMstepsBeff=RMsteps;
 8023830:	4b0f      	ldr	r3, [pc, #60]	; (8023870 <RunMode_FistValueSet+0x4c>)
 8023832:	881a      	ldrh	r2, [r3, #0]
 8023834:	4b0f      	ldr	r3, [pc, #60]	; (8023874 <RunMode_FistValueSet+0x50>)
 8023836:	801a      	strh	r2, [r3, #0]
		RMkCalsBeff=RMkCals;
 8023838:	4b0f      	ldr	r3, [pc, #60]	; (8023878 <RunMode_FistValueSet+0x54>)
 802383a:	881a      	ldrh	r2, [r3, #0]
 802383c:	4b0f      	ldr	r3, [pc, #60]	; (802387c <RunMode_FistValueSet+0x58>)
 802383e:	801a      	strh	r2, [r3, #0]
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 8023840:	4b0f      	ldr	r3, [pc, #60]	; (8023880 <RunMode_FistValueSet+0x5c>)
 8023842:	781a      	ldrb	r2, [r3, #0]
 8023844:	4b0a      	ldr	r3, [pc, #40]	; (8023870 <RunMode_FistValueSet+0x4c>)
 8023846:	881b      	ldrh	r3, [r3, #0]
 8023848:	4619      	mov	r1, r3
 802384a:	4610      	mov	r0, r2
 802384c:	f003 f850 	bl	80268f0 <tos_distance_Calc>
 8023850:	eef0 7a40 	vmov.f32	s15, s0
 8023854:	4b0b      	ldr	r3, [pc, #44]	; (8023884 <RunMode_FistValueSet+0x60>)
 8023856:	edc3 7a00 	vstr	s15, [r3]
		RMdistancesBeff=RMdistances;
 802385a:	4b0a      	ldr	r3, [pc, #40]	; (8023884 <RunMode_FistValueSet+0x60>)
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	4a0a      	ldr	r2, [pc, #40]	; (8023888 <RunMode_FistValueSet+0x64>)
 8023860:	6013      	str	r3, [r2, #0]
		RMfirstVAl=false;
 8023862:	4b02      	ldr	r3, [pc, #8]	; (802386c <RunMode_FistValueSet+0x48>)
 8023864:	2200      	movs	r2, #0
 8023866:	701a      	strb	r2, [r3, #0]
	}

}
 8023868:	bf00      	nop
 802386a:	bd80      	pop	{r7, pc}
 802386c:	20006fec 	.word	0x20006fec
 8023870:	20006fee 	.word	0x20006fee
 8023874:	20006fe6 	.word	0x20006fe6
 8023878:	20006fae 	.word	0x20006fae
 802387c:	20006fc4 	.word	0x20006fc4
 8023880:	20006f64 	.word	0x20006f64
 8023884:	20006fd0 	.word	0x20006fd0
 8023888:	20006fc0 	.word	0x20006fc0

0802388c <RunMode_TaskControllerSet>:
void RunMode_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	RMsteps =getSteps;
	RMkCals =getKcals;
}
void RunMode_TaskControllerSet(bool active){
 802388c:	b480      	push	{r7}
 802388e:	b083      	sub	sp, #12
 8023890:	af00      	add	r7, sp, #0
 8023892:	4603      	mov	r3, r0
 8023894:	71fb      	strb	r3, [r7, #7]
	RM_taskController = active;
 8023896:	4a04      	ldr	r2, [pc, #16]	; (80238a8 <RunMode_TaskControllerSet+0x1c>)
 8023898:	79fb      	ldrb	r3, [r7, #7]
 802389a:	7013      	strb	r3, [r2, #0]
}
 802389c:	bf00      	nop
 802389e:	370c      	adds	r7, #12
 80238a0:	46bd      	mov	sp, r7
 80238a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a6:	4770      	bx	lr
 80238a8:	20006fd4 	.word	0x20006fd4

080238ac <RunMode_TaskControllerGet>:
bool RunMode_TaskControllerGet(void){
 80238ac:	b480      	push	{r7}
 80238ae:	af00      	add	r7, sp, #0
	return RM_taskController;
 80238b0:	4b03      	ldr	r3, [pc, #12]	; (80238c0 <RunMode_TaskControllerGet+0x14>)
 80238b2:	781b      	ldrb	r3, [r3, #0]
}
 80238b4:	4618      	mov	r0, r3
 80238b6:	46bd      	mov	sp, r7
 80238b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238bc:	4770      	bx	lr
 80238be:	bf00      	nop
 80238c0:	20006fd4 	.word	0x20006fd4

080238c4 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80238c4:	b480      	push	{r7}
 80238c6:	b085      	sub	sp, #20
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	4603      	mov	r3, r0
 80238cc:	71fb      	strb	r3, [r7, #7]
 80238ce:	460b      	mov	r3, r1
 80238d0:	71bb      	strb	r3, [r7, #6]
 80238d2:	4613      	mov	r3, r2
 80238d4:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80238d6:	79bb      	ldrb	r3, [r7, #6]
 80238d8:	095b      	lsrs	r3, r3, #5
 80238da:	b2db      	uxtb	r3, r3
 80238dc:	f003 0307 	and.w	r3, r3, #7
 80238e0:	b2da      	uxtb	r2, r3
 80238e2:	7b3b      	ldrb	r3, [r7, #12]
 80238e4:	f362 0302 	bfi	r3, r2, #0, #3
 80238e8:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80238ea:	79fb      	ldrb	r3, [r7, #7]
 80238ec:	08db      	lsrs	r3, r3, #3
 80238ee:	b2db      	uxtb	r3, r3
 80238f0:	f003 031f 	and.w	r3, r3, #31
 80238f4:	b2da      	uxtb	r2, r3
 80238f6:	7b3b      	ldrb	r3, [r7, #12]
 80238f8:	f362 03c7 	bfi	r3, r2, #3, #5
 80238fc:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80238fe:	797b      	ldrb	r3, [r7, #5]
 8023900:	08db      	lsrs	r3, r3, #3
 8023902:	b2db      	uxtb	r3, r3
 8023904:	f003 031f 	and.w	r3, r3, #31
 8023908:	b2da      	uxtb	r2, r3
 802390a:	7b7b      	ldrb	r3, [r7, #13]
 802390c:	f362 0304 	bfi	r3, r2, #0, #5
 8023910:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8023912:	79bb      	ldrb	r3, [r7, #6]
 8023914:	089b      	lsrs	r3, r3, #2
 8023916:	b2db      	uxtb	r3, r3
 8023918:	f003 0307 	and.w	r3, r3, #7
 802391c:	b2da      	uxtb	r2, r3
 802391e:	7b7b      	ldrb	r3, [r7, #13]
 8023920:	f362 1347 	bfi	r3, r2, #5, #3
 8023924:	737b      	strb	r3, [r7, #13]
    return color;
 8023926:	89bb      	ldrh	r3, [r7, #12]
}
 8023928:	4618      	mov	r0, r3
 802392a:	3714      	adds	r7, #20
 802392c:	46bd      	mov	sp, r7
 802392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023932:	4770      	bx	lr

08023934 <lv_color_hex>:
    return color;
}
#endif

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8023934:	b580      	push	{r7, lr}
 8023936:	b082      	sub	sp, #8
 8023938:	af00      	add	r7, sp, #0
 802393a:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	0c1b      	lsrs	r3, r3, #16
 8023940:	b2d8      	uxtb	r0, r3
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	0a1b      	lsrs	r3, r3, #8
 8023946:	b2db      	uxtb	r3, r3
 8023948:	687a      	ldr	r2, [r7, #4]
 802394a:	b2d2      	uxtb	r2, r2
 802394c:	4619      	mov	r1, r3
 802394e:	f7ff ffb9 	bl	80238c4 <lv_color_make>
 8023952:	4603      	mov	r3, r0
}
 8023954:	4618      	mov	r0, r3
 8023956:	3708      	adds	r7, #8
 8023958:	46bd      	mov	sp, r7
 802395a:	bd80      	pop	{r7, pc}

0802395c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 802395c:	b580      	push	{r7, lr}
 802395e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8023960:	f7ee fe22 	bl	80125a8 <lv_disp_get_default>
 8023964:	4603      	mov	r3, r0
 8023966:	4618      	mov	r0, r3
 8023968:	f7e1 faea 	bl	8004f40 <lv_disp_get_scr_act>
 802396c:	4603      	mov	r3, r0
}
 802396e:	4618      	mov	r0, r3
 8023970:	bd80      	pop	{r7, pc}

08023972 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8023972:	b580      	push	{r7, lr}
 8023974:	b084      	sub	sp, #16
 8023976:	af00      	add	r7, sp, #0
 8023978:	60f8      	str	r0, [r7, #12]
 802397a:	460b      	mov	r3, r1
 802397c:	607a      	str	r2, [r7, #4]
 802397e:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8023980:	6879      	ldr	r1, [r7, #4]
 8023982:	68f8      	ldr	r0, [r7, #12]
 8023984:	f7e3 f953 	bl	8006c2e <lv_obj_set_style>
}
 8023988:	bf00      	nop
 802398a:	3710      	adds	r7, #16
 802398c:	46bd      	mov	sp, r7
 802398e:	bd80      	pop	{r7, pc}

08023990 <tos_SettingsScreen_Init>:
void SettingsScreen_UnitUpdateVal(bool val);


void SettingsScreen_SetNewValues(void);

void tos_SettingsScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 8023990:	b580      	push	{r7, lr}
 8023992:	b082      	sub	sp, #8
 8023994:	af00      	add	r7, sp, #0
 8023996:	4603      	mov	r3, r0
 8023998:	6039      	str	r1, [r7, #0]
 802399a:	71fb      	strb	r3, [r7, #7]
			lv_obj_clean(lv_scr_act());
 802399c:	f7ff ffde 	bl	802395c <lv_scr_act>
 80239a0:	4603      	mov	r3, r0
 80239a2:	4618      	mov	r0, r3
 80239a4:	f7e2 fa2c 	bl	8005e00 <lv_obj_clean>
    		lv_style_copy(&description_Style, &lv_style_plain);
 80239a8:	4925      	ldr	r1, [pc, #148]	; (8023a40 <tos_SettingsScreen_Init+0xb0>)
 80239aa:	4826      	ldr	r0, [pc, #152]	; (8023a44 <tos_SettingsScreen_Init+0xb4>)
 80239ac:	f7e4 fede 	bl	800876c <lv_style_copy>
    		description_Style.text.font = &lv_font_roboto_28;
 80239b0:	4b24      	ldr	r3, [pc, #144]	; (8023a44 <tos_SettingsScreen_Init+0xb4>)
 80239b2:	4a25      	ldr	r2, [pc, #148]	; (8023a48 <tos_SettingsScreen_Init+0xb8>)
 80239b4:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&style_screen, &lv_style_plain);
 80239b6:	4922      	ldr	r1, [pc, #136]	; (8023a40 <tos_SettingsScreen_Init+0xb0>)
 80239b8:	4824      	ldr	r0, [pc, #144]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239ba:	f7e4 fed7 	bl	800876c <lv_style_copy>
			style_screen.body.main_color = LV_COLOR_WHITE;
 80239be:	4a23      	ldr	r2, [pc, #140]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239c0:	4b23      	ldr	r3, [pc, #140]	; (8023a50 <tos_SettingsScreen_Init+0xc0>)
 80239c2:	881b      	ldrh	r3, [r3, #0]
 80239c4:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 80239c6:	4a21      	ldr	r2, [pc, #132]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239c8:	4b21      	ldr	r3, [pc, #132]	; (8023a50 <tos_SettingsScreen_Init+0xc0>)
 80239ca:	881b      	ldrh	r3, [r3, #0]
 80239cc:	8093      	strh	r3, [r2, #4]
		    description_Style.text.color = LV_COLOR_BLACK;
 80239ce:	4b1d      	ldr	r3, [pc, #116]	; (8023a44 <tos_SettingsScreen_Init+0xb4>)
 80239d0:	2200      	movs	r2, #0
 80239d2:	841a      	strh	r2, [r3, #32]
			if(theme){
 80239d4:	79fb      	ldrb	r3, [r7, #7]
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d009      	beq.n	80239ee <tos_SettingsScreen_Init+0x5e>
				style_screen.body.main_color = LV_COLOR_BLACK;
 80239da:	4b1c      	ldr	r3, [pc, #112]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239dc:	2200      	movs	r2, #0
 80239de:	805a      	strh	r2, [r3, #2]
				style_screen.body.grad_color = LV_COLOR_BLACK;
 80239e0:	4b1a      	ldr	r3, [pc, #104]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239e2:	2200      	movs	r2, #0
 80239e4:	809a      	strh	r2, [r3, #4]
				description_Style.text.color = LV_COLOR_WHITE;
 80239e6:	4a17      	ldr	r2, [pc, #92]	; (8023a44 <tos_SettingsScreen_Init+0xb4>)
 80239e8:	4b19      	ldr	r3, [pc, #100]	; (8023a50 <tos_SettingsScreen_Init+0xc0>)
 80239ea:	881b      	ldrh	r3, [r3, #0]
 80239ec:	8413      	strh	r3, [r2, #32]
			}lv_obj_set_style(lv_scr_act(), &style_screen);
 80239ee:	f7ff ffb5 	bl	802395c <lv_scr_act>
 80239f2:	4603      	mov	r3, r0
 80239f4:	4915      	ldr	r1, [pc, #84]	; (8023a4c <tos_SettingsScreen_Init+0xbc>)
 80239f6:	4618      	mov	r0, r3
 80239f8:	f7e3 f919 	bl	8006c2e <lv_obj_set_style>
			Stheme=theme;
 80239fc:	4a15      	ldr	r2, [pc, #84]	; (8023a54 <tos_SettingsScreen_Init+0xc4>)
 80239fe:	79fb      	ldrb	r3, [r7, #7]
 8023a00:	7013      	strb	r3, [r2, #0]
			isMenuOpen=true;
 8023a02:	4b15      	ldr	r3, [pc, #84]	; (8023a58 <tos_SettingsScreen_Init+0xc8>)
 8023a04:	2201      	movs	r2, #1
 8023a06:	701a      	strb	r2, [r3, #0]
			S_hrtc=hrtc;
 8023a08:	4a14      	ldr	r2, [pc, #80]	; (8023a5c <tos_SettingsScreen_Init+0xcc>)
 8023a0a:	683b      	ldr	r3, [r7, #0]
 8023a0c:	6013      	str	r3, [r2, #0]
			SettingsScreen_clockInit(theme);
 8023a0e:	79fb      	ldrb	r3, [r7, #7]
 8023a10:	4618      	mov	r0, r3
 8023a12:	f000 f825 	bl	8023a60 <SettingsScreen_clockInit>
			SettingsScreen_dateInit(theme);
 8023a16:	79fb      	ldrb	r3, [r7, #7]
 8023a18:	4618      	mov	r0, r3
 8023a1a:	f000 f8b7 	bl	8023b8c <SettingsScreen_dateInit>
			SettingsScreen_bluetoothInit(theme);
 8023a1e:	79fb      	ldrb	r3, [r7, #7]
 8023a20:	4618      	mov	r0, r3
 8023a22:	f000 f949 	bl	8023cb8 <SettingsScreen_bluetoothInit>
			SettingsScreen_unitTypeInit(theme);
 8023a26:	79fb      	ldrb	r3, [r7, #7]
 8023a28:	4618      	mov	r0, r3
 8023a2a:	f000 f9cb 	bl	8023dc4 <SettingsScreen_unitTypeInit>
			SettingsScreen_buttonsInit(theme);
 8023a2e:	79fb      	ldrb	r3, [r7, #7]
 8023a30:	4618      	mov	r0, r3
 8023a32:	f000 fa77 	bl	8023f24 <SettingsScreen_buttonsInit>

}
 8023a36:	bf00      	nop
 8023a38:	3708      	adds	r7, #8
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	bd80      	pop	{r7, pc}
 8023a3e:	bf00      	nop
 8023a40:	20006c68 	.word	0x20006c68
 8023a44:	2000639c 	.word	0x2000639c
 8023a48:	20002394 	.word	0x20002394
 8023a4c:	20006360 	.word	0x20006360
 8023a50:	0802a01c 	.word	0x0802a01c
 8023a54:	20007003 	.word	0x20007003
 8023a58:	2000701c 	.word	0x2000701c
 8023a5c:	20007020 	.word	0x20007020

08023a60 <SettingsScreen_clockInit>:
/**/
void SettingsScreen_clockInit(bool theme){
 8023a60:	b590      	push	{r4, r7, lr}
 8023a62:	b087      	sub	sp, #28
 8023a64:	af02      	add	r7, sp, #8
 8023a66:	4603      	mov	r3, r0
 8023a68:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 8023a6a:	493c      	ldr	r1, [pc, #240]	; (8023b5c <SettingsScreen_clockInit+0xfc>)
 8023a6c:	483c      	ldr	r0, [pc, #240]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a6e:	f7e4 fe7d 	bl	800876c <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8023a72:	4b3b      	ldr	r3, [pc, #236]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a74:	2200      	movs	r2, #0
 8023a76:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8023a78:	79fb      	ldrb	r3, [r7, #7]
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d003      	beq.n	8023a86 <SettingsScreen_clockInit+0x26>
 8023a7e:	4a38      	ldr	r2, [pc, #224]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a80:	4b38      	ldr	r3, [pc, #224]	; (8023b64 <SettingsScreen_clockInit+0x104>)
 8023a82:	881b      	ldrh	r3, [r3, #0]
 8023a84:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 8023a86:	4b36      	ldr	r3, [pc, #216]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a88:	4a37      	ldr	r2, [pc, #220]	; (8023b68 <SettingsScreen_clockInit+0x108>)
 8023a8a:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023a8c:	4c34      	ldr	r4, [pc, #208]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a8e:	2200      	movs	r2, #0
 8023a90:	21a5      	movs	r1, #165	; 0xa5
 8023a92:	20ff      	movs	r0, #255	; 0xff
 8023a94:	f7ff ff16 	bl	80238c4 <lv_color_make>
 8023a98:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023a9a:	4c31      	ldr	r4, [pc, #196]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023a9c:	2200      	movs	r2, #0
 8023a9e:	21a5      	movs	r1, #165	; 0xa5
 8023aa0:	20ff      	movs	r0, #255	; 0xff
 8023aa2:	f7ff ff0f 	bl	80238c4 <lv_color_make>
 8023aa6:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8023aa8:	4b2d      	ldr	r3, [pc, #180]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023aaa:	220a      	movs	r2, #10
 8023aac:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8023aae:	4b2c      	ldr	r3, [pc, #176]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023ab0:	22c8      	movs	r2, #200	; 0xc8
 8023ab2:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * clockLbl = lv_label_create(lv_scr_act(), NULL);
 8023ab4:	f7ff ff52 	bl	802395c <lv_scr_act>
 8023ab8:	4603      	mov	r3, r0
 8023aba:	2100      	movs	r1, #0
 8023abc:	4618      	mov	r0, r3
 8023abe:	f7f5 fd29 	bl	8019514 <lv_label_create>
 8023ac2:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(clockLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023ac4:	4a29      	ldr	r2, [pc, #164]	; (8023b6c <SettingsScreen_clockInit+0x10c>)
 8023ac6:	2100      	movs	r1, #0
 8023ac8:	68f8      	ldr	r0, [r7, #12]
 8023aca:	f7ff ff52 	bl	8023972 <lv_label_set_style>
		lv_label_set_text(clockLbl, "Clock:");
 8023ace:	4928      	ldr	r1, [pc, #160]	; (8023b70 <SettingsScreen_clockInit+0x110>)
 8023ad0:	68f8      	ldr	r0, [r7, #12]
 8023ad2:	f7f5 fe51 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(clockLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 40);
 8023ad6:	2328      	movs	r3, #40	; 0x28
 8023ad8:	9300      	str	r3, [sp, #0]
 8023ada:	2314      	movs	r3, #20
 8023adc:	2201      	movs	r2, #1
 8023ade:	2100      	movs	r1, #0
 8023ae0:	68f8      	ldr	r0, [r7, #12]
 8023ae2:	f7e2 fbff 	bl	80062e4 <lv_obj_align>

    S_ClockLbl = lv_label_create(lv_scr_act(), NULL);
 8023ae6:	f7ff ff39 	bl	802395c <lv_scr_act>
 8023aea:	4603      	mov	r3, r0
 8023aec:	2100      	movs	r1, #0
 8023aee:	4618      	mov	r0, r3
 8023af0:	f7f5 fd10 	bl	8019514 <lv_label_create>
 8023af4:	4602      	mov	r2, r0
 8023af6:	4b1f      	ldr	r3, [pc, #124]	; (8023b74 <SettingsScreen_clockInit+0x114>)
 8023af8:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_ClockLbl, true);
 8023afa:	4b1e      	ldr	r3, [pc, #120]	; (8023b74 <SettingsScreen_clockInit+0x114>)
 8023afc:	681b      	ldr	r3, [r3, #0]
 8023afe:	2101      	movs	r1, #1
 8023b00:	4618      	mov	r0, r3
 8023b02:	f7f5 ff55 	bl	80199b0 <lv_label_set_recolor>
 	lv_label_set_style(S_ClockLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8023b06:	4b1b      	ldr	r3, [pc, #108]	; (8023b74 <SettingsScreen_clockInit+0x114>)
 8023b08:	681b      	ldr	r3, [r3, #0]
 8023b0a:	4a15      	ldr	r2, [pc, #84]	; (8023b60 <SettingsScreen_clockInit+0x100>)
 8023b0c:	2100      	movs	r1, #0
 8023b0e:	4618      	mov	r0, r3
 8023b10:	f7ff ff2f 	bl	8023972 <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8023b14:	4b18      	ldr	r3, [pc, #96]	; (8023b78 <SettingsScreen_clockInit+0x118>)
 8023b16:	781b      	ldrb	r3, [r3, #0]
 8023b18:	4619      	mov	r1, r3
 8023b1a:	4b18      	ldr	r3, [pc, #96]	; (8023b7c <SettingsScreen_clockInit+0x11c>)
 8023b1c:	781b      	ldrb	r3, [r3, #0]
 8023b1e:	461a      	mov	r2, r3
 8023b20:	4b17      	ldr	r3, [pc, #92]	; (8023b80 <SettingsScreen_clockInit+0x120>)
 8023b22:	781b      	ldrb	r3, [r3, #0]
 8023b24:	9301      	str	r3, [sp, #4]
 8023b26:	9200      	str	r2, [sp, #0]
 8023b28:	460b      	mov	r3, r1
 8023b2a:	4a16      	ldr	r2, [pc, #88]	; (8023b84 <SettingsScreen_clockInit+0x124>)
 8023b2c:	2140      	movs	r1, #64	; 0x40
 8023b2e:	4816      	ldr	r0, [pc, #88]	; (8023b88 <SettingsScreen_clockInit+0x128>)
 8023b30:	f004 f85e 	bl	8027bf0 <sniprintf>
			Shours,Sminutes,Sseconds);
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 8023b34:	4b0f      	ldr	r3, [pc, #60]	; (8023b74 <SettingsScreen_clockInit+0x114>)
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	4913      	ldr	r1, [pc, #76]	; (8023b88 <SettingsScreen_clockInit+0x128>)
 8023b3a:	4618      	mov	r0, r3
 8023b3c:	f7f5 fe1c 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 8023b40:	4b0c      	ldr	r3, [pc, #48]	; (8023b74 <SettingsScreen_clockInit+0x114>)
 8023b42:	6818      	ldr	r0, [r3, #0]
 8023b44:	2328      	movs	r3, #40	; 0x28
 8023b46:	9300      	str	r3, [sp, #0]
 8023b48:	f06f 0313 	mvn.w	r3, #19
 8023b4c:	2203      	movs	r2, #3
 8023b4e:	2100      	movs	r1, #0
 8023b50:	f7e2 fbc8 	bl	80062e4 <lv_obj_align>
}
 8023b54:	bf00      	nop
 8023b56:	3714      	adds	r7, #20
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	bd90      	pop	{r4, r7, pc}
 8023b5c:	20006c68 	.word	0x20006c68
 8023b60:	20006450 	.word	0x20006450
 8023b64:	0802a054 	.word	0x0802a054
 8023b68:	200027e8 	.word	0x200027e8
 8023b6c:	2000639c 	.word	0x2000639c
 8023b70:	0802a020 	.word	0x0802a020
 8023b74:	20007008 	.word	0x20007008
 8023b78:	20007001 	.word	0x20007001
 8023b7c:	2000700c 	.word	0x2000700c
 8023b80:	2000701f 	.word	0x2000701f
 8023b84:	0802a028 	.word	0x0802a028
 8023b88:	20007024 	.word	0x20007024

08023b8c <SettingsScreen_dateInit>:
/**/
void SettingsScreen_dateInit(bool theme){
 8023b8c:	b590      	push	{r4, r7, lr}
 8023b8e:	b087      	sub	sp, #28
 8023b90:	af02      	add	r7, sp, #8
 8023b92:	4603      	mov	r3, r0
 8023b94:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 8023b96:	493c      	ldr	r1, [pc, #240]	; (8023c88 <SettingsScreen_dateInit+0xfc>)
 8023b98:	483c      	ldr	r0, [pc, #240]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023b9a:	f7e4 fde7 	bl	800876c <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8023b9e:	4b3b      	ldr	r3, [pc, #236]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023ba0:	2200      	movs	r2, #0
 8023ba2:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8023ba4:	79fb      	ldrb	r3, [r7, #7]
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	d003      	beq.n	8023bb2 <SettingsScreen_dateInit+0x26>
 8023baa:	4a38      	ldr	r2, [pc, #224]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bac:	4b38      	ldr	r3, [pc, #224]	; (8023c90 <SettingsScreen_dateInit+0x104>)
 8023bae:	881b      	ldrh	r3, [r3, #0]
 8023bb0:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 8023bb2:	4b36      	ldr	r3, [pc, #216]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bb4:	4a37      	ldr	r2, [pc, #220]	; (8023c94 <SettingsScreen_dateInit+0x108>)
 8023bb6:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023bb8:	4c34      	ldr	r4, [pc, #208]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bba:	2200      	movs	r2, #0
 8023bbc:	21a5      	movs	r1, #165	; 0xa5
 8023bbe:	20ff      	movs	r0, #255	; 0xff
 8023bc0:	f7ff fe80 	bl	80238c4 <lv_color_make>
 8023bc4:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023bc6:	4c31      	ldr	r4, [pc, #196]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bc8:	2200      	movs	r2, #0
 8023bca:	21a5      	movs	r1, #165	; 0xa5
 8023bcc:	20ff      	movs	r0, #255	; 0xff
 8023bce:	f7ff fe79 	bl	80238c4 <lv_color_make>
 8023bd2:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8023bd4:	4b2d      	ldr	r3, [pc, #180]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bd6:	220a      	movs	r2, #10
 8023bd8:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8023bda:	4b2c      	ldr	r3, [pc, #176]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023bdc:	22c8      	movs	r2, #200	; 0xc8
 8023bde:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * dateLbl = lv_label_create(lv_scr_act(), NULL);
 8023be0:	f7ff febc 	bl	802395c <lv_scr_act>
 8023be4:	4603      	mov	r3, r0
 8023be6:	2100      	movs	r1, #0
 8023be8:	4618      	mov	r0, r3
 8023bea:	f7f5 fc93 	bl	8019514 <lv_label_create>
 8023bee:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(dateLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023bf0:	4a29      	ldr	r2, [pc, #164]	; (8023c98 <SettingsScreen_dateInit+0x10c>)
 8023bf2:	2100      	movs	r1, #0
 8023bf4:	68f8      	ldr	r0, [r7, #12]
 8023bf6:	f7ff febc 	bl	8023972 <lv_label_set_style>
		lv_label_set_text(dateLbl, "Date:");
 8023bfa:	4928      	ldr	r1, [pc, #160]	; (8023c9c <SettingsScreen_dateInit+0x110>)
 8023bfc:	68f8      	ldr	r0, [r7, #12]
 8023bfe:	f7f5 fdbb 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(dateLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 80);
 8023c02:	2350      	movs	r3, #80	; 0x50
 8023c04:	9300      	str	r3, [sp, #0]
 8023c06:	2314      	movs	r3, #20
 8023c08:	2201      	movs	r2, #1
 8023c0a:	2100      	movs	r1, #0
 8023c0c:	68f8      	ldr	r0, [r7, #12]
 8023c0e:	f7e2 fb69 	bl	80062e4 <lv_obj_align>

    S_DateLbl = lv_label_create(lv_scr_act(), NULL);
 8023c12:	f7ff fea3 	bl	802395c <lv_scr_act>
 8023c16:	4603      	mov	r3, r0
 8023c18:	2100      	movs	r1, #0
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	f7f5 fc7a 	bl	8019514 <lv_label_create>
 8023c20:	4602      	mov	r2, r0
 8023c22:	4b1f      	ldr	r3, [pc, #124]	; (8023ca0 <SettingsScreen_dateInit+0x114>)
 8023c24:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_DateLbl, true);
 8023c26:	4b1e      	ldr	r3, [pc, #120]	; (8023ca0 <SettingsScreen_dateInit+0x114>)
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	2101      	movs	r1, #1
 8023c2c:	4618      	mov	r0, r3
 8023c2e:	f7f5 febf 	bl	80199b0 <lv_label_set_recolor>
 	lv_label_set_style(S_DateLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8023c32:	4b1b      	ldr	r3, [pc, #108]	; (8023ca0 <SettingsScreen_dateInit+0x114>)
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	4a15      	ldr	r2, [pc, #84]	; (8023c8c <SettingsScreen_dateInit+0x100>)
 8023c38:	2100      	movs	r1, #0
 8023c3a:	4618      	mov	r0, r3
 8023c3c:	f7ff fe99 	bl	8023972 <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8023c40:	4b18      	ldr	r3, [pc, #96]	; (8023ca4 <SettingsScreen_dateInit+0x118>)
 8023c42:	781b      	ldrb	r3, [r3, #0]
 8023c44:	4619      	mov	r1, r3
 8023c46:	4b18      	ldr	r3, [pc, #96]	; (8023ca8 <SettingsScreen_dateInit+0x11c>)
 8023c48:	781b      	ldrb	r3, [r3, #0]
 8023c4a:	461a      	mov	r2, r3
 8023c4c:	4b17      	ldr	r3, [pc, #92]	; (8023cac <SettingsScreen_dateInit+0x120>)
 8023c4e:	881b      	ldrh	r3, [r3, #0]
 8023c50:	9301      	str	r3, [sp, #4]
 8023c52:	9200      	str	r2, [sp, #0]
 8023c54:	460b      	mov	r3, r1
 8023c56:	4a16      	ldr	r2, [pc, #88]	; (8023cb0 <SettingsScreen_dateInit+0x124>)
 8023c58:	2140      	movs	r1, #64	; 0x40
 8023c5a:	4816      	ldr	r0, [pc, #88]	; (8023cb4 <SettingsScreen_dateInit+0x128>)
 8023c5c:	f003 ffc8 	bl	8027bf0 <sniprintf>
			Sdates,Smonths,Syears);
	lv_label_set_text(S_DateLbl, settingsBuffer);
 8023c60:	4b0f      	ldr	r3, [pc, #60]	; (8023ca0 <SettingsScreen_dateInit+0x114>)
 8023c62:	681b      	ldr	r3, [r3, #0]
 8023c64:	4913      	ldr	r1, [pc, #76]	; (8023cb4 <SettingsScreen_dateInit+0x128>)
 8023c66:	4618      	mov	r0, r3
 8023c68:	f7f5 fd86 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8023c6c:	4b0c      	ldr	r3, [pc, #48]	; (8023ca0 <SettingsScreen_dateInit+0x114>)
 8023c6e:	6818      	ldr	r0, [r3, #0]
 8023c70:	2350      	movs	r3, #80	; 0x50
 8023c72:	9300      	str	r3, [sp, #0]
 8023c74:	f06f 0313 	mvn.w	r3, #19
 8023c78:	2203      	movs	r2, #3
 8023c7a:	2100      	movs	r1, #0
 8023c7c:	f7e2 fb32 	bl	80062e4 <lv_obj_align>
}
 8023c80:	bf00      	nop
 8023c82:	3714      	adds	r7, #20
 8023c84:	46bd      	mov	sp, r7
 8023c86:	bd90      	pop	{r4, r7, pc}
 8023c88:	20006c68 	.word	0x20006c68
 8023c8c:	2000648c 	.word	0x2000648c
 8023c90:	0802a054 	.word	0x0802a054
 8023c94:	200027e8 	.word	0x200027e8
 8023c98:	2000639c 	.word	0x2000639c
 8023c9c:	0802a058 	.word	0x0802a058
 8023ca0:	20007018 	.word	0x20007018
 8023ca4:	20007000 	.word	0x20007000
 8023ca8:	2000701e 	.word	0x2000701e
 8023cac:	20007014 	.word	0x20007014
 8023cb0:	0802a060 	.word	0x0802a060
 8023cb4:	20007024 	.word	0x20007024

08023cb8 <SettingsScreen_bluetoothInit>:

void SettingsScreen_bluetoothInit(bool theme){
 8023cb8:	b590      	push	{r4, r7, lr}
 8023cba:	b087      	sub	sp, #28
 8023cbc:	af02      	add	r7, sp, #8
 8023cbe:	4603      	mov	r3, r0
 8023cc0:	71fb      	strb	r3, [r7, #7]

    lv_style_copy(&bluetooth_indic_style, &lv_style_pretty_color);
 8023cc2:	493a      	ldr	r1, [pc, #232]	; (8023dac <SettingsScreen_bluetoothInit+0xf4>)
 8023cc4:	483a      	ldr	r0, [pc, #232]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023cc6:	f7e4 fd51 	bl	800876c <lv_style_copy>
    bluetooth_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8023cca:	4b39      	ldr	r3, [pc, #228]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023ccc:	f647 4218 	movw	r2, #31768	; 0x7c18
 8023cd0:	80da      	strh	r2, [r3, #6]
    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 8023cd2:	4c37      	ldr	r4, [pc, #220]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023cd4:	2000      	movs	r0, #0
 8023cd6:	f7ff fe2d 	bl	8023934 <lv_color_hex>
 8023cda:	8060      	strh	r0, [r4, #2]
    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8023cdc:	4c34      	ldr	r4, [pc, #208]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023cde:	2000      	movs	r0, #0
 8023ce0:	f7ff fe28 	bl	8023934 <lv_color_hex>
 8023ce4:	80a0      	strh	r0, [r4, #4]
    if(theme){
 8023ce6:	79fb      	ldrb	r3, [r7, #7]
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	d00b      	beq.n	8023d04 <SettingsScreen_bluetoothInit+0x4c>
    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8023cec:	4c30      	ldr	r4, [pc, #192]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023cee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023cf2:	f7ff fe1f 	bl	8023934 <lv_color_hex>
 8023cf6:	8060      	strh	r0, [r4, #2]
    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8023cf8:	4c2d      	ldr	r4, [pc, #180]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023cfa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023cfe:	f7ff fe19 	bl	8023934 <lv_color_hex>
 8023d02:	80a0      	strh	r0, [r4, #4]
    }
    bluetooth_indic_style.body.padding.left = 0;
 8023d04:	4b2a      	ldr	r3, [pc, #168]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023d06:	2200      	movs	r2, #0
 8023d08:	835a      	strh	r2, [r3, #26]
    bluetooth_indic_style.body.padding.right = 0;
 8023d0a:	4b29      	ldr	r3, [pc, #164]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023d0c:	2200      	movs	r2, #0
 8023d0e:	839a      	strh	r2, [r3, #28]
    bluetooth_indic_style.body.padding.top = 0;
 8023d10:	4b27      	ldr	r3, [pc, #156]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023d12:	2200      	movs	r2, #0
 8023d14:	82da      	strh	r2, [r3, #22]
    bluetooth_indic_style.body.padding.bottom = 0;
 8023d16:	4b26      	ldr	r3, [pc, #152]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023d18:	2200      	movs	r2, #0
 8023d1a:	831a      	strh	r2, [r3, #24]

    lv_obj_t * bluetoothLbl = lv_label_create(lv_scr_act(), NULL);
 8023d1c:	f7ff fe1e 	bl	802395c <lv_scr_act>
 8023d20:	4603      	mov	r3, r0
 8023d22:	2100      	movs	r1, #0
 8023d24:	4618      	mov	r0, r3
 8023d26:	f7f5 fbf5 	bl	8019514 <lv_label_create>
 8023d2a:	60f8      	str	r0, [r7, #12]
 	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023d2c:	4a21      	ldr	r2, [pc, #132]	; (8023db4 <SettingsScreen_bluetoothInit+0xfc>)
 8023d2e:	2100      	movs	r1, #0
 8023d30:	68f8      	ldr	r0, [r7, #12]
 8023d32:	f7ff fe1e 	bl	8023972 <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH "Statu:");
 8023d36:	4920      	ldr	r1, [pc, #128]	; (8023db8 <SettingsScreen_bluetoothInit+0x100>)
 8023d38:	68f8      	ldr	r0, [r7, #12]
 8023d3a:	f7f5 fd1d 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 120);
 8023d3e:	2378      	movs	r3, #120	; 0x78
 8023d40:	9300      	str	r3, [sp, #0]
 8023d42:	2314      	movs	r3, #20
 8023d44:	2201      	movs	r2, #1
 8023d46:	2100      	movs	r1, #0
 8023d48:	68f8      	ldr	r0, [r7, #12]
 8023d4a:	f7e2 facb 	bl	80062e4 <lv_obj_align>

    SbluetoothSwitch = lv_sw_create(lv_scr_act(), NULL);
 8023d4e:	f7ff fe05 	bl	802395c <lv_scr_act>
 8023d52:	4603      	mov	r3, r0
 8023d54:	2100      	movs	r1, #0
 8023d56:	4618      	mov	r0, r3
 8023d58:	f7fa fe34 	bl	801e9c4 <lv_sw_create>
 8023d5c:	4602      	mov	r2, r0
 8023d5e:	4b17      	ldr	r3, [pc, #92]	; (8023dbc <SettingsScreen_bluetoothInit+0x104>)
 8023d60:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 8023d62:	4b16      	ldr	r3, [pc, #88]	; (8023dbc <SettingsScreen_bluetoothInit+0x104>)
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	4a12      	ldr	r2, [pc, #72]	; (8023db0 <SettingsScreen_bluetoothInit+0xf8>)
 8023d68:	2101      	movs	r1, #1
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	f7fa ff08 	bl	801eb80 <lv_sw_set_style>
    lv_sw_on(SbluetoothSwitch, LV_ANIM_OFF);
 8023d70:	4b12      	ldr	r3, [pc, #72]	; (8023dbc <SettingsScreen_bluetoothInit+0x104>)
 8023d72:	681b      	ldr	r3, [r3, #0]
 8023d74:	2100      	movs	r1, #0
 8023d76:	4618      	mov	r0, r3
 8023d78:	f7fa fecc 	bl	801eb14 <lv_sw_on>
    if(SbluetoothStatu)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8023d7c:	4b10      	ldr	r3, [pc, #64]	; (8023dc0 <SettingsScreen_bluetoothInit+0x108>)
 8023d7e:	781b      	ldrb	r3, [r3, #0]
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	d005      	beq.n	8023d90 <SettingsScreen_bluetoothInit+0xd8>
 8023d84:	4b0d      	ldr	r3, [pc, #52]	; (8023dbc <SettingsScreen_bluetoothInit+0x104>)
 8023d86:	681b      	ldr	r3, [r3, #0]
 8023d88:	2101      	movs	r1, #1
 8023d8a:	4618      	mov	r0, r3
 8023d8c:	f7fa fec2 	bl	801eb14 <lv_sw_on>
    lv_obj_align(SbluetoothSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 120);
 8023d90:	4b0a      	ldr	r3, [pc, #40]	; (8023dbc <SettingsScreen_bluetoothInit+0x104>)
 8023d92:	6818      	ldr	r0, [r3, #0]
 8023d94:	2378      	movs	r3, #120	; 0x78
 8023d96:	9300      	str	r3, [sp, #0]
 8023d98:	f06f 0313 	mvn.w	r3, #19
 8023d9c:	2203      	movs	r2, #3
 8023d9e:	2100      	movs	r1, #0
 8023da0:	f7e2 faa0 	bl	80062e4 <lv_obj_align>
}
 8023da4:	bf00      	nop
 8023da6:	3714      	adds	r7, #20
 8023da8:	46bd      	mov	sp, r7
 8023daa:	bd90      	pop	{r4, r7, pc}
 8023dac:	20006a88 	.word	0x20006a88
 8023db0:	200063d8 	.word	0x200063d8
 8023db4:	2000639c 	.word	0x2000639c
 8023db8:	0802a08c 	.word	0x0802a08c
 8023dbc:	20007004 	.word	0x20007004
 8023dc0:	20006ff5 	.word	0x20006ff5

08023dc4 <SettingsScreen_unitTypeInit>:
/**/
void SettingsScreen_unitTypeInit(bool theme){
 8023dc4:	b590      	push	{r4, r7, lr}
 8023dc6:	b087      	sub	sp, #28
 8023dc8:	af02      	add	r7, sp, #8
 8023dca:	4603      	mov	r3, r0
 8023dcc:	71fb      	strb	r3, [r7, #7]
	static lv_style_t unitDesc_Style;
	lv_style_copy(&unitDesc_Style, &description_Style);
 8023dce:	494c      	ldr	r1, [pc, #304]	; (8023f00 <SettingsScreen_unitTypeInit+0x13c>)
 8023dd0:	484c      	ldr	r0, [pc, #304]	; (8023f04 <SettingsScreen_unitTypeInit+0x140>)
 8023dd2:	f7e4 fccb 	bl	800876c <lv_style_copy>
	unitDesc_Style.text.font = &lv_font_unscii_8;
 8023dd6:	4b4b      	ldr	r3, [pc, #300]	; (8023f04 <SettingsScreen_unitTypeInit+0x140>)
 8023dd8:	4a4b      	ldr	r2, [pc, #300]	; (8023f08 <SettingsScreen_unitTypeInit+0x144>)
 8023dda:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_copy(&unit_indic_style, &lv_style_pretty_color);
 8023ddc:	494b      	ldr	r1, [pc, #300]	; (8023f0c <SettingsScreen_unitTypeInit+0x148>)
 8023dde:	484c      	ldr	r0, [pc, #304]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023de0:	f7e4 fcc4 	bl	800876c <lv_style_copy>
    unit_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8023de4:	4b4a      	ldr	r3, [pc, #296]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023de6:	f647 4218 	movw	r2, #31768	; 0x7c18
 8023dea:	80da      	strh	r2, [r3, #6]
    unit_indic_style.body.main_color = lv_color_hex(0x000000);
 8023dec:	4c48      	ldr	r4, [pc, #288]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023dee:	2000      	movs	r0, #0
 8023df0:	f7ff fda0 	bl	8023934 <lv_color_hex>
 8023df4:	8060      	strh	r0, [r4, #2]
    unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 8023df6:	4c46      	ldr	r4, [pc, #280]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023df8:	2000      	movs	r0, #0
 8023dfa:	f7ff fd9b 	bl	8023934 <lv_color_hex>
 8023dfe:	80a0      	strh	r0, [r4, #4]
    if(theme){
 8023e00:	79fb      	ldrb	r3, [r7, #7]
 8023e02:	2b00      	cmp	r3, #0
 8023e04:	d00b      	beq.n	8023e1e <SettingsScreen_unitTypeInit+0x5a>
    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8023e06:	4c42      	ldr	r4, [pc, #264]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e08:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023e0c:	f7ff fd92 	bl	8023934 <lv_color_hex>
 8023e10:	8060      	strh	r0, [r4, #2]
    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8023e12:	4c3f      	ldr	r4, [pc, #252]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e14:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023e18:	f7ff fd8c 	bl	8023934 <lv_color_hex>
 8023e1c:	80a0      	strh	r0, [r4, #4]
    }
    unit_indic_style.body.padding.left = 0;
 8023e1e:	4b3c      	ldr	r3, [pc, #240]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e20:	2200      	movs	r2, #0
 8023e22:	835a      	strh	r2, [r3, #26]
    unit_indic_style.body.padding.right = 0;
 8023e24:	4b3a      	ldr	r3, [pc, #232]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e26:	2200      	movs	r2, #0
 8023e28:	839a      	strh	r2, [r3, #28]
    unit_indic_style.body.padding.top = 0;
 8023e2a:	4b39      	ldr	r3, [pc, #228]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e2c:	2200      	movs	r2, #0
 8023e2e:	82da      	strh	r2, [r3, #22]
    unit_indic_style.body.padding.bottom = 0;
 8023e30:	4b37      	ldr	r3, [pc, #220]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023e32:	2200      	movs	r2, #0
 8023e34:	831a      	strh	r2, [r3, #24]

    lv_obj_t * unitLbl = lv_label_create(lv_scr_act(), NULL);
 8023e36:	f7ff fd91 	bl	802395c <lv_scr_act>
 8023e3a:	4603      	mov	r3, r0
 8023e3c:	2100      	movs	r1, #0
 8023e3e:	4618      	mov	r0, r3
 8023e40:	f7f5 fb68 	bl	8019514 <lv_label_create>
 8023e44:	60f8      	str	r0, [r7, #12]
    lv_label_set_style(unitLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023e46:	4a2e      	ldr	r2, [pc, #184]	; (8023f00 <SettingsScreen_unitTypeInit+0x13c>)
 8023e48:	2100      	movs	r1, #0
 8023e4a:	68f8      	ldr	r0, [r7, #12]
 8023e4c:	f7ff fd91 	bl	8023972 <lv_label_set_style>
	lv_label_set_text(unitLbl, "Unit:");
 8023e50:	4930      	ldr	r1, [pc, #192]	; (8023f14 <SettingsScreen_unitTypeInit+0x150>)
 8023e52:	68f8      	ldr	r0, [r7, #12]
 8023e54:	f7f5 fc90 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(unitLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 160);
 8023e58:	23a0      	movs	r3, #160	; 0xa0
 8023e5a:	9300      	str	r3, [sp, #0]
 8023e5c:	2314      	movs	r3, #20
 8023e5e:	2201      	movs	r2, #1
 8023e60:	2100      	movs	r1, #0
 8023e62:	68f8      	ldr	r0, [r7, #12]
 8023e64:	f7e2 fa3e 	bl	80062e4 <lv_obj_align>

    lv_obj_t * unitDescLbl = lv_label_create(lv_scr_act(), NULL);
 8023e68:	f7ff fd78 	bl	802395c <lv_scr_act>
 8023e6c:	4603      	mov	r3, r0
 8023e6e:	2100      	movs	r1, #0
 8023e70:	4618      	mov	r0, r3
 8023e72:	f7f5 fb4f 	bl	8019514 <lv_label_create>
 8023e76:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(unitDescLbl, LV_LABEL_STYLE_MAIN, &unitDesc_Style);
 8023e78:	4a22      	ldr	r2, [pc, #136]	; (8023f04 <SettingsScreen_unitTypeInit+0x140>)
 8023e7a:	2100      	movs	r1, #0
 8023e7c:	68b8      	ldr	r0, [r7, #8]
 8023e7e:	f7ff fd78 	bl	8023972 <lv_label_set_style>
 	lv_label_set_align(unitDescLbl, LV_LABEL_ALIGN_CENTER);
 8023e82:	2101      	movs	r1, #1
 8023e84:	68b8      	ldr	r0, [r7, #8]
 8023e86:	f7f5 fd6f 	bl	8019968 <lv_label_set_align>
	lv_label_set_text(unitDescLbl, "KM\n/\nMILES");
 8023e8a:	4923      	ldr	r1, [pc, #140]	; (8023f18 <SettingsScreen_unitTypeInit+0x154>)
 8023e8c:	68b8      	ldr	r0, [r7, #8]
 8023e8e:	f7f5 fc73 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(unitDescLbl, NULL, LV_ALIGN_IN_TOP_MID, 0, 160);
 8023e92:	23a0      	movs	r3, #160	; 0xa0
 8023e94:	9300      	str	r3, [sp, #0]
 8023e96:	2300      	movs	r3, #0
 8023e98:	2202      	movs	r2, #2
 8023e9a:	2100      	movs	r1, #0
 8023e9c:	68b8      	ldr	r0, [r7, #8]
 8023e9e:	f7e2 fa21 	bl	80062e4 <lv_obj_align>

    unitTypeSwitch = lv_sw_create(lv_scr_act(), NULL);
 8023ea2:	f7ff fd5b 	bl	802395c <lv_scr_act>
 8023ea6:	4603      	mov	r3, r0
 8023ea8:	2100      	movs	r1, #0
 8023eaa:	4618      	mov	r0, r3
 8023eac:	f7fa fd8a 	bl	801e9c4 <lv_sw_create>
 8023eb0:	4602      	mov	r2, r0
 8023eb2:	4b1a      	ldr	r3, [pc, #104]	; (8023f1c <SettingsScreen_unitTypeInit+0x158>)
 8023eb4:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 8023eb6:	4b19      	ldr	r3, [pc, #100]	; (8023f1c <SettingsScreen_unitTypeInit+0x158>)
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	4a15      	ldr	r2, [pc, #84]	; (8023f10 <SettingsScreen_unitTypeInit+0x14c>)
 8023ebc:	2101      	movs	r1, #1
 8023ebe:	4618      	mov	r0, r3
 8023ec0:	f7fa fe5e 	bl	801eb80 <lv_sw_set_style>
    lv_sw_on(unitTypeSwitch, LV_ANIM_OFF);
 8023ec4:	4b15      	ldr	r3, [pc, #84]	; (8023f1c <SettingsScreen_unitTypeInit+0x158>)
 8023ec6:	681b      	ldr	r3, [r3, #0]
 8023ec8:	2100      	movs	r1, #0
 8023eca:	4618      	mov	r0, r3
 8023ecc:	f7fa fe22 	bl	801eb14 <lv_sw_on>
    if(SunitType)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 8023ed0:	4b13      	ldr	r3, [pc, #76]	; (8023f20 <SettingsScreen_unitTypeInit+0x15c>)
 8023ed2:	781b      	ldrb	r3, [r3, #0]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d005      	beq.n	8023ee4 <SettingsScreen_unitTypeInit+0x120>
 8023ed8:	4b10      	ldr	r3, [pc, #64]	; (8023f1c <SettingsScreen_unitTypeInit+0x158>)
 8023eda:	681b      	ldr	r3, [r3, #0]
 8023edc:	2101      	movs	r1, #1
 8023ede:	4618      	mov	r0, r3
 8023ee0:	f7fa fe18 	bl	801eb14 <lv_sw_on>
    lv_obj_align(unitTypeSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 160);
 8023ee4:	4b0d      	ldr	r3, [pc, #52]	; (8023f1c <SettingsScreen_unitTypeInit+0x158>)
 8023ee6:	6818      	ldr	r0, [r3, #0]
 8023ee8:	23a0      	movs	r3, #160	; 0xa0
 8023eea:	9300      	str	r3, [sp, #0]
 8023eec:	f06f 0313 	mvn.w	r3, #19
 8023ef0:	2203      	movs	r2, #3
 8023ef2:	2100      	movs	r1, #0
 8023ef4:	f7e2 f9f6 	bl	80062e4 <lv_obj_align>
}
 8023ef8:	bf00      	nop
 8023efa:	3714      	adds	r7, #20
 8023efc:	46bd      	mov	sp, r7
 8023efe:	bd90      	pop	{r4, r7, pc}
 8023f00:	2000639c 	.word	0x2000639c
 8023f04:	200064c8 	.word	0x200064c8
 8023f08:	200026cc 	.word	0x200026cc
 8023f0c:	20006a88 	.word	0x20006a88
 8023f10:	20006414 	.word	0x20006414
 8023f14:	0802a098 	.word	0x0802a098
 8023f18:	0802a0a0 	.word	0x0802a0a0
 8023f1c:	20006ffc 	.word	0x20006ffc
 8023f20:	20007066 	.word	0x20007066

08023f24 <SettingsScreen_buttonsInit>:
/**/
void SettingsScreen_buttonsInit(bool theme){
 8023f24:	b580      	push	{r7, lr}
 8023f26:	b086      	sub	sp, #24
 8023f28:	af02      	add	r7, sp, #8
 8023f2a:	4603      	mov	r3, r0
 8023f2c:	71fb      	strb	r3, [r7, #7]
	static lv_style_t scrl_style,bg_style;
	lv_style_copy(&scrl_style, &lv_style_plain);
 8023f2e:	4963      	ldr	r1, [pc, #396]	; (80240bc <SettingsScreen_buttonsInit+0x198>)
 8023f30:	4863      	ldr	r0, [pc, #396]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f32:	f7e4 fc1b 	bl	800876c <lv_style_copy>
	scrl_style.body.main_color = LV_COLOR_SILVER;
 8023f36:	4a62      	ldr	r2, [pc, #392]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f38:	4b62      	ldr	r3, [pc, #392]	; (80240c4 <SettingsScreen_buttonsInit+0x1a0>)
 8023f3a:	881b      	ldrh	r3, [r3, #0]
 8023f3c:	8053      	strh	r3, [r2, #2]
	scrl_style.body.grad_color = LV_COLOR_SILVER;
 8023f3e:	4a60      	ldr	r2, [pc, #384]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f40:	4b60      	ldr	r3, [pc, #384]	; (80240c4 <SettingsScreen_buttonsInit+0x1a0>)
 8023f42:	881b      	ldrh	r3, [r3, #0]
 8023f44:	8093      	strh	r3, [r2, #4]
	scrl_style.body.border.color = LV_COLOR_BLACK;
 8023f46:	4b5e      	ldr	r3, [pc, #376]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f48:	2200      	movs	r2, #0
 8023f4a:	815a      	strh	r2, [r3, #10]
	scrl_style.body.border.width = 0;
 8023f4c:	4b5c      	ldr	r3, [pc, #368]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f4e:	2200      	movs	r2, #0
 8023f50:	819a      	strh	r2, [r3, #12]
	scrl_style.text.color = LV_COLOR_WHITE;
 8023f52:	4a5b      	ldr	r2, [pc, #364]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023f54:	4b5c      	ldr	r3, [pc, #368]	; (80240c8 <SettingsScreen_buttonsInit+0x1a4>)
 8023f56:	881b      	ldrh	r3, [r3, #0]
 8023f58:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&bg_style, &lv_style_plain);
 8023f5a:	4958      	ldr	r1, [pc, #352]	; (80240bc <SettingsScreen_buttonsInit+0x198>)
 8023f5c:	485b      	ldr	r0, [pc, #364]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f5e:	f7e4 fc05 	bl	800876c <lv_style_copy>
	bg_style.body.main_color = LV_COLOR_BLACK;
 8023f62:	4b5a      	ldr	r3, [pc, #360]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f64:	2200      	movs	r2, #0
 8023f66:	805a      	strh	r2, [r3, #2]
	bg_style.body.grad_color = LV_COLOR_BLACK;
 8023f68:	4b58      	ldr	r3, [pc, #352]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f6a:	2200      	movs	r2, #0
 8023f6c:	809a      	strh	r2, [r3, #4]
	bg_style.body.border.color = LV_COLOR_WHITE;
 8023f6e:	4a57      	ldr	r2, [pc, #348]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f70:	4b55      	ldr	r3, [pc, #340]	; (80240c8 <SettingsScreen_buttonsInit+0x1a4>)
 8023f72:	881b      	ldrh	r3, [r3, #0]
 8023f74:	8153      	strh	r3, [r2, #10]
	bg_style.body.border.width = 0;
 8023f76:	4b55      	ldr	r3, [pc, #340]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f78:	2200      	movs	r2, #0
 8023f7a:	819a      	strh	r2, [r3, #12]
	bg_style.body.border.opa = LV_OPA_90;
 8023f7c:	4b53      	ldr	r3, [pc, #332]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f7e:	22e5      	movs	r2, #229	; 0xe5
 8023f80:	73da      	strb	r2, [r3, #15]
	bg_style.body.opa = LV_OPA_90;
 8023f82:	4b52      	ldr	r3, [pc, #328]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f84:	22e5      	movs	r2, #229	; 0xe5
 8023f86:	721a      	strb	r2, [r3, #8]
	bg_style.text.color = LV_COLOR_WHITE;
 8023f88:	4a50      	ldr	r2, [pc, #320]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f8a:	4b4f      	ldr	r3, [pc, #316]	; (80240c8 <SettingsScreen_buttonsInit+0x1a4>)
 8023f8c:	881b      	ldrh	r3, [r3, #0]
 8023f8e:	8413      	strh	r3, [r2, #32]
    if(theme){
 8023f90:	79fb      	ldrb	r3, [r7, #7]
 8023f92:	2b00      	cmp	r3, #0
 8023f94:	d010      	beq.n	8023fb8 <SettingsScreen_buttonsInit+0x94>
		bg_style.body.main_color = LV_COLOR_WHITE;
 8023f96:	4a4d      	ldr	r2, [pc, #308]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023f98:	4b4b      	ldr	r3, [pc, #300]	; (80240c8 <SettingsScreen_buttonsInit+0x1a4>)
 8023f9a:	881b      	ldrh	r3, [r3, #0]
 8023f9c:	8053      	strh	r3, [r2, #2]
		bg_style.body.grad_color = LV_COLOR_WHITE;
 8023f9e:	4a4b      	ldr	r2, [pc, #300]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023fa0:	4b49      	ldr	r3, [pc, #292]	; (80240c8 <SettingsScreen_buttonsInit+0x1a4>)
 8023fa2:	881b      	ldrh	r3, [r3, #0]
 8023fa4:	8093      	strh	r3, [r2, #4]
		bg_style.body.border.color = LV_COLOR_BLACK;
 8023fa6:	4b49      	ldr	r3, [pc, #292]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023fa8:	2200      	movs	r2, #0
 8023faa:	815a      	strh	r2, [r3, #10]
		scrl_style.text.color = LV_COLOR_BLACK;
 8023fac:	4b44      	ldr	r3, [pc, #272]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023fae:	2200      	movs	r2, #0
 8023fb0:	841a      	strh	r2, [r3, #32]
		bg_style.text.color = LV_COLOR_BLACK;
 8023fb2:	4b46      	ldr	r3, [pc, #280]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023fb4:	2200      	movs	r2, #0
 8023fb6:	841a      	strh	r2, [r3, #32]
	 }
    //LV_BTN_STATE_TGL_PR
    //LV_BTN_STATE_REL
    lv_obj_t * saveBtnLbl;

    S_saveBtn = lv_btn_create(lv_scr_act(), NULL);
 8023fb8:	f7ff fcd0 	bl	802395c <lv_scr_act>
 8023fbc:	4603      	mov	r3, r0
 8023fbe:	2100      	movs	r1, #0
 8023fc0:	4618      	mov	r0, r3
 8023fc2:	f7f1 fc3b 	bl	801583c <lv_btn_create>
 8023fc6:	4602      	mov	r2, r0
 8023fc8:	4b41      	ldr	r3, [pc, #260]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8023fca:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_saveBtn,80);
 8023fcc:	4b40      	ldr	r3, [pc, #256]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8023fce:	681b      	ldr	r3, [r3, #0]
 8023fd0:	2150      	movs	r1, #80	; 0x50
 8023fd2:	4618      	mov	r0, r3
 8023fd4:	f7e2 f95c 	bl	8006290 <lv_obj_set_width>
    lv_obj_set_height(S_saveBtn,30);
 8023fd8:	4b3d      	ldr	r3, [pc, #244]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	211e      	movs	r1, #30
 8023fde:	4618      	mov	r0, r3
 8023fe0:	f7e2 f96b 	bl	80062ba <lv_obj_set_height>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8023fe4:	4b3a      	ldr	r3, [pc, #232]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8023fe6:	681b      	ldr	r3, [r3, #0]
 8023fe8:	4a35      	ldr	r2, [pc, #212]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8023fea:	2100      	movs	r1, #0
 8023fec:	4618      	mov	r0, r3
 8023fee:	f7f1 fd33 	bl	8015a58 <lv_btn_set_style>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8023ff2:	4b37      	ldr	r3, [pc, #220]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	4a35      	ldr	r2, [pc, #212]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8023ff8:	2103      	movs	r1, #3
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	f7f1 fd2c 	bl	8015a58 <lv_btn_set_style>
    lv_obj_align(S_saveBtn, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 200);
 8024000:	4b33      	ldr	r3, [pc, #204]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8024002:	6818      	ldr	r0, [r3, #0]
 8024004:	23c8      	movs	r3, #200	; 0xc8
 8024006:	9300      	str	r3, [sp, #0]
 8024008:	f06f 0313 	mvn.w	r3, #19
 802400c:	2203      	movs	r2, #3
 802400e:	2100      	movs	r1, #0
 8024010:	f7e2 f968 	bl	80062e4 <lv_obj_align>
    lv_btn_set_state(S_saveBtn, LV_BTN_STATE_TGL_PR);
 8024014:	4b2e      	ldr	r3, [pc, #184]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	2103      	movs	r1, #3
 802401a:	4618      	mov	r0, r3
 802401c:	f7f1 fcf2 	bl	8015a04 <lv_btn_set_state>

    saveBtnLbl = lv_label_create(S_saveBtn, NULL);
 8024020:	4b2b      	ldr	r3, [pc, #172]	; (80240d0 <SettingsScreen_buttonsInit+0x1ac>)
 8024022:	681b      	ldr	r3, [r3, #0]
 8024024:	2100      	movs	r1, #0
 8024026:	4618      	mov	r0, r3
 8024028:	f7f5 fa74 	bl	8019514 <lv_label_create>
 802402c:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(saveBtnLbl, "Save");
 802402e:	4929      	ldr	r1, [pc, #164]	; (80240d4 <SettingsScreen_buttonsInit+0x1b0>)
 8024030:	68f8      	ldr	r0, [r7, #12]
 8024032:	f7f5 fba1 	bl	8019778 <lv_label_set_text>

    lv_obj_t * closeBtnLbl;

    S_closeBtn = lv_btn_create(lv_scr_act(), NULL);
 8024036:	f7ff fc91 	bl	802395c <lv_scr_act>
 802403a:	4603      	mov	r3, r0
 802403c:	2100      	movs	r1, #0
 802403e:	4618      	mov	r0, r3
 8024040:	f7f1 fbfc 	bl	801583c <lv_btn_create>
 8024044:	4602      	mov	r2, r0
 8024046:	4b24      	ldr	r3, [pc, #144]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024048:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_closeBtn,80);
 802404a:	4b23      	ldr	r3, [pc, #140]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 802404c:	681b      	ldr	r3, [r3, #0]
 802404e:	2150      	movs	r1, #80	; 0x50
 8024050:	4618      	mov	r0, r3
 8024052:	f7e2 f91d 	bl	8006290 <lv_obj_set_width>
    lv_obj_set_height(S_closeBtn,30);
 8024056:	4b20      	ldr	r3, [pc, #128]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024058:	681b      	ldr	r3, [r3, #0]
 802405a:	211e      	movs	r1, #30
 802405c:	4618      	mov	r0, r3
 802405e:	f7e2 f92c 	bl	80062ba <lv_obj_set_height>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8024062:	4b1d      	ldr	r3, [pc, #116]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024064:	681b      	ldr	r3, [r3, #0]
 8024066:	4a16      	ldr	r2, [pc, #88]	; (80240c0 <SettingsScreen_buttonsInit+0x19c>)
 8024068:	2100      	movs	r1, #0
 802406a:	4618      	mov	r0, r3
 802406c:	f7f1 fcf4 	bl	8015a58 <lv_btn_set_style>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8024070:	4b19      	ldr	r3, [pc, #100]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	4a15      	ldr	r2, [pc, #84]	; (80240cc <SettingsScreen_buttonsInit+0x1a8>)
 8024076:	2103      	movs	r1, #3
 8024078:	4618      	mov	r0, r3
 802407a:	f7f1 fced 	bl	8015a58 <lv_btn_set_style>
    lv_obj_align(S_closeBtn, NULL,LV_ALIGN_IN_TOP_LEFT, 20, 200);
 802407e:	4b16      	ldr	r3, [pc, #88]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024080:	6818      	ldr	r0, [r3, #0]
 8024082:	23c8      	movs	r3, #200	; 0xc8
 8024084:	9300      	str	r3, [sp, #0]
 8024086:	2314      	movs	r3, #20
 8024088:	2201      	movs	r2, #1
 802408a:	2100      	movs	r1, #0
 802408c:	f7e2 f92a 	bl	80062e4 <lv_obj_align>
    lv_btn_set_state(S_closeBtn, LV_BTN_STATE_TGL_PR);
 8024090:	4b11      	ldr	r3, [pc, #68]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	2103      	movs	r1, #3
 8024096:	4618      	mov	r0, r3
 8024098:	f7f1 fcb4 	bl	8015a04 <lv_btn_set_state>

    closeBtnLbl = lv_label_create(S_closeBtn, NULL);
 802409c:	4b0e      	ldr	r3, [pc, #56]	; (80240d8 <SettingsScreen_buttonsInit+0x1b4>)
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	2100      	movs	r1, #0
 80240a2:	4618      	mov	r0, r3
 80240a4:	f7f5 fa36 	bl	8019514 <lv_label_create>
 80240a8:	60b8      	str	r0, [r7, #8]
    lv_label_set_text(closeBtnLbl, "close");
 80240aa:	490c      	ldr	r1, [pc, #48]	; (80240dc <SettingsScreen_buttonsInit+0x1b8>)
 80240ac:	68b8      	ldr	r0, [r7, #8]
 80240ae:	f7f5 fb63 	bl	8019778 <lv_label_set_text>
}
 80240b2:	bf00      	nop
 80240b4:	3710      	adds	r7, #16
 80240b6:	46bd      	mov	sp, r7
 80240b8:	bd80      	pop	{r7, pc}
 80240ba:	bf00      	nop
 80240bc:	20006c68 	.word	0x20006c68
 80240c0:	20006504 	.word	0x20006504
 80240c4:	0802a054 	.word	0x0802a054
 80240c8:	0802a01c 	.word	0x0802a01c
 80240cc:	20006540 	.word	0x20006540
 80240d0:	20007010 	.word	0x20007010
 80240d4:	0802a0ac 	.word	0x0802a0ac
 80240d8:	20006ff8 	.word	0x20006ff8
 80240dc:	0802a0b4 	.word	0x0802a0b4

080240e0 <SettingsScreen_ButtonController>:

/*This function using for control to buttons*/
void SettingsScreen_ButtonController(void){
 80240e0:	b580      	push	{r7, lr}
 80240e2:	af00      	add	r7, sp, #0
	  if(1==tos_LeftButton_Listenner_For_MenuControl()) {	SettingsScreen_DateUpdateVal(false);
 80240e4:	f002 fb2e 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 80240e8:	4603      	mov	r3, r0
 80240ea:	2b01      	cmp	r3, #1
 80240ec:	d134      	bne.n	8024158 <SettingsScreen_ButtonController+0x78>
 80240ee:	2000      	movs	r0, #0
 80240f0:	f000 f96c 	bl	80243cc <SettingsScreen_DateUpdateVal>
		  switch(S_whichItem){
 80240f4:	4b36      	ldr	r3, [pc, #216]	; (80241d0 <SettingsScreen_ButtonController+0xf0>)
 80240f6:	781b      	ldrb	r3, [r3, #0]
 80240f8:	2b04      	cmp	r3, #4
 80240fa:	d82d      	bhi.n	8024158 <SettingsScreen_ButtonController+0x78>
 80240fc:	a201      	add	r2, pc, #4	; (adr r2, 8024104 <SettingsScreen_ButtonController+0x24>)
 80240fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024102:	bf00      	nop
 8024104:	08024119 	.word	0x08024119
 8024108:	08024121 	.word	0x08024121
 802410c:	08024129 	.word	0x08024129
 8024110:	08024131 	.word	0x08024131
 8024114:	08024139 	.word	0x08024139
		  case 0: SettingsScreen_TimeUpdateVal(false); break;
 8024118:	2000      	movs	r0, #0
 802411a:	f000 f8e1 	bl	80242e0 <SettingsScreen_TimeUpdateVal>
 802411e:	e01b      	b.n	8024158 <SettingsScreen_ButtonController+0x78>
		  case 1: SettingsScreen_DateUpdateVal(false); break;
 8024120:	2000      	movs	r0, #0
 8024122:	f000 f953 	bl	80243cc <SettingsScreen_DateUpdateVal>
 8024126:	e017      	b.n	8024158 <SettingsScreen_ButtonController+0x78>
		  case 2: SettingsScreen_BluetoothUpdateVal(false); break;
 8024128:	2000      	movs	r0, #0
 802412a:	f000 f9d9 	bl	80244e0 <SettingsScreen_BluetoothUpdateVal>
 802412e:	e013      	b.n	8024158 <SettingsScreen_ButtonController+0x78>
		  case 3: SettingsScreen_UnitUpdateVal(false); break;
 8024130:	2000      	movs	r0, #0
 8024132:	f000 f9fd 	bl	8024530 <SettingsScreen_UnitUpdateVal>
 8024136:	e00f      	b.n	8024158 <SettingsScreen_ButtonController+0x78>
		  case 4: lv_btn_set_state(S_closeBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 8024138:	4b26      	ldr	r3, [pc, #152]	; (80241d4 <SettingsScreen_ButtonController+0xf4>)
 802413a:	681b      	ldr	r3, [r3, #0]
 802413c:	2100      	movs	r1, #0
 802413e:	4618      	mov	r0, r3
 8024140:	f7f1 fc60 	bl	8015a04 <lv_btn_set_state>
 8024144:	4b24      	ldr	r3, [pc, #144]	; (80241d8 <SettingsScreen_ButtonController+0xf8>)
 8024146:	2200      	movs	r2, #0
 8024148:	701a      	strb	r2, [r3, #0]
			tos_MenuScreen_Init(true,S_hrtc);
 802414a:	4b24      	ldr	r3, [pc, #144]	; (80241dc <SettingsScreen_ButtonController+0xfc>)
 802414c:	681b      	ldr	r3, [r3, #0]
 802414e:	4619      	mov	r1, r3
 8024150:	2001      	movs	r0, #1
 8024152:	f7fd f97f 	bl	8021454 <tos_MenuScreen_Init>
		  break;
 8024156:	bf00      	nop
		  }
	  }
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8024158:	f002 fac8 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 802415c:	4603      	mov	r3, r0
 802415e:	2b01      	cmp	r3, #1
 8024160:	d12c      	bne.n	80241bc <SettingsScreen_ButtonController+0xdc>
		  //SettingsScreen_DateUpdateVal(true);
		  switch(S_whichItem){
 8024162:	4b1b      	ldr	r3, [pc, #108]	; (80241d0 <SettingsScreen_ButtonController+0xf0>)
 8024164:	781b      	ldrb	r3, [r3, #0]
 8024166:	2b04      	cmp	r3, #4
 8024168:	d828      	bhi.n	80241bc <SettingsScreen_ButtonController+0xdc>
 802416a:	a201      	add	r2, pc, #4	; (adr r2, 8024170 <SettingsScreen_ButtonController+0x90>)
 802416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024170:	08024185 	.word	0x08024185
 8024174:	0802418d 	.word	0x0802418d
 8024178:	08024195 	.word	0x08024195
 802417c:	0802419d 	.word	0x0802419d
 8024180:	080241a5 	.word	0x080241a5
		  case 0: SettingsScreen_TimeUpdateVal(true); break;
 8024184:	2001      	movs	r0, #1
 8024186:	f000 f8ab 	bl	80242e0 <SettingsScreen_TimeUpdateVal>
 802418a:	e017      	b.n	80241bc <SettingsScreen_ButtonController+0xdc>
		  case 1: SettingsScreen_DateUpdateVal(true); break;
 802418c:	2001      	movs	r0, #1
 802418e:	f000 f91d 	bl	80243cc <SettingsScreen_DateUpdateVal>
 8024192:	e013      	b.n	80241bc <SettingsScreen_ButtonController+0xdc>
		  case 2: SettingsScreen_BluetoothUpdateVal(true); break;
 8024194:	2001      	movs	r0, #1
 8024196:	f000 f9a3 	bl	80244e0 <SettingsScreen_BluetoothUpdateVal>
 802419a:	e00f      	b.n	80241bc <SettingsScreen_ButtonController+0xdc>
		  case 3: SettingsScreen_UnitUpdateVal(true); break;
 802419c:	2001      	movs	r0, #1
 802419e:	f000 f9c7 	bl	8024530 <SettingsScreen_UnitUpdateVal>
 80241a2:	e00b      	b.n	80241bc <SettingsScreen_ButtonController+0xdc>
		  case 4: lv_btn_set_state(S_saveBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 80241a4:	4b0e      	ldr	r3, [pc, #56]	; (80241e0 <SettingsScreen_ButtonController+0x100>)
 80241a6:	681b      	ldr	r3, [r3, #0]
 80241a8:	2100      	movs	r1, #0
 80241aa:	4618      	mov	r0, r3
 80241ac:	f7f1 fc2a 	bl	8015a04 <lv_btn_set_state>
 80241b0:	4b09      	ldr	r3, [pc, #36]	; (80241d8 <SettingsScreen_ButtonController+0xf8>)
 80241b2:	2200      	movs	r2, #0
 80241b4:	701a      	strb	r2, [r3, #0]
		  SettingsScreen_SetNewValues();
 80241b6:	f000 fbd5 	bl	8024964 <SettingsScreen_SetNewValues>
		  break;
 80241ba:	bf00      	nop
		  }
	  }
	  if(1==tos_EnterButton_Listenner_For_MenuControl()) {
 80241bc:	f002 faee 	bl	802679c <tos_EnterButton_Listenner_For_MenuControl>
 80241c0:	4603      	mov	r3, r0
 80241c2:	2b01      	cmp	r3, #1
 80241c4:	d101      	bne.n	80241ca <SettingsScreen_ButtonController+0xea>
		  SettingsScreen_WhichItemSetVal();
 80241c6:	f000 f80d 	bl	80241e4 <SettingsScreen_WhichItemSetVal>
		 // SettingsScreen_DateSetVal();
	  }

}
 80241ca:	bf00      	nop
 80241cc:	bd80      	pop	{r7, pc}
 80241ce:	bf00      	nop
 80241d0:	20007065 	.word	0x20007065
 80241d4:	20006ff8 	.word	0x20006ff8
 80241d8:	2000701c 	.word	0x2000701c
 80241dc:	20007020 	.word	0x20007020
 80241e0:	20007010 	.word	0x20007010

080241e4 <SettingsScreen_WhichItemSetVal>:


/*This function using for  control the set which item chouser*/
void SettingsScreen_WhichItemSetVal(void){	//	"%d -%d \n",StimeSetVal,S_whichItem
 80241e4:	b580      	push	{r7, lr}
 80241e6:	af00      	add	r7, sp, #0
	if(4==S_whichItem)S_whichItem=0;
 80241e8:	4b1c      	ldr	r3, [pc, #112]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 80241ea:	781b      	ldrb	r3, [r3, #0]
 80241ec:	2b04      	cmp	r3, #4
 80241ee:	d102      	bne.n	80241f6 <SettingsScreen_WhichItemSetVal+0x12>
 80241f0:	4b1a      	ldr	r3, [pc, #104]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 80241f2:	2200      	movs	r2, #0
 80241f4:	701a      	strb	r2, [r3, #0]

	if(0==S_whichItem)SettingsScreen_TimeSetVal();
 80241f6:	4b19      	ldr	r3, [pc, #100]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 80241f8:	781b      	ldrb	r3, [r3, #0]
 80241fa:	2b00      	cmp	r3, #0
 80241fc:	d102      	bne.n	8024204 <SettingsScreen_WhichItemSetVal+0x20>
 80241fe:	f000 f833 	bl	8024268 <SettingsScreen_TimeSetVal>
 8024202:	e00c      	b.n	802421e <SettingsScreen_WhichItemSetVal+0x3a>
	else if(1==S_whichItem)SettingsScreen_DateSetVal();
 8024204:	4b15      	ldr	r3, [pc, #84]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 8024206:	781b      	ldrb	r3, [r3, #0]
 8024208:	2b01      	cmp	r3, #1
 802420a:	d102      	bne.n	8024212 <SettingsScreen_WhichItemSetVal+0x2e>
 802420c:	f000 f84a 	bl	80242a4 <SettingsScreen_DateSetVal>
 8024210:	e005      	b.n	802421e <SettingsScreen_WhichItemSetVal+0x3a>
	else S_whichItem++;
 8024212:	4b12      	ldr	r3, [pc, #72]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 8024214:	781b      	ldrb	r3, [r3, #0]
 8024216:	3301      	adds	r3, #1
 8024218:	b2da      	uxtb	r2, r3
 802421a:	4b10      	ldr	r3, [pc, #64]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 802421c:	701a      	strb	r2, [r3, #0]

	SbluetoothSetVal=false;
 802421e:	4b10      	ldr	r3, [pc, #64]	; (8024260 <SettingsScreen_WhichItemSetVal+0x7c>)
 8024220:	2200      	movs	r2, #0
 8024222:	701a      	strb	r2, [r3, #0]
	if(2==S_whichItem)SbluetoothSetVal=true;
 8024224:	4b0d      	ldr	r3, [pc, #52]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 8024226:	781b      	ldrb	r3, [r3, #0]
 8024228:	2b02      	cmp	r3, #2
 802422a:	d102      	bne.n	8024232 <SettingsScreen_WhichItemSetVal+0x4e>
 802422c:	4b0c      	ldr	r3, [pc, #48]	; (8024260 <SettingsScreen_WhichItemSetVal+0x7c>)
 802422e:	2201      	movs	r2, #1
 8024230:	701a      	strb	r2, [r3, #0]
	SunitSetVal=false;
 8024232:	4b0c      	ldr	r3, [pc, #48]	; (8024264 <SettingsScreen_WhichItemSetVal+0x80>)
 8024234:	2200      	movs	r2, #0
 8024236:	701a      	strb	r2, [r3, #0]
	if(3==S_whichItem)SunitSetVal=true;
 8024238:	4b08      	ldr	r3, [pc, #32]	; (802425c <SettingsScreen_WhichItemSetVal+0x78>)
 802423a:	781b      	ldrb	r3, [r3, #0]
 802423c:	2b03      	cmp	r3, #3
 802423e:	d102      	bne.n	8024246 <SettingsScreen_WhichItemSetVal+0x62>
 8024240:	4b08      	ldr	r3, [pc, #32]	; (8024264 <SettingsScreen_WhichItemSetVal+0x80>)
 8024242:	2201      	movs	r2, #1
 8024244:	701a      	strb	r2, [r3, #0]

	SettingsScreen_newTimeLblController();
 8024246:	f000 f995 	bl	8024574 <SettingsScreen_newTimeLblController>
	SettingsScreen_newDateLblController();
 802424a:	f000 fa51 	bl	80246f0 <SettingsScreen_newDateLblController>
	SettingsScreen_newBluetoothValController();
 802424e:	f000 fb0d 	bl	802486c <SettingsScreen_newBluetoothValController>
	SettingsScreen_newUnitTypeController();
 8024252:	f000 fb49 	bl	80248e8 <SettingsScreen_newUnitTypeController>
}
 8024256:	bf00      	nop
 8024258:	bd80      	pop	{r7, pc}
 802425a:	bf00      	nop
 802425c:	20007065 	.word	0x20007065
 8024260:	20007064 	.word	0x20007064
 8024264:	20007002 	.word	0x20007002

08024268 <SettingsScreen_TimeSetVal>:
/*This function using for  control the set time values chouser*/
void SettingsScreen_TimeSetVal(void){
 8024268:	b580      	push	{r7, lr}
 802426a:	af00      	add	r7, sp, #0
	StimeSetVal++;
 802426c:	4b0b      	ldr	r3, [pc, #44]	; (802429c <SettingsScreen_TimeSetVal+0x34>)
 802426e:	781b      	ldrb	r3, [r3, #0]
 8024270:	3301      	adds	r3, #1
 8024272:	b2da      	uxtb	r2, r3
 8024274:	4b09      	ldr	r3, [pc, #36]	; (802429c <SettingsScreen_TimeSetVal+0x34>)
 8024276:	701a      	strb	r2, [r3, #0]
	if(4==StimeSetVal){StimeSetVal=0; S_whichItem++;}
 8024278:	4b08      	ldr	r3, [pc, #32]	; (802429c <SettingsScreen_TimeSetVal+0x34>)
 802427a:	781b      	ldrb	r3, [r3, #0]
 802427c:	2b04      	cmp	r3, #4
 802427e:	d108      	bne.n	8024292 <SettingsScreen_TimeSetVal+0x2a>
 8024280:	4b06      	ldr	r3, [pc, #24]	; (802429c <SettingsScreen_TimeSetVal+0x34>)
 8024282:	2200      	movs	r2, #0
 8024284:	701a      	strb	r2, [r3, #0]
 8024286:	4b06      	ldr	r3, [pc, #24]	; (80242a0 <SettingsScreen_TimeSetVal+0x38>)
 8024288:	781b      	ldrb	r3, [r3, #0]
 802428a:	3301      	adds	r3, #1
 802428c:	b2da      	uxtb	r2, r3
 802428e:	4b04      	ldr	r3, [pc, #16]	; (80242a0 <SettingsScreen_TimeSetVal+0x38>)
 8024290:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newTimeLblController();
 8024292:	f000 f96f 	bl	8024574 <SettingsScreen_newTimeLblController>
}
 8024296:	bf00      	nop
 8024298:	bd80      	pop	{r7, pc}
 802429a:	bf00      	nop
 802429c:	2000701d 	.word	0x2000701d
 80242a0:	20007065 	.word	0x20007065

080242a4 <SettingsScreen_DateSetVal>:
/*This function using for  control the set date values chouser*/
void SettingsScreen_DateSetVal(void){
 80242a4:	b580      	push	{r7, lr}
 80242a6:	af00      	add	r7, sp, #0
	SdateSetVal++;
 80242a8:	4b0b      	ldr	r3, [pc, #44]	; (80242d8 <SettingsScreen_DateSetVal+0x34>)
 80242aa:	781b      	ldrb	r3, [r3, #0]
 80242ac:	3301      	adds	r3, #1
 80242ae:	b2da      	uxtb	r2, r3
 80242b0:	4b09      	ldr	r3, [pc, #36]	; (80242d8 <SettingsScreen_DateSetVal+0x34>)
 80242b2:	701a      	strb	r2, [r3, #0]
	if(4==SdateSetVal){SdateSetVal=0; S_whichItem++;}
 80242b4:	4b08      	ldr	r3, [pc, #32]	; (80242d8 <SettingsScreen_DateSetVal+0x34>)
 80242b6:	781b      	ldrb	r3, [r3, #0]
 80242b8:	2b04      	cmp	r3, #4
 80242ba:	d108      	bne.n	80242ce <SettingsScreen_DateSetVal+0x2a>
 80242bc:	4b06      	ldr	r3, [pc, #24]	; (80242d8 <SettingsScreen_DateSetVal+0x34>)
 80242be:	2200      	movs	r2, #0
 80242c0:	701a      	strb	r2, [r3, #0]
 80242c2:	4b06      	ldr	r3, [pc, #24]	; (80242dc <SettingsScreen_DateSetVal+0x38>)
 80242c4:	781b      	ldrb	r3, [r3, #0]
 80242c6:	3301      	adds	r3, #1
 80242c8:	b2da      	uxtb	r2, r3
 80242ca:	4b04      	ldr	r3, [pc, #16]	; (80242dc <SettingsScreen_DateSetVal+0x38>)
 80242cc:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newDateLblController();
 80242ce:	f000 fa0f 	bl	80246f0 <SettingsScreen_newDateLblController>
}
 80242d2:	bf00      	nop
 80242d4:	bd80      	pop	{r7, pc}
 80242d6:	bf00      	nop
 80242d8:	20006ff4 	.word	0x20006ff4
 80242dc:	20007065 	.word	0x20007065

080242e0 <SettingsScreen_TimeUpdateVal>:
/*This function using for update and plus or minus the time values*/
void SettingsScreen_TimeUpdateVal(bool plus){
 80242e0:	b580      	push	{r7, lr}
 80242e2:	b082      	sub	sp, #8
 80242e4:	af00      	add	r7, sp, #0
 80242e6:	4603      	mov	r3, r0
 80242e8:	71fb      	strb	r3, [r7, #7]
	switch(StimeSetVal){
 80242ea:	4b34      	ldr	r3, [pc, #208]	; (80243bc <SettingsScreen_TimeUpdateVal+0xdc>)
 80242ec:	781b      	ldrb	r3, [r3, #0]
 80242ee:	2b02      	cmp	r3, #2
 80242f0:	d020      	beq.n	8024334 <SettingsScreen_TimeUpdateVal+0x54>
 80242f2:	2b03      	cmp	r3, #3
 80242f4:	d03a      	beq.n	802436c <SettingsScreen_TimeUpdateVal+0x8c>
 80242f6:	2b01      	cmp	r3, #1
 80242f8:	d000      	beq.n	80242fc <SettingsScreen_TimeUpdateVal+0x1c>
	case 3:
		if(plus){
			Sseconds++; if(60==Sseconds)Sseconds=0;
		}else{if(Sseconds>0)Sseconds--;}
		break;
	default: break;
 80242fa:	e058      	b.n	80243ae <SettingsScreen_TimeUpdateVal+0xce>
		if(plus){
 80242fc:	79fb      	ldrb	r3, [r7, #7]
 80242fe:	2b00      	cmp	r3, #0
 8024300:	d00d      	beq.n	802431e <SettingsScreen_TimeUpdateVal+0x3e>
			Shours++; if(24==Shours)Shours=0;
 8024302:	4b2f      	ldr	r3, [pc, #188]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024304:	781b      	ldrb	r3, [r3, #0]
 8024306:	3301      	adds	r3, #1
 8024308:	b2da      	uxtb	r2, r3
 802430a:	4b2d      	ldr	r3, [pc, #180]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 802430c:	701a      	strb	r2, [r3, #0]
 802430e:	4b2c      	ldr	r3, [pc, #176]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024310:	781b      	ldrb	r3, [r3, #0]
 8024312:	2b18      	cmp	r3, #24
 8024314:	d146      	bne.n	80243a4 <SettingsScreen_TimeUpdateVal+0xc4>
 8024316:	4b2a      	ldr	r3, [pc, #168]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024318:	2200      	movs	r2, #0
 802431a:	701a      	strb	r2, [r3, #0]
		break;
 802431c:	e042      	b.n	80243a4 <SettingsScreen_TimeUpdateVal+0xc4>
		}else{if(Shours>0)Shours--;}
 802431e:	4b28      	ldr	r3, [pc, #160]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024320:	781b      	ldrb	r3, [r3, #0]
 8024322:	2b00      	cmp	r3, #0
 8024324:	d03e      	beq.n	80243a4 <SettingsScreen_TimeUpdateVal+0xc4>
 8024326:	4b26      	ldr	r3, [pc, #152]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024328:	781b      	ldrb	r3, [r3, #0]
 802432a:	3b01      	subs	r3, #1
 802432c:	b2da      	uxtb	r2, r3
 802432e:	4b24      	ldr	r3, [pc, #144]	; (80243c0 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024330:	701a      	strb	r2, [r3, #0]
		break;
 8024332:	e037      	b.n	80243a4 <SettingsScreen_TimeUpdateVal+0xc4>
		if(plus){
 8024334:	79fb      	ldrb	r3, [r7, #7]
 8024336:	2b00      	cmp	r3, #0
 8024338:	d00d      	beq.n	8024356 <SettingsScreen_TimeUpdateVal+0x76>
			Sminutes++; if(60==Sminutes)Sminutes=0;
 802433a:	4b22      	ldr	r3, [pc, #136]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 802433c:	781b      	ldrb	r3, [r3, #0]
 802433e:	3301      	adds	r3, #1
 8024340:	b2da      	uxtb	r2, r3
 8024342:	4b20      	ldr	r3, [pc, #128]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024344:	701a      	strb	r2, [r3, #0]
 8024346:	4b1f      	ldr	r3, [pc, #124]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024348:	781b      	ldrb	r3, [r3, #0]
 802434a:	2b3c      	cmp	r3, #60	; 0x3c
 802434c:	d12c      	bne.n	80243a8 <SettingsScreen_TimeUpdateVal+0xc8>
 802434e:	4b1d      	ldr	r3, [pc, #116]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024350:	2200      	movs	r2, #0
 8024352:	701a      	strb	r2, [r3, #0]
		break;
 8024354:	e028      	b.n	80243a8 <SettingsScreen_TimeUpdateVal+0xc8>
		}else{if(Sminutes>0)Sminutes--;}
 8024356:	4b1b      	ldr	r3, [pc, #108]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024358:	781b      	ldrb	r3, [r3, #0]
 802435a:	2b00      	cmp	r3, #0
 802435c:	d024      	beq.n	80243a8 <SettingsScreen_TimeUpdateVal+0xc8>
 802435e:	4b19      	ldr	r3, [pc, #100]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024360:	781b      	ldrb	r3, [r3, #0]
 8024362:	3b01      	subs	r3, #1
 8024364:	b2da      	uxtb	r2, r3
 8024366:	4b17      	ldr	r3, [pc, #92]	; (80243c4 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024368:	701a      	strb	r2, [r3, #0]
		break;
 802436a:	e01d      	b.n	80243a8 <SettingsScreen_TimeUpdateVal+0xc8>
		if(plus){
 802436c:	79fb      	ldrb	r3, [r7, #7]
 802436e:	2b00      	cmp	r3, #0
 8024370:	d00d      	beq.n	802438e <SettingsScreen_TimeUpdateVal+0xae>
			Sseconds++; if(60==Sseconds)Sseconds=0;
 8024372:	4b15      	ldr	r3, [pc, #84]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 8024374:	781b      	ldrb	r3, [r3, #0]
 8024376:	3301      	adds	r3, #1
 8024378:	b2da      	uxtb	r2, r3
 802437a:	4b13      	ldr	r3, [pc, #76]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 802437c:	701a      	strb	r2, [r3, #0]
 802437e:	4b12      	ldr	r3, [pc, #72]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 8024380:	781b      	ldrb	r3, [r3, #0]
 8024382:	2b3c      	cmp	r3, #60	; 0x3c
 8024384:	d112      	bne.n	80243ac <SettingsScreen_TimeUpdateVal+0xcc>
 8024386:	4b10      	ldr	r3, [pc, #64]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 8024388:	2200      	movs	r2, #0
 802438a:	701a      	strb	r2, [r3, #0]
		break;
 802438c:	e00e      	b.n	80243ac <SettingsScreen_TimeUpdateVal+0xcc>
		}else{if(Sseconds>0)Sseconds--;}
 802438e:	4b0e      	ldr	r3, [pc, #56]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 8024390:	781b      	ldrb	r3, [r3, #0]
 8024392:	2b00      	cmp	r3, #0
 8024394:	d00a      	beq.n	80243ac <SettingsScreen_TimeUpdateVal+0xcc>
 8024396:	4b0c      	ldr	r3, [pc, #48]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 8024398:	781b      	ldrb	r3, [r3, #0]
 802439a:	3b01      	subs	r3, #1
 802439c:	b2da      	uxtb	r2, r3
 802439e:	4b0a      	ldr	r3, [pc, #40]	; (80243c8 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243a0:	701a      	strb	r2, [r3, #0]
		break;
 80243a2:	e003      	b.n	80243ac <SettingsScreen_TimeUpdateVal+0xcc>
		break;
 80243a4:	bf00      	nop
 80243a6:	e002      	b.n	80243ae <SettingsScreen_TimeUpdateVal+0xce>
		break;
 80243a8:	bf00      	nop
 80243aa:	e000      	b.n	80243ae <SettingsScreen_TimeUpdateVal+0xce>
		break;
 80243ac:	bf00      	nop
	}
	SettingsScreen_newTimeLblController();
 80243ae:	f000 f8e1 	bl	8024574 <SettingsScreen_newTimeLblController>
}
 80243b2:	bf00      	nop
 80243b4:	3708      	adds	r7, #8
 80243b6:	46bd      	mov	sp, r7
 80243b8:	bd80      	pop	{r7, pc}
 80243ba:	bf00      	nop
 80243bc:	2000701d 	.word	0x2000701d
 80243c0:	20007001 	.word	0x20007001
 80243c4:	2000700c 	.word	0x2000700c
 80243c8:	2000701f 	.word	0x2000701f

080243cc <SettingsScreen_DateUpdateVal>:
/*This function using for  update and plus or minus the date values*/
void SettingsScreen_DateUpdateVal(bool plus){
 80243cc:	b580      	push	{r7, lr}
 80243ce:	b082      	sub	sp, #8
 80243d0:	af00      	add	r7, sp, #0
 80243d2:	4603      	mov	r3, r0
 80243d4:	71fb      	strb	r3, [r7, #7]
	switch(SdateSetVal){
 80243d6:	4b3d      	ldr	r3, [pc, #244]	; (80244cc <SettingsScreen_DateUpdateVal+0x100>)
 80243d8:	781b      	ldrb	r3, [r3, #0]
 80243da:	2b02      	cmp	r3, #2
 80243dc:	d03b      	beq.n	8024456 <SettingsScreen_DateUpdateVal+0x8a>
 80243de:	2b03      	cmp	r3, #3
 80243e0:	d052      	beq.n	8024488 <SettingsScreen_DateUpdateVal+0xbc>
 80243e2:	2b01      	cmp	r3, #1
 80243e4:	d000      	beq.n	80243e8 <SettingsScreen_DateUpdateVal+0x1c>
	case 3:
		if(plus){
			Syears++;
		}else{if(2020<Syears)Syears--;}
		break;
	default: break;
 80243e6:	e06b      	b.n	80244c0 <SettingsScreen_DateUpdateVal+0xf4>
		if(plus){if(0==Syears%4 && (Sdates<daysofmonths[Smonths-1]+1))Sdates++;
 80243e8:	79fb      	ldrb	r3, [r7, #7]
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d028      	beq.n	8024440 <SettingsScreen_DateUpdateVal+0x74>
 80243ee:	4b38      	ldr	r3, [pc, #224]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 80243f0:	881b      	ldrh	r3, [r3, #0]
 80243f2:	f003 0303 	and.w	r3, r3, #3
 80243f6:	b29b      	uxth	r3, r3
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d111      	bne.n	8024420 <SettingsScreen_DateUpdateVal+0x54>
 80243fc:	4b35      	ldr	r3, [pc, #212]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 80243fe:	781b      	ldrb	r3, [r3, #0]
 8024400:	4619      	mov	r1, r3
 8024402:	4b35      	ldr	r3, [pc, #212]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 8024404:	781b      	ldrb	r3, [r3, #0]
 8024406:	3b01      	subs	r3, #1
 8024408:	4a34      	ldr	r2, [pc, #208]	; (80244dc <SettingsScreen_DateUpdateVal+0x110>)
 802440a:	5cd3      	ldrb	r3, [r2, r3]
 802440c:	3301      	adds	r3, #1
 802440e:	4299      	cmp	r1, r3
 8024410:	da06      	bge.n	8024420 <SettingsScreen_DateUpdateVal+0x54>
 8024412:	4b30      	ldr	r3, [pc, #192]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 8024414:	781b      	ldrb	r3, [r3, #0]
 8024416:	3301      	adds	r3, #1
 8024418:	b2da      	uxtb	r2, r3
 802441a:	4b2e      	ldr	r3, [pc, #184]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 802441c:	701a      	strb	r2, [r3, #0]
		break;
 802441e:	e04a      	b.n	80244b6 <SettingsScreen_DateUpdateVal+0xea>
		else if(Sdates<daysofmonths[Smonths-1])Sdates++;
 8024420:	4b2d      	ldr	r3, [pc, #180]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 8024422:	781b      	ldrb	r3, [r3, #0]
 8024424:	3b01      	subs	r3, #1
 8024426:	4a2d      	ldr	r2, [pc, #180]	; (80244dc <SettingsScreen_DateUpdateVal+0x110>)
 8024428:	5cd2      	ldrb	r2, [r2, r3]
 802442a:	4b2a      	ldr	r3, [pc, #168]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 802442c:	781b      	ldrb	r3, [r3, #0]
 802442e:	429a      	cmp	r2, r3
 8024430:	d941      	bls.n	80244b6 <SettingsScreen_DateUpdateVal+0xea>
 8024432:	4b28      	ldr	r3, [pc, #160]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 8024434:	781b      	ldrb	r3, [r3, #0]
 8024436:	3301      	adds	r3, #1
 8024438:	b2da      	uxtb	r2, r3
 802443a:	4b26      	ldr	r3, [pc, #152]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 802443c:	701a      	strb	r2, [r3, #0]
		break;
 802443e:	e03a      	b.n	80244b6 <SettingsScreen_DateUpdateVal+0xea>
		}else{if(1<Sdates)Sdates--;}
 8024440:	4b24      	ldr	r3, [pc, #144]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 8024442:	781b      	ldrb	r3, [r3, #0]
 8024444:	2b01      	cmp	r3, #1
 8024446:	d936      	bls.n	80244b6 <SettingsScreen_DateUpdateVal+0xea>
 8024448:	4b22      	ldr	r3, [pc, #136]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 802444a:	781b      	ldrb	r3, [r3, #0]
 802444c:	3b01      	subs	r3, #1
 802444e:	b2da      	uxtb	r2, r3
 8024450:	4b20      	ldr	r3, [pc, #128]	; (80244d4 <SettingsScreen_DateUpdateVal+0x108>)
 8024452:	701a      	strb	r2, [r3, #0]
		break;
 8024454:	e02f      	b.n	80244b6 <SettingsScreen_DateUpdateVal+0xea>
		if(plus){
 8024456:	79fb      	ldrb	r3, [r7, #7]
 8024458:	2b00      	cmp	r3, #0
 802445a:	d00a      	beq.n	8024472 <SettingsScreen_DateUpdateVal+0xa6>
			if(Smonths<12)Smonths++;
 802445c:	4b1e      	ldr	r3, [pc, #120]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 802445e:	781b      	ldrb	r3, [r3, #0]
 8024460:	2b0b      	cmp	r3, #11
 8024462:	d82a      	bhi.n	80244ba <SettingsScreen_DateUpdateVal+0xee>
 8024464:	4b1c      	ldr	r3, [pc, #112]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 8024466:	781b      	ldrb	r3, [r3, #0]
 8024468:	3301      	adds	r3, #1
 802446a:	b2da      	uxtb	r2, r3
 802446c:	4b1a      	ldr	r3, [pc, #104]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 802446e:	701a      	strb	r2, [r3, #0]
		break;
 8024470:	e023      	b.n	80244ba <SettingsScreen_DateUpdateVal+0xee>
		}else{if(1<Smonths)Smonths--;}
 8024472:	4b19      	ldr	r3, [pc, #100]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 8024474:	781b      	ldrb	r3, [r3, #0]
 8024476:	2b01      	cmp	r3, #1
 8024478:	d91f      	bls.n	80244ba <SettingsScreen_DateUpdateVal+0xee>
 802447a:	4b17      	ldr	r3, [pc, #92]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 802447c:	781b      	ldrb	r3, [r3, #0]
 802447e:	3b01      	subs	r3, #1
 8024480:	b2da      	uxtb	r2, r3
 8024482:	4b15      	ldr	r3, [pc, #84]	; (80244d8 <SettingsScreen_DateUpdateVal+0x10c>)
 8024484:	701a      	strb	r2, [r3, #0]
		break;
 8024486:	e018      	b.n	80244ba <SettingsScreen_DateUpdateVal+0xee>
		if(plus){
 8024488:	79fb      	ldrb	r3, [r7, #7]
 802448a:	2b00      	cmp	r3, #0
 802448c:	d006      	beq.n	802449c <SettingsScreen_DateUpdateVal+0xd0>
			Syears++;
 802448e:	4b10      	ldr	r3, [pc, #64]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 8024490:	881b      	ldrh	r3, [r3, #0]
 8024492:	3301      	adds	r3, #1
 8024494:	b29a      	uxth	r2, r3
 8024496:	4b0e      	ldr	r3, [pc, #56]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 8024498:	801a      	strh	r2, [r3, #0]
		break;
 802449a:	e010      	b.n	80244be <SettingsScreen_DateUpdateVal+0xf2>
		}else{if(2020<Syears)Syears--;}
 802449c:	4b0c      	ldr	r3, [pc, #48]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 802449e:	881b      	ldrh	r3, [r3, #0]
 80244a0:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80244a4:	4293      	cmp	r3, r2
 80244a6:	d90a      	bls.n	80244be <SettingsScreen_DateUpdateVal+0xf2>
 80244a8:	4b09      	ldr	r3, [pc, #36]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 80244aa:	881b      	ldrh	r3, [r3, #0]
 80244ac:	3b01      	subs	r3, #1
 80244ae:	b29a      	uxth	r2, r3
 80244b0:	4b07      	ldr	r3, [pc, #28]	; (80244d0 <SettingsScreen_DateUpdateVal+0x104>)
 80244b2:	801a      	strh	r2, [r3, #0]
		break;
 80244b4:	e003      	b.n	80244be <SettingsScreen_DateUpdateVal+0xf2>
		break;
 80244b6:	bf00      	nop
 80244b8:	e002      	b.n	80244c0 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 80244ba:	bf00      	nop
 80244bc:	e000      	b.n	80244c0 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 80244be:	bf00      	nop
	}
	SettingsScreen_newDateLblController();
 80244c0:	f000 f916 	bl	80246f0 <SettingsScreen_newDateLblController>
}
 80244c4:	bf00      	nop
 80244c6:	3708      	adds	r7, #8
 80244c8:	46bd      	mov	sp, r7
 80244ca:	bd80      	pop	{r7, pc}
 80244cc:	20006ff4 	.word	0x20006ff4
 80244d0:	20007014 	.word	0x20007014
 80244d4:	20007000 	.word	0x20007000
 80244d8:	2000701e 	.word	0x2000701e
 80244dc:	20002840 	.word	0x20002840

080244e0 <SettingsScreen_BluetoothUpdateVal>:
/**/
void SettingsScreen_BluetoothUpdateVal(bool val){
 80244e0:	b580      	push	{r7, lr}
 80244e2:	b082      	sub	sp, #8
 80244e4:	af00      	add	r7, sp, #0
 80244e6:	4603      	mov	r3, r0
 80244e8:	71fb      	strb	r3, [r7, #7]
	SbluetoothSetVal=true;
 80244ea:	4b0e      	ldr	r3, [pc, #56]	; (8024524 <SettingsScreen_BluetoothUpdateVal+0x44>)
 80244ec:	2201      	movs	r2, #1
 80244ee:	701a      	strb	r2, [r3, #0]

    if(val)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 80244f0:	79fb      	ldrb	r3, [r7, #7]
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	d006      	beq.n	8024504 <SettingsScreen_BluetoothUpdateVal+0x24>
 80244f6:	4b0c      	ldr	r3, [pc, #48]	; (8024528 <SettingsScreen_BluetoothUpdateVal+0x48>)
 80244f8:	681b      	ldr	r3, [r3, #0]
 80244fa:	2101      	movs	r1, #1
 80244fc:	4618      	mov	r0, r3
 80244fe:	f7fa fb09 	bl	801eb14 <lv_sw_on>
 8024502:	e005      	b.n	8024510 <SettingsScreen_BluetoothUpdateVal+0x30>
    else lv_sw_off(SbluetoothSwitch, LV_ANIM_ON);
 8024504:	4b08      	ldr	r3, [pc, #32]	; (8024528 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	2101      	movs	r1, #1
 802450a:	4618      	mov	r0, r3
 802450c:	f7fa fb1d 	bl	801eb4a <lv_sw_off>
    SettingsScreen_newBluetoothValController();
 8024510:	f000 f9ac 	bl	802486c <SettingsScreen_newBluetoothValController>
    SbluetoothStatu =val;
 8024514:	4a05      	ldr	r2, [pc, #20]	; (802452c <SettingsScreen_BluetoothUpdateVal+0x4c>)
 8024516:	79fb      	ldrb	r3, [r7, #7]
 8024518:	7013      	strb	r3, [r2, #0]
}
 802451a:	bf00      	nop
 802451c:	3708      	adds	r7, #8
 802451e:	46bd      	mov	sp, r7
 8024520:	bd80      	pop	{r7, pc}
 8024522:	bf00      	nop
 8024524:	20007064 	.word	0x20007064
 8024528:	20007004 	.word	0x20007004
 802452c:	20006ff5 	.word	0x20006ff5

08024530 <SettingsScreen_UnitUpdateVal>:
/**/
void SettingsScreen_UnitUpdateVal(bool val){
 8024530:	b580      	push	{r7, lr}
 8024532:	b082      	sub	sp, #8
 8024534:	af00      	add	r7, sp, #0
 8024536:	4603      	mov	r3, r0
 8024538:	71fb      	strb	r3, [r7, #7]

    if(val)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 802453a:	79fb      	ldrb	r3, [r7, #7]
 802453c:	2b00      	cmp	r3, #0
 802453e:	d006      	beq.n	802454e <SettingsScreen_UnitUpdateVal+0x1e>
 8024540:	4b0a      	ldr	r3, [pc, #40]	; (802456c <SettingsScreen_UnitUpdateVal+0x3c>)
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	2101      	movs	r1, #1
 8024546:	4618      	mov	r0, r3
 8024548:	f7fa fae4 	bl	801eb14 <lv_sw_on>
 802454c:	e005      	b.n	802455a <SettingsScreen_UnitUpdateVal+0x2a>
    else lv_sw_off(unitTypeSwitch, LV_ANIM_ON);
 802454e:	4b07      	ldr	r3, [pc, #28]	; (802456c <SettingsScreen_UnitUpdateVal+0x3c>)
 8024550:	681b      	ldr	r3, [r3, #0]
 8024552:	2101      	movs	r1, #1
 8024554:	4618      	mov	r0, r3
 8024556:	f7fa faf8 	bl	801eb4a <lv_sw_off>
    SettingsScreen_newUnitTypeController();
 802455a:	f000 f9c5 	bl	80248e8 <SettingsScreen_newUnitTypeController>
	SunitType=val;
 802455e:	4a04      	ldr	r2, [pc, #16]	; (8024570 <SettingsScreen_UnitUpdateVal+0x40>)
 8024560:	79fb      	ldrb	r3, [r7, #7]
 8024562:	7013      	strb	r3, [r2, #0]
}
 8024564:	bf00      	nop
 8024566:	3708      	adds	r7, #8
 8024568:	46bd      	mov	sp, r7
 802456a:	bd80      	pop	{r7, pc}
 802456c:	20006ffc 	.word	0x20006ffc
 8024570:	20007066 	.word	0x20007066

08024574 <SettingsScreen_newTimeLblController>:

/*This function using for update set time label*/
void SettingsScreen_newTimeLblController(void){
 8024574:	b580      	push	{r7, lr}
 8024576:	b082      	sub	sp, #8
 8024578:	af02      	add	r7, sp, #8
	switch(StimeSetVal){
 802457a:	4b4f      	ldr	r3, [pc, #316]	; (80246b8 <SettingsScreen_newTimeLblController+0x144>)
 802457c:	781b      	ldrb	r3, [r3, #0]
 802457e:	2b02      	cmp	r3, #2
 8024580:	d029      	beq.n	80245d6 <SettingsScreen_newTimeLblController+0x62>
 8024582:	2b03      	cmp	r3, #3
 8024584:	d04d      	beq.n	8024622 <SettingsScreen_newTimeLblController+0xae>
 8024586:	2b01      	cmp	r3, #1
 8024588:	d171      	bne.n	802466e <SettingsScreen_newTimeLblController+0xfa>
	case 1:
			if(Stheme)
 802458a:	4b4c      	ldr	r3, [pc, #304]	; (80246bc <SettingsScreen_newTimeLblController+0x148>)
 802458c:	781b      	ldrb	r3, [r3, #0]
 802458e:	2b00      	cmp	r3, #0
 8024590:	d010      	beq.n	80245b4 <SettingsScreen_newTimeLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8024592:	4b4b      	ldr	r3, [pc, #300]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 8024594:	781b      	ldrb	r3, [r3, #0]
 8024596:	4619      	mov	r1, r3
 8024598:	4b4a      	ldr	r3, [pc, #296]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 802459a:	781b      	ldrb	r3, [r3, #0]
 802459c:	461a      	mov	r2, r3
 802459e:	4b4a      	ldr	r3, [pc, #296]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 80245a0:	781b      	ldrb	r3, [r3, #0]
 80245a2:	9301      	str	r3, [sp, #4]
 80245a4:	9200      	str	r2, [sp, #0]
 80245a6:	460b      	mov	r3, r1
 80245a8:	4a48      	ldr	r2, [pc, #288]	; (80246cc <SettingsScreen_newTimeLblController+0x158>)
 80245aa:	2140      	movs	r1, #64	; 0x40
 80245ac:	4848      	ldr	r0, [pc, #288]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 80245ae:	f003 fb1f 	bl	8027bf0 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 80245b2:	e06d      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
 80245b4:	4b42      	ldr	r3, [pc, #264]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 80245b6:	781b      	ldrb	r3, [r3, #0]
 80245b8:	4619      	mov	r1, r3
 80245ba:	4b42      	ldr	r3, [pc, #264]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 80245bc:	781b      	ldrb	r3, [r3, #0]
 80245be:	461a      	mov	r2, r3
 80245c0:	4b41      	ldr	r3, [pc, #260]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 80245c2:	781b      	ldrb	r3, [r3, #0]
 80245c4:	9301      	str	r3, [sp, #4]
 80245c6:	9200      	str	r2, [sp, #0]
 80245c8:	460b      	mov	r3, r1
 80245ca:	4a42      	ldr	r2, [pc, #264]	; (80246d4 <SettingsScreen_newTimeLblController+0x160>)
 80245cc:	2140      	movs	r1, #64	; 0x40
 80245ce:	4840      	ldr	r0, [pc, #256]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 80245d0:	f003 fb0e 	bl	8027bf0 <sniprintf>
		break;
 80245d4:	e05c      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
	case 2:
			if(Stheme)
 80245d6:	4b39      	ldr	r3, [pc, #228]	; (80246bc <SettingsScreen_newTimeLblController+0x148>)
 80245d8:	781b      	ldrb	r3, [r3, #0]
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d010      	beq.n	8024600 <SettingsScreen_newTimeLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#",
 80245de:	4b38      	ldr	r3, [pc, #224]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 80245e0:	781b      	ldrb	r3, [r3, #0]
 80245e2:	4619      	mov	r1, r3
 80245e4:	4b37      	ldr	r3, [pc, #220]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 80245e6:	781b      	ldrb	r3, [r3, #0]
 80245e8:	461a      	mov	r2, r3
 80245ea:	4b37      	ldr	r3, [pc, #220]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 80245ec:	781b      	ldrb	r3, [r3, #0]
 80245ee:	9301      	str	r3, [sp, #4]
 80245f0:	9200      	str	r2, [sp, #0]
 80245f2:	460b      	mov	r3, r1
 80245f4:	4a38      	ldr	r2, [pc, #224]	; (80246d8 <SettingsScreen_newTimeLblController+0x164>)
 80245f6:	2140      	movs	r1, #64	; 0x40
 80245f8:	4835      	ldr	r0, [pc, #212]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 80245fa:	f003 faf9 	bl	8027bf0 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 80245fe:	e047      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
 8024600:	4b2f      	ldr	r3, [pc, #188]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 8024602:	781b      	ldrb	r3, [r3, #0]
 8024604:	4619      	mov	r1, r3
 8024606:	4b2f      	ldr	r3, [pc, #188]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 8024608:	781b      	ldrb	r3, [r3, #0]
 802460a:	461a      	mov	r2, r3
 802460c:	4b2e      	ldr	r3, [pc, #184]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 802460e:	781b      	ldrb	r3, [r3, #0]
 8024610:	9301      	str	r3, [sp, #4]
 8024612:	9200      	str	r2, [sp, #0]
 8024614:	460b      	mov	r3, r1
 8024616:	4a31      	ldr	r2, [pc, #196]	; (80246dc <SettingsScreen_newTimeLblController+0x168>)
 8024618:	2140      	movs	r1, #64	; 0x40
 802461a:	482d      	ldr	r0, [pc, #180]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 802461c:	f003 fae8 	bl	8027bf0 <sniprintf>
		break;
 8024620:	e036      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
	case 3:
		if(Stheme)
 8024622:	4b26      	ldr	r3, [pc, #152]	; (80246bc <SettingsScreen_newTimeLblController+0x148>)
 8024624:	781b      	ldrb	r3, [r3, #0]
 8024626:	2b00      	cmp	r3, #0
 8024628:	d010      	beq.n	802464c <SettingsScreen_newTimeLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#",
 802462a:	4b25      	ldr	r3, [pc, #148]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 802462c:	781b      	ldrb	r3, [r3, #0]
 802462e:	4619      	mov	r1, r3
 8024630:	4b24      	ldr	r3, [pc, #144]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 8024632:	781b      	ldrb	r3, [r3, #0]
 8024634:	461a      	mov	r2, r3
 8024636:	4b24      	ldr	r3, [pc, #144]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 8024638:	781b      	ldrb	r3, [r3, #0]
 802463a:	9301      	str	r3, [sp, #4]
 802463c:	9200      	str	r2, [sp, #0]
 802463e:	460b      	mov	r3, r1
 8024640:	4a27      	ldr	r2, [pc, #156]	; (80246e0 <SettingsScreen_newTimeLblController+0x16c>)
 8024642:	2140      	movs	r1, #64	; 0x40
 8024644:	4822      	ldr	r0, [pc, #136]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 8024646:	f003 fad3 	bl	8027bf0 <sniprintf>
					Shours,Sminutes,Sseconds);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 802464a:	e021      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
 802464c:	4b1c      	ldr	r3, [pc, #112]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 802464e:	781b      	ldrb	r3, [r3, #0]
 8024650:	4619      	mov	r1, r3
 8024652:	4b1c      	ldr	r3, [pc, #112]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 8024654:	781b      	ldrb	r3, [r3, #0]
 8024656:	461a      	mov	r2, r3
 8024658:	4b1b      	ldr	r3, [pc, #108]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 802465a:	781b      	ldrb	r3, [r3, #0]
 802465c:	9301      	str	r3, [sp, #4]
 802465e:	9200      	str	r2, [sp, #0]
 8024660:	460b      	mov	r3, r1
 8024662:	4a20      	ldr	r2, [pc, #128]	; (80246e4 <SettingsScreen_newTimeLblController+0x170>)
 8024664:	2140      	movs	r1, #64	; 0x40
 8024666:	481a      	ldr	r0, [pc, #104]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 8024668:	f003 fac2 	bl	8027bf0 <sniprintf>
		break;
 802466c:	e010      	b.n	8024690 <SettingsScreen_newTimeLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 802466e:	4b14      	ldr	r3, [pc, #80]	; (80246c0 <SettingsScreen_newTimeLblController+0x14c>)
 8024670:	781b      	ldrb	r3, [r3, #0]
 8024672:	4619      	mov	r1, r3
 8024674:	4b13      	ldr	r3, [pc, #76]	; (80246c4 <SettingsScreen_newTimeLblController+0x150>)
 8024676:	781b      	ldrb	r3, [r3, #0]
 8024678:	461a      	mov	r2, r3
 802467a:	4b13      	ldr	r3, [pc, #76]	; (80246c8 <SettingsScreen_newTimeLblController+0x154>)
 802467c:	781b      	ldrb	r3, [r3, #0]
 802467e:	9301      	str	r3, [sp, #4]
 8024680:	9200      	str	r2, [sp, #0]
 8024682:	460b      	mov	r3, r1
 8024684:	4a18      	ldr	r2, [pc, #96]	; (80246e8 <SettingsScreen_newTimeLblController+0x174>)
 8024686:	2140      	movs	r1, #64	; 0x40
 8024688:	4811      	ldr	r0, [pc, #68]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 802468a:	f003 fab1 	bl	8027bf0 <sniprintf>
					Shours,Sminutes,Sseconds); break;
 802468e:	bf00      	nop
	}
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 8024690:	4b16      	ldr	r3, [pc, #88]	; (80246ec <SettingsScreen_newTimeLblController+0x178>)
 8024692:	681b      	ldr	r3, [r3, #0]
 8024694:	490e      	ldr	r1, [pc, #56]	; (80246d0 <SettingsScreen_newTimeLblController+0x15c>)
 8024696:	4618      	mov	r0, r3
 8024698:	f7f5 f86e 	bl	8019778 <lv_label_set_text>
	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 802469c:	4b13      	ldr	r3, [pc, #76]	; (80246ec <SettingsScreen_newTimeLblController+0x178>)
 802469e:	6818      	ldr	r0, [r3, #0]
 80246a0:	2328      	movs	r3, #40	; 0x28
 80246a2:	9300      	str	r3, [sp, #0]
 80246a4:	f06f 0313 	mvn.w	r3, #19
 80246a8:	2203      	movs	r2, #3
 80246aa:	2100      	movs	r1, #0
 80246ac:	f7e1 fe1a 	bl	80062e4 <lv_obj_align>

}
 80246b0:	bf00      	nop
 80246b2:	46bd      	mov	sp, r7
 80246b4:	bd80      	pop	{r7, pc}
 80246b6:	bf00      	nop
 80246b8:	2000701d 	.word	0x2000701d
 80246bc:	20007003 	.word	0x20007003
 80246c0:	20007001 	.word	0x20007001
 80246c4:	2000700c 	.word	0x2000700c
 80246c8:	2000701f 	.word	0x2000701f
 80246cc:	0802a0bc 	.word	0x0802a0bc
 80246d0:	20007024 	.word	0x20007024
 80246d4:	0802a0e8 	.word	0x0802a0e8
 80246d8:	0802a114 	.word	0x0802a114
 80246dc:	0802a140 	.word	0x0802a140
 80246e0:	0802a16c 	.word	0x0802a16c
 80246e4:	0802a198 	.word	0x0802a198
 80246e8:	0802a028 	.word	0x0802a028
 80246ec:	20007008 	.word	0x20007008

080246f0 <SettingsScreen_newDateLblController>:
/*This function using for update set date label*/
void SettingsScreen_newDateLblController(void){
 80246f0:	b580      	push	{r7, lr}
 80246f2:	b082      	sub	sp, #8
 80246f4:	af02      	add	r7, sp, #8
	switch(SdateSetVal){
 80246f6:	4b4f      	ldr	r3, [pc, #316]	; (8024834 <SettingsScreen_newDateLblController+0x144>)
 80246f8:	781b      	ldrb	r3, [r3, #0]
 80246fa:	2b02      	cmp	r3, #2
 80246fc:	d029      	beq.n	8024752 <SettingsScreen_newDateLblController+0x62>
 80246fe:	2b03      	cmp	r3, #3
 8024700:	d04d      	beq.n	802479e <SettingsScreen_newDateLblController+0xae>
 8024702:	2b01      	cmp	r3, #1
 8024704:	d171      	bne.n	80247ea <SettingsScreen_newDateLblController+0xfa>
	case 1:
			if(Stheme)
 8024706:	4b4c      	ldr	r3, [pc, #304]	; (8024838 <SettingsScreen_newDateLblController+0x148>)
 8024708:	781b      	ldrb	r3, [r3, #0]
 802470a:	2b00      	cmp	r3, #0
 802470c:	d010      	beq.n	8024730 <SettingsScreen_newDateLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 802470e:	4b4b      	ldr	r3, [pc, #300]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 8024710:	781b      	ldrb	r3, [r3, #0]
 8024712:	4619      	mov	r1, r3
 8024714:	4b4a      	ldr	r3, [pc, #296]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 8024716:	781b      	ldrb	r3, [r3, #0]
 8024718:	461a      	mov	r2, r3
 802471a:	4b4a      	ldr	r3, [pc, #296]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 802471c:	881b      	ldrh	r3, [r3, #0]
 802471e:	9301      	str	r3, [sp, #4]
 8024720:	9200      	str	r2, [sp, #0]
 8024722:	460b      	mov	r3, r1
 8024724:	4a48      	ldr	r2, [pc, #288]	; (8024848 <SettingsScreen_newDateLblController+0x158>)
 8024726:	2140      	movs	r1, #64	; 0x40
 8024728:	4848      	ldr	r0, [pc, #288]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 802472a:	f003 fa61 	bl	8027bf0 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 802472e:	e06d      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8024730:	4b42      	ldr	r3, [pc, #264]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 8024732:	781b      	ldrb	r3, [r3, #0]
 8024734:	4619      	mov	r1, r3
 8024736:	4b42      	ldr	r3, [pc, #264]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 8024738:	781b      	ldrb	r3, [r3, #0]
 802473a:	461a      	mov	r2, r3
 802473c:	4b41      	ldr	r3, [pc, #260]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 802473e:	881b      	ldrh	r3, [r3, #0]
 8024740:	9301      	str	r3, [sp, #4]
 8024742:	9200      	str	r2, [sp, #0]
 8024744:	460b      	mov	r3, r1
 8024746:	4a42      	ldr	r2, [pc, #264]	; (8024850 <SettingsScreen_newDateLblController+0x160>)
 8024748:	2140      	movs	r1, #64	; 0x40
 802474a:	4840      	ldr	r0, [pc, #256]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 802474c:	f003 fa50 	bl	8027bf0 <sniprintf>
		break;
 8024750:	e05c      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
	case 2:
			if(Stheme)
 8024752:	4b39      	ldr	r3, [pc, #228]	; (8024838 <SettingsScreen_newDateLblController+0x148>)
 8024754:	781b      	ldrb	r3, [r3, #0]
 8024756:	2b00      	cmp	r3, #0
 8024758:	d010      	beq.n	802477c <SettingsScreen_newDateLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %04d#",
 802475a:	4b38      	ldr	r3, [pc, #224]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 802475c:	781b      	ldrb	r3, [r3, #0]
 802475e:	4619      	mov	r1, r3
 8024760:	4b37      	ldr	r3, [pc, #220]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 8024762:	781b      	ldrb	r3, [r3, #0]
 8024764:	461a      	mov	r2, r3
 8024766:	4b37      	ldr	r3, [pc, #220]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 8024768:	881b      	ldrh	r3, [r3, #0]
 802476a:	9301      	str	r3, [sp, #4]
 802476c:	9200      	str	r2, [sp, #0]
 802476e:	460b      	mov	r3, r1
 8024770:	4a38      	ldr	r2, [pc, #224]	; (8024854 <SettingsScreen_newDateLblController+0x164>)
 8024772:	2140      	movs	r1, #64	; 0x40
 8024774:	4835      	ldr	r0, [pc, #212]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 8024776:	f003 fa3b 	bl	8027bf0 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 802477a:	e047      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
 802477c:	4b2f      	ldr	r3, [pc, #188]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 802477e:	781b      	ldrb	r3, [r3, #0]
 8024780:	4619      	mov	r1, r3
 8024782:	4b2f      	ldr	r3, [pc, #188]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 8024784:	781b      	ldrb	r3, [r3, #0]
 8024786:	461a      	mov	r2, r3
 8024788:	4b2e      	ldr	r3, [pc, #184]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 802478a:	881b      	ldrh	r3, [r3, #0]
 802478c:	9301      	str	r3, [sp, #4]
 802478e:	9200      	str	r2, [sp, #0]
 8024790:	460b      	mov	r3, r1
 8024792:	4a31      	ldr	r2, [pc, #196]	; (8024858 <SettingsScreen_newDateLblController+0x168>)
 8024794:	2140      	movs	r1, #64	; 0x40
 8024796:	482d      	ldr	r0, [pc, #180]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 8024798:	f003 fa2a 	bl	8027bf0 <sniprintf>
		break;
 802479c:	e036      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
	case 3:
		if(Stheme)
 802479e:	4b26      	ldr	r3, [pc, #152]	; (8024838 <SettingsScreen_newDateLblController+0x148>)
 80247a0:	781b      	ldrb	r3, [r3, #0]
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d010      	beq.n	80247c8 <SettingsScreen_newDateLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %04d#",
 80247a6:	4b25      	ldr	r3, [pc, #148]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 80247a8:	781b      	ldrb	r3, [r3, #0]
 80247aa:	4619      	mov	r1, r3
 80247ac:	4b24      	ldr	r3, [pc, #144]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 80247ae:	781b      	ldrb	r3, [r3, #0]
 80247b0:	461a      	mov	r2, r3
 80247b2:	4b24      	ldr	r3, [pc, #144]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 80247b4:	881b      	ldrh	r3, [r3, #0]
 80247b6:	9301      	str	r3, [sp, #4]
 80247b8:	9200      	str	r2, [sp, #0]
 80247ba:	460b      	mov	r3, r1
 80247bc:	4a27      	ldr	r2, [pc, #156]	; (802485c <SettingsScreen_newDateLblController+0x16c>)
 80247be:	2140      	movs	r1, #64	; 0x40
 80247c0:	4822      	ldr	r0, [pc, #136]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 80247c2:	f003 fa15 	bl	8027bf0 <sniprintf>
				Sdates,Smonths,Syears);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
				Sdates,Smonths,Syears);
		break;
 80247c6:	e021      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
 80247c8:	4b1c      	ldr	r3, [pc, #112]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 80247ca:	781b      	ldrb	r3, [r3, #0]
 80247cc:	4619      	mov	r1, r3
 80247ce:	4b1c      	ldr	r3, [pc, #112]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 80247d0:	781b      	ldrb	r3, [r3, #0]
 80247d2:	461a      	mov	r2, r3
 80247d4:	4b1b      	ldr	r3, [pc, #108]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 80247d6:	881b      	ldrh	r3, [r3, #0]
 80247d8:	9301      	str	r3, [sp, #4]
 80247da:	9200      	str	r2, [sp, #0]
 80247dc:	460b      	mov	r3, r1
 80247de:	4a20      	ldr	r2, [pc, #128]	; (8024860 <SettingsScreen_newDateLblController+0x170>)
 80247e0:	2140      	movs	r1, #64	; 0x40
 80247e2:	481a      	ldr	r0, [pc, #104]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 80247e4:	f003 fa04 	bl	8027bf0 <sniprintf>
		break;
 80247e8:	e010      	b.n	802480c <SettingsScreen_newDateLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 80247ea:	4b14      	ldr	r3, [pc, #80]	; (802483c <SettingsScreen_newDateLblController+0x14c>)
 80247ec:	781b      	ldrb	r3, [r3, #0]
 80247ee:	4619      	mov	r1, r3
 80247f0:	4b13      	ldr	r3, [pc, #76]	; (8024840 <SettingsScreen_newDateLblController+0x150>)
 80247f2:	781b      	ldrb	r3, [r3, #0]
 80247f4:	461a      	mov	r2, r3
 80247f6:	4b13      	ldr	r3, [pc, #76]	; (8024844 <SettingsScreen_newDateLblController+0x154>)
 80247f8:	881b      	ldrh	r3, [r3, #0]
 80247fa:	9301      	str	r3, [sp, #4]
 80247fc:	9200      	str	r2, [sp, #0]
 80247fe:	460b      	mov	r3, r1
 8024800:	4a18      	ldr	r2, [pc, #96]	; (8024864 <SettingsScreen_newDateLblController+0x174>)
 8024802:	2140      	movs	r1, #64	; 0x40
 8024804:	4811      	ldr	r0, [pc, #68]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 8024806:	f003 f9f3 	bl	8027bf0 <sniprintf>
				Sdates,Smonths,Syears); break;
 802480a:	bf00      	nop
	}
	lv_label_set_text(S_DateLbl, settingsBuffer);
 802480c:	4b16      	ldr	r3, [pc, #88]	; (8024868 <SettingsScreen_newDateLblController+0x178>)
 802480e:	681b      	ldr	r3, [r3, #0]
 8024810:	490e      	ldr	r1, [pc, #56]	; (802484c <SettingsScreen_newDateLblController+0x15c>)
 8024812:	4618      	mov	r0, r3
 8024814:	f7f4 ffb0 	bl	8019778 <lv_label_set_text>
	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8024818:	4b13      	ldr	r3, [pc, #76]	; (8024868 <SettingsScreen_newDateLblController+0x178>)
 802481a:	6818      	ldr	r0, [r3, #0]
 802481c:	2350      	movs	r3, #80	; 0x50
 802481e:	9300      	str	r3, [sp, #0]
 8024820:	f06f 0313 	mvn.w	r3, #19
 8024824:	2203      	movs	r2, #3
 8024826:	2100      	movs	r1, #0
 8024828:	f7e1 fd5c 	bl	80062e4 <lv_obj_align>

}
 802482c:	bf00      	nop
 802482e:	46bd      	mov	sp, r7
 8024830:	bd80      	pop	{r7, pc}
 8024832:	bf00      	nop
 8024834:	20006ff4 	.word	0x20006ff4
 8024838:	20007003 	.word	0x20007003
 802483c:	20007000 	.word	0x20007000
 8024840:	2000701e 	.word	0x2000701e
 8024844:	20007014 	.word	0x20007014
 8024848:	0802a1c4 	.word	0x0802a1c4
 802484c:	20007024 	.word	0x20007024
 8024850:	0802a1f0 	.word	0x0802a1f0
 8024854:	0802a21c 	.word	0x0802a21c
 8024858:	0802a248 	.word	0x0802a248
 802485c:	0802a274 	.word	0x0802a274
 8024860:	0802a2a0 	.word	0x0802a2a0
 8024864:	0802a060 	.word	0x0802a060
 8024868:	20007018 	.word	0x20007018

0802486c <SettingsScreen_newBluetoothValController>:
/*This function using for update set bluetooth switch*/
void SettingsScreen_newBluetoothValController(void){
 802486c:	b598      	push	{r3, r4, r7, lr}
 802486e:	af00      	add	r7, sp, #0
	if(SbluetoothSetVal){
 8024870:	4b18      	ldr	r3, [pc, #96]	; (80248d4 <SettingsScreen_newBluetoothValController+0x68>)
 8024872:	781b      	ldrb	r3, [r3, #0]
 8024874:	2b00      	cmp	r3, #0
 8024876:	d00a      	beq.n	802488e <SettingsScreen_newBluetoothValController+0x22>
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 8024878:	4c17      	ldr	r4, [pc, #92]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 802487a:	4818      	ldr	r0, [pc, #96]	; (80248dc <SettingsScreen_newBluetoothValController+0x70>)
 802487c:	f7ff f85a 	bl	8023934 <lv_color_hex>
 8024880:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 8024882:	4c15      	ldr	r4, [pc, #84]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 8024884:	4815      	ldr	r0, [pc, #84]	; (80248dc <SettingsScreen_newBluetoothValController+0x70>)
 8024886:	f7ff f855 	bl	8023934 <lv_color_hex>
 802488a:	80a0      	strh	r0, [r4, #4]
 802488c:	e019      	b.n	80248c2 <SettingsScreen_newBluetoothValController+0x56>
	}else{
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 802488e:	4c12      	ldr	r4, [pc, #72]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 8024890:	2000      	movs	r0, #0
 8024892:	f7ff f84f 	bl	8023934 <lv_color_hex>
 8024896:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8024898:	4c0f      	ldr	r4, [pc, #60]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 802489a:	2000      	movs	r0, #0
 802489c:	f7ff f84a 	bl	8023934 <lv_color_hex>
 80248a0:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 80248a2:	4b0f      	ldr	r3, [pc, #60]	; (80248e0 <SettingsScreen_newBluetoothValController+0x74>)
 80248a4:	781b      	ldrb	r3, [r3, #0]
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d00b      	beq.n	80248c2 <SettingsScreen_newBluetoothValController+0x56>
	    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 80248aa:	4c0b      	ldr	r4, [pc, #44]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 80248ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80248b0:	f7ff f840 	bl	8023934 <lv_color_hex>
 80248b4:	8060      	strh	r0, [r4, #2]
	    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 80248b6:	4c08      	ldr	r4, [pc, #32]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 80248b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80248bc:	f7ff f83a 	bl	8023934 <lv_color_hex>
 80248c0:	80a0      	strh	r0, [r4, #4]
	    }
	}
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 80248c2:	4b08      	ldr	r3, [pc, #32]	; (80248e4 <SettingsScreen_newBluetoothValController+0x78>)
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	4a04      	ldr	r2, [pc, #16]	; (80248d8 <SettingsScreen_newBluetoothValController+0x6c>)
 80248c8:	2101      	movs	r1, #1
 80248ca:	4618      	mov	r0, r3
 80248cc:	f7fa f958 	bl	801eb80 <lv_sw_set_style>
}
 80248d0:	bf00      	nop
 80248d2:	bd98      	pop	{r3, r4, r7, pc}
 80248d4:	20007064 	.word	0x20007064
 80248d8:	200063d8 	.word	0x200063d8
 80248dc:	009fc8ef 	.word	0x009fc8ef
 80248e0:	20007003 	.word	0x20007003
 80248e4:	20007004 	.word	0x20007004

080248e8 <SettingsScreen_newUnitTypeController>:
/*This function using for update set unit switch*/
void SettingsScreen_newUnitTypeController(void){
 80248e8:	b598      	push	{r3, r4, r7, lr}
 80248ea:	af00      	add	r7, sp, #0
	if(SunitSetVal){
 80248ec:	4b18      	ldr	r3, [pc, #96]	; (8024950 <SettingsScreen_newUnitTypeController+0x68>)
 80248ee:	781b      	ldrb	r3, [r3, #0]
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	d00a      	beq.n	802490a <SettingsScreen_newUnitTypeController+0x22>
	    unit_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 80248f4:	4c17      	ldr	r4, [pc, #92]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 80248f6:	4818      	ldr	r0, [pc, #96]	; (8024958 <SettingsScreen_newUnitTypeController+0x70>)
 80248f8:	f7ff f81c 	bl	8023934 <lv_color_hex>
 80248fc:	8060      	strh	r0, [r4, #2]
	    unit_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 80248fe:	4c15      	ldr	r4, [pc, #84]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 8024900:	4815      	ldr	r0, [pc, #84]	; (8024958 <SettingsScreen_newUnitTypeController+0x70>)
 8024902:	f7ff f817 	bl	8023934 <lv_color_hex>
 8024906:	80a0      	strh	r0, [r4, #4]
 8024908:	e019      	b.n	802493e <SettingsScreen_newUnitTypeController+0x56>
	}else{
		unit_indic_style.body.main_color = lv_color_hex(0x000000);
 802490a:	4c12      	ldr	r4, [pc, #72]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 802490c:	2000      	movs	r0, #0
 802490e:	f7ff f811 	bl	8023934 <lv_color_hex>
 8024912:	8060      	strh	r0, [r4, #2]
		unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 8024914:	4c0f      	ldr	r4, [pc, #60]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 8024916:	2000      	movs	r0, #0
 8024918:	f7ff f80c 	bl	8023934 <lv_color_hex>
 802491c:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 802491e:	4b0f      	ldr	r3, [pc, #60]	; (802495c <SettingsScreen_newUnitTypeController+0x74>)
 8024920:	781b      	ldrb	r3, [r3, #0]
 8024922:	2b00      	cmp	r3, #0
 8024924:	d00b      	beq.n	802493e <SettingsScreen_newUnitTypeController+0x56>
	    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8024926:	4c0b      	ldr	r4, [pc, #44]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 8024928:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802492c:	f7ff f802 	bl	8023934 <lv_color_hex>
 8024930:	8060      	strh	r0, [r4, #2]
	    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8024932:	4c08      	ldr	r4, [pc, #32]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 8024934:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024938:	f7fe fffc 	bl	8023934 <lv_color_hex>
 802493c:	80a0      	strh	r0, [r4, #4]
	    }
	}

    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 802493e:	4b08      	ldr	r3, [pc, #32]	; (8024960 <SettingsScreen_newUnitTypeController+0x78>)
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	4a04      	ldr	r2, [pc, #16]	; (8024954 <SettingsScreen_newUnitTypeController+0x6c>)
 8024944:	2101      	movs	r1, #1
 8024946:	4618      	mov	r0, r3
 8024948:	f7fa f91a 	bl	801eb80 <lv_sw_set_style>
}
 802494c:	bf00      	nop
 802494e:	bd98      	pop	{r3, r4, r7, pc}
 8024950:	20007002 	.word	0x20007002
 8024954:	20006414 	.word	0x20006414
 8024958:	009fc8ef 	.word	0x009fc8ef
 802495c:	20007003 	.word	0x20007003
 8024960:	20006ffc 	.word	0x20006ffc

08024964 <SettingsScreen_SetNewValues>:



//Setter Getter Functions

void SettingsScreen_SetNewValues(void){
 8024964:	b580      	push	{r7, lr}
 8024966:	af00      	add	r7, sp, #0
	  tos_RTC_SetTime(S_hrtc,Shours,Sminutes,Sseconds);
 8024968:	4b10      	ldr	r3, [pc, #64]	; (80249ac <SettingsScreen_SetNewValues+0x48>)
 802496a:	6818      	ldr	r0, [r3, #0]
 802496c:	4b10      	ldr	r3, [pc, #64]	; (80249b0 <SettingsScreen_SetNewValues+0x4c>)
 802496e:	7819      	ldrb	r1, [r3, #0]
 8024970:	4b10      	ldr	r3, [pc, #64]	; (80249b4 <SettingsScreen_SetNewValues+0x50>)
 8024972:	781a      	ldrb	r2, [r3, #0]
 8024974:	4b10      	ldr	r3, [pc, #64]	; (80249b8 <SettingsScreen_SetNewValues+0x54>)
 8024976:	781b      	ldrb	r3, [r3, #0]
 8024978:	f002 fb06 	bl	8026f88 <tos_RTC_SetTime>
	  tos_RTC_SetDate(S_hrtc,(Syears-2000),Smonths,Sdates);
 802497c:	4b0b      	ldr	r3, [pc, #44]	; (80249ac <SettingsScreen_SetNewValues+0x48>)
 802497e:	6818      	ldr	r0, [r3, #0]
 8024980:	4b0e      	ldr	r3, [pc, #56]	; (80249bc <SettingsScreen_SetNewValues+0x58>)
 8024982:	881b      	ldrh	r3, [r3, #0]
 8024984:	b2db      	uxtb	r3, r3
 8024986:	3330      	adds	r3, #48	; 0x30
 8024988:	b2d9      	uxtb	r1, r3
 802498a:	4b0d      	ldr	r3, [pc, #52]	; (80249c0 <SettingsScreen_SetNewValues+0x5c>)
 802498c:	781a      	ldrb	r2, [r3, #0]
 802498e:	4b0d      	ldr	r3, [pc, #52]	; (80249c4 <SettingsScreen_SetNewValues+0x60>)
 8024990:	781b      	ldrb	r3, [r3, #0]
 8024992:	f002 fb1b 	bl	8026fcc <tos_RTC_SetDate>
	  tos_BluetoothSetStepsVal(SbluetoothStatu,SunitType);
 8024996:	4b0c      	ldr	r3, [pc, #48]	; (80249c8 <SettingsScreen_SetNewValues+0x64>)
 8024998:	781b      	ldrb	r3, [r3, #0]
 802499a:	461a      	mov	r2, r3
 802499c:	4b0b      	ldr	r3, [pc, #44]	; (80249cc <SettingsScreen_SetNewValues+0x68>)
 802499e:	781b      	ldrb	r3, [r3, #0]
 80249a0:	4619      	mov	r1, r3
 80249a2:	4610      	mov	r0, r2
 80249a4:	f001 fe88 	bl	80266b8 <tos_BluetoothSetStepsVal>
}
 80249a8:	bf00      	nop
 80249aa:	bd80      	pop	{r7, pc}
 80249ac:	20007020 	.word	0x20007020
 80249b0:	20007001 	.word	0x20007001
 80249b4:	2000700c 	.word	0x2000700c
 80249b8:	2000701f 	.word	0x2000701f
 80249bc:	20007014 	.word	0x20007014
 80249c0:	2000701e 	.word	0x2000701e
 80249c4:	20007000 	.word	0x20007000
 80249c8:	20006ff5 	.word	0x20006ff5
 80249cc:	20007066 	.word	0x20007066

080249d0 <SettingsScreen_SetTime>:

void SettingsScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 80249d0:	b480      	push	{r7}
 80249d2:	b083      	sub	sp, #12
 80249d4:	af00      	add	r7, sp, #0
 80249d6:	4603      	mov	r3, r0
 80249d8:	71fb      	strb	r3, [r7, #7]
 80249da:	460b      	mov	r3, r1
 80249dc:	71bb      	strb	r3, [r7, #6]
 80249de:	4613      	mov	r3, r2
 80249e0:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 80249e2:	4b0b      	ldr	r3, [pc, #44]	; (8024a10 <SettingsScreen_SetTime+0x40>)
 80249e4:	781b      	ldrb	r3, [r3, #0]
 80249e6:	f083 0301 	eor.w	r3, r3, #1
 80249ea:	b2db      	uxtb	r3, r3
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	d008      	beq.n	8024a02 <SettingsScreen_SetTime+0x32>
		Shours = getHours;
 80249f0:	4a08      	ldr	r2, [pc, #32]	; (8024a14 <SettingsScreen_SetTime+0x44>)
 80249f2:	79fb      	ldrb	r3, [r7, #7]
 80249f4:	7013      	strb	r3, [r2, #0]
		Sminutes = getMinutes;
 80249f6:	4a08      	ldr	r2, [pc, #32]	; (8024a18 <SettingsScreen_SetTime+0x48>)
 80249f8:	79bb      	ldrb	r3, [r7, #6]
 80249fa:	7013      	strb	r3, [r2, #0]
		Sseconds = getSeconds;
 80249fc:	4a07      	ldr	r2, [pc, #28]	; (8024a1c <SettingsScreen_SetTime+0x4c>)
 80249fe:	797b      	ldrb	r3, [r7, #5]
 8024a00:	7013      	strb	r3, [r2, #0]
	}
}
 8024a02:	bf00      	nop
 8024a04:	370c      	adds	r7, #12
 8024a06:	46bd      	mov	sp, r7
 8024a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a0c:	4770      	bx	lr
 8024a0e:	bf00      	nop
 8024a10:	2000701c 	.word	0x2000701c
 8024a14:	20007001 	.word	0x20007001
 8024a18:	2000700c 	.word	0x2000700c
 8024a1c:	2000701f 	.word	0x2000701f

08024a20 <SettingsScreen_SetDate>:
void SettingsScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate) {
 8024a20:	b480      	push	{r7}
 8024a22:	b083      	sub	sp, #12
 8024a24:	af00      	add	r7, sp, #0
 8024a26:	4603      	mov	r3, r0
 8024a28:	71fb      	strb	r3, [r7, #7]
 8024a2a:	460b      	mov	r3, r1
 8024a2c:	71bb      	strb	r3, [r7, #6]
 8024a2e:	4613      	mov	r3, r2
 8024a30:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 8024a32:	4b0d      	ldr	r3, [pc, #52]	; (8024a68 <SettingsScreen_SetDate+0x48>)
 8024a34:	781b      	ldrb	r3, [r3, #0]
 8024a36:	f083 0301 	eor.w	r3, r3, #1
 8024a3a:	b2db      	uxtb	r3, r3
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d00c      	beq.n	8024a5a <SettingsScreen_SetDate+0x3a>
		Syears =getYear+2000;
 8024a40:	79fb      	ldrb	r3, [r7, #7]
 8024a42:	b29b      	uxth	r3, r3
 8024a44:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8024a48:	b29a      	uxth	r2, r3
 8024a4a:	4b08      	ldr	r3, [pc, #32]	; (8024a6c <SettingsScreen_SetDate+0x4c>)
 8024a4c:	801a      	strh	r2, [r3, #0]
		Smonths = getMonth;
 8024a4e:	4a08      	ldr	r2, [pc, #32]	; (8024a70 <SettingsScreen_SetDate+0x50>)
 8024a50:	79bb      	ldrb	r3, [r7, #6]
 8024a52:	7013      	strb	r3, [r2, #0]
		Sdates = getDate;
 8024a54:	4a07      	ldr	r2, [pc, #28]	; (8024a74 <SettingsScreen_SetDate+0x54>)
 8024a56:	797b      	ldrb	r3, [r7, #5]
 8024a58:	7013      	strb	r3, [r2, #0]
	}
}
 8024a5a:	bf00      	nop
 8024a5c:	370c      	adds	r7, #12
 8024a5e:	46bd      	mov	sp, r7
 8024a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a64:	4770      	bx	lr
 8024a66:	bf00      	nop
 8024a68:	2000701c 	.word	0x2000701c
 8024a6c:	20007014 	.word	0x20007014
 8024a70:	2000701e 	.word	0x2000701e
 8024a74:	20007000 	.word	0x20007000

08024a78 <SettingsScreen_isSettingsOpen>:
	if(!isMenuOpen)SbluetoothStatu=statu;
}
void SettingsScreen_SetUnitType(bool val){
	if(!isMenuOpen)SunitType=val;
}
bool SettingsScreen_isSettingsOpen(void){
 8024a78:	b480      	push	{r7}
 8024a7a:	af00      	add	r7, sp, #0
	return isMenuOpen;
 8024a7c:	4b03      	ldr	r3, [pc, #12]	; (8024a8c <SettingsScreen_isSettingsOpen+0x14>)
 8024a7e:	781b      	ldrb	r3, [r3, #0]
}
 8024a80:	4618      	mov	r0, r3
 8024a82:	46bd      	mov	sp, r7
 8024a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a88:	4770      	bx	lr
 8024a8a:	bf00      	nop
 8024a8c:	2000701c 	.word	0x2000701c

08024a90 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024a90:	b580      	push	{r7, lr}
 8024a92:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8024a94:	f7ed fd88 	bl	80125a8 <lv_disp_get_default>
 8024a98:	4603      	mov	r3, r0
 8024a9a:	4618      	mov	r0, r3
 8024a9c:	f7e0 fa50 	bl	8004f40 <lv_disp_get_scr_act>
 8024aa0:	4603      	mov	r3, r0
}
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	bd80      	pop	{r7, pc}

08024aa6 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8024aa6:	b580      	push	{r7, lr}
 8024aa8:	b084      	sub	sp, #16
 8024aaa:	af00      	add	r7, sp, #0
 8024aac:	60f8      	str	r0, [r7, #12]
 8024aae:	460b      	mov	r3, r1
 8024ab0:	607a      	str	r2, [r7, #4]
 8024ab2:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8024ab4:	6879      	ldr	r1, [r7, #4]
 8024ab6:	68f8      	ldr	r0, [r7, #12]
 8024ab8:	f7e2 f8b9 	bl	8006c2e <lv_obj_set_style>
}
 8024abc:	bf00      	nop
 8024abe:	3710      	adds	r7, #16
 8024ac0:	46bd      	mov	sp, r7
 8024ac2:	bd80      	pop	{r7, pc}

08024ac4 <tos_SleepModeScreen_Init>:
void SMS_digitalTimePrintTheScreen(void);
void SMS_batteryValueUpdater(void);
void SMS_bluetoothStatusUpdater(void);
void SMS_Updater(lv_task_t * t);

void tos_SleepModeScreen_Init(void) {
 8024ac4:	b580      	push	{r7, lr}
 8024ac6:	b082      	sub	sp, #8
 8024ac8:	af02      	add	r7, sp, #8
	slptaskController=true;
 8024aca:	4ba1      	ldr	r3, [pc, #644]	; (8024d50 <tos_SleepModeScreen_Init+0x28c>)
 8024acc:	2201      	movs	r2, #1
 8024ace:	701a      	strb	r2, [r3, #0]
	static lv_style_t slpStyle_screen;
	lv_style_copy(&slpStyle_screen, &lv_style_plain);
 8024ad0:	49a0      	ldr	r1, [pc, #640]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024ad2:	48a1      	ldr	r0, [pc, #644]	; (8024d58 <tos_SleepModeScreen_Init+0x294>)
 8024ad4:	f7e3 fe4a 	bl	800876c <lv_style_copy>
	slpStyle_screen.body.main_color = LV_COLOR_BLACK;
 8024ad8:	4b9f      	ldr	r3, [pc, #636]	; (8024d58 <tos_SleepModeScreen_Init+0x294>)
 8024ada:	2200      	movs	r2, #0
 8024adc:	805a      	strh	r2, [r3, #2]
	slpStyle_screen.body.grad_color = LV_COLOR_BLACK;
 8024ade:	4b9e      	ldr	r3, [pc, #632]	; (8024d58 <tos_SleepModeScreen_Init+0x294>)
 8024ae0:	2200      	movs	r2, #0
 8024ae2:	809a      	strh	r2, [r3, #4]
		lv_obj_set_style(lv_scr_act(), &slpStyle_screen);
 8024ae4:	f7ff ffd4 	bl	8024a90 <lv_scr_act>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	499b      	ldr	r1, [pc, #620]	; (8024d58 <tos_SleepModeScreen_Init+0x294>)
 8024aec:	4618      	mov	r0, r3
 8024aee:	f7e2 f89e 	bl	8006c2e <lv_obj_set_style>

	//Battery
	slpbatteryLbl= lv_label_create(lv_scr_act(), NULL);
 8024af2:	f7ff ffcd 	bl	8024a90 <lv_scr_act>
 8024af6:	4603      	mov	r3, r0
 8024af8:	2100      	movs	r1, #0
 8024afa:	4618      	mov	r0, r3
 8024afc:	f7f4 fd0a 	bl	8019514 <lv_label_create>
 8024b00:	4602      	mov	r2, r0
 8024b02:	4b96      	ldr	r3, [pc, #600]	; (8024d5c <tos_SleepModeScreen_Init+0x298>)
 8024b04:	601a      	str	r2, [r3, #0]
	lv_style_copy(&slpbattery_style, &lv_style_plain);
 8024b06:	4993      	ldr	r1, [pc, #588]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024b08:	4895      	ldr	r0, [pc, #596]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b0a:	f7e3 fe2f 	bl	800876c <lv_style_copy>
	slpbattery_style.text.color = LV_COLOR_GREEN;
 8024b0e:	4a94      	ldr	r2, [pc, #592]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b10:	f892 3020 	ldrb.w	r3, [r2, #32]
 8024b14:	2104      	movs	r1, #4
 8024b16:	f361 0302 	bfi	r3, r1, #0, #3
 8024b1a:	f882 3020 	strb.w	r3, [r2, #32]
 8024b1e:	4a90      	ldr	r2, [pc, #576]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b20:	f892 3020 	ldrb.w	r3, [r2, #32]
 8024b24:	f36f 03c7 	bfc	r3, #3, #5
 8024b28:	f882 3020 	strb.w	r3, [r2, #32]
 8024b2c:	4a8c      	ldr	r2, [pc, #560]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b2e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8024b32:	f36f 0304 	bfc	r3, #0, #5
 8024b36:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8024b3a:	4a89      	ldr	r2, [pc, #548]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b3c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8024b40:	f36f 1347 	bfc	r3, #5, #3
 8024b44:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(slpbatteryLbl, LV_LABEL_STYLE_MAIN, &slpbattery_style);
 8024b48:	4b84      	ldr	r3, [pc, #528]	; (8024d5c <tos_SleepModeScreen_Init+0x298>)
 8024b4a:	681b      	ldr	r3, [r3, #0]
 8024b4c:	4a84      	ldr	r2, [pc, #528]	; (8024d60 <tos_SleepModeScreen_Init+0x29c>)
 8024b4e:	2100      	movs	r1, #0
 8024b50:	4618      	mov	r0, r3
 8024b52:	f7ff ffa8 	bl	8024aa6 <lv_label_set_style>
	lv_label_set_text(slpbatteryLbl, LV_SYMBOL_BATTERY_FULL);
 8024b56:	4b81      	ldr	r3, [pc, #516]	; (8024d5c <tos_SleepModeScreen_Init+0x298>)
 8024b58:	681b      	ldr	r3, [r3, #0]
 8024b5a:	4982      	ldr	r1, [pc, #520]	; (8024d64 <tos_SleepModeScreen_Init+0x2a0>)
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	f7f4 fe0b 	bl	8019778 <lv_label_set_text>
	lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8024b62:	4b7e      	ldr	r3, [pc, #504]	; (8024d5c <tos_SleepModeScreen_Init+0x298>)
 8024b64:	6818      	ldr	r0, [r3, #0]
 8024b66:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024b6a:	9300      	str	r3, [sp, #0]
 8024b6c:	2364      	movs	r3, #100	; 0x64
 8024b6e:	2200      	movs	r2, #0
 8024b70:	2100      	movs	r1, #0
 8024b72:	f7e1 fbb7 	bl	80062e4 <lv_obj_align>

	//Bluetooth
	slpbluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 8024b76:	f7ff ff8b 	bl	8024a90 <lv_scr_act>
 8024b7a:	4603      	mov	r3, r0
 8024b7c:	2100      	movs	r1, #0
 8024b7e:	4618      	mov	r0, r3
 8024b80:	f7f4 fcc8 	bl	8019514 <lv_label_create>
 8024b84:	4602      	mov	r2, r0
 8024b86:	4b78      	ldr	r3, [pc, #480]	; (8024d68 <tos_SleepModeScreen_Init+0x2a4>)
 8024b88:	601a      	str	r2, [r3, #0]
    lv_style_copy(&slpbluetooth_style, &lv_style_plain);
 8024b8a:	4972      	ldr	r1, [pc, #456]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024b8c:	4877      	ldr	r0, [pc, #476]	; (8024d6c <tos_SleepModeScreen_Init+0x2a8>)
 8024b8e:	f7e3 fded 	bl	800876c <lv_style_copy>
    slpbluetooth_style.text.color = LV_COLOR_WHITE;
 8024b92:	4a76      	ldr	r2, [pc, #472]	; (8024d6c <tos_SleepModeScreen_Init+0x2a8>)
 8024b94:	4b76      	ldr	r3, [pc, #472]	; (8024d70 <tos_SleepModeScreen_Init+0x2ac>)
 8024b96:	881b      	ldrh	r3, [r3, #0]
 8024b98:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(slpbluetoothLbl, LV_LABEL_STYLE_MAIN, &slpbluetooth_style);
 8024b9a:	4b73      	ldr	r3, [pc, #460]	; (8024d68 <tos_SleepModeScreen_Init+0x2a4>)
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	4a73      	ldr	r2, [pc, #460]	; (8024d6c <tos_SleepModeScreen_Init+0x2a8>)
 8024ba0:	2100      	movs	r1, #0
 8024ba2:	4618      	mov	r0, r3
 8024ba4:	f7ff ff7f 	bl	8024aa6 <lv_label_set_style>
	lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8024ba8:	4b6f      	ldr	r3, [pc, #444]	; (8024d68 <tos_SleepModeScreen_Init+0x2a4>)
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	4971      	ldr	r1, [pc, #452]	; (8024d74 <tos_SleepModeScreen_Init+0x2b0>)
 8024bae:	4618      	mov	r0, r3
 8024bb0:	f7f4 fde2 	bl	8019778 <lv_label_set_text>
	lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8024bb4:	4b6c      	ldr	r3, [pc, #432]	; (8024d68 <tos_SleepModeScreen_Init+0x2a4>)
 8024bb6:	6818      	ldr	r0, [r3, #0]
 8024bb8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024bbc:	9300      	str	r3, [sp, #0]
 8024bbe:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024bc2:	2200      	movs	r2, #0
 8024bc4:	2100      	movs	r1, #0
 8024bc6:	f7e1 fb8d 	bl	80062e4 <lv_obj_align>

	//Digital Clock
		static lv_style_t slpdClock_style,slpdDate_style,slpweekD_style;
				lv_style_copy(&slpdClock_style, &lv_style_plain);
 8024bca:	4962      	ldr	r1, [pc, #392]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024bcc:	486a      	ldr	r0, [pc, #424]	; (8024d78 <tos_SleepModeScreen_Init+0x2b4>)
 8024bce:	f7e3 fdcd 	bl	800876c <lv_style_copy>
				slpdClock_style.text.font =&digital_font_for_number_65;
 8024bd2:	4b69      	ldr	r3, [pc, #420]	; (8024d78 <tos_SleepModeScreen_Init+0x2b4>)
 8024bd4:	4a69      	ldr	r2, [pc, #420]	; (8024d7c <tos_SleepModeScreen_Init+0x2b8>)
 8024bd6:	625a      	str	r2, [r3, #36]	; 0x24
				slpdClock_style.text.color= LV_COLOR_SILVER;
 8024bd8:	4a67      	ldr	r2, [pc, #412]	; (8024d78 <tos_SleepModeScreen_Init+0x2b4>)
 8024bda:	4b69      	ldr	r3, [pc, #420]	; (8024d80 <tos_SleepModeScreen_Init+0x2bc>)
 8024bdc:	881b      	ldrh	r3, [r3, #0]
 8024bde:	8413      	strh	r3, [r2, #32]
			    lv_style_copy(&slpdDate_style, &lv_style_plain);
 8024be0:	495c      	ldr	r1, [pc, #368]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024be2:	4868      	ldr	r0, [pc, #416]	; (8024d84 <tos_SleepModeScreen_Init+0x2c0>)
 8024be4:	f7e3 fdc2 	bl	800876c <lv_style_copy>
			    slpdDate_style.text.font =&digital_font_for_number_30;
 8024be8:	4b66      	ldr	r3, [pc, #408]	; (8024d84 <tos_SleepModeScreen_Init+0x2c0>)
 8024bea:	4a67      	ldr	r2, [pc, #412]	; (8024d88 <tos_SleepModeScreen_Init+0x2c4>)
 8024bec:	625a      	str	r2, [r3, #36]	; 0x24
			    slpdDate_style.text.color= LV_COLOR_SILVER;
 8024bee:	4a65      	ldr	r2, [pc, #404]	; (8024d84 <tos_SleepModeScreen_Init+0x2c0>)
 8024bf0:	4b63      	ldr	r3, [pc, #396]	; (8024d80 <tos_SleepModeScreen_Init+0x2bc>)
 8024bf2:	881b      	ldrh	r3, [r3, #0]
 8024bf4:	8413      	strh	r3, [r2, #32]
				lv_style_copy(&slpweekD_style, &lv_style_plain);
 8024bf6:	4957      	ldr	r1, [pc, #348]	; (8024d54 <tos_SleepModeScreen_Init+0x290>)
 8024bf8:	4864      	ldr	r0, [pc, #400]	; (8024d8c <tos_SleepModeScreen_Init+0x2c8>)
 8024bfa:	f7e3 fdb7 	bl	800876c <lv_style_copy>
				slpweekD_style.text.font =&lv_font_roboto_22;
 8024bfe:	4b63      	ldr	r3, [pc, #396]	; (8024d8c <tos_SleepModeScreen_Init+0x2c8>)
 8024c00:	4a63      	ldr	r2, [pc, #396]	; (8024d90 <tos_SleepModeScreen_Init+0x2cc>)
 8024c02:	625a      	str	r2, [r3, #36]	; 0x24
				slpweekD_style.text.color= LV_COLOR_SILVER;
 8024c04:	4a61      	ldr	r2, [pc, #388]	; (8024d8c <tos_SleepModeScreen_Init+0x2c8>)
 8024c06:	4b5e      	ldr	r3, [pc, #376]	; (8024d80 <tos_SleepModeScreen_Init+0x2bc>)
 8024c08:	881b      	ldrh	r3, [r3, #0]
 8024c0a:	8413      	strh	r3, [r2, #32]

				slpdigitalClock = lv_label_create(lv_scr_act(), NULL);
 8024c0c:	f7ff ff40 	bl	8024a90 <lv_scr_act>
 8024c10:	4603      	mov	r3, r0
 8024c12:	2100      	movs	r1, #0
 8024c14:	4618      	mov	r0, r3
 8024c16:	f7f4 fc7d 	bl	8019514 <lv_label_create>
 8024c1a:	4602      	mov	r2, r0
 8024c1c:	4b5d      	ldr	r3, [pc, #372]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c1e:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalClock, LV_LABEL_STYLE_MAIN, &slpdClock_style);
 8024c20:	4b5c      	ldr	r3, [pc, #368]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c22:	681b      	ldr	r3, [r3, #0]
 8024c24:	4a54      	ldr	r2, [pc, #336]	; (8024d78 <tos_SleepModeScreen_Init+0x2b4>)
 8024c26:	2100      	movs	r1, #0
 8024c28:	4618      	mov	r0, r3
 8024c2a:	f7ff ff3c 	bl	8024aa6 <lv_label_set_style>
			    lv_obj_set_width(slpdigitalClock, 200);
 8024c2e:	4b59      	ldr	r3, [pc, #356]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c30:	681b      	ldr	r3, [r3, #0]
 8024c32:	21c8      	movs	r1, #200	; 0xc8
 8024c34:	4618      	mov	r0, r3
 8024c36:	f7e1 fb2b 	bl	8006290 <lv_obj_set_width>
			    snprintf(slpbuffer, 8, "%02d:%02d:%02d", hours,minutes,seconds);
 8024c3a:	4b57      	ldr	r3, [pc, #348]	; (8024d98 <tos_SleepModeScreen_Init+0x2d4>)
 8024c3c:	781b      	ldrb	r3, [r3, #0]
 8024c3e:	4619      	mov	r1, r3
 8024c40:	4b56      	ldr	r3, [pc, #344]	; (8024d9c <tos_SleepModeScreen_Init+0x2d8>)
 8024c42:	781b      	ldrb	r3, [r3, #0]
 8024c44:	461a      	mov	r2, r3
 8024c46:	4b56      	ldr	r3, [pc, #344]	; (8024da0 <tos_SleepModeScreen_Init+0x2dc>)
 8024c48:	781b      	ldrb	r3, [r3, #0]
 8024c4a:	9301      	str	r3, [sp, #4]
 8024c4c:	9200      	str	r2, [sp, #0]
 8024c4e:	460b      	mov	r3, r1
 8024c50:	4a54      	ldr	r2, [pc, #336]	; (8024da4 <tos_SleepModeScreen_Init+0x2e0>)
 8024c52:	2108      	movs	r1, #8
 8024c54:	4854      	ldr	r0, [pc, #336]	; (8024da8 <tos_SleepModeScreen_Init+0x2e4>)
 8024c56:	f002 ffcb 	bl	8027bf0 <sniprintf>
			    lv_label_set_text(slpdigitalClock, slpbuffer);
 8024c5a:	4b4e      	ldr	r3, [pc, #312]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c5c:	681b      	ldr	r3, [r3, #0]
 8024c5e:	4952      	ldr	r1, [pc, #328]	; (8024da8 <tos_SleepModeScreen_Init+0x2e4>)
 8024c60:	4618      	mov	r0, r3
 8024c62:	f7f4 fd89 	bl	8019778 <lv_label_set_text>
			    lv_label_set_align(slpdigitalClock, LV_LABEL_ALIGN_CENTER);
 8024c66:	4b4b      	ldr	r3, [pc, #300]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c68:	681b      	ldr	r3, [r3, #0]
 8024c6a:	2101      	movs	r1, #1
 8024c6c:	4618      	mov	r0, r3
 8024c6e:	f7f4 fe7b 	bl	8019968 <lv_label_set_align>
			    lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 8024c72:	4b48      	ldr	r3, [pc, #288]	; (8024d94 <tos_SleepModeScreen_Init+0x2d0>)
 8024c74:	6818      	ldr	r0, [r3, #0]
 8024c76:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024c7a:	9300      	str	r3, [sp, #0]
 8024c7c:	2300      	movs	r3, #0
 8024c7e:	2200      	movs	r2, #0
 8024c80:	2100      	movs	r1, #0
 8024c82:	f7e1 fb2f 	bl	80062e4 <lv_obj_align>

			   //Digital Date
			    dateTmp=date;
 8024c86:	4b49      	ldr	r3, [pc, #292]	; (8024dac <tos_SleepModeScreen_Init+0x2e8>)
 8024c88:	781a      	ldrb	r2, [r3, #0]
 8024c8a:	4b49      	ldr	r3, [pc, #292]	; (8024db0 <tos_SleepModeScreen_Init+0x2ec>)
 8024c8c:	701a      	strb	r2, [r3, #0]
			    slpdigitalDate = lv_label_create(lv_scr_act(), NULL);
 8024c8e:	f7ff feff 	bl	8024a90 <lv_scr_act>
 8024c92:	4603      	mov	r3, r0
 8024c94:	2100      	movs	r1, #0
 8024c96:	4618      	mov	r0, r3
 8024c98:	f7f4 fc3c 	bl	8019514 <lv_label_create>
 8024c9c:	4602      	mov	r2, r0
 8024c9e:	4b45      	ldr	r3, [pc, #276]	; (8024db4 <tos_SleepModeScreen_Init+0x2f0>)
 8024ca0:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalDate, LV_LABEL_STYLE_MAIN, &slpdDate_style);
 8024ca2:	4b44      	ldr	r3, [pc, #272]	; (8024db4 <tos_SleepModeScreen_Init+0x2f0>)
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	4a37      	ldr	r2, [pc, #220]	; (8024d84 <tos_SleepModeScreen_Init+0x2c0>)
 8024ca8:	2100      	movs	r1, #0
 8024caa:	4618      	mov	r0, r3
 8024cac:	f7ff fefb 	bl	8024aa6 <lv_label_set_style>
		    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8024cb0:	4b3e      	ldr	r3, [pc, #248]	; (8024dac <tos_SleepModeScreen_Init+0x2e8>)
 8024cb2:	781b      	ldrb	r3, [r3, #0]
 8024cb4:	4619      	mov	r1, r3
 8024cb6:	4b40      	ldr	r3, [pc, #256]	; (8024db8 <tos_SleepModeScreen_Init+0x2f4>)
 8024cb8:	781b      	ldrb	r3, [r3, #0]
 8024cba:	461a      	mov	r2, r3
 8024cbc:	4b3f      	ldr	r3, [pc, #252]	; (8024dbc <tos_SleepModeScreen_Init+0x2f8>)
 8024cbe:	881b      	ldrh	r3, [r3, #0]
 8024cc0:	9301      	str	r3, [sp, #4]
 8024cc2:	9200      	str	r2, [sp, #0]
 8024cc4:	460b      	mov	r3, r1
 8024cc6:	4a3e      	ldr	r2, [pc, #248]	; (8024dc0 <tos_SleepModeScreen_Init+0x2fc>)
 8024cc8:	2110      	movs	r1, #16
 8024cca:	4837      	ldr	r0, [pc, #220]	; (8024da8 <tos_SleepModeScreen_Init+0x2e4>)
 8024ccc:	f002 ff90 	bl	8027bf0 <sniprintf>
				lv_label_set_text(slpdigitalDate, slpbuffer);
 8024cd0:	4b38      	ldr	r3, [pc, #224]	; (8024db4 <tos_SleepModeScreen_Init+0x2f0>)
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	4934      	ldr	r1, [pc, #208]	; (8024da8 <tos_SleepModeScreen_Init+0x2e4>)
 8024cd6:	4618      	mov	r0, r3
 8024cd8:	f7f4 fd4e 	bl	8019778 <lv_label_set_text>
			    lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8024cdc:	4b35      	ldr	r3, [pc, #212]	; (8024db4 <tos_SleepModeScreen_Init+0x2f0>)
 8024cde:	6818      	ldr	r0, [r3, #0]
 8024ce0:	230a      	movs	r3, #10
 8024ce2:	9300      	str	r3, [sp, #0]
 8024ce4:	2300      	movs	r3, #0
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	2100      	movs	r1, #0
 8024cea:	f7e1 fafb 	bl	80062e4 <lv_obj_align>

			    //Week Day
			    slpweekDay = lv_label_create(lv_scr_act(), NULL);
 8024cee:	f7ff fecf 	bl	8024a90 <lv_scr_act>
 8024cf2:	4603      	mov	r3, r0
 8024cf4:	2100      	movs	r1, #0
 8024cf6:	4618      	mov	r0, r3
 8024cf8:	f7f4 fc0c 	bl	8019514 <lv_label_create>
 8024cfc:	4602      	mov	r2, r0
 8024cfe:	4b31      	ldr	r3, [pc, #196]	; (8024dc4 <tos_SleepModeScreen_Init+0x300>)
 8024d00:	601a      	str	r2, [r3, #0]
			    lv_obj_set_width(slpweekDay, 150);
 8024d02:	4b30      	ldr	r3, [pc, #192]	; (8024dc4 <tos_SleepModeScreen_Init+0x300>)
 8024d04:	681b      	ldr	r3, [r3, #0]
 8024d06:	2196      	movs	r1, #150	; 0x96
 8024d08:	4618      	mov	r0, r3
 8024d0a:	f7e1 fac1 	bl	8006290 <lv_obj_set_width>
			    lv_label_set_style(slpweekDay, LV_LABEL_STYLE_MAIN, &slpweekD_style);
 8024d0e:	4b2d      	ldr	r3, [pc, #180]	; (8024dc4 <tos_SleepModeScreen_Init+0x300>)
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	4a1e      	ldr	r2, [pc, #120]	; (8024d8c <tos_SleepModeScreen_Init+0x2c8>)
 8024d14:	2100      	movs	r1, #0
 8024d16:	4618      	mov	r0, r3
 8024d18:	f7ff fec5 	bl	8024aa6 <lv_label_set_style>
			    lv_label_set_text(slpweekDay,slpweekDayStr);
 8024d1c:	4b29      	ldr	r3, [pc, #164]	; (8024dc4 <tos_SleepModeScreen_Init+0x300>)
 8024d1e:	681a      	ldr	r2, [r3, #0]
 8024d20:	4b29      	ldr	r3, [pc, #164]	; (8024dc8 <tos_SleepModeScreen_Init+0x304>)
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	4619      	mov	r1, r3
 8024d26:	4610      	mov	r0, r2
 8024d28:	f7f4 fd26 	bl	8019778 <lv_label_set_text>
			    lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 8024d2c:	4b25      	ldr	r3, [pc, #148]	; (8024dc4 <tos_SleepModeScreen_Init+0x300>)
 8024d2e:	6818      	ldr	r0, [r3, #0]
 8024d30:	2323      	movs	r3, #35	; 0x23
 8024d32:	9300      	str	r3, [sp, #0]
 8024d34:	2300      	movs	r3, #0
 8024d36:	2200      	movs	r2, #0
 8024d38:	2100      	movs	r1, #0
 8024d3a:	f7e1 fad3 	bl	80062e4 <lv_obj_align>
				lv_task_create(SMS_Updater, 250, _LV_TASK_PRIO_NUM, NULL);
 8024d3e:	2300      	movs	r3, #0
 8024d40:	2206      	movs	r2, #6
 8024d42:	21fa      	movs	r1, #250	; 0xfa
 8024d44:	4821      	ldr	r0, [pc, #132]	; (8024dcc <tos_SleepModeScreen_Init+0x308>)
 8024d46:	f7ef f873 	bl	8013e30 <lv_task_create>
}
 8024d4a:	bf00      	nop
 8024d4c:	46bd      	mov	sp, r7
 8024d4e:	bd80      	pop	{r7, pc}
 8024d50:	200070f4 	.word	0x200070f4
 8024d54:	20006c68 	.word	0x20006c68
 8024d58:	2000657c 	.word	0x2000657c
 8024d5c:	200070f8 	.word	0x200070f8
 8024d60:	200070b8 	.word	0x200070b8
 8024d64:	0802a2cc 	.word	0x0802a2cc
 8024d68:	200070b0 	.word	0x200070b0
 8024d6c:	20007074 	.word	0x20007074
 8024d70:	0802a2f4 	.word	0x0802a2f4
 8024d74:	0802a2d0 	.word	0x0802a2d0
 8024d78:	200065b8 	.word	0x200065b8
 8024d7c:	20002818 	.word	0x20002818
 8024d80:	0802a2f8 	.word	0x0802a2f8
 8024d84:	200065f4 	.word	0x200065f4
 8024d88:	200027e8 	.word	0x200027e8
 8024d8c:	20006630 	.word	0x20006630
 8024d90:	200017c0 	.word	0x200017c0
 8024d94:	2000706c 	.word	0x2000706c
 8024d98:	20006ee9 	.word	0x20006ee9
 8024d9c:	20006ee8 	.word	0x20006ee8
 8024da0:	20006ed8 	.word	0x20006ed8
 8024da4:	0802a2d4 	.word	0x0802a2d4
 8024da8:	20007104 	.word	0x20007104
 8024dac:	200073b4 	.word	0x200073b4
 8024db0:	20006e00 	.word	0x20006e00
 8024db4:	20007068 	.word	0x20007068
 8024db8:	20006e18 	.word	0x20006e18
 8024dbc:	20006eda 	.word	0x20006eda
 8024dc0:	0802a2e4 	.word	0x0802a2e4
 8024dc4:	200070b4 	.word	0x200070b4
 8024dc8:	20007114 	.word	0x20007114
 8024dcc:	08024dd1 	.word	0x08024dd1

08024dd0 <SMS_Updater>:
/*This function using for update all updater functions*/
void SMS_Updater(lv_task_t *t){
 8024dd0:	b580      	push	{r7, lr}
 8024dd2:	b082      	sub	sp, #8
 8024dd4:	af00      	add	r7, sp, #0
 8024dd6:	6078      	str	r0, [r7, #4]
	if(slptaskController){
 8024dd8:	4b08      	ldr	r3, [pc, #32]	; (8024dfc <SMS_Updater+0x2c>)
 8024dda:	781b      	ldrb	r3, [r3, #0]
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d006      	beq.n	8024dee <SMS_Updater+0x1e>
		SMS_batteryValueUpdater();
 8024de0:	f000 f88a 	bl	8024ef8 <SMS_batteryValueUpdater>
		SMS_bluetoothStatusUpdater();
 8024de4:	f000 f8ac 	bl	8024f40 <SMS_bluetoothStatusUpdater>
		SMS_digitalTimePrintTheScreen();
 8024de8:	f000 f80a 	bl	8024e00 <SMS_digitalTimePrintTheScreen>
	}else lv_task_del(t);
}
 8024dec:	e002      	b.n	8024df4 <SMS_Updater+0x24>
	}else lv_task_del(t);
 8024dee:	6878      	ldr	r0, [r7, #4]
 8024df0:	f7ef f856 	bl	8013ea0 <lv_task_del>
}
 8024df4:	bf00      	nop
 8024df6:	3708      	adds	r7, #8
 8024df8:	46bd      	mov	sp, r7
 8024dfa:	bd80      	pop	{r7, pc}
 8024dfc:	200070f4 	.word	0x200070f4

08024e00 <SMS_digitalTimePrintTheScreen>:
/* This function using for digital clock print to screen*/
void SMS_digitalTimePrintTheScreen(void){
 8024e00:	b580      	push	{r7, lr}
 8024e02:	b082      	sub	sp, #8
 8024e04:	af02      	add	r7, sp, #8
		snprintf(slpbuffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 8024e06:	4b2e      	ldr	r3, [pc, #184]	; (8024ec0 <SMS_digitalTimePrintTheScreen+0xc0>)
 8024e08:	781b      	ldrb	r3, [r3, #0]
 8024e0a:	4619      	mov	r1, r3
 8024e0c:	4b2d      	ldr	r3, [pc, #180]	; (8024ec4 <SMS_digitalTimePrintTheScreen+0xc4>)
 8024e0e:	781b      	ldrb	r3, [r3, #0]
 8024e10:	461a      	mov	r2, r3
 8024e12:	4b2d      	ldr	r3, [pc, #180]	; (8024ec8 <SMS_digitalTimePrintTheScreen+0xc8>)
 8024e14:	781b      	ldrb	r3, [r3, #0]
 8024e16:	9301      	str	r3, [sp, #4]
 8024e18:	9200      	str	r2, [sp, #0]
 8024e1a:	460b      	mov	r3, r1
 8024e1c:	4a2b      	ldr	r2, [pc, #172]	; (8024ecc <SMS_digitalTimePrintTheScreen+0xcc>)
 8024e1e:	2110      	movs	r1, #16
 8024e20:	482b      	ldr	r0, [pc, #172]	; (8024ed0 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e22:	f002 fee5 	bl	8027bf0 <sniprintf>
		    lv_label_set_text(slpdigitalClock, slpbuffer);
 8024e26:	4b2b      	ldr	r3, [pc, #172]	; (8024ed4 <SMS_digitalTimePrintTheScreen+0xd4>)
 8024e28:	681b      	ldr	r3, [r3, #0]
 8024e2a:	4929      	ldr	r1, [pc, #164]	; (8024ed0 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e2c:	4618      	mov	r0, r3
 8024e2e:	f7f4 fca3 	bl	8019778 <lv_label_set_text>
			lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 8024e32:	4b28      	ldr	r3, [pc, #160]	; (8024ed4 <SMS_digitalTimePrintTheScreen+0xd4>)
 8024e34:	6818      	ldr	r0, [r3, #0]
 8024e36:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024e3a:	9300      	str	r3, [sp, #0]
 8024e3c:	2300      	movs	r3, #0
 8024e3e:	2200      	movs	r2, #0
 8024e40:	2100      	movs	r1, #0
 8024e42:	f7e1 fa4f 	bl	80062e4 <lv_obj_align>
				if(dateTmp!=date){
 8024e46:	4b24      	ldr	r3, [pc, #144]	; (8024ed8 <SMS_digitalTimePrintTheScreen+0xd8>)
 8024e48:	781a      	ldrb	r2, [r3, #0]
 8024e4a:	4b24      	ldr	r3, [pc, #144]	; (8024edc <SMS_digitalTimePrintTheScreen+0xdc>)
 8024e4c:	781b      	ldrb	r3, [r3, #0]
 8024e4e:	429a      	cmp	r2, r3
 8024e50:	d033      	beq.n	8024eba <SMS_digitalTimePrintTheScreen+0xba>
					 //Digital Date
					    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8024e52:	4b22      	ldr	r3, [pc, #136]	; (8024edc <SMS_digitalTimePrintTheScreen+0xdc>)
 8024e54:	781b      	ldrb	r3, [r3, #0]
 8024e56:	4619      	mov	r1, r3
 8024e58:	4b21      	ldr	r3, [pc, #132]	; (8024ee0 <SMS_digitalTimePrintTheScreen+0xe0>)
 8024e5a:	781b      	ldrb	r3, [r3, #0]
 8024e5c:	461a      	mov	r2, r3
 8024e5e:	4b21      	ldr	r3, [pc, #132]	; (8024ee4 <SMS_digitalTimePrintTheScreen+0xe4>)
 8024e60:	881b      	ldrh	r3, [r3, #0]
 8024e62:	9301      	str	r3, [sp, #4]
 8024e64:	9200      	str	r2, [sp, #0]
 8024e66:	460b      	mov	r3, r1
 8024e68:	4a1f      	ldr	r2, [pc, #124]	; (8024ee8 <SMS_digitalTimePrintTheScreen+0xe8>)
 8024e6a:	2110      	movs	r1, #16
 8024e6c:	4818      	ldr	r0, [pc, #96]	; (8024ed0 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e6e:	f002 febf 	bl	8027bf0 <sniprintf>
							lv_label_set_text(slpdigitalDate, slpbuffer);
 8024e72:	4b1e      	ldr	r3, [pc, #120]	; (8024eec <SMS_digitalTimePrintTheScreen+0xec>)
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	4916      	ldr	r1, [pc, #88]	; (8024ed0 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e78:	4618      	mov	r0, r3
 8024e7a:	f7f4 fc7d 	bl	8019778 <lv_label_set_text>
					    	//Week Day
					    	lv_label_set_text(slpweekDay, slpweekDayStr);
 8024e7e:	4b1c      	ldr	r3, [pc, #112]	; (8024ef0 <SMS_digitalTimePrintTheScreen+0xf0>)
 8024e80:	681a      	ldr	r2, [r3, #0]
 8024e82:	4b1c      	ldr	r3, [pc, #112]	; (8024ef4 <SMS_digitalTimePrintTheScreen+0xf4>)
 8024e84:	681b      	ldr	r3, [r3, #0]
 8024e86:	4619      	mov	r1, r3
 8024e88:	4610      	mov	r0, r2
 8024e8a:	f7f4 fc75 	bl	8019778 <lv_label_set_text>
					    	dateTmp=date;
 8024e8e:	4b13      	ldr	r3, [pc, #76]	; (8024edc <SMS_digitalTimePrintTheScreen+0xdc>)
 8024e90:	781a      	ldrb	r2, [r3, #0]
 8024e92:	4b11      	ldr	r3, [pc, #68]	; (8024ed8 <SMS_digitalTimePrintTheScreen+0xd8>)
 8024e94:	701a      	strb	r2, [r3, #0]


					    	lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8024e96:	4b15      	ldr	r3, [pc, #84]	; (8024eec <SMS_digitalTimePrintTheScreen+0xec>)
 8024e98:	6818      	ldr	r0, [r3, #0]
 8024e9a:	230a      	movs	r3, #10
 8024e9c:	9300      	str	r3, [sp, #0]
 8024e9e:	2300      	movs	r3, #0
 8024ea0:	2200      	movs	r2, #0
 8024ea2:	2100      	movs	r1, #0
 8024ea4:	f7e1 fa1e 	bl	80062e4 <lv_obj_align>
					    	lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 8024ea8:	4b11      	ldr	r3, [pc, #68]	; (8024ef0 <SMS_digitalTimePrintTheScreen+0xf0>)
 8024eaa:	6818      	ldr	r0, [r3, #0]
 8024eac:	2323      	movs	r3, #35	; 0x23
 8024eae:	9300      	str	r3, [sp, #0]
 8024eb0:	2300      	movs	r3, #0
 8024eb2:	2200      	movs	r2, #0
 8024eb4:	2100      	movs	r1, #0
 8024eb6:	f7e1 fa15 	bl	80062e4 <lv_obj_align>
				}
}
 8024eba:	bf00      	nop
 8024ebc:	46bd      	mov	sp, r7
 8024ebe:	bd80      	pop	{r7, pc}
 8024ec0:	20006ee9 	.word	0x20006ee9
 8024ec4:	20006ee8 	.word	0x20006ee8
 8024ec8:	20006ed8 	.word	0x20006ed8
 8024ecc:	0802a2d4 	.word	0x0802a2d4
 8024ed0:	20007104 	.word	0x20007104
 8024ed4:	2000706c 	.word	0x2000706c
 8024ed8:	20006e00 	.word	0x20006e00
 8024edc:	200073b4 	.word	0x200073b4
 8024ee0:	20006e18 	.word	0x20006e18
 8024ee4:	20006eda 	.word	0x20006eda
 8024ee8:	0802a2e4 	.word	0x0802a2e4
 8024eec:	20007068 	.word	0x20007068
 8024ef0:	200070b4 	.word	0x200070b4
 8024ef4:	20007114 	.word	0x20007114

08024ef8 <SMS_batteryValueUpdater>:
/* This function using for battery value update
*/
void SMS_batteryValueUpdater(void){
 8024ef8:	b580      	push	{r7, lr}
 8024efa:	b082      	sub	sp, #8
 8024efc:	af02      	add	r7, sp, #8
		  lv_label_set_text(slpbatteryLbl, slpbatteryVal);
 8024efe:	4b0c      	ldr	r3, [pc, #48]	; (8024f30 <SMS_batteryValueUpdater+0x38>)
 8024f00:	681a      	ldr	r2, [r3, #0]
 8024f02:	4b0c      	ldr	r3, [pc, #48]	; (8024f34 <SMS_batteryValueUpdater+0x3c>)
 8024f04:	681b      	ldr	r3, [r3, #0]
 8024f06:	4619      	mov	r1, r3
 8024f08:	4610      	mov	r0, r2
 8024f0a:	f7f4 fc35 	bl	8019778 <lv_label_set_text>
		  slpbattery_style.text.color = slpbatteryColor;
 8024f0e:	4a0a      	ldr	r2, [pc, #40]	; (8024f38 <SMS_batteryValueUpdater+0x40>)
 8024f10:	4b0a      	ldr	r3, [pc, #40]	; (8024f3c <SMS_batteryValueUpdater+0x44>)
 8024f12:	881b      	ldrh	r3, [r3, #0]
 8024f14:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8024f16:	4b06      	ldr	r3, [pc, #24]	; (8024f30 <SMS_batteryValueUpdater+0x38>)
 8024f18:	6818      	ldr	r0, [r3, #0]
 8024f1a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024f1e:	9300      	str	r3, [sp, #0]
 8024f20:	2364      	movs	r3, #100	; 0x64
 8024f22:	2200      	movs	r2, #0
 8024f24:	2100      	movs	r1, #0
 8024f26:	f7e1 f9dd 	bl	80062e4 <lv_obj_align>
}
 8024f2a:	bf00      	nop
 8024f2c:	46bd      	mov	sp, r7
 8024f2e:	bd80      	pop	{r7, pc}
 8024f30:	200070f8 	.word	0x200070f8
 8024f34:	20007100 	.word	0x20007100
 8024f38:	200070b8 	.word	0x200070b8
 8024f3c:	200070fc 	.word	0x200070fc

08024f40 <SMS_bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void SMS_bluetoothStatusUpdater(void){
 8024f40:	b580      	push	{r7, lr}
 8024f42:	b082      	sub	sp, #8
 8024f44:	af02      	add	r7, sp, #8
		if(slpbluetoothStatus){
 8024f46:	4b11      	ldr	r3, [pc, #68]	; (8024f8c <SMS_bluetoothStatusUpdater+0x4c>)
 8024f48:	781b      	ldrb	r3, [r3, #0]
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	d015      	beq.n	8024f7a <SMS_bluetoothStatusUpdater+0x3a>
			slpbluetooth_style.text.color = slpbluetoothColor;
 8024f4e:	4a10      	ldr	r2, [pc, #64]	; (8024f90 <SMS_bluetoothStatusUpdater+0x50>)
 8024f50:	4b10      	ldr	r3, [pc, #64]	; (8024f94 <SMS_bluetoothStatusUpdater+0x54>)
 8024f52:	881b      	ldrh	r3, [r3, #0]
 8024f54:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8024f56:	4b10      	ldr	r3, [pc, #64]	; (8024f98 <SMS_bluetoothStatusUpdater+0x58>)
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	4910      	ldr	r1, [pc, #64]	; (8024f9c <SMS_bluetoothStatusUpdater+0x5c>)
 8024f5c:	4618      	mov	r0, r3
 8024f5e:	f7f4 fc0b 	bl	8019778 <lv_label_set_text>
			  lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8024f62:	4b0d      	ldr	r3, [pc, #52]	; (8024f98 <SMS_bluetoothStatusUpdater+0x58>)
 8024f64:	6818      	ldr	r0, [r3, #0]
 8024f66:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024f6a:	9300      	str	r3, [sp, #0]
 8024f6c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024f70:	2200      	movs	r2, #0
 8024f72:	2100      	movs	r1, #0
 8024f74:	f7e1 f9b6 	bl	80062e4 <lv_obj_align>
		}
		else lv_label_set_text(slpbluetoothLbl, " ");
}
 8024f78:	e005      	b.n	8024f86 <SMS_bluetoothStatusUpdater+0x46>
		else lv_label_set_text(slpbluetoothLbl, " ");
 8024f7a:	4b07      	ldr	r3, [pc, #28]	; (8024f98 <SMS_bluetoothStatusUpdater+0x58>)
 8024f7c:	681b      	ldr	r3, [r3, #0]
 8024f7e:	4908      	ldr	r1, [pc, #32]	; (8024fa0 <SMS_bluetoothStatusUpdater+0x60>)
 8024f80:	4618      	mov	r0, r3
 8024f82:	f7f4 fbf9 	bl	8019778 <lv_label_set_text>
}
 8024f86:	bf00      	nop
 8024f88:	46bd      	mov	sp, r7
 8024f8a:	bd80      	pop	{r7, pc}
 8024f8c:	200070f5 	.word	0x200070f5
 8024f90:	20007074 	.word	0x20007074
 8024f94:	20007070 	.word	0x20007070
 8024f98:	200070b0 	.word	0x200070b0
 8024f9c:	0802a2d0 	.word	0x0802a2d0
 8024fa0:	0802a2fc 	.word	0x0802a2fc

08024fa4 <SleepModeScreen_SetTime>:

//Getter and setter functions
void SleepModeScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8024fa4:	b480      	push	{r7}
 8024fa6:	b083      	sub	sp, #12
 8024fa8:	af00      	add	r7, sp, #0
 8024faa:	4603      	mov	r3, r0
 8024fac:	71fb      	strb	r3, [r7, #7]
 8024fae:	460b      	mov	r3, r1
 8024fb0:	71bb      	strb	r3, [r7, #6]
 8024fb2:	4613      	mov	r3, r2
 8024fb4:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 8024fb6:	4a07      	ldr	r2, [pc, #28]	; (8024fd4 <SleepModeScreen_SetTime+0x30>)
 8024fb8:	79fb      	ldrb	r3, [r7, #7]
 8024fba:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 8024fbc:	4a06      	ldr	r2, [pc, #24]	; (8024fd8 <SleepModeScreen_SetTime+0x34>)
 8024fbe:	79bb      	ldrb	r3, [r7, #6]
 8024fc0:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8024fc2:	4a06      	ldr	r2, [pc, #24]	; (8024fdc <SleepModeScreen_SetTime+0x38>)
 8024fc4:	797b      	ldrb	r3, [r7, #5]
 8024fc6:	7013      	strb	r3, [r2, #0]
}
 8024fc8:	bf00      	nop
 8024fca:	370c      	adds	r7, #12
 8024fcc:	46bd      	mov	sp, r7
 8024fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fd2:	4770      	bx	lr
 8024fd4:	20006ee9 	.word	0x20006ee9
 8024fd8:	20006ee8 	.word	0x20006ee8
 8024fdc:	20006ed8 	.word	0x20006ed8

08024fe0 <SleepModeScreen_SetDate>:
void SleepModeScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8024fe0:	b480      	push	{r7}
 8024fe2:	b083      	sub	sp, #12
 8024fe4:	af00      	add	r7, sp, #0
 8024fe6:	603b      	str	r3, [r7, #0]
 8024fe8:	4603      	mov	r3, r0
 8024fea:	71fb      	strb	r3, [r7, #7]
 8024fec:	460b      	mov	r3, r1
 8024fee:	71bb      	strb	r3, [r7, #6]
 8024ff0:	4613      	mov	r3, r2
 8024ff2:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8024ff4:	79fb      	ldrb	r3, [r7, #7]
 8024ff6:	b29b      	uxth	r3, r3
 8024ff8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8024ffc:	b29a      	uxth	r2, r3
 8024ffe:	4b08      	ldr	r3, [pc, #32]	; (8025020 <SleepModeScreen_SetDate+0x40>)
 8025000:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8025002:	4a08      	ldr	r2, [pc, #32]	; (8025024 <SleepModeScreen_SetDate+0x44>)
 8025004:	79bb      	ldrb	r3, [r7, #6]
 8025006:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8025008:	4a07      	ldr	r2, [pc, #28]	; (8025028 <SleepModeScreen_SetDate+0x48>)
 802500a:	797b      	ldrb	r3, [r7, #5]
 802500c:	7013      	strb	r3, [r2, #0]
	slpweekDayStr =getWeekDay;
 802500e:	4a07      	ldr	r2, [pc, #28]	; (802502c <SleepModeScreen_SetDate+0x4c>)
 8025010:	683b      	ldr	r3, [r7, #0]
 8025012:	6013      	str	r3, [r2, #0]

}
 8025014:	bf00      	nop
 8025016:	370c      	adds	r7, #12
 8025018:	46bd      	mov	sp, r7
 802501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802501e:	4770      	bx	lr
 8025020:	20006eda 	.word	0x20006eda
 8025024:	20006e18 	.word	0x20006e18
 8025028:	200073b4 	.word	0x200073b4
 802502c:	20007114 	.word	0x20007114

08025030 <SleepModeScreen_SetBatteryVal>:
void SleepModeScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8025030:	b480      	push	{r7}
 8025032:	b083      	sub	sp, #12
 8025034:	af00      	add	r7, sp, #0
 8025036:	6078      	str	r0, [r7, #4]
 8025038:	8039      	strh	r1, [r7, #0]
	slpbatteryVal =getBatteryVal;
 802503a:	4a06      	ldr	r2, [pc, #24]	; (8025054 <SleepModeScreen_SetBatteryVal+0x24>)
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	6013      	str	r3, [r2, #0]
	slpbatteryColor =getBatteryColor;
 8025040:	4a05      	ldr	r2, [pc, #20]	; (8025058 <SleepModeScreen_SetBatteryVal+0x28>)
 8025042:	883b      	ldrh	r3, [r7, #0]
 8025044:	8013      	strh	r3, [r2, #0]
}
 8025046:	bf00      	nop
 8025048:	370c      	adds	r7, #12
 802504a:	46bd      	mov	sp, r7
 802504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025050:	4770      	bx	lr
 8025052:	bf00      	nop
 8025054:	20007100 	.word	0x20007100
 8025058:	200070fc 	.word	0x200070fc

0802505c <SleepModeScreen_SetBluetoothStatusVal>:
void SleepModeScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 802505c:	b480      	push	{r7}
 802505e:	b083      	sub	sp, #12
 8025060:	af00      	add	r7, sp, #0
 8025062:	4603      	mov	r3, r0
 8025064:	80b9      	strh	r1, [r7, #4]
 8025066:	71fb      	strb	r3, [r7, #7]
	slpbluetoothStatus =getBluetoothStatus;
 8025068:	4a05      	ldr	r2, [pc, #20]	; (8025080 <SleepModeScreen_SetBluetoothStatusVal+0x24>)
 802506a:	79fb      	ldrb	r3, [r7, #7]
 802506c:	7013      	strb	r3, [r2, #0]
	slpbluetoothColor =getBluetoothColor;
 802506e:	4a05      	ldr	r2, [pc, #20]	; (8025084 <SleepModeScreen_SetBluetoothStatusVal+0x28>)
 8025070:	88bb      	ldrh	r3, [r7, #4]
 8025072:	8013      	strh	r3, [r2, #0]
}
 8025074:	bf00      	nop
 8025076:	370c      	adds	r7, #12
 8025078:	46bd      	mov	sp, r7
 802507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802507e:	4770      	bx	lr
 8025080:	200070f5 	.word	0x200070f5
 8025084:	20007070 	.word	0x20007070

08025088 <SleepModeScreen_TaskControllerSet>:
void SleepModeScreen_TaskControllerSet(bool active){
 8025088:	b480      	push	{r7}
 802508a:	b083      	sub	sp, #12
 802508c:	af00      	add	r7, sp, #0
 802508e:	4603      	mov	r3, r0
 8025090:	71fb      	strb	r3, [r7, #7]
	slptaskController = active;
 8025092:	4a04      	ldr	r2, [pc, #16]	; (80250a4 <SleepModeScreen_TaskControllerSet+0x1c>)
 8025094:	79fb      	ldrb	r3, [r7, #7]
 8025096:	7013      	strb	r3, [r2, #0]
}
 8025098:	bf00      	nop
 802509a:	370c      	adds	r7, #12
 802509c:	46bd      	mov	sp, r7
 802509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250a2:	4770      	bx	lr
 80250a4:	200070f4 	.word	0x200070f4

080250a8 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80250a8:	b480      	push	{r7}
 80250aa:	b085      	sub	sp, #20
 80250ac:	af00      	add	r7, sp, #0
 80250ae:	4603      	mov	r3, r0
 80250b0:	71fb      	strb	r3, [r7, #7]
 80250b2:	460b      	mov	r3, r1
 80250b4:	71bb      	strb	r3, [r7, #6]
 80250b6:	4613      	mov	r3, r2
 80250b8:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80250ba:	79bb      	ldrb	r3, [r7, #6]
 80250bc:	095b      	lsrs	r3, r3, #5
 80250be:	b2db      	uxtb	r3, r3
 80250c0:	f003 0307 	and.w	r3, r3, #7
 80250c4:	b2da      	uxtb	r2, r3
 80250c6:	7b3b      	ldrb	r3, [r7, #12]
 80250c8:	f362 0302 	bfi	r3, r2, #0, #3
 80250cc:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80250ce:	79fb      	ldrb	r3, [r7, #7]
 80250d0:	08db      	lsrs	r3, r3, #3
 80250d2:	b2db      	uxtb	r3, r3
 80250d4:	f003 031f 	and.w	r3, r3, #31
 80250d8:	b2da      	uxtb	r2, r3
 80250da:	7b3b      	ldrb	r3, [r7, #12]
 80250dc:	f362 03c7 	bfi	r3, r2, #3, #5
 80250e0:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80250e2:	797b      	ldrb	r3, [r7, #5]
 80250e4:	08db      	lsrs	r3, r3, #3
 80250e6:	b2db      	uxtb	r3, r3
 80250e8:	f003 031f 	and.w	r3, r3, #31
 80250ec:	b2da      	uxtb	r2, r3
 80250ee:	7b7b      	ldrb	r3, [r7, #13]
 80250f0:	f362 0304 	bfi	r3, r2, #0, #5
 80250f4:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80250f6:	79bb      	ldrb	r3, [r7, #6]
 80250f8:	089b      	lsrs	r3, r3, #2
 80250fa:	b2db      	uxtb	r3, r3
 80250fc:	f003 0307 	and.w	r3, r3, #7
 8025100:	b2da      	uxtb	r2, r3
 8025102:	7b7b      	ldrb	r3, [r7, #13]
 8025104:	f362 1347 	bfi	r3, r2, #5, #3
 8025108:	737b      	strb	r3, [r7, #13]
    return color;
 802510a:	89bb      	ldrh	r3, [r7, #12]
}
 802510c:	4618      	mov	r0, r3
 802510e:	3714      	adds	r7, #20
 8025110:	46bd      	mov	sp, r7
 8025112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025116:	4770      	bx	lr

08025118 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025118:	b580      	push	{r7, lr}
 802511a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802511c:	f7ed fa44 	bl	80125a8 <lv_disp_get_default>
 8025120:	4603      	mov	r3, r0
 8025122:	4618      	mov	r0, r3
 8025124:	f7df ff0c 	bl	8004f40 <lv_disp_get_scr_act>
 8025128:	4603      	mov	r3, r0
}
 802512a:	4618      	mov	r0, r3
 802512c:	bd80      	pop	{r7, pc}

0802512e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802512e:	b580      	push	{r7, lr}
 8025130:	b084      	sub	sp, #16
 8025132:	af00      	add	r7, sp, #0
 8025134:	60f8      	str	r0, [r7, #12]
 8025136:	460b      	mov	r3, r1
 8025138:	607a      	str	r2, [r7, #4]
 802513a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 802513c:	6879      	ldr	r1, [r7, #4]
 802513e:	68f8      	ldr	r0, [r7, #12]
 8025140:	f7e1 fd75 	bl	8006c2e <lv_obj_set_style>
}
 8025144:	bf00      	nop
 8025146:	3710      	adds	r7, #16
 8025148:	46bd      	mov	sp, r7
 802514a:	bd80      	pop	{r7, pc}

0802514c <tos_StartScreen_Init>:
#include "StartScreen.h"
#include "../../tOSbaga.h"
#include "stdio.h"


void tos_StartScreen_Init(void) {
 802514c:	b590      	push	{r4, r7, lr}
 802514e:	b085      	sub	sp, #20
 8025150:	af02      	add	r7, sp, #8
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 8025152:	4926      	ldr	r1, [pc, #152]	; (80251ec <tos_StartScreen_Init+0xa0>)
 8025154:	4826      	ldr	r0, [pc, #152]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 8025156:	f7e3 fb09 	bl	800876c <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_BLACK;
 802515a:	4b25      	ldr	r3, [pc, #148]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 802515c:	2200      	movs	r2, #0
 802515e:	805a      	strh	r2, [r3, #2]
	style_screen.body.grad_color = LV_COLOR_BLACK;
 8025160:	4b23      	ldr	r3, [pc, #140]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 8025162:	2200      	movs	r2, #0
 8025164:	809a      	strh	r2, [r3, #4]
	style_screen.text.color = lv_color_make(68,133,247);
 8025166:	4c22      	ldr	r4, [pc, #136]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 8025168:	22f7      	movs	r2, #247	; 0xf7
 802516a:	2185      	movs	r1, #133	; 0x85
 802516c:	2044      	movs	r0, #68	; 0x44
 802516e:	f7ff ff9b 	bl	80250a8 <lv_color_make>
 8025172:	8420      	strh	r0, [r4, #32]
	style_screen.text.font = &lv_font_roboto_28;
 8025174:	4b1e      	ldr	r3, [pc, #120]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 8025176:	4a1f      	ldr	r2, [pc, #124]	; (80251f4 <tos_StartScreen_Init+0xa8>)
 8025178:	625a      	str	r2, [r3, #36]	; 0x24
	lv_obj_set_style(lv_scr_act(), &style_screen);
 802517a:	f7ff ffcd 	bl	8025118 <lv_scr_act>
 802517e:	4603      	mov	r3, r0
 8025180:	491b      	ldr	r1, [pc, #108]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 8025182:	4618      	mov	r0, r3
 8025184:	f7e1 fd53 	bl	8006c2e <lv_obj_set_style>

	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8025188:	f7ff ffc6 	bl	8025118 <lv_scr_act>
 802518c:	4603      	mov	r3, r0
 802518e:	2100      	movs	r1, #0
 8025190:	4618      	mov	r0, r3
 8025192:	f7f3 fe33 	bl	8018dfc <lv_img_create>
 8025196:	6078      	str	r0, [r7, #4]
	lv_img_set_src(img1, &tos75x75);
 8025198:	4917      	ldr	r1, [pc, #92]	; (80251f8 <tos_StartScreen_Init+0xac>)
 802519a:	6878      	ldr	r0, [r7, #4]
 802519c:	f7f3 fecc 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 80251a0:	f06f 0313 	mvn.w	r3, #19
 80251a4:	9300      	str	r3, [sp, #0]
 80251a6:	2300      	movs	r3, #0
 80251a8:	2200      	movs	r2, #0
 80251aa:	2100      	movs	r1, #0
 80251ac:	6878      	ldr	r0, [r7, #4]
 80251ae:	f7e1 f899 	bl	80062e4 <lv_obj_align>

	lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 80251b2:	f7ff ffb1 	bl	8025118 <lv_scr_act>
 80251b6:	4603      	mov	r3, r0
 80251b8:	2100      	movs	r1, #0
 80251ba:	4618      	mov	r0, r3
 80251bc:	f7f4 f9aa 	bl	8019514 <lv_label_create>
 80251c0:	6038      	str	r0, [r7, #0]
 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 80251c2:	4a0b      	ldr	r2, [pc, #44]	; (80251f0 <tos_StartScreen_Init+0xa4>)
 80251c4:	2100      	movs	r1, #0
 80251c6:	6838      	ldr	r0, [r7, #0]
 80251c8:	f7ff ffb1 	bl	802512e <lv_label_set_style>
 	lv_label_set_text(tosLbl, "tOSbaga fsw 1.0");
 80251cc:	490b      	ldr	r1, [pc, #44]	; (80251fc <tos_StartScreen_Init+0xb0>)
 80251ce:	6838      	ldr	r0, [r7, #0]
 80251d0:	f7f4 fad2 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 80251d4:	2332      	movs	r3, #50	; 0x32
 80251d6:	9300      	str	r3, [sp, #0]
 80251d8:	2300      	movs	r3, #0
 80251da:	2200      	movs	r2, #0
 80251dc:	2100      	movs	r1, #0
 80251de:	6838      	ldr	r0, [r7, #0]
 80251e0:	f7e1 f880 	bl	80062e4 <lv_obj_align>
}
 80251e4:	bf00      	nop
 80251e6:	370c      	adds	r7, #12
 80251e8:	46bd      	mov	sp, r7
 80251ea:	bd90      	pop	{r4, r7, pc}
 80251ec:	20006c68 	.word	0x20006c68
 80251f0:	2000666c 	.word	0x2000666c
 80251f4:	20002394 	.word	0x20002394
 80251f8:	08044f44 	.word	0x08044f44
 80251fc:	0802a300 	.word	0x0802a300

08025200 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8025200:	b480      	push	{r7}
 8025202:	b085      	sub	sp, #20
 8025204:	af00      	add	r7, sp, #0
 8025206:	4603      	mov	r3, r0
 8025208:	71fb      	strb	r3, [r7, #7]
 802520a:	460b      	mov	r3, r1
 802520c:	71bb      	strb	r3, [r7, #6]
 802520e:	4613      	mov	r3, r2
 8025210:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8025212:	79bb      	ldrb	r3, [r7, #6]
 8025214:	095b      	lsrs	r3, r3, #5
 8025216:	b2db      	uxtb	r3, r3
 8025218:	f003 0307 	and.w	r3, r3, #7
 802521c:	b2da      	uxtb	r2, r3
 802521e:	7b3b      	ldrb	r3, [r7, #12]
 8025220:	f362 0302 	bfi	r3, r2, #0, #3
 8025224:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8025226:	79fb      	ldrb	r3, [r7, #7]
 8025228:	08db      	lsrs	r3, r3, #3
 802522a:	b2db      	uxtb	r3, r3
 802522c:	f003 031f 	and.w	r3, r3, #31
 8025230:	b2da      	uxtb	r2, r3
 8025232:	7b3b      	ldrb	r3, [r7, #12]
 8025234:	f362 03c7 	bfi	r3, r2, #3, #5
 8025238:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802523a:	797b      	ldrb	r3, [r7, #5]
 802523c:	08db      	lsrs	r3, r3, #3
 802523e:	b2db      	uxtb	r3, r3
 8025240:	f003 031f 	and.w	r3, r3, #31
 8025244:	b2da      	uxtb	r2, r3
 8025246:	7b7b      	ldrb	r3, [r7, #13]
 8025248:	f362 0304 	bfi	r3, r2, #0, #5
 802524c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 802524e:	79bb      	ldrb	r3, [r7, #6]
 8025250:	089b      	lsrs	r3, r3, #2
 8025252:	b2db      	uxtb	r3, r3
 8025254:	f003 0307 	and.w	r3, r3, #7
 8025258:	b2da      	uxtb	r2, r3
 802525a:	7b7b      	ldrb	r3, [r7, #13]
 802525c:	f362 1347 	bfi	r3, r2, #5, #3
 8025260:	737b      	strb	r3, [r7, #13]
    return color;
 8025262:	89bb      	ldrh	r3, [r7, #12]
}
 8025264:	4618      	mov	r0, r3
 8025266:	3714      	adds	r7, #20
 8025268:	46bd      	mov	sp, r7
 802526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802526e:	4770      	bx	lr

08025270 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025270:	b580      	push	{r7, lr}
 8025272:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8025274:	f7ed f998 	bl	80125a8 <lv_disp_get_default>
 8025278:	4603      	mov	r3, r0
 802527a:	4618      	mov	r0, r3
 802527c:	f7df fe60 	bl	8004f40 <lv_disp_get_scr_act>
 8025280:	4603      	mov	r3, r0
}
 8025282:	4618      	mov	r0, r3
 8025284:	bd80      	pop	{r7, pc}

08025286 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8025286:	b580      	push	{r7, lr}
 8025288:	b084      	sub	sp, #16
 802528a:	af00      	add	r7, sp, #0
 802528c:	60f8      	str	r0, [r7, #12]
 802528e:	460b      	mov	r3, r1
 8025290:	607a      	str	r2, [r7, #4]
 8025292:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8025294:	6879      	ldr	r1, [r7, #4]
 8025296:	68f8      	ldr	r0, [r7, #12]
 8025298:	f7e1 fcc9 	bl	8006c2e <lv_obj_set_style>
}
 802529c:	bf00      	nop
 802529e:	3710      	adds	r7, #16
 80252a0:	46bd      	mov	sp, r7
 80252a2:	bd80      	pop	{r7, pc}

080252a4 <tos_StepAndKcalScreen_Init>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void tos_StepAndKcalScreen_Init(bool unitType, bool theme){
 80252a4:	b580      	push	{r7, lr}
 80252a6:	b082      	sub	sp, #8
 80252a8:	af00      	add	r7, sp, #0
 80252aa:	4603      	mov	r3, r0
 80252ac:	460a      	mov	r2, r1
 80252ae:	71fb      	strb	r3, [r7, #7]
 80252b0:	4613      	mov	r3, r2
 80252b2:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 80252b4:	f7ff ffdc 	bl	8025270 <lv_scr_act>
 80252b8:	4603      	mov	r3, r0
 80252ba:	4618      	mov	r0, r3
 80252bc:	f7e0 fda0 	bl	8005e00 <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 80252c0:	4928      	ldr	r1, [pc, #160]	; (8025364 <tos_StepAndKcalScreen_Init+0xc0>)
 80252c2:	4829      	ldr	r0, [pc, #164]	; (8025368 <tos_StepAndKcalScreen_Init+0xc4>)
 80252c4:	f7e3 fa52 	bl	800876c <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 80252c8:	4b27      	ldr	r3, [pc, #156]	; (8025368 <tos_StepAndKcalScreen_Init+0xc4>)
 80252ca:	4a28      	ldr	r2, [pc, #160]	; (802536c <tos_StepAndKcalScreen_Init+0xc8>)
 80252cc:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 80252ce:	4a26      	ldr	r2, [pc, #152]	; (8025368 <tos_StepAndKcalScreen_Init+0xc4>)
 80252d0:	4b27      	ldr	r3, [pc, #156]	; (8025370 <tos_StepAndKcalScreen_Init+0xcc>)
 80252d2:	881b      	ldrh	r3, [r3, #0]
 80252d4:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 80252d6:	4923      	ldr	r1, [pc, #140]	; (8025364 <tos_StepAndKcalScreen_Init+0xc0>)
 80252d8:	4826      	ldr	r0, [pc, #152]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 80252da:	f7e3 fa47 	bl	800876c <lv_style_copy>
	if(theme){
 80252de:	79bb      	ldrb	r3, [r7, #6]
 80252e0:	2b00      	cmp	r3, #0
 80252e2:	d00a      	beq.n	80252fa <tos_StepAndKcalScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 80252e4:	4b23      	ldr	r3, [pc, #140]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 80252e6:	2200      	movs	r2, #0
 80252e8:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 80252ea:	4b22      	ldr	r3, [pc, #136]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 80252ec:	2200      	movs	r2, #0
 80252ee:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 80252f0:	4a1d      	ldr	r2, [pc, #116]	; (8025368 <tos_StepAndKcalScreen_Init+0xc4>)
 80252f2:	4b21      	ldr	r3, [pc, #132]	; (8025378 <tos_StepAndKcalScreen_Init+0xd4>)
 80252f4:	881b      	ldrh	r3, [r3, #0]
 80252f6:	8413      	strh	r3, [r2, #32]
 80252f8:	e00b      	b.n	8025312 <tos_StepAndKcalScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 80252fa:	4a1e      	ldr	r2, [pc, #120]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 80252fc:	4b1f      	ldr	r3, [pc, #124]	; (802537c <tos_StepAndKcalScreen_Init+0xd8>)
 80252fe:	881b      	ldrh	r3, [r3, #0]
 8025300:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8025302:	4a1c      	ldr	r2, [pc, #112]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 8025304:	4b1d      	ldr	r3, [pc, #116]	; (802537c <tos_StepAndKcalScreen_Init+0xd8>)
 8025306:	881b      	ldrh	r3, [r3, #0]
 8025308:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 802530a:	4a17      	ldr	r2, [pc, #92]	; (8025368 <tos_StepAndKcalScreen_Init+0xc4>)
 802530c:	4b1a      	ldr	r3, [pc, #104]	; (8025378 <tos_StepAndKcalScreen_Init+0xd4>)
 802530e:	881b      	ldrh	r3, [r3, #0]
 8025310:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025312:	f7ff ffad 	bl	8025270 <lv_scr_act>
 8025316:	4603      	mov	r3, r0
 8025318:	4916      	ldr	r1, [pc, #88]	; (8025374 <tos_StepAndKcalScreen_Init+0xd0>)
 802531a:	4618      	mov	r0, r3
 802531c:	f7e1 fc87 	bl	8006c2e <lv_obj_set_style>

	SAK_unitType=unitType;
 8025320:	4a17      	ldr	r2, [pc, #92]	; (8025380 <tos_StepAndKcalScreen_Init+0xdc>)
 8025322:	79fb      	ldrb	r3, [r7, #7]
 8025324:	7013      	strb	r3, [r2, #0]
	SAK_buffTmp="null";
 8025326:	4b17      	ldr	r3, [pc, #92]	; (8025384 <tos_StepAndKcalScreen_Init+0xe0>)
 8025328:	4a17      	ldr	r2, [pc, #92]	; (8025388 <tos_StepAndKcalScreen_Init+0xe4>)
 802532a:	601a      	str	r2, [r3, #0]

	StepAndKcal_Steps(theme);
 802532c:	79bb      	ldrb	r3, [r7, #6]
 802532e:	4618      	mov	r0, r3
 8025330:	f000 f830 	bl	8025394 <StepAndKcal_Steps>
	StepAndKcal_kCals(theme);
 8025334:	79bb      	ldrb	r3, [r7, #6]
 8025336:	4618      	mov	r0, r3
 8025338:	f000 f8e4 	bl	8025504 <StepAndKcal_kCals>
	StepAndKcal_Distances(unitType,theme);
 802533c:	79ba      	ldrb	r2, [r7, #6]
 802533e:	79fb      	ldrb	r3, [r7, #7]
 8025340:	4611      	mov	r1, r2
 8025342:	4618      	mov	r0, r3
 8025344:	f000 f996 	bl	8025674 <StepAndKcal_Distances>
	SAk_taskController=true;
 8025348:	4b10      	ldr	r3, [pc, #64]	; (802538c <tos_StepAndKcalScreen_Init+0xe8>)
 802534a:	2201      	movs	r2, #1
 802534c:	701a      	strb	r2, [r3, #0]
	lv_task_create(SAK_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 802534e:	2300      	movs	r3, #0
 8025350:	2201      	movs	r2, #1
 8025352:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8025356:	480e      	ldr	r0, [pc, #56]	; (8025390 <tos_StepAndKcalScreen_Init+0xec>)
 8025358:	f7ee fd6a 	bl	8013e30 <lv_task_create>
}
 802535c:	bf00      	nop
 802535e:	3708      	adds	r7, #8
 8025360:	46bd      	mov	sp, r7
 8025362:	bd80      	pop	{r7, pc}
 8025364:	20006c68 	.word	0x20006c68
 8025368:	200066e4 	.word	0x200066e4
 802536c:	200026cc 	.word	0x200026cc
 8025370:	0802a318 	.word	0x0802a318
 8025374:	200066a8 	.word	0x200066a8
 8025378:	0802a31c 	.word	0x0802a31c
 802537c:	0802a320 	.word	0x0802a320
 8025380:	20007148 	.word	0x20007148
 8025384:	2000711c 	.word	0x2000711c
 8025388:	0802a310 	.word	0x0802a310
 802538c:	20007140 	.word	0x20007140
 8025390:	080257f5 	.word	0x080257f5

08025394 <StepAndKcal_Steps>:
/* This function using for initiation steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Steps(bool theme){
 8025394:	b590      	push	{r4, r7, lr}
 8025396:	b087      	sub	sp, #28
 8025398:	af02      	add	r7, sp, #8
 802539a:	4603      	mov	r3, r0
 802539c:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802539e:	f7ff ff67 	bl	8025270 <lv_scr_act>
 80253a2:	4603      	mov	r3, r0
 80253a4:	2100      	movs	r1, #0
 80253a6:	4618      	mov	r0, r3
 80253a8:	f7f3 fd28 	bl	8018dfc <lv_img_create>
 80253ac:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 80253ae:	79fb      	ldrb	r3, [r7, #7]
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d004      	beq.n	80253be <StepAndKcal_Steps+0x2a>
 80253b4:	4949      	ldr	r1, [pc, #292]	; (80254dc <StepAndKcal_Steps+0x148>)
 80253b6:	68f8      	ldr	r0, [r7, #12]
 80253b8:	f7f3 fdbe 	bl	8018f38 <lv_img_set_src>
 80253bc:	e003      	b.n	80253c6 <StepAndKcal_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 80253be:	4948      	ldr	r1, [pc, #288]	; (80254e0 <StepAndKcal_Steps+0x14c>)
 80253c0:	68f8      	ldr	r0, [r7, #12]
 80253c2:	f7f3 fdb9 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -83);
 80253c6:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80253ca:	9300      	str	r3, [sp, #0]
 80253cc:	2300      	movs	r3, #0
 80253ce:	2200      	movs	r2, #0
 80253d0:	2100      	movs	r1, #0
 80253d2:	68f8      	ldr	r0, [r7, #12]
 80253d4:	f7e0 ff86 	bl	80062e4 <lv_obj_align>

   	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 80253d8:	f7ff ff4a 	bl	8025270 <lv_scr_act>
 80253dc:	4603      	mov	r3, r0
 80253de:	2100      	movs	r1, #0
 80253e0:	4618      	mov	r0, r3
 80253e2:	f7f4 f897 	bl	8019514 <lv_label_create>
 80253e6:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80253e8:	4a3e      	ldr	r2, [pc, #248]	; (80254e4 <StepAndKcal_Steps+0x150>)
 80253ea:	2100      	movs	r1, #0
 80253ec:	68b8      	ldr	r0, [r7, #8]
 80253ee:	f7ff ff4a 	bl	8025286 <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 80253f2:	493d      	ldr	r1, [pc, #244]	; (80254e8 <StepAndKcal_Steps+0x154>)
 80253f4:	68b8      	ldr	r0, [r7, #8]
 80253f6:	f7f4 f9bf 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, -9);
 80253fa:	f06f 0308 	mvn.w	r3, #8
 80253fe:	9300      	str	r3, [sp, #0]
 8025400:	2300      	movs	r3, #0
 8025402:	2200      	movs	r2, #0
 8025404:	2100      	movs	r1, #0
 8025406:	68b8      	ldr	r0, [r7, #8]
 8025408:	f7e0 ff6c 	bl	80062e4 <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 802540c:	4937      	ldr	r1, [pc, #220]	; (80254ec <StepAndKcal_Steps+0x158>)
 802540e:	4838      	ldr	r0, [pc, #224]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 8025410:	f7e3 f9ac 	bl	800876c <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8025414:	4c36      	ldr	r4, [pc, #216]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 8025416:	2235      	movs	r2, #53	; 0x35
 8025418:	21cc      	movs	r1, #204	; 0xcc
 802541a:	2065      	movs	r0, #101	; 0x65
 802541c:	f7ff fef0 	bl	8025200 <lv_color_make>
 8025420:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8025422:	4b33      	ldr	r3, [pc, #204]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 8025424:	2203      	movs	r2, #3
 8025426:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8025428:	4c31      	ldr	r4, [pc, #196]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 802542a:	2235      	movs	r2, #53	; 0x35
 802542c:	21cc      	movs	r1, #204	; 0xcc
 802542e:	2065      	movs	r0, #101	; 0x65
 8025430:	f7ff fee6 	bl	8025200 <lv_color_make>
 8025434:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8025436:	4b2e      	ldr	r3, [pc, #184]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 8025438:	4a2e      	ldr	r2, [pc, #184]	; (80254f4 <StepAndKcal_Steps+0x160>)
 802543a:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    SAK_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 802543c:	f7ff ff18 	bl	8025270 <lv_scr_act>
 8025440:	4603      	mov	r3, r0
 8025442:	2100      	movs	r1, #0
 8025444:	4618      	mov	r0, r3
 8025446:	f7ef fa63 	bl	8014910 <lv_arc_create>
 802544a:	4602      	mov	r2, r0
 802544c:	4b2a      	ldr	r3, [pc, #168]	; (80254f8 <StepAndKcal_Steps+0x164>)
 802544e:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_stepsArc, 65, 65);
 8025450:	4b29      	ldr	r3, [pc, #164]	; (80254f8 <StepAndKcal_Steps+0x164>)
 8025452:	681b      	ldr	r3, [r3, #0]
 8025454:	2241      	movs	r2, #65	; 0x41
 8025456:	2141      	movs	r1, #65	; 0x41
 8025458:	4618      	mov	r0, r3
 802545a:	f7e0 fea0 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(SAK_stepsArc, 0, 360);
 802545e:	4b26      	ldr	r3, [pc, #152]	; (80254f8 <StepAndKcal_Steps+0x164>)
 8025460:	681b      	ldr	r3, [r3, #0]
 8025462:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8025466:	2100      	movs	r1, #0
 8025468:	4618      	mov	r0, r3
 802546a:	f7ef facd 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(SAK_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 802546e:	4b22      	ldr	r3, [pc, #136]	; (80254f8 <StepAndKcal_Steps+0x164>)
 8025470:	681b      	ldr	r3, [r3, #0]
 8025472:	4a1f      	ldr	r2, [pc, #124]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 8025474:	2100      	movs	r1, #0
 8025476:	4618      	mov	r0, r3
 8025478:	f7ef faef 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(SAK_stepsArc, NULL, LV_ALIGN_CENTER, 0, -83);
 802547c:	4b1e      	ldr	r3, [pc, #120]	; (80254f8 <StepAndKcal_Steps+0x164>)
 802547e:	6818      	ldr	r0, [r3, #0]
 8025480:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8025484:	9300      	str	r3, [sp, #0]
 8025486:	2300      	movs	r3, #0
 8025488:	2200      	movs	r2, #0
 802548a:	2100      	movs	r1, #0
 802548c:	f7e0 ff2a 	bl	80062e4 <lv_obj_align>

    SAK_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8025490:	f7ff feee 	bl	8025270 <lv_scr_act>
 8025494:	4603      	mov	r3, r0
 8025496:	2100      	movs	r1, #0
 8025498:	4618      	mov	r0, r3
 802549a:	f7f4 f83b 	bl	8019514 <lv_label_create>
 802549e:	4602      	mov	r2, r0
 80254a0:	4b16      	ldr	r3, [pc, #88]	; (80254fc <StepAndKcal_Steps+0x168>)
 80254a2:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(SAK_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 80254a4:	4b15      	ldr	r3, [pc, #84]	; (80254fc <StepAndKcal_Steps+0x168>)
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	4a11      	ldr	r2, [pc, #68]	; (80254f0 <StepAndKcal_Steps+0x15c>)
 80254aa:	2100      	movs	r1, #0
 80254ac:	4618      	mov	r0, r3
 80254ae:	f7ff feea 	bl	8025286 <lv_label_set_style>
   	lv_label_set_text(SAK_stepsLbl, "0000");
 80254b2:	4b12      	ldr	r3, [pc, #72]	; (80254fc <StepAndKcal_Steps+0x168>)
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	4912      	ldr	r1, [pc, #72]	; (8025500 <StepAndKcal_Steps+0x16c>)
 80254b8:	4618      	mov	r0, r3
 80254ba:	f7f4 f95d 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 80254be:	4b0f      	ldr	r3, [pc, #60]	; (80254fc <StepAndKcal_Steps+0x168>)
 80254c0:	6818      	ldr	r0, [r3, #0]
 80254c2:	f06f 031d 	mvn.w	r3, #29
 80254c6:	9300      	str	r3, [sp, #0]
 80254c8:	2300      	movs	r3, #0
 80254ca:	2200      	movs	r2, #0
 80254cc:	2100      	movs	r1, #0
 80254ce:	f7e0 ff09 	bl	80062e4 <lv_obj_align>
}
 80254d2:	bf00      	nop
 80254d4:	3714      	adds	r7, #20
 80254d6:	46bd      	mov	sp, r7
 80254d8:	bd90      	pop	{r4, r7, pc}
 80254da:	bf00      	nop
 80254dc:	0803f2e0 	.word	0x0803f2e0
 80254e0:	0803fc1c 	.word	0x0803fc1c
 80254e4:	200066e4 	.word	0x200066e4
 80254e8:	0802a324 	.word	0x0802a324
 80254ec:	20006c68 	.word	0x20006c68
 80254f0:	20006720 	.word	0x20006720
 80254f4:	200027e8 	.word	0x200027e8
 80254f8:	20007118 	.word	0x20007118
 80254fc:	2000713c 	.word	0x2000713c
 8025500:	0802a32c 	.word	0x0802a32c

08025504 <StepAndKcal_kCals>:
/* This function using for initiation kCals Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_kCals(bool theme){
 8025504:	b590      	push	{r4, r7, lr}
 8025506:	b087      	sub	sp, #28
 8025508:	af02      	add	r7, sp, #8
 802550a:	4603      	mov	r3, r0
 802550c:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802550e:	f7ff feaf 	bl	8025270 <lv_scr_act>
 8025512:	4603      	mov	r3, r0
 8025514:	2100      	movs	r1, #0
 8025516:	4618      	mov	r0, r3
 8025518:	f7f3 fc70 	bl	8018dfc <lv_img_create>
 802551c:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 802551e:	79fb      	ldrb	r3, [r7, #7]
 8025520:	2b00      	cmp	r3, #0
 8025522:	d004      	beq.n	802552e <StepAndKcal_kCals+0x2a>
 8025524:	4949      	ldr	r1, [pc, #292]	; (802564c <StepAndKcal_kCals+0x148>)
 8025526:	68f8      	ldr	r0, [r7, #12]
 8025528:	f7f3 fd06 	bl	8018f38 <lv_img_set_src>
 802552c:	e003      	b.n	8025536 <StepAndKcal_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 802552e:	4948      	ldr	r1, [pc, #288]	; (8025650 <StepAndKcal_kCals+0x14c>)
 8025530:	68f8      	ldr	r0, [r7, #12]
 8025532:	f7f3 fd01 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -60, 37);
 8025536:	2325      	movs	r3, #37	; 0x25
 8025538:	9300      	str	r3, [sp, #0]
 802553a:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802553e:	2200      	movs	r2, #0
 8025540:	2100      	movs	r1, #0
 8025542:	68f8      	ldr	r0, [r7, #12]
 8025544:	f7e0 fece 	bl	80062e4 <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 8025548:	4942      	ldr	r1, [pc, #264]	; (8025654 <StepAndKcal_kCals+0x150>)
 802554a:	4843      	ldr	r0, [pc, #268]	; (8025658 <StepAndKcal_kCals+0x154>)
 802554c:	f7e3 f90e 	bl	800876c <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8025550:	4c41      	ldr	r4, [pc, #260]	; (8025658 <StepAndKcal_kCals+0x154>)
 8025552:	2269      	movs	r2, #105	; 0x69
 8025554:	21cd      	movs	r1, #205	; 0xcd
 8025556:	20ff      	movs	r0, #255	; 0xff
 8025558:	f7ff fe52 	bl	8025200 <lv_color_make>
 802555c:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 802555e:	4b3e      	ldr	r3, [pc, #248]	; (8025658 <StepAndKcal_kCals+0x154>)
 8025560:	2203      	movs	r2, #3
 8025562:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 8025564:	4c3c      	ldr	r4, [pc, #240]	; (8025658 <StepAndKcal_kCals+0x154>)
 8025566:	2269      	movs	r2, #105	; 0x69
 8025568:	21cd      	movs	r1, #205	; 0xcd
 802556a:	20ff      	movs	r0, #255	; 0xff
 802556c:	f7ff fe48 	bl	8025200 <lv_color_make>
 8025570:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8025572:	4b39      	ldr	r3, [pc, #228]	; (8025658 <StepAndKcal_kCals+0x154>)
 8025574:	4a39      	ldr	r2, [pc, #228]	; (802565c <StepAndKcal_kCals+0x158>)
 8025576:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8025578:	f7ff fe7a 	bl	8025270 <lv_scr_act>
 802557c:	4603      	mov	r3, r0
 802557e:	2100      	movs	r1, #0
 8025580:	4618      	mov	r0, r3
 8025582:	f7f3 ffc7 	bl	8019514 <lv_label_create>
 8025586:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8025588:	4a35      	ldr	r2, [pc, #212]	; (8025660 <StepAndKcal_kCals+0x15c>)
 802558a:	2100      	movs	r1, #0
 802558c:	68b8      	ldr	r0, [r7, #8]
 802558e:	f7ff fe7a 	bl	8025286 <lv_label_set_style>
   	lv_label_set_text(kCalsDescLbl, "kCals");
 8025592:	4934      	ldr	r1, [pc, #208]	; (8025664 <StepAndKcal_kCals+0x160>)
 8025594:	68b8      	ldr	r0, [r7, #8]
 8025596:	f7f4 f8ef 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, -60, 111);
 802559a:	236f      	movs	r3, #111	; 0x6f
 802559c:	9300      	str	r3, [sp, #0]
 802559e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80255a2:	2200      	movs	r2, #0
 80255a4:	2100      	movs	r1, #0
 80255a6:	68b8      	ldr	r0, [r7, #8]
 80255a8:	f7e0 fe9c 	bl	80062e4 <lv_obj_align>

    //Dynamic objs
    SAK_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 80255ac:	f7ff fe60 	bl	8025270 <lv_scr_act>
 80255b0:	4603      	mov	r3, r0
 80255b2:	2100      	movs	r1, #0
 80255b4:	4618      	mov	r0, r3
 80255b6:	f7ef f9ab 	bl	8014910 <lv_arc_create>
 80255ba:	4602      	mov	r2, r0
 80255bc:	4b2a      	ldr	r3, [pc, #168]	; (8025668 <StepAndKcal_kCals+0x164>)
 80255be:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_kCalsArc, 80, 80);
 80255c0:	4b29      	ldr	r3, [pc, #164]	; (8025668 <StepAndKcal_kCals+0x164>)
 80255c2:	681b      	ldr	r3, [r3, #0]
 80255c4:	2250      	movs	r2, #80	; 0x50
 80255c6:	2150      	movs	r1, #80	; 0x50
 80255c8:	4618      	mov	r0, r3
 80255ca:	f7e0 fde8 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(SAK_kCalsArc, 0, 360);
 80255ce:	4b26      	ldr	r3, [pc, #152]	; (8025668 <StepAndKcal_kCals+0x164>)
 80255d0:	681b      	ldr	r3, [r3, #0]
 80255d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80255d6:	2100      	movs	r1, #0
 80255d8:	4618      	mov	r0, r3
 80255da:	f7ef fa15 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(SAK_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 80255de:	4b22      	ldr	r3, [pc, #136]	; (8025668 <StepAndKcal_kCals+0x164>)
 80255e0:	681b      	ldr	r3, [r3, #0]
 80255e2:	4a1d      	ldr	r2, [pc, #116]	; (8025658 <StepAndKcal_kCals+0x154>)
 80255e4:	2100      	movs	r1, #0
 80255e6:	4618      	mov	r0, r3
 80255e8:	f7ef fa37 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(SAK_kCalsArc, NULL, LV_ALIGN_CENTER,-60, 37);
 80255ec:	4b1e      	ldr	r3, [pc, #120]	; (8025668 <StepAndKcal_kCals+0x164>)
 80255ee:	6818      	ldr	r0, [r3, #0]
 80255f0:	2325      	movs	r3, #37	; 0x25
 80255f2:	9300      	str	r3, [sp, #0]
 80255f4:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80255f8:	2200      	movs	r2, #0
 80255fa:	2100      	movs	r1, #0
 80255fc:	f7e0 fe72 	bl	80062e4 <lv_obj_align>

    SAK_kcalsLbl = lv_label_create(lv_scr_act(), NULL);
 8025600:	f7ff fe36 	bl	8025270 <lv_scr_act>
 8025604:	4603      	mov	r3, r0
 8025606:	2100      	movs	r1, #0
 8025608:	4618      	mov	r0, r3
 802560a:	f7f3 ff83 	bl	8019514 <lv_label_create>
 802560e:	4602      	mov	r2, r0
 8025610:	4b16      	ldr	r3, [pc, #88]	; (802566c <StepAndKcal_kCals+0x168>)
 8025612:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_kcalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8025614:	4b15      	ldr	r3, [pc, #84]	; (802566c <StepAndKcal_kCals+0x168>)
 8025616:	681b      	ldr	r3, [r3, #0]
 8025618:	4a0f      	ldr	r2, [pc, #60]	; (8025658 <StepAndKcal_kCals+0x154>)
 802561a:	2100      	movs	r1, #0
 802561c:	4618      	mov	r0, r3
 802561e:	f7ff fe32 	bl	8025286 <lv_label_set_style>
   	lv_label_set_text(SAK_kcalsLbl, "0000");
 8025622:	4b12      	ldr	r3, [pc, #72]	; (802566c <StepAndKcal_kCals+0x168>)
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	4912      	ldr	r1, [pc, #72]	; (8025670 <StepAndKcal_kCals+0x16c>)
 8025628:	4618      	mov	r0, r3
 802562a:	f7f4 f8a5 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 802562e:	4b0f      	ldr	r3, [pc, #60]	; (802566c <StepAndKcal_kCals+0x168>)
 8025630:	6818      	ldr	r0, [r3, #0]
 8025632:	235a      	movs	r3, #90	; 0x5a
 8025634:	9300      	str	r3, [sp, #0]
 8025636:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802563a:	2200      	movs	r2, #0
 802563c:	2100      	movs	r1, #0
 802563e:	f7e0 fe51 	bl	80062e4 <lv_obj_align>
}
 8025642:	bf00      	nop
 8025644:	3714      	adds	r7, #20
 8025646:	46bd      	mov	sp, r7
 8025648:	bd90      	pop	{r4, r7, pc}
 802564a:	bf00      	nop
 802564c:	08037fa0 	.word	0x08037fa0
 8025650:	080388dc 	.word	0x080388dc
 8025654:	20006c68 	.word	0x20006c68
 8025658:	2000675c 	.word	0x2000675c
 802565c:	200027e8 	.word	0x200027e8
 8025660:	200066e4 	.word	0x200066e4
 8025664:	0802a334 	.word	0x0802a334
 8025668:	20007144 	.word	0x20007144
 802566c:	20007120 	.word	0x20007120
 8025670:	0802a32c 	.word	0x0802a32c

08025674 <StepAndKcal_Distances>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Distances(bool unitType,bool theme){
 8025674:	b590      	push	{r4, r7, lr}
 8025676:	b087      	sub	sp, #28
 8025678:	af02      	add	r7, sp, #8
 802567a:	4603      	mov	r3, r0
 802567c:	460a      	mov	r2, r1
 802567e:	71fb      	strb	r3, [r7, #7]
 8025680:	4613      	mov	r3, r2
 8025682:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8025684:	f7ff fdf4 	bl	8025270 <lv_scr_act>
 8025688:	4603      	mov	r3, r0
 802568a:	2100      	movs	r1, #0
 802568c:	4618      	mov	r0, r3
 802568e:	f7f3 fbb5 	bl	8018dfc <lv_img_create>
 8025692:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 8025694:	79bb      	ldrb	r3, [r7, #6]
 8025696:	2b00      	cmp	r3, #0
 8025698:	d004      	beq.n	80256a4 <StepAndKcal_Distances+0x30>
 802569a:	494b      	ldr	r1, [pc, #300]	; (80257c8 <StepAndKcal_Distances+0x154>)
 802569c:	68f8      	ldr	r0, [r7, #12]
 802569e:	f7f3 fc4b 	bl	8018f38 <lv_img_set_src>
 80256a2:	e003      	b.n	80256ac <StepAndKcal_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 80256a4:	4949      	ldr	r1, [pc, #292]	; (80257cc <StepAndKcal_Distances+0x158>)
 80256a6:	68f8      	ldr	r0, [r7, #12]
 80256a8:	f7f3 fc46 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 60, 37);
 80256ac:	2325      	movs	r3, #37	; 0x25
 80256ae:	9300      	str	r3, [sp, #0]
 80256b0:	233c      	movs	r3, #60	; 0x3c
 80256b2:	2200      	movs	r2, #0
 80256b4:	2100      	movs	r1, #0
 80256b6:	68f8      	ldr	r0, [r7, #12]
 80256b8:	f7e0 fe14 	bl	80062e4 <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 80256bc:	4944      	ldr	r1, [pc, #272]	; (80257d0 <StepAndKcal_Distances+0x15c>)
 80256be:	4845      	ldr	r0, [pc, #276]	; (80257d4 <StepAndKcal_Distances+0x160>)
 80256c0:	f7e3 f854 	bl	800876c <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 80256c4:	4c43      	ldr	r4, [pc, #268]	; (80257d4 <StepAndKcal_Distances+0x160>)
 80256c6:	2220      	movs	r2, #32
 80256c8:	2117      	movs	r1, #23
 80256ca:	20d6      	movs	r0, #214	; 0xd6
 80256cc:	f7ff fd98 	bl	8025200 <lv_color_make>
 80256d0:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 80256d2:	4b40      	ldr	r3, [pc, #256]	; (80257d4 <StepAndKcal_Distances+0x160>)
 80256d4:	2203      	movs	r2, #3
 80256d6:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 80256d8:	4c3e      	ldr	r4, [pc, #248]	; (80257d4 <StepAndKcal_Distances+0x160>)
 80256da:	2220      	movs	r2, #32
 80256dc:	2117      	movs	r1, #23
 80256de:	20d6      	movs	r0, #214	; 0xd6
 80256e0:	f7ff fd8e 	bl	8025200 <lv_color_make>
 80256e4:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 80256e6:	4b3b      	ldr	r3, [pc, #236]	; (80257d4 <StepAndKcal_Distances+0x160>)
 80256e8:	4a3b      	ldr	r2, [pc, #236]	; (80257d8 <StepAndKcal_Distances+0x164>)
 80256ea:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 80256ec:	f7ff fdc0 	bl	8025270 <lv_scr_act>
 80256f0:	4603      	mov	r3, r0
 80256f2:	2100      	movs	r1, #0
 80256f4:	4618      	mov	r0, r3
 80256f6:	f7f3 ff0d 	bl	8019514 <lv_label_create>
 80256fa:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80256fc:	4a37      	ldr	r2, [pc, #220]	; (80257dc <StepAndKcal_Distances+0x168>)
 80256fe:	2100      	movs	r1, #0
 8025700:	68b8      	ldr	r0, [r7, #8]
 8025702:	f7ff fdc0 	bl	8025286 <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 8025706:	79fb      	ldrb	r3, [r7, #7]
 8025708:	2b00      	cmp	r3, #0
 802570a:	d004      	beq.n	8025716 <StepAndKcal_Distances+0xa2>
 802570c:	4934      	ldr	r1, [pc, #208]	; (80257e0 <StepAndKcal_Distances+0x16c>)
 802570e:	68b8      	ldr	r0, [r7, #8]
 8025710:	f7f4 f832 	bl	8019778 <lv_label_set_text>
 8025714:	e003      	b.n	802571e <StepAndKcal_Distances+0xaa>
 	else lv_label_set_text(distDescLbl, "miles");
 8025716:	4933      	ldr	r1, [pc, #204]	; (80257e4 <StepAndKcal_Distances+0x170>)
 8025718:	68b8      	ldr	r0, [r7, #8]
 802571a:	f7f4 f82d 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 60, 111);
 802571e:	236f      	movs	r3, #111	; 0x6f
 8025720:	9300      	str	r3, [sp, #0]
 8025722:	233c      	movs	r3, #60	; 0x3c
 8025724:	2200      	movs	r2, #0
 8025726:	2100      	movs	r1, #0
 8025728:	68b8      	ldr	r0, [r7, #8]
 802572a:	f7e0 fddb 	bl	80062e4 <lv_obj_align>

    //Dynamic objs
    SAK_distancesArc = lv_arc_create(lv_scr_act(), NULL);
 802572e:	f7ff fd9f 	bl	8025270 <lv_scr_act>
 8025732:	4603      	mov	r3, r0
 8025734:	2100      	movs	r1, #0
 8025736:	4618      	mov	r0, r3
 8025738:	f7ef f8ea 	bl	8014910 <lv_arc_create>
 802573c:	4602      	mov	r2, r0
 802573e:	4b2a      	ldr	r3, [pc, #168]	; (80257e8 <StepAndKcal_Distances+0x174>)
 8025740:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_distancesArc, 80, 80);
 8025742:	4b29      	ldr	r3, [pc, #164]	; (80257e8 <StepAndKcal_Distances+0x174>)
 8025744:	681b      	ldr	r3, [r3, #0]
 8025746:	2250      	movs	r2, #80	; 0x50
 8025748:	2150      	movs	r1, #80	; 0x50
 802574a:	4618      	mov	r0, r3
 802574c:	f7e0 fd27 	bl	800619e <lv_obj_set_size>
    lv_arc_set_angles(SAK_distancesArc, 0, 360);
 8025750:	4b25      	ldr	r3, [pc, #148]	; (80257e8 <StepAndKcal_Distances+0x174>)
 8025752:	681b      	ldr	r3, [r3, #0]
 8025754:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8025758:	2100      	movs	r1, #0
 802575a:	4618      	mov	r0, r3
 802575c:	f7ef f954 	bl	8014a08 <lv_arc_set_angles>
    lv_arc_set_style(SAK_distancesArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8025760:	4b21      	ldr	r3, [pc, #132]	; (80257e8 <StepAndKcal_Distances+0x174>)
 8025762:	681b      	ldr	r3, [r3, #0]
 8025764:	4a1b      	ldr	r2, [pc, #108]	; (80257d4 <StepAndKcal_Distances+0x160>)
 8025766:	2100      	movs	r1, #0
 8025768:	4618      	mov	r0, r3
 802576a:	f7ef f976 	bl	8014a5a <lv_arc_set_style>
    lv_obj_align(SAK_distancesArc, NULL, LV_ALIGN_CENTER, 60, 37);
 802576e:	4b1e      	ldr	r3, [pc, #120]	; (80257e8 <StepAndKcal_Distances+0x174>)
 8025770:	6818      	ldr	r0, [r3, #0]
 8025772:	2325      	movs	r3, #37	; 0x25
 8025774:	9300      	str	r3, [sp, #0]
 8025776:	233c      	movs	r3, #60	; 0x3c
 8025778:	2200      	movs	r2, #0
 802577a:	2100      	movs	r1, #0
 802577c:	f7e0 fdb2 	bl	80062e4 <lv_obj_align>

    SAK_distanceLbl = lv_label_create(lv_scr_act(), NULL);
 8025780:	f7ff fd76 	bl	8025270 <lv_scr_act>
 8025784:	4603      	mov	r3, r0
 8025786:	2100      	movs	r1, #0
 8025788:	4618      	mov	r0, r3
 802578a:	f7f3 fec3 	bl	8019514 <lv_label_create>
 802578e:	4602      	mov	r2, r0
 8025790:	4b16      	ldr	r3, [pc, #88]	; (80257ec <StepAndKcal_Distances+0x178>)
 8025792:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_distanceLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 8025794:	4b15      	ldr	r3, [pc, #84]	; (80257ec <StepAndKcal_Distances+0x178>)
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	4a0e      	ldr	r2, [pc, #56]	; (80257d4 <StepAndKcal_Distances+0x160>)
 802579a:	2100      	movs	r1, #0
 802579c:	4618      	mov	r0, r3
 802579e:	f7ff fd72 	bl	8025286 <lv_label_set_style>
   	lv_label_set_text(SAK_distanceLbl, "0000.00");
 80257a2:	4b12      	ldr	r3, [pc, #72]	; (80257ec <StepAndKcal_Distances+0x178>)
 80257a4:	681b      	ldr	r3, [r3, #0]
 80257a6:	4912      	ldr	r1, [pc, #72]	; (80257f0 <StepAndKcal_Distances+0x17c>)
 80257a8:	4618      	mov	r0, r3
 80257aa:	f7f3 ffe5 	bl	8019778 <lv_label_set_text>
   	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 80257ae:	4b0f      	ldr	r3, [pc, #60]	; (80257ec <StepAndKcal_Distances+0x178>)
 80257b0:	6818      	ldr	r0, [r3, #0]
 80257b2:	235a      	movs	r3, #90	; 0x5a
 80257b4:	9300      	str	r3, [sp, #0]
 80257b6:	233c      	movs	r3, #60	; 0x3c
 80257b8:	2200      	movs	r2, #0
 80257ba:	2100      	movs	r1, #0
 80257bc:	f7e0 fd92 	bl	80062e4 <lv_obj_align>
}
 80257c0:	bf00      	nop
 80257c2:	3714      	adds	r7, #20
 80257c4:	46bd      	mov	sp, r7
 80257c6:	bd90      	pop	{r4, r7, pc}
 80257c8:	08039218 	.word	0x08039218
 80257cc:	08039b54 	.word	0x08039b54
 80257d0:	20006c68 	.word	0x20006c68
 80257d4:	20006798 	.word	0x20006798
 80257d8:	200027e8 	.word	0x200027e8
 80257dc:	200066e4 	.word	0x200066e4
 80257e0:	0802a33c 	.word	0x0802a33c
 80257e4:	0802a340 	.word	0x0802a340
 80257e8:	20007138 	.word	0x20007138
 80257ec:	20007124 	.word	0x20007124
 80257f0:	0802a348 	.word	0x0802a348

080257f4 <SAK_Updater>:

//Update Functions
/*This function using for update all update functions*/
void SAK_Updater(lv_task_t *t){
 80257f4:	b580      	push	{r7, lr}
 80257f6:	b082      	sub	sp, #8
 80257f8:	af00      	add	r7, sp, #0
 80257fa:	6078      	str	r0, [r7, #4]
	if(SAk_taskController){
 80257fc:	4b08      	ldr	r3, [pc, #32]	; (8025820 <SAK_Updater+0x2c>)
 80257fe:	781b      	ldrb	r3, [r3, #0]
 8025800:	2b00      	cmp	r3, #0
 8025802:	d005      	beq.n	8025810 <SAK_Updater+0x1c>
		SAK_steps_angle_loader();
 8025804:	f000 f810 	bl	8025828 <SAK_steps_angle_loader>
		SAK_kCals_angle_loader();
 8025808:	f000 f89a 	bl	8025940 <SAK_kCals_angle_loader>
		SAK_distances_angle_loader();
 802580c:	f000 f924 	bl	8025a58 <SAK_distances_angle_loader>
	}lv_task_del(t);
 8025810:	6878      	ldr	r0, [r7, #4]
 8025812:	f7ee fb45 	bl	8013ea0 <lv_task_del>
}
 8025816:	bf00      	nop
 8025818:	3708      	adds	r7, #8
 802581a:	46bd      	mov	sp, r7
 802581c:	bd80      	pop	{r7, pc}
 802581e:	bf00      	nop
 8025820:	20007140 	.word	0x20007140
 8025824:	00000000 	.word	0x00000000

08025828 <SAK_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void SAK_steps_angle_loader(void)
{
 8025828:	b590      	push	{r4, r7, lr}
 802582a:	b085      	sub	sp, #20
 802582c:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_steps);
 802582e:	4b3c      	ldr	r3, [pc, #240]	; (8025920 <SAK_steps_angle_loader+0xf8>)
 8025830:	881b      	ldrh	r3, [r3, #0]
 8025832:	4a3c      	ldr	r2, [pc, #240]	; (8025924 <SAK_steps_angle_loader+0xfc>)
 8025834:	2108      	movs	r1, #8
 8025836:	483c      	ldr	r0, [pc, #240]	; (8025928 <SAK_steps_angle_loader+0x100>)
 8025838:	f002 f9da 	bl	8027bf0 <sniprintf>
 		lv_label_set_text(SAK_stepsLbl, stepAndKcalBuffer);
 802583c:	4b3b      	ldr	r3, [pc, #236]	; (802592c <SAK_steps_angle_loader+0x104>)
 802583e:	681b      	ldr	r3, [r3, #0]
 8025840:	4939      	ldr	r1, [pc, #228]	; (8025928 <SAK_steps_angle_loader+0x100>)
 8025842:	4618      	mov	r0, r3
 8025844:	f7f3 ff98 	bl	8019778 <lv_label_set_text>
 		lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 8025848:	4b38      	ldr	r3, [pc, #224]	; (802592c <SAK_steps_angle_loader+0x104>)
 802584a:	6818      	ldr	r0, [r3, #0]
 802584c:	f06f 031d 	mvn.w	r3, #29
 8025850:	9300      	str	r3, [sp, #0]
 8025852:	2300      	movs	r3, #0
 8025854:	2200      	movs	r2, #0
 8025856:	2100      	movs	r1, #0
 8025858:	f7e0 fd44 	bl	80062e4 <lv_obj_align>

 		if(SAK_steps<=10000){
 802585c:	4b30      	ldr	r3, [pc, #192]	; (8025920 <SAK_steps_angle_loader+0xf8>)
 802585e:	881b      	ldrh	r3, [r3, #0]
 8025860:	f242 7210 	movw	r2, #10000	; 0x2710
 8025864:	4293      	cmp	r3, r2
 8025866:	d84b      	bhi.n	8025900 <SAK_steps_angle_loader+0xd8>
 			double stepsTemp = tos_Ratio(SAK_steps, 0, 10000, 0, 359);
 8025868:	4b2d      	ldr	r3, [pc, #180]	; (8025920 <SAK_steps_angle_loader+0xf8>)
 802586a:	881b      	ldrh	r3, [r3, #0]
 802586c:	4618      	mov	r0, r3
 802586e:	f7da fe59 	bl	8000524 <__aeabi_ui2d>
 8025872:	4603      	mov	r3, r0
 8025874:	460c      	mov	r4, r1
 8025876:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025908 <SAK_steps_angle_loader+0xe0>
 802587a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025910 <SAK_steps_angle_loader+0xe8>
 802587e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025918 <SAK_steps_angle_loader+0xf0>
 8025882:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025910 <SAK_steps_angle_loader+0xe8>
 8025886:	ec44 3b10 	vmov	d0, r3, r4
 802588a:	f000 ffb3 	bl	80267f4 <tos_Ratio>
 802588e:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(SAK_stepsArc, 180-stepsTemp ,180);
 8025892:	f04f 0200 	mov.w	r2, #0
 8025896:	4b26      	ldr	r3, [pc, #152]	; (8025930 <SAK_steps_angle_loader+0x108>)
 8025898:	e9d7 0100 	ldrd	r0, r1, [r7]
 802589c:	f7db f92e 	bl	8000afc <__aeabi_dcmplt>
 80258a0:	4603      	mov	r3, r0
 80258a2:	2b00      	cmp	r3, #0
 80258a4:	d016      	beq.n	80258d4 <SAK_steps_angle_loader+0xac>
 80258a6:	4b23      	ldr	r3, [pc, #140]	; (8025934 <SAK_steps_angle_loader+0x10c>)
 80258a8:	681c      	ldr	r4, [r3, #0]
 80258aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80258ae:	f04f 0000 	mov.w	r0, #0
 80258b2:	491f      	ldr	r1, [pc, #124]	; (8025930 <SAK_steps_angle_loader+0x108>)
 80258b4:	f7da fcf8 	bl	80002a8 <__aeabi_dsub>
 80258b8:	4602      	mov	r2, r0
 80258ba:	460b      	mov	r3, r1
 80258bc:	4610      	mov	r0, r2
 80258be:	4619      	mov	r1, r3
 80258c0:	f7db f982 	bl	8000bc8 <__aeabi_d2uiz>
 80258c4:	4603      	mov	r3, r0
 80258c6:	b29b      	uxth	r3, r3
 80258c8:	22b4      	movs	r2, #180	; 0xb4
 80258ca:	4619      	mov	r1, r3
 80258cc:	4620      	mov	r0, r4
 80258ce:	f7ef f89b 	bl	8014a08 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 		}
}
 80258d2:	e015      	b.n	8025900 <SAK_steps_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 80258d4:	4b17      	ldr	r3, [pc, #92]	; (8025934 <SAK_steps_angle_loader+0x10c>)
 80258d6:	681c      	ldr	r4, [r3, #0]
 80258d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80258dc:	f04f 0000 	mov.w	r0, #0
 80258e0:	4915      	ldr	r1, [pc, #84]	; (8025938 <SAK_steps_angle_loader+0x110>)
 80258e2:	f7da fce1 	bl	80002a8 <__aeabi_dsub>
 80258e6:	4602      	mov	r2, r0
 80258e8:	460b      	mov	r3, r1
 80258ea:	4610      	mov	r0, r2
 80258ec:	4619      	mov	r1, r3
 80258ee:	f7db f96b 	bl	8000bc8 <__aeabi_d2uiz>
 80258f2:	4603      	mov	r3, r0
 80258f4:	b29b      	uxth	r3, r3
 80258f6:	22b4      	movs	r2, #180	; 0xb4
 80258f8:	4619      	mov	r1, r3
 80258fa:	4620      	mov	r0, r4
 80258fc:	f7ef f884 	bl	8014a08 <lv_arc_set_angles>
}
 8025900:	bf00      	nop
 8025902:	370c      	adds	r7, #12
 8025904:	46bd      	mov	sp, r7
 8025906:	bd90      	pop	{r4, r7, pc}
 8025908:	00000000 	.word	0x00000000
 802590c:	40767000 	.word	0x40767000
	...
 802591c:	40c38800 	.word	0x40c38800
 8025920:	20007142 	.word	0x20007142
 8025924:	0802a350 	.word	0x0802a350
 8025928:	2000714c 	.word	0x2000714c
 802592c:	2000713c 	.word	0x2000713c
 8025930:	40668000 	.word	0x40668000
 8025934:	20007118 	.word	0x20007118
 8025938:	4080e000 	.word	0x4080e000
 802593c:	00000000 	.word	0x00000000

08025940 <SAK_kCals_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_kCals_angle_loader(void)
{
 8025940:	b590      	push	{r4, r7, lr}
 8025942:	b085      	sub	sp, #20
 8025944:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_kCals);
 8025946:	4b3c      	ldr	r3, [pc, #240]	; (8025a38 <SAK_kCals_angle_loader+0xf8>)
 8025948:	881b      	ldrh	r3, [r3, #0]
 802594a:	4a3c      	ldr	r2, [pc, #240]	; (8025a3c <SAK_kCals_angle_loader+0xfc>)
 802594c:	2108      	movs	r1, #8
 802594e:	483c      	ldr	r0, [pc, #240]	; (8025a40 <SAK_kCals_angle_loader+0x100>)
 8025950:	f002 f94e 	bl	8027bf0 <sniprintf>
 		lv_label_set_text(SAK_kcalsLbl, stepAndKcalBuffer);
 8025954:	4b3b      	ldr	r3, [pc, #236]	; (8025a44 <SAK_kCals_angle_loader+0x104>)
 8025956:	681b      	ldr	r3, [r3, #0]
 8025958:	4939      	ldr	r1, [pc, #228]	; (8025a40 <SAK_kCals_angle_loader+0x100>)
 802595a:	4618      	mov	r0, r3
 802595c:	f7f3 ff0c 	bl	8019778 <lv_label_set_text>
 	   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 8025960:	4b38      	ldr	r3, [pc, #224]	; (8025a44 <SAK_kCals_angle_loader+0x104>)
 8025962:	6818      	ldr	r0, [r3, #0]
 8025964:	235a      	movs	r3, #90	; 0x5a
 8025966:	9300      	str	r3, [sp, #0]
 8025968:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802596c:	2200      	movs	r2, #0
 802596e:	2100      	movs	r1, #0
 8025970:	f7e0 fcb8 	bl	80062e4 <lv_obj_align>

 	   	if(SAK_kCals<=10000){
 8025974:	4b30      	ldr	r3, [pc, #192]	; (8025a38 <SAK_kCals_angle_loader+0xf8>)
 8025976:	881b      	ldrh	r3, [r3, #0]
 8025978:	f242 7210 	movw	r2, #10000	; 0x2710
 802597c:	4293      	cmp	r3, r2
 802597e:	d84b      	bhi.n	8025a18 <SAK_kCals_angle_loader+0xd8>
 			double kCalsTemp = tos_Ratio(SAK_kCals, 0, 10000, 0, 359);
 8025980:	4b2d      	ldr	r3, [pc, #180]	; (8025a38 <SAK_kCals_angle_loader+0xf8>)
 8025982:	881b      	ldrh	r3, [r3, #0]
 8025984:	4618      	mov	r0, r3
 8025986:	f7da fdcd 	bl	8000524 <__aeabi_ui2d>
 802598a:	4603      	mov	r3, r0
 802598c:	460c      	mov	r4, r1
 802598e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025a20 <SAK_kCals_angle_loader+0xe0>
 8025992:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025a28 <SAK_kCals_angle_loader+0xe8>
 8025996:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025a30 <SAK_kCals_angle_loader+0xf0>
 802599a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025a28 <SAK_kCals_angle_loader+0xe8>
 802599e:	ec44 3b10 	vmov	d0, r3, r4
 80259a2:	f000 ff27 	bl	80267f4 <tos_Ratio>
 80259a6:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(SAK_kCalsArc, 180-kCalsTemp ,180);
 80259aa:	f04f 0200 	mov.w	r2, #0
 80259ae:	4b26      	ldr	r3, [pc, #152]	; (8025a48 <SAK_kCals_angle_loader+0x108>)
 80259b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80259b4:	f7db f8a2 	bl	8000afc <__aeabi_dcmplt>
 80259b8:	4603      	mov	r3, r0
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d016      	beq.n	80259ec <SAK_kCals_angle_loader+0xac>
 80259be:	4b23      	ldr	r3, [pc, #140]	; (8025a4c <SAK_kCals_angle_loader+0x10c>)
 80259c0:	681c      	ldr	r4, [r3, #0]
 80259c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80259c6:	f04f 0000 	mov.w	r0, #0
 80259ca:	491f      	ldr	r1, [pc, #124]	; (8025a48 <SAK_kCals_angle_loader+0x108>)
 80259cc:	f7da fc6c 	bl	80002a8 <__aeabi_dsub>
 80259d0:	4602      	mov	r2, r0
 80259d2:	460b      	mov	r3, r1
 80259d4:	4610      	mov	r0, r2
 80259d6:	4619      	mov	r1, r3
 80259d8:	f7db f8f6 	bl	8000bc8 <__aeabi_d2uiz>
 80259dc:	4603      	mov	r3, r0
 80259de:	b29b      	uxth	r3, r3
 80259e0:	22b4      	movs	r2, #180	; 0xb4
 80259e2:	4619      	mov	r1, r3
 80259e4:	4620      	mov	r0, r4
 80259e6:	f7ef f80f 	bl	8014a08 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 80259ea:	e015      	b.n	8025a18 <SAK_kCals_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 80259ec:	4b17      	ldr	r3, [pc, #92]	; (8025a4c <SAK_kCals_angle_loader+0x10c>)
 80259ee:	681c      	ldr	r4, [r3, #0]
 80259f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80259f4:	f04f 0000 	mov.w	r0, #0
 80259f8:	4915      	ldr	r1, [pc, #84]	; (8025a50 <SAK_kCals_angle_loader+0x110>)
 80259fa:	f7da fc55 	bl	80002a8 <__aeabi_dsub>
 80259fe:	4602      	mov	r2, r0
 8025a00:	460b      	mov	r3, r1
 8025a02:	4610      	mov	r0, r2
 8025a04:	4619      	mov	r1, r3
 8025a06:	f7db f8df 	bl	8000bc8 <__aeabi_d2uiz>
 8025a0a:	4603      	mov	r3, r0
 8025a0c:	b29b      	uxth	r3, r3
 8025a0e:	22b4      	movs	r2, #180	; 0xb4
 8025a10:	4619      	mov	r1, r3
 8025a12:	4620      	mov	r0, r4
 8025a14:	f7ee fff8 	bl	8014a08 <lv_arc_set_angles>
}
 8025a18:	bf00      	nop
 8025a1a:	370c      	adds	r7, #12
 8025a1c:	46bd      	mov	sp, r7
 8025a1e:	bd90      	pop	{r4, r7, pc}
 8025a20:	00000000 	.word	0x00000000
 8025a24:	40767000 	.word	0x40767000
	...
 8025a34:	40c38800 	.word	0x40c38800
 8025a38:	20007128 	.word	0x20007128
 8025a3c:	0802a350 	.word	0x0802a350
 8025a40:	2000714c 	.word	0x2000714c
 8025a44:	20007120 	.word	0x20007120
 8025a48:	40668000 	.word	0x40668000
 8025a4c:	20007144 	.word	0x20007144
 8025a50:	4080e000 	.word	0x4080e000
 8025a54:	00000000 	.word	0x00000000

08025a58 <SAK_distances_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_distances_angle_loader(void){
 8025a58:	b590      	push	{r4, r7, lr}
 8025a5a:	b089      	sub	sp, #36	; 0x24
 8025a5c:	af02      	add	r7, sp, #8
		float distTmp=(float)tos_distance_Calc(SAK_unitType,SAK_steps);
 8025a5e:	4b4e      	ldr	r3, [pc, #312]	; (8025b98 <SAK_distances_angle_loader+0x140>)
 8025a60:	781a      	ldrb	r2, [r3, #0]
 8025a62:	4b4e      	ldr	r3, [pc, #312]	; (8025b9c <SAK_distances_angle_loader+0x144>)
 8025a64:	881b      	ldrh	r3, [r3, #0]
 8025a66:	4619      	mov	r1, r3
 8025a68:	4610      	mov	r0, r2
 8025a6a:	f000 ff41 	bl	80268f0 <tos_distance_Calc>
 8025a6e:	ed87 0a05 	vstr	s0, [r7, #20]

		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 8025a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8025a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025a7a:	ee17 3a90 	vmov	r3, s15
 8025a7e:	827b      	strh	r3, [r7, #18]
 8025a80:	8a7b      	ldrh	r3, [r7, #18]
 8025a82:	ee07 3a90 	vmov	s15, r3
 8025a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025a8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8025a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025a92:	edc7 7a03 	vstr	s15, [r7, #12]
 8025a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8025a9a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8025ba0 <SAK_distances_angle_loader+0x148>
 8025a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025aa2:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(stepAndKcalBuffer,8, "%03d.%03d",tmp1,(uint16_t)tmp2);
 8025aa6:	8a7b      	ldrh	r3, [r7, #18]
 8025aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8025aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025ab0:	ee17 2a90 	vmov	r2, s15
 8025ab4:	b292      	uxth	r2, r2
 8025ab6:	9200      	str	r2, [sp, #0]
 8025ab8:	4a3a      	ldr	r2, [pc, #232]	; (8025ba4 <SAK_distances_angle_loader+0x14c>)
 8025aba:	2108      	movs	r1, #8
 8025abc:	483a      	ldr	r0, [pc, #232]	; (8025ba8 <SAK_distances_angle_loader+0x150>)
 8025abe:	f002 f897 	bl	8027bf0 <sniprintf>
	 	lv_label_set_text(SAK_distanceLbl, stepAndKcalBuffer);
 8025ac2:	4b3a      	ldr	r3, [pc, #232]	; (8025bac <SAK_distances_angle_loader+0x154>)
 8025ac4:	681b      	ldr	r3, [r3, #0]
 8025ac6:	4938      	ldr	r1, [pc, #224]	; (8025ba8 <SAK_distances_angle_loader+0x150>)
 8025ac8:	4618      	mov	r0, r3
 8025aca:	f7f3 fe55 	bl	8019778 <lv_label_set_text>
	 	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 8025ace:	4b37      	ldr	r3, [pc, #220]	; (8025bac <SAK_distances_angle_loader+0x154>)
 8025ad0:	6818      	ldr	r0, [r3, #0]
 8025ad2:	235a      	movs	r3, #90	; 0x5a
 8025ad4:	9300      	str	r3, [sp, #0]
 8025ad6:	233c      	movs	r3, #60	; 0x3c
 8025ad8:	2200      	movs	r2, #0
 8025ada:	2100      	movs	r1, #0
 8025adc:	f7e0 fc02 	bl	80062e4 <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8025ae0:	6978      	ldr	r0, [r7, #20]
 8025ae2:	f7da fd41 	bl	8000568 <__aeabi_f2d>
 8025ae6:	4603      	mov	r3, r0
 8025ae8:	460c      	mov	r4, r1
 8025aea:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8025b80 <SAK_distances_angle_loader+0x128>
 8025aee:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8025b88 <SAK_distances_angle_loader+0x130>
 8025af2:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8025b90 <SAK_distances_angle_loader+0x138>
 8025af6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8025b88 <SAK_distances_angle_loader+0x130>
 8025afa:	ec44 3b10 	vmov	d0, r3, r4
 8025afe:	f000 fe79 	bl	80267f4 <tos_Ratio>
 8025b02:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(SAK_distancesArc, 180-distanceTemp ,180);
 8025b06:	f04f 0200 	mov.w	r2, #0
 8025b0a:	4b29      	ldr	r3, [pc, #164]	; (8025bb0 <SAK_distances_angle_loader+0x158>)
 8025b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025b10:	f7da fff4 	bl	8000afc <__aeabi_dcmplt>
 8025b14:	4603      	mov	r3, r0
 8025b16:	2b00      	cmp	r3, #0
 8025b18:	d016      	beq.n	8025b48 <SAK_distances_angle_loader+0xf0>
 8025b1a:	4b26      	ldr	r3, [pc, #152]	; (8025bb4 <SAK_distances_angle_loader+0x15c>)
 8025b1c:	681c      	ldr	r4, [r3, #0]
 8025b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025b22:	f04f 0000 	mov.w	r0, #0
 8025b26:	4922      	ldr	r1, [pc, #136]	; (8025bb0 <SAK_distances_angle_loader+0x158>)
 8025b28:	f7da fbbe 	bl	80002a8 <__aeabi_dsub>
 8025b2c:	4602      	mov	r2, r0
 8025b2e:	460b      	mov	r3, r1
 8025b30:	4610      	mov	r0, r2
 8025b32:	4619      	mov	r1, r3
 8025b34:	f7db f848 	bl	8000bc8 <__aeabi_d2uiz>
 8025b38:	4603      	mov	r3, r0
 8025b3a:	b29b      	uxth	r3, r3
 8025b3c:	22b4      	movs	r2, #180	; 0xb4
 8025b3e:	4619      	mov	r1, r3
 8025b40:	4620      	mov	r0, r4
 8025b42:	f7ee ff61 	bl	8014a08 <lv_arc_set_angles>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
}
 8025b46:	e015      	b.n	8025b74 <SAK_distances_angle_loader+0x11c>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
 8025b48:	4b1a      	ldr	r3, [pc, #104]	; (8025bb4 <SAK_distances_angle_loader+0x15c>)
 8025b4a:	681c      	ldr	r4, [r3, #0]
 8025b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025b50:	f04f 0000 	mov.w	r0, #0
 8025b54:	4918      	ldr	r1, [pc, #96]	; (8025bb8 <SAK_distances_angle_loader+0x160>)
 8025b56:	f7da fba7 	bl	80002a8 <__aeabi_dsub>
 8025b5a:	4602      	mov	r2, r0
 8025b5c:	460b      	mov	r3, r1
 8025b5e:	4610      	mov	r0, r2
 8025b60:	4619      	mov	r1, r3
 8025b62:	f7db f831 	bl	8000bc8 <__aeabi_d2uiz>
 8025b66:	4603      	mov	r3, r0
 8025b68:	b29b      	uxth	r3, r3
 8025b6a:	22b4      	movs	r2, #180	; 0xb4
 8025b6c:	4619      	mov	r1, r3
 8025b6e:	4620      	mov	r0, r4
 8025b70:	f7ee ff4a 	bl	8014a08 <lv_arc_set_angles>
}
 8025b74:	bf00      	nop
 8025b76:	371c      	adds	r7, #28
 8025b78:	46bd      	mov	sp, r7
 8025b7a:	bd90      	pop	{r4, r7, pc}
 8025b7c:	f3af 8000 	nop.w
 8025b80:	00000000 	.word	0x00000000
 8025b84:	40767000 	.word	0x40767000
	...
 8025b94:	408f4000 	.word	0x408f4000
 8025b98:	20007148 	.word	0x20007148
 8025b9c:	20007142 	.word	0x20007142
 8025ba0:	447a0000 	.word	0x447a0000
 8025ba4:	0802a358 	.word	0x0802a358
 8025ba8:	2000714c 	.word	0x2000714c
 8025bac:	20007124 	.word	0x20007124
 8025bb0:	40668000 	.word	0x40668000
 8025bb4:	20007138 	.word	0x20007138
 8025bb8:	4080e000 	.word	0x4080e000

08025bbc <StepAndKcal_TaskControllerSet>:
//Setter Getter Functions
void StepAndKcal_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	SAK_steps =getSteps;
	SAK_kCals =getKcals;
}
void StepAndKcal_TaskControllerSet(bool active){
 8025bbc:	b480      	push	{r7}
 8025bbe:	b083      	sub	sp, #12
 8025bc0:	af00      	add	r7, sp, #0
 8025bc2:	4603      	mov	r3, r0
 8025bc4:	71fb      	strb	r3, [r7, #7]
	SAk_taskController = active;
 8025bc6:	4a04      	ldr	r2, [pc, #16]	; (8025bd8 <StepAndKcal_TaskControllerSet+0x1c>)
 8025bc8:	79fb      	ldrb	r3, [r7, #7]
 8025bca:	7013      	strb	r3, [r2, #0]
}
 8025bcc:	bf00      	nop
 8025bce:	370c      	adds	r7, #12
 8025bd0:	46bd      	mov	sp, r7
 8025bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bd6:	4770      	bx	lr
 8025bd8:	20007140 	.word	0x20007140

08025bdc <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025bdc:	b580      	push	{r7, lr}
 8025bde:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8025be0:	f7ec fce2 	bl	80125a8 <lv_disp_get_default>
 8025be4:	4603      	mov	r3, r0
 8025be6:	4618      	mov	r0, r3
 8025be8:	f7df f9aa 	bl	8004f40 <lv_disp_get_scr_act>
 8025bec:	4603      	mov	r3, r0
}
 8025bee:	4618      	mov	r0, r3
 8025bf0:	bd80      	pop	{r7, pc}

08025bf2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8025bf2:	b580      	push	{r7, lr}
 8025bf4:	b084      	sub	sp, #16
 8025bf6:	af00      	add	r7, sp, #0
 8025bf8:	60f8      	str	r0, [r7, #12]
 8025bfa:	460b      	mov	r3, r1
 8025bfc:	607a      	str	r2, [r7, #4]
 8025bfe:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8025c00:	6879      	ldr	r1, [r7, #4]
 8025c02:	68f8      	ldr	r0, [r7, #12]
 8025c04:	f7e1 f813 	bl	8006c2e <lv_obj_set_style>
}
 8025c08:	bf00      	nop
 8025c0a:	3710      	adds	r7, #16
 8025c0c:	46bd      	mov	sp, r7
 8025c0e:	bd80      	pop	{r7, pc}

08025c10 <tos_StopWatchScreen_Init>:
void StopWatch_Update_Lbl(void);
void StopWatch_Update_saveLbl(void);
void StopWatch_Update_StatuImg(uint8_t statu);

/*This function using for initialization StopWatch screen*/
void tos_StopWatchScreen_Init(bool theme){
 8025c10:	b580      	push	{r7, lr}
 8025c12:	b082      	sub	sp, #8
 8025c14:	af00      	add	r7, sp, #0
 8025c16:	4603      	mov	r3, r0
 8025c18:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8025c1a:	f7ff ffdf 	bl	8025bdc <lv_scr_act>
 8025c1e:	4603      	mov	r3, r0
 8025c20:	4618      	mov	r0, r3
 8025c22:	f7e0 f8ed 	bl	8005e00 <lv_obj_clean>

	lv_style_copy(&style_screen, &lv_style_plain);
 8025c26:	4919      	ldr	r1, [pc, #100]	; (8025c8c <tos_StopWatchScreen_Init+0x7c>)
 8025c28:	4819      	ldr	r0, [pc, #100]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c2a:	f7e2 fd9f 	bl	800876c <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 8025c2e:	4a18      	ldr	r2, [pc, #96]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c30:	4b18      	ldr	r3, [pc, #96]	; (8025c94 <tos_StopWatchScreen_Init+0x84>)
 8025c32:	881b      	ldrh	r3, [r3, #0]
 8025c34:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 8025c36:	4a16      	ldr	r2, [pc, #88]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c38:	4b16      	ldr	r3, [pc, #88]	; (8025c94 <tos_StopWatchScreen_Init+0x84>)
 8025c3a:	881b      	ldrh	r3, [r3, #0]
 8025c3c:	8093      	strh	r3, [r2, #4]
	if(theme){
 8025c3e:	79fb      	ldrb	r3, [r7, #7]
 8025c40:	2b00      	cmp	r3, #0
 8025c42:	d005      	beq.n	8025c50 <tos_StopWatchScreen_Init+0x40>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8025c44:	4b12      	ldr	r3, [pc, #72]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c46:	2200      	movs	r2, #0
 8025c48:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8025c4a:	4b11      	ldr	r3, [pc, #68]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c4c:	2200      	movs	r2, #0
 8025c4e:	809a      	strh	r2, [r3, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025c50:	f7ff ffc4 	bl	8025bdc <lv_scr_act>
 8025c54:	4603      	mov	r3, r0
 8025c56:	490e      	ldr	r1, [pc, #56]	; (8025c90 <tos_StopWatchScreen_Init+0x80>)
 8025c58:	4618      	mov	r0, r3
 8025c5a:	f7e0 ffe8 	bl	8006c2e <lv_obj_set_style>
 	isStartCount=false;
 8025c5e:	4b0e      	ldr	r3, [pc, #56]	; (8025c98 <tos_StopWatchScreen_Init+0x88>)
 8025c60:	2200      	movs	r2, #0
 8025c62:	701a      	strb	r2, [r3, #0]
 	SWtheme=theme;
 8025c64:	4a0d      	ldr	r2, [pc, #52]	; (8025c9c <tos_StopWatchScreen_Init+0x8c>)
 8025c66:	79fb      	ldrb	r3, [r7, #7]
 8025c68:	7013      	strb	r3, [r2, #0]

	StopWatch_Obj_Init();
 8025c6a:	f000 f81d 	bl	8025ca8 <StopWatch_Obj_Init>
 	SW_taskController=true;
 8025c6e:	4b0c      	ldr	r3, [pc, #48]	; (8025ca0 <tos_StopWatchScreen_Init+0x90>)
 8025c70:	2201      	movs	r2, #1
 8025c72:	701a      	strb	r2, [r3, #0]
	lv_task_create(StopWatch_Stopwatch_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8025c74:	2300      	movs	r3, #0
 8025c76:	2201      	movs	r2, #1
 8025c78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8025c7c:	4809      	ldr	r0, [pc, #36]	; (8025ca4 <tos_StopWatchScreen_Init+0x94>)
 8025c7e:	f7ee f8d7 	bl	8013e30 <lv_task_create>

}
 8025c82:	bf00      	nop
 8025c84:	3708      	adds	r7, #8
 8025c86:	46bd      	mov	sp, r7
 8025c88:	bd80      	pop	{r7, pc}
 8025c8a:	bf00      	nop
 8025c8c:	20006c68 	.word	0x20006c68
 8025c90:	200067d4 	.word	0x200067d4
 8025c94:	0802a364 	.word	0x0802a364
 8025c98:	200071aa 	.word	0x200071aa
 8025c9c:	20007154 	.word	0x20007154
 8025ca0:	200071ad 	.word	0x200071ad
 8025ca4:	08025e61 	.word	0x08025e61

08025ca8 <StopWatch_Obj_Init>:

/*This function using for create and set objects on screen*/
void StopWatch_Obj_Init(void){
 8025ca8:	b580      	push	{r7, lr}
 8025caa:	b084      	sub	sp, #16
 8025cac:	af04      	add	r7, sp, #16

	SW_Statu_Img = lv_img_create(lv_scr_act(), NULL);
 8025cae:	f7ff ff95 	bl	8025bdc <lv_scr_act>
 8025cb2:	4603      	mov	r3, r0
 8025cb4:	2100      	movs	r1, #0
 8025cb6:	4618      	mov	r0, r3
 8025cb8:	f7f3 f8a0 	bl	8018dfc <lv_img_create>
 8025cbc:	4602      	mov	r2, r0
 8025cbe:	4b57      	ldr	r3, [pc, #348]	; (8025e1c <StopWatch_Obj_Init+0x174>)
 8025cc0:	601a      	str	r2, [r3, #0]
	if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8025cc2:	4b57      	ldr	r3, [pc, #348]	; (8025e20 <StopWatch_Obj_Init+0x178>)
 8025cc4:	781b      	ldrb	r3, [r3, #0]
 8025cc6:	2b00      	cmp	r3, #0
 8025cc8:	d006      	beq.n	8025cd8 <StopWatch_Obj_Init+0x30>
 8025cca:	4b54      	ldr	r3, [pc, #336]	; (8025e1c <StopWatch_Obj_Init+0x174>)
 8025ccc:	681b      	ldr	r3, [r3, #0]
 8025cce:	4955      	ldr	r1, [pc, #340]	; (8025e24 <StopWatch_Obj_Init+0x17c>)
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	f7f3 f931 	bl	8018f38 <lv_img_set_src>
 8025cd6:	e005      	b.n	8025ce4 <StopWatch_Obj_Init+0x3c>
	else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 8025cd8:	4b50      	ldr	r3, [pc, #320]	; (8025e1c <StopWatch_Obj_Init+0x174>)
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	4952      	ldr	r1, [pc, #328]	; (8025e28 <StopWatch_Obj_Init+0x180>)
 8025cde:	4618      	mov	r0, r3
 8025ce0:	f7f3 f92a 	bl	8018f38 <lv_img_set_src>
	lv_obj_align(SW_Statu_Img, NULL, LV_ALIGN_CENTER, 0, 0);
 8025ce4:	4b4d      	ldr	r3, [pc, #308]	; (8025e1c <StopWatch_Obj_Init+0x174>)
 8025ce6:	6818      	ldr	r0, [r3, #0]
 8025ce8:	2300      	movs	r3, #0
 8025cea:	9300      	str	r3, [sp, #0]
 8025cec:	2300      	movs	r3, #0
 8025cee:	2200      	movs	r2, #0
 8025cf0:	2100      	movs	r1, #0
 8025cf2:	f7e0 faf7 	bl	80062e4 <lv_obj_align>

    static lv_style_t text_Style,save_text_Style;
    lv_style_copy(&text_Style, &lv_style_plain);
 8025cf6:	494d      	ldr	r1, [pc, #308]	; (8025e2c <StopWatch_Obj_Init+0x184>)
 8025cf8:	484d      	ldr	r0, [pc, #308]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025cfa:	f7e2 fd37 	bl	800876c <lv_style_copy>
    text_Style.text.color = LV_COLOR_BLACK;
 8025cfe:	4b4c      	ldr	r3, [pc, #304]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025d00:	2200      	movs	r2, #0
 8025d02:	841a      	strh	r2, [r3, #32]
    if(SWtheme) text_Style.text.color = LV_COLOR_SILVER;
 8025d04:	4b46      	ldr	r3, [pc, #280]	; (8025e20 <StopWatch_Obj_Init+0x178>)
 8025d06:	781b      	ldrb	r3, [r3, #0]
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	d003      	beq.n	8025d14 <StopWatch_Obj_Init+0x6c>
 8025d0c:	4a48      	ldr	r2, [pc, #288]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025d0e:	4b49      	ldr	r3, [pc, #292]	; (8025e34 <StopWatch_Obj_Init+0x18c>)
 8025d10:	881b      	ldrh	r3, [r3, #0]
 8025d12:	8413      	strh	r3, [r2, #32]
    text_Style.text.font = &digital_font_for_number_30;
 8025d14:	4b46      	ldr	r3, [pc, #280]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025d16:	4a48      	ldr	r2, [pc, #288]	; (8025e38 <StopWatch_Obj_Init+0x190>)
 8025d18:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_copy(&save_text_Style, &text_Style);
 8025d1a:	4945      	ldr	r1, [pc, #276]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025d1c:	4847      	ldr	r0, [pc, #284]	; (8025e3c <StopWatch_Obj_Init+0x194>)
 8025d1e:	f7e2 fd25 	bl	800876c <lv_style_copy>
    save_text_Style.text.opa=200;
 8025d22:	4b46      	ldr	r3, [pc, #280]	; (8025e3c <StopWatch_Obj_Init+0x194>)
 8025d24:	22c8      	movs	r2, #200	; 0xc8
 8025d26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    	   //MAGENTA -> FF00FF
   	       //AQUA -> 00FFFF
	       //ORANGE -> FFA500

    SW_Lbl = lv_label_create(lv_scr_act(), NULL);
 8025d2a:	f7ff ff57 	bl	8025bdc <lv_scr_act>
 8025d2e:	4603      	mov	r3, r0
 8025d30:	2100      	movs	r1, #0
 8025d32:	4618      	mov	r0, r3
 8025d34:	f7f3 fbee 	bl	8019514 <lv_label_create>
 8025d38:	4602      	mov	r2, r0
 8025d3a:	4b41      	ldr	r3, [pc, #260]	; (8025e40 <StopWatch_Obj_Init+0x198>)
 8025d3c:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_Lbl, true);
 8025d3e:	4b40      	ldr	r3, [pc, #256]	; (8025e40 <StopWatch_Obj_Init+0x198>)
 8025d40:	681b      	ldr	r3, [r3, #0]
 8025d42:	2101      	movs	r1, #1
 8025d44:	4618      	mov	r0, r3
 8025d46:	f7f3 fe33 	bl	80199b0 <lv_label_set_recolor>
 	lv_label_set_style(SW_Lbl, LV_LABEL_STYLE_MAIN, &text_Style);
 8025d4a:	4b3d      	ldr	r3, [pc, #244]	; (8025e40 <StopWatch_Obj_Init+0x198>)
 8025d4c:	681b      	ldr	r3, [r3, #0]
 8025d4e:	4a38      	ldr	r2, [pc, #224]	; (8025e30 <StopWatch_Obj_Init+0x188>)
 8025d50:	2100      	movs	r1, #0
 8025d52:	4618      	mov	r0, r3
 8025d54:	f7ff ff4d 	bl	8025bf2 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025d58:	4b3a      	ldr	r3, [pc, #232]	; (8025e44 <StopWatch_Obj_Init+0x19c>)
 8025d5a:	781b      	ldrb	r3, [r3, #0]
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	4b3a      	ldr	r3, [pc, #232]	; (8025e48 <StopWatch_Obj_Init+0x1a0>)
 8025d60:	781b      	ldrb	r3, [r3, #0]
 8025d62:	461a      	mov	r2, r3
 8025d64:	4b39      	ldr	r3, [pc, #228]	; (8025e4c <StopWatch_Obj_Init+0x1a4>)
 8025d66:	781b      	ldrb	r3, [r3, #0]
 8025d68:	4619      	mov	r1, r3
 8025d6a:	4b39      	ldr	r3, [pc, #228]	; (8025e50 <StopWatch_Obj_Init+0x1a8>)
 8025d6c:	881b      	ldrh	r3, [r3, #0]
 8025d6e:	9302      	str	r3, [sp, #8]
 8025d70:	9101      	str	r1, [sp, #4]
 8025d72:	9200      	str	r2, [sp, #0]
 8025d74:	4603      	mov	r3, r0
 8025d76:	4a37      	ldr	r2, [pc, #220]	; (8025e54 <StopWatch_Obj_Init+0x1ac>)
 8025d78:	2140      	movs	r1, #64	; 0x40
 8025d7a:	4837      	ldr	r0, [pc, #220]	; (8025e58 <StopWatch_Obj_Init+0x1b0>)
 8025d7c:	f001 ff38 	bl	8027bf0 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8025d80:	4b2f      	ldr	r3, [pc, #188]	; (8025e40 <StopWatch_Obj_Init+0x198>)
 8025d82:	681b      	ldr	r3, [r3, #0]
 8025d84:	4934      	ldr	r1, [pc, #208]	; (8025e58 <StopWatch_Obj_Init+0x1b0>)
 8025d86:	4618      	mov	r0, r3
 8025d88:	f7f3 fcf6 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(SW_Lbl, NULL, LV_ALIGN_CENTER, 0, -70);
 8025d8c:	4b2c      	ldr	r3, [pc, #176]	; (8025e40 <StopWatch_Obj_Init+0x198>)
 8025d8e:	6818      	ldr	r0, [r3, #0]
 8025d90:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8025d94:	9300      	str	r3, [sp, #0]
 8025d96:	2300      	movs	r3, #0
 8025d98:	2200      	movs	r2, #0
 8025d9a:	2100      	movs	r1, #0
 8025d9c:	f7e0 faa2 	bl	80062e4 <lv_obj_align>


 	SW_saveLbl= lv_label_create(lv_scr_act(), NULL);
 8025da0:	f7ff ff1c 	bl	8025bdc <lv_scr_act>
 8025da4:	4603      	mov	r3, r0
 8025da6:	2100      	movs	r1, #0
 8025da8:	4618      	mov	r0, r3
 8025daa:	f7f3 fbb3 	bl	8019514 <lv_label_create>
 8025dae:	4602      	mov	r2, r0
 8025db0:	4b2a      	ldr	r3, [pc, #168]	; (8025e5c <StopWatch_Obj_Init+0x1b4>)
 8025db2:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_saveLbl, true);
 8025db4:	4b29      	ldr	r3, [pc, #164]	; (8025e5c <StopWatch_Obj_Init+0x1b4>)
 8025db6:	681b      	ldr	r3, [r3, #0]
 8025db8:	2101      	movs	r1, #1
 8025dba:	4618      	mov	r0, r3
 8025dbc:	f7f3 fdf8 	bl	80199b0 <lv_label_set_recolor>
 	lv_label_set_style(SW_saveLbl, LV_LABEL_STYLE_MAIN, &save_text_Style);
 8025dc0:	4b26      	ldr	r3, [pc, #152]	; (8025e5c <StopWatch_Obj_Init+0x1b4>)
 8025dc2:	681b      	ldr	r3, [r3, #0]
 8025dc4:	4a1d      	ldr	r2, [pc, #116]	; (8025e3c <StopWatch_Obj_Init+0x194>)
 8025dc6:	2100      	movs	r1, #0
 8025dc8:	4618      	mov	r0, r3
 8025dca:	f7ff ff12 	bl	8025bf2 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025dce:	4b1d      	ldr	r3, [pc, #116]	; (8025e44 <StopWatch_Obj_Init+0x19c>)
 8025dd0:	781b      	ldrb	r3, [r3, #0]
 8025dd2:	4618      	mov	r0, r3
 8025dd4:	4b1c      	ldr	r3, [pc, #112]	; (8025e48 <StopWatch_Obj_Init+0x1a0>)
 8025dd6:	781b      	ldrb	r3, [r3, #0]
 8025dd8:	461a      	mov	r2, r3
 8025dda:	4b1c      	ldr	r3, [pc, #112]	; (8025e4c <StopWatch_Obj_Init+0x1a4>)
 8025ddc:	781b      	ldrb	r3, [r3, #0]
 8025dde:	4619      	mov	r1, r3
 8025de0:	4b1b      	ldr	r3, [pc, #108]	; (8025e50 <StopWatch_Obj_Init+0x1a8>)
 8025de2:	881b      	ldrh	r3, [r3, #0]
 8025de4:	9302      	str	r3, [sp, #8]
 8025de6:	9101      	str	r1, [sp, #4]
 8025de8:	9200      	str	r2, [sp, #0]
 8025dea:	4603      	mov	r3, r0
 8025dec:	4a19      	ldr	r2, [pc, #100]	; (8025e54 <StopWatch_Obj_Init+0x1ac>)
 8025dee:	2140      	movs	r1, #64	; 0x40
 8025df0:	4819      	ldr	r0, [pc, #100]	; (8025e58 <StopWatch_Obj_Init+0x1b0>)
 8025df2:	f001 fefd 	bl	8027bf0 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8025df6:	4b19      	ldr	r3, [pc, #100]	; (8025e5c <StopWatch_Obj_Init+0x1b4>)
 8025df8:	681b      	ldr	r3, [r3, #0]
 8025dfa:	4917      	ldr	r1, [pc, #92]	; (8025e58 <StopWatch_Obj_Init+0x1b0>)
 8025dfc:	4618      	mov	r0, r3
 8025dfe:	f7f3 fcbb 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 8025e02:	4b16      	ldr	r3, [pc, #88]	; (8025e5c <StopWatch_Obj_Init+0x1b4>)
 8025e04:	6818      	ldr	r0, [r3, #0]
 8025e06:	2346      	movs	r3, #70	; 0x46
 8025e08:	9300      	str	r3, [sp, #0]
 8025e0a:	2300      	movs	r3, #0
 8025e0c:	2200      	movs	r2, #0
 8025e0e:	2100      	movs	r1, #0
 8025e10:	f7e0 fa68 	bl	80062e4 <lv_obj_align>
}
 8025e14:	bf00      	nop
 8025e16:	46bd      	mov	sp, r7
 8025e18:	bd80      	pop	{r7, pc}
 8025e1a:	bf00      	nop
 8025e1c:	200071a4 	.word	0x200071a4
 8025e20:	20007154 	.word	0x20007154
 8025e24:	08040fb0 	.word	0x08040fb0
 8025e28:	08042344 	.word	0x08042344
 8025e2c:	20006c68 	.word	0x20006c68
 8025e30:	20006810 	.word	0x20006810
 8025e34:	0802a398 	.word	0x0802a398
 8025e38:	200027e8 	.word	0x200027e8
 8025e3c:	2000684c 	.word	0x2000684c
 8025e40:	20007158 	.word	0x20007158
 8025e44:	200071ac 	.word	0x200071ac
 8025e48:	20007160 	.word	0x20007160
 8025e4c:	200071ab 	.word	0x200071ab
 8025e50:	200071a8 	.word	0x200071a8
 8025e54:	0802a368 	.word	0x0802a368
 8025e58:	20007164 	.word	0x20007164
 8025e5c:	2000715c 	.word	0x2000715c

08025e60 <StopWatch_Stopwatch_Updater>:

/*This function using for update to current label*/
void StopWatch_Stopwatch_Updater(lv_task_t *t){
 8025e60:	b580      	push	{r7, lr}
 8025e62:	b082      	sub	sp, #8
 8025e64:	af00      	add	r7, sp, #0
 8025e66:	6078      	str	r0, [r7, #4]
	if(SW_taskController){
 8025e68:	4b06      	ldr	r3, [pc, #24]	; (8025e84 <StopWatch_Stopwatch_Updater+0x24>)
 8025e6a:	781b      	ldrb	r3, [r3, #0]
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	d002      	beq.n	8025e76 <StopWatch_Stopwatch_Updater+0x16>
		StopWatch_Update_Lbl();
 8025e70:	f000 f89c 	bl	8025fac <StopWatch_Update_Lbl>
		}else lv_task_del(t);
}
 8025e74:	e002      	b.n	8025e7c <StopWatch_Stopwatch_Updater+0x1c>
		}else lv_task_del(t);
 8025e76:	6878      	ldr	r0, [r7, #4]
 8025e78:	f7ee f812 	bl	8013ea0 <lv_task_del>
}
 8025e7c:	bf00      	nop
 8025e7e:	3708      	adds	r7, #8
 8025e80:	46bd      	mov	sp, r7
 8025e82:	bd80      	pop	{r7, pc}
 8025e84:	200071ad 	.word	0x200071ad

08025e88 <StopWatch_ButtonController>:

/*This function using for control to buttons*/
void StopWatch_ButtonController(void){
 8025e88:	b580      	push	{r7, lr}
 8025e8a:	af00      	add	r7, sp, #0
	  if(2==tos_LeftButton_Listenner_For_MenuControl()){
 8025e8c:	f000 fc5a 	bl	8026744 <tos_LeftButton_Listenner_For_MenuControl>
 8025e90:	4603      	mov	r3, r0
 8025e92:	2b02      	cmp	r3, #2
 8025e94:	d119      	bne.n	8025eca <StopWatch_ButtonController+0x42>
		  //Start Stop
		  if(!isStartCount){HAL_TIM_Base_Start_IT(&TOS_STOPWATCH_TIMER); isStartCount=true;
 8025e96:	4b1d      	ldr	r3, [pc, #116]	; (8025f0c <StopWatch_ButtonController+0x84>)
 8025e98:	781b      	ldrb	r3, [r3, #0]
 8025e9a:	f083 0301 	eor.w	r3, r3, #1
 8025e9e:	b2db      	uxtb	r3, r3
 8025ea0:	2b00      	cmp	r3, #0
 8025ea2:	d009      	beq.n	8025eb8 <StopWatch_ButtonController+0x30>
 8025ea4:	481a      	ldr	r0, [pc, #104]	; (8025f10 <StopWatch_ButtonController+0x88>)
 8025ea6:	f7dd feee 	bl	8003c86 <HAL_TIM_Base_Start_IT>
 8025eaa:	4b18      	ldr	r3, [pc, #96]	; (8025f0c <StopWatch_ButtonController+0x84>)
 8025eac:	2201      	movs	r2, #1
 8025eae:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(2);}
 8025eb0:	2002      	movs	r0, #2
 8025eb2:	f000 f8e1 	bl	8026078 <StopWatch_Update_StatuImg>
 8025eb6:	e008      	b.n	8025eca <StopWatch_ButtonController+0x42>
		  else { HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);  isStartCount=false;
 8025eb8:	4815      	ldr	r0, [pc, #84]	; (8025f10 <StopWatch_ButtonController+0x88>)
 8025eba:	f7dd ff08 	bl	8003cce <HAL_TIM_Base_Stop_IT>
 8025ebe:	4b13      	ldr	r3, [pc, #76]	; (8025f0c <StopWatch_ButtonController+0x84>)
 8025ec0:	2200      	movs	r2, #0
 8025ec2:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(1);}}
 8025ec4:	2001      	movs	r0, #1
 8025ec6:	f000 f8d7 	bl	8026078 <StopWatch_Update_StatuImg>
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8025eca:	f000 fc0f 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8025ece:	4603      	mov	r3, r0
 8025ed0:	2b01      	cmp	r3, #1
 8025ed2:	d101      	bne.n	8025ed8 <StopWatch_ButtonController+0x50>
		  //Save
		  StopWatch_Update_saveLbl();
 8025ed4:	f000 f898 	bl	8026008 <StopWatch_Update_saveLbl>
	  }
	  if(2==tos_RightButton_Listenner_For_MenuControl()){
 8025ed8:	f000 fc08 	bl	80266ec <tos_RightButton_Listenner_For_MenuControl>
 8025edc:	4603      	mov	r3, r0
 8025ede:	2b02      	cmp	r3, #2
 8025ee0:	d111      	bne.n	8025f06 <StopWatch_ButtonController+0x7e>
		  //Clear and stop
		  SWseconds=0; SWminutes=0; SWhours=0; SWmilisecs=0;
 8025ee2:	4b0c      	ldr	r3, [pc, #48]	; (8025f14 <StopWatch_ButtonController+0x8c>)
 8025ee4:	2200      	movs	r2, #0
 8025ee6:	701a      	strb	r2, [r3, #0]
 8025ee8:	4b0b      	ldr	r3, [pc, #44]	; (8025f18 <StopWatch_ButtonController+0x90>)
 8025eea:	2200      	movs	r2, #0
 8025eec:	701a      	strb	r2, [r3, #0]
 8025eee:	4b0b      	ldr	r3, [pc, #44]	; (8025f1c <StopWatch_ButtonController+0x94>)
 8025ef0:	2200      	movs	r2, #0
 8025ef2:	701a      	strb	r2, [r3, #0]
 8025ef4:	4b0a      	ldr	r3, [pc, #40]	; (8025f20 <StopWatch_ButtonController+0x98>)
 8025ef6:	2200      	movs	r2, #0
 8025ef8:	801a      	strh	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);
 8025efa:	4805      	ldr	r0, [pc, #20]	; (8025f10 <StopWatch_ButtonController+0x88>)
 8025efc:	f7dd fee7 	bl	8003cce <HAL_TIM_Base_Stop_IT>
		  StopWatch_Update_StatuImg(0);}
 8025f00:	2000      	movs	r0, #0
 8025f02:	f000 f8b9 	bl	8026078 <StopWatch_Update_StatuImg>
}
 8025f06:	bf00      	nop
 8025f08:	bd80      	pop	{r7, pc}
 8025f0a:	bf00      	nop
 8025f0c:	200071aa 	.word	0x200071aa
 8025f10:	200068ac 	.word	0x200068ac
 8025f14:	200071ab 	.word	0x200071ab
 8025f18:	20007160 	.word	0x20007160
 8025f1c:	200071ac 	.word	0x200071ac
 8025f20:	200071a8 	.word	0x200071a8

08025f24 <StopWatch_Update_Time>:

/*This function using for update time
 * this function must be called in timer interupt function*/
void StopWatch_Update_Time(void){
 8025f24:	b480      	push	{r7}
 8025f26:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(SW_taskController){
 8025f28:	4b1b      	ldr	r3, [pc, #108]	; (8025f98 <StopWatch_Update_Time+0x74>)
 8025f2a:	781b      	ldrb	r3, [r3, #0]
 8025f2c:	2b00      	cmp	r3, #0
 8025f2e:	d02d      	beq.n	8025f8c <StopWatch_Update_Time+0x68>
		SWmilisecs++;
 8025f30:	4b1a      	ldr	r3, [pc, #104]	; (8025f9c <StopWatch_Update_Time+0x78>)
 8025f32:	881b      	ldrh	r3, [r3, #0]
 8025f34:	3301      	adds	r3, #1
 8025f36:	b29a      	uxth	r2, r3
 8025f38:	4b18      	ldr	r3, [pc, #96]	; (8025f9c <StopWatch_Update_Time+0x78>)
 8025f3a:	801a      	strh	r2, [r3, #0]
			if(SWmilisecs==1000){
 8025f3c:	4b17      	ldr	r3, [pc, #92]	; (8025f9c <StopWatch_Update_Time+0x78>)
 8025f3e:	881b      	ldrh	r3, [r3, #0]
 8025f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025f44:	d122      	bne.n	8025f8c <StopWatch_Update_Time+0x68>
				SWmilisecs=0;
 8025f46:	4b15      	ldr	r3, [pc, #84]	; (8025f9c <StopWatch_Update_Time+0x78>)
 8025f48:	2200      	movs	r2, #0
 8025f4a:	801a      	strh	r2, [r3, #0]
				SWseconds++;
 8025f4c:	4b14      	ldr	r3, [pc, #80]	; (8025fa0 <StopWatch_Update_Time+0x7c>)
 8025f4e:	781b      	ldrb	r3, [r3, #0]
 8025f50:	3301      	adds	r3, #1
 8025f52:	b2da      	uxtb	r2, r3
 8025f54:	4b12      	ldr	r3, [pc, #72]	; (8025fa0 <StopWatch_Update_Time+0x7c>)
 8025f56:	701a      	strb	r2, [r3, #0]
				if(SWseconds==60){
 8025f58:	4b11      	ldr	r3, [pc, #68]	; (8025fa0 <StopWatch_Update_Time+0x7c>)
 8025f5a:	781b      	ldrb	r3, [r3, #0]
 8025f5c:	2b3c      	cmp	r3, #60	; 0x3c
 8025f5e:	d115      	bne.n	8025f8c <StopWatch_Update_Time+0x68>
					SWseconds=0;
 8025f60:	4b0f      	ldr	r3, [pc, #60]	; (8025fa0 <StopWatch_Update_Time+0x7c>)
 8025f62:	2200      	movs	r2, #0
 8025f64:	701a      	strb	r2, [r3, #0]
					SWminutes++;
 8025f66:	4b0f      	ldr	r3, [pc, #60]	; (8025fa4 <StopWatch_Update_Time+0x80>)
 8025f68:	781b      	ldrb	r3, [r3, #0]
 8025f6a:	3301      	adds	r3, #1
 8025f6c:	b2da      	uxtb	r2, r3
 8025f6e:	4b0d      	ldr	r3, [pc, #52]	; (8025fa4 <StopWatch_Update_Time+0x80>)
 8025f70:	701a      	strb	r2, [r3, #0]
					if(SWminutes==60){
 8025f72:	4b0c      	ldr	r3, [pc, #48]	; (8025fa4 <StopWatch_Update_Time+0x80>)
 8025f74:	781b      	ldrb	r3, [r3, #0]
 8025f76:	2b3c      	cmp	r3, #60	; 0x3c
 8025f78:	d108      	bne.n	8025f8c <StopWatch_Update_Time+0x68>
						SWminutes=0;
 8025f7a:	4b0a      	ldr	r3, [pc, #40]	; (8025fa4 <StopWatch_Update_Time+0x80>)
 8025f7c:	2200      	movs	r2, #0
 8025f7e:	701a      	strb	r2, [r3, #0]
						SWhours++;
 8025f80:	4b09      	ldr	r3, [pc, #36]	; (8025fa8 <StopWatch_Update_Time+0x84>)
 8025f82:	781b      	ldrb	r3, [r3, #0]
 8025f84:	3301      	adds	r3, #1
 8025f86:	b2da      	uxtb	r2, r3
 8025f88:	4b07      	ldr	r3, [pc, #28]	; (8025fa8 <StopWatch_Update_Time+0x84>)
 8025f8a:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}
}
 8025f8c:	bf00      	nop
 8025f8e:	46bd      	mov	sp, r7
 8025f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f94:	4770      	bx	lr
 8025f96:	bf00      	nop
 8025f98:	200071ad 	.word	0x200071ad
 8025f9c:	200071a8 	.word	0x200071a8
 8025fa0:	200071ab 	.word	0x200071ab
 8025fa4:	20007160 	.word	0x20007160
 8025fa8:	200071ac 	.word	0x200071ac

08025fac <StopWatch_Update_Lbl>:

/*This function using for set current value to label*/
void StopWatch_Update_Lbl(void){
 8025fac:	b580      	push	{r7, lr}
 8025fae:	b084      	sub	sp, #16
 8025fb0:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025fb2:	4b0e      	ldr	r3, [pc, #56]	; (8025fec <StopWatch_Update_Lbl+0x40>)
 8025fb4:	781b      	ldrb	r3, [r3, #0]
 8025fb6:	4618      	mov	r0, r3
 8025fb8:	4b0d      	ldr	r3, [pc, #52]	; (8025ff0 <StopWatch_Update_Lbl+0x44>)
 8025fba:	781b      	ldrb	r3, [r3, #0]
 8025fbc:	461a      	mov	r2, r3
 8025fbe:	4b0d      	ldr	r3, [pc, #52]	; (8025ff4 <StopWatch_Update_Lbl+0x48>)
 8025fc0:	781b      	ldrb	r3, [r3, #0]
 8025fc2:	4619      	mov	r1, r3
 8025fc4:	4b0c      	ldr	r3, [pc, #48]	; (8025ff8 <StopWatch_Update_Lbl+0x4c>)
 8025fc6:	881b      	ldrh	r3, [r3, #0]
 8025fc8:	9302      	str	r3, [sp, #8]
 8025fca:	9101      	str	r1, [sp, #4]
 8025fcc:	9200      	str	r2, [sp, #0]
 8025fce:	4603      	mov	r3, r0
 8025fd0:	4a0a      	ldr	r2, [pc, #40]	; (8025ffc <StopWatch_Update_Lbl+0x50>)
 8025fd2:	2140      	movs	r1, #64	; 0x40
 8025fd4:	480a      	ldr	r0, [pc, #40]	; (8026000 <StopWatch_Update_Lbl+0x54>)
 8025fd6:	f001 fe0b 	bl	8027bf0 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8025fda:	4b0a      	ldr	r3, [pc, #40]	; (8026004 <StopWatch_Update_Lbl+0x58>)
 8025fdc:	681b      	ldr	r3, [r3, #0]
 8025fde:	4908      	ldr	r1, [pc, #32]	; (8026000 <StopWatch_Update_Lbl+0x54>)
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f7f3 fbc9 	bl	8019778 <lv_label_set_text>
}
 8025fe6:	bf00      	nop
 8025fe8:	46bd      	mov	sp, r7
 8025fea:	bd80      	pop	{r7, pc}
 8025fec:	200071ac 	.word	0x200071ac
 8025ff0:	20007160 	.word	0x20007160
 8025ff4:	200071ab 	.word	0x200071ab
 8025ff8:	200071a8 	.word	0x200071a8
 8025ffc:	0802a368 	.word	0x0802a368
 8026000:	20007164 	.word	0x20007164
 8026004:	20007158 	.word	0x20007158

08026008 <StopWatch_Update_saveLbl>:
/*This function using for set saved value to label*/
void StopWatch_Update_saveLbl(void){
 8026008:	b580      	push	{r7, lr}
 802600a:	b084      	sub	sp, #16
 802600c:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802600e:	4b13      	ldr	r3, [pc, #76]	; (802605c <StopWatch_Update_saveLbl+0x54>)
 8026010:	781b      	ldrb	r3, [r3, #0]
 8026012:	4618      	mov	r0, r3
 8026014:	4b12      	ldr	r3, [pc, #72]	; (8026060 <StopWatch_Update_saveLbl+0x58>)
 8026016:	781b      	ldrb	r3, [r3, #0]
 8026018:	461a      	mov	r2, r3
 802601a:	4b12      	ldr	r3, [pc, #72]	; (8026064 <StopWatch_Update_saveLbl+0x5c>)
 802601c:	781b      	ldrb	r3, [r3, #0]
 802601e:	4619      	mov	r1, r3
 8026020:	4b11      	ldr	r3, [pc, #68]	; (8026068 <StopWatch_Update_saveLbl+0x60>)
 8026022:	881b      	ldrh	r3, [r3, #0]
 8026024:	9302      	str	r3, [sp, #8]
 8026026:	9101      	str	r1, [sp, #4]
 8026028:	9200      	str	r2, [sp, #0]
 802602a:	4603      	mov	r3, r0
 802602c:	4a0f      	ldr	r2, [pc, #60]	; (802606c <StopWatch_Update_saveLbl+0x64>)
 802602e:	2140      	movs	r1, #64	; 0x40
 8026030:	480f      	ldr	r0, [pc, #60]	; (8026070 <StopWatch_Update_saveLbl+0x68>)
 8026032:	f001 fddd 	bl	8027bf0 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8026036:	4b0f      	ldr	r3, [pc, #60]	; (8026074 <StopWatch_Update_saveLbl+0x6c>)
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	490d      	ldr	r1, [pc, #52]	; (8026070 <StopWatch_Update_saveLbl+0x68>)
 802603c:	4618      	mov	r0, r3
 802603e:	f7f3 fb9b 	bl	8019778 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 8026042:	4b0c      	ldr	r3, [pc, #48]	; (8026074 <StopWatch_Update_saveLbl+0x6c>)
 8026044:	6818      	ldr	r0, [r3, #0]
 8026046:	2346      	movs	r3, #70	; 0x46
 8026048:	9300      	str	r3, [sp, #0]
 802604a:	2300      	movs	r3, #0
 802604c:	2200      	movs	r2, #0
 802604e:	2100      	movs	r1, #0
 8026050:	f7e0 f948 	bl	80062e4 <lv_obj_align>
}
 8026054:	bf00      	nop
 8026056:	46bd      	mov	sp, r7
 8026058:	bd80      	pop	{r7, pc}
 802605a:	bf00      	nop
 802605c:	200071ac 	.word	0x200071ac
 8026060:	20007160 	.word	0x20007160
 8026064:	200071ab 	.word	0x200071ab
 8026068:	200071a8 	.word	0x200071a8
 802606c:	0802a368 	.word	0x0802a368
 8026070:	20007164 	.word	0x20007164
 8026074:	2000715c 	.word	0x2000715c

08026078 <StopWatch_Update_StatuImg>:
/*This function using for set statu image
 * @param statu using for select count statu
 * 0 -> stop statu
 * 1 -> pause statu
 * 2 -> play statu*/
void StopWatch_Update_StatuImg(uint8_t statu){
 8026078:	b580      	push	{r7, lr}
 802607a:	b082      	sub	sp, #8
 802607c:	af00      	add	r7, sp, #0
 802607e:	4603      	mov	r3, r0
 8026080:	71fb      	strb	r3, [r7, #7]
	if(0==statu){
 8026082:	79fb      	ldrb	r3, [r7, #7]
 8026084:	2b00      	cmp	r3, #0
 8026086:	d111      	bne.n	80260ac <StopWatch_Update_StatuImg+0x34>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8026088:	4b1f      	ldr	r3, [pc, #124]	; (8026108 <StopWatch_Update_StatuImg+0x90>)
 802608a:	781b      	ldrb	r3, [r3, #0]
 802608c:	2b00      	cmp	r3, #0
 802608e:	d006      	beq.n	802609e <StopWatch_Update_StatuImg+0x26>
 8026090:	4b1e      	ldr	r3, [pc, #120]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 8026092:	681b      	ldr	r3, [r3, #0]
 8026094:	491e      	ldr	r1, [pc, #120]	; (8026110 <StopWatch_Update_StatuImg+0x98>)
 8026096:	4618      	mov	r0, r3
 8026098:	f7f2 ff4e 	bl	8018f38 <lv_img_set_src>
	}
	else if(2==statu){
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
	}
}
 802609c:	e02f      	b.n	80260fe <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 802609e:	4b1b      	ldr	r3, [pc, #108]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 80260a0:	681b      	ldr	r3, [r3, #0]
 80260a2:	491c      	ldr	r1, [pc, #112]	; (8026114 <StopWatch_Update_StatuImg+0x9c>)
 80260a4:	4618      	mov	r0, r3
 80260a6:	f7f2 ff47 	bl	8018f38 <lv_img_set_src>
}
 80260aa:	e028      	b.n	80260fe <StopWatch_Update_StatuImg+0x86>
	else if(1==statu){
 80260ac:	79fb      	ldrb	r3, [r7, #7]
 80260ae:	2b01      	cmp	r3, #1
 80260b0:	d111      	bne.n	80260d6 <StopWatch_Update_StatuImg+0x5e>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &pauseBlack50x50);
 80260b2:	4b15      	ldr	r3, [pc, #84]	; (8026108 <StopWatch_Update_StatuImg+0x90>)
 80260b4:	781b      	ldrb	r3, [r3, #0]
 80260b6:	2b00      	cmp	r3, #0
 80260b8:	d006      	beq.n	80260c8 <StopWatch_Update_StatuImg+0x50>
 80260ba:	4b14      	ldr	r3, [pc, #80]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	4916      	ldr	r1, [pc, #88]	; (8026118 <StopWatch_Update_StatuImg+0xa0>)
 80260c0:	4618      	mov	r0, r3
 80260c2:	f7f2 ff39 	bl	8018f38 <lv_img_set_src>
}
 80260c6:	e01a      	b.n	80260fe <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &pauseWhite50x50);
 80260c8:	4b10      	ldr	r3, [pc, #64]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	4913      	ldr	r1, [pc, #76]	; (802611c <StopWatch_Update_StatuImg+0xa4>)
 80260ce:	4618      	mov	r0, r3
 80260d0:	f7f2 ff32 	bl	8018f38 <lv_img_set_src>
}
 80260d4:	e013      	b.n	80260fe <StopWatch_Update_StatuImg+0x86>
	else if(2==statu){
 80260d6:	79fb      	ldrb	r3, [r7, #7]
 80260d8:	2b02      	cmp	r3, #2
 80260da:	d110      	bne.n	80260fe <StopWatch_Update_StatuImg+0x86>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
 80260dc:	4b0a      	ldr	r3, [pc, #40]	; (8026108 <StopWatch_Update_StatuImg+0x90>)
 80260de:	781b      	ldrb	r3, [r3, #0]
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	d006      	beq.n	80260f2 <StopWatch_Update_StatuImg+0x7a>
 80260e4:	4b09      	ldr	r3, [pc, #36]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	490d      	ldr	r1, [pc, #52]	; (8026120 <StopWatch_Update_StatuImg+0xa8>)
 80260ea:	4618      	mov	r0, r3
 80260ec:	f7f2 ff24 	bl	8018f38 <lv_img_set_src>
}
 80260f0:	e005      	b.n	80260fe <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
 80260f2:	4b06      	ldr	r3, [pc, #24]	; (802610c <StopWatch_Update_StatuImg+0x94>)
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	490b      	ldr	r1, [pc, #44]	; (8026124 <StopWatch_Update_StatuImg+0xac>)
 80260f8:	4618      	mov	r0, r3
 80260fa:	f7f2 ff1d 	bl	8018f38 <lv_img_set_src>
}
 80260fe:	bf00      	nop
 8026100:	3708      	adds	r7, #8
 8026102:	46bd      	mov	sp, r7
 8026104:	bd80      	pop	{r7, pc}
 8026106:	bf00      	nop
 8026108:	20007154 	.word	0x20007154
 802610c:	200071a4 	.word	0x200071a4
 8026110:	08040fb0 	.word	0x08040fb0
 8026114:	08042344 	.word	0x08042344
 8026118:	0803aee8 	.word	0x0803aee8
 802611c:	0803c27c 	.word	0x0803c27c
 8026120:	0803d610 	.word	0x0803d610
 8026124:	0803e9a4 	.word	0x0803e9a4

08026128 <StopWatch_TaskControllerSet>:



//Setter Getter Functions

void StopWatch_TaskControllerSet(bool active){
 8026128:	b480      	push	{r7}
 802612a:	b083      	sub	sp, #12
 802612c:	af00      	add	r7, sp, #0
 802612e:	4603      	mov	r3, r0
 8026130:	71fb      	strb	r3, [r7, #7]
	SW_taskController = active;
 8026132:	4a04      	ldr	r2, [pc, #16]	; (8026144 <StopWatch_TaskControllerSet+0x1c>)
 8026134:	79fb      	ldrb	r3, [r7, #7]
 8026136:	7013      	strb	r3, [r2, #0]
}
 8026138:	bf00      	nop
 802613a:	370c      	adds	r7, #12
 802613c:	46bd      	mov	sp, r7
 802613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026142:	4770      	bx	lr
 8026144:	200071ad 	.word	0x200071ad

08026148 <StopWatch_TaskControllerGet>:
bool StopWatch_TaskControllerGet(void){
 8026148:	b480      	push	{r7}
 802614a:	af00      	add	r7, sp, #0
	return SW_taskController;
 802614c:	4b03      	ldr	r3, [pc, #12]	; (802615c <StopWatch_TaskControllerGet+0x14>)
 802614e:	781b      	ldrb	r3, [r3, #0]
}
 8026150:	4618      	mov	r0, r3
 8026152:	46bd      	mov	sp, r7
 8026154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026158:	4770      	bx	lr
 802615a:	bf00      	nop
 802615c:	200071ad 	.word	0x200071ad

08026160 <tos_getBatteryVAl>:
#include "../../lvgl/lvgl.h"

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp);
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal);

void tos_getBatteryVAl(uint8_t batteryVal,uint8_t Screen){
 8026160:	b580      	push	{r7, lr}
 8026162:	b084      	sub	sp, #16
 8026164:	af00      	add	r7, sp, #0
 8026166:	4603      	mov	r3, r0
 8026168:	460a      	mov	r2, r1
 802616a:	71fb      	strb	r3, [r7, #7]
 802616c:	4613      	mov	r3, r2
 802616e:	71bb      	strb	r3, [r7, #6]
	static uint8_t batteryValueTemp = 0;
	if (batteryVal != batteryValueTemp){
 8026170:	4b12      	ldr	r3, [pc, #72]	; (80261bc <tos_getBatteryVAl+0x5c>)
 8026172:	781b      	ldrb	r3, [r3, #0]
 8026174:	79fa      	ldrb	r2, [r7, #7]
 8026176:	429a      	cmp	r2, r3
 8026178:	d01d      	beq.n	80261b6 <tos_getBatteryVAl+0x56>
	char * batterySym= tos_BatteryVal_Sym_Helper(batteryVal,batteryValueTemp);
 802617a:	4b10      	ldr	r3, [pc, #64]	; (80261bc <tos_getBatteryVAl+0x5c>)
 802617c:	781a      	ldrb	r2, [r3, #0]
 802617e:	79fb      	ldrb	r3, [r7, #7]
 8026180:	4611      	mov	r1, r2
 8026182:	4618      	mov	r0, r3
 8026184:	f000 f81c 	bl	80261c0 <tos_BatteryVal_Sym_Helper>
 8026188:	60f8      	str	r0, [r7, #12]
	lv_color_t batteryClr = tos_BatteryVal_SymColor_Helper(batteryVal);
 802618a:	79fb      	ldrb	r3, [r7, #7]
 802618c:	4618      	mov	r0, r3
 802618e:	f000 f889 	bl	80262a4 <tos_BatteryVal_SymColor_Helper>
 8026192:	4603      	mov	r3, r0
 8026194:	813b      	strh	r3, [r7, #8]
	switch(Screen){
 8026196:	79bb      	ldrb	r3, [r7, #6]
 8026198:	2b00      	cmp	r3, #0
 802619a:	d002      	beq.n	80261a2 <tos_getBatteryVAl+0x42>
 802619c:	2b01      	cmp	r3, #1
 802619e:	d005      	beq.n	80261ac <tos_getBatteryVAl+0x4c>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
	/*case TOS_SCREEN_STOPWATCH_: tos_MainScreen_Init(1,1);break;
	case TOS_SCREEN_NOTIFICATIONS_: break;*/
	default: return;
 80261a0:	e009      	b.n	80261b6 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
 80261a2:	8939      	ldrh	r1, [r7, #8]
 80261a4:	68f8      	ldr	r0, [r7, #12]
 80261a6:	f7fb f8c7 	bl	8021338 <MainScreen_SetBatteryVal>
 80261aa:	e004      	b.n	80261b6 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
 80261ac:	8939      	ldrh	r1, [r7, #8]
 80261ae:	68f8      	ldr	r0, [r7, #12]
 80261b0:	f7fe ff3e 	bl	8025030 <SleepModeScreen_SetBatteryVal>
 80261b4:	bf00      	nop
	}

	}
}
 80261b6:	3710      	adds	r7, #16
 80261b8:	46bd      	mov	sp, r7
 80261ba:	bd80      	pop	{r7, pc}
 80261bc:	20006888 	.word	0x20006888

080261c0 <tos_BatteryVal_Sym_Helper>:

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp){
 80261c0:	b480      	push	{r7}
 80261c2:	b083      	sub	sp, #12
 80261c4:	af00      	add	r7, sp, #0
 80261c6:	4603      	mov	r3, r0
 80261c8:	460a      	mov	r2, r1
 80261ca:	71fb      	strb	r3, [r7, #7]
 80261cc:	4613      	mov	r3, r2
 80261ce:	71bb      	strb	r3, [r7, #6]
		if(batteryVal <= batteryValueTemp){
 80261d0:	79fa      	ldrb	r2, [r7, #7]
 80261d2:	79bb      	ldrb	r3, [r7, #6]
 80261d4:	429a      	cmp	r2, r3
 80261d6:	d824      	bhi.n	8026222 <tos_BatteryVal_Sym_Helper+0x62>
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 80261d8:	79fb      	ldrb	r3, [r7, #7]
 80261da:	2b09      	cmp	r3, #9
 80261dc:	d801      	bhi.n	80261e2 <tos_BatteryVal_Sym_Helper+0x22>
 80261de:	4b27      	ldr	r3, [pc, #156]	; (802627c <tos_BatteryVal_Sym_Helper+0xbc>)
 80261e0:	e045      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_BATTERY_1;
 80261e2:	79fb      	ldrb	r3, [r7, #7]
 80261e4:	2b09      	cmp	r3, #9
 80261e6:	d904      	bls.n	80261f2 <tos_BatteryVal_Sym_Helper+0x32>
 80261e8:	79fb      	ldrb	r3, [r7, #7]
 80261ea:	2b18      	cmp	r3, #24
 80261ec:	d801      	bhi.n	80261f2 <tos_BatteryVal_Sym_Helper+0x32>
 80261ee:	4b24      	ldr	r3, [pc, #144]	; (8026280 <tos_BatteryVal_Sym_Helper+0xc0>)
 80261f0:	e03d      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_BATTERY_2;
 80261f2:	79fb      	ldrb	r3, [r7, #7]
 80261f4:	2b18      	cmp	r3, #24
 80261f6:	d904      	bls.n	8026202 <tos_BatteryVal_Sym_Helper+0x42>
 80261f8:	79fb      	ldrb	r3, [r7, #7]
 80261fa:	2b31      	cmp	r3, #49	; 0x31
 80261fc:	d801      	bhi.n	8026202 <tos_BatteryVal_Sym_Helper+0x42>
 80261fe:	4b21      	ldr	r3, [pc, #132]	; (8026284 <tos_BatteryVal_Sym_Helper+0xc4>)
 8026200:	e035      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_BATTERY_3;
 8026202:	79fb      	ldrb	r3, [r7, #7]
 8026204:	2b31      	cmp	r3, #49	; 0x31
 8026206:	d904      	bls.n	8026212 <tos_BatteryVal_Sym_Helper+0x52>
 8026208:	79fb      	ldrb	r3, [r7, #7]
 802620a:	2b4f      	cmp	r3, #79	; 0x4f
 802620c:	d801      	bhi.n	8026212 <tos_BatteryVal_Sym_Helper+0x52>
 802620e:	4b1e      	ldr	r3, [pc, #120]	; (8026288 <tos_BatteryVal_Sym_Helper+0xc8>)
 8026210:	e02d      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_BATTERY_FULL;
 8026212:	79fb      	ldrb	r3, [r7, #7]
 8026214:	2b4f      	cmp	r3, #79	; 0x4f
 8026216:	d929      	bls.n	802626c <tos_BatteryVal_Sym_Helper+0xac>
 8026218:	79fb      	ldrb	r3, [r7, #7]
 802621a:	2b64      	cmp	r3, #100	; 0x64
 802621c:	d826      	bhi.n	802626c <tos_BatteryVal_Sym_Helper+0xac>
 802621e:	4b1b      	ldr	r3, [pc, #108]	; (802628c <tos_BatteryVal_Sym_Helper+0xcc>)
 8026220:	e025      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
	}else{
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 8026222:	79fb      	ldrb	r3, [r7, #7]
 8026224:	2b09      	cmp	r3, #9
 8026226:	d801      	bhi.n	802622c <tos_BatteryVal_Sym_Helper+0x6c>
 8026228:	4b14      	ldr	r3, [pc, #80]	; (802627c <tos_BatteryVal_Sym_Helper+0xbc>)
 802622a:	e020      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_1;
 802622c:	79fb      	ldrb	r3, [r7, #7]
 802622e:	2b09      	cmp	r3, #9
 8026230:	d904      	bls.n	802623c <tos_BatteryVal_Sym_Helper+0x7c>
 8026232:	79fb      	ldrb	r3, [r7, #7]
 8026234:	2b18      	cmp	r3, #24
 8026236:	d801      	bhi.n	802623c <tos_BatteryVal_Sym_Helper+0x7c>
 8026238:	4b15      	ldr	r3, [pc, #84]	; (8026290 <tos_BatteryVal_Sym_Helper+0xd0>)
 802623a:	e018      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_2;
 802623c:	79fb      	ldrb	r3, [r7, #7]
 802623e:	2b18      	cmp	r3, #24
 8026240:	d904      	bls.n	802624c <tos_BatteryVal_Sym_Helper+0x8c>
 8026242:	79fb      	ldrb	r3, [r7, #7]
 8026244:	2b31      	cmp	r3, #49	; 0x31
 8026246:	d801      	bhi.n	802624c <tos_BatteryVal_Sym_Helper+0x8c>
 8026248:	4b12      	ldr	r3, [pc, #72]	; (8026294 <tos_BatteryVal_Sym_Helper+0xd4>)
 802624a:	e010      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_3;
 802624c:	79fb      	ldrb	r3, [r7, #7]
 802624e:	2b31      	cmp	r3, #49	; 0x31
 8026250:	d904      	bls.n	802625c <tos_BatteryVal_Sym_Helper+0x9c>
 8026252:	79fb      	ldrb	r3, [r7, #7]
 8026254:	2b4f      	cmp	r3, #79	; 0x4f
 8026256:	d801      	bhi.n	802625c <tos_BatteryVal_Sym_Helper+0x9c>
 8026258:	4b0f      	ldr	r3, [pc, #60]	; (8026298 <tos_BatteryVal_Sym_Helper+0xd8>)
 802625a:	e008      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_FULL;
 802625c:	79fb      	ldrb	r3, [r7, #7]
 802625e:	2b4f      	cmp	r3, #79	; 0x4f
 8026260:	d904      	bls.n	802626c <tos_BatteryVal_Sym_Helper+0xac>
 8026262:	79fb      	ldrb	r3, [r7, #7]
 8026264:	2b64      	cmp	r3, #100	; 0x64
 8026266:	d801      	bhi.n	802626c <tos_BatteryVal_Sym_Helper+0xac>
 8026268:	4b0c      	ldr	r3, [pc, #48]	; (802629c <tos_BatteryVal_Sym_Helper+0xdc>)
 802626a:	e000      	b.n	802626e <tos_BatteryVal_Sym_Helper+0xae>
			}
		return "err";
 802626c:	4b0c      	ldr	r3, [pc, #48]	; (80262a0 <tos_BatteryVal_Sym_Helper+0xe0>)
}
 802626e:	4618      	mov	r0, r3
 8026270:	370c      	adds	r7, #12
 8026272:	46bd      	mov	sp, r7
 8026274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026278:	4770      	bx	lr
 802627a:	bf00      	nop
 802627c:	0802a39c 	.word	0x0802a39c
 8026280:	0802a3a0 	.word	0x0802a3a0
 8026284:	0802a3a4 	.word	0x0802a3a4
 8026288:	0802a3a8 	.word	0x0802a3a8
 802628c:	0802a3ac 	.word	0x0802a3ac
 8026290:	0802a3b0 	.word	0x0802a3b0
 8026294:	0802a3b8 	.word	0x0802a3b8
 8026298:	0802a3c0 	.word	0x0802a3c0
 802629c:	0802a3c8 	.word	0x0802a3c8
 80262a0:	0802a3d0 	.word	0x0802a3d0

080262a4 <tos_BatteryVal_SymColor_Helper>:
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal){
 80262a4:	b480      	push	{r7}
 80262a6:	b083      	sub	sp, #12
 80262a8:	af00      	add	r7, sp, #0
 80262aa:	4602      	mov	r2, r0
 80262ac:	71fa      	strb	r2, [r7, #7]
			if (batteryVal < 10 && batteryVal >= 0) return LV_COLOR_RED;
 80262ae:	79fa      	ldrb	r2, [r7, #7]
 80262b0:	2a09      	cmp	r2, #9
 80262b2:	d808      	bhi.n	80262c6 <tos_BatteryVal_SymColor_Helper+0x22>
 80262b4:	f36f 0302 	bfc	r3, #0, #3
 80262b8:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80262bc:	f36f 230c 	bfc	r3, #8, #5
 80262c0:	f36f 334f 	bfc	r3, #13, #3
 80262c4:	e038      	b.n	8026338 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_COLOR_RED;
 80262c6:	79fa      	ldrb	r2, [r7, #7]
 80262c8:	2a09      	cmp	r2, #9
 80262ca:	d90b      	bls.n	80262e4 <tos_BatteryVal_SymColor_Helper+0x40>
 80262cc:	79fa      	ldrb	r2, [r7, #7]
 80262ce:	2a18      	cmp	r2, #24
 80262d0:	d808      	bhi.n	80262e4 <tos_BatteryVal_SymColor_Helper+0x40>
 80262d2:	f36f 0302 	bfc	r3, #0, #3
 80262d6:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80262da:	f36f 230c 	bfc	r3, #8, #5
 80262de:	f36f 334f 	bfc	r3, #13, #3
 80262e2:	e029      	b.n	8026338 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_COLOR_ORANGE;
 80262e4:	79fa      	ldrb	r2, [r7, #7]
 80262e6:	2a18      	cmp	r2, #24
 80262e8:	d905      	bls.n	80262f6 <tos_BatteryVal_SymColor_Helper+0x52>
 80262ea:	79fa      	ldrb	r2, [r7, #7]
 80262ec:	2a31      	cmp	r2, #49	; 0x31
 80262ee:	d802      	bhi.n	80262f6 <tos_BatteryVal_SymColor_Helper+0x52>
 80262f0:	4b14      	ldr	r3, [pc, #80]	; (8026344 <tos_BatteryVal_SymColor_Helper+0xa0>)
 80262f2:	881b      	ldrh	r3, [r3, #0]
 80262f4:	e020      	b.n	8026338 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_COLOR_ORANGE;
 80262f6:	79fa      	ldrb	r2, [r7, #7]
 80262f8:	2a31      	cmp	r2, #49	; 0x31
 80262fa:	d905      	bls.n	8026308 <tos_BatteryVal_SymColor_Helper+0x64>
 80262fc:	79fa      	ldrb	r2, [r7, #7]
 80262fe:	2a4f      	cmp	r2, #79	; 0x4f
 8026300:	d802      	bhi.n	8026308 <tos_BatteryVal_SymColor_Helper+0x64>
 8026302:	4b10      	ldr	r3, [pc, #64]	; (8026344 <tos_BatteryVal_SymColor_Helper+0xa0>)
 8026304:	881b      	ldrh	r3, [r3, #0]
 8026306:	e017      	b.n	8026338 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_COLOR_GREEN;
 8026308:	79fa      	ldrb	r2, [r7, #7]
 802630a:	2a4f      	cmp	r2, #79	; 0x4f
 802630c:	d90c      	bls.n	8026328 <tos_BatteryVal_SymColor_Helper+0x84>
 802630e:	79fa      	ldrb	r2, [r7, #7]
 8026310:	2a64      	cmp	r2, #100	; 0x64
 8026312:	d809      	bhi.n	8026328 <tos_BatteryVal_SymColor_Helper+0x84>
 8026314:	2204      	movs	r2, #4
 8026316:	f362 0302 	bfi	r3, r2, #0, #3
 802631a:	f36f 03c7 	bfc	r3, #3, #5
 802631e:	f36f 230c 	bfc	r3, #8, #5
 8026322:	f36f 334f 	bfc	r3, #13, #3
 8026326:	e007      	b.n	8026338 <tos_BatteryVal_SymColor_Helper+0x94>

			return LV_COLOR_BLUE;
 8026328:	f36f 0302 	bfc	r3, #0, #3
 802632c:	f36f 03c7 	bfc	r3, #3, #5
 8026330:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8026334:	f36f 334f 	bfc	r3, #13, #3
}
 8026338:	4618      	mov	r0, r3
 802633a:	370c      	adds	r7, #12
 802633c:	46bd      	mov	sp, r7
 802633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026342:	4770      	bx	lr
 8026344:	0802a3d4 	.word	0x0802a3d4

08026348 <tos_BluetoothReceiverAndTransmitter>:
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc);
void tos_Bluetooth_GetAndPushNotification(void);
void tos_Bluetooth_SetBatteryVal(uint8_t batteryVal);
void tos_Bluetooth_SetStepsVal(uint8_t stepsVal);

void tos_BluetoothReceiverAndTransmitter(RTC_HandleTypeDef *hrtc){
 8026348:	b580      	push	{r7, lr}
 802634a:	b082      	sub	sp, #8
 802634c:	af00      	add	r7, sp, #0
 802634e:	6078      	str	r0, [r7, #4]
	if(bluetoothEnable){
 8026350:	4b06      	ldr	r3, [pc, #24]	; (802636c <tos_BluetoothReceiverAndTransmitter+0x24>)
 8026352:	781b      	ldrb	r3, [r3, #0]
 8026354:	2b00      	cmp	r3, #0
 8026356:	d004      	beq.n	8026362 <tos_BluetoothReceiverAndTransmitter+0x1a>
		tos_Bluetooth_FirstConnectGetValues(hrtc);
 8026358:	6878      	ldr	r0, [r7, #4]
 802635a:	f000 f809 	bl	8026370 <tos_Bluetooth_FirstConnectGetValues>
		tos_Bluetooth_GetAndPushNotification();
 802635e:	f000 f8e9 	bl	8026534 <tos_Bluetooth_GetAndPushNotification>
		//tos_Bluetooth_SetBatteryVal(BluetoothBatteryVal);
		//tos_Bluetooth_SetStepsVal(BluetoothStepsVal);
	}
}
 8026362:	bf00      	nop
 8026364:	3708      	adds	r7, #8
 8026366:	46bd      	mov	sp, r7
 8026368:	bd80      	pop	{r7, pc}
 802636a:	bf00      	nop
 802636c:	2000284c 	.word	0x2000284c

08026370 <tos_Bluetooth_FirstConnectGetValues>:
/*This function using for first connect get time and date values and set Rtc
 * @param hrtc using for get rtc module*/
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc){
 8026370:	b580      	push	{r7, lr}
 8026372:	b084      	sub	sp, #16
 8026374:	af02      	add	r7, sp, #8
 8026376:	6078      	str	r0, [r7, #4]
	  isConnected=BLUETOOTH_IS_CONNECT;
 8026378:	f44f 7100 	mov.w	r1, #512	; 0x200
 802637c:	485a      	ldr	r0, [pc, #360]	; (80264e8 <tos_Bluetooth_FirstConnectGetValues+0x178>)
 802637e:	f7dc f96b 	bl	8002658 <HAL_GPIO_ReadPin>
 8026382:	4603      	mov	r3, r0
 8026384:	2b00      	cmp	r3, #0
 8026386:	bf14      	ite	ne
 8026388:	2301      	movne	r3, #1
 802638a:	2300      	moveq	r3, #0
 802638c:	b2da      	uxtb	r2, r3
 802638e:	4b57      	ldr	r3, [pc, #348]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8026390:	701a      	strb	r2, [r3, #0]
	  if(befConnectVal!=isConnected){
 8026392:	4b57      	ldr	r3, [pc, #348]	; (80264f0 <tos_Bluetooth_FirstConnectGetValues+0x180>)
 8026394:	781a      	ldrb	r2, [r3, #0]
 8026396:	4b55      	ldr	r3, [pc, #340]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8026398:	781b      	ldrb	r3, [r3, #0]
 802639a:	429a      	cmp	r2, r3
 802639c:	f000 80a0 	beq.w	80264e0 <tos_Bluetooth_FirstConnectGetValues+0x170>
	  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "connected", 20,5);
 80263a0:	2305      	movs	r3, #5
 80263a2:	2214      	movs	r2, #20
 80263a4:	4953      	ldr	r1, [pc, #332]	; (80264f4 <tos_Bluetooth_FirstConnectGetValues+0x184>)
 80263a6:	4854      	ldr	r0, [pc, #336]	; (80264f8 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 80263a8:	f7de f8c5 	bl	8004536 <HAL_UART_Transmit>
	  if(isConnected){
 80263ac:	4b4f      	ldr	r3, [pc, #316]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 80263ae:	781b      	ldrb	r3, [r3, #0]
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	f000 8087 	beq.w	80264c4 <tos_Bluetooth_FirstConnectGetValues+0x154>
		  timeTryAgain:
 80263b6:	bf00      	nop
		  if(!isConnected) return;
 80263b8:	4b4c      	ldr	r3, [pc, #304]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 80263ba:	781b      	ldrb	r3, [r3, #0]
 80263bc:	f083 0301 	eor.w	r3, r3, #1
 80263c0:	b2db      	uxtb	r3, r3
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	f040 8089 	bne.w	80264da <tos_Bluetooth_FirstConnectGetValues+0x16a>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 13, 100);
 80263c8:	2364      	movs	r3, #100	; 0x64
 80263ca:	220d      	movs	r2, #13
 80263cc:	494b      	ldr	r1, [pc, #300]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263ce:	484a      	ldr	r0, [pc, #296]	; (80264f8 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 80263d0:	f7de f94a 	bl	8004668 <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 80263d4:	4b4a      	ldr	r3, [pc, #296]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80263d6:	4a49      	ldr	r2, [pc, #292]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263d8:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='t' && rx_buffer[1]=='i' && rx_buffer[2]=='m' && rx_buffer[3]=='e'))
 80263da:	4b48      	ldr	r3, [pc, #288]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263dc:	781b      	ldrb	r3, [r3, #0]
 80263de:	2b74      	cmp	r3, #116	; 0x74
 80263e0:	d1e9      	bne.n	80263b6 <tos_Bluetooth_FirstConnectGetValues+0x46>
 80263e2:	4b46      	ldr	r3, [pc, #280]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263e4:	785b      	ldrb	r3, [r3, #1]
 80263e6:	2b69      	cmp	r3, #105	; 0x69
 80263e8:	d1e5      	bne.n	80263b6 <tos_Bluetooth_FirstConnectGetValues+0x46>
 80263ea:	4b44      	ldr	r3, [pc, #272]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263ec:	789b      	ldrb	r3, [r3, #2]
 80263ee:	2b6d      	cmp	r3, #109	; 0x6d
 80263f0:	d1e1      	bne.n	80263b6 <tos_Bluetooth_FirstConnectGetValues+0x46>
 80263f2:	4b42      	ldr	r3, [pc, #264]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80263f4:	78db      	ldrb	r3, [r3, #3]
 80263f6:	2b65      	cmp	r3, #101	; 0x65
 80263f8:	d1dd      	bne.n	80263b6 <tos_Bluetooth_FirstConnectGetValues+0x46>
			  goto timeTryAgain;
		  else{
			  sscanf(tmp,"time %2d %2d %2d",&time[0],&time[1],&time[2]);
 80263fa:	4b41      	ldr	r3, [pc, #260]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80263fc:	6818      	ldr	r0, [r3, #0]
 80263fe:	4b41      	ldr	r3, [pc, #260]	; (8026504 <tos_Bluetooth_FirstConnectGetValues+0x194>)
 8026400:	9300      	str	r3, [sp, #0]
 8026402:	4b41      	ldr	r3, [pc, #260]	; (8026508 <tos_Bluetooth_FirstConnectGetValues+0x198>)
 8026404:	4a41      	ldr	r2, [pc, #260]	; (802650c <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8026406:	4942      	ldr	r1, [pc, #264]	; (8026510 <tos_Bluetooth_FirstConnectGetValues+0x1a0>)
 8026408:	f001 fc26 	bl	8027c58 <siscanf>
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetTime", 20,50);
 802640c:	2332      	movs	r3, #50	; 0x32
 802640e:	2214      	movs	r2, #20
 8026410:	4940      	ldr	r1, [pc, #256]	; (8026514 <tos_Bluetooth_FirstConnectGetValues+0x1a4>)
 8026412:	4839      	ldr	r0, [pc, #228]	; (80264f8 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8026414:	f7de f88f 	bl	8004536 <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8026418:	4b38      	ldr	r3, [pc, #224]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802641a:	4a3f      	ldr	r2, [pc, #252]	; (8026518 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 802641c:	8811      	ldrh	r1, [r2, #0]
 802641e:	7892      	ldrb	r2, [r2, #2]
 8026420:	8019      	strh	r1, [r3, #0]
 8026422:	709a      	strb	r2, [r3, #2]
 8026424:	e000      	b.n	8026428 <tos_Bluetooth_FirstConnectGetValues+0xb8>
		  }
		 dateTryAgain:
 8026426:	bf00      	nop
		  if(!isConnected) return;
 8026428:	4b30      	ldr	r3, [pc, #192]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 802642a:	781b      	ldrb	r3, [r3, #0]
 802642c:	f083 0301 	eor.w	r3, r3, #1
 8026430:	b2db      	uxtb	r3, r3
 8026432:	2b00      	cmp	r3, #0
 8026434:	d153      	bne.n	80264de <tos_Bluetooth_FirstConnectGetValues+0x16e>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 15, 100);
 8026436:	2364      	movs	r3, #100	; 0x64
 8026438:	220f      	movs	r2, #15
 802643a:	4930      	ldr	r1, [pc, #192]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802643c:	482e      	ldr	r0, [pc, #184]	; (80264f8 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 802643e:	f7de f913 	bl	8004668 <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 8026442:	4b2f      	ldr	r3, [pc, #188]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8026444:	4a2d      	ldr	r2, [pc, #180]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026446:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='d' && rx_buffer[1]=='a' && rx_buffer[2]=='t' && rx_buffer[3]=='e'))
 8026448:	4b2c      	ldr	r3, [pc, #176]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802644a:	781b      	ldrb	r3, [r3, #0]
 802644c:	2b64      	cmp	r3, #100	; 0x64
 802644e:	d1ea      	bne.n	8026426 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 8026450:	4b2a      	ldr	r3, [pc, #168]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026452:	785b      	ldrb	r3, [r3, #1]
 8026454:	2b61      	cmp	r3, #97	; 0x61
 8026456:	d1e6      	bne.n	8026426 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 8026458:	4b28      	ldr	r3, [pc, #160]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802645a:	789b      	ldrb	r3, [r3, #2]
 802645c:	2b74      	cmp	r3, #116	; 0x74
 802645e:	d1e2      	bne.n	8026426 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 8026460:	4b26      	ldr	r3, [pc, #152]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026462:	78db      	ldrb	r3, [r3, #3]
 8026464:	2b65      	cmp	r3, #101	; 0x65
 8026466:	d1de      	bne.n	8026426 <tos_Bluetooth_FirstConnectGetValues+0xb6>
			  goto dateTryAgain;
		  else{
			  sscanf(tmp,"date %2d %2d %2d",
 8026468:	4b25      	ldr	r3, [pc, #148]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 802646a:	6818      	ldr	r0, [r3, #0]
 802646c:	4b2b      	ldr	r3, [pc, #172]	; (802651c <tos_Bluetooth_FirstConnectGetValues+0x1ac>)
 802646e:	9300      	str	r3, [sp, #0]
 8026470:	4b2b      	ldr	r3, [pc, #172]	; (8026520 <tos_Bluetooth_FirstConnectGetValues+0x1b0>)
 8026472:	4a2c      	ldr	r2, [pc, #176]	; (8026524 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 8026474:	492c      	ldr	r1, [pc, #176]	; (8026528 <tos_Bluetooth_FirstConnectGetValues+0x1b8>)
 8026476:	f001 fbef 	bl	8027c58 <siscanf>
			  					  &date[0],&date[1],&date[2]);
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetDate", 20,50);
 802647a:	2332      	movs	r3, #50	; 0x32
 802647c:	2214      	movs	r2, #20
 802647e:	492b      	ldr	r1, [pc, #172]	; (802652c <tos_Bluetooth_FirstConnectGetValues+0x1bc>)
 8026480:	481d      	ldr	r0, [pc, #116]	; (80264f8 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8026482:	f7de f858 	bl	8004536 <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8026486:	4b1d      	ldr	r3, [pc, #116]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026488:	4a23      	ldr	r2, [pc, #140]	; (8026518 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 802648a:	8811      	ldrh	r1, [r2, #0]
 802648c:	7892      	ldrb	r2, [r2, #2]
 802648e:	8019      	strh	r1, [r3, #0]
 8026490:	709a      	strb	r2, [r3, #2]
		  }
		  tos_RTC_SetDate(hrtc,date[0],date[1],date[2]);
 8026492:	4b24      	ldr	r3, [pc, #144]	; (8026524 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 8026494:	881b      	ldrh	r3, [r3, #0]
 8026496:	b2d9      	uxtb	r1, r3
 8026498:	4b22      	ldr	r3, [pc, #136]	; (8026524 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 802649a:	885b      	ldrh	r3, [r3, #2]
 802649c:	b2da      	uxtb	r2, r3
 802649e:	4b21      	ldr	r3, [pc, #132]	; (8026524 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 80264a0:	889b      	ldrh	r3, [r3, #4]
 80264a2:	b2db      	uxtb	r3, r3
 80264a4:	6878      	ldr	r0, [r7, #4]
 80264a6:	f000 fd91 	bl	8026fcc <tos_RTC_SetDate>
		  tos_RTC_SetTime(hrtc,time[0],time[1],time[2]);
 80264aa:	4b18      	ldr	r3, [pc, #96]	; (802650c <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 80264ac:	881b      	ldrh	r3, [r3, #0]
 80264ae:	b2d9      	uxtb	r1, r3
 80264b0:	4b16      	ldr	r3, [pc, #88]	; (802650c <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 80264b2:	885b      	ldrh	r3, [r3, #2]
 80264b4:	b2da      	uxtb	r2, r3
 80264b6:	4b15      	ldr	r3, [pc, #84]	; (802650c <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 80264b8:	889b      	ldrh	r3, [r3, #4]
 80264ba:	b2db      	uxtb	r3, r3
 80264bc:	6878      	ldr	r0, [r7, #4]
 80264be:	f000 fd63 	bl	8026f88 <tos_RTC_SetTime>
 80264c2:	e005      	b.n	80264d0 <tos_Bluetooth_FirstConnectGetValues+0x160>
	  }else{
		  tmp=&rx_buffer[0];
 80264c4:	4b0e      	ldr	r3, [pc, #56]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80264c6:	4a0d      	ldr	r2, [pc, #52]	; (80264fc <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264c8:	601a      	str	r2, [r3, #0]
		  tmp ="notConnected";
 80264ca:	4b0d      	ldr	r3, [pc, #52]	; (8026500 <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80264cc:	4a18      	ldr	r2, [pc, #96]	; (8026530 <tos_Bluetooth_FirstConnectGetValues+0x1c0>)
 80264ce:	601a      	str	r2, [r3, #0]
	  }
	  befConnectVal=isConnected;
 80264d0:	4b06      	ldr	r3, [pc, #24]	; (80264ec <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 80264d2:	781a      	ldrb	r2, [r3, #0]
 80264d4:	4b06      	ldr	r3, [pc, #24]	; (80264f0 <tos_Bluetooth_FirstConnectGetValues+0x180>)
 80264d6:	701a      	strb	r2, [r3, #0]
 80264d8:	e002      	b.n	80264e0 <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 80264da:	bf00      	nop
 80264dc:	e000      	b.n	80264e0 <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 80264de:	bf00      	nop
	  }
}
 80264e0:	3708      	adds	r7, #8
 80264e2:	46bd      	mov	sp, r7
 80264e4:	bd80      	pop	{r7, pc}
 80264e6:	bf00      	nop
 80264e8:	40020800 	.word	0x40020800
 80264ec:	20007298 	.word	0x20007298
 80264f0:	200073ba 	.word	0x200073ba
 80264f4:	0802a3d8 	.word	0x0802a3d8
 80264f8:	2000694c 	.word	0x2000694c
 80264fc:	2000729c 	.word	0x2000729c
 8026500:	200071b0 	.word	0x200071b0
 8026504:	200073b0 	.word	0x200073b0
 8026508:	200073ae 	.word	0x200073ae
 802650c:	200073ac 	.word	0x200073ac
 8026510:	0802a3e4 	.word	0x0802a3e4
 8026514:	0802a3f8 	.word	0x0802a3f8
 8026518:	0802a404 	.word	0x0802a404
 802651c:	200073b8 	.word	0x200073b8
 8026520:	200073b6 	.word	0x200073b6
 8026524:	200073b4 	.word	0x200073b4
 8026528:	0802a408 	.word	0x0802a408
 802652c:	0802a41c 	.word	0x0802a41c
 8026530:	0802a428 	.word	0x0802a428

08026534 <tos_Bluetooth_GetAndPushNotification>:

/*This function using for get notifications and push notification list*/
void tos_Bluetooth_GetAndPushNotification(void){
 8026534:	b580      	push	{r7, lr}
 8026536:	af00      	add	r7, sp, #0
	if(isConnected){
 8026538:	4b1f      	ldr	r3, [pc, #124]	; (80265b8 <tos_Bluetooth_GetAndPushNotification+0x84>)
 802653a:	781b      	ldrb	r3, [r3, #0]
 802653c:	2b00      	cmp	r3, #0
 802653e:	d039      	beq.n	80265b4 <tos_Bluetooth_GetAndPushNotification+0x80>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 250, 100);
 8026540:	2364      	movs	r3, #100	; 0x64
 8026542:	22fa      	movs	r2, #250	; 0xfa
 8026544:	491d      	ldr	r1, [pc, #116]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 8026546:	481e      	ldr	r0, [pc, #120]	; (80265c0 <tos_Bluetooth_GetAndPushNotification+0x8c>)
 8026548:	f7de f88e 	bl	8004668 <HAL_UART_Receive>
		  if(rx_buffer[0]=='n' && rx_buffer[1]=='o' && rx_buffer[2]=='t' && rx_buffer[3]=='f'){
 802654c:	4b1b      	ldr	r3, [pc, #108]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 802654e:	781b      	ldrb	r3, [r3, #0]
 8026550:	2b6e      	cmp	r3, #110	; 0x6e
 8026552:	d12f      	bne.n	80265b4 <tos_Bluetooth_GetAndPushNotification+0x80>
 8026554:	4b19      	ldr	r3, [pc, #100]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 8026556:	785b      	ldrb	r3, [r3, #1]
 8026558:	2b6f      	cmp	r3, #111	; 0x6f
 802655a:	d12b      	bne.n	80265b4 <tos_Bluetooth_GetAndPushNotification+0x80>
 802655c:	4b17      	ldr	r3, [pc, #92]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 802655e:	789b      	ldrb	r3, [r3, #2]
 8026560:	2b74      	cmp	r3, #116	; 0x74
 8026562:	d127      	bne.n	80265b4 <tos_Bluetooth_GetAndPushNotification+0x80>
 8026564:	4b15      	ldr	r3, [pc, #84]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 8026566:	78db      	ldrb	r3, [r3, #3]
 8026568:	2b66      	cmp	r3, #102	; 0x66
 802656a:	d123      	bne.n	80265b4 <tos_Bluetooth_GetAndPushNotification+0x80>
			  tmp=&rx_buffer[0];
 802656c:	4b15      	ldr	r3, [pc, #84]	; (80265c4 <tos_Bluetooth_GetAndPushNotification+0x90>)
 802656e:	4a13      	ldr	r2, [pc, #76]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 8026570:	601a      	str	r2, [r3, #0]
			  sscanf(tmp,"notf: appName %s appNotf %s",BluetoothAppName,BluetoothNotf);
 8026572:	4b14      	ldr	r3, [pc, #80]	; (80265c4 <tos_Bluetooth_GetAndPushNotification+0x90>)
 8026574:	6818      	ldr	r0, [r3, #0]
 8026576:	4b14      	ldr	r3, [pc, #80]	; (80265c8 <tos_Bluetooth_GetAndPushNotification+0x94>)
 8026578:	4a14      	ldr	r2, [pc, #80]	; (80265cc <tos_Bluetooth_GetAndPushNotification+0x98>)
 802657a:	4915      	ldr	r1, [pc, #84]	; (80265d0 <tos_Bluetooth_GetAndPushNotification+0x9c>)
 802657c:	f001 fb6c 	bl	8027c58 <siscanf>
			  BluetoothAppNameP=&BluetoothAppName[0];
 8026580:	4b14      	ldr	r3, [pc, #80]	; (80265d4 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 8026582:	4a12      	ldr	r2, [pc, #72]	; (80265cc <tos_Bluetooth_GetAndPushNotification+0x98>)
 8026584:	601a      	str	r2, [r3, #0]
			  BluetoothNotfP=&BluetoothNotf[0];
 8026586:	4b14      	ldr	r3, [pc, #80]	; (80265d8 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 8026588:	4a0f      	ldr	r2, [pc, #60]	; (80265c8 <tos_Bluetooth_GetAndPushNotification+0x94>)
 802658a:	601a      	str	r2, [r3, #0]
			  NotificationScreen_GetNotifications(BluetoothAppNameP,BluetoothNotfP);
 802658c:	4b11      	ldr	r3, [pc, #68]	; (80265d4 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 802658e:	681a      	ldr	r2, [r3, #0]
 8026590:	4b11      	ldr	r3, [pc, #68]	; (80265d8 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 8026592:	681b      	ldr	r3, [r3, #0]
 8026594:	4619      	mov	r1, r3
 8026596:	4610      	mov	r0, r2
 8026598:	f7fc f894 	bl	80226c4 <NotificationScreen_GetNotifications>
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasPushNotf", 20,50);
 802659c:	2332      	movs	r3, #50	; 0x32
 802659e:	2214      	movs	r2, #20
 80265a0:	490e      	ldr	r1, [pc, #56]	; (80265dc <tos_Bluetooth_GetAndPushNotification+0xa8>)
 80265a2:	4807      	ldr	r0, [pc, #28]	; (80265c0 <tos_Bluetooth_GetAndPushNotification+0x8c>)
 80265a4:	f7dd ffc7 	bl	8004536 <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 80265a8:	4b04      	ldr	r3, [pc, #16]	; (80265bc <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265aa:	4a0d      	ldr	r2, [pc, #52]	; (80265e0 <tos_Bluetooth_GetAndPushNotification+0xac>)
 80265ac:	8811      	ldrh	r1, [r2, #0]
 80265ae:	7892      	ldrb	r2, [r2, #2]
 80265b0:	8019      	strh	r1, [r3, #0]
 80265b2:	709a      	strb	r2, [r3, #2]
		  }
	}

}
 80265b4:	bf00      	nop
 80265b6:	bd80      	pop	{r7, pc}
 80265b8:	20007298 	.word	0x20007298
 80265bc:	2000729c 	.word	0x2000729c
 80265c0:	2000694c 	.word	0x2000694c
 80265c4:	200071b0 	.word	0x200071b0
 80265c8:	200071b4 	.word	0x200071b4
 80265cc:	20007284 	.word	0x20007284
 80265d0:	0802a438 	.word	0x0802a438
 80265d4:	2000727c 	.word	0x2000727c
 80265d8:	200073bc 	.word	0x200073bc
 80265dc:	0802a454 	.word	0x0802a454
 80265e0:	0802a404 	.word	0x0802a404

080265e4 <tos_BluetoothGetStatusVAl>:
	if(isConnected){
		  sprintf(tx_buffer, "stepsVal %d",stepsVal);
		    HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 20,50);
		  }
}
void tos_BluetoothGetStatusVAl(bool bluetoothStatus,uint8_t Screen){
 80265e4:	b580      	push	{r7, lr}
 80265e6:	b084      	sub	sp, #16
 80265e8:	af00      	add	r7, sp, #0
 80265ea:	4603      	mov	r3, r0
 80265ec:	460a      	mov	r2, r1
 80265ee:	71fb      	strb	r3, [r7, #7]
 80265f0:	4613      	mov	r3, r2
 80265f2:	71bb      	strb	r3, [r7, #6]
	if(bluetoothStatus){
 80265f4:	79fb      	ldrb	r3, [r7, #7]
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d018      	beq.n	802662c <tos_BluetoothGetStatusVAl+0x48>
			lv_color_t bluetoothClr = tos_BluetoothStatus_SymColor_Helper(isConnected);
 80265fa:	4b19      	ldr	r3, [pc, #100]	; (8026660 <tos_BluetoothGetStatusVAl+0x7c>)
 80265fc:	781b      	ldrb	r3, [r3, #0]
 80265fe:	4618      	mov	r0, r3
 8026600:	f000 f832 	bl	8026668 <tos_BluetoothStatus_SymColor_Helper>
 8026604:	4603      	mov	r3, r0
 8026606:	81bb      	strh	r3, [r7, #12]
			switch(Screen){
 8026608:	79bb      	ldrb	r3, [r7, #6]
 802660a:	2b00      	cmp	r3, #0
 802660c:	d002      	beq.n	8026614 <tos_BluetoothGetStatusVAl+0x30>
 802660e:	2b01      	cmp	r3, #1
 8026610:	d006      	beq.n	8026620 <tos_BluetoothGetStatusVAl+0x3c>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				default: return;
 8026612:	e021      	b.n	8026658 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 8026614:	79fb      	ldrb	r3, [r7, #7]
 8026616:	89b9      	ldrh	r1, [r7, #12]
 8026618:	4618      	mov	r0, r3
 802661a:	f7fa fea3 	bl	8021364 <MainScreen_SetBluetoothStatusVal>
 802661e:	e01b      	b.n	8026658 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 8026620:	79fb      	ldrb	r3, [r7, #7]
 8026622:	89b9      	ldrh	r1, [r7, #12]
 8026624:	4618      	mov	r0, r3
 8026626:	f7fe fd19 	bl	802505c <SleepModeScreen_SetBluetoothStatusVal>
 802662a:	e015      	b.n	8026658 <tos_BluetoothGetStatusVAl+0x74>
				}
	}else switch(Screen){
 802662c:	79bb      	ldrb	r3, [r7, #6]
 802662e:	2b00      	cmp	r3, #0
 8026630:	d002      	beq.n	8026638 <tos_BluetoothGetStatusVAl+0x54>
 8026632:	2b01      	cmp	r3, #1
 8026634:	d008      	beq.n	8026648 <tos_BluetoothGetStatusVAl+0x64>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	default: return;
 8026636:	e00f      	b.n	8026658 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 8026638:	4b0a      	ldr	r3, [pc, #40]	; (8026664 <tos_BluetoothGetStatusVAl+0x80>)
 802663a:	881a      	ldrh	r2, [r3, #0]
 802663c:	79fb      	ldrb	r3, [r7, #7]
 802663e:	4611      	mov	r1, r2
 8026640:	4618      	mov	r0, r3
 8026642:	f7fa fe8f 	bl	8021364 <MainScreen_SetBluetoothStatusVal>
 8026646:	e007      	b.n	8026658 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 8026648:	4b06      	ldr	r3, [pc, #24]	; (8026664 <tos_BluetoothGetStatusVAl+0x80>)
 802664a:	881a      	ldrh	r2, [r3, #0]
 802664c:	79fb      	ldrb	r3, [r7, #7]
 802664e:	4611      	mov	r1, r2
 8026650:	4618      	mov	r0, r3
 8026652:	f7fe fd03 	bl	802505c <SleepModeScreen_SetBluetoothStatusVal>
 8026656:	bf00      	nop
	}
}
 8026658:	3710      	adds	r7, #16
 802665a:	46bd      	mov	sp, r7
 802665c:	bd80      	pop	{r7, pc}
 802665e:	bf00      	nop
 8026660:	20007298 	.word	0x20007298
 8026664:	0802a47c 	.word	0x0802a47c

08026668 <tos_BluetoothStatus_SymColor_Helper>:
lv_color_t tos_BluetoothStatus_SymColor_Helper(bool bluetoothConnected){
 8026668:	b480      	push	{r7}
 802666a:	b083      	sub	sp, #12
 802666c:	af00      	add	r7, sp, #0
 802666e:	4602      	mov	r2, r0
 8026670:	71fa      	strb	r2, [r7, #7]
			if (bluetoothConnected) return LV_COLOR_BLUE;
 8026672:	79fa      	ldrb	r2, [r7, #7]
 8026674:	2a00      	cmp	r2, #0
 8026676:	d008      	beq.n	802668a <tos_BluetoothStatus_SymColor_Helper+0x22>
 8026678:	f36f 0302 	bfc	r3, #0, #3
 802667c:	f36f 03c7 	bfc	r3, #3, #5
 8026680:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8026684:	f36f 334f 	bfc	r3, #13, #3
 8026688:	e001      	b.n	802668e <tos_BluetoothStatus_SymColor_Helper+0x26>
			else return LV_COLOR_GRAY;
 802668a:	4b04      	ldr	r3, [pc, #16]	; (802669c <tos_BluetoothStatus_SymColor_Helper+0x34>)
 802668c:	881b      	ldrh	r3, [r3, #0]
}
 802668e:	4618      	mov	r0, r3
 8026690:	370c      	adds	r7, #12
 8026692:	46bd      	mov	sp, r7
 8026694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026698:	4770      	bx	lr
 802669a:	bf00      	nop
 802669c:	0802a480 	.word	0x0802a480

080266a0 <tos_BluetoothGetEnableVal>:
void tos_BluetoothEnableController(void){
	//Bluetooth u aktif ve pasif edecek pin belirlenecek burası ona gore duzenlenecek.
	//Modul uzerinde regulator oldugu icin sonraya kaldı

}
bool tos_BluetoothGetEnableVal(void){
 80266a0:	b480      	push	{r7}
 80266a2:	af00      	add	r7, sp, #0
	return bluetoothEnable;
 80266a4:	4b03      	ldr	r3, [pc, #12]	; (80266b4 <tos_BluetoothGetEnableVal+0x14>)
 80266a6:	781b      	ldrb	r3, [r3, #0]
}
 80266a8:	4618      	mov	r0, r3
 80266aa:	46bd      	mov	sp, r7
 80266ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266b0:	4770      	bx	lr
 80266b2:	bf00      	nop
 80266b4:	2000284c 	.word	0x2000284c

080266b8 <tos_BluetoothSetStepsVal>:
	BluetoothBatteryVal=batteryVal;
}
uint16_t tos_BluetoothGetStepsVal(void){
	return BluetoothStepsVal;
}
void tos_BluetoothSetStepsVal(uint8_t steps,bool unitType){
 80266b8:	b480      	push	{r7}
 80266ba:	b083      	sub	sp, #12
 80266bc:	af00      	add	r7, sp, #0
 80266be:	4603      	mov	r3, r0
 80266c0:	460a      	mov	r2, r1
 80266c2:	71fb      	strb	r3, [r7, #7]
 80266c4:	4613      	mov	r3, r2
 80266c6:	71bb      	strb	r3, [r7, #6]
	BluetoothStepsVal=steps;
 80266c8:	79fb      	ldrb	r3, [r7, #7]
 80266ca:	b29a      	uxth	r2, r3
 80266cc:	4b05      	ldr	r3, [pc, #20]	; (80266e4 <tos_BluetoothSetStepsVal+0x2c>)
 80266ce:	801a      	strh	r2, [r3, #0]
	BluetoothUnitType=unitType;
 80266d0:	4a05      	ldr	r2, [pc, #20]	; (80266e8 <tos_BluetoothSetStepsVal+0x30>)
 80266d2:	79bb      	ldrb	r3, [r7, #6]
 80266d4:	7013      	strb	r3, [r2, #0]
}
 80266d6:	bf00      	nop
 80266d8:	370c      	adds	r7, #12
 80266da:	46bd      	mov	sp, r7
 80266dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266e0:	4770      	bx	lr
 80266e2:	bf00      	nop
 80266e4:	200073c2 	.word	0x200073c2
 80266e8:	20007280 	.word	0x20007280

080266ec <tos_RightButton_Listenner_For_MenuControl>:
			else if(buttonCounter >=2)result=1;
		}
	} buttonCounter=0;
	return result;
}
uint8_t tos_RightButton_Listenner_For_MenuControl(void) {
 80266ec:	b580      	push	{r7, lr}
 80266ee:	b082      	sub	sp, #8
 80266f0:	af00      	add	r7, sp, #0
	uint8_t result=0, counter=0;
 80266f2:	2300      	movs	r3, #0
 80266f4:	71fb      	strb	r3, [r7, #7]
 80266f6:	2300      	movs	r3, #0
 80266f8:	71bb      	strb	r3, [r7, #6]
	if (!READ_RIGHT_BTN) {
 80266fa:	2140      	movs	r1, #64	; 0x40
 80266fc:	4810      	ldr	r0, [pc, #64]	; (8026740 <tos_RightButton_Listenner_For_MenuControl+0x54>)
 80266fe:	f7db ffab 	bl	8002658 <HAL_GPIO_ReadPin>
 8026702:	4603      	mov	r3, r0
 8026704:	2b00      	cmp	r3, #0
 8026706:	d116      	bne.n	8026736 <tos_RightButton_Listenner_For_MenuControl+0x4a>
		while (!READ_RIGHT_BTN) {
 8026708:	e00e      	b.n	8026728 <tos_RightButton_Listenner_For_MenuControl+0x3c>
			if (counter >=50) {
 802670a:	79bb      	ldrb	r3, [r7, #6]
 802670c:	2b31      	cmp	r3, #49	; 0x31
 802670e:	d903      	bls.n	8026718 <tos_RightButton_Listenner_For_MenuControl+0x2c>
				result=2;
 8026710:	2302      	movs	r3, #2
 8026712:	71fb      	strb	r3, [r7, #7]
				return result;
 8026714:	79fb      	ldrb	r3, [r7, #7]
 8026716:	e00f      	b.n	8026738 <tos_RightButton_Listenner_For_MenuControl+0x4c>
			}
			else if(counter >=20)result=1;
 8026718:	79bb      	ldrb	r3, [r7, #6]
 802671a:	2b13      	cmp	r3, #19
 802671c:	d901      	bls.n	8026722 <tos_RightButton_Listenner_For_MenuControl+0x36>
 802671e:	2301      	movs	r3, #1
 8026720:	71fb      	strb	r3, [r7, #7]
			counter++;
 8026722:	79bb      	ldrb	r3, [r7, #6]
 8026724:	3301      	adds	r3, #1
 8026726:	71bb      	strb	r3, [r7, #6]
		while (!READ_RIGHT_BTN) {
 8026728:	2140      	movs	r1, #64	; 0x40
 802672a:	4805      	ldr	r0, [pc, #20]	; (8026740 <tos_RightButton_Listenner_For_MenuControl+0x54>)
 802672c:	f7db ff94 	bl	8002658 <HAL_GPIO_ReadPin>
 8026730:	4603      	mov	r3, r0
 8026732:	2b00      	cmp	r3, #0
 8026734:	d0e9      	beq.n	802670a <tos_RightButton_Listenner_For_MenuControl+0x1e>
		}
	}
	return result;
 8026736:	79fb      	ldrb	r3, [r7, #7]
}
 8026738:	4618      	mov	r0, r3
 802673a:	3708      	adds	r7, #8
 802673c:	46bd      	mov	sp, r7
 802673e:	bd80      	pop	{r7, pc}
 8026740:	40021000 	.word	0x40021000

08026744 <tos_LeftButton_Listenner_For_MenuControl>:
uint8_t tos_LeftButton_Listenner_For_MenuControl(void) {
 8026744:	b580      	push	{r7, lr}
 8026746:	b082      	sub	sp, #8
 8026748:	af00      	add	r7, sp, #0
	uint8_t result=0, counter=0;
 802674a:	2300      	movs	r3, #0
 802674c:	71fb      	strb	r3, [r7, #7]
 802674e:	2300      	movs	r3, #0
 8026750:	71bb      	strb	r3, [r7, #6]
	if (!READ_LEFT_BTN) {
 8026752:	2110      	movs	r1, #16
 8026754:	4810      	ldr	r0, [pc, #64]	; (8026798 <tos_LeftButton_Listenner_For_MenuControl+0x54>)
 8026756:	f7db ff7f 	bl	8002658 <HAL_GPIO_ReadPin>
 802675a:	4603      	mov	r3, r0
 802675c:	2b00      	cmp	r3, #0
 802675e:	d116      	bne.n	802678e <tos_LeftButton_Listenner_For_MenuControl+0x4a>
		while (!READ_LEFT_BTN) {
 8026760:	e00e      	b.n	8026780 <tos_LeftButton_Listenner_For_MenuControl+0x3c>
			if (counter >=50) {
 8026762:	79bb      	ldrb	r3, [r7, #6]
 8026764:	2b31      	cmp	r3, #49	; 0x31
 8026766:	d903      	bls.n	8026770 <tos_LeftButton_Listenner_For_MenuControl+0x2c>
				result=2;
 8026768:	2302      	movs	r3, #2
 802676a:	71fb      	strb	r3, [r7, #7]
				return result;
 802676c:	79fb      	ldrb	r3, [r7, #7]
 802676e:	e00f      	b.n	8026790 <tos_LeftButton_Listenner_For_MenuControl+0x4c>
			}
			else if(counter >=20)result=1;
 8026770:	79bb      	ldrb	r3, [r7, #6]
 8026772:	2b13      	cmp	r3, #19
 8026774:	d901      	bls.n	802677a <tos_LeftButton_Listenner_For_MenuControl+0x36>
 8026776:	2301      	movs	r3, #1
 8026778:	71fb      	strb	r3, [r7, #7]
			counter++;
 802677a:	79bb      	ldrb	r3, [r7, #6]
 802677c:	3301      	adds	r3, #1
 802677e:	71bb      	strb	r3, [r7, #6]
		while (!READ_LEFT_BTN) {
 8026780:	2110      	movs	r1, #16
 8026782:	4805      	ldr	r0, [pc, #20]	; (8026798 <tos_LeftButton_Listenner_For_MenuControl+0x54>)
 8026784:	f7db ff68 	bl	8002658 <HAL_GPIO_ReadPin>
 8026788:	4603      	mov	r3, r0
 802678a:	2b00      	cmp	r3, #0
 802678c:	d0e9      	beq.n	8026762 <tos_LeftButton_Listenner_For_MenuControl+0x1e>
		}
	}
	return result;
 802678e:	79fb      	ldrb	r3, [r7, #7]
}
 8026790:	4618      	mov	r0, r3
 8026792:	3708      	adds	r7, #8
 8026794:	46bd      	mov	sp, r7
 8026796:	bd80      	pop	{r7, pc}
 8026798:	40021000 	.word	0x40021000

0802679c <tos_EnterButton_Listenner_For_MenuControl>:
uint8_t tos_EnterButton_Listenner_For_MenuControl(void) {
 802679c:	b580      	push	{r7, lr}
 802679e:	b082      	sub	sp, #8
 80267a0:	af00      	add	r7, sp, #0
	uint8_t result=0, counter=0;
 80267a2:	2300      	movs	r3, #0
 80267a4:	71fb      	strb	r3, [r7, #7]
 80267a6:	2300      	movs	r3, #0
 80267a8:	71bb      	strb	r3, [r7, #6]
	if (!READ_ENTER_BTN) {
 80267aa:	2120      	movs	r1, #32
 80267ac:	4810      	ldr	r0, [pc, #64]	; (80267f0 <tos_EnterButton_Listenner_For_MenuControl+0x54>)
 80267ae:	f7db ff53 	bl	8002658 <HAL_GPIO_ReadPin>
 80267b2:	4603      	mov	r3, r0
 80267b4:	2b00      	cmp	r3, #0
 80267b6:	d116      	bne.n	80267e6 <tos_EnterButton_Listenner_For_MenuControl+0x4a>
		while (!READ_ENTER_BTN) {
 80267b8:	e00e      	b.n	80267d8 <tos_EnterButton_Listenner_For_MenuControl+0x3c>
			if (counter >=50) {
 80267ba:	79bb      	ldrb	r3, [r7, #6]
 80267bc:	2b31      	cmp	r3, #49	; 0x31
 80267be:	d903      	bls.n	80267c8 <tos_EnterButton_Listenner_For_MenuControl+0x2c>
				result=2;
 80267c0:	2302      	movs	r3, #2
 80267c2:	71fb      	strb	r3, [r7, #7]
				return result;
 80267c4:	79fb      	ldrb	r3, [r7, #7]
 80267c6:	e00f      	b.n	80267e8 <tos_EnterButton_Listenner_For_MenuControl+0x4c>
			}
			else if(counter >=20)result=1;
 80267c8:	79bb      	ldrb	r3, [r7, #6]
 80267ca:	2b13      	cmp	r3, #19
 80267cc:	d901      	bls.n	80267d2 <tos_EnterButton_Listenner_For_MenuControl+0x36>
 80267ce:	2301      	movs	r3, #1
 80267d0:	71fb      	strb	r3, [r7, #7]
			counter++;
 80267d2:	79bb      	ldrb	r3, [r7, #6]
 80267d4:	3301      	adds	r3, #1
 80267d6:	71bb      	strb	r3, [r7, #6]
		while (!READ_ENTER_BTN) {
 80267d8:	2120      	movs	r1, #32
 80267da:	4805      	ldr	r0, [pc, #20]	; (80267f0 <tos_EnterButton_Listenner_For_MenuControl+0x54>)
 80267dc:	f7db ff3c 	bl	8002658 <HAL_GPIO_ReadPin>
 80267e0:	4603      	mov	r3, r0
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	d0e9      	beq.n	80267ba <tos_EnterButton_Listenner_For_MenuControl+0x1e>
		}
	}
	return result;
 80267e6:	79fb      	ldrb	r3, [r7, #7]
}
 80267e8:	4618      	mov	r0, r3
 80267ea:	3708      	adds	r7, #8
 80267ec:	46bd      	mov	sp, r7
 80267ee:	bd80      	pop	{r7, pc}
 80267f0:	40021000 	.word	0x40021000

080267f4 <tos_Ratio>:
*inMin input minumun
*inMax input maximun
*outMin output minumun
*outMax output maximun
*/
double tos_Ratio(double inValue, double inMin, double inMax, double outMin, double outMax) {
 80267f4:	b5b0      	push	{r4, r5, r7, lr}
 80267f6:	b08a      	sub	sp, #40	; 0x28
 80267f8:	af00      	add	r7, sp, #0
 80267fa:	ed87 0b08 	vstr	d0, [r7, #32]
 80267fe:	ed87 1b06 	vstr	d1, [r7, #24]
 8026802:	ed87 2b04 	vstr	d2, [r7, #16]
 8026806:	ed87 3b02 	vstr	d3, [r7, #8]
 802680a:	ed87 4b00 	vstr	d4, [r7]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 802680e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026812:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8026816:	f7d9 fd47 	bl	80002a8 <__aeabi_dsub>
 802681a:	4603      	mov	r3, r0
 802681c:	460c      	mov	r4, r1
 802681e:	4625      	mov	r5, r4
 8026820:	461c      	mov	r4, r3
 8026822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026826:	e9d7 0100 	ldrd	r0, r1, [r7]
 802682a:	f7d9 fd3d 	bl	80002a8 <__aeabi_dsub>
 802682e:	4602      	mov	r2, r0
 8026830:	460b      	mov	r3, r1
 8026832:	4620      	mov	r0, r4
 8026834:	4629      	mov	r1, r5
 8026836:	f7d9 feef 	bl	8000618 <__aeabi_dmul>
 802683a:	4603      	mov	r3, r0
 802683c:	460c      	mov	r4, r1
 802683e:	4625      	mov	r5, r4
 8026840:	461c      	mov	r4, r3
 8026842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026846:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802684a:	f7d9 fd2d 	bl	80002a8 <__aeabi_dsub>
 802684e:	4602      	mov	r2, r0
 8026850:	460b      	mov	r3, r1
 8026852:	4620      	mov	r0, r4
 8026854:	4629      	mov	r1, r5
 8026856:	f7da f809 	bl	800086c <__aeabi_ddiv>
 802685a:	4603      	mov	r3, r0
 802685c:	460c      	mov	r4, r1
 802685e:	4618      	mov	r0, r3
 8026860:	4621      	mov	r1, r4
 8026862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026866:	f7d9 fd21 	bl	80002ac <__adddf3>
 802686a:	4603      	mov	r3, r0
 802686c:	460c      	mov	r4, r1
 802686e:	ec44 3b17 	vmov	d7, r3, r4
}
 8026872:	eeb0 0a47 	vmov.f32	s0, s14
 8026876:	eef0 0a67 	vmov.f32	s1, s15
 802687a:	3728      	adds	r7, #40	; 0x28
 802687c:	46bd      	mov	sp, r7
 802687e:	bdb0      	pop	{r4, r5, r7, pc}

08026880 <tos_Rounding>:
/*This function using for Rounding a floating value to int
*getValue input value
*/
uint8_t tos_Rounding(double getValue){
 8026880:	b590      	push	{r4, r7, lr}
 8026882:	b083      	sub	sp, #12
 8026884:	af00      	add	r7, sp, #0
 8026886:	ed87 0b00 	vstr	d0, [r7]
	if(getValue<(((uint8_t)getValue)+0.5f)) return (uint8_t)getValue;
 802688a:	e9d7 0100 	ldrd	r0, r1, [r7]
 802688e:	f7da f99b 	bl	8000bc8 <__aeabi_d2uiz>
 8026892:	4603      	mov	r3, r0
 8026894:	b2db      	uxtb	r3, r3
 8026896:	ee07 3a90 	vmov	s15, r3
 802689a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802689e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80268a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80268a6:	ee17 0a90 	vmov	r0, s15
 80268aa:	f7d9 fe5d 	bl	8000568 <__aeabi_f2d>
 80268ae:	4603      	mov	r3, r0
 80268b0:	460c      	mov	r4, r1
 80268b2:	461a      	mov	r2, r3
 80268b4:	4623      	mov	r3, r4
 80268b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80268ba:	f7da f91f 	bl	8000afc <__aeabi_dcmplt>
 80268be:	4603      	mov	r3, r0
 80268c0:	2b00      	cmp	r3, #0
 80268c2:	d006      	beq.n	80268d2 <tos_Rounding+0x52>
 80268c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80268c8:	f7da f97e 	bl	8000bc8 <__aeabi_d2uiz>
 80268cc:	4603      	mov	r3, r0
 80268ce:	b2db      	uxtb	r3, r3
 80268d0:	e007      	b.n	80268e2 <tos_Rounding+0x62>
	else return (uint8_t)getValue+1;
 80268d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80268d6:	f7da f977 	bl	8000bc8 <__aeabi_d2uiz>
 80268da:	4603      	mov	r3, r0
 80268dc:	b2db      	uxtb	r3, r3
 80268de:	3301      	adds	r3, #1
 80268e0:	b2db      	uxtb	r3, r3
}
 80268e2:	4618      	mov	r0, r3
 80268e4:	370c      	adds	r7, #12
 80268e6:	46bd      	mov	sp, r7
 80268e8:	bd90      	pop	{r4, r7, pc}
 80268ea:	0000      	movs	r0, r0
 80268ec:	0000      	movs	r0, r0
	...

080268f0 <tos_distance_Calc>:
/*This function using for calculate how much was go distance (kilometers or miles)
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param steps using for get steps value
*/
float tos_distance_Calc(bool unitType,uint16_t steps){
 80268f0:	b590      	push	{r4, r7, lr}
 80268f2:	b085      	sub	sp, #20
 80268f4:	af00      	add	r7, sp, #0
 80268f6:	4603      	mov	r3, r0
 80268f8:	460a      	mov	r2, r1
 80268fa:	71fb      	strb	r3, [r7, #7]
 80268fc:	4613      	mov	r3, r2
 80268fe:	80bb      	strh	r3, [r7, #4]
	float meterTmp=(float)steps*0.707;
 8026900:	88bb      	ldrh	r3, [r7, #4]
 8026902:	ee07 3a90 	vmov	s15, r3
 8026906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802690a:	ee17 0a90 	vmov	r0, s15
 802690e:	f7d9 fe2b 	bl	8000568 <__aeabi_f2d>
 8026912:	a310      	add	r3, pc, #64	; (adr r3, 8026954 <tos_distance_Calc+0x64>)
 8026914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026918:	f7d9 fe7e 	bl	8000618 <__aeabi_dmul>
 802691c:	4603      	mov	r3, r0
 802691e:	460c      	mov	r4, r1
 8026920:	4618      	mov	r0, r3
 8026922:	4621      	mov	r1, r4
 8026924:	f7da f970 	bl	8000c08 <__aeabi_d2f>
 8026928:	4603      	mov	r3, r0
 802692a:	60fb      	str	r3, [r7, #12]
	meterTmp/=1000;
 802692c:	ed97 7a03 	vldr	s14, [r7, #12]
 8026930:	eddf 6a07 	vldr	s13, [pc, #28]	; 8026950 <tos_distance_Calc+0x60>
 8026934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8026938:	edc7 7a03 	vstr	s15, [r7, #12]
	//if(!unitType) return meterTmp*0.621371192;
	return meterTmp;
 802693c:	68fb      	ldr	r3, [r7, #12]
 802693e:	ee07 3a90 	vmov	s15, r3
}
 8026942:	eeb0 0a67 	vmov.f32	s0, s15
 8026946:	3714      	adds	r7, #20
 8026948:	46bd      	mov	sp, r7
 802694a:	bd90      	pop	{r4, r7, pc}
 802694c:	f3af 8000 	nop.w
 8026950:	447a0000 	.word	0x447a0000
 8026954:	76c8b439 	.word	0x76c8b439
 8026958:	3fe69fbe 	.word	0x3fe69fbe

0802695c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 802695c:	b580      	push	{r7, lr}
 802695e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8026960:	f7eb fe22 	bl	80125a8 <lv_disp_get_default>
 8026964:	4603      	mov	r3, r0
 8026966:	4618      	mov	r0, r3
 8026968:	f7de faea 	bl	8004f40 <lv_disp_get_scr_act>
 802696c:	4603      	mov	r3, r0
}
 802696e:	4618      	mov	r0, r3
 8026970:	bd80      	pop	{r7, pc}
	...

08026974 <tos_Screen_Init>:
static uint8_t sleepCounter,currentScreen;
void tos_Gui_Init(void);



void tos_Screen_Init(void){
 8026974:	b580      	push	{r7, lr}
 8026976:	af00      	add	r7, sp, #0
	ST7789_UnSelect();
 8026978:	2201      	movs	r2, #1
 802697a:	2108      	movs	r1, #8
 802697c:	4810      	ldr	r0, [pc, #64]	; (80269c0 <tos_Screen_Init+0x4c>)
 802697e:	f7db fe83 	bl	8002688 <HAL_GPIO_WritePin>
	isScreenCounterEnable=true;
 8026982:	4b10      	ldr	r3, [pc, #64]	; (80269c4 <tos_Screen_Init+0x50>)
 8026984:	2201      	movs	r2, #1
 8026986:	701a      	strb	r2, [r3, #0]
	screenStatu=true;
 8026988:	4b0f      	ldr	r3, [pc, #60]	; (80269c8 <tos_Screen_Init+0x54>)
 802698a:	2201      	movs	r2, #1
 802698c:	701a      	strb	r2, [r3, #0]
	GuiHelperOpen=true;
 802698e:	4b0f      	ldr	r3, [pc, #60]	; (80269cc <tos_Screen_Init+0x58>)
 8026990:	2201      	movs	r2, #1
 8026992:	701a      	strb	r2, [r3, #0]
	screenType=1;
 8026994:	4b0e      	ldr	r3, [pc, #56]	; (80269d0 <tos_Screen_Init+0x5c>)
 8026996:	2201      	movs	r2, #1
 8026998:	701a      	strb	r2, [r3, #0]
	screenTheme=0;
 802699a:	4b0e      	ldr	r3, [pc, #56]	; (80269d4 <tos_Screen_Init+0x60>)
 802699c:	2200      	movs	r2, #0
 802699e:	701a      	strb	r2, [r3, #0]
	currentScreen=1;
 80269a0:	4b0d      	ldr	r3, [pc, #52]	; (80269d8 <tos_Screen_Init+0x64>)
 80269a2:	2201      	movs	r2, #1
 80269a4:	701a      	strb	r2, [r3, #0]
	screenCounter=0;
 80269a6:	4b0d      	ldr	r3, [pc, #52]	; (80269dc <tos_Screen_Init+0x68>)
 80269a8:	2200      	movs	r2, #0
 80269aa:	801a      	strh	r2, [r3, #0]
	tos_StartScreen_Init();
 80269ac:	f7fe fbce 	bl	802514c <tos_StartScreen_Init>
	HAL_TIM_Base_Start_IT(&TOS_GUI_TIMER);
 80269b0:	480b      	ldr	r0, [pc, #44]	; (80269e0 <tos_Screen_Init+0x6c>)
 80269b2:	f7dd f968 	bl	8003c86 <HAL_TIM_Base_Start_IT>
	isWorkingSystem=true;
 80269b6:	4b0b      	ldr	r3, [pc, #44]	; (80269e4 <tos_Screen_Init+0x70>)
 80269b8:	2201      	movs	r2, #1
 80269ba:	701a      	strb	r2, [r3, #0]


}
 80269bc:	bf00      	nop
 80269be:	bd80      	pop	{r7, pc}
 80269c0:	40020000 	.word	0x40020000
 80269c4:	200073c6 	.word	0x200073c6
 80269c8:	200073cb 	.word	0x200073cb
 80269cc:	200073c5 	.word	0x200073c5
 80269d0:	200073ca 	.word	0x200073ca
 80269d4:	200073c4 	.word	0x200073c4
 80269d8:	2000688b 	.word	0x2000688b
 80269dc:	200073c8 	.word	0x200073c8
 80269e0:	200068ac 	.word	0x200068ac
 80269e4:	20006889 	.word	0x20006889

080269e8 <tos_firstScreen_Update>:
void tos_firstScreen_Update(void){
 80269e8:	b580      	push	{r7, lr}
 80269ea:	af00      	add	r7, sp, #0
	if(isScreenCounterEnable){
 80269ec:	4b0b      	ldr	r3, [pc, #44]	; (8026a1c <tos_firstScreen_Update+0x34>)
 80269ee:	781b      	ldrb	r3, [r3, #0]
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	d010      	beq.n	8026a16 <tos_firstScreen_Update+0x2e>
		screenCounter++;
 80269f4:	4b0a      	ldr	r3, [pc, #40]	; (8026a20 <tos_firstScreen_Update+0x38>)
 80269f6:	881b      	ldrh	r3, [r3, #0]
 80269f8:	3301      	adds	r3, #1
 80269fa:	b29a      	uxth	r2, r3
 80269fc:	4b08      	ldr	r3, [pc, #32]	; (8026a20 <tos_firstScreen_Update+0x38>)
 80269fe:	801a      	strh	r2, [r3, #0]
		if(screenCounter>=5000){
 8026a00:	4b07      	ldr	r3, [pc, #28]	; (8026a20 <tos_firstScreen_Update+0x38>)
 8026a02:	881b      	ldrh	r3, [r3, #0]
 8026a04:	f241 3287 	movw	r2, #4999	; 0x1387
 8026a08:	4293      	cmp	r3, r2
 8026a0a:	d904      	bls.n	8026a16 <tos_firstScreen_Update+0x2e>
			tos_Gui_Init();
 8026a0c:	f000 f80c 	bl	8026a28 <tos_Gui_Init>
			HAL_TIM_Base_Stop_IT(&TOS_GUI_TIMER);
 8026a10:	4804      	ldr	r0, [pc, #16]	; (8026a24 <tos_firstScreen_Update+0x3c>)
 8026a12:	f7dd f95c 	bl	8003cce <HAL_TIM_Base_Stop_IT>
		}
	}

}
 8026a16:	bf00      	nop
 8026a18:	bd80      	pop	{r7, pc}
 8026a1a:	bf00      	nop
 8026a1c:	200073c6 	.word	0x200073c6
 8026a20:	200073c8 	.word	0x200073c8
 8026a24:	200068ac 	.word	0x200068ac

08026a28 <tos_Gui_Init>:

void tos_Gui_Init(void){
 8026a28:	b580      	push	{r7, lr}
 8026a2a:	af00      	add	r7, sp, #0
	screenCounter=0;
 8026a2c:	4b0a      	ldr	r3, [pc, #40]	; (8026a58 <tos_Gui_Init+0x30>)
 8026a2e:	2200      	movs	r2, #0
 8026a30:	801a      	strh	r2, [r3, #0]
	currentScreen=0;
 8026a32:	4b0a      	ldr	r3, [pc, #40]	; (8026a5c <tos_Gui_Init+0x34>)
 8026a34:	2200      	movs	r2, #0
 8026a36:	701a      	strb	r2, [r3, #0]
	isScreenCounterEnable=false;
 8026a38:	4b09      	ldr	r3, [pc, #36]	; (8026a60 <tos_Gui_Init+0x38>)
 8026a3a:	2200      	movs	r2, #0
 8026a3c:	701a      	strb	r2, [r3, #0]
	lv_obj_clean(lv_scr_act());
 8026a3e:	f7ff ff8d 	bl	802695c <lv_scr_act>
 8026a42:	4603      	mov	r3, r0
 8026a44:	4618      	mov	r0, r3
 8026a46:	f7df f9db 	bl	8005e00 <lv_obj_clean>
	tos_Screen_Chooser(currentScreen);
 8026a4a:	4b04      	ldr	r3, [pc, #16]	; (8026a5c <tos_Gui_Init+0x34>)
 8026a4c:	781b      	ldrb	r3, [r3, #0]
 8026a4e:	4618      	mov	r0, r3
 8026a50:	f000 f87c 	bl	8026b4c <tos_Screen_Chooser>
}
 8026a54:	bf00      	nop
 8026a56:	bd80      	pop	{r7, pc}
 8026a58:	200073c8 	.word	0x200073c8
 8026a5c:	2000688b 	.word	0x2000688b
 8026a60:	200073c6 	.word	0x200073c6

08026a64 <tos_ScreenController>:


void tos_ScreenController(void){
 8026a64:	b580      	push	{r7, lr}
 8026a66:	af00      	add	r7, sp, #0
	 tos_Menu_Controller();
 8026a68:	f7fa fd40 	bl	80214ec <tos_Menu_Controller>
	if(screenCounter==0 && GuiHelperOpen){
 8026a6c:	4b30      	ldr	r3, [pc, #192]	; (8026b30 <tos_ScreenController+0xcc>)
 8026a6e:	881b      	ldrh	r3, [r3, #0]
 8026a70:	2b00      	cmp	r3, #0
 8026a72:	d15c      	bne.n	8026b2e <tos_ScreenController+0xca>
 8026a74:	4b2f      	ldr	r3, [pc, #188]	; (8026b34 <tos_ScreenController+0xd0>)
 8026a76:	781b      	ldrb	r3, [r3, #0]
 8026a78:	2b00      	cmp	r3, #0
 8026a7a:	d058      	beq.n	8026b2e <tos_ScreenController+0xca>
		if(!READ_LEFT_BTN){ sleepCounter=0;
 8026a7c:	2110      	movs	r1, #16
 8026a7e:	482e      	ldr	r0, [pc, #184]	; (8026b38 <tos_ScreenController+0xd4>)
 8026a80:	f7db fdea 	bl	8002658 <HAL_GPIO_ReadPin>
 8026a84:	4603      	mov	r3, r0
 8026a86:	2b00      	cmp	r3, #0
 8026a88:	d111      	bne.n	8026aae <tos_ScreenController+0x4a>
 8026a8a:	4b2c      	ldr	r3, [pc, #176]	; (8026b3c <tos_ScreenController+0xd8>)
 8026a8c:	2200      	movs	r2, #0
 8026a8e:	701a      	strb	r2, [r3, #0]
			MenuScreen_SetItem(5); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8026a90:	2005      	movs	r0, #5
 8026a92:	f7fa fec7 	bl	8021824 <MenuScreen_SetItem>
 8026a96:	4b2a      	ldr	r3, [pc, #168]	; (8026b40 <tos_ScreenController+0xdc>)
 8026a98:	2202      	movs	r2, #2
 8026a9a:	701a      	strb	r2, [r3, #0]
 8026a9c:	4b28      	ldr	r3, [pc, #160]	; (8026b40 <tos_ScreenController+0xdc>)
 8026a9e:	781b      	ldrb	r3, [r3, #0]
 8026aa0:	4618      	mov	r0, r3
 8026aa2:	f000 f853 	bl	8026b4c <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 8026aa6:	4b23      	ldr	r3, [pc, #140]	; (8026b34 <tos_ScreenController+0xd0>)
 8026aa8:	2200      	movs	r2, #0
 8026aaa:	701a      	strb	r2, [r3, #0]
 8026aac:	e03f      	b.n	8026b2e <tos_ScreenController+0xca>
			}
		else if(!READ_RIGHT_BTN){ sleepCounter=0;
 8026aae:	2140      	movs	r1, #64	; 0x40
 8026ab0:	4821      	ldr	r0, [pc, #132]	; (8026b38 <tos_ScreenController+0xd4>)
 8026ab2:	f7db fdd1 	bl	8002658 <HAL_GPIO_ReadPin>
 8026ab6:	4603      	mov	r3, r0
 8026ab8:	2b00      	cmp	r3, #0
 8026aba:	d111      	bne.n	8026ae0 <tos_ScreenController+0x7c>
 8026abc:	4b1f      	ldr	r3, [pc, #124]	; (8026b3c <tos_ScreenController+0xd8>)
 8026abe:	2200      	movs	r2, #0
 8026ac0:	701a      	strb	r2, [r3, #0]
			MenuScreen_SetItem(0); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8026ac2:	2000      	movs	r0, #0
 8026ac4:	f7fa feae 	bl	8021824 <MenuScreen_SetItem>
 8026ac8:	4b1d      	ldr	r3, [pc, #116]	; (8026b40 <tos_ScreenController+0xdc>)
 8026aca:	2202      	movs	r2, #2
 8026acc:	701a      	strb	r2, [r3, #0]
 8026ace:	4b1c      	ldr	r3, [pc, #112]	; (8026b40 <tos_ScreenController+0xdc>)
 8026ad0:	781b      	ldrb	r3, [r3, #0]
 8026ad2:	4618      	mov	r0, r3
 8026ad4:	f000 f83a 	bl	8026b4c <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 8026ad8:	4b16      	ldr	r3, [pc, #88]	; (8026b34 <tos_ScreenController+0xd0>)
 8026ada:	2200      	movs	r2, #0
 8026adc:	701a      	strb	r2, [r3, #0]
 8026ade:	e026      	b.n	8026b2e <tos_ScreenController+0xca>
		}
			if(!READ_ENTER_BTN){ sleepCounter=0;
 8026ae0:	2120      	movs	r1, #32
 8026ae2:	4815      	ldr	r0, [pc, #84]	; (8026b38 <tos_ScreenController+0xd4>)
 8026ae4:	f7db fdb8 	bl	8002658 <HAL_GPIO_ReadPin>
 8026ae8:	4603      	mov	r3, r0
 8026aea:	2b00      	cmp	r3, #0
 8026aec:	d11f      	bne.n	8026b2e <tos_ScreenController+0xca>
 8026aee:	4b13      	ldr	r3, [pc, #76]	; (8026b3c <tos_ScreenController+0xd8>)
 8026af0:	2200      	movs	r2, #0
 8026af2:	701a      	strb	r2, [r3, #0]
				if(!screenStatu){screenStatu=true;	ST7789_UnSelect(); return;}
 8026af4:	4b13      	ldr	r3, [pc, #76]	; (8026b44 <tos_ScreenController+0xe0>)
 8026af6:	781b      	ldrb	r3, [r3, #0]
 8026af8:	f083 0301 	eor.w	r3, r3, #1
 8026afc:	b2db      	uxtb	r3, r3
 8026afe:	2b00      	cmp	r3, #0
 8026b00:	d008      	beq.n	8026b14 <tos_ScreenController+0xb0>
 8026b02:	4b10      	ldr	r3, [pc, #64]	; (8026b44 <tos_ScreenController+0xe0>)
 8026b04:	2201      	movs	r2, #1
 8026b06:	701a      	strb	r2, [r3, #0]
 8026b08:	2201      	movs	r2, #1
 8026b0a:	2108      	movs	r1, #8
 8026b0c:	480e      	ldr	r0, [pc, #56]	; (8026b48 <tos_ScreenController+0xe4>)
 8026b0e:	f7db fdbb 	bl	8002688 <HAL_GPIO_WritePin>
 8026b12:	e00c      	b.n	8026b2e <tos_ScreenController+0xca>
				else if(1==currentScreen){
 8026b14:	4b0a      	ldr	r3, [pc, #40]	; (8026b40 <tos_ScreenController+0xdc>)
 8026b16:	781b      	ldrb	r3, [r3, #0]
 8026b18:	2b01      	cmp	r3, #1
 8026b1a:	d108      	bne.n	8026b2e <tos_ScreenController+0xca>
						currentScreen=0; tos_Screen_Chooser(currentScreen);	return;}
 8026b1c:	4b08      	ldr	r3, [pc, #32]	; (8026b40 <tos_ScreenController+0xdc>)
 8026b1e:	2200      	movs	r2, #0
 8026b20:	701a      	strb	r2, [r3, #0]
 8026b22:	4b07      	ldr	r3, [pc, #28]	; (8026b40 <tos_ScreenController+0xdc>)
 8026b24:	781b      	ldrb	r3, [r3, #0]
 8026b26:	4618      	mov	r0, r3
 8026b28:	f000 f810 	bl	8026b4c <tos_Screen_Chooser>
 8026b2c:	bf00      	nop
			}
	}

}
 8026b2e:	bd80      	pop	{r7, pc}
 8026b30:	200073c8 	.word	0x200073c8
 8026b34:	200073c5 	.word	0x200073c5
 8026b38:	40021000 	.word	0x40021000
 8026b3c:	2000688a 	.word	0x2000688a
 8026b40:	2000688b 	.word	0x2000688b
 8026b44:	200073cb 	.word	0x200073cb
 8026b48:	40020000 	.word	0x40020000

08026b4c <tos_Screen_Chooser>:
/*This function using for set new screen*/
void tos_Screen_Chooser(uint8_t currentScreen){
 8026b4c:	b580      	push	{r7, lr}
 8026b4e:	b082      	sub	sp, #8
 8026b50:	af00      	add	r7, sp, #0
 8026b52:	4603      	mov	r3, r0
 8026b54:	71fb      	strb	r3, [r7, #7]
	SleepModeScreen_TaskControllerSet(false);
 8026b56:	2000      	movs	r0, #0
 8026b58:	f7fe fa96 	bl	8025088 <SleepModeScreen_TaskControllerSet>
	MainScreen_TaskControllerSet(false);
 8026b5c:	2000      	movs	r0, #0
 8026b5e:	f7fa fc17 	bl	8021390 <MainScreen_TaskControllerSet>
	MenuScreen_TaskControllerSet(false);
 8026b62:	2000      	movs	r0, #0
 8026b64:	f7fa fe4e 	bl	8021804 <MenuScreen_TaskControllerSet>
	lv_obj_clean(lv_scr_act());
 8026b68:	f7ff fef8 	bl	802695c <lv_scr_act>
 8026b6c:	4603      	mov	r3, r0
 8026b6e:	4618      	mov	r0, r3
 8026b70:	f7df f946 	bl	8005e00 <lv_obj_clean>
	HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
 8026b74:	4815      	ldr	r0, [pc, #84]	; (8026bcc <tos_Screen_Chooser+0x80>)
 8026b76:	f7dd f8aa 	bl	8003cce <HAL_TIM_Base_Stop_IT>
	switch(currentScreen){
 8026b7a:	79fb      	ldrb	r3, [r7, #7]
 8026b7c:	2b01      	cmp	r3, #1
 8026b7e:	d00f      	beq.n	8026ba0 <tos_Screen_Chooser+0x54>
 8026b80:	2b02      	cmp	r3, #2
 8026b82:	d013      	beq.n	8026bac <tos_Screen_Chooser+0x60>
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	d000      	beq.n	8026b8a <tos_Screen_Chooser+0x3e>
	case TOS_SCREEN_MENU:
		HAL_TIM_Base_Stop_IT(&TOS_SLEEP_TIMER);
		MenuScreen_TaskControllerSet(true);
		tos_MenuScreen_Init(true,ScreenRtc);
		break;
	default: return;
 8026b88:	e01d      	b.n	8026bc6 <tos_Screen_Chooser+0x7a>
		HAL_TIM_Base_Start_IT(&TOS_SLEEP_TIMER);
 8026b8a:	4811      	ldr	r0, [pc, #68]	; (8026bd0 <tos_Screen_Chooser+0x84>)
 8026b8c:	f7dd f87b 	bl	8003c86 <HAL_TIM_Base_Start_IT>
		MainScreen_TaskControllerSet(true);
 8026b90:	2001      	movs	r0, #1
 8026b92:	f7fa fbfd 	bl	8021390 <MainScreen_TaskControllerSet>
		tos_MainScreen_Init(1,1);break;
 8026b96:	2101      	movs	r1, #1
 8026b98:	2001      	movs	r0, #1
 8026b9a:	f7f8 fc87 	bl	801f4ac <tos_MainScreen_Init>
 8026b9e:	e012      	b.n	8026bc6 <tos_Screen_Chooser+0x7a>
		SleepModeScreen_TaskControllerSet(true);
 8026ba0:	2001      	movs	r0, #1
 8026ba2:	f7fe fa71 	bl	8025088 <SleepModeScreen_TaskControllerSet>
		tos_SleepModeScreen_Init();break;
 8026ba6:	f7fd ff8d 	bl	8024ac4 <tos_SleepModeScreen_Init>
 8026baa:	e00c      	b.n	8026bc6 <tos_Screen_Chooser+0x7a>
		HAL_TIM_Base_Stop_IT(&TOS_SLEEP_TIMER);
 8026bac:	4808      	ldr	r0, [pc, #32]	; (8026bd0 <tos_Screen_Chooser+0x84>)
 8026bae:	f7dd f88e 	bl	8003cce <HAL_TIM_Base_Stop_IT>
		MenuScreen_TaskControllerSet(true);
 8026bb2:	2001      	movs	r0, #1
 8026bb4:	f7fa fe26 	bl	8021804 <MenuScreen_TaskControllerSet>
		tos_MenuScreen_Init(true,ScreenRtc);
 8026bb8:	4b06      	ldr	r3, [pc, #24]	; (8026bd4 <tos_Screen_Chooser+0x88>)
 8026bba:	681b      	ldr	r3, [r3, #0]
 8026bbc:	4619      	mov	r1, r3
 8026bbe:	2001      	movs	r0, #1
 8026bc0:	f7fa fc48 	bl	8021454 <tos_MenuScreen_Init>
		break;
 8026bc4:	bf00      	nop
	}
}
 8026bc6:	3708      	adds	r7, #8
 8026bc8:	46bd      	mov	sp, r7
 8026bca:	bd80      	pop	{r7, pc}
 8026bcc:	200068ec 	.word	0x200068ec
 8026bd0:	200069e4 	.word	0x200069e4
 8026bd4:	200073cc 	.word	0x200073cc

08026bd8 <tos_Screen_Variables_Getter>:
void tos_Screen_Variables_Getter(uint8_t Screen){
 8026bd8:	b580      	push	{r7, lr}
 8026bda:	b082      	sub	sp, #8
 8026bdc:	af00      	add	r7, sp, #0
 8026bde:	4603      	mov	r3, r0
 8026be0:	71fb      	strb	r3, [r7, #7]
	  tos_BluetoothReceiverAndTransmitter(ScreenRtc);
 8026be2:	4b0f      	ldr	r3, [pc, #60]	; (8026c20 <tos_Screen_Variables_Getter+0x48>)
 8026be4:	681b      	ldr	r3, [r3, #0]
 8026be6:	4618      	mov	r0, r3
 8026be8:	f7ff fbae 	bl	8026348 <tos_BluetoothReceiverAndTransmitter>
	  tos_BluetoothGetStatusVAl(tos_BluetoothGetEnableVal(),Screen);
 8026bec:	f7ff fd58 	bl	80266a0 <tos_BluetoothGetEnableVal>
 8026bf0:	4603      	mov	r3, r0
 8026bf2:	461a      	mov	r2, r3
 8026bf4:	79fb      	ldrb	r3, [r7, #7]
 8026bf6:	4619      	mov	r1, r3
 8026bf8:	4610      	mov	r0, r2
 8026bfa:	f7ff fcf3 	bl	80265e4 <tos_BluetoothGetStatusVAl>
	  tos_RTC_GetTime(ScreenRtc,Screen);
 8026bfe:	4b08      	ldr	r3, [pc, #32]	; (8026c20 <tos_Screen_Variables_Getter+0x48>)
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	79fa      	ldrb	r2, [r7, #7]
 8026c04:	4611      	mov	r1, r2
 8026c06:	4618      	mov	r0, r3
 8026c08:	f000 f94e 	bl	8026ea8 <tos_RTC_GetTime>
	  tos_getBatteryVAl(50,Screen);
 8026c0c:	79fb      	ldrb	r3, [r7, #7]
 8026c0e:	4619      	mov	r1, r3
 8026c10:	2032      	movs	r0, #50	; 0x32
 8026c12:	f7ff faa5 	bl	8026160 <tos_getBatteryVAl>

}
 8026c16:	bf00      	nop
 8026c18:	3708      	adds	r7, #8
 8026c1a:	46bd      	mov	sp, r7
 8026c1c:	bd80      	pop	{r7, pc}
 8026c1e:	bf00      	nop
 8026c20:	200073cc 	.word	0x200073cc

08026c24 <tos_Get_Rtc>:
void tos_Get_Rtc(RTC_HandleTypeDef *hrtc){
 8026c24:	b480      	push	{r7}
 8026c26:	b083      	sub	sp, #12
 8026c28:	af00      	add	r7, sp, #0
 8026c2a:	6078      	str	r0, [r7, #4]
	ScreenRtc=hrtc;
 8026c2c:	4a04      	ldr	r2, [pc, #16]	; (8026c40 <tos_Get_Rtc+0x1c>)
 8026c2e:	687b      	ldr	r3, [r7, #4]
 8026c30:	6013      	str	r3, [r2, #0]
}
 8026c32:	bf00      	nop
 8026c34:	370c      	adds	r7, #12
 8026c36:	46bd      	mov	sp, r7
 8026c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c3c:	4770      	bx	lr
 8026c3e:	bf00      	nop
 8026c40:	200073cc 	.word	0x200073cc

08026c44 <tos_Get_Current_Screen>:
uint8_t tos_Get_Current_Screen(void){
 8026c44:	b480      	push	{r7}
 8026c46:	af00      	add	r7, sp, #0
	return currentScreen;
 8026c48:	4b03      	ldr	r3, [pc, #12]	; (8026c58 <tos_Get_Current_Screen+0x14>)
 8026c4a:	781b      	ldrb	r3, [r3, #0]
}
 8026c4c:	4618      	mov	r0, r3
 8026c4e:	46bd      	mov	sp, r7
 8026c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c54:	4770      	bx	lr
 8026c56:	bf00      	nop
 8026c58:	2000688b 	.word	0x2000688b

08026c5c <tos_Set_Current_Screen>:
void tos_Set_Current_Screen(void){
 8026c5c:	b580      	push	{r7, lr}
 8026c5e:	af00      	add	r7, sp, #0
	currentScreen=0; tos_Screen_Chooser(currentScreen);
 8026c60:	4b06      	ldr	r3, [pc, #24]	; (8026c7c <tos_Set_Current_Screen+0x20>)
 8026c62:	2200      	movs	r2, #0
 8026c64:	701a      	strb	r2, [r3, #0]
 8026c66:	4b05      	ldr	r3, [pc, #20]	; (8026c7c <tos_Set_Current_Screen+0x20>)
 8026c68:	781b      	ldrb	r3, [r3, #0]
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	f7ff ff6e 	bl	8026b4c <tos_Screen_Chooser>
	GuiHelperOpen=true;
 8026c70:	4b03      	ldr	r3, [pc, #12]	; (8026c80 <tos_Set_Current_Screen+0x24>)
 8026c72:	2201      	movs	r2, #1
 8026c74:	701a      	strb	r2, [r3, #0]
}
 8026c76:	bf00      	nop
 8026c78:	bd80      	pop	{r7, pc}
 8026c7a:	bf00      	nop
 8026c7c:	2000688b 	.word	0x2000688b
 8026c80:	200073c5 	.word	0x200073c5

08026c84 <tos_SleepScreen_Counter>:
void tos_SleepScreen_Counter(void){
 8026c84:	b580      	push	{r7, lr}
 8026c86:	af00      	add	r7, sp, #0
	if(!screenStatu)sleepCounter++;
 8026c88:	4b14      	ldr	r3, [pc, #80]	; (8026cdc <tos_SleepScreen_Counter+0x58>)
 8026c8a:	781b      	ldrb	r3, [r3, #0]
 8026c8c:	f083 0301 	eor.w	r3, r3, #1
 8026c90:	b2db      	uxtb	r3, r3
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	d005      	beq.n	8026ca2 <tos_SleepScreen_Counter+0x1e>
 8026c96:	4b12      	ldr	r3, [pc, #72]	; (8026ce0 <tos_SleepScreen_Counter+0x5c>)
 8026c98:	781b      	ldrb	r3, [r3, #0]
 8026c9a:	3301      	adds	r3, #1
 8026c9c:	b2da      	uxtb	r2, r3
 8026c9e:	4b10      	ldr	r3, [pc, #64]	; (8026ce0 <tos_SleepScreen_Counter+0x5c>)
 8026ca0:	701a      	strb	r2, [r3, #0]
	if(sleepCounter>=100){
 8026ca2:	4b0f      	ldr	r3, [pc, #60]	; (8026ce0 <tos_SleepScreen_Counter+0x5c>)
 8026ca4:	781b      	ldrb	r3, [r3, #0]
 8026ca6:	2b63      	cmp	r3, #99	; 0x63
 8026ca8:	d916      	bls.n	8026cd8 <tos_SleepScreen_Counter+0x54>
		if(1==currentScreen) {ST7789_Select();  screenStatu=0;}
 8026caa:	4b0e      	ldr	r3, [pc, #56]	; (8026ce4 <tos_SleepScreen_Counter+0x60>)
 8026cac:	781b      	ldrb	r3, [r3, #0]
 8026cae:	2b01      	cmp	r3, #1
 8026cb0:	d107      	bne.n	8026cc2 <tos_SleepScreen_Counter+0x3e>
 8026cb2:	2200      	movs	r2, #0
 8026cb4:	2108      	movs	r1, #8
 8026cb6:	480c      	ldr	r0, [pc, #48]	; (8026ce8 <tos_SleepScreen_Counter+0x64>)
 8026cb8:	f7db fce6 	bl	8002688 <HAL_GPIO_WritePin>
 8026cbc:	4b07      	ldr	r3, [pc, #28]	; (8026cdc <tos_SleepScreen_Counter+0x58>)
 8026cbe:	2200      	movs	r2, #0
 8026cc0:	701a      	strb	r2, [r3, #0]
		currentScreen=1; tos_Screen_Chooser(currentScreen);
 8026cc2:	4b08      	ldr	r3, [pc, #32]	; (8026ce4 <tos_SleepScreen_Counter+0x60>)
 8026cc4:	2201      	movs	r2, #1
 8026cc6:	701a      	strb	r2, [r3, #0]
 8026cc8:	4b06      	ldr	r3, [pc, #24]	; (8026ce4 <tos_SleepScreen_Counter+0x60>)
 8026cca:	781b      	ldrb	r3, [r3, #0]
 8026ccc:	4618      	mov	r0, r3
 8026cce:	f7ff ff3d 	bl	8026b4c <tos_Screen_Chooser>
		sleepCounter=0;
 8026cd2:	4b03      	ldr	r3, [pc, #12]	; (8026ce0 <tos_SleepScreen_Counter+0x5c>)
 8026cd4:	2200      	movs	r2, #0
 8026cd6:	701a      	strb	r2, [r3, #0]
	}
}
 8026cd8:	bf00      	nop
 8026cda:	bd80      	pop	{r7, pc}
 8026cdc:	200073cb 	.word	0x200073cb
 8026ce0:	2000688a 	.word	0x2000688a
 8026ce4:	2000688b 	.word	0x2000688b
 8026ce8:	40020000 	.word	0x40020000

08026cec <tos_Notification_CreateRoot>:
#include "tos_Notification_Helper.h"



tos_Notification *  tos_Notification_CreateRoot(tos_Notification * root){
 8026cec:	b580      	push	{r7, lr}
 8026cee:	b082      	sub	sp, #8
 8026cf0:	af00      	add	r7, sp, #0
 8026cf2:	6078      	str	r0, [r7, #4]
	root=NULL;
 8026cf4:	2300      	movs	r3, #0
 8026cf6:	607b      	str	r3, [r7, #4]
	root=tos_Notification_CreateNode(0);
 8026cf8:	2000      	movs	r0, #0
 8026cfa:	f000 f816 	bl	8026d2a <tos_Notification_CreateNode>
 8026cfe:	6078      	str	r0, [r7, #4]
    return root;
 8026d00:	687b      	ldr	r3, [r7, #4]
}
 8026d02:	4618      	mov	r0, r3
 8026d04:	3708      	adds	r7, #8
 8026d06:	46bd      	mov	sp, r7
 8026d08:	bd80      	pop	{r7, pc}

08026d0a <tos_Notification_SetFirstNode>:
tos_Notification *  tos_Notification_SetFirstNode(tos_Notification * root,tos_Notification * node){
 8026d0a:	b480      	push	{r7}
 8026d0c:	b083      	sub	sp, #12
 8026d0e:	af00      	add	r7, sp, #0
 8026d10:	6078      	str	r0, [r7, #4]
 8026d12:	6039      	str	r1, [r7, #0]
    node=NULL;
 8026d14:	2300      	movs	r3, #0
 8026d16:	603b      	str	r3, [r7, #0]
    node=root;
 8026d18:	687b      	ldr	r3, [r7, #4]
 8026d1a:	603b      	str	r3, [r7, #0]
    return node;
 8026d1c:	683b      	ldr	r3, [r7, #0]
}
 8026d1e:	4618      	mov	r0, r3
 8026d20:	370c      	adds	r7, #12
 8026d22:	46bd      	mov	sp, r7
 8026d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d28:	4770      	bx	lr

08026d2a <tos_Notification_CreateNode>:

tos_Notification * tos_Notification_CreateNode(uint16_t index){
 8026d2a:	b580      	push	{r7, lr}
 8026d2c:	b084      	sub	sp, #16
 8026d2e:	af00      	add	r7, sp, #0
 8026d30:	4603      	mov	r3, r0
 8026d32:	80fb      	strh	r3, [r7, #6]
	tos_Notification * node;
	node=(tos_Notification *)malloc(sizeof(tos_Notification));
 8026d34:	2010      	movs	r0, #16
 8026d36:	f000 fa23 	bl	8027180 <malloc>
 8026d3a:	4603      	mov	r3, r0
 8026d3c:	60fb      	str	r3, [r7, #12]
	if(node){
 8026d3e:	68fb      	ldr	r3, [r7, #12]
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d005      	beq.n	8026d50 <tos_Notification_CreateNode+0x26>
		node->index=index;
 8026d44:	68fb      	ldr	r3, [r7, #12]
 8026d46:	88fa      	ldrh	r2, [r7, #6]
 8026d48:	811a      	strh	r2, [r3, #8]
		node->next=NULL;
 8026d4a:	68fb      	ldr	r3, [r7, #12]
 8026d4c:	2200      	movs	r2, #0
 8026d4e:	60da      	str	r2, [r3, #12]
	}
	return node;
 8026d50:	68fb      	ldr	r3, [r7, #12]
}
 8026d52:	4618      	mov	r0, r3
 8026d54:	3710      	adds	r7, #16
 8026d56:	46bd      	mov	sp, r7
 8026d58:	bd80      	pop	{r7, pc}

08026d5a <tos_Notification_RemoveNode>:

void tos_Notification_RemoveNode(tos_Notification *previous,tos_Notification *node){
 8026d5a:	b580      	push	{r7, lr}
 8026d5c:	b082      	sub	sp, #8
 8026d5e:	af00      	add	r7, sp, #0
 8026d60:	6078      	str	r0, [r7, #4]
 8026d62:	6039      	str	r1, [r7, #0]

	if(!node){
 8026d64:	683b      	ldr	r3, [r7, #0]
 8026d66:	2b00      	cmp	r3, #0
 8026d68:	d00b      	beq.n	8026d82 <tos_Notification_RemoveNode+0x28>
		return;
	}
	if(previous){
 8026d6a:	687b      	ldr	r3, [r7, #4]
 8026d6c:	2b00      	cmp	r3, #0
 8026d6e:	d003      	beq.n	8026d78 <tos_Notification_RemoveNode+0x1e>
		previous->next=node->next;
 8026d70:	683b      	ldr	r3, [r7, #0]
 8026d72:	68da      	ldr	r2, [r3, #12]
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	60da      	str	r2, [r3, #12]
	}
	free(node);
 8026d78:	6838      	ldr	r0, [r7, #0]
 8026d7a:	f000 fa09 	bl	8027190 <free>
	return;
 8026d7e:	bf00      	nop
 8026d80:	e000      	b.n	8026d84 <tos_Notification_RemoveNode+0x2a>
		return;
 8026d82:	bf00      	nop
}
 8026d84:	3708      	adds	r7, #8
 8026d86:	46bd      	mov	sp, r7
 8026d88:	bd80      	pop	{r7, pc}

08026d8a <tos_NotificationGetSize>:
		tmp=tmp->next;
	}
	return;
}

uint8_t tos_NotificationGetSize(tos_Notification * root){
 8026d8a:	b480      	push	{r7}
 8026d8c:	b085      	sub	sp, #20
 8026d8e:	af00      	add	r7, sp, #0
 8026d90:	6078      	str	r0, [r7, #4]
	tos_Notification * tmp=root;
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	60fb      	str	r3, [r7, #12]
	while(tmp){
 8026d96:	e00c      	b.n	8026db2 <tos_NotificationGetSize+0x28>
    if(tmp->next==NULL)	return (tmp->index+1);
 8026d98:	68fb      	ldr	r3, [r7, #12]
 8026d9a:	68db      	ldr	r3, [r3, #12]
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d105      	bne.n	8026dac <tos_NotificationGetSize+0x22>
 8026da0:	68fb      	ldr	r3, [r7, #12]
 8026da2:	891b      	ldrh	r3, [r3, #8]
 8026da4:	b2db      	uxtb	r3, r3
 8026da6:	3301      	adds	r3, #1
 8026da8:	b2db      	uxtb	r3, r3
 8026daa:	e005      	b.n	8026db8 <tos_NotificationGetSize+0x2e>
	tmp=tmp->next;
 8026dac:	68fb      	ldr	r3, [r7, #12]
 8026dae:	68db      	ldr	r3, [r3, #12]
 8026db0:	60fb      	str	r3, [r7, #12]
	while(tmp){
 8026db2:	68fb      	ldr	r3, [r7, #12]
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d1ef      	bne.n	8026d98 <tos_NotificationGetSize+0xe>
	}

}
 8026db8:	4618      	mov	r0, r3
 8026dba:	3714      	adds	r7, #20
 8026dbc:	46bd      	mov	sp, r7
 8026dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc2:	4770      	bx	lr

08026dc4 <tos_NotificationGetItem>:


tos_Notification *tos_NotificationGetItem(tos_Notification * root,uint16_t itemIndex){
 8026dc4:	b580      	push	{r7, lr}
 8026dc6:	b084      	sub	sp, #16
 8026dc8:	af00      	add	r7, sp, #0
 8026dca:	6078      	str	r0, [r7, #4]
 8026dcc:	460b      	mov	r3, r1
 8026dce:	807b      	strh	r3, [r7, #2]
		tos_Notification * tmp=root;
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	60fb      	str	r3, [r7, #12]
	if( itemIndex<tos_NotificationGetSize(root)){
 8026dd4:	6878      	ldr	r0, [r7, #4]
 8026dd6:	f7ff ffd8 	bl	8026d8a <tos_NotificationGetSize>
 8026dda:	4603      	mov	r3, r0
 8026ddc:	b29b      	uxth	r3, r3
 8026dde:	887a      	ldrh	r2, [r7, #2]
 8026de0:	429a      	cmp	r2, r3
 8026de2:	d20d      	bcs.n	8026e00 <tos_NotificationGetItem+0x3c>
		while(tmp){
 8026de4:	e009      	b.n	8026dfa <tos_NotificationGetItem+0x36>
	if(itemIndex==tmp->index){
 8026de6:	68fb      	ldr	r3, [r7, #12]
 8026de8:	891b      	ldrh	r3, [r3, #8]
 8026dea:	887a      	ldrh	r2, [r7, #2]
 8026dec:	429a      	cmp	r2, r3
 8026dee:	d101      	bne.n	8026df4 <tos_NotificationGetItem+0x30>
		return tmp;
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	e006      	b.n	8026e02 <tos_NotificationGetItem+0x3e>
	}tmp=tmp->next;
 8026df4:	68fb      	ldr	r3, [r7, #12]
 8026df6:	68db      	ldr	r3, [r3, #12]
 8026df8:	60fb      	str	r3, [r7, #12]
		while(tmp){
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	2b00      	cmp	r3, #0
 8026dfe:	d1f2      	bne.n	8026de6 <tos_NotificationGetItem+0x22>
	}}
        return NULL;
 8026e00:	2300      	movs	r3, #0
}
 8026e02:	4618      	mov	r0, r3
 8026e04:	3710      	adds	r7, #16
 8026e06:	46bd      	mov	sp, r7
 8026e08:	bd80      	pop	{r7, pc}

08026e0a <tos_NotificationPushItem>:


tos_Notification * tos_NotificationPushItem(tos_Notification * node,char *appName,char *notification){
 8026e0a:	b580      	push	{r7, lr}
 8026e0c:	b086      	sub	sp, #24
 8026e0e:	af00      	add	r7, sp, #0
 8026e10:	60f8      	str	r0, [r7, #12]
 8026e12:	60b9      	str	r1, [r7, #8]
 8026e14:	607a      	str	r2, [r7, #4]
		tos_Notification * tmp;
		tmp=tos_Notification_CreateNode(tos_NotificationGetSize(node));
 8026e16:	68f8      	ldr	r0, [r7, #12]
 8026e18:	f7ff ffb7 	bl	8026d8a <tos_NotificationGetSize>
 8026e1c:	4603      	mov	r3, r0
 8026e1e:	b29b      	uxth	r3, r3
 8026e20:	4618      	mov	r0, r3
 8026e22:	f7ff ff82 	bl	8026d2a <tos_Notification_CreateNode>
 8026e26:	6178      	str	r0, [r7, #20]
		if(appName!=NULL)tmp->appName =appName;
 8026e28:	68bb      	ldr	r3, [r7, #8]
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d002      	beq.n	8026e34 <tos_NotificationPushItem+0x2a>
 8026e2e:	697b      	ldr	r3, [r7, #20]
 8026e30:	68ba      	ldr	r2, [r7, #8]
 8026e32:	601a      	str	r2, [r3, #0]
		if(notification!=NULL) tmp->appNot =notification;
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d002      	beq.n	8026e40 <tos_NotificationPushItem+0x36>
 8026e3a:	697b      	ldr	r3, [r7, #20]
 8026e3c:	687a      	ldr	r2, [r7, #4]
 8026e3e:	605a      	str	r2, [r3, #4]
        node->next=tmp;
 8026e40:	68fb      	ldr	r3, [r7, #12]
 8026e42:	697a      	ldr	r2, [r7, #20]
 8026e44:	60da      	str	r2, [r3, #12]
        node=node->next;
 8026e46:	68fb      	ldr	r3, [r7, #12]
 8026e48:	68db      	ldr	r3, [r3, #12]
 8026e4a:	60fb      	str	r3, [r7, #12]
        return node;
 8026e4c:	68fb      	ldr	r3, [r7, #12]

}
 8026e4e:	4618      	mov	r0, r3
 8026e50:	3718      	adds	r7, #24
 8026e52:	46bd      	mov	sp, r7
 8026e54:	bd80      	pop	{r7, pc}

08026e56 <tos_NotificationDelItem>:

void tos_NotificationDelItem(tos_Notification *root,tos_Notification *node,uint16_t index){
 8026e56:	b580      	push	{r7, lr}
 8026e58:	b086      	sub	sp, #24
 8026e5a:	af00      	add	r7, sp, #0
 8026e5c:	60f8      	str	r0, [r7, #12]
 8026e5e:	60b9      	str	r1, [r7, #8]
 8026e60:	4613      	mov	r3, r2
 8026e62:	80fb      	strh	r3, [r7, #6]
		node=root;
 8026e64:	68fb      	ldr	r3, [r7, #12]
 8026e66:	60bb      	str	r3, [r7, #8]
		tos_Notification * tmp=NULL;
 8026e68:	2300      	movs	r3, #0
 8026e6a:	617b      	str	r3, [r7, #20]
		while(node){
 8026e6c:	e014      	b.n	8026e98 <tos_NotificationDelItem+0x42>
			if(node->index==index){
 8026e6e:	68bb      	ldr	r3, [r7, #8]
 8026e70:	891b      	ldrh	r3, [r3, #8]
 8026e72:	88fa      	ldrh	r2, [r7, #6]
 8026e74:	429a      	cmp	r2, r3
 8026e76:	d10a      	bne.n	8026e8e <tos_NotificationDelItem+0x38>
				if(tmp==NULL){
 8026e78:	697b      	ldr	r3, [r7, #20]
 8026e7a:	2b00      	cmp	r3, #0
 8026e7c:	d102      	bne.n	8026e84 <tos_NotificationDelItem+0x2e>
					root=node->next;
 8026e7e:	68bb      	ldr	r3, [r7, #8]
 8026e80:	68db      	ldr	r3, [r3, #12]
 8026e82:	60fb      	str	r3, [r7, #12]
				}
				tos_Notification_RemoveNode(tmp,node);
 8026e84:	68b9      	ldr	r1, [r7, #8]
 8026e86:	6978      	ldr	r0, [r7, #20]
 8026e88:	f7ff ff67 	bl	8026d5a <tos_Notification_RemoveNode>
				break;
 8026e8c:	e007      	b.n	8026e9e <tos_NotificationDelItem+0x48>
			}
			tmp=node;
 8026e8e:	68bb      	ldr	r3, [r7, #8]
 8026e90:	617b      	str	r3, [r7, #20]
			node=node->next;
 8026e92:	68bb      	ldr	r3, [r7, #8]
 8026e94:	68db      	ldr	r3, [r3, #12]
 8026e96:	60bb      	str	r3, [r7, #8]
		while(node){
 8026e98:	68bb      	ldr	r3, [r7, #8]
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d1e7      	bne.n	8026e6e <tos_NotificationDelItem+0x18>

		}

}
 8026e9e:	bf00      	nop
 8026ea0:	3718      	adds	r7, #24
 8026ea2:	46bd      	mov	sp, r7
 8026ea4:	bd80      	pop	{r7, pc}
	...

08026ea8 <tos_RTC_GetTime>:
	tos_RTC_SetDate(hrtc,tos_Flash_GetYear(),tos_Flash_GetMonth(),tos_Flash_GetDate());
	tos_RTC_SetTime(hrtc,tos_Flash_GetHours(),tos_Flash_GetMinutes(),tos_Flash_GetSeconds());

}

  void tos_RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t Screen){
 8026ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026eaa:	b083      	sub	sp, #12
 8026eac:	af00      	add	r7, sp, #0
 8026eae:	6078      	str	r0, [r7, #4]
 8026eb0:	460b      	mov	r3, r1
 8026eb2:	70fb      	strb	r3, [r7, #3]

			  HAL_RTC_GetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8026eb4:	2200      	movs	r2, #0
 8026eb6:	4932      	ldr	r1, [pc, #200]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026eb8:	6878      	ldr	r0, [r7, #4]
 8026eba:	f7dc fa91 	bl	80033e0 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8026ebe:	2200      	movs	r2, #0
 8026ec0:	4930      	ldr	r1, [pc, #192]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026ec2:	6878      	ldr	r0, [r7, #4]
 8026ec4:	f7dc fb91 	bl	80035ea <HAL_RTC_GetDate>
				switch(Screen){
 8026ec8:	78fb      	ldrb	r3, [r7, #3]
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d002      	beq.n	8026ed4 <tos_RTC_GetTime+0x2c>
 8026ece:	2b01      	cmp	r3, #1
 8026ed0:	d020      	beq.n	8026f14 <tos_RTC_GetTime+0x6c>
 8026ed2:	e03f      	b.n	8026f54 <tos_RTC_GetTime+0xac>
				case TOS_SCREEN_MAIN_: MainScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026ed4:	4b2a      	ldr	r3, [pc, #168]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026ed6:	7818      	ldrb	r0, [r3, #0]
 8026ed8:	4b29      	ldr	r3, [pc, #164]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026eda:	7859      	ldrb	r1, [r3, #1]
 8026edc:	4b28      	ldr	r3, [pc, #160]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026ede:	789b      	ldrb	r3, [r3, #2]
 8026ee0:	461a      	mov	r2, r3
 8026ee2:	f7fa f9e3 	bl	80212ac <MainScreen_SetTime>
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026ee6:	4b27      	ldr	r3, [pc, #156]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026ee8:	78dc      	ldrb	r4, [r3, #3]
 8026eea:	4b26      	ldr	r3, [pc, #152]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026eec:	785d      	ldrb	r5, [r3, #1]
 8026eee:	4b25      	ldr	r3, [pc, #148]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026ef0:	789e      	ldrb	r6, [r3, #2]
 8026ef2:	4b24      	ldr	r3, [pc, #144]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026ef4:	78d8      	ldrb	r0, [r3, #3]
 8026ef6:	4b23      	ldr	r3, [pc, #140]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026ef8:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));
 8026efa:	4b22      	ldr	r3, [pc, #136]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026efc:	789b      	ldrb	r3, [r3, #2]
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026efe:	b29b      	uxth	r3, r3
 8026f00:	461a      	mov	r2, r3
 8026f02:	f000 f88b 	bl	802701c <weekDayFinder>
 8026f06:	4603      	mov	r3, r0
 8026f08:	4632      	mov	r2, r6
 8026f0a:	4629      	mov	r1, r5
 8026f0c:	4620      	mov	r0, r4
 8026f0e:	f7fa f9eb 	bl	80212e8 <MainScreen_SetDate>
				  break;
 8026f12:	e032      	b.n	8026f7a <tos_RTC_GetTime+0xd2>
				case TOS_SCREEN_SLEEPMODE_: SleepModeScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026f14:	4b1a      	ldr	r3, [pc, #104]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f16:	7818      	ldrb	r0, [r3, #0]
 8026f18:	4b19      	ldr	r3, [pc, #100]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f1a:	7859      	ldrb	r1, [r3, #1]
 8026f1c:	4b18      	ldr	r3, [pc, #96]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f1e:	789b      	ldrb	r3, [r3, #2]
 8026f20:	461a      	mov	r2, r3
 8026f22:	f7fe f83f 	bl	8024fa4 <SleepModeScreen_SetTime>
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026f26:	4b17      	ldr	r3, [pc, #92]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f28:	78dc      	ldrb	r4, [r3, #3]
 8026f2a:	4b16      	ldr	r3, [pc, #88]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f2c:	785d      	ldrb	r5, [r3, #1]
 8026f2e:	4b15      	ldr	r3, [pc, #84]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f30:	789e      	ldrb	r6, [r3, #2]
 8026f32:	4b14      	ldr	r3, [pc, #80]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f34:	78d8      	ldrb	r0, [r3, #3]
 8026f36:	4b13      	ldr	r3, [pc, #76]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f38:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8026f3a:	4b12      	ldr	r3, [pc, #72]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f3c:	789b      	ldrb	r3, [r3, #2]
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026f3e:	b29b      	uxth	r3, r3
 8026f40:	461a      	mov	r2, r3
 8026f42:	f000 f86b 	bl	802701c <weekDayFinder>
 8026f46:	4603      	mov	r3, r0
 8026f48:	4632      	mov	r2, r6
 8026f4a:	4629      	mov	r1, r5
 8026f4c:	4620      	mov	r0, r4
 8026f4e:	f7fe f847 	bl	8024fe0 <SleepModeScreen_SetDate>
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8026f52:	e012      	b.n	8026f7a <tos_RTC_GetTime+0xd2>
				default:
					  SettingsScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026f54:	4b0a      	ldr	r3, [pc, #40]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f56:	7818      	ldrb	r0, [r3, #0]
 8026f58:	4b09      	ldr	r3, [pc, #36]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f5a:	7859      	ldrb	r1, [r3, #1]
 8026f5c:	4b08      	ldr	r3, [pc, #32]	; (8026f80 <tos_RTC_GetTime+0xd8>)
 8026f5e:	789b      	ldrb	r3, [r3, #2]
 8026f60:	461a      	mov	r2, r3
 8026f62:	f7fd fd35 	bl	80249d0 <SettingsScreen_SetTime>
					  SettingsScreen_SetDate(myDate.Year,myDate.Month,myDate.Date);
 8026f66:	4b07      	ldr	r3, [pc, #28]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f68:	78d8      	ldrb	r0, [r3, #3]
 8026f6a:	4b06      	ldr	r3, [pc, #24]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f6c:	7859      	ldrb	r1, [r3, #1]
 8026f6e:	4b05      	ldr	r3, [pc, #20]	; (8026f84 <tos_RTC_GetTime+0xdc>)
 8026f70:	789b      	ldrb	r3, [r3, #2]
 8026f72:	461a      	mov	r2, r3
 8026f74:	f7fd fd54 	bl	8024a20 <SettingsScreen_SetDate>
					  return;
 8026f78:	bf00      	nop
				}

			/*  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
					  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));*/
  }
 8026f7a:	370c      	adds	r7, #12
 8026f7c:	46bd      	mov	sp, r7
 8026f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f80:	2000688c 	.word	0x2000688c
 8026f84:	200068a0 	.word	0x200068a0

08026f88 <tos_RTC_SetTime>:

  void tos_RTC_SetTime(RTC_HandleTypeDef *hrtc,uint8_t setHours,uint8_t setMins,uint8_t setSecs){
 8026f88:	b580      	push	{r7, lr}
 8026f8a:	b082      	sub	sp, #8
 8026f8c:	af00      	add	r7, sp, #0
 8026f8e:	6078      	str	r0, [r7, #4]
 8026f90:	4608      	mov	r0, r1
 8026f92:	4611      	mov	r1, r2
 8026f94:	461a      	mov	r2, r3
 8026f96:	4603      	mov	r3, r0
 8026f98:	70fb      	strb	r3, [r7, #3]
 8026f9a:	460b      	mov	r3, r1
 8026f9c:	70bb      	strb	r3, [r7, #2]
 8026f9e:	4613      	mov	r3, r2
 8026fa0:	707b      	strb	r3, [r7, #1]
	  myTime.Hours = setHours;
 8026fa2:	4a09      	ldr	r2, [pc, #36]	; (8026fc8 <tos_RTC_SetTime+0x40>)
 8026fa4:	78fb      	ldrb	r3, [r7, #3]
 8026fa6:	7013      	strb	r3, [r2, #0]
	  myTime.Minutes = setMins;
 8026fa8:	4a07      	ldr	r2, [pc, #28]	; (8026fc8 <tos_RTC_SetTime+0x40>)
 8026faa:	78bb      	ldrb	r3, [r7, #2]
 8026fac:	7053      	strb	r3, [r2, #1]
	  myTime.Seconds = setSecs;
 8026fae:	4a06      	ldr	r2, [pc, #24]	; (8026fc8 <tos_RTC_SetTime+0x40>)
 8026fb0:	787b      	ldrb	r3, [r7, #1]
 8026fb2:	7093      	strb	r3, [r2, #2]
	  HAL_RTC_SetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8026fb4:	2200      	movs	r2, #0
 8026fb6:	4904      	ldr	r1, [pc, #16]	; (8026fc8 <tos_RTC_SetTime+0x40>)
 8026fb8:	6878      	ldr	r0, [r7, #4]
 8026fba:	f7dc f954 	bl	8003266 <HAL_RTC_SetTime>
  }
 8026fbe:	bf00      	nop
 8026fc0:	3708      	adds	r7, #8
 8026fc2:	46bd      	mov	sp, r7
 8026fc4:	bd80      	pop	{r7, pc}
 8026fc6:	bf00      	nop
 8026fc8:	2000688c 	.word	0x2000688c

08026fcc <tos_RTC_SetDate>:

  void tos_RTC_SetDate(RTC_HandleTypeDef *hrtc,uint8_t setYear,uint8_t setMonth,uint8_t setDate){
 8026fcc:	b580      	push	{r7, lr}
 8026fce:	b082      	sub	sp, #8
 8026fd0:	af00      	add	r7, sp, #0
 8026fd2:	6078      	str	r0, [r7, #4]
 8026fd4:	4608      	mov	r0, r1
 8026fd6:	4611      	mov	r1, r2
 8026fd8:	461a      	mov	r2, r3
 8026fda:	4603      	mov	r3, r0
 8026fdc:	70fb      	strb	r3, [r7, #3]
 8026fde:	460b      	mov	r3, r1
 8026fe0:	70bb      	strb	r3, [r7, #2]
 8026fe2:	4613      	mov	r3, r2
 8026fe4:	707b      	strb	r3, [r7, #1]
	  if(setDate>31 || setMonth>12) return;
 8026fe6:	787b      	ldrb	r3, [r7, #1]
 8026fe8:	2b1f      	cmp	r3, #31
 8026fea:	d811      	bhi.n	8027010 <tos_RTC_SetDate+0x44>
 8026fec:	78bb      	ldrb	r3, [r7, #2]
 8026fee:	2b0c      	cmp	r3, #12
 8026ff0:	d80e      	bhi.n	8027010 <tos_RTC_SetDate+0x44>
	  myDate.Month = setMonth;
 8026ff2:	4a09      	ldr	r2, [pc, #36]	; (8027018 <tos_RTC_SetDate+0x4c>)
 8026ff4:	78bb      	ldrb	r3, [r7, #2]
 8026ff6:	7053      	strb	r3, [r2, #1]
	  myDate.Date = setDate;
 8026ff8:	4a07      	ldr	r2, [pc, #28]	; (8027018 <tos_RTC_SetDate+0x4c>)
 8026ffa:	787b      	ldrb	r3, [r7, #1]
 8026ffc:	7093      	strb	r3, [r2, #2]
	  myDate.Year = setYear;
 8026ffe:	4a06      	ldr	r2, [pc, #24]	; (8027018 <tos_RTC_SetDate+0x4c>)
 8027000:	78fb      	ldrb	r3, [r7, #3]
 8027002:	70d3      	strb	r3, [r2, #3]
	  HAL_RTC_SetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8027004:	2200      	movs	r2, #0
 8027006:	4904      	ldr	r1, [pc, #16]	; (8027018 <tos_RTC_SetDate+0x4c>)
 8027008:	6878      	ldr	r0, [r7, #4]
 802700a:	f7dc fa47 	bl	800349c <HAL_RTC_SetDate>
 802700e:	e000      	b.n	8027012 <tos_RTC_SetDate+0x46>
	  if(setDate>31 || setMonth>12) return;
 8027010:	bf00      	nop
  }
 8027012:	3708      	adds	r7, #8
 8027014:	46bd      	mov	sp, r7
 8027016:	bd80      	pop	{r7, pc}
 8027018:	200068a0 	.word	0x200068a0

0802701c <weekDayFinder>:



char * weekDayFinder(uint8_t getYear,uint8_t getMonth,uint16_t getDate){
 802701c:	b590      	push	{r4, r7, lr}
 802701e:	b087      	sub	sp, #28
 8027020:	af00      	add	r7, sp, #0
 8027022:	4603      	mov	r3, r0
 8027024:	71fb      	strb	r3, [r7, #7]
 8027026:	460b      	mov	r3, r1
 8027028:	71bb      	strb	r3, [r7, #6]
 802702a:	4613      	mov	r3, r2
 802702c:	80bb      	strh	r3, [r7, #4]
	getYear=getYear+2000;
 802702e:	79fb      	ldrb	r3, [r7, #7]
 8027030:	3b30      	subs	r3, #48	; 0x30
 8027032:	71fb      	strb	r3, [r7, #7]
	static uint8_t t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	getYear-= getMonth < 3;
 8027034:	79bb      	ldrb	r3, [r7, #6]
 8027036:	2b02      	cmp	r3, #2
 8027038:	bf94      	ite	ls
 802703a:	2301      	movls	r3, #1
 802703c:	2300      	movhi	r3, #0
 802703e:	b2db      	uxtb	r3, r3
 8027040:	461a      	mov	r2, r3
 8027042:	79fb      	ldrb	r3, [r7, #7]
 8027044:	1a9b      	subs	r3, r3, r2
 8027046:	71fb      	strb	r3, [r7, #7]
	double weekDayTmp =(double)((getYear + (getYear/4) - (getYear/100) + (getYear/400) + t[getMonth-1] + getDate) % 7);
 8027048:	79fb      	ldrb	r3, [r7, #7]
 802704a:	79fa      	ldrb	r2, [r7, #7]
 802704c:	0892      	lsrs	r2, r2, #2
 802704e:	b2d2      	uxtb	r2, r2
 8027050:	4413      	add	r3, r2
 8027052:	79fa      	ldrb	r2, [r7, #7]
 8027054:	492a      	ldr	r1, [pc, #168]	; (8027100 <weekDayFinder+0xe4>)
 8027056:	fba1 1202 	umull	r1, r2, r1, r2
 802705a:	0952      	lsrs	r2, r2, #5
 802705c:	b2d2      	uxtb	r2, r2
 802705e:	1a9a      	subs	r2, r3, r2
 8027060:	79fb      	ldrb	r3, [r7, #7]
 8027062:	4927      	ldr	r1, [pc, #156]	; (8027100 <weekDayFinder+0xe4>)
 8027064:	fb81 0103 	smull	r0, r1, r1, r3
 8027068:	11c9      	asrs	r1, r1, #7
 802706a:	17db      	asrs	r3, r3, #31
 802706c:	1acb      	subs	r3, r1, r3
 802706e:	4413      	add	r3, r2
 8027070:	79ba      	ldrb	r2, [r7, #6]
 8027072:	3a01      	subs	r2, #1
 8027074:	4923      	ldr	r1, [pc, #140]	; (8027104 <weekDayFinder+0xe8>)
 8027076:	5c8a      	ldrb	r2, [r1, r2]
 8027078:	441a      	add	r2, r3
 802707a:	88bb      	ldrh	r3, [r7, #4]
 802707c:	441a      	add	r2, r3
 802707e:	4b22      	ldr	r3, [pc, #136]	; (8027108 <weekDayFinder+0xec>)
 8027080:	fb83 1302 	smull	r1, r3, r3, r2
 8027084:	4413      	add	r3, r2
 8027086:	1099      	asrs	r1, r3, #2
 8027088:	17d3      	asrs	r3, r2, #31
 802708a:	1ac9      	subs	r1, r1, r3
 802708c:	460b      	mov	r3, r1
 802708e:	00db      	lsls	r3, r3, #3
 8027090:	1a5b      	subs	r3, r3, r1
 8027092:	1ad1      	subs	r1, r2, r3
 8027094:	4608      	mov	r0, r1
 8027096:	f7d9 fa55 	bl	8000544 <__aeabi_i2d>
 802709a:	4603      	mov	r3, r0
 802709c:	460c      	mov	r4, r1
 802709e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t weekDay =tos_Rounding(weekDayTmp);
 80270a2:	ed97 0b04 	vldr	d0, [r7, #16]
 80270a6:	f7ff fbeb 	bl	8026880 <tos_Rounding>
 80270aa:	4603      	mov	r3, r0
 80270ac:	73fb      	strb	r3, [r7, #15]


	switch(weekDay){
 80270ae:	7bfb      	ldrb	r3, [r7, #15]
 80270b0:	2b06      	cmp	r3, #6
 80270b2:	d81f      	bhi.n	80270f4 <weekDayFinder+0xd8>
 80270b4:	a201      	add	r2, pc, #4	; (adr r2, 80270bc <weekDayFinder+0xa0>)
 80270b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80270ba:	bf00      	nop
 80270bc:	080270d9 	.word	0x080270d9
 80270c0:	080270dd 	.word	0x080270dd
 80270c4:	080270e1 	.word	0x080270e1
 80270c8:	080270e5 	.word	0x080270e5
 80270cc:	080270e9 	.word	0x080270e9
 80270d0:	080270ed 	.word	0x080270ed
 80270d4:	080270f1 	.word	0x080270f1
	case 0: return "Pazartesi"; break;
 80270d8:	4b0c      	ldr	r3, [pc, #48]	; (802710c <weekDayFinder+0xf0>)
 80270da:	e00c      	b.n	80270f6 <weekDayFinder+0xda>
	case 1: return "Sali"; break;
 80270dc:	4b0c      	ldr	r3, [pc, #48]	; (8027110 <weekDayFinder+0xf4>)
 80270de:	e00a      	b.n	80270f6 <weekDayFinder+0xda>
	case 2: return "Carsamba"; break;
 80270e0:	4b0c      	ldr	r3, [pc, #48]	; (8027114 <weekDayFinder+0xf8>)
 80270e2:	e008      	b.n	80270f6 <weekDayFinder+0xda>
	case 3: return "Persembe"; break;
 80270e4:	4b0c      	ldr	r3, [pc, #48]	; (8027118 <weekDayFinder+0xfc>)
 80270e6:	e006      	b.n	80270f6 <weekDayFinder+0xda>
	case 4: return "Cuma"; break;
 80270e8:	4b0c      	ldr	r3, [pc, #48]	; (802711c <weekDayFinder+0x100>)
 80270ea:	e004      	b.n	80270f6 <weekDayFinder+0xda>
	case 5: return "Cumartesi"; break;
 80270ec:	4b0c      	ldr	r3, [pc, #48]	; (8027120 <weekDayFinder+0x104>)
 80270ee:	e002      	b.n	80270f6 <weekDayFinder+0xda>
	case 6: return "Pazar"; break;
 80270f0:	4b0c      	ldr	r3, [pc, #48]	; (8027124 <weekDayFinder+0x108>)
 80270f2:	e000      	b.n	80270f6 <weekDayFinder+0xda>
	default: return " ";
 80270f4:	4b0c      	ldr	r3, [pc, #48]	; (8027128 <weekDayFinder+0x10c>)
	}

}
 80270f6:	4618      	mov	r0, r3
 80270f8:	371c      	adds	r7, #28
 80270fa:	46bd      	mov	sp, r7
 80270fc:	bd90      	pop	{r4, r7, pc}
 80270fe:	bf00      	nop
 8027100:	51eb851f 	.word	0x51eb851f
 8027104:	20002850 	.word	0x20002850
 8027108:	92492493 	.word	0x92492493
 802710c:	0802a484 	.word	0x0802a484
 8027110:	0802a490 	.word	0x0802a490
 8027114:	0802a498 	.word	0x0802a498
 8027118:	0802a4a4 	.word	0x0802a4a4
 802711c:	0802a4b0 	.word	0x0802a4b0
 8027120:	0802a4b8 	.word	0x0802a4b8
 8027124:	0802a4c4 	.word	0x0802a4c4
 8027128:	0802a4cc 	.word	0x0802a4cc

0802712c <__errno>:
 802712c:	4b01      	ldr	r3, [pc, #4]	; (8027134 <__errno+0x8>)
 802712e:	6818      	ldr	r0, [r3, #0]
 8027130:	4770      	bx	lr
 8027132:	bf00      	nop
 8027134:	2000285c 	.word	0x2000285c

08027138 <__libc_init_array>:
 8027138:	b570      	push	{r4, r5, r6, lr}
 802713a:	4e0d      	ldr	r6, [pc, #52]	; (8027170 <__libc_init_array+0x38>)
 802713c:	4c0d      	ldr	r4, [pc, #52]	; (8027174 <__libc_init_array+0x3c>)
 802713e:	1ba4      	subs	r4, r4, r6
 8027140:	10a4      	asrs	r4, r4, #2
 8027142:	2500      	movs	r5, #0
 8027144:	42a5      	cmp	r5, r4
 8027146:	d109      	bne.n	802715c <__libc_init_array+0x24>
 8027148:	4e0b      	ldr	r6, [pc, #44]	; (8027178 <__libc_init_array+0x40>)
 802714a:	4c0c      	ldr	r4, [pc, #48]	; (802717c <__libc_init_array+0x44>)
 802714c:	f002 fd48 	bl	8029be0 <_init>
 8027150:	1ba4      	subs	r4, r4, r6
 8027152:	10a4      	asrs	r4, r4, #2
 8027154:	2500      	movs	r5, #0
 8027156:	42a5      	cmp	r5, r4
 8027158:	d105      	bne.n	8027166 <__libc_init_array+0x2e>
 802715a:	bd70      	pop	{r4, r5, r6, pc}
 802715c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027160:	4798      	blx	r3
 8027162:	3501      	adds	r5, #1
 8027164:	e7ee      	b.n	8027144 <__libc_init_array+0xc>
 8027166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802716a:	4798      	blx	r3
 802716c:	3501      	adds	r5, #1
 802716e:	e7f2      	b.n	8027156 <__libc_init_array+0x1e>
 8027170:	0804522c 	.word	0x0804522c
 8027174:	0804522c 	.word	0x0804522c
 8027178:	0804522c 	.word	0x0804522c
 802717c:	08045230 	.word	0x08045230

08027180 <malloc>:
 8027180:	4b02      	ldr	r3, [pc, #8]	; (802718c <malloc+0xc>)
 8027182:	4601      	mov	r1, r0
 8027184:	6818      	ldr	r0, [r3, #0]
 8027186:	f000 b86d 	b.w	8027264 <_malloc_r>
 802718a:	bf00      	nop
 802718c:	2000285c 	.word	0x2000285c

08027190 <free>:
 8027190:	4b02      	ldr	r3, [pc, #8]	; (802719c <free+0xc>)
 8027192:	4601      	mov	r1, r0
 8027194:	6818      	ldr	r0, [r3, #0]
 8027196:	f000 b817 	b.w	80271c8 <_free_r>
 802719a:	bf00      	nop
 802719c:	2000285c 	.word	0x2000285c

080271a0 <memcpy>:
 80271a0:	b510      	push	{r4, lr}
 80271a2:	1e43      	subs	r3, r0, #1
 80271a4:	440a      	add	r2, r1
 80271a6:	4291      	cmp	r1, r2
 80271a8:	d100      	bne.n	80271ac <memcpy+0xc>
 80271aa:	bd10      	pop	{r4, pc}
 80271ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80271b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80271b4:	e7f7      	b.n	80271a6 <memcpy+0x6>

080271b6 <memset>:
 80271b6:	4402      	add	r2, r0
 80271b8:	4603      	mov	r3, r0
 80271ba:	4293      	cmp	r3, r2
 80271bc:	d100      	bne.n	80271c0 <memset+0xa>
 80271be:	4770      	bx	lr
 80271c0:	f803 1b01 	strb.w	r1, [r3], #1
 80271c4:	e7f9      	b.n	80271ba <memset+0x4>
	...

080271c8 <_free_r>:
 80271c8:	b538      	push	{r3, r4, r5, lr}
 80271ca:	4605      	mov	r5, r0
 80271cc:	2900      	cmp	r1, #0
 80271ce:	d045      	beq.n	802725c <_free_r+0x94>
 80271d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80271d4:	1f0c      	subs	r4, r1, #4
 80271d6:	2b00      	cmp	r3, #0
 80271d8:	bfb8      	it	lt
 80271da:	18e4      	addlt	r4, r4, r3
 80271dc:	f001 fbc2 	bl	8028964 <__malloc_lock>
 80271e0:	4a1f      	ldr	r2, [pc, #124]	; (8027260 <_free_r+0x98>)
 80271e2:	6813      	ldr	r3, [r2, #0]
 80271e4:	4610      	mov	r0, r2
 80271e6:	b933      	cbnz	r3, 80271f6 <_free_r+0x2e>
 80271e8:	6063      	str	r3, [r4, #4]
 80271ea:	6014      	str	r4, [r2, #0]
 80271ec:	4628      	mov	r0, r5
 80271ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80271f2:	f001 bbb8 	b.w	8028966 <__malloc_unlock>
 80271f6:	42a3      	cmp	r3, r4
 80271f8:	d90c      	bls.n	8027214 <_free_r+0x4c>
 80271fa:	6821      	ldr	r1, [r4, #0]
 80271fc:	1862      	adds	r2, r4, r1
 80271fe:	4293      	cmp	r3, r2
 8027200:	bf04      	itt	eq
 8027202:	681a      	ldreq	r2, [r3, #0]
 8027204:	685b      	ldreq	r3, [r3, #4]
 8027206:	6063      	str	r3, [r4, #4]
 8027208:	bf04      	itt	eq
 802720a:	1852      	addeq	r2, r2, r1
 802720c:	6022      	streq	r2, [r4, #0]
 802720e:	6004      	str	r4, [r0, #0]
 8027210:	e7ec      	b.n	80271ec <_free_r+0x24>
 8027212:	4613      	mov	r3, r2
 8027214:	685a      	ldr	r2, [r3, #4]
 8027216:	b10a      	cbz	r2, 802721c <_free_r+0x54>
 8027218:	42a2      	cmp	r2, r4
 802721a:	d9fa      	bls.n	8027212 <_free_r+0x4a>
 802721c:	6819      	ldr	r1, [r3, #0]
 802721e:	1858      	adds	r0, r3, r1
 8027220:	42a0      	cmp	r0, r4
 8027222:	d10b      	bne.n	802723c <_free_r+0x74>
 8027224:	6820      	ldr	r0, [r4, #0]
 8027226:	4401      	add	r1, r0
 8027228:	1858      	adds	r0, r3, r1
 802722a:	4282      	cmp	r2, r0
 802722c:	6019      	str	r1, [r3, #0]
 802722e:	d1dd      	bne.n	80271ec <_free_r+0x24>
 8027230:	6810      	ldr	r0, [r2, #0]
 8027232:	6852      	ldr	r2, [r2, #4]
 8027234:	605a      	str	r2, [r3, #4]
 8027236:	4401      	add	r1, r0
 8027238:	6019      	str	r1, [r3, #0]
 802723a:	e7d7      	b.n	80271ec <_free_r+0x24>
 802723c:	d902      	bls.n	8027244 <_free_r+0x7c>
 802723e:	230c      	movs	r3, #12
 8027240:	602b      	str	r3, [r5, #0]
 8027242:	e7d3      	b.n	80271ec <_free_r+0x24>
 8027244:	6820      	ldr	r0, [r4, #0]
 8027246:	1821      	adds	r1, r4, r0
 8027248:	428a      	cmp	r2, r1
 802724a:	bf04      	itt	eq
 802724c:	6811      	ldreq	r1, [r2, #0]
 802724e:	6852      	ldreq	r2, [r2, #4]
 8027250:	6062      	str	r2, [r4, #4]
 8027252:	bf04      	itt	eq
 8027254:	1809      	addeq	r1, r1, r0
 8027256:	6021      	streq	r1, [r4, #0]
 8027258:	605c      	str	r4, [r3, #4]
 802725a:	e7c7      	b.n	80271ec <_free_r+0x24>
 802725c:	bd38      	pop	{r3, r4, r5, pc}
 802725e:	bf00      	nop
 8027260:	200068a4 	.word	0x200068a4

08027264 <_malloc_r>:
 8027264:	b570      	push	{r4, r5, r6, lr}
 8027266:	1ccd      	adds	r5, r1, #3
 8027268:	f025 0503 	bic.w	r5, r5, #3
 802726c:	3508      	adds	r5, #8
 802726e:	2d0c      	cmp	r5, #12
 8027270:	bf38      	it	cc
 8027272:	250c      	movcc	r5, #12
 8027274:	2d00      	cmp	r5, #0
 8027276:	4606      	mov	r6, r0
 8027278:	db01      	blt.n	802727e <_malloc_r+0x1a>
 802727a:	42a9      	cmp	r1, r5
 802727c:	d903      	bls.n	8027286 <_malloc_r+0x22>
 802727e:	230c      	movs	r3, #12
 8027280:	6033      	str	r3, [r6, #0]
 8027282:	2000      	movs	r0, #0
 8027284:	bd70      	pop	{r4, r5, r6, pc}
 8027286:	f001 fb6d 	bl	8028964 <__malloc_lock>
 802728a:	4a21      	ldr	r2, [pc, #132]	; (8027310 <_malloc_r+0xac>)
 802728c:	6814      	ldr	r4, [r2, #0]
 802728e:	4621      	mov	r1, r4
 8027290:	b991      	cbnz	r1, 80272b8 <_malloc_r+0x54>
 8027292:	4c20      	ldr	r4, [pc, #128]	; (8027314 <_malloc_r+0xb0>)
 8027294:	6823      	ldr	r3, [r4, #0]
 8027296:	b91b      	cbnz	r3, 80272a0 <_malloc_r+0x3c>
 8027298:	4630      	mov	r0, r6
 802729a:	f000 fc99 	bl	8027bd0 <_sbrk_r>
 802729e:	6020      	str	r0, [r4, #0]
 80272a0:	4629      	mov	r1, r5
 80272a2:	4630      	mov	r0, r6
 80272a4:	f000 fc94 	bl	8027bd0 <_sbrk_r>
 80272a8:	1c43      	adds	r3, r0, #1
 80272aa:	d124      	bne.n	80272f6 <_malloc_r+0x92>
 80272ac:	230c      	movs	r3, #12
 80272ae:	6033      	str	r3, [r6, #0]
 80272b0:	4630      	mov	r0, r6
 80272b2:	f001 fb58 	bl	8028966 <__malloc_unlock>
 80272b6:	e7e4      	b.n	8027282 <_malloc_r+0x1e>
 80272b8:	680b      	ldr	r3, [r1, #0]
 80272ba:	1b5b      	subs	r3, r3, r5
 80272bc:	d418      	bmi.n	80272f0 <_malloc_r+0x8c>
 80272be:	2b0b      	cmp	r3, #11
 80272c0:	d90f      	bls.n	80272e2 <_malloc_r+0x7e>
 80272c2:	600b      	str	r3, [r1, #0]
 80272c4:	50cd      	str	r5, [r1, r3]
 80272c6:	18cc      	adds	r4, r1, r3
 80272c8:	4630      	mov	r0, r6
 80272ca:	f001 fb4c 	bl	8028966 <__malloc_unlock>
 80272ce:	f104 000b 	add.w	r0, r4, #11
 80272d2:	1d23      	adds	r3, r4, #4
 80272d4:	f020 0007 	bic.w	r0, r0, #7
 80272d8:	1ac3      	subs	r3, r0, r3
 80272da:	d0d3      	beq.n	8027284 <_malloc_r+0x20>
 80272dc:	425a      	negs	r2, r3
 80272de:	50e2      	str	r2, [r4, r3]
 80272e0:	e7d0      	b.n	8027284 <_malloc_r+0x20>
 80272e2:	428c      	cmp	r4, r1
 80272e4:	684b      	ldr	r3, [r1, #4]
 80272e6:	bf16      	itet	ne
 80272e8:	6063      	strne	r3, [r4, #4]
 80272ea:	6013      	streq	r3, [r2, #0]
 80272ec:	460c      	movne	r4, r1
 80272ee:	e7eb      	b.n	80272c8 <_malloc_r+0x64>
 80272f0:	460c      	mov	r4, r1
 80272f2:	6849      	ldr	r1, [r1, #4]
 80272f4:	e7cc      	b.n	8027290 <_malloc_r+0x2c>
 80272f6:	1cc4      	adds	r4, r0, #3
 80272f8:	f024 0403 	bic.w	r4, r4, #3
 80272fc:	42a0      	cmp	r0, r4
 80272fe:	d005      	beq.n	802730c <_malloc_r+0xa8>
 8027300:	1a21      	subs	r1, r4, r0
 8027302:	4630      	mov	r0, r6
 8027304:	f000 fc64 	bl	8027bd0 <_sbrk_r>
 8027308:	3001      	adds	r0, #1
 802730a:	d0cf      	beq.n	80272ac <_malloc_r+0x48>
 802730c:	6025      	str	r5, [r4, #0]
 802730e:	e7db      	b.n	80272c8 <_malloc_r+0x64>
 8027310:	200068a4 	.word	0x200068a4
 8027314:	200068a8 	.word	0x200068a8

08027318 <__cvt>:
 8027318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802731c:	ec55 4b10 	vmov	r4, r5, d0
 8027320:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027322:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027326:	2d00      	cmp	r5, #0
 8027328:	460e      	mov	r6, r1
 802732a:	4691      	mov	r9, r2
 802732c:	4619      	mov	r1, r3
 802732e:	bfb8      	it	lt
 8027330:	4622      	movlt	r2, r4
 8027332:	462b      	mov	r3, r5
 8027334:	f027 0720 	bic.w	r7, r7, #32
 8027338:	bfbb      	ittet	lt
 802733a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802733e:	461d      	movlt	r5, r3
 8027340:	2300      	movge	r3, #0
 8027342:	232d      	movlt	r3, #45	; 0x2d
 8027344:	bfb8      	it	lt
 8027346:	4614      	movlt	r4, r2
 8027348:	2f46      	cmp	r7, #70	; 0x46
 802734a:	700b      	strb	r3, [r1, #0]
 802734c:	d004      	beq.n	8027358 <__cvt+0x40>
 802734e:	2f45      	cmp	r7, #69	; 0x45
 8027350:	d100      	bne.n	8027354 <__cvt+0x3c>
 8027352:	3601      	adds	r6, #1
 8027354:	2102      	movs	r1, #2
 8027356:	e000      	b.n	802735a <__cvt+0x42>
 8027358:	2103      	movs	r1, #3
 802735a:	ab03      	add	r3, sp, #12
 802735c:	9301      	str	r3, [sp, #4]
 802735e:	ab02      	add	r3, sp, #8
 8027360:	9300      	str	r3, [sp, #0]
 8027362:	4632      	mov	r2, r6
 8027364:	4653      	mov	r3, sl
 8027366:	ec45 4b10 	vmov	d0, r4, r5
 802736a:	f000 fd35 	bl	8027dd8 <_dtoa_r>
 802736e:	2f47      	cmp	r7, #71	; 0x47
 8027370:	4680      	mov	r8, r0
 8027372:	d102      	bne.n	802737a <__cvt+0x62>
 8027374:	f019 0f01 	tst.w	r9, #1
 8027378:	d026      	beq.n	80273c8 <__cvt+0xb0>
 802737a:	2f46      	cmp	r7, #70	; 0x46
 802737c:	eb08 0906 	add.w	r9, r8, r6
 8027380:	d111      	bne.n	80273a6 <__cvt+0x8e>
 8027382:	f898 3000 	ldrb.w	r3, [r8]
 8027386:	2b30      	cmp	r3, #48	; 0x30
 8027388:	d10a      	bne.n	80273a0 <__cvt+0x88>
 802738a:	2200      	movs	r2, #0
 802738c:	2300      	movs	r3, #0
 802738e:	4620      	mov	r0, r4
 8027390:	4629      	mov	r1, r5
 8027392:	f7d9 fba9 	bl	8000ae8 <__aeabi_dcmpeq>
 8027396:	b918      	cbnz	r0, 80273a0 <__cvt+0x88>
 8027398:	f1c6 0601 	rsb	r6, r6, #1
 802739c:	f8ca 6000 	str.w	r6, [sl]
 80273a0:	f8da 3000 	ldr.w	r3, [sl]
 80273a4:	4499      	add	r9, r3
 80273a6:	2200      	movs	r2, #0
 80273a8:	2300      	movs	r3, #0
 80273aa:	4620      	mov	r0, r4
 80273ac:	4629      	mov	r1, r5
 80273ae:	f7d9 fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80273b2:	b938      	cbnz	r0, 80273c4 <__cvt+0xac>
 80273b4:	2230      	movs	r2, #48	; 0x30
 80273b6:	9b03      	ldr	r3, [sp, #12]
 80273b8:	454b      	cmp	r3, r9
 80273ba:	d205      	bcs.n	80273c8 <__cvt+0xb0>
 80273bc:	1c59      	adds	r1, r3, #1
 80273be:	9103      	str	r1, [sp, #12]
 80273c0:	701a      	strb	r2, [r3, #0]
 80273c2:	e7f8      	b.n	80273b6 <__cvt+0x9e>
 80273c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80273c8:	9b03      	ldr	r3, [sp, #12]
 80273ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80273cc:	eba3 0308 	sub.w	r3, r3, r8
 80273d0:	4640      	mov	r0, r8
 80273d2:	6013      	str	r3, [r2, #0]
 80273d4:	b004      	add	sp, #16
 80273d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080273da <__exponent>:
 80273da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80273dc:	2900      	cmp	r1, #0
 80273de:	4604      	mov	r4, r0
 80273e0:	bfba      	itte	lt
 80273e2:	4249      	neglt	r1, r1
 80273e4:	232d      	movlt	r3, #45	; 0x2d
 80273e6:	232b      	movge	r3, #43	; 0x2b
 80273e8:	2909      	cmp	r1, #9
 80273ea:	f804 2b02 	strb.w	r2, [r4], #2
 80273ee:	7043      	strb	r3, [r0, #1]
 80273f0:	dd20      	ble.n	8027434 <__exponent+0x5a>
 80273f2:	f10d 0307 	add.w	r3, sp, #7
 80273f6:	461f      	mov	r7, r3
 80273f8:	260a      	movs	r6, #10
 80273fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80273fe:	fb06 1115 	mls	r1, r6, r5, r1
 8027402:	3130      	adds	r1, #48	; 0x30
 8027404:	2d09      	cmp	r5, #9
 8027406:	f803 1c01 	strb.w	r1, [r3, #-1]
 802740a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 802740e:	4629      	mov	r1, r5
 8027410:	dc09      	bgt.n	8027426 <__exponent+0x4c>
 8027412:	3130      	adds	r1, #48	; 0x30
 8027414:	3b02      	subs	r3, #2
 8027416:	f802 1c01 	strb.w	r1, [r2, #-1]
 802741a:	42bb      	cmp	r3, r7
 802741c:	4622      	mov	r2, r4
 802741e:	d304      	bcc.n	802742a <__exponent+0x50>
 8027420:	1a10      	subs	r0, r2, r0
 8027422:	b003      	add	sp, #12
 8027424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027426:	4613      	mov	r3, r2
 8027428:	e7e7      	b.n	80273fa <__exponent+0x20>
 802742a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802742e:	f804 2b01 	strb.w	r2, [r4], #1
 8027432:	e7f2      	b.n	802741a <__exponent+0x40>
 8027434:	2330      	movs	r3, #48	; 0x30
 8027436:	4419      	add	r1, r3
 8027438:	7083      	strb	r3, [r0, #2]
 802743a:	1d02      	adds	r2, r0, #4
 802743c:	70c1      	strb	r1, [r0, #3]
 802743e:	e7ef      	b.n	8027420 <__exponent+0x46>

08027440 <_printf_float>:
 8027440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027444:	b08d      	sub	sp, #52	; 0x34
 8027446:	460c      	mov	r4, r1
 8027448:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802744c:	4616      	mov	r6, r2
 802744e:	461f      	mov	r7, r3
 8027450:	4605      	mov	r5, r0
 8027452:	f001 fa79 	bl	8028948 <_localeconv_r>
 8027456:	6803      	ldr	r3, [r0, #0]
 8027458:	9304      	str	r3, [sp, #16]
 802745a:	4618      	mov	r0, r3
 802745c:	f7d8 fec2 	bl	80001e4 <strlen>
 8027460:	2300      	movs	r3, #0
 8027462:	930a      	str	r3, [sp, #40]	; 0x28
 8027464:	f8d8 3000 	ldr.w	r3, [r8]
 8027468:	9005      	str	r0, [sp, #20]
 802746a:	3307      	adds	r3, #7
 802746c:	f023 0307 	bic.w	r3, r3, #7
 8027470:	f103 0208 	add.w	r2, r3, #8
 8027474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8027478:	f8d4 b000 	ldr.w	fp, [r4]
 802747c:	f8c8 2000 	str.w	r2, [r8]
 8027480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027484:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8027488:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802748c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027490:	9307      	str	r3, [sp, #28]
 8027492:	f8cd 8018 	str.w	r8, [sp, #24]
 8027496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802749a:	4ba7      	ldr	r3, [pc, #668]	; (8027738 <_printf_float+0x2f8>)
 802749c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80274a0:	f7d9 fb54 	bl	8000b4c <__aeabi_dcmpun>
 80274a4:	bb70      	cbnz	r0, 8027504 <_printf_float+0xc4>
 80274a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80274aa:	4ba3      	ldr	r3, [pc, #652]	; (8027738 <_printf_float+0x2f8>)
 80274ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80274b0:	f7d9 fb2e 	bl	8000b10 <__aeabi_dcmple>
 80274b4:	bb30      	cbnz	r0, 8027504 <_printf_float+0xc4>
 80274b6:	2200      	movs	r2, #0
 80274b8:	2300      	movs	r3, #0
 80274ba:	4640      	mov	r0, r8
 80274bc:	4649      	mov	r1, r9
 80274be:	f7d9 fb1d 	bl	8000afc <__aeabi_dcmplt>
 80274c2:	b110      	cbz	r0, 80274ca <_printf_float+0x8a>
 80274c4:	232d      	movs	r3, #45	; 0x2d
 80274c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80274ca:	4a9c      	ldr	r2, [pc, #624]	; (802773c <_printf_float+0x2fc>)
 80274cc:	4b9c      	ldr	r3, [pc, #624]	; (8027740 <_printf_float+0x300>)
 80274ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80274d2:	bf8c      	ite	hi
 80274d4:	4690      	movhi	r8, r2
 80274d6:	4698      	movls	r8, r3
 80274d8:	2303      	movs	r3, #3
 80274da:	f02b 0204 	bic.w	r2, fp, #4
 80274de:	6123      	str	r3, [r4, #16]
 80274e0:	6022      	str	r2, [r4, #0]
 80274e2:	f04f 0900 	mov.w	r9, #0
 80274e6:	9700      	str	r7, [sp, #0]
 80274e8:	4633      	mov	r3, r6
 80274ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80274ec:	4621      	mov	r1, r4
 80274ee:	4628      	mov	r0, r5
 80274f0:	f000 f9e6 	bl	80278c0 <_printf_common>
 80274f4:	3001      	adds	r0, #1
 80274f6:	f040 808d 	bne.w	8027614 <_printf_float+0x1d4>
 80274fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80274fe:	b00d      	add	sp, #52	; 0x34
 8027500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027504:	4642      	mov	r2, r8
 8027506:	464b      	mov	r3, r9
 8027508:	4640      	mov	r0, r8
 802750a:	4649      	mov	r1, r9
 802750c:	f7d9 fb1e 	bl	8000b4c <__aeabi_dcmpun>
 8027510:	b110      	cbz	r0, 8027518 <_printf_float+0xd8>
 8027512:	4a8c      	ldr	r2, [pc, #560]	; (8027744 <_printf_float+0x304>)
 8027514:	4b8c      	ldr	r3, [pc, #560]	; (8027748 <_printf_float+0x308>)
 8027516:	e7da      	b.n	80274ce <_printf_float+0x8e>
 8027518:	6861      	ldr	r1, [r4, #4]
 802751a:	1c4b      	adds	r3, r1, #1
 802751c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8027520:	a80a      	add	r0, sp, #40	; 0x28
 8027522:	d13e      	bne.n	80275a2 <_printf_float+0x162>
 8027524:	2306      	movs	r3, #6
 8027526:	6063      	str	r3, [r4, #4]
 8027528:	2300      	movs	r3, #0
 802752a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802752e:	ab09      	add	r3, sp, #36	; 0x24
 8027530:	9300      	str	r3, [sp, #0]
 8027532:	ec49 8b10 	vmov	d0, r8, r9
 8027536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802753a:	6022      	str	r2, [r4, #0]
 802753c:	f8cd a004 	str.w	sl, [sp, #4]
 8027540:	6861      	ldr	r1, [r4, #4]
 8027542:	4628      	mov	r0, r5
 8027544:	f7ff fee8 	bl	8027318 <__cvt>
 8027548:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 802754c:	2b47      	cmp	r3, #71	; 0x47
 802754e:	4680      	mov	r8, r0
 8027550:	d109      	bne.n	8027566 <_printf_float+0x126>
 8027552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027554:	1cd8      	adds	r0, r3, #3
 8027556:	db02      	blt.n	802755e <_printf_float+0x11e>
 8027558:	6862      	ldr	r2, [r4, #4]
 802755a:	4293      	cmp	r3, r2
 802755c:	dd47      	ble.n	80275ee <_printf_float+0x1ae>
 802755e:	f1aa 0a02 	sub.w	sl, sl, #2
 8027562:	fa5f fa8a 	uxtb.w	sl, sl
 8027566:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802756a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802756c:	d824      	bhi.n	80275b8 <_printf_float+0x178>
 802756e:	3901      	subs	r1, #1
 8027570:	4652      	mov	r2, sl
 8027572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8027576:	9109      	str	r1, [sp, #36]	; 0x24
 8027578:	f7ff ff2f 	bl	80273da <__exponent>
 802757c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802757e:	1813      	adds	r3, r2, r0
 8027580:	2a01      	cmp	r2, #1
 8027582:	4681      	mov	r9, r0
 8027584:	6123      	str	r3, [r4, #16]
 8027586:	dc02      	bgt.n	802758e <_printf_float+0x14e>
 8027588:	6822      	ldr	r2, [r4, #0]
 802758a:	07d1      	lsls	r1, r2, #31
 802758c:	d501      	bpl.n	8027592 <_printf_float+0x152>
 802758e:	3301      	adds	r3, #1
 8027590:	6123      	str	r3, [r4, #16]
 8027592:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8027596:	2b00      	cmp	r3, #0
 8027598:	d0a5      	beq.n	80274e6 <_printf_float+0xa6>
 802759a:	232d      	movs	r3, #45	; 0x2d
 802759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80275a0:	e7a1      	b.n	80274e6 <_printf_float+0xa6>
 80275a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80275a6:	f000 8177 	beq.w	8027898 <_printf_float+0x458>
 80275aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80275ae:	d1bb      	bne.n	8027528 <_printf_float+0xe8>
 80275b0:	2900      	cmp	r1, #0
 80275b2:	d1b9      	bne.n	8027528 <_printf_float+0xe8>
 80275b4:	2301      	movs	r3, #1
 80275b6:	e7b6      	b.n	8027526 <_printf_float+0xe6>
 80275b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80275bc:	d119      	bne.n	80275f2 <_printf_float+0x1b2>
 80275be:	2900      	cmp	r1, #0
 80275c0:	6863      	ldr	r3, [r4, #4]
 80275c2:	dd0c      	ble.n	80275de <_printf_float+0x19e>
 80275c4:	6121      	str	r1, [r4, #16]
 80275c6:	b913      	cbnz	r3, 80275ce <_printf_float+0x18e>
 80275c8:	6822      	ldr	r2, [r4, #0]
 80275ca:	07d2      	lsls	r2, r2, #31
 80275cc:	d502      	bpl.n	80275d4 <_printf_float+0x194>
 80275ce:	3301      	adds	r3, #1
 80275d0:	440b      	add	r3, r1
 80275d2:	6123      	str	r3, [r4, #16]
 80275d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80275d8:	f04f 0900 	mov.w	r9, #0
 80275dc:	e7d9      	b.n	8027592 <_printf_float+0x152>
 80275de:	b913      	cbnz	r3, 80275e6 <_printf_float+0x1a6>
 80275e0:	6822      	ldr	r2, [r4, #0]
 80275e2:	07d0      	lsls	r0, r2, #31
 80275e4:	d501      	bpl.n	80275ea <_printf_float+0x1aa>
 80275e6:	3302      	adds	r3, #2
 80275e8:	e7f3      	b.n	80275d2 <_printf_float+0x192>
 80275ea:	2301      	movs	r3, #1
 80275ec:	e7f1      	b.n	80275d2 <_printf_float+0x192>
 80275ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80275f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80275f6:	4293      	cmp	r3, r2
 80275f8:	db05      	blt.n	8027606 <_printf_float+0x1c6>
 80275fa:	6822      	ldr	r2, [r4, #0]
 80275fc:	6123      	str	r3, [r4, #16]
 80275fe:	07d1      	lsls	r1, r2, #31
 8027600:	d5e8      	bpl.n	80275d4 <_printf_float+0x194>
 8027602:	3301      	adds	r3, #1
 8027604:	e7e5      	b.n	80275d2 <_printf_float+0x192>
 8027606:	2b00      	cmp	r3, #0
 8027608:	bfd4      	ite	le
 802760a:	f1c3 0302 	rsble	r3, r3, #2
 802760e:	2301      	movgt	r3, #1
 8027610:	4413      	add	r3, r2
 8027612:	e7de      	b.n	80275d2 <_printf_float+0x192>
 8027614:	6823      	ldr	r3, [r4, #0]
 8027616:	055a      	lsls	r2, r3, #21
 8027618:	d407      	bmi.n	802762a <_printf_float+0x1ea>
 802761a:	6923      	ldr	r3, [r4, #16]
 802761c:	4642      	mov	r2, r8
 802761e:	4631      	mov	r1, r6
 8027620:	4628      	mov	r0, r5
 8027622:	47b8      	blx	r7
 8027624:	3001      	adds	r0, #1
 8027626:	d12b      	bne.n	8027680 <_printf_float+0x240>
 8027628:	e767      	b.n	80274fa <_printf_float+0xba>
 802762a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802762e:	f240 80dc 	bls.w	80277ea <_printf_float+0x3aa>
 8027632:	2200      	movs	r2, #0
 8027634:	2300      	movs	r3, #0
 8027636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802763a:	f7d9 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 802763e:	2800      	cmp	r0, #0
 8027640:	d033      	beq.n	80276aa <_printf_float+0x26a>
 8027642:	2301      	movs	r3, #1
 8027644:	4a41      	ldr	r2, [pc, #260]	; (802774c <_printf_float+0x30c>)
 8027646:	4631      	mov	r1, r6
 8027648:	4628      	mov	r0, r5
 802764a:	47b8      	blx	r7
 802764c:	3001      	adds	r0, #1
 802764e:	f43f af54 	beq.w	80274fa <_printf_float+0xba>
 8027652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027656:	429a      	cmp	r2, r3
 8027658:	db02      	blt.n	8027660 <_printf_float+0x220>
 802765a:	6823      	ldr	r3, [r4, #0]
 802765c:	07d8      	lsls	r0, r3, #31
 802765e:	d50f      	bpl.n	8027680 <_printf_float+0x240>
 8027660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027664:	4631      	mov	r1, r6
 8027666:	4628      	mov	r0, r5
 8027668:	47b8      	blx	r7
 802766a:	3001      	adds	r0, #1
 802766c:	f43f af45 	beq.w	80274fa <_printf_float+0xba>
 8027670:	f04f 0800 	mov.w	r8, #0
 8027674:	f104 091a 	add.w	r9, r4, #26
 8027678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802767a:	3b01      	subs	r3, #1
 802767c:	4543      	cmp	r3, r8
 802767e:	dc09      	bgt.n	8027694 <_printf_float+0x254>
 8027680:	6823      	ldr	r3, [r4, #0]
 8027682:	079b      	lsls	r3, r3, #30
 8027684:	f100 8103 	bmi.w	802788e <_printf_float+0x44e>
 8027688:	68e0      	ldr	r0, [r4, #12]
 802768a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802768c:	4298      	cmp	r0, r3
 802768e:	bfb8      	it	lt
 8027690:	4618      	movlt	r0, r3
 8027692:	e734      	b.n	80274fe <_printf_float+0xbe>
 8027694:	2301      	movs	r3, #1
 8027696:	464a      	mov	r2, r9
 8027698:	4631      	mov	r1, r6
 802769a:	4628      	mov	r0, r5
 802769c:	47b8      	blx	r7
 802769e:	3001      	adds	r0, #1
 80276a0:	f43f af2b 	beq.w	80274fa <_printf_float+0xba>
 80276a4:	f108 0801 	add.w	r8, r8, #1
 80276a8:	e7e6      	b.n	8027678 <_printf_float+0x238>
 80276aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276ac:	2b00      	cmp	r3, #0
 80276ae:	dc2b      	bgt.n	8027708 <_printf_float+0x2c8>
 80276b0:	2301      	movs	r3, #1
 80276b2:	4a26      	ldr	r2, [pc, #152]	; (802774c <_printf_float+0x30c>)
 80276b4:	4631      	mov	r1, r6
 80276b6:	4628      	mov	r0, r5
 80276b8:	47b8      	blx	r7
 80276ba:	3001      	adds	r0, #1
 80276bc:	f43f af1d 	beq.w	80274fa <_printf_float+0xba>
 80276c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276c2:	b923      	cbnz	r3, 80276ce <_printf_float+0x28e>
 80276c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276c6:	b913      	cbnz	r3, 80276ce <_printf_float+0x28e>
 80276c8:	6823      	ldr	r3, [r4, #0]
 80276ca:	07d9      	lsls	r1, r3, #31
 80276cc:	d5d8      	bpl.n	8027680 <_printf_float+0x240>
 80276ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80276d2:	4631      	mov	r1, r6
 80276d4:	4628      	mov	r0, r5
 80276d6:	47b8      	blx	r7
 80276d8:	3001      	adds	r0, #1
 80276da:	f43f af0e 	beq.w	80274fa <_printf_float+0xba>
 80276de:	f04f 0900 	mov.w	r9, #0
 80276e2:	f104 0a1a 	add.w	sl, r4, #26
 80276e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276e8:	425b      	negs	r3, r3
 80276ea:	454b      	cmp	r3, r9
 80276ec:	dc01      	bgt.n	80276f2 <_printf_float+0x2b2>
 80276ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276f0:	e794      	b.n	802761c <_printf_float+0x1dc>
 80276f2:	2301      	movs	r3, #1
 80276f4:	4652      	mov	r2, sl
 80276f6:	4631      	mov	r1, r6
 80276f8:	4628      	mov	r0, r5
 80276fa:	47b8      	blx	r7
 80276fc:	3001      	adds	r0, #1
 80276fe:	f43f aefc 	beq.w	80274fa <_printf_float+0xba>
 8027702:	f109 0901 	add.w	r9, r9, #1
 8027706:	e7ee      	b.n	80276e6 <_printf_float+0x2a6>
 8027708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802770a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802770c:	429a      	cmp	r2, r3
 802770e:	bfa8      	it	ge
 8027710:	461a      	movge	r2, r3
 8027712:	2a00      	cmp	r2, #0
 8027714:	4691      	mov	r9, r2
 8027716:	dd07      	ble.n	8027728 <_printf_float+0x2e8>
 8027718:	4613      	mov	r3, r2
 802771a:	4631      	mov	r1, r6
 802771c:	4642      	mov	r2, r8
 802771e:	4628      	mov	r0, r5
 8027720:	47b8      	blx	r7
 8027722:	3001      	adds	r0, #1
 8027724:	f43f aee9 	beq.w	80274fa <_printf_float+0xba>
 8027728:	f104 031a 	add.w	r3, r4, #26
 802772c:	f04f 0b00 	mov.w	fp, #0
 8027730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027734:	9306      	str	r3, [sp, #24]
 8027736:	e015      	b.n	8027764 <_printf_float+0x324>
 8027738:	7fefffff 	.word	0x7fefffff
 802773c:	08044f54 	.word	0x08044f54
 8027740:	08044f50 	.word	0x08044f50
 8027744:	08044f5c 	.word	0x08044f5c
 8027748:	08044f58 	.word	0x08044f58
 802774c:	08045113 	.word	0x08045113
 8027750:	2301      	movs	r3, #1
 8027752:	9a06      	ldr	r2, [sp, #24]
 8027754:	4631      	mov	r1, r6
 8027756:	4628      	mov	r0, r5
 8027758:	47b8      	blx	r7
 802775a:	3001      	adds	r0, #1
 802775c:	f43f aecd 	beq.w	80274fa <_printf_float+0xba>
 8027760:	f10b 0b01 	add.w	fp, fp, #1
 8027764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8027768:	ebaa 0309 	sub.w	r3, sl, r9
 802776c:	455b      	cmp	r3, fp
 802776e:	dcef      	bgt.n	8027750 <_printf_float+0x310>
 8027770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027774:	429a      	cmp	r2, r3
 8027776:	44d0      	add	r8, sl
 8027778:	db15      	blt.n	80277a6 <_printf_float+0x366>
 802777a:	6823      	ldr	r3, [r4, #0]
 802777c:	07da      	lsls	r2, r3, #31
 802777e:	d412      	bmi.n	80277a6 <_printf_float+0x366>
 8027780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027784:	eba3 020a 	sub.w	r2, r3, sl
 8027788:	eba3 0a01 	sub.w	sl, r3, r1
 802778c:	4592      	cmp	sl, r2
 802778e:	bfa8      	it	ge
 8027790:	4692      	movge	sl, r2
 8027792:	f1ba 0f00 	cmp.w	sl, #0
 8027796:	dc0e      	bgt.n	80277b6 <_printf_float+0x376>
 8027798:	f04f 0800 	mov.w	r8, #0
 802779c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80277a0:	f104 091a 	add.w	r9, r4, #26
 80277a4:	e019      	b.n	80277da <_printf_float+0x39a>
 80277a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80277aa:	4631      	mov	r1, r6
 80277ac:	4628      	mov	r0, r5
 80277ae:	47b8      	blx	r7
 80277b0:	3001      	adds	r0, #1
 80277b2:	d1e5      	bne.n	8027780 <_printf_float+0x340>
 80277b4:	e6a1      	b.n	80274fa <_printf_float+0xba>
 80277b6:	4653      	mov	r3, sl
 80277b8:	4642      	mov	r2, r8
 80277ba:	4631      	mov	r1, r6
 80277bc:	4628      	mov	r0, r5
 80277be:	47b8      	blx	r7
 80277c0:	3001      	adds	r0, #1
 80277c2:	d1e9      	bne.n	8027798 <_printf_float+0x358>
 80277c4:	e699      	b.n	80274fa <_printf_float+0xba>
 80277c6:	2301      	movs	r3, #1
 80277c8:	464a      	mov	r2, r9
 80277ca:	4631      	mov	r1, r6
 80277cc:	4628      	mov	r0, r5
 80277ce:	47b8      	blx	r7
 80277d0:	3001      	adds	r0, #1
 80277d2:	f43f ae92 	beq.w	80274fa <_printf_float+0xba>
 80277d6:	f108 0801 	add.w	r8, r8, #1
 80277da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80277de:	1a9b      	subs	r3, r3, r2
 80277e0:	eba3 030a 	sub.w	r3, r3, sl
 80277e4:	4543      	cmp	r3, r8
 80277e6:	dcee      	bgt.n	80277c6 <_printf_float+0x386>
 80277e8:	e74a      	b.n	8027680 <_printf_float+0x240>
 80277ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80277ec:	2a01      	cmp	r2, #1
 80277ee:	dc01      	bgt.n	80277f4 <_printf_float+0x3b4>
 80277f0:	07db      	lsls	r3, r3, #31
 80277f2:	d53a      	bpl.n	802786a <_printf_float+0x42a>
 80277f4:	2301      	movs	r3, #1
 80277f6:	4642      	mov	r2, r8
 80277f8:	4631      	mov	r1, r6
 80277fa:	4628      	mov	r0, r5
 80277fc:	47b8      	blx	r7
 80277fe:	3001      	adds	r0, #1
 8027800:	f43f ae7b 	beq.w	80274fa <_printf_float+0xba>
 8027804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027808:	4631      	mov	r1, r6
 802780a:	4628      	mov	r0, r5
 802780c:	47b8      	blx	r7
 802780e:	3001      	adds	r0, #1
 8027810:	f108 0801 	add.w	r8, r8, #1
 8027814:	f43f ae71 	beq.w	80274fa <_printf_float+0xba>
 8027818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802781a:	2200      	movs	r2, #0
 802781c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8027820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027824:	2300      	movs	r3, #0
 8027826:	f7d9 f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 802782a:	b9c8      	cbnz	r0, 8027860 <_printf_float+0x420>
 802782c:	4653      	mov	r3, sl
 802782e:	4642      	mov	r2, r8
 8027830:	4631      	mov	r1, r6
 8027832:	4628      	mov	r0, r5
 8027834:	47b8      	blx	r7
 8027836:	3001      	adds	r0, #1
 8027838:	d10e      	bne.n	8027858 <_printf_float+0x418>
 802783a:	e65e      	b.n	80274fa <_printf_float+0xba>
 802783c:	2301      	movs	r3, #1
 802783e:	4652      	mov	r2, sl
 8027840:	4631      	mov	r1, r6
 8027842:	4628      	mov	r0, r5
 8027844:	47b8      	blx	r7
 8027846:	3001      	adds	r0, #1
 8027848:	f43f ae57 	beq.w	80274fa <_printf_float+0xba>
 802784c:	f108 0801 	add.w	r8, r8, #1
 8027850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027852:	3b01      	subs	r3, #1
 8027854:	4543      	cmp	r3, r8
 8027856:	dcf1      	bgt.n	802783c <_printf_float+0x3fc>
 8027858:	464b      	mov	r3, r9
 802785a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802785e:	e6de      	b.n	802761e <_printf_float+0x1de>
 8027860:	f04f 0800 	mov.w	r8, #0
 8027864:	f104 0a1a 	add.w	sl, r4, #26
 8027868:	e7f2      	b.n	8027850 <_printf_float+0x410>
 802786a:	2301      	movs	r3, #1
 802786c:	e7df      	b.n	802782e <_printf_float+0x3ee>
 802786e:	2301      	movs	r3, #1
 8027870:	464a      	mov	r2, r9
 8027872:	4631      	mov	r1, r6
 8027874:	4628      	mov	r0, r5
 8027876:	47b8      	blx	r7
 8027878:	3001      	adds	r0, #1
 802787a:	f43f ae3e 	beq.w	80274fa <_printf_float+0xba>
 802787e:	f108 0801 	add.w	r8, r8, #1
 8027882:	68e3      	ldr	r3, [r4, #12]
 8027884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027886:	1a9b      	subs	r3, r3, r2
 8027888:	4543      	cmp	r3, r8
 802788a:	dcf0      	bgt.n	802786e <_printf_float+0x42e>
 802788c:	e6fc      	b.n	8027688 <_printf_float+0x248>
 802788e:	f04f 0800 	mov.w	r8, #0
 8027892:	f104 0919 	add.w	r9, r4, #25
 8027896:	e7f4      	b.n	8027882 <_printf_float+0x442>
 8027898:	2900      	cmp	r1, #0
 802789a:	f43f ae8b 	beq.w	80275b4 <_printf_float+0x174>
 802789e:	2300      	movs	r3, #0
 80278a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80278a4:	ab09      	add	r3, sp, #36	; 0x24
 80278a6:	9300      	str	r3, [sp, #0]
 80278a8:	ec49 8b10 	vmov	d0, r8, r9
 80278ac:	6022      	str	r2, [r4, #0]
 80278ae:	f8cd a004 	str.w	sl, [sp, #4]
 80278b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80278b6:	4628      	mov	r0, r5
 80278b8:	f7ff fd2e 	bl	8027318 <__cvt>
 80278bc:	4680      	mov	r8, r0
 80278be:	e648      	b.n	8027552 <_printf_float+0x112>

080278c0 <_printf_common>:
 80278c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278c4:	4691      	mov	r9, r2
 80278c6:	461f      	mov	r7, r3
 80278c8:	688a      	ldr	r2, [r1, #8]
 80278ca:	690b      	ldr	r3, [r1, #16]
 80278cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80278d0:	4293      	cmp	r3, r2
 80278d2:	bfb8      	it	lt
 80278d4:	4613      	movlt	r3, r2
 80278d6:	f8c9 3000 	str.w	r3, [r9]
 80278da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80278de:	4606      	mov	r6, r0
 80278e0:	460c      	mov	r4, r1
 80278e2:	b112      	cbz	r2, 80278ea <_printf_common+0x2a>
 80278e4:	3301      	adds	r3, #1
 80278e6:	f8c9 3000 	str.w	r3, [r9]
 80278ea:	6823      	ldr	r3, [r4, #0]
 80278ec:	0699      	lsls	r1, r3, #26
 80278ee:	bf42      	ittt	mi
 80278f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80278f4:	3302      	addmi	r3, #2
 80278f6:	f8c9 3000 	strmi.w	r3, [r9]
 80278fa:	6825      	ldr	r5, [r4, #0]
 80278fc:	f015 0506 	ands.w	r5, r5, #6
 8027900:	d107      	bne.n	8027912 <_printf_common+0x52>
 8027902:	f104 0a19 	add.w	sl, r4, #25
 8027906:	68e3      	ldr	r3, [r4, #12]
 8027908:	f8d9 2000 	ldr.w	r2, [r9]
 802790c:	1a9b      	subs	r3, r3, r2
 802790e:	42ab      	cmp	r3, r5
 8027910:	dc28      	bgt.n	8027964 <_printf_common+0xa4>
 8027912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8027916:	6822      	ldr	r2, [r4, #0]
 8027918:	3300      	adds	r3, #0
 802791a:	bf18      	it	ne
 802791c:	2301      	movne	r3, #1
 802791e:	0692      	lsls	r2, r2, #26
 8027920:	d42d      	bmi.n	802797e <_printf_common+0xbe>
 8027922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027926:	4639      	mov	r1, r7
 8027928:	4630      	mov	r0, r6
 802792a:	47c0      	blx	r8
 802792c:	3001      	adds	r0, #1
 802792e:	d020      	beq.n	8027972 <_printf_common+0xb2>
 8027930:	6823      	ldr	r3, [r4, #0]
 8027932:	68e5      	ldr	r5, [r4, #12]
 8027934:	f8d9 2000 	ldr.w	r2, [r9]
 8027938:	f003 0306 	and.w	r3, r3, #6
 802793c:	2b04      	cmp	r3, #4
 802793e:	bf08      	it	eq
 8027940:	1aad      	subeq	r5, r5, r2
 8027942:	68a3      	ldr	r3, [r4, #8]
 8027944:	6922      	ldr	r2, [r4, #16]
 8027946:	bf0c      	ite	eq
 8027948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802794c:	2500      	movne	r5, #0
 802794e:	4293      	cmp	r3, r2
 8027950:	bfc4      	itt	gt
 8027952:	1a9b      	subgt	r3, r3, r2
 8027954:	18ed      	addgt	r5, r5, r3
 8027956:	f04f 0900 	mov.w	r9, #0
 802795a:	341a      	adds	r4, #26
 802795c:	454d      	cmp	r5, r9
 802795e:	d11a      	bne.n	8027996 <_printf_common+0xd6>
 8027960:	2000      	movs	r0, #0
 8027962:	e008      	b.n	8027976 <_printf_common+0xb6>
 8027964:	2301      	movs	r3, #1
 8027966:	4652      	mov	r2, sl
 8027968:	4639      	mov	r1, r7
 802796a:	4630      	mov	r0, r6
 802796c:	47c0      	blx	r8
 802796e:	3001      	adds	r0, #1
 8027970:	d103      	bne.n	802797a <_printf_common+0xba>
 8027972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802797a:	3501      	adds	r5, #1
 802797c:	e7c3      	b.n	8027906 <_printf_common+0x46>
 802797e:	18e1      	adds	r1, r4, r3
 8027980:	1c5a      	adds	r2, r3, #1
 8027982:	2030      	movs	r0, #48	; 0x30
 8027984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027988:	4422      	add	r2, r4
 802798a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802798e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027992:	3302      	adds	r3, #2
 8027994:	e7c5      	b.n	8027922 <_printf_common+0x62>
 8027996:	2301      	movs	r3, #1
 8027998:	4622      	mov	r2, r4
 802799a:	4639      	mov	r1, r7
 802799c:	4630      	mov	r0, r6
 802799e:	47c0      	blx	r8
 80279a0:	3001      	adds	r0, #1
 80279a2:	d0e6      	beq.n	8027972 <_printf_common+0xb2>
 80279a4:	f109 0901 	add.w	r9, r9, #1
 80279a8:	e7d8      	b.n	802795c <_printf_common+0x9c>
	...

080279ac <_printf_i>:
 80279ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80279b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80279b4:	460c      	mov	r4, r1
 80279b6:	7e09      	ldrb	r1, [r1, #24]
 80279b8:	b085      	sub	sp, #20
 80279ba:	296e      	cmp	r1, #110	; 0x6e
 80279bc:	4617      	mov	r7, r2
 80279be:	4606      	mov	r6, r0
 80279c0:	4698      	mov	r8, r3
 80279c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80279c4:	f000 80b3 	beq.w	8027b2e <_printf_i+0x182>
 80279c8:	d822      	bhi.n	8027a10 <_printf_i+0x64>
 80279ca:	2963      	cmp	r1, #99	; 0x63
 80279cc:	d036      	beq.n	8027a3c <_printf_i+0x90>
 80279ce:	d80a      	bhi.n	80279e6 <_printf_i+0x3a>
 80279d0:	2900      	cmp	r1, #0
 80279d2:	f000 80b9 	beq.w	8027b48 <_printf_i+0x19c>
 80279d6:	2958      	cmp	r1, #88	; 0x58
 80279d8:	f000 8083 	beq.w	8027ae2 <_printf_i+0x136>
 80279dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80279e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80279e4:	e032      	b.n	8027a4c <_printf_i+0xa0>
 80279e6:	2964      	cmp	r1, #100	; 0x64
 80279e8:	d001      	beq.n	80279ee <_printf_i+0x42>
 80279ea:	2969      	cmp	r1, #105	; 0x69
 80279ec:	d1f6      	bne.n	80279dc <_printf_i+0x30>
 80279ee:	6820      	ldr	r0, [r4, #0]
 80279f0:	6813      	ldr	r3, [r2, #0]
 80279f2:	0605      	lsls	r5, r0, #24
 80279f4:	f103 0104 	add.w	r1, r3, #4
 80279f8:	d52a      	bpl.n	8027a50 <_printf_i+0xa4>
 80279fa:	681b      	ldr	r3, [r3, #0]
 80279fc:	6011      	str	r1, [r2, #0]
 80279fe:	2b00      	cmp	r3, #0
 8027a00:	da03      	bge.n	8027a0a <_printf_i+0x5e>
 8027a02:	222d      	movs	r2, #45	; 0x2d
 8027a04:	425b      	negs	r3, r3
 8027a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027a0a:	486f      	ldr	r0, [pc, #444]	; (8027bc8 <_printf_i+0x21c>)
 8027a0c:	220a      	movs	r2, #10
 8027a0e:	e039      	b.n	8027a84 <_printf_i+0xd8>
 8027a10:	2973      	cmp	r1, #115	; 0x73
 8027a12:	f000 809d 	beq.w	8027b50 <_printf_i+0x1a4>
 8027a16:	d808      	bhi.n	8027a2a <_printf_i+0x7e>
 8027a18:	296f      	cmp	r1, #111	; 0x6f
 8027a1a:	d020      	beq.n	8027a5e <_printf_i+0xb2>
 8027a1c:	2970      	cmp	r1, #112	; 0x70
 8027a1e:	d1dd      	bne.n	80279dc <_printf_i+0x30>
 8027a20:	6823      	ldr	r3, [r4, #0]
 8027a22:	f043 0320 	orr.w	r3, r3, #32
 8027a26:	6023      	str	r3, [r4, #0]
 8027a28:	e003      	b.n	8027a32 <_printf_i+0x86>
 8027a2a:	2975      	cmp	r1, #117	; 0x75
 8027a2c:	d017      	beq.n	8027a5e <_printf_i+0xb2>
 8027a2e:	2978      	cmp	r1, #120	; 0x78
 8027a30:	d1d4      	bne.n	80279dc <_printf_i+0x30>
 8027a32:	2378      	movs	r3, #120	; 0x78
 8027a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027a38:	4864      	ldr	r0, [pc, #400]	; (8027bcc <_printf_i+0x220>)
 8027a3a:	e055      	b.n	8027ae8 <_printf_i+0x13c>
 8027a3c:	6813      	ldr	r3, [r2, #0]
 8027a3e:	1d19      	adds	r1, r3, #4
 8027a40:	681b      	ldr	r3, [r3, #0]
 8027a42:	6011      	str	r1, [r2, #0]
 8027a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027a4c:	2301      	movs	r3, #1
 8027a4e:	e08c      	b.n	8027b6a <_printf_i+0x1be>
 8027a50:	681b      	ldr	r3, [r3, #0]
 8027a52:	6011      	str	r1, [r2, #0]
 8027a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027a58:	bf18      	it	ne
 8027a5a:	b21b      	sxthne	r3, r3
 8027a5c:	e7cf      	b.n	80279fe <_printf_i+0x52>
 8027a5e:	6813      	ldr	r3, [r2, #0]
 8027a60:	6825      	ldr	r5, [r4, #0]
 8027a62:	1d18      	adds	r0, r3, #4
 8027a64:	6010      	str	r0, [r2, #0]
 8027a66:	0628      	lsls	r0, r5, #24
 8027a68:	d501      	bpl.n	8027a6e <_printf_i+0xc2>
 8027a6a:	681b      	ldr	r3, [r3, #0]
 8027a6c:	e002      	b.n	8027a74 <_printf_i+0xc8>
 8027a6e:	0668      	lsls	r0, r5, #25
 8027a70:	d5fb      	bpl.n	8027a6a <_printf_i+0xbe>
 8027a72:	881b      	ldrh	r3, [r3, #0]
 8027a74:	4854      	ldr	r0, [pc, #336]	; (8027bc8 <_printf_i+0x21c>)
 8027a76:	296f      	cmp	r1, #111	; 0x6f
 8027a78:	bf14      	ite	ne
 8027a7a:	220a      	movne	r2, #10
 8027a7c:	2208      	moveq	r2, #8
 8027a7e:	2100      	movs	r1, #0
 8027a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027a84:	6865      	ldr	r5, [r4, #4]
 8027a86:	60a5      	str	r5, [r4, #8]
 8027a88:	2d00      	cmp	r5, #0
 8027a8a:	f2c0 8095 	blt.w	8027bb8 <_printf_i+0x20c>
 8027a8e:	6821      	ldr	r1, [r4, #0]
 8027a90:	f021 0104 	bic.w	r1, r1, #4
 8027a94:	6021      	str	r1, [r4, #0]
 8027a96:	2b00      	cmp	r3, #0
 8027a98:	d13d      	bne.n	8027b16 <_printf_i+0x16a>
 8027a9a:	2d00      	cmp	r5, #0
 8027a9c:	f040 808e 	bne.w	8027bbc <_printf_i+0x210>
 8027aa0:	4665      	mov	r5, ip
 8027aa2:	2a08      	cmp	r2, #8
 8027aa4:	d10b      	bne.n	8027abe <_printf_i+0x112>
 8027aa6:	6823      	ldr	r3, [r4, #0]
 8027aa8:	07db      	lsls	r3, r3, #31
 8027aaa:	d508      	bpl.n	8027abe <_printf_i+0x112>
 8027aac:	6923      	ldr	r3, [r4, #16]
 8027aae:	6862      	ldr	r2, [r4, #4]
 8027ab0:	429a      	cmp	r2, r3
 8027ab2:	bfde      	ittt	le
 8027ab4:	2330      	movle	r3, #48	; 0x30
 8027ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027aba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8027abe:	ebac 0305 	sub.w	r3, ip, r5
 8027ac2:	6123      	str	r3, [r4, #16]
 8027ac4:	f8cd 8000 	str.w	r8, [sp]
 8027ac8:	463b      	mov	r3, r7
 8027aca:	aa03      	add	r2, sp, #12
 8027acc:	4621      	mov	r1, r4
 8027ace:	4630      	mov	r0, r6
 8027ad0:	f7ff fef6 	bl	80278c0 <_printf_common>
 8027ad4:	3001      	adds	r0, #1
 8027ad6:	d14d      	bne.n	8027b74 <_printf_i+0x1c8>
 8027ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027adc:	b005      	add	sp, #20
 8027ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027ae2:	4839      	ldr	r0, [pc, #228]	; (8027bc8 <_printf_i+0x21c>)
 8027ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027ae8:	6813      	ldr	r3, [r2, #0]
 8027aea:	6821      	ldr	r1, [r4, #0]
 8027aec:	1d1d      	adds	r5, r3, #4
 8027aee:	681b      	ldr	r3, [r3, #0]
 8027af0:	6015      	str	r5, [r2, #0]
 8027af2:	060a      	lsls	r2, r1, #24
 8027af4:	d50b      	bpl.n	8027b0e <_printf_i+0x162>
 8027af6:	07ca      	lsls	r2, r1, #31
 8027af8:	bf44      	itt	mi
 8027afa:	f041 0120 	orrmi.w	r1, r1, #32
 8027afe:	6021      	strmi	r1, [r4, #0]
 8027b00:	b91b      	cbnz	r3, 8027b0a <_printf_i+0x15e>
 8027b02:	6822      	ldr	r2, [r4, #0]
 8027b04:	f022 0220 	bic.w	r2, r2, #32
 8027b08:	6022      	str	r2, [r4, #0]
 8027b0a:	2210      	movs	r2, #16
 8027b0c:	e7b7      	b.n	8027a7e <_printf_i+0xd2>
 8027b0e:	064d      	lsls	r5, r1, #25
 8027b10:	bf48      	it	mi
 8027b12:	b29b      	uxthmi	r3, r3
 8027b14:	e7ef      	b.n	8027af6 <_printf_i+0x14a>
 8027b16:	4665      	mov	r5, ip
 8027b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8027b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8027b20:	5cc3      	ldrb	r3, [r0, r3]
 8027b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8027b26:	460b      	mov	r3, r1
 8027b28:	2900      	cmp	r1, #0
 8027b2a:	d1f5      	bne.n	8027b18 <_printf_i+0x16c>
 8027b2c:	e7b9      	b.n	8027aa2 <_printf_i+0xf6>
 8027b2e:	6813      	ldr	r3, [r2, #0]
 8027b30:	6825      	ldr	r5, [r4, #0]
 8027b32:	6961      	ldr	r1, [r4, #20]
 8027b34:	1d18      	adds	r0, r3, #4
 8027b36:	6010      	str	r0, [r2, #0]
 8027b38:	0628      	lsls	r0, r5, #24
 8027b3a:	681b      	ldr	r3, [r3, #0]
 8027b3c:	d501      	bpl.n	8027b42 <_printf_i+0x196>
 8027b3e:	6019      	str	r1, [r3, #0]
 8027b40:	e002      	b.n	8027b48 <_printf_i+0x19c>
 8027b42:	066a      	lsls	r2, r5, #25
 8027b44:	d5fb      	bpl.n	8027b3e <_printf_i+0x192>
 8027b46:	8019      	strh	r1, [r3, #0]
 8027b48:	2300      	movs	r3, #0
 8027b4a:	6123      	str	r3, [r4, #16]
 8027b4c:	4665      	mov	r5, ip
 8027b4e:	e7b9      	b.n	8027ac4 <_printf_i+0x118>
 8027b50:	6813      	ldr	r3, [r2, #0]
 8027b52:	1d19      	adds	r1, r3, #4
 8027b54:	6011      	str	r1, [r2, #0]
 8027b56:	681d      	ldr	r5, [r3, #0]
 8027b58:	6862      	ldr	r2, [r4, #4]
 8027b5a:	2100      	movs	r1, #0
 8027b5c:	4628      	mov	r0, r5
 8027b5e:	f7d8 fb4f 	bl	8000200 <memchr>
 8027b62:	b108      	cbz	r0, 8027b68 <_printf_i+0x1bc>
 8027b64:	1b40      	subs	r0, r0, r5
 8027b66:	6060      	str	r0, [r4, #4]
 8027b68:	6863      	ldr	r3, [r4, #4]
 8027b6a:	6123      	str	r3, [r4, #16]
 8027b6c:	2300      	movs	r3, #0
 8027b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027b72:	e7a7      	b.n	8027ac4 <_printf_i+0x118>
 8027b74:	6923      	ldr	r3, [r4, #16]
 8027b76:	462a      	mov	r2, r5
 8027b78:	4639      	mov	r1, r7
 8027b7a:	4630      	mov	r0, r6
 8027b7c:	47c0      	blx	r8
 8027b7e:	3001      	adds	r0, #1
 8027b80:	d0aa      	beq.n	8027ad8 <_printf_i+0x12c>
 8027b82:	6823      	ldr	r3, [r4, #0]
 8027b84:	079b      	lsls	r3, r3, #30
 8027b86:	d413      	bmi.n	8027bb0 <_printf_i+0x204>
 8027b88:	68e0      	ldr	r0, [r4, #12]
 8027b8a:	9b03      	ldr	r3, [sp, #12]
 8027b8c:	4298      	cmp	r0, r3
 8027b8e:	bfb8      	it	lt
 8027b90:	4618      	movlt	r0, r3
 8027b92:	e7a3      	b.n	8027adc <_printf_i+0x130>
 8027b94:	2301      	movs	r3, #1
 8027b96:	464a      	mov	r2, r9
 8027b98:	4639      	mov	r1, r7
 8027b9a:	4630      	mov	r0, r6
 8027b9c:	47c0      	blx	r8
 8027b9e:	3001      	adds	r0, #1
 8027ba0:	d09a      	beq.n	8027ad8 <_printf_i+0x12c>
 8027ba2:	3501      	adds	r5, #1
 8027ba4:	68e3      	ldr	r3, [r4, #12]
 8027ba6:	9a03      	ldr	r2, [sp, #12]
 8027ba8:	1a9b      	subs	r3, r3, r2
 8027baa:	42ab      	cmp	r3, r5
 8027bac:	dcf2      	bgt.n	8027b94 <_printf_i+0x1e8>
 8027bae:	e7eb      	b.n	8027b88 <_printf_i+0x1dc>
 8027bb0:	2500      	movs	r5, #0
 8027bb2:	f104 0919 	add.w	r9, r4, #25
 8027bb6:	e7f5      	b.n	8027ba4 <_printf_i+0x1f8>
 8027bb8:	2b00      	cmp	r3, #0
 8027bba:	d1ac      	bne.n	8027b16 <_printf_i+0x16a>
 8027bbc:	7803      	ldrb	r3, [r0, #0]
 8027bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027bc6:	e76c      	b.n	8027aa2 <_printf_i+0xf6>
 8027bc8:	08044f60 	.word	0x08044f60
 8027bcc:	08044f71 	.word	0x08044f71

08027bd0 <_sbrk_r>:
 8027bd0:	b538      	push	{r3, r4, r5, lr}
 8027bd2:	4c06      	ldr	r4, [pc, #24]	; (8027bec <_sbrk_r+0x1c>)
 8027bd4:	2300      	movs	r3, #0
 8027bd6:	4605      	mov	r5, r0
 8027bd8:	4608      	mov	r0, r1
 8027bda:	6023      	str	r3, [r4, #0]
 8027bdc:	f7d9 fe9e 	bl	800191c <_sbrk>
 8027be0:	1c43      	adds	r3, r0, #1
 8027be2:	d102      	bne.n	8027bea <_sbrk_r+0x1a>
 8027be4:	6823      	ldr	r3, [r4, #0]
 8027be6:	b103      	cbz	r3, 8027bea <_sbrk_r+0x1a>
 8027be8:	602b      	str	r3, [r5, #0]
 8027bea:	bd38      	pop	{r3, r4, r5, pc}
 8027bec:	200073d0 	.word	0x200073d0

08027bf0 <sniprintf>:
 8027bf0:	b40c      	push	{r2, r3}
 8027bf2:	b530      	push	{r4, r5, lr}
 8027bf4:	4b17      	ldr	r3, [pc, #92]	; (8027c54 <sniprintf+0x64>)
 8027bf6:	1e0c      	subs	r4, r1, #0
 8027bf8:	b09d      	sub	sp, #116	; 0x74
 8027bfa:	681d      	ldr	r5, [r3, #0]
 8027bfc:	da08      	bge.n	8027c10 <sniprintf+0x20>
 8027bfe:	238b      	movs	r3, #139	; 0x8b
 8027c00:	602b      	str	r3, [r5, #0]
 8027c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027c06:	b01d      	add	sp, #116	; 0x74
 8027c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027c0c:	b002      	add	sp, #8
 8027c0e:	4770      	bx	lr
 8027c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8027c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8027c18:	bf14      	ite	ne
 8027c1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8027c1e:	4623      	moveq	r3, r4
 8027c20:	9304      	str	r3, [sp, #16]
 8027c22:	9307      	str	r3, [sp, #28]
 8027c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027c28:	9002      	str	r0, [sp, #8]
 8027c2a:	9006      	str	r0, [sp, #24]
 8027c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027c32:	ab21      	add	r3, sp, #132	; 0x84
 8027c34:	a902      	add	r1, sp, #8
 8027c36:	4628      	mov	r0, r5
 8027c38:	9301      	str	r3, [sp, #4]
 8027c3a:	f001 f9d9 	bl	8028ff0 <_svfiprintf_r>
 8027c3e:	1c43      	adds	r3, r0, #1
 8027c40:	bfbc      	itt	lt
 8027c42:	238b      	movlt	r3, #139	; 0x8b
 8027c44:	602b      	strlt	r3, [r5, #0]
 8027c46:	2c00      	cmp	r4, #0
 8027c48:	d0dd      	beq.n	8027c06 <sniprintf+0x16>
 8027c4a:	9b02      	ldr	r3, [sp, #8]
 8027c4c:	2200      	movs	r2, #0
 8027c4e:	701a      	strb	r2, [r3, #0]
 8027c50:	e7d9      	b.n	8027c06 <sniprintf+0x16>
 8027c52:	bf00      	nop
 8027c54:	2000285c 	.word	0x2000285c

08027c58 <siscanf>:
 8027c58:	b40e      	push	{r1, r2, r3}
 8027c5a:	b530      	push	{r4, r5, lr}
 8027c5c:	b09c      	sub	sp, #112	; 0x70
 8027c5e:	ac1f      	add	r4, sp, #124	; 0x7c
 8027c60:	f44f 7201 	mov.w	r2, #516	; 0x204
 8027c64:	f854 5b04 	ldr.w	r5, [r4], #4
 8027c68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8027c6c:	9002      	str	r0, [sp, #8]
 8027c6e:	9006      	str	r0, [sp, #24]
 8027c70:	f7d8 fab8 	bl	80001e4 <strlen>
 8027c74:	4b0b      	ldr	r3, [pc, #44]	; (8027ca4 <siscanf+0x4c>)
 8027c76:	9003      	str	r0, [sp, #12]
 8027c78:	9007      	str	r0, [sp, #28]
 8027c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c7c:	480a      	ldr	r0, [pc, #40]	; (8027ca8 <siscanf+0x50>)
 8027c7e:	9401      	str	r4, [sp, #4]
 8027c80:	2300      	movs	r3, #0
 8027c82:	930f      	str	r3, [sp, #60]	; 0x3c
 8027c84:	9314      	str	r3, [sp, #80]	; 0x50
 8027c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027c8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027c8e:	462a      	mov	r2, r5
 8027c90:	4623      	mov	r3, r4
 8027c92:	a902      	add	r1, sp, #8
 8027c94:	6800      	ldr	r0, [r0, #0]
 8027c96:	f001 fafd 	bl	8029294 <__ssvfiscanf_r>
 8027c9a:	b01c      	add	sp, #112	; 0x70
 8027c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027ca0:	b003      	add	sp, #12
 8027ca2:	4770      	bx	lr
 8027ca4:	08027cad 	.word	0x08027cad
 8027ca8:	2000285c 	.word	0x2000285c

08027cac <__seofread>:
 8027cac:	2000      	movs	r0, #0
 8027cae:	4770      	bx	lr

08027cb0 <strcpy>:
 8027cb0:	4603      	mov	r3, r0
 8027cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027cb6:	f803 2b01 	strb.w	r2, [r3], #1
 8027cba:	2a00      	cmp	r2, #0
 8027cbc:	d1f9      	bne.n	8027cb2 <strcpy+0x2>
 8027cbe:	4770      	bx	lr

08027cc0 <quorem>:
 8027cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cc4:	6903      	ldr	r3, [r0, #16]
 8027cc6:	690c      	ldr	r4, [r1, #16]
 8027cc8:	42a3      	cmp	r3, r4
 8027cca:	4680      	mov	r8, r0
 8027ccc:	f2c0 8082 	blt.w	8027dd4 <quorem+0x114>
 8027cd0:	3c01      	subs	r4, #1
 8027cd2:	f101 0714 	add.w	r7, r1, #20
 8027cd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8027cda:	f100 0614 	add.w	r6, r0, #20
 8027cde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8027ce2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8027ce6:	eb06 030c 	add.w	r3, r6, ip
 8027cea:	3501      	adds	r5, #1
 8027cec:	eb07 090c 	add.w	r9, r7, ip
 8027cf0:	9301      	str	r3, [sp, #4]
 8027cf2:	fbb0 f5f5 	udiv	r5, r0, r5
 8027cf6:	b395      	cbz	r5, 8027d5e <quorem+0x9e>
 8027cf8:	f04f 0a00 	mov.w	sl, #0
 8027cfc:	4638      	mov	r0, r7
 8027cfe:	46b6      	mov	lr, r6
 8027d00:	46d3      	mov	fp, sl
 8027d02:	f850 2b04 	ldr.w	r2, [r0], #4
 8027d06:	b293      	uxth	r3, r2
 8027d08:	fb05 a303 	mla	r3, r5, r3, sl
 8027d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027d10:	b29b      	uxth	r3, r3
 8027d12:	ebab 0303 	sub.w	r3, fp, r3
 8027d16:	0c12      	lsrs	r2, r2, #16
 8027d18:	f8de b000 	ldr.w	fp, [lr]
 8027d1c:	fb05 a202 	mla	r2, r5, r2, sl
 8027d20:	fa13 f38b 	uxtah	r3, r3, fp
 8027d24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8027d28:	fa1f fb82 	uxth.w	fp, r2
 8027d2c:	f8de 2000 	ldr.w	r2, [lr]
 8027d30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8027d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027d38:	b29b      	uxth	r3, r3
 8027d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027d3e:	4581      	cmp	r9, r0
 8027d40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8027d44:	f84e 3b04 	str.w	r3, [lr], #4
 8027d48:	d2db      	bcs.n	8027d02 <quorem+0x42>
 8027d4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8027d4e:	b933      	cbnz	r3, 8027d5e <quorem+0x9e>
 8027d50:	9b01      	ldr	r3, [sp, #4]
 8027d52:	3b04      	subs	r3, #4
 8027d54:	429e      	cmp	r6, r3
 8027d56:	461a      	mov	r2, r3
 8027d58:	d330      	bcc.n	8027dbc <quorem+0xfc>
 8027d5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8027d5e:	4640      	mov	r0, r8
 8027d60:	f001 f818 	bl	8028d94 <__mcmp>
 8027d64:	2800      	cmp	r0, #0
 8027d66:	db25      	blt.n	8027db4 <quorem+0xf4>
 8027d68:	3501      	adds	r5, #1
 8027d6a:	4630      	mov	r0, r6
 8027d6c:	f04f 0c00 	mov.w	ip, #0
 8027d70:	f857 2b04 	ldr.w	r2, [r7], #4
 8027d74:	f8d0 e000 	ldr.w	lr, [r0]
 8027d78:	b293      	uxth	r3, r2
 8027d7a:	ebac 0303 	sub.w	r3, ip, r3
 8027d7e:	0c12      	lsrs	r2, r2, #16
 8027d80:	fa13 f38e 	uxtah	r3, r3, lr
 8027d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027d8c:	b29b      	uxth	r3, r3
 8027d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027d92:	45b9      	cmp	r9, r7
 8027d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8027d98:	f840 3b04 	str.w	r3, [r0], #4
 8027d9c:	d2e8      	bcs.n	8027d70 <quorem+0xb0>
 8027d9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8027da2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8027da6:	b92a      	cbnz	r2, 8027db4 <quorem+0xf4>
 8027da8:	3b04      	subs	r3, #4
 8027daa:	429e      	cmp	r6, r3
 8027dac:	461a      	mov	r2, r3
 8027dae:	d30b      	bcc.n	8027dc8 <quorem+0x108>
 8027db0:	f8c8 4010 	str.w	r4, [r8, #16]
 8027db4:	4628      	mov	r0, r5
 8027db6:	b003      	add	sp, #12
 8027db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027dbc:	6812      	ldr	r2, [r2, #0]
 8027dbe:	3b04      	subs	r3, #4
 8027dc0:	2a00      	cmp	r2, #0
 8027dc2:	d1ca      	bne.n	8027d5a <quorem+0x9a>
 8027dc4:	3c01      	subs	r4, #1
 8027dc6:	e7c5      	b.n	8027d54 <quorem+0x94>
 8027dc8:	6812      	ldr	r2, [r2, #0]
 8027dca:	3b04      	subs	r3, #4
 8027dcc:	2a00      	cmp	r2, #0
 8027dce:	d1ef      	bne.n	8027db0 <quorem+0xf0>
 8027dd0:	3c01      	subs	r4, #1
 8027dd2:	e7ea      	b.n	8027daa <quorem+0xea>
 8027dd4:	2000      	movs	r0, #0
 8027dd6:	e7ee      	b.n	8027db6 <quorem+0xf6>

08027dd8 <_dtoa_r>:
 8027dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ddc:	ec57 6b10 	vmov	r6, r7, d0
 8027de0:	b097      	sub	sp, #92	; 0x5c
 8027de2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027de4:	9106      	str	r1, [sp, #24]
 8027de6:	4604      	mov	r4, r0
 8027de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8027dea:	9312      	str	r3, [sp, #72]	; 0x48
 8027dec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8027df0:	e9cd 6700 	strd	r6, r7, [sp]
 8027df4:	b93d      	cbnz	r5, 8027e06 <_dtoa_r+0x2e>
 8027df6:	2010      	movs	r0, #16
 8027df8:	f7ff f9c2 	bl	8027180 <malloc>
 8027dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8027dfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027e02:	6005      	str	r5, [r0, #0]
 8027e04:	60c5      	str	r5, [r0, #12]
 8027e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027e08:	6819      	ldr	r1, [r3, #0]
 8027e0a:	b151      	cbz	r1, 8027e22 <_dtoa_r+0x4a>
 8027e0c:	685a      	ldr	r2, [r3, #4]
 8027e0e:	604a      	str	r2, [r1, #4]
 8027e10:	2301      	movs	r3, #1
 8027e12:	4093      	lsls	r3, r2
 8027e14:	608b      	str	r3, [r1, #8]
 8027e16:	4620      	mov	r0, r4
 8027e18:	f000 fdda 	bl	80289d0 <_Bfree>
 8027e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027e1e:	2200      	movs	r2, #0
 8027e20:	601a      	str	r2, [r3, #0]
 8027e22:	1e3b      	subs	r3, r7, #0
 8027e24:	bfbb      	ittet	lt
 8027e26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8027e2a:	9301      	strlt	r3, [sp, #4]
 8027e2c:	2300      	movge	r3, #0
 8027e2e:	2201      	movlt	r2, #1
 8027e30:	bfac      	ite	ge
 8027e32:	f8c8 3000 	strge.w	r3, [r8]
 8027e36:	f8c8 2000 	strlt.w	r2, [r8]
 8027e3a:	4baf      	ldr	r3, [pc, #700]	; (80280f8 <_dtoa_r+0x320>)
 8027e3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027e40:	ea33 0308 	bics.w	r3, r3, r8
 8027e44:	d114      	bne.n	8027e70 <_dtoa_r+0x98>
 8027e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8027e4c:	6013      	str	r3, [r2, #0]
 8027e4e:	9b00      	ldr	r3, [sp, #0]
 8027e50:	b923      	cbnz	r3, 8027e5c <_dtoa_r+0x84>
 8027e52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8027e56:	2800      	cmp	r0, #0
 8027e58:	f000 8542 	beq.w	80288e0 <_dtoa_r+0xb08>
 8027e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027e5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802810c <_dtoa_r+0x334>
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	f000 8544 	beq.w	80288f0 <_dtoa_r+0xb18>
 8027e68:	f10b 0303 	add.w	r3, fp, #3
 8027e6c:	f000 bd3e 	b.w	80288ec <_dtoa_r+0xb14>
 8027e70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8027e74:	2200      	movs	r2, #0
 8027e76:	2300      	movs	r3, #0
 8027e78:	4630      	mov	r0, r6
 8027e7a:	4639      	mov	r1, r7
 8027e7c:	f7d8 fe34 	bl	8000ae8 <__aeabi_dcmpeq>
 8027e80:	4681      	mov	r9, r0
 8027e82:	b168      	cbz	r0, 8027ea0 <_dtoa_r+0xc8>
 8027e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027e86:	2301      	movs	r3, #1
 8027e88:	6013      	str	r3, [r2, #0]
 8027e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027e8c:	2b00      	cmp	r3, #0
 8027e8e:	f000 8524 	beq.w	80288da <_dtoa_r+0xb02>
 8027e92:	4b9a      	ldr	r3, [pc, #616]	; (80280fc <_dtoa_r+0x324>)
 8027e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027e96:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8027e9a:	6013      	str	r3, [r2, #0]
 8027e9c:	f000 bd28 	b.w	80288f0 <_dtoa_r+0xb18>
 8027ea0:	aa14      	add	r2, sp, #80	; 0x50
 8027ea2:	a915      	add	r1, sp, #84	; 0x54
 8027ea4:	ec47 6b10 	vmov	d0, r6, r7
 8027ea8:	4620      	mov	r0, r4
 8027eaa:	f000 ffea 	bl	8028e82 <__d2b>
 8027eae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8027eb2:	9004      	str	r0, [sp, #16]
 8027eb4:	2d00      	cmp	r5, #0
 8027eb6:	d07c      	beq.n	8027fb2 <_dtoa_r+0x1da>
 8027eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027ebc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8027ec0:	46b2      	mov	sl, r6
 8027ec2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8027ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8027eca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8027ece:	2200      	movs	r2, #0
 8027ed0:	4b8b      	ldr	r3, [pc, #556]	; (8028100 <_dtoa_r+0x328>)
 8027ed2:	4650      	mov	r0, sl
 8027ed4:	4659      	mov	r1, fp
 8027ed6:	f7d8 f9e7 	bl	80002a8 <__aeabi_dsub>
 8027eda:	a381      	add	r3, pc, #516	; (adr r3, 80280e0 <_dtoa_r+0x308>)
 8027edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ee0:	f7d8 fb9a 	bl	8000618 <__aeabi_dmul>
 8027ee4:	a380      	add	r3, pc, #512	; (adr r3, 80280e8 <_dtoa_r+0x310>)
 8027ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027eea:	f7d8 f9df 	bl	80002ac <__adddf3>
 8027eee:	4606      	mov	r6, r0
 8027ef0:	4628      	mov	r0, r5
 8027ef2:	460f      	mov	r7, r1
 8027ef4:	f7d8 fb26 	bl	8000544 <__aeabi_i2d>
 8027ef8:	a37d      	add	r3, pc, #500	; (adr r3, 80280f0 <_dtoa_r+0x318>)
 8027efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027efe:	f7d8 fb8b 	bl	8000618 <__aeabi_dmul>
 8027f02:	4602      	mov	r2, r0
 8027f04:	460b      	mov	r3, r1
 8027f06:	4630      	mov	r0, r6
 8027f08:	4639      	mov	r1, r7
 8027f0a:	f7d8 f9cf 	bl	80002ac <__adddf3>
 8027f0e:	4606      	mov	r6, r0
 8027f10:	460f      	mov	r7, r1
 8027f12:	f7d8 fe31 	bl	8000b78 <__aeabi_d2iz>
 8027f16:	2200      	movs	r2, #0
 8027f18:	4682      	mov	sl, r0
 8027f1a:	2300      	movs	r3, #0
 8027f1c:	4630      	mov	r0, r6
 8027f1e:	4639      	mov	r1, r7
 8027f20:	f7d8 fdec 	bl	8000afc <__aeabi_dcmplt>
 8027f24:	b148      	cbz	r0, 8027f3a <_dtoa_r+0x162>
 8027f26:	4650      	mov	r0, sl
 8027f28:	f7d8 fb0c 	bl	8000544 <__aeabi_i2d>
 8027f2c:	4632      	mov	r2, r6
 8027f2e:	463b      	mov	r3, r7
 8027f30:	f7d8 fdda 	bl	8000ae8 <__aeabi_dcmpeq>
 8027f34:	b908      	cbnz	r0, 8027f3a <_dtoa_r+0x162>
 8027f36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8027f3a:	f1ba 0f16 	cmp.w	sl, #22
 8027f3e:	d859      	bhi.n	8027ff4 <_dtoa_r+0x21c>
 8027f40:	4970      	ldr	r1, [pc, #448]	; (8028104 <_dtoa_r+0x32c>)
 8027f42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8027f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027f4e:	f7d8 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8027f52:	2800      	cmp	r0, #0
 8027f54:	d050      	beq.n	8027ff8 <_dtoa_r+0x220>
 8027f56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8027f5a:	2300      	movs	r3, #0
 8027f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8027f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f60:	1b5d      	subs	r5, r3, r5
 8027f62:	f1b5 0801 	subs.w	r8, r5, #1
 8027f66:	bf49      	itett	mi
 8027f68:	f1c5 0301 	rsbmi	r3, r5, #1
 8027f6c:	2300      	movpl	r3, #0
 8027f6e:	9305      	strmi	r3, [sp, #20]
 8027f70:	f04f 0800 	movmi.w	r8, #0
 8027f74:	bf58      	it	pl
 8027f76:	9305      	strpl	r3, [sp, #20]
 8027f78:	f1ba 0f00 	cmp.w	sl, #0
 8027f7c:	db3e      	blt.n	8027ffc <_dtoa_r+0x224>
 8027f7e:	2300      	movs	r3, #0
 8027f80:	44d0      	add	r8, sl
 8027f82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8027f86:	9307      	str	r3, [sp, #28]
 8027f88:	9b06      	ldr	r3, [sp, #24]
 8027f8a:	2b09      	cmp	r3, #9
 8027f8c:	f200 8090 	bhi.w	80280b0 <_dtoa_r+0x2d8>
 8027f90:	2b05      	cmp	r3, #5
 8027f92:	bfc4      	itt	gt
 8027f94:	3b04      	subgt	r3, #4
 8027f96:	9306      	strgt	r3, [sp, #24]
 8027f98:	9b06      	ldr	r3, [sp, #24]
 8027f9a:	f1a3 0302 	sub.w	r3, r3, #2
 8027f9e:	bfcc      	ite	gt
 8027fa0:	2500      	movgt	r5, #0
 8027fa2:	2501      	movle	r5, #1
 8027fa4:	2b03      	cmp	r3, #3
 8027fa6:	f200 808f 	bhi.w	80280c8 <_dtoa_r+0x2f0>
 8027faa:	e8df f003 	tbb	[pc, r3]
 8027fae:	7f7d      	.short	0x7f7d
 8027fb0:	7131      	.short	0x7131
 8027fb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8027fb6:	441d      	add	r5, r3
 8027fb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8027fbc:	2820      	cmp	r0, #32
 8027fbe:	dd13      	ble.n	8027fe8 <_dtoa_r+0x210>
 8027fc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8027fc4:	9b00      	ldr	r3, [sp, #0]
 8027fc6:	fa08 f800 	lsl.w	r8, r8, r0
 8027fca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8027fce:	fa23 f000 	lsr.w	r0, r3, r0
 8027fd2:	ea48 0000 	orr.w	r0, r8, r0
 8027fd6:	f7d8 faa5 	bl	8000524 <__aeabi_ui2d>
 8027fda:	2301      	movs	r3, #1
 8027fdc:	4682      	mov	sl, r0
 8027fde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8027fe2:	3d01      	subs	r5, #1
 8027fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8027fe6:	e772      	b.n	8027ece <_dtoa_r+0xf6>
 8027fe8:	9b00      	ldr	r3, [sp, #0]
 8027fea:	f1c0 0020 	rsb	r0, r0, #32
 8027fee:	fa03 f000 	lsl.w	r0, r3, r0
 8027ff2:	e7f0      	b.n	8027fd6 <_dtoa_r+0x1fe>
 8027ff4:	2301      	movs	r3, #1
 8027ff6:	e7b1      	b.n	8027f5c <_dtoa_r+0x184>
 8027ff8:	900f      	str	r0, [sp, #60]	; 0x3c
 8027ffa:	e7b0      	b.n	8027f5e <_dtoa_r+0x186>
 8027ffc:	9b05      	ldr	r3, [sp, #20]
 8027ffe:	eba3 030a 	sub.w	r3, r3, sl
 8028002:	9305      	str	r3, [sp, #20]
 8028004:	f1ca 0300 	rsb	r3, sl, #0
 8028008:	9307      	str	r3, [sp, #28]
 802800a:	2300      	movs	r3, #0
 802800c:	930e      	str	r3, [sp, #56]	; 0x38
 802800e:	e7bb      	b.n	8027f88 <_dtoa_r+0x1b0>
 8028010:	2301      	movs	r3, #1
 8028012:	930a      	str	r3, [sp, #40]	; 0x28
 8028014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028016:	2b00      	cmp	r3, #0
 8028018:	dd59      	ble.n	80280ce <_dtoa_r+0x2f6>
 802801a:	9302      	str	r3, [sp, #8]
 802801c:	4699      	mov	r9, r3
 802801e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028020:	2200      	movs	r2, #0
 8028022:	6072      	str	r2, [r6, #4]
 8028024:	2204      	movs	r2, #4
 8028026:	f102 0014 	add.w	r0, r2, #20
 802802a:	4298      	cmp	r0, r3
 802802c:	6871      	ldr	r1, [r6, #4]
 802802e:	d953      	bls.n	80280d8 <_dtoa_r+0x300>
 8028030:	4620      	mov	r0, r4
 8028032:	f000 fc99 	bl	8028968 <_Balloc>
 8028036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028038:	6030      	str	r0, [r6, #0]
 802803a:	f1b9 0f0e 	cmp.w	r9, #14
 802803e:	f8d3 b000 	ldr.w	fp, [r3]
 8028042:	f200 80e6 	bhi.w	8028212 <_dtoa_r+0x43a>
 8028046:	2d00      	cmp	r5, #0
 8028048:	f000 80e3 	beq.w	8028212 <_dtoa_r+0x43a>
 802804c:	ed9d 7b00 	vldr	d7, [sp]
 8028050:	f1ba 0f00 	cmp.w	sl, #0
 8028054:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8028058:	dd74      	ble.n	8028144 <_dtoa_r+0x36c>
 802805a:	4a2a      	ldr	r2, [pc, #168]	; (8028104 <_dtoa_r+0x32c>)
 802805c:	f00a 030f 	and.w	r3, sl, #15
 8028060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8028064:	ed93 7b00 	vldr	d7, [r3]
 8028068:	ea4f 162a 	mov.w	r6, sl, asr #4
 802806c:	06f0      	lsls	r0, r6, #27
 802806e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8028072:	d565      	bpl.n	8028140 <_dtoa_r+0x368>
 8028074:	4b24      	ldr	r3, [pc, #144]	; (8028108 <_dtoa_r+0x330>)
 8028076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802807a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802807e:	f7d8 fbf5 	bl	800086c <__aeabi_ddiv>
 8028082:	e9cd 0100 	strd	r0, r1, [sp]
 8028086:	f006 060f 	and.w	r6, r6, #15
 802808a:	2503      	movs	r5, #3
 802808c:	4f1e      	ldr	r7, [pc, #120]	; (8028108 <_dtoa_r+0x330>)
 802808e:	e04c      	b.n	802812a <_dtoa_r+0x352>
 8028090:	2301      	movs	r3, #1
 8028092:	930a      	str	r3, [sp, #40]	; 0x28
 8028094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028096:	4453      	add	r3, sl
 8028098:	f103 0901 	add.w	r9, r3, #1
 802809c:	9302      	str	r3, [sp, #8]
 802809e:	464b      	mov	r3, r9
 80280a0:	2b01      	cmp	r3, #1
 80280a2:	bfb8      	it	lt
 80280a4:	2301      	movlt	r3, #1
 80280a6:	e7ba      	b.n	802801e <_dtoa_r+0x246>
 80280a8:	2300      	movs	r3, #0
 80280aa:	e7b2      	b.n	8028012 <_dtoa_r+0x23a>
 80280ac:	2300      	movs	r3, #0
 80280ae:	e7f0      	b.n	8028092 <_dtoa_r+0x2ba>
 80280b0:	2501      	movs	r5, #1
 80280b2:	2300      	movs	r3, #0
 80280b4:	9306      	str	r3, [sp, #24]
 80280b6:	950a      	str	r5, [sp, #40]	; 0x28
 80280b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80280bc:	9302      	str	r3, [sp, #8]
 80280be:	4699      	mov	r9, r3
 80280c0:	2200      	movs	r2, #0
 80280c2:	2312      	movs	r3, #18
 80280c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80280c6:	e7aa      	b.n	802801e <_dtoa_r+0x246>
 80280c8:	2301      	movs	r3, #1
 80280ca:	930a      	str	r3, [sp, #40]	; 0x28
 80280cc:	e7f4      	b.n	80280b8 <_dtoa_r+0x2e0>
 80280ce:	2301      	movs	r3, #1
 80280d0:	9302      	str	r3, [sp, #8]
 80280d2:	4699      	mov	r9, r3
 80280d4:	461a      	mov	r2, r3
 80280d6:	e7f5      	b.n	80280c4 <_dtoa_r+0x2ec>
 80280d8:	3101      	adds	r1, #1
 80280da:	6071      	str	r1, [r6, #4]
 80280dc:	0052      	lsls	r2, r2, #1
 80280de:	e7a2      	b.n	8028026 <_dtoa_r+0x24e>
 80280e0:	636f4361 	.word	0x636f4361
 80280e4:	3fd287a7 	.word	0x3fd287a7
 80280e8:	8b60c8b3 	.word	0x8b60c8b3
 80280ec:	3fc68a28 	.word	0x3fc68a28
 80280f0:	509f79fb 	.word	0x509f79fb
 80280f4:	3fd34413 	.word	0x3fd34413
 80280f8:	7ff00000 	.word	0x7ff00000
 80280fc:	08045114 	.word	0x08045114
 8028100:	3ff80000 	.word	0x3ff80000
 8028104:	08045018 	.word	0x08045018
 8028108:	08044ff0 	.word	0x08044ff0
 802810c:	08044f8b 	.word	0x08044f8b
 8028110:	07f1      	lsls	r1, r6, #31
 8028112:	d508      	bpl.n	8028126 <_dtoa_r+0x34e>
 8028114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028118:	e9d7 2300 	ldrd	r2, r3, [r7]
 802811c:	f7d8 fa7c 	bl	8000618 <__aeabi_dmul>
 8028120:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8028124:	3501      	adds	r5, #1
 8028126:	1076      	asrs	r6, r6, #1
 8028128:	3708      	adds	r7, #8
 802812a:	2e00      	cmp	r6, #0
 802812c:	d1f0      	bne.n	8028110 <_dtoa_r+0x338>
 802812e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8028132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028136:	f7d8 fb99 	bl	800086c <__aeabi_ddiv>
 802813a:	e9cd 0100 	strd	r0, r1, [sp]
 802813e:	e01a      	b.n	8028176 <_dtoa_r+0x39e>
 8028140:	2502      	movs	r5, #2
 8028142:	e7a3      	b.n	802808c <_dtoa_r+0x2b4>
 8028144:	f000 80a0 	beq.w	8028288 <_dtoa_r+0x4b0>
 8028148:	f1ca 0600 	rsb	r6, sl, #0
 802814c:	4b9f      	ldr	r3, [pc, #636]	; (80283cc <_dtoa_r+0x5f4>)
 802814e:	4fa0      	ldr	r7, [pc, #640]	; (80283d0 <_dtoa_r+0x5f8>)
 8028150:	f006 020f 	and.w	r2, r6, #15
 8028154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028158:	e9d3 2300 	ldrd	r2, r3, [r3]
 802815c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8028160:	f7d8 fa5a 	bl	8000618 <__aeabi_dmul>
 8028164:	e9cd 0100 	strd	r0, r1, [sp]
 8028168:	1136      	asrs	r6, r6, #4
 802816a:	2300      	movs	r3, #0
 802816c:	2502      	movs	r5, #2
 802816e:	2e00      	cmp	r6, #0
 8028170:	d17f      	bne.n	8028272 <_dtoa_r+0x49a>
 8028172:	2b00      	cmp	r3, #0
 8028174:	d1e1      	bne.n	802813a <_dtoa_r+0x362>
 8028176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028178:	2b00      	cmp	r3, #0
 802817a:	f000 8087 	beq.w	802828c <_dtoa_r+0x4b4>
 802817e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8028182:	2200      	movs	r2, #0
 8028184:	4b93      	ldr	r3, [pc, #588]	; (80283d4 <_dtoa_r+0x5fc>)
 8028186:	4630      	mov	r0, r6
 8028188:	4639      	mov	r1, r7
 802818a:	f7d8 fcb7 	bl	8000afc <__aeabi_dcmplt>
 802818e:	2800      	cmp	r0, #0
 8028190:	d07c      	beq.n	802828c <_dtoa_r+0x4b4>
 8028192:	f1b9 0f00 	cmp.w	r9, #0
 8028196:	d079      	beq.n	802828c <_dtoa_r+0x4b4>
 8028198:	9b02      	ldr	r3, [sp, #8]
 802819a:	2b00      	cmp	r3, #0
 802819c:	dd35      	ble.n	802820a <_dtoa_r+0x432>
 802819e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80281a2:	9308      	str	r3, [sp, #32]
 80281a4:	4639      	mov	r1, r7
 80281a6:	2200      	movs	r2, #0
 80281a8:	4b8b      	ldr	r3, [pc, #556]	; (80283d8 <_dtoa_r+0x600>)
 80281aa:	4630      	mov	r0, r6
 80281ac:	f7d8 fa34 	bl	8000618 <__aeabi_dmul>
 80281b0:	e9cd 0100 	strd	r0, r1, [sp]
 80281b4:	9f02      	ldr	r7, [sp, #8]
 80281b6:	3501      	adds	r5, #1
 80281b8:	4628      	mov	r0, r5
 80281ba:	f7d8 f9c3 	bl	8000544 <__aeabi_i2d>
 80281be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80281c2:	f7d8 fa29 	bl	8000618 <__aeabi_dmul>
 80281c6:	2200      	movs	r2, #0
 80281c8:	4b84      	ldr	r3, [pc, #528]	; (80283dc <_dtoa_r+0x604>)
 80281ca:	f7d8 f86f 	bl	80002ac <__adddf3>
 80281ce:	4605      	mov	r5, r0
 80281d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80281d4:	2f00      	cmp	r7, #0
 80281d6:	d15d      	bne.n	8028294 <_dtoa_r+0x4bc>
 80281d8:	2200      	movs	r2, #0
 80281da:	4b81      	ldr	r3, [pc, #516]	; (80283e0 <_dtoa_r+0x608>)
 80281dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80281e0:	f7d8 f862 	bl	80002a8 <__aeabi_dsub>
 80281e4:	462a      	mov	r2, r5
 80281e6:	4633      	mov	r3, r6
 80281e8:	e9cd 0100 	strd	r0, r1, [sp]
 80281ec:	f7d8 fca4 	bl	8000b38 <__aeabi_dcmpgt>
 80281f0:	2800      	cmp	r0, #0
 80281f2:	f040 8288 	bne.w	8028706 <_dtoa_r+0x92e>
 80281f6:	462a      	mov	r2, r5
 80281f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80281fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028200:	f7d8 fc7c 	bl	8000afc <__aeabi_dcmplt>
 8028204:	2800      	cmp	r0, #0
 8028206:	f040 827c 	bne.w	8028702 <_dtoa_r+0x92a>
 802820a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802820e:	e9cd 2300 	strd	r2, r3, [sp]
 8028212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028214:	2b00      	cmp	r3, #0
 8028216:	f2c0 8150 	blt.w	80284ba <_dtoa_r+0x6e2>
 802821a:	f1ba 0f0e 	cmp.w	sl, #14
 802821e:	f300 814c 	bgt.w	80284ba <_dtoa_r+0x6e2>
 8028222:	4b6a      	ldr	r3, [pc, #424]	; (80283cc <_dtoa_r+0x5f4>)
 8028224:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8028228:	ed93 7b00 	vldr	d7, [r3]
 802822c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802822e:	2b00      	cmp	r3, #0
 8028230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028234:	f280 80d8 	bge.w	80283e8 <_dtoa_r+0x610>
 8028238:	f1b9 0f00 	cmp.w	r9, #0
 802823c:	f300 80d4 	bgt.w	80283e8 <_dtoa_r+0x610>
 8028240:	f040 825e 	bne.w	8028700 <_dtoa_r+0x928>
 8028244:	2200      	movs	r2, #0
 8028246:	4b66      	ldr	r3, [pc, #408]	; (80283e0 <_dtoa_r+0x608>)
 8028248:	ec51 0b17 	vmov	r0, r1, d7
 802824c:	f7d8 f9e4 	bl	8000618 <__aeabi_dmul>
 8028250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028254:	f7d8 fc66 	bl	8000b24 <__aeabi_dcmpge>
 8028258:	464f      	mov	r7, r9
 802825a:	464e      	mov	r6, r9
 802825c:	2800      	cmp	r0, #0
 802825e:	f040 8234 	bne.w	80286ca <_dtoa_r+0x8f2>
 8028262:	2331      	movs	r3, #49	; 0x31
 8028264:	f10b 0501 	add.w	r5, fp, #1
 8028268:	f88b 3000 	strb.w	r3, [fp]
 802826c:	f10a 0a01 	add.w	sl, sl, #1
 8028270:	e22f      	b.n	80286d2 <_dtoa_r+0x8fa>
 8028272:	07f2      	lsls	r2, r6, #31
 8028274:	d505      	bpl.n	8028282 <_dtoa_r+0x4aa>
 8028276:	e9d7 2300 	ldrd	r2, r3, [r7]
 802827a:	f7d8 f9cd 	bl	8000618 <__aeabi_dmul>
 802827e:	3501      	adds	r5, #1
 8028280:	2301      	movs	r3, #1
 8028282:	1076      	asrs	r6, r6, #1
 8028284:	3708      	adds	r7, #8
 8028286:	e772      	b.n	802816e <_dtoa_r+0x396>
 8028288:	2502      	movs	r5, #2
 802828a:	e774      	b.n	8028176 <_dtoa_r+0x39e>
 802828c:	f8cd a020 	str.w	sl, [sp, #32]
 8028290:	464f      	mov	r7, r9
 8028292:	e791      	b.n	80281b8 <_dtoa_r+0x3e0>
 8028294:	4b4d      	ldr	r3, [pc, #308]	; (80283cc <_dtoa_r+0x5f4>)
 8028296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802829a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282a0:	2b00      	cmp	r3, #0
 80282a2:	d047      	beq.n	8028334 <_dtoa_r+0x55c>
 80282a4:	4602      	mov	r2, r0
 80282a6:	460b      	mov	r3, r1
 80282a8:	2000      	movs	r0, #0
 80282aa:	494e      	ldr	r1, [pc, #312]	; (80283e4 <_dtoa_r+0x60c>)
 80282ac:	f7d8 fade 	bl	800086c <__aeabi_ddiv>
 80282b0:	462a      	mov	r2, r5
 80282b2:	4633      	mov	r3, r6
 80282b4:	f7d7 fff8 	bl	80002a8 <__aeabi_dsub>
 80282b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80282bc:	465d      	mov	r5, fp
 80282be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80282c2:	f7d8 fc59 	bl	8000b78 <__aeabi_d2iz>
 80282c6:	4606      	mov	r6, r0
 80282c8:	f7d8 f93c 	bl	8000544 <__aeabi_i2d>
 80282cc:	4602      	mov	r2, r0
 80282ce:	460b      	mov	r3, r1
 80282d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80282d4:	f7d7 ffe8 	bl	80002a8 <__aeabi_dsub>
 80282d8:	3630      	adds	r6, #48	; 0x30
 80282da:	f805 6b01 	strb.w	r6, [r5], #1
 80282de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80282e2:	e9cd 0100 	strd	r0, r1, [sp]
 80282e6:	f7d8 fc09 	bl	8000afc <__aeabi_dcmplt>
 80282ea:	2800      	cmp	r0, #0
 80282ec:	d163      	bne.n	80283b6 <_dtoa_r+0x5de>
 80282ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80282f2:	2000      	movs	r0, #0
 80282f4:	4937      	ldr	r1, [pc, #220]	; (80283d4 <_dtoa_r+0x5fc>)
 80282f6:	f7d7 ffd7 	bl	80002a8 <__aeabi_dsub>
 80282fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80282fe:	f7d8 fbfd 	bl	8000afc <__aeabi_dcmplt>
 8028302:	2800      	cmp	r0, #0
 8028304:	f040 80b7 	bne.w	8028476 <_dtoa_r+0x69e>
 8028308:	eba5 030b 	sub.w	r3, r5, fp
 802830c:	429f      	cmp	r7, r3
 802830e:	f77f af7c 	ble.w	802820a <_dtoa_r+0x432>
 8028312:	2200      	movs	r2, #0
 8028314:	4b30      	ldr	r3, [pc, #192]	; (80283d8 <_dtoa_r+0x600>)
 8028316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802831a:	f7d8 f97d 	bl	8000618 <__aeabi_dmul>
 802831e:	2200      	movs	r2, #0
 8028320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028324:	4b2c      	ldr	r3, [pc, #176]	; (80283d8 <_dtoa_r+0x600>)
 8028326:	e9dd 0100 	ldrd	r0, r1, [sp]
 802832a:	f7d8 f975 	bl	8000618 <__aeabi_dmul>
 802832e:	e9cd 0100 	strd	r0, r1, [sp]
 8028332:	e7c4      	b.n	80282be <_dtoa_r+0x4e6>
 8028334:	462a      	mov	r2, r5
 8028336:	4633      	mov	r3, r6
 8028338:	f7d8 f96e 	bl	8000618 <__aeabi_dmul>
 802833c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028340:	eb0b 0507 	add.w	r5, fp, r7
 8028344:	465e      	mov	r6, fp
 8028346:	e9dd 0100 	ldrd	r0, r1, [sp]
 802834a:	f7d8 fc15 	bl	8000b78 <__aeabi_d2iz>
 802834e:	4607      	mov	r7, r0
 8028350:	f7d8 f8f8 	bl	8000544 <__aeabi_i2d>
 8028354:	3730      	adds	r7, #48	; 0x30
 8028356:	4602      	mov	r2, r0
 8028358:	460b      	mov	r3, r1
 802835a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802835e:	f7d7 ffa3 	bl	80002a8 <__aeabi_dsub>
 8028362:	f806 7b01 	strb.w	r7, [r6], #1
 8028366:	42ae      	cmp	r6, r5
 8028368:	e9cd 0100 	strd	r0, r1, [sp]
 802836c:	f04f 0200 	mov.w	r2, #0
 8028370:	d126      	bne.n	80283c0 <_dtoa_r+0x5e8>
 8028372:	4b1c      	ldr	r3, [pc, #112]	; (80283e4 <_dtoa_r+0x60c>)
 8028374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028378:	f7d7 ff98 	bl	80002ac <__adddf3>
 802837c:	4602      	mov	r2, r0
 802837e:	460b      	mov	r3, r1
 8028380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028384:	f7d8 fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 8028388:	2800      	cmp	r0, #0
 802838a:	d174      	bne.n	8028476 <_dtoa_r+0x69e>
 802838c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8028390:	2000      	movs	r0, #0
 8028392:	4914      	ldr	r1, [pc, #80]	; (80283e4 <_dtoa_r+0x60c>)
 8028394:	f7d7 ff88 	bl	80002a8 <__aeabi_dsub>
 8028398:	4602      	mov	r2, r0
 802839a:	460b      	mov	r3, r1
 802839c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80283a0:	f7d8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80283a4:	2800      	cmp	r0, #0
 80283a6:	f43f af30 	beq.w	802820a <_dtoa_r+0x432>
 80283aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80283ae:	2b30      	cmp	r3, #48	; 0x30
 80283b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80283b4:	d002      	beq.n	80283bc <_dtoa_r+0x5e4>
 80283b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80283ba:	e04a      	b.n	8028452 <_dtoa_r+0x67a>
 80283bc:	4615      	mov	r5, r2
 80283be:	e7f4      	b.n	80283aa <_dtoa_r+0x5d2>
 80283c0:	4b05      	ldr	r3, [pc, #20]	; (80283d8 <_dtoa_r+0x600>)
 80283c2:	f7d8 f929 	bl	8000618 <__aeabi_dmul>
 80283c6:	e9cd 0100 	strd	r0, r1, [sp]
 80283ca:	e7bc      	b.n	8028346 <_dtoa_r+0x56e>
 80283cc:	08045018 	.word	0x08045018
 80283d0:	08044ff0 	.word	0x08044ff0
 80283d4:	3ff00000 	.word	0x3ff00000
 80283d8:	40240000 	.word	0x40240000
 80283dc:	401c0000 	.word	0x401c0000
 80283e0:	40140000 	.word	0x40140000
 80283e4:	3fe00000 	.word	0x3fe00000
 80283e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80283ec:	465d      	mov	r5, fp
 80283ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80283f2:	4630      	mov	r0, r6
 80283f4:	4639      	mov	r1, r7
 80283f6:	f7d8 fa39 	bl	800086c <__aeabi_ddiv>
 80283fa:	f7d8 fbbd 	bl	8000b78 <__aeabi_d2iz>
 80283fe:	4680      	mov	r8, r0
 8028400:	f7d8 f8a0 	bl	8000544 <__aeabi_i2d>
 8028404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028408:	f7d8 f906 	bl	8000618 <__aeabi_dmul>
 802840c:	4602      	mov	r2, r0
 802840e:	460b      	mov	r3, r1
 8028410:	4630      	mov	r0, r6
 8028412:	4639      	mov	r1, r7
 8028414:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8028418:	f7d7 ff46 	bl	80002a8 <__aeabi_dsub>
 802841c:	f805 6b01 	strb.w	r6, [r5], #1
 8028420:	eba5 060b 	sub.w	r6, r5, fp
 8028424:	45b1      	cmp	r9, r6
 8028426:	4602      	mov	r2, r0
 8028428:	460b      	mov	r3, r1
 802842a:	d139      	bne.n	80284a0 <_dtoa_r+0x6c8>
 802842c:	f7d7 ff3e 	bl	80002ac <__adddf3>
 8028430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028434:	4606      	mov	r6, r0
 8028436:	460f      	mov	r7, r1
 8028438:	f7d8 fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 802843c:	b9c8      	cbnz	r0, 8028472 <_dtoa_r+0x69a>
 802843e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028442:	4630      	mov	r0, r6
 8028444:	4639      	mov	r1, r7
 8028446:	f7d8 fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 802844a:	b110      	cbz	r0, 8028452 <_dtoa_r+0x67a>
 802844c:	f018 0f01 	tst.w	r8, #1
 8028450:	d10f      	bne.n	8028472 <_dtoa_r+0x69a>
 8028452:	9904      	ldr	r1, [sp, #16]
 8028454:	4620      	mov	r0, r4
 8028456:	f000 fabb 	bl	80289d0 <_Bfree>
 802845a:	2300      	movs	r3, #0
 802845c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802845e:	702b      	strb	r3, [r5, #0]
 8028460:	f10a 0301 	add.w	r3, sl, #1
 8028464:	6013      	str	r3, [r2, #0]
 8028466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028468:	2b00      	cmp	r3, #0
 802846a:	f000 8241 	beq.w	80288f0 <_dtoa_r+0xb18>
 802846e:	601d      	str	r5, [r3, #0]
 8028470:	e23e      	b.n	80288f0 <_dtoa_r+0xb18>
 8028472:	f8cd a020 	str.w	sl, [sp, #32]
 8028476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802847a:	2a39      	cmp	r2, #57	; 0x39
 802847c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8028480:	d108      	bne.n	8028494 <_dtoa_r+0x6bc>
 8028482:	459b      	cmp	fp, r3
 8028484:	d10a      	bne.n	802849c <_dtoa_r+0x6c4>
 8028486:	9b08      	ldr	r3, [sp, #32]
 8028488:	3301      	adds	r3, #1
 802848a:	9308      	str	r3, [sp, #32]
 802848c:	2330      	movs	r3, #48	; 0x30
 802848e:	f88b 3000 	strb.w	r3, [fp]
 8028492:	465b      	mov	r3, fp
 8028494:	781a      	ldrb	r2, [r3, #0]
 8028496:	3201      	adds	r2, #1
 8028498:	701a      	strb	r2, [r3, #0]
 802849a:	e78c      	b.n	80283b6 <_dtoa_r+0x5de>
 802849c:	461d      	mov	r5, r3
 802849e:	e7ea      	b.n	8028476 <_dtoa_r+0x69e>
 80284a0:	2200      	movs	r2, #0
 80284a2:	4b9b      	ldr	r3, [pc, #620]	; (8028710 <_dtoa_r+0x938>)
 80284a4:	f7d8 f8b8 	bl	8000618 <__aeabi_dmul>
 80284a8:	2200      	movs	r2, #0
 80284aa:	2300      	movs	r3, #0
 80284ac:	4606      	mov	r6, r0
 80284ae:	460f      	mov	r7, r1
 80284b0:	f7d8 fb1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80284b4:	2800      	cmp	r0, #0
 80284b6:	d09a      	beq.n	80283ee <_dtoa_r+0x616>
 80284b8:	e7cb      	b.n	8028452 <_dtoa_r+0x67a>
 80284ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80284bc:	2a00      	cmp	r2, #0
 80284be:	f000 808b 	beq.w	80285d8 <_dtoa_r+0x800>
 80284c2:	9a06      	ldr	r2, [sp, #24]
 80284c4:	2a01      	cmp	r2, #1
 80284c6:	dc6e      	bgt.n	80285a6 <_dtoa_r+0x7ce>
 80284c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80284ca:	2a00      	cmp	r2, #0
 80284cc:	d067      	beq.n	802859e <_dtoa_r+0x7c6>
 80284ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80284d2:	9f07      	ldr	r7, [sp, #28]
 80284d4:	9d05      	ldr	r5, [sp, #20]
 80284d6:	9a05      	ldr	r2, [sp, #20]
 80284d8:	2101      	movs	r1, #1
 80284da:	441a      	add	r2, r3
 80284dc:	4620      	mov	r0, r4
 80284de:	9205      	str	r2, [sp, #20]
 80284e0:	4498      	add	r8, r3
 80284e2:	f000 fb15 	bl	8028b10 <__i2b>
 80284e6:	4606      	mov	r6, r0
 80284e8:	2d00      	cmp	r5, #0
 80284ea:	dd0c      	ble.n	8028506 <_dtoa_r+0x72e>
 80284ec:	f1b8 0f00 	cmp.w	r8, #0
 80284f0:	dd09      	ble.n	8028506 <_dtoa_r+0x72e>
 80284f2:	4545      	cmp	r5, r8
 80284f4:	9a05      	ldr	r2, [sp, #20]
 80284f6:	462b      	mov	r3, r5
 80284f8:	bfa8      	it	ge
 80284fa:	4643      	movge	r3, r8
 80284fc:	1ad2      	subs	r2, r2, r3
 80284fe:	9205      	str	r2, [sp, #20]
 8028500:	1aed      	subs	r5, r5, r3
 8028502:	eba8 0803 	sub.w	r8, r8, r3
 8028506:	9b07      	ldr	r3, [sp, #28]
 8028508:	b1eb      	cbz	r3, 8028546 <_dtoa_r+0x76e>
 802850a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802850c:	2b00      	cmp	r3, #0
 802850e:	d067      	beq.n	80285e0 <_dtoa_r+0x808>
 8028510:	b18f      	cbz	r7, 8028536 <_dtoa_r+0x75e>
 8028512:	4631      	mov	r1, r6
 8028514:	463a      	mov	r2, r7
 8028516:	4620      	mov	r0, r4
 8028518:	f000 fb9a 	bl	8028c50 <__pow5mult>
 802851c:	9a04      	ldr	r2, [sp, #16]
 802851e:	4601      	mov	r1, r0
 8028520:	4606      	mov	r6, r0
 8028522:	4620      	mov	r0, r4
 8028524:	f000 fafd 	bl	8028b22 <__multiply>
 8028528:	9904      	ldr	r1, [sp, #16]
 802852a:	9008      	str	r0, [sp, #32]
 802852c:	4620      	mov	r0, r4
 802852e:	f000 fa4f 	bl	80289d0 <_Bfree>
 8028532:	9b08      	ldr	r3, [sp, #32]
 8028534:	9304      	str	r3, [sp, #16]
 8028536:	9b07      	ldr	r3, [sp, #28]
 8028538:	1bda      	subs	r2, r3, r7
 802853a:	d004      	beq.n	8028546 <_dtoa_r+0x76e>
 802853c:	9904      	ldr	r1, [sp, #16]
 802853e:	4620      	mov	r0, r4
 8028540:	f000 fb86 	bl	8028c50 <__pow5mult>
 8028544:	9004      	str	r0, [sp, #16]
 8028546:	2101      	movs	r1, #1
 8028548:	4620      	mov	r0, r4
 802854a:	f000 fae1 	bl	8028b10 <__i2b>
 802854e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028550:	4607      	mov	r7, r0
 8028552:	2b00      	cmp	r3, #0
 8028554:	f000 81d0 	beq.w	80288f8 <_dtoa_r+0xb20>
 8028558:	461a      	mov	r2, r3
 802855a:	4601      	mov	r1, r0
 802855c:	4620      	mov	r0, r4
 802855e:	f000 fb77 	bl	8028c50 <__pow5mult>
 8028562:	9b06      	ldr	r3, [sp, #24]
 8028564:	2b01      	cmp	r3, #1
 8028566:	4607      	mov	r7, r0
 8028568:	dc40      	bgt.n	80285ec <_dtoa_r+0x814>
 802856a:	9b00      	ldr	r3, [sp, #0]
 802856c:	2b00      	cmp	r3, #0
 802856e:	d139      	bne.n	80285e4 <_dtoa_r+0x80c>
 8028570:	9b01      	ldr	r3, [sp, #4]
 8028572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8028576:	2b00      	cmp	r3, #0
 8028578:	d136      	bne.n	80285e8 <_dtoa_r+0x810>
 802857a:	9b01      	ldr	r3, [sp, #4]
 802857c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028580:	0d1b      	lsrs	r3, r3, #20
 8028582:	051b      	lsls	r3, r3, #20
 8028584:	b12b      	cbz	r3, 8028592 <_dtoa_r+0x7ba>
 8028586:	9b05      	ldr	r3, [sp, #20]
 8028588:	3301      	adds	r3, #1
 802858a:	9305      	str	r3, [sp, #20]
 802858c:	f108 0801 	add.w	r8, r8, #1
 8028590:	2301      	movs	r3, #1
 8028592:	9307      	str	r3, [sp, #28]
 8028594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028596:	2b00      	cmp	r3, #0
 8028598:	d12a      	bne.n	80285f0 <_dtoa_r+0x818>
 802859a:	2001      	movs	r0, #1
 802859c:	e030      	b.n	8028600 <_dtoa_r+0x828>
 802859e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80285a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80285a4:	e795      	b.n	80284d2 <_dtoa_r+0x6fa>
 80285a6:	9b07      	ldr	r3, [sp, #28]
 80285a8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80285ac:	42bb      	cmp	r3, r7
 80285ae:	bfbf      	itttt	lt
 80285b0:	9b07      	ldrlt	r3, [sp, #28]
 80285b2:	9707      	strlt	r7, [sp, #28]
 80285b4:	1afa      	sublt	r2, r7, r3
 80285b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80285b8:	bfbb      	ittet	lt
 80285ba:	189b      	addlt	r3, r3, r2
 80285bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80285be:	1bdf      	subge	r7, r3, r7
 80285c0:	2700      	movlt	r7, #0
 80285c2:	f1b9 0f00 	cmp.w	r9, #0
 80285c6:	bfb5      	itete	lt
 80285c8:	9b05      	ldrlt	r3, [sp, #20]
 80285ca:	9d05      	ldrge	r5, [sp, #20]
 80285cc:	eba3 0509 	sublt.w	r5, r3, r9
 80285d0:	464b      	movge	r3, r9
 80285d2:	bfb8      	it	lt
 80285d4:	2300      	movlt	r3, #0
 80285d6:	e77e      	b.n	80284d6 <_dtoa_r+0x6fe>
 80285d8:	9f07      	ldr	r7, [sp, #28]
 80285da:	9d05      	ldr	r5, [sp, #20]
 80285dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80285de:	e783      	b.n	80284e8 <_dtoa_r+0x710>
 80285e0:	9a07      	ldr	r2, [sp, #28]
 80285e2:	e7ab      	b.n	802853c <_dtoa_r+0x764>
 80285e4:	2300      	movs	r3, #0
 80285e6:	e7d4      	b.n	8028592 <_dtoa_r+0x7ba>
 80285e8:	9b00      	ldr	r3, [sp, #0]
 80285ea:	e7d2      	b.n	8028592 <_dtoa_r+0x7ba>
 80285ec:	2300      	movs	r3, #0
 80285ee:	9307      	str	r3, [sp, #28]
 80285f0:	693b      	ldr	r3, [r7, #16]
 80285f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80285f6:	6918      	ldr	r0, [r3, #16]
 80285f8:	f000 fa3c 	bl	8028a74 <__hi0bits>
 80285fc:	f1c0 0020 	rsb	r0, r0, #32
 8028600:	4440      	add	r0, r8
 8028602:	f010 001f 	ands.w	r0, r0, #31
 8028606:	d047      	beq.n	8028698 <_dtoa_r+0x8c0>
 8028608:	f1c0 0320 	rsb	r3, r0, #32
 802860c:	2b04      	cmp	r3, #4
 802860e:	dd3b      	ble.n	8028688 <_dtoa_r+0x8b0>
 8028610:	9b05      	ldr	r3, [sp, #20]
 8028612:	f1c0 001c 	rsb	r0, r0, #28
 8028616:	4403      	add	r3, r0
 8028618:	9305      	str	r3, [sp, #20]
 802861a:	4405      	add	r5, r0
 802861c:	4480      	add	r8, r0
 802861e:	9b05      	ldr	r3, [sp, #20]
 8028620:	2b00      	cmp	r3, #0
 8028622:	dd05      	ble.n	8028630 <_dtoa_r+0x858>
 8028624:	461a      	mov	r2, r3
 8028626:	9904      	ldr	r1, [sp, #16]
 8028628:	4620      	mov	r0, r4
 802862a:	f000 fb5f 	bl	8028cec <__lshift>
 802862e:	9004      	str	r0, [sp, #16]
 8028630:	f1b8 0f00 	cmp.w	r8, #0
 8028634:	dd05      	ble.n	8028642 <_dtoa_r+0x86a>
 8028636:	4639      	mov	r1, r7
 8028638:	4642      	mov	r2, r8
 802863a:	4620      	mov	r0, r4
 802863c:	f000 fb56 	bl	8028cec <__lshift>
 8028640:	4607      	mov	r7, r0
 8028642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028644:	b353      	cbz	r3, 802869c <_dtoa_r+0x8c4>
 8028646:	4639      	mov	r1, r7
 8028648:	9804      	ldr	r0, [sp, #16]
 802864a:	f000 fba3 	bl	8028d94 <__mcmp>
 802864e:	2800      	cmp	r0, #0
 8028650:	da24      	bge.n	802869c <_dtoa_r+0x8c4>
 8028652:	2300      	movs	r3, #0
 8028654:	220a      	movs	r2, #10
 8028656:	9904      	ldr	r1, [sp, #16]
 8028658:	4620      	mov	r0, r4
 802865a:	f000 f9d0 	bl	80289fe <__multadd>
 802865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028660:	9004      	str	r0, [sp, #16]
 8028662:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8028666:	2b00      	cmp	r3, #0
 8028668:	f000 814d 	beq.w	8028906 <_dtoa_r+0xb2e>
 802866c:	2300      	movs	r3, #0
 802866e:	4631      	mov	r1, r6
 8028670:	220a      	movs	r2, #10
 8028672:	4620      	mov	r0, r4
 8028674:	f000 f9c3 	bl	80289fe <__multadd>
 8028678:	9b02      	ldr	r3, [sp, #8]
 802867a:	2b00      	cmp	r3, #0
 802867c:	4606      	mov	r6, r0
 802867e:	dc4f      	bgt.n	8028720 <_dtoa_r+0x948>
 8028680:	9b06      	ldr	r3, [sp, #24]
 8028682:	2b02      	cmp	r3, #2
 8028684:	dd4c      	ble.n	8028720 <_dtoa_r+0x948>
 8028686:	e011      	b.n	80286ac <_dtoa_r+0x8d4>
 8028688:	d0c9      	beq.n	802861e <_dtoa_r+0x846>
 802868a:	9a05      	ldr	r2, [sp, #20]
 802868c:	331c      	adds	r3, #28
 802868e:	441a      	add	r2, r3
 8028690:	9205      	str	r2, [sp, #20]
 8028692:	441d      	add	r5, r3
 8028694:	4498      	add	r8, r3
 8028696:	e7c2      	b.n	802861e <_dtoa_r+0x846>
 8028698:	4603      	mov	r3, r0
 802869a:	e7f6      	b.n	802868a <_dtoa_r+0x8b2>
 802869c:	f1b9 0f00 	cmp.w	r9, #0
 80286a0:	dc38      	bgt.n	8028714 <_dtoa_r+0x93c>
 80286a2:	9b06      	ldr	r3, [sp, #24]
 80286a4:	2b02      	cmp	r3, #2
 80286a6:	dd35      	ble.n	8028714 <_dtoa_r+0x93c>
 80286a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80286ac:	9b02      	ldr	r3, [sp, #8]
 80286ae:	b963      	cbnz	r3, 80286ca <_dtoa_r+0x8f2>
 80286b0:	4639      	mov	r1, r7
 80286b2:	2205      	movs	r2, #5
 80286b4:	4620      	mov	r0, r4
 80286b6:	f000 f9a2 	bl	80289fe <__multadd>
 80286ba:	4601      	mov	r1, r0
 80286bc:	4607      	mov	r7, r0
 80286be:	9804      	ldr	r0, [sp, #16]
 80286c0:	f000 fb68 	bl	8028d94 <__mcmp>
 80286c4:	2800      	cmp	r0, #0
 80286c6:	f73f adcc 	bgt.w	8028262 <_dtoa_r+0x48a>
 80286ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80286cc:	465d      	mov	r5, fp
 80286ce:	ea6f 0a03 	mvn.w	sl, r3
 80286d2:	f04f 0900 	mov.w	r9, #0
 80286d6:	4639      	mov	r1, r7
 80286d8:	4620      	mov	r0, r4
 80286da:	f000 f979 	bl	80289d0 <_Bfree>
 80286de:	2e00      	cmp	r6, #0
 80286e0:	f43f aeb7 	beq.w	8028452 <_dtoa_r+0x67a>
 80286e4:	f1b9 0f00 	cmp.w	r9, #0
 80286e8:	d005      	beq.n	80286f6 <_dtoa_r+0x91e>
 80286ea:	45b1      	cmp	r9, r6
 80286ec:	d003      	beq.n	80286f6 <_dtoa_r+0x91e>
 80286ee:	4649      	mov	r1, r9
 80286f0:	4620      	mov	r0, r4
 80286f2:	f000 f96d 	bl	80289d0 <_Bfree>
 80286f6:	4631      	mov	r1, r6
 80286f8:	4620      	mov	r0, r4
 80286fa:	f000 f969 	bl	80289d0 <_Bfree>
 80286fe:	e6a8      	b.n	8028452 <_dtoa_r+0x67a>
 8028700:	2700      	movs	r7, #0
 8028702:	463e      	mov	r6, r7
 8028704:	e7e1      	b.n	80286ca <_dtoa_r+0x8f2>
 8028706:	f8dd a020 	ldr.w	sl, [sp, #32]
 802870a:	463e      	mov	r6, r7
 802870c:	e5a9      	b.n	8028262 <_dtoa_r+0x48a>
 802870e:	bf00      	nop
 8028710:	40240000 	.word	0x40240000
 8028714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028716:	f8cd 9008 	str.w	r9, [sp, #8]
 802871a:	2b00      	cmp	r3, #0
 802871c:	f000 80fa 	beq.w	8028914 <_dtoa_r+0xb3c>
 8028720:	2d00      	cmp	r5, #0
 8028722:	dd05      	ble.n	8028730 <_dtoa_r+0x958>
 8028724:	4631      	mov	r1, r6
 8028726:	462a      	mov	r2, r5
 8028728:	4620      	mov	r0, r4
 802872a:	f000 fadf 	bl	8028cec <__lshift>
 802872e:	4606      	mov	r6, r0
 8028730:	9b07      	ldr	r3, [sp, #28]
 8028732:	2b00      	cmp	r3, #0
 8028734:	d04c      	beq.n	80287d0 <_dtoa_r+0x9f8>
 8028736:	6871      	ldr	r1, [r6, #4]
 8028738:	4620      	mov	r0, r4
 802873a:	f000 f915 	bl	8028968 <_Balloc>
 802873e:	6932      	ldr	r2, [r6, #16]
 8028740:	3202      	adds	r2, #2
 8028742:	4605      	mov	r5, r0
 8028744:	0092      	lsls	r2, r2, #2
 8028746:	f106 010c 	add.w	r1, r6, #12
 802874a:	300c      	adds	r0, #12
 802874c:	f7fe fd28 	bl	80271a0 <memcpy>
 8028750:	2201      	movs	r2, #1
 8028752:	4629      	mov	r1, r5
 8028754:	4620      	mov	r0, r4
 8028756:	f000 fac9 	bl	8028cec <__lshift>
 802875a:	9b00      	ldr	r3, [sp, #0]
 802875c:	f8cd b014 	str.w	fp, [sp, #20]
 8028760:	f003 0301 	and.w	r3, r3, #1
 8028764:	46b1      	mov	r9, r6
 8028766:	9307      	str	r3, [sp, #28]
 8028768:	4606      	mov	r6, r0
 802876a:	4639      	mov	r1, r7
 802876c:	9804      	ldr	r0, [sp, #16]
 802876e:	f7ff faa7 	bl	8027cc0 <quorem>
 8028772:	4649      	mov	r1, r9
 8028774:	4605      	mov	r5, r0
 8028776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802877a:	9804      	ldr	r0, [sp, #16]
 802877c:	f000 fb0a 	bl	8028d94 <__mcmp>
 8028780:	4632      	mov	r2, r6
 8028782:	9000      	str	r0, [sp, #0]
 8028784:	4639      	mov	r1, r7
 8028786:	4620      	mov	r0, r4
 8028788:	f000 fb1e 	bl	8028dc8 <__mdiff>
 802878c:	68c3      	ldr	r3, [r0, #12]
 802878e:	4602      	mov	r2, r0
 8028790:	bb03      	cbnz	r3, 80287d4 <_dtoa_r+0x9fc>
 8028792:	4601      	mov	r1, r0
 8028794:	9008      	str	r0, [sp, #32]
 8028796:	9804      	ldr	r0, [sp, #16]
 8028798:	f000 fafc 	bl	8028d94 <__mcmp>
 802879c:	9a08      	ldr	r2, [sp, #32]
 802879e:	4603      	mov	r3, r0
 80287a0:	4611      	mov	r1, r2
 80287a2:	4620      	mov	r0, r4
 80287a4:	9308      	str	r3, [sp, #32]
 80287a6:	f000 f913 	bl	80289d0 <_Bfree>
 80287aa:	9b08      	ldr	r3, [sp, #32]
 80287ac:	b9a3      	cbnz	r3, 80287d8 <_dtoa_r+0xa00>
 80287ae:	9a06      	ldr	r2, [sp, #24]
 80287b0:	b992      	cbnz	r2, 80287d8 <_dtoa_r+0xa00>
 80287b2:	9a07      	ldr	r2, [sp, #28]
 80287b4:	b982      	cbnz	r2, 80287d8 <_dtoa_r+0xa00>
 80287b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80287ba:	d029      	beq.n	8028810 <_dtoa_r+0xa38>
 80287bc:	9b00      	ldr	r3, [sp, #0]
 80287be:	2b00      	cmp	r3, #0
 80287c0:	dd01      	ble.n	80287c6 <_dtoa_r+0x9ee>
 80287c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80287c6:	9b05      	ldr	r3, [sp, #20]
 80287c8:	1c5d      	adds	r5, r3, #1
 80287ca:	f883 8000 	strb.w	r8, [r3]
 80287ce:	e782      	b.n	80286d6 <_dtoa_r+0x8fe>
 80287d0:	4630      	mov	r0, r6
 80287d2:	e7c2      	b.n	802875a <_dtoa_r+0x982>
 80287d4:	2301      	movs	r3, #1
 80287d6:	e7e3      	b.n	80287a0 <_dtoa_r+0x9c8>
 80287d8:	9a00      	ldr	r2, [sp, #0]
 80287da:	2a00      	cmp	r2, #0
 80287dc:	db04      	blt.n	80287e8 <_dtoa_r+0xa10>
 80287de:	d125      	bne.n	802882c <_dtoa_r+0xa54>
 80287e0:	9a06      	ldr	r2, [sp, #24]
 80287e2:	bb1a      	cbnz	r2, 802882c <_dtoa_r+0xa54>
 80287e4:	9a07      	ldr	r2, [sp, #28]
 80287e6:	bb0a      	cbnz	r2, 802882c <_dtoa_r+0xa54>
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	ddec      	ble.n	80287c6 <_dtoa_r+0x9ee>
 80287ec:	2201      	movs	r2, #1
 80287ee:	9904      	ldr	r1, [sp, #16]
 80287f0:	4620      	mov	r0, r4
 80287f2:	f000 fa7b 	bl	8028cec <__lshift>
 80287f6:	4639      	mov	r1, r7
 80287f8:	9004      	str	r0, [sp, #16]
 80287fa:	f000 facb 	bl	8028d94 <__mcmp>
 80287fe:	2800      	cmp	r0, #0
 8028800:	dc03      	bgt.n	802880a <_dtoa_r+0xa32>
 8028802:	d1e0      	bne.n	80287c6 <_dtoa_r+0x9ee>
 8028804:	f018 0f01 	tst.w	r8, #1
 8028808:	d0dd      	beq.n	80287c6 <_dtoa_r+0x9ee>
 802880a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802880e:	d1d8      	bne.n	80287c2 <_dtoa_r+0x9ea>
 8028810:	9b05      	ldr	r3, [sp, #20]
 8028812:	9a05      	ldr	r2, [sp, #20]
 8028814:	1c5d      	adds	r5, r3, #1
 8028816:	2339      	movs	r3, #57	; 0x39
 8028818:	7013      	strb	r3, [r2, #0]
 802881a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802881e:	2b39      	cmp	r3, #57	; 0x39
 8028820:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8028824:	d04f      	beq.n	80288c6 <_dtoa_r+0xaee>
 8028826:	3301      	adds	r3, #1
 8028828:	7013      	strb	r3, [r2, #0]
 802882a:	e754      	b.n	80286d6 <_dtoa_r+0x8fe>
 802882c:	9a05      	ldr	r2, [sp, #20]
 802882e:	2b00      	cmp	r3, #0
 8028830:	f102 0501 	add.w	r5, r2, #1
 8028834:	dd06      	ble.n	8028844 <_dtoa_r+0xa6c>
 8028836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802883a:	d0e9      	beq.n	8028810 <_dtoa_r+0xa38>
 802883c:	f108 0801 	add.w	r8, r8, #1
 8028840:	9b05      	ldr	r3, [sp, #20]
 8028842:	e7c2      	b.n	80287ca <_dtoa_r+0x9f2>
 8028844:	9a02      	ldr	r2, [sp, #8]
 8028846:	f805 8c01 	strb.w	r8, [r5, #-1]
 802884a:	eba5 030b 	sub.w	r3, r5, fp
 802884e:	4293      	cmp	r3, r2
 8028850:	d021      	beq.n	8028896 <_dtoa_r+0xabe>
 8028852:	2300      	movs	r3, #0
 8028854:	220a      	movs	r2, #10
 8028856:	9904      	ldr	r1, [sp, #16]
 8028858:	4620      	mov	r0, r4
 802885a:	f000 f8d0 	bl	80289fe <__multadd>
 802885e:	45b1      	cmp	r9, r6
 8028860:	9004      	str	r0, [sp, #16]
 8028862:	f04f 0300 	mov.w	r3, #0
 8028866:	f04f 020a 	mov.w	r2, #10
 802886a:	4649      	mov	r1, r9
 802886c:	4620      	mov	r0, r4
 802886e:	d105      	bne.n	802887c <_dtoa_r+0xaa4>
 8028870:	f000 f8c5 	bl	80289fe <__multadd>
 8028874:	4681      	mov	r9, r0
 8028876:	4606      	mov	r6, r0
 8028878:	9505      	str	r5, [sp, #20]
 802887a:	e776      	b.n	802876a <_dtoa_r+0x992>
 802887c:	f000 f8bf 	bl	80289fe <__multadd>
 8028880:	4631      	mov	r1, r6
 8028882:	4681      	mov	r9, r0
 8028884:	2300      	movs	r3, #0
 8028886:	220a      	movs	r2, #10
 8028888:	4620      	mov	r0, r4
 802888a:	f000 f8b8 	bl	80289fe <__multadd>
 802888e:	4606      	mov	r6, r0
 8028890:	e7f2      	b.n	8028878 <_dtoa_r+0xaa0>
 8028892:	f04f 0900 	mov.w	r9, #0
 8028896:	2201      	movs	r2, #1
 8028898:	9904      	ldr	r1, [sp, #16]
 802889a:	4620      	mov	r0, r4
 802889c:	f000 fa26 	bl	8028cec <__lshift>
 80288a0:	4639      	mov	r1, r7
 80288a2:	9004      	str	r0, [sp, #16]
 80288a4:	f000 fa76 	bl	8028d94 <__mcmp>
 80288a8:	2800      	cmp	r0, #0
 80288aa:	dcb6      	bgt.n	802881a <_dtoa_r+0xa42>
 80288ac:	d102      	bne.n	80288b4 <_dtoa_r+0xadc>
 80288ae:	f018 0f01 	tst.w	r8, #1
 80288b2:	d1b2      	bne.n	802881a <_dtoa_r+0xa42>
 80288b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80288b8:	2b30      	cmp	r3, #48	; 0x30
 80288ba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80288be:	f47f af0a 	bne.w	80286d6 <_dtoa_r+0x8fe>
 80288c2:	4615      	mov	r5, r2
 80288c4:	e7f6      	b.n	80288b4 <_dtoa_r+0xadc>
 80288c6:	4593      	cmp	fp, r2
 80288c8:	d105      	bne.n	80288d6 <_dtoa_r+0xafe>
 80288ca:	2331      	movs	r3, #49	; 0x31
 80288cc:	f10a 0a01 	add.w	sl, sl, #1
 80288d0:	f88b 3000 	strb.w	r3, [fp]
 80288d4:	e6ff      	b.n	80286d6 <_dtoa_r+0x8fe>
 80288d6:	4615      	mov	r5, r2
 80288d8:	e79f      	b.n	802881a <_dtoa_r+0xa42>
 80288da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8028940 <_dtoa_r+0xb68>
 80288de:	e007      	b.n	80288f0 <_dtoa_r+0xb18>
 80288e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80288e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8028944 <_dtoa_r+0xb6c>
 80288e6:	b11b      	cbz	r3, 80288f0 <_dtoa_r+0xb18>
 80288e8:	f10b 0308 	add.w	r3, fp, #8
 80288ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80288ee:	6013      	str	r3, [r2, #0]
 80288f0:	4658      	mov	r0, fp
 80288f2:	b017      	add	sp, #92	; 0x5c
 80288f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288f8:	9b06      	ldr	r3, [sp, #24]
 80288fa:	2b01      	cmp	r3, #1
 80288fc:	f77f ae35 	ble.w	802856a <_dtoa_r+0x792>
 8028900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028902:	9307      	str	r3, [sp, #28]
 8028904:	e649      	b.n	802859a <_dtoa_r+0x7c2>
 8028906:	9b02      	ldr	r3, [sp, #8]
 8028908:	2b00      	cmp	r3, #0
 802890a:	dc03      	bgt.n	8028914 <_dtoa_r+0xb3c>
 802890c:	9b06      	ldr	r3, [sp, #24]
 802890e:	2b02      	cmp	r3, #2
 8028910:	f73f aecc 	bgt.w	80286ac <_dtoa_r+0x8d4>
 8028914:	465d      	mov	r5, fp
 8028916:	4639      	mov	r1, r7
 8028918:	9804      	ldr	r0, [sp, #16]
 802891a:	f7ff f9d1 	bl	8027cc0 <quorem>
 802891e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8028922:	f805 8b01 	strb.w	r8, [r5], #1
 8028926:	9a02      	ldr	r2, [sp, #8]
 8028928:	eba5 030b 	sub.w	r3, r5, fp
 802892c:	429a      	cmp	r2, r3
 802892e:	ddb0      	ble.n	8028892 <_dtoa_r+0xaba>
 8028930:	2300      	movs	r3, #0
 8028932:	220a      	movs	r2, #10
 8028934:	9904      	ldr	r1, [sp, #16]
 8028936:	4620      	mov	r0, r4
 8028938:	f000 f861 	bl	80289fe <__multadd>
 802893c:	9004      	str	r0, [sp, #16]
 802893e:	e7ea      	b.n	8028916 <_dtoa_r+0xb3e>
 8028940:	08045113 	.word	0x08045113
 8028944:	08044f82 	.word	0x08044f82

08028948 <_localeconv_r>:
 8028948:	4b04      	ldr	r3, [pc, #16]	; (802895c <_localeconv_r+0x14>)
 802894a:	681b      	ldr	r3, [r3, #0]
 802894c:	6a18      	ldr	r0, [r3, #32]
 802894e:	4b04      	ldr	r3, [pc, #16]	; (8028960 <_localeconv_r+0x18>)
 8028950:	2800      	cmp	r0, #0
 8028952:	bf08      	it	eq
 8028954:	4618      	moveq	r0, r3
 8028956:	30f0      	adds	r0, #240	; 0xf0
 8028958:	4770      	bx	lr
 802895a:	bf00      	nop
 802895c:	2000285c 	.word	0x2000285c
 8028960:	200028c0 	.word	0x200028c0

08028964 <__malloc_lock>:
 8028964:	4770      	bx	lr

08028966 <__malloc_unlock>:
 8028966:	4770      	bx	lr

08028968 <_Balloc>:
 8028968:	b570      	push	{r4, r5, r6, lr}
 802896a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802896c:	4604      	mov	r4, r0
 802896e:	460e      	mov	r6, r1
 8028970:	b93d      	cbnz	r5, 8028982 <_Balloc+0x1a>
 8028972:	2010      	movs	r0, #16
 8028974:	f7fe fc04 	bl	8027180 <malloc>
 8028978:	6260      	str	r0, [r4, #36]	; 0x24
 802897a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802897e:	6005      	str	r5, [r0, #0]
 8028980:	60c5      	str	r5, [r0, #12]
 8028982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8028984:	68eb      	ldr	r3, [r5, #12]
 8028986:	b183      	cbz	r3, 80289aa <_Balloc+0x42>
 8028988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802898a:	68db      	ldr	r3, [r3, #12]
 802898c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8028990:	b9b8      	cbnz	r0, 80289c2 <_Balloc+0x5a>
 8028992:	2101      	movs	r1, #1
 8028994:	fa01 f506 	lsl.w	r5, r1, r6
 8028998:	1d6a      	adds	r2, r5, #5
 802899a:	0092      	lsls	r2, r2, #2
 802899c:	4620      	mov	r0, r4
 802899e:	f000 fabf 	bl	8028f20 <_calloc_r>
 80289a2:	b160      	cbz	r0, 80289be <_Balloc+0x56>
 80289a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80289a8:	e00e      	b.n	80289c8 <_Balloc+0x60>
 80289aa:	2221      	movs	r2, #33	; 0x21
 80289ac:	2104      	movs	r1, #4
 80289ae:	4620      	mov	r0, r4
 80289b0:	f000 fab6 	bl	8028f20 <_calloc_r>
 80289b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80289b6:	60e8      	str	r0, [r5, #12]
 80289b8:	68db      	ldr	r3, [r3, #12]
 80289ba:	2b00      	cmp	r3, #0
 80289bc:	d1e4      	bne.n	8028988 <_Balloc+0x20>
 80289be:	2000      	movs	r0, #0
 80289c0:	bd70      	pop	{r4, r5, r6, pc}
 80289c2:	6802      	ldr	r2, [r0, #0]
 80289c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80289c8:	2300      	movs	r3, #0
 80289ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80289ce:	e7f7      	b.n	80289c0 <_Balloc+0x58>

080289d0 <_Bfree>:
 80289d0:	b570      	push	{r4, r5, r6, lr}
 80289d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80289d4:	4606      	mov	r6, r0
 80289d6:	460d      	mov	r5, r1
 80289d8:	b93c      	cbnz	r4, 80289ea <_Bfree+0x1a>
 80289da:	2010      	movs	r0, #16
 80289dc:	f7fe fbd0 	bl	8027180 <malloc>
 80289e0:	6270      	str	r0, [r6, #36]	; 0x24
 80289e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80289e6:	6004      	str	r4, [r0, #0]
 80289e8:	60c4      	str	r4, [r0, #12]
 80289ea:	b13d      	cbz	r5, 80289fc <_Bfree+0x2c>
 80289ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80289ee:	686a      	ldr	r2, [r5, #4]
 80289f0:	68db      	ldr	r3, [r3, #12]
 80289f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80289f6:	6029      	str	r1, [r5, #0]
 80289f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80289fc:	bd70      	pop	{r4, r5, r6, pc}

080289fe <__multadd>:
 80289fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a02:	690d      	ldr	r5, [r1, #16]
 8028a04:	461f      	mov	r7, r3
 8028a06:	4606      	mov	r6, r0
 8028a08:	460c      	mov	r4, r1
 8028a0a:	f101 0c14 	add.w	ip, r1, #20
 8028a0e:	2300      	movs	r3, #0
 8028a10:	f8dc 0000 	ldr.w	r0, [ip]
 8028a14:	b281      	uxth	r1, r0
 8028a16:	fb02 7101 	mla	r1, r2, r1, r7
 8028a1a:	0c0f      	lsrs	r7, r1, #16
 8028a1c:	0c00      	lsrs	r0, r0, #16
 8028a1e:	fb02 7000 	mla	r0, r2, r0, r7
 8028a22:	b289      	uxth	r1, r1
 8028a24:	3301      	adds	r3, #1
 8028a26:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8028a2a:	429d      	cmp	r5, r3
 8028a2c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8028a30:	f84c 1b04 	str.w	r1, [ip], #4
 8028a34:	dcec      	bgt.n	8028a10 <__multadd+0x12>
 8028a36:	b1d7      	cbz	r7, 8028a6e <__multadd+0x70>
 8028a38:	68a3      	ldr	r3, [r4, #8]
 8028a3a:	42ab      	cmp	r3, r5
 8028a3c:	dc12      	bgt.n	8028a64 <__multadd+0x66>
 8028a3e:	6861      	ldr	r1, [r4, #4]
 8028a40:	4630      	mov	r0, r6
 8028a42:	3101      	adds	r1, #1
 8028a44:	f7ff ff90 	bl	8028968 <_Balloc>
 8028a48:	6922      	ldr	r2, [r4, #16]
 8028a4a:	3202      	adds	r2, #2
 8028a4c:	f104 010c 	add.w	r1, r4, #12
 8028a50:	4680      	mov	r8, r0
 8028a52:	0092      	lsls	r2, r2, #2
 8028a54:	300c      	adds	r0, #12
 8028a56:	f7fe fba3 	bl	80271a0 <memcpy>
 8028a5a:	4621      	mov	r1, r4
 8028a5c:	4630      	mov	r0, r6
 8028a5e:	f7ff ffb7 	bl	80289d0 <_Bfree>
 8028a62:	4644      	mov	r4, r8
 8028a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8028a68:	3501      	adds	r5, #1
 8028a6a:	615f      	str	r7, [r3, #20]
 8028a6c:	6125      	str	r5, [r4, #16]
 8028a6e:	4620      	mov	r0, r4
 8028a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028a74 <__hi0bits>:
 8028a74:	0c02      	lsrs	r2, r0, #16
 8028a76:	0412      	lsls	r2, r2, #16
 8028a78:	4603      	mov	r3, r0
 8028a7a:	b9b2      	cbnz	r2, 8028aaa <__hi0bits+0x36>
 8028a7c:	0403      	lsls	r3, r0, #16
 8028a7e:	2010      	movs	r0, #16
 8028a80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8028a84:	bf04      	itt	eq
 8028a86:	021b      	lsleq	r3, r3, #8
 8028a88:	3008      	addeq	r0, #8
 8028a8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8028a8e:	bf04      	itt	eq
 8028a90:	011b      	lsleq	r3, r3, #4
 8028a92:	3004      	addeq	r0, #4
 8028a94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8028a98:	bf04      	itt	eq
 8028a9a:	009b      	lsleq	r3, r3, #2
 8028a9c:	3002      	addeq	r0, #2
 8028a9e:	2b00      	cmp	r3, #0
 8028aa0:	db06      	blt.n	8028ab0 <__hi0bits+0x3c>
 8028aa2:	005b      	lsls	r3, r3, #1
 8028aa4:	d503      	bpl.n	8028aae <__hi0bits+0x3a>
 8028aa6:	3001      	adds	r0, #1
 8028aa8:	4770      	bx	lr
 8028aaa:	2000      	movs	r0, #0
 8028aac:	e7e8      	b.n	8028a80 <__hi0bits+0xc>
 8028aae:	2020      	movs	r0, #32
 8028ab0:	4770      	bx	lr

08028ab2 <__lo0bits>:
 8028ab2:	6803      	ldr	r3, [r0, #0]
 8028ab4:	f013 0207 	ands.w	r2, r3, #7
 8028ab8:	4601      	mov	r1, r0
 8028aba:	d00b      	beq.n	8028ad4 <__lo0bits+0x22>
 8028abc:	07da      	lsls	r2, r3, #31
 8028abe:	d423      	bmi.n	8028b08 <__lo0bits+0x56>
 8028ac0:	0798      	lsls	r0, r3, #30
 8028ac2:	bf49      	itett	mi
 8028ac4:	085b      	lsrmi	r3, r3, #1
 8028ac6:	089b      	lsrpl	r3, r3, #2
 8028ac8:	2001      	movmi	r0, #1
 8028aca:	600b      	strmi	r3, [r1, #0]
 8028acc:	bf5c      	itt	pl
 8028ace:	600b      	strpl	r3, [r1, #0]
 8028ad0:	2002      	movpl	r0, #2
 8028ad2:	4770      	bx	lr
 8028ad4:	b298      	uxth	r0, r3
 8028ad6:	b9a8      	cbnz	r0, 8028b04 <__lo0bits+0x52>
 8028ad8:	0c1b      	lsrs	r3, r3, #16
 8028ada:	2010      	movs	r0, #16
 8028adc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8028ae0:	bf04      	itt	eq
 8028ae2:	0a1b      	lsreq	r3, r3, #8
 8028ae4:	3008      	addeq	r0, #8
 8028ae6:	071a      	lsls	r2, r3, #28
 8028ae8:	bf04      	itt	eq
 8028aea:	091b      	lsreq	r3, r3, #4
 8028aec:	3004      	addeq	r0, #4
 8028aee:	079a      	lsls	r2, r3, #30
 8028af0:	bf04      	itt	eq
 8028af2:	089b      	lsreq	r3, r3, #2
 8028af4:	3002      	addeq	r0, #2
 8028af6:	07da      	lsls	r2, r3, #31
 8028af8:	d402      	bmi.n	8028b00 <__lo0bits+0x4e>
 8028afa:	085b      	lsrs	r3, r3, #1
 8028afc:	d006      	beq.n	8028b0c <__lo0bits+0x5a>
 8028afe:	3001      	adds	r0, #1
 8028b00:	600b      	str	r3, [r1, #0]
 8028b02:	4770      	bx	lr
 8028b04:	4610      	mov	r0, r2
 8028b06:	e7e9      	b.n	8028adc <__lo0bits+0x2a>
 8028b08:	2000      	movs	r0, #0
 8028b0a:	4770      	bx	lr
 8028b0c:	2020      	movs	r0, #32
 8028b0e:	4770      	bx	lr

08028b10 <__i2b>:
 8028b10:	b510      	push	{r4, lr}
 8028b12:	460c      	mov	r4, r1
 8028b14:	2101      	movs	r1, #1
 8028b16:	f7ff ff27 	bl	8028968 <_Balloc>
 8028b1a:	2201      	movs	r2, #1
 8028b1c:	6144      	str	r4, [r0, #20]
 8028b1e:	6102      	str	r2, [r0, #16]
 8028b20:	bd10      	pop	{r4, pc}

08028b22 <__multiply>:
 8028b22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b26:	4614      	mov	r4, r2
 8028b28:	690a      	ldr	r2, [r1, #16]
 8028b2a:	6923      	ldr	r3, [r4, #16]
 8028b2c:	429a      	cmp	r2, r3
 8028b2e:	bfb8      	it	lt
 8028b30:	460b      	movlt	r3, r1
 8028b32:	4688      	mov	r8, r1
 8028b34:	bfbc      	itt	lt
 8028b36:	46a0      	movlt	r8, r4
 8028b38:	461c      	movlt	r4, r3
 8028b3a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8028b3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028b46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028b4a:	eb07 0609 	add.w	r6, r7, r9
 8028b4e:	42b3      	cmp	r3, r6
 8028b50:	bfb8      	it	lt
 8028b52:	3101      	addlt	r1, #1
 8028b54:	f7ff ff08 	bl	8028968 <_Balloc>
 8028b58:	f100 0514 	add.w	r5, r0, #20
 8028b5c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8028b60:	462b      	mov	r3, r5
 8028b62:	2200      	movs	r2, #0
 8028b64:	4573      	cmp	r3, lr
 8028b66:	d316      	bcc.n	8028b96 <__multiply+0x74>
 8028b68:	f104 0214 	add.w	r2, r4, #20
 8028b6c:	f108 0114 	add.w	r1, r8, #20
 8028b70:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8028b74:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8028b78:	9300      	str	r3, [sp, #0]
 8028b7a:	9b00      	ldr	r3, [sp, #0]
 8028b7c:	9201      	str	r2, [sp, #4]
 8028b7e:	4293      	cmp	r3, r2
 8028b80:	d80c      	bhi.n	8028b9c <__multiply+0x7a>
 8028b82:	2e00      	cmp	r6, #0
 8028b84:	dd03      	ble.n	8028b8e <__multiply+0x6c>
 8028b86:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8028b8a:	2b00      	cmp	r3, #0
 8028b8c:	d05d      	beq.n	8028c4a <__multiply+0x128>
 8028b8e:	6106      	str	r6, [r0, #16]
 8028b90:	b003      	add	sp, #12
 8028b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b96:	f843 2b04 	str.w	r2, [r3], #4
 8028b9a:	e7e3      	b.n	8028b64 <__multiply+0x42>
 8028b9c:	f8b2 b000 	ldrh.w	fp, [r2]
 8028ba0:	f1bb 0f00 	cmp.w	fp, #0
 8028ba4:	d023      	beq.n	8028bee <__multiply+0xcc>
 8028ba6:	4689      	mov	r9, r1
 8028ba8:	46ac      	mov	ip, r5
 8028baa:	f04f 0800 	mov.w	r8, #0
 8028bae:	f859 4b04 	ldr.w	r4, [r9], #4
 8028bb2:	f8dc a000 	ldr.w	sl, [ip]
 8028bb6:	b2a3      	uxth	r3, r4
 8028bb8:	fa1f fa8a 	uxth.w	sl, sl
 8028bbc:	fb0b a303 	mla	r3, fp, r3, sl
 8028bc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8028bc4:	f8dc 4000 	ldr.w	r4, [ip]
 8028bc8:	4443      	add	r3, r8
 8028bca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8028bce:	fb0b 840a 	mla	r4, fp, sl, r8
 8028bd2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8028bd6:	46e2      	mov	sl, ip
 8028bd8:	b29b      	uxth	r3, r3
 8028bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8028bde:	454f      	cmp	r7, r9
 8028be0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8028be4:	f84a 3b04 	str.w	r3, [sl], #4
 8028be8:	d82b      	bhi.n	8028c42 <__multiply+0x120>
 8028bea:	f8cc 8004 	str.w	r8, [ip, #4]
 8028bee:	9b01      	ldr	r3, [sp, #4]
 8028bf0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8028bf4:	3204      	adds	r2, #4
 8028bf6:	f1ba 0f00 	cmp.w	sl, #0
 8028bfa:	d020      	beq.n	8028c3e <__multiply+0x11c>
 8028bfc:	682b      	ldr	r3, [r5, #0]
 8028bfe:	4689      	mov	r9, r1
 8028c00:	46a8      	mov	r8, r5
 8028c02:	f04f 0b00 	mov.w	fp, #0
 8028c06:	f8b9 c000 	ldrh.w	ip, [r9]
 8028c0a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8028c0e:	fb0a 440c 	mla	r4, sl, ip, r4
 8028c12:	445c      	add	r4, fp
 8028c14:	46c4      	mov	ip, r8
 8028c16:	b29b      	uxth	r3, r3
 8028c18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8028c1c:	f84c 3b04 	str.w	r3, [ip], #4
 8028c20:	f859 3b04 	ldr.w	r3, [r9], #4
 8028c24:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8028c28:	0c1b      	lsrs	r3, r3, #16
 8028c2a:	fb0a b303 	mla	r3, sl, r3, fp
 8028c2e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8028c32:	454f      	cmp	r7, r9
 8028c34:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8028c38:	d805      	bhi.n	8028c46 <__multiply+0x124>
 8028c3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8028c3e:	3504      	adds	r5, #4
 8028c40:	e79b      	b.n	8028b7a <__multiply+0x58>
 8028c42:	46d4      	mov	ip, sl
 8028c44:	e7b3      	b.n	8028bae <__multiply+0x8c>
 8028c46:	46e0      	mov	r8, ip
 8028c48:	e7dd      	b.n	8028c06 <__multiply+0xe4>
 8028c4a:	3e01      	subs	r6, #1
 8028c4c:	e799      	b.n	8028b82 <__multiply+0x60>
	...

08028c50 <__pow5mult>:
 8028c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028c54:	4615      	mov	r5, r2
 8028c56:	f012 0203 	ands.w	r2, r2, #3
 8028c5a:	4606      	mov	r6, r0
 8028c5c:	460f      	mov	r7, r1
 8028c5e:	d007      	beq.n	8028c70 <__pow5mult+0x20>
 8028c60:	3a01      	subs	r2, #1
 8028c62:	4c21      	ldr	r4, [pc, #132]	; (8028ce8 <__pow5mult+0x98>)
 8028c64:	2300      	movs	r3, #0
 8028c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028c6a:	f7ff fec8 	bl	80289fe <__multadd>
 8028c6e:	4607      	mov	r7, r0
 8028c70:	10ad      	asrs	r5, r5, #2
 8028c72:	d035      	beq.n	8028ce0 <__pow5mult+0x90>
 8028c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8028c76:	b93c      	cbnz	r4, 8028c88 <__pow5mult+0x38>
 8028c78:	2010      	movs	r0, #16
 8028c7a:	f7fe fa81 	bl	8027180 <malloc>
 8028c7e:	6270      	str	r0, [r6, #36]	; 0x24
 8028c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028c84:	6004      	str	r4, [r0, #0]
 8028c86:	60c4      	str	r4, [r0, #12]
 8028c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8028c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028c90:	b94c      	cbnz	r4, 8028ca6 <__pow5mult+0x56>
 8028c92:	f240 2171 	movw	r1, #625	; 0x271
 8028c96:	4630      	mov	r0, r6
 8028c98:	f7ff ff3a 	bl	8028b10 <__i2b>
 8028c9c:	2300      	movs	r3, #0
 8028c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8028ca2:	4604      	mov	r4, r0
 8028ca4:	6003      	str	r3, [r0, #0]
 8028ca6:	f04f 0800 	mov.w	r8, #0
 8028caa:	07eb      	lsls	r3, r5, #31
 8028cac:	d50a      	bpl.n	8028cc4 <__pow5mult+0x74>
 8028cae:	4639      	mov	r1, r7
 8028cb0:	4622      	mov	r2, r4
 8028cb2:	4630      	mov	r0, r6
 8028cb4:	f7ff ff35 	bl	8028b22 <__multiply>
 8028cb8:	4639      	mov	r1, r7
 8028cba:	4681      	mov	r9, r0
 8028cbc:	4630      	mov	r0, r6
 8028cbe:	f7ff fe87 	bl	80289d0 <_Bfree>
 8028cc2:	464f      	mov	r7, r9
 8028cc4:	106d      	asrs	r5, r5, #1
 8028cc6:	d00b      	beq.n	8028ce0 <__pow5mult+0x90>
 8028cc8:	6820      	ldr	r0, [r4, #0]
 8028cca:	b938      	cbnz	r0, 8028cdc <__pow5mult+0x8c>
 8028ccc:	4622      	mov	r2, r4
 8028cce:	4621      	mov	r1, r4
 8028cd0:	4630      	mov	r0, r6
 8028cd2:	f7ff ff26 	bl	8028b22 <__multiply>
 8028cd6:	6020      	str	r0, [r4, #0]
 8028cd8:	f8c0 8000 	str.w	r8, [r0]
 8028cdc:	4604      	mov	r4, r0
 8028cde:	e7e4      	b.n	8028caa <__pow5mult+0x5a>
 8028ce0:	4638      	mov	r0, r7
 8028ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ce6:	bf00      	nop
 8028ce8:	080450e0 	.word	0x080450e0

08028cec <__lshift>:
 8028cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028cf0:	460c      	mov	r4, r1
 8028cf2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028cf6:	6923      	ldr	r3, [r4, #16]
 8028cf8:	6849      	ldr	r1, [r1, #4]
 8028cfa:	eb0a 0903 	add.w	r9, sl, r3
 8028cfe:	68a3      	ldr	r3, [r4, #8]
 8028d00:	4607      	mov	r7, r0
 8028d02:	4616      	mov	r6, r2
 8028d04:	f109 0501 	add.w	r5, r9, #1
 8028d08:	42ab      	cmp	r3, r5
 8028d0a:	db32      	blt.n	8028d72 <__lshift+0x86>
 8028d0c:	4638      	mov	r0, r7
 8028d0e:	f7ff fe2b 	bl	8028968 <_Balloc>
 8028d12:	2300      	movs	r3, #0
 8028d14:	4680      	mov	r8, r0
 8028d16:	f100 0114 	add.w	r1, r0, #20
 8028d1a:	461a      	mov	r2, r3
 8028d1c:	4553      	cmp	r3, sl
 8028d1e:	db2b      	blt.n	8028d78 <__lshift+0x8c>
 8028d20:	6920      	ldr	r0, [r4, #16]
 8028d22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028d26:	f104 0314 	add.w	r3, r4, #20
 8028d2a:	f016 021f 	ands.w	r2, r6, #31
 8028d2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028d32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8028d36:	d025      	beq.n	8028d84 <__lshift+0x98>
 8028d38:	f1c2 0e20 	rsb	lr, r2, #32
 8028d3c:	2000      	movs	r0, #0
 8028d3e:	681e      	ldr	r6, [r3, #0]
 8028d40:	468a      	mov	sl, r1
 8028d42:	4096      	lsls	r6, r2
 8028d44:	4330      	orrs	r0, r6
 8028d46:	f84a 0b04 	str.w	r0, [sl], #4
 8028d4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8028d4e:	459c      	cmp	ip, r3
 8028d50:	fa20 f00e 	lsr.w	r0, r0, lr
 8028d54:	d814      	bhi.n	8028d80 <__lshift+0x94>
 8028d56:	6048      	str	r0, [r1, #4]
 8028d58:	b108      	cbz	r0, 8028d5e <__lshift+0x72>
 8028d5a:	f109 0502 	add.w	r5, r9, #2
 8028d5e:	3d01      	subs	r5, #1
 8028d60:	4638      	mov	r0, r7
 8028d62:	f8c8 5010 	str.w	r5, [r8, #16]
 8028d66:	4621      	mov	r1, r4
 8028d68:	f7ff fe32 	bl	80289d0 <_Bfree>
 8028d6c:	4640      	mov	r0, r8
 8028d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d72:	3101      	adds	r1, #1
 8028d74:	005b      	lsls	r3, r3, #1
 8028d76:	e7c7      	b.n	8028d08 <__lshift+0x1c>
 8028d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8028d7c:	3301      	adds	r3, #1
 8028d7e:	e7cd      	b.n	8028d1c <__lshift+0x30>
 8028d80:	4651      	mov	r1, sl
 8028d82:	e7dc      	b.n	8028d3e <__lshift+0x52>
 8028d84:	3904      	subs	r1, #4
 8028d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8028d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8028d8e:	459c      	cmp	ip, r3
 8028d90:	d8f9      	bhi.n	8028d86 <__lshift+0x9a>
 8028d92:	e7e4      	b.n	8028d5e <__lshift+0x72>

08028d94 <__mcmp>:
 8028d94:	6903      	ldr	r3, [r0, #16]
 8028d96:	690a      	ldr	r2, [r1, #16]
 8028d98:	1a9b      	subs	r3, r3, r2
 8028d9a:	b530      	push	{r4, r5, lr}
 8028d9c:	d10c      	bne.n	8028db8 <__mcmp+0x24>
 8028d9e:	0092      	lsls	r2, r2, #2
 8028da0:	3014      	adds	r0, #20
 8028da2:	3114      	adds	r1, #20
 8028da4:	1884      	adds	r4, r0, r2
 8028da6:	4411      	add	r1, r2
 8028da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8028dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8028db0:	4295      	cmp	r5, r2
 8028db2:	d003      	beq.n	8028dbc <__mcmp+0x28>
 8028db4:	d305      	bcc.n	8028dc2 <__mcmp+0x2e>
 8028db6:	2301      	movs	r3, #1
 8028db8:	4618      	mov	r0, r3
 8028dba:	bd30      	pop	{r4, r5, pc}
 8028dbc:	42a0      	cmp	r0, r4
 8028dbe:	d3f3      	bcc.n	8028da8 <__mcmp+0x14>
 8028dc0:	e7fa      	b.n	8028db8 <__mcmp+0x24>
 8028dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028dc6:	e7f7      	b.n	8028db8 <__mcmp+0x24>

08028dc8 <__mdiff>:
 8028dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028dcc:	460d      	mov	r5, r1
 8028dce:	4607      	mov	r7, r0
 8028dd0:	4611      	mov	r1, r2
 8028dd2:	4628      	mov	r0, r5
 8028dd4:	4614      	mov	r4, r2
 8028dd6:	f7ff ffdd 	bl	8028d94 <__mcmp>
 8028dda:	1e06      	subs	r6, r0, #0
 8028ddc:	d108      	bne.n	8028df0 <__mdiff+0x28>
 8028dde:	4631      	mov	r1, r6
 8028de0:	4638      	mov	r0, r7
 8028de2:	f7ff fdc1 	bl	8028968 <_Balloc>
 8028de6:	2301      	movs	r3, #1
 8028de8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8028dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028df0:	bfa4      	itt	ge
 8028df2:	4623      	movge	r3, r4
 8028df4:	462c      	movge	r4, r5
 8028df6:	4638      	mov	r0, r7
 8028df8:	6861      	ldr	r1, [r4, #4]
 8028dfa:	bfa6      	itte	ge
 8028dfc:	461d      	movge	r5, r3
 8028dfe:	2600      	movge	r6, #0
 8028e00:	2601      	movlt	r6, #1
 8028e02:	f7ff fdb1 	bl	8028968 <_Balloc>
 8028e06:	692b      	ldr	r3, [r5, #16]
 8028e08:	60c6      	str	r6, [r0, #12]
 8028e0a:	6926      	ldr	r6, [r4, #16]
 8028e0c:	f105 0914 	add.w	r9, r5, #20
 8028e10:	f104 0214 	add.w	r2, r4, #20
 8028e14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8028e18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8028e1c:	f100 0514 	add.w	r5, r0, #20
 8028e20:	f04f 0e00 	mov.w	lr, #0
 8028e24:	f852 ab04 	ldr.w	sl, [r2], #4
 8028e28:	f859 4b04 	ldr.w	r4, [r9], #4
 8028e2c:	fa1e f18a 	uxtah	r1, lr, sl
 8028e30:	b2a3      	uxth	r3, r4
 8028e32:	1ac9      	subs	r1, r1, r3
 8028e34:	0c23      	lsrs	r3, r4, #16
 8028e36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8028e3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8028e3e:	b289      	uxth	r1, r1
 8028e40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8028e44:	45c8      	cmp	r8, r9
 8028e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8028e4a:	4694      	mov	ip, r2
 8028e4c:	f845 3b04 	str.w	r3, [r5], #4
 8028e50:	d8e8      	bhi.n	8028e24 <__mdiff+0x5c>
 8028e52:	45bc      	cmp	ip, r7
 8028e54:	d304      	bcc.n	8028e60 <__mdiff+0x98>
 8028e56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8028e5a:	b183      	cbz	r3, 8028e7e <__mdiff+0xb6>
 8028e5c:	6106      	str	r6, [r0, #16]
 8028e5e:	e7c5      	b.n	8028dec <__mdiff+0x24>
 8028e60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8028e64:	fa1e f381 	uxtah	r3, lr, r1
 8028e68:	141a      	asrs	r2, r3, #16
 8028e6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8028e6e:	b29b      	uxth	r3, r3
 8028e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028e74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8028e78:	f845 3b04 	str.w	r3, [r5], #4
 8028e7c:	e7e9      	b.n	8028e52 <__mdiff+0x8a>
 8028e7e:	3e01      	subs	r6, #1
 8028e80:	e7e9      	b.n	8028e56 <__mdiff+0x8e>

08028e82 <__d2b>:
 8028e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028e86:	460e      	mov	r6, r1
 8028e88:	2101      	movs	r1, #1
 8028e8a:	ec59 8b10 	vmov	r8, r9, d0
 8028e8e:	4615      	mov	r5, r2
 8028e90:	f7ff fd6a 	bl	8028968 <_Balloc>
 8028e94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8028e98:	4607      	mov	r7, r0
 8028e9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028e9e:	bb34      	cbnz	r4, 8028eee <__d2b+0x6c>
 8028ea0:	9301      	str	r3, [sp, #4]
 8028ea2:	f1b8 0300 	subs.w	r3, r8, #0
 8028ea6:	d027      	beq.n	8028ef8 <__d2b+0x76>
 8028ea8:	a802      	add	r0, sp, #8
 8028eaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8028eae:	f7ff fe00 	bl	8028ab2 <__lo0bits>
 8028eb2:	9900      	ldr	r1, [sp, #0]
 8028eb4:	b1f0      	cbz	r0, 8028ef4 <__d2b+0x72>
 8028eb6:	9a01      	ldr	r2, [sp, #4]
 8028eb8:	f1c0 0320 	rsb	r3, r0, #32
 8028ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8028ec0:	430b      	orrs	r3, r1
 8028ec2:	40c2      	lsrs	r2, r0
 8028ec4:	617b      	str	r3, [r7, #20]
 8028ec6:	9201      	str	r2, [sp, #4]
 8028ec8:	9b01      	ldr	r3, [sp, #4]
 8028eca:	61bb      	str	r3, [r7, #24]
 8028ecc:	2b00      	cmp	r3, #0
 8028ece:	bf14      	ite	ne
 8028ed0:	2102      	movne	r1, #2
 8028ed2:	2101      	moveq	r1, #1
 8028ed4:	6139      	str	r1, [r7, #16]
 8028ed6:	b1c4      	cbz	r4, 8028f0a <__d2b+0x88>
 8028ed8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8028edc:	4404      	add	r4, r0
 8028ede:	6034      	str	r4, [r6, #0]
 8028ee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028ee4:	6028      	str	r0, [r5, #0]
 8028ee6:	4638      	mov	r0, r7
 8028ee8:	b003      	add	sp, #12
 8028eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028ef2:	e7d5      	b.n	8028ea0 <__d2b+0x1e>
 8028ef4:	6179      	str	r1, [r7, #20]
 8028ef6:	e7e7      	b.n	8028ec8 <__d2b+0x46>
 8028ef8:	a801      	add	r0, sp, #4
 8028efa:	f7ff fdda 	bl	8028ab2 <__lo0bits>
 8028efe:	9b01      	ldr	r3, [sp, #4]
 8028f00:	617b      	str	r3, [r7, #20]
 8028f02:	2101      	movs	r1, #1
 8028f04:	6139      	str	r1, [r7, #16]
 8028f06:	3020      	adds	r0, #32
 8028f08:	e7e5      	b.n	8028ed6 <__d2b+0x54>
 8028f0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8028f0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028f12:	6030      	str	r0, [r6, #0]
 8028f14:	6918      	ldr	r0, [r3, #16]
 8028f16:	f7ff fdad 	bl	8028a74 <__hi0bits>
 8028f1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8028f1e:	e7e1      	b.n	8028ee4 <__d2b+0x62>

08028f20 <_calloc_r>:
 8028f20:	b538      	push	{r3, r4, r5, lr}
 8028f22:	fb02 f401 	mul.w	r4, r2, r1
 8028f26:	4621      	mov	r1, r4
 8028f28:	f7fe f99c 	bl	8027264 <_malloc_r>
 8028f2c:	4605      	mov	r5, r0
 8028f2e:	b118      	cbz	r0, 8028f38 <_calloc_r+0x18>
 8028f30:	4622      	mov	r2, r4
 8028f32:	2100      	movs	r1, #0
 8028f34:	f7fe f93f 	bl	80271b6 <memset>
 8028f38:	4628      	mov	r0, r5
 8028f3a:	bd38      	pop	{r3, r4, r5, pc}

08028f3c <__ssputs_r>:
 8028f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028f40:	688e      	ldr	r6, [r1, #8]
 8028f42:	429e      	cmp	r6, r3
 8028f44:	4682      	mov	sl, r0
 8028f46:	460c      	mov	r4, r1
 8028f48:	4690      	mov	r8, r2
 8028f4a:	4699      	mov	r9, r3
 8028f4c:	d837      	bhi.n	8028fbe <__ssputs_r+0x82>
 8028f4e:	898a      	ldrh	r2, [r1, #12]
 8028f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8028f54:	d031      	beq.n	8028fba <__ssputs_r+0x7e>
 8028f56:	6825      	ldr	r5, [r4, #0]
 8028f58:	6909      	ldr	r1, [r1, #16]
 8028f5a:	1a6f      	subs	r7, r5, r1
 8028f5c:	6965      	ldr	r5, [r4, #20]
 8028f5e:	2302      	movs	r3, #2
 8028f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028f64:	fb95 f5f3 	sdiv	r5, r5, r3
 8028f68:	f109 0301 	add.w	r3, r9, #1
 8028f6c:	443b      	add	r3, r7
 8028f6e:	429d      	cmp	r5, r3
 8028f70:	bf38      	it	cc
 8028f72:	461d      	movcc	r5, r3
 8028f74:	0553      	lsls	r3, r2, #21
 8028f76:	d530      	bpl.n	8028fda <__ssputs_r+0x9e>
 8028f78:	4629      	mov	r1, r5
 8028f7a:	f7fe f973 	bl	8027264 <_malloc_r>
 8028f7e:	4606      	mov	r6, r0
 8028f80:	b950      	cbnz	r0, 8028f98 <__ssputs_r+0x5c>
 8028f82:	230c      	movs	r3, #12
 8028f84:	f8ca 3000 	str.w	r3, [sl]
 8028f88:	89a3      	ldrh	r3, [r4, #12]
 8028f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028f8e:	81a3      	strh	r3, [r4, #12]
 8028f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f98:	463a      	mov	r2, r7
 8028f9a:	6921      	ldr	r1, [r4, #16]
 8028f9c:	f7fe f900 	bl	80271a0 <memcpy>
 8028fa0:	89a3      	ldrh	r3, [r4, #12]
 8028fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8028fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028faa:	81a3      	strh	r3, [r4, #12]
 8028fac:	6126      	str	r6, [r4, #16]
 8028fae:	6165      	str	r5, [r4, #20]
 8028fb0:	443e      	add	r6, r7
 8028fb2:	1bed      	subs	r5, r5, r7
 8028fb4:	6026      	str	r6, [r4, #0]
 8028fb6:	60a5      	str	r5, [r4, #8]
 8028fb8:	464e      	mov	r6, r9
 8028fba:	454e      	cmp	r6, r9
 8028fbc:	d900      	bls.n	8028fc0 <__ssputs_r+0x84>
 8028fbe:	464e      	mov	r6, r9
 8028fc0:	4632      	mov	r2, r6
 8028fc2:	4641      	mov	r1, r8
 8028fc4:	6820      	ldr	r0, [r4, #0]
 8028fc6:	f000 fdb7 	bl	8029b38 <memmove>
 8028fca:	68a3      	ldr	r3, [r4, #8]
 8028fcc:	1b9b      	subs	r3, r3, r6
 8028fce:	60a3      	str	r3, [r4, #8]
 8028fd0:	6823      	ldr	r3, [r4, #0]
 8028fd2:	441e      	add	r6, r3
 8028fd4:	6026      	str	r6, [r4, #0]
 8028fd6:	2000      	movs	r0, #0
 8028fd8:	e7dc      	b.n	8028f94 <__ssputs_r+0x58>
 8028fda:	462a      	mov	r2, r5
 8028fdc:	f000 fdc5 	bl	8029b6a <_realloc_r>
 8028fe0:	4606      	mov	r6, r0
 8028fe2:	2800      	cmp	r0, #0
 8028fe4:	d1e2      	bne.n	8028fac <__ssputs_r+0x70>
 8028fe6:	6921      	ldr	r1, [r4, #16]
 8028fe8:	4650      	mov	r0, sl
 8028fea:	f7fe f8ed 	bl	80271c8 <_free_r>
 8028fee:	e7c8      	b.n	8028f82 <__ssputs_r+0x46>

08028ff0 <_svfiprintf_r>:
 8028ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ff4:	461d      	mov	r5, r3
 8028ff6:	898b      	ldrh	r3, [r1, #12]
 8028ff8:	061f      	lsls	r7, r3, #24
 8028ffa:	b09d      	sub	sp, #116	; 0x74
 8028ffc:	4680      	mov	r8, r0
 8028ffe:	460c      	mov	r4, r1
 8029000:	4616      	mov	r6, r2
 8029002:	d50f      	bpl.n	8029024 <_svfiprintf_r+0x34>
 8029004:	690b      	ldr	r3, [r1, #16]
 8029006:	b96b      	cbnz	r3, 8029024 <_svfiprintf_r+0x34>
 8029008:	2140      	movs	r1, #64	; 0x40
 802900a:	f7fe f92b 	bl	8027264 <_malloc_r>
 802900e:	6020      	str	r0, [r4, #0]
 8029010:	6120      	str	r0, [r4, #16]
 8029012:	b928      	cbnz	r0, 8029020 <_svfiprintf_r+0x30>
 8029014:	230c      	movs	r3, #12
 8029016:	f8c8 3000 	str.w	r3, [r8]
 802901a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802901e:	e0c8      	b.n	80291b2 <_svfiprintf_r+0x1c2>
 8029020:	2340      	movs	r3, #64	; 0x40
 8029022:	6163      	str	r3, [r4, #20]
 8029024:	2300      	movs	r3, #0
 8029026:	9309      	str	r3, [sp, #36]	; 0x24
 8029028:	2320      	movs	r3, #32
 802902a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802902e:	2330      	movs	r3, #48	; 0x30
 8029030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029034:	9503      	str	r5, [sp, #12]
 8029036:	f04f 0b01 	mov.w	fp, #1
 802903a:	4637      	mov	r7, r6
 802903c:	463d      	mov	r5, r7
 802903e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029042:	b10b      	cbz	r3, 8029048 <_svfiprintf_r+0x58>
 8029044:	2b25      	cmp	r3, #37	; 0x25
 8029046:	d13e      	bne.n	80290c6 <_svfiprintf_r+0xd6>
 8029048:	ebb7 0a06 	subs.w	sl, r7, r6
 802904c:	d00b      	beq.n	8029066 <_svfiprintf_r+0x76>
 802904e:	4653      	mov	r3, sl
 8029050:	4632      	mov	r2, r6
 8029052:	4621      	mov	r1, r4
 8029054:	4640      	mov	r0, r8
 8029056:	f7ff ff71 	bl	8028f3c <__ssputs_r>
 802905a:	3001      	adds	r0, #1
 802905c:	f000 80a4 	beq.w	80291a8 <_svfiprintf_r+0x1b8>
 8029060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029062:	4453      	add	r3, sl
 8029064:	9309      	str	r3, [sp, #36]	; 0x24
 8029066:	783b      	ldrb	r3, [r7, #0]
 8029068:	2b00      	cmp	r3, #0
 802906a:	f000 809d 	beq.w	80291a8 <_svfiprintf_r+0x1b8>
 802906e:	2300      	movs	r3, #0
 8029070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8029074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029078:	9304      	str	r3, [sp, #16]
 802907a:	9307      	str	r3, [sp, #28]
 802907c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029080:	931a      	str	r3, [sp, #104]	; 0x68
 8029082:	462f      	mov	r7, r5
 8029084:	2205      	movs	r2, #5
 8029086:	f817 1b01 	ldrb.w	r1, [r7], #1
 802908a:	4850      	ldr	r0, [pc, #320]	; (80291cc <_svfiprintf_r+0x1dc>)
 802908c:	f7d7 f8b8 	bl	8000200 <memchr>
 8029090:	9b04      	ldr	r3, [sp, #16]
 8029092:	b9d0      	cbnz	r0, 80290ca <_svfiprintf_r+0xda>
 8029094:	06d9      	lsls	r1, r3, #27
 8029096:	bf44      	itt	mi
 8029098:	2220      	movmi	r2, #32
 802909a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802909e:	071a      	lsls	r2, r3, #28
 80290a0:	bf44      	itt	mi
 80290a2:	222b      	movmi	r2, #43	; 0x2b
 80290a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80290a8:	782a      	ldrb	r2, [r5, #0]
 80290aa:	2a2a      	cmp	r2, #42	; 0x2a
 80290ac:	d015      	beq.n	80290da <_svfiprintf_r+0xea>
 80290ae:	9a07      	ldr	r2, [sp, #28]
 80290b0:	462f      	mov	r7, r5
 80290b2:	2000      	movs	r0, #0
 80290b4:	250a      	movs	r5, #10
 80290b6:	4639      	mov	r1, r7
 80290b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80290bc:	3b30      	subs	r3, #48	; 0x30
 80290be:	2b09      	cmp	r3, #9
 80290c0:	d94d      	bls.n	802915e <_svfiprintf_r+0x16e>
 80290c2:	b1b8      	cbz	r0, 80290f4 <_svfiprintf_r+0x104>
 80290c4:	e00f      	b.n	80290e6 <_svfiprintf_r+0xf6>
 80290c6:	462f      	mov	r7, r5
 80290c8:	e7b8      	b.n	802903c <_svfiprintf_r+0x4c>
 80290ca:	4a40      	ldr	r2, [pc, #256]	; (80291cc <_svfiprintf_r+0x1dc>)
 80290cc:	1a80      	subs	r0, r0, r2
 80290ce:	fa0b f000 	lsl.w	r0, fp, r0
 80290d2:	4318      	orrs	r0, r3
 80290d4:	9004      	str	r0, [sp, #16]
 80290d6:	463d      	mov	r5, r7
 80290d8:	e7d3      	b.n	8029082 <_svfiprintf_r+0x92>
 80290da:	9a03      	ldr	r2, [sp, #12]
 80290dc:	1d11      	adds	r1, r2, #4
 80290de:	6812      	ldr	r2, [r2, #0]
 80290e0:	9103      	str	r1, [sp, #12]
 80290e2:	2a00      	cmp	r2, #0
 80290e4:	db01      	blt.n	80290ea <_svfiprintf_r+0xfa>
 80290e6:	9207      	str	r2, [sp, #28]
 80290e8:	e004      	b.n	80290f4 <_svfiprintf_r+0x104>
 80290ea:	4252      	negs	r2, r2
 80290ec:	f043 0302 	orr.w	r3, r3, #2
 80290f0:	9207      	str	r2, [sp, #28]
 80290f2:	9304      	str	r3, [sp, #16]
 80290f4:	783b      	ldrb	r3, [r7, #0]
 80290f6:	2b2e      	cmp	r3, #46	; 0x2e
 80290f8:	d10c      	bne.n	8029114 <_svfiprintf_r+0x124>
 80290fa:	787b      	ldrb	r3, [r7, #1]
 80290fc:	2b2a      	cmp	r3, #42	; 0x2a
 80290fe:	d133      	bne.n	8029168 <_svfiprintf_r+0x178>
 8029100:	9b03      	ldr	r3, [sp, #12]
 8029102:	1d1a      	adds	r2, r3, #4
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	9203      	str	r2, [sp, #12]
 8029108:	2b00      	cmp	r3, #0
 802910a:	bfb8      	it	lt
 802910c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8029110:	3702      	adds	r7, #2
 8029112:	9305      	str	r3, [sp, #20]
 8029114:	4d2e      	ldr	r5, [pc, #184]	; (80291d0 <_svfiprintf_r+0x1e0>)
 8029116:	7839      	ldrb	r1, [r7, #0]
 8029118:	2203      	movs	r2, #3
 802911a:	4628      	mov	r0, r5
 802911c:	f7d7 f870 	bl	8000200 <memchr>
 8029120:	b138      	cbz	r0, 8029132 <_svfiprintf_r+0x142>
 8029122:	2340      	movs	r3, #64	; 0x40
 8029124:	1b40      	subs	r0, r0, r5
 8029126:	fa03 f000 	lsl.w	r0, r3, r0
 802912a:	9b04      	ldr	r3, [sp, #16]
 802912c:	4303      	orrs	r3, r0
 802912e:	3701      	adds	r7, #1
 8029130:	9304      	str	r3, [sp, #16]
 8029132:	7839      	ldrb	r1, [r7, #0]
 8029134:	4827      	ldr	r0, [pc, #156]	; (80291d4 <_svfiprintf_r+0x1e4>)
 8029136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802913a:	2206      	movs	r2, #6
 802913c:	1c7e      	adds	r6, r7, #1
 802913e:	f7d7 f85f 	bl	8000200 <memchr>
 8029142:	2800      	cmp	r0, #0
 8029144:	d038      	beq.n	80291b8 <_svfiprintf_r+0x1c8>
 8029146:	4b24      	ldr	r3, [pc, #144]	; (80291d8 <_svfiprintf_r+0x1e8>)
 8029148:	bb13      	cbnz	r3, 8029190 <_svfiprintf_r+0x1a0>
 802914a:	9b03      	ldr	r3, [sp, #12]
 802914c:	3307      	adds	r3, #7
 802914e:	f023 0307 	bic.w	r3, r3, #7
 8029152:	3308      	adds	r3, #8
 8029154:	9303      	str	r3, [sp, #12]
 8029156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029158:	444b      	add	r3, r9
 802915a:	9309      	str	r3, [sp, #36]	; 0x24
 802915c:	e76d      	b.n	802903a <_svfiprintf_r+0x4a>
 802915e:	fb05 3202 	mla	r2, r5, r2, r3
 8029162:	2001      	movs	r0, #1
 8029164:	460f      	mov	r7, r1
 8029166:	e7a6      	b.n	80290b6 <_svfiprintf_r+0xc6>
 8029168:	2300      	movs	r3, #0
 802916a:	3701      	adds	r7, #1
 802916c:	9305      	str	r3, [sp, #20]
 802916e:	4619      	mov	r1, r3
 8029170:	250a      	movs	r5, #10
 8029172:	4638      	mov	r0, r7
 8029174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029178:	3a30      	subs	r2, #48	; 0x30
 802917a:	2a09      	cmp	r2, #9
 802917c:	d903      	bls.n	8029186 <_svfiprintf_r+0x196>
 802917e:	2b00      	cmp	r3, #0
 8029180:	d0c8      	beq.n	8029114 <_svfiprintf_r+0x124>
 8029182:	9105      	str	r1, [sp, #20]
 8029184:	e7c6      	b.n	8029114 <_svfiprintf_r+0x124>
 8029186:	fb05 2101 	mla	r1, r5, r1, r2
 802918a:	2301      	movs	r3, #1
 802918c:	4607      	mov	r7, r0
 802918e:	e7f0      	b.n	8029172 <_svfiprintf_r+0x182>
 8029190:	ab03      	add	r3, sp, #12
 8029192:	9300      	str	r3, [sp, #0]
 8029194:	4622      	mov	r2, r4
 8029196:	4b11      	ldr	r3, [pc, #68]	; (80291dc <_svfiprintf_r+0x1ec>)
 8029198:	a904      	add	r1, sp, #16
 802919a:	4640      	mov	r0, r8
 802919c:	f7fe f950 	bl	8027440 <_printf_float>
 80291a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80291a4:	4681      	mov	r9, r0
 80291a6:	d1d6      	bne.n	8029156 <_svfiprintf_r+0x166>
 80291a8:	89a3      	ldrh	r3, [r4, #12]
 80291aa:	065b      	lsls	r3, r3, #25
 80291ac:	f53f af35 	bmi.w	802901a <_svfiprintf_r+0x2a>
 80291b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80291b2:	b01d      	add	sp, #116	; 0x74
 80291b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291b8:	ab03      	add	r3, sp, #12
 80291ba:	9300      	str	r3, [sp, #0]
 80291bc:	4622      	mov	r2, r4
 80291be:	4b07      	ldr	r3, [pc, #28]	; (80291dc <_svfiprintf_r+0x1ec>)
 80291c0:	a904      	add	r1, sp, #16
 80291c2:	4640      	mov	r0, r8
 80291c4:	f7fe fbf2 	bl	80279ac <_printf_i>
 80291c8:	e7ea      	b.n	80291a0 <_svfiprintf_r+0x1b0>
 80291ca:	bf00      	nop
 80291cc:	080450ec 	.word	0x080450ec
 80291d0:	080450f2 	.word	0x080450f2
 80291d4:	080450f6 	.word	0x080450f6
 80291d8:	08027441 	.word	0x08027441
 80291dc:	08028f3d 	.word	0x08028f3d

080291e0 <_sungetc_r>:
 80291e0:	b538      	push	{r3, r4, r5, lr}
 80291e2:	1c4b      	adds	r3, r1, #1
 80291e4:	4614      	mov	r4, r2
 80291e6:	d103      	bne.n	80291f0 <_sungetc_r+0x10>
 80291e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80291ec:	4628      	mov	r0, r5
 80291ee:	bd38      	pop	{r3, r4, r5, pc}
 80291f0:	8993      	ldrh	r3, [r2, #12]
 80291f2:	f023 0320 	bic.w	r3, r3, #32
 80291f6:	8193      	strh	r3, [r2, #12]
 80291f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80291fa:	6852      	ldr	r2, [r2, #4]
 80291fc:	b2cd      	uxtb	r5, r1
 80291fe:	b18b      	cbz	r3, 8029224 <_sungetc_r+0x44>
 8029200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029202:	4293      	cmp	r3, r2
 8029204:	dd08      	ble.n	8029218 <_sungetc_r+0x38>
 8029206:	6823      	ldr	r3, [r4, #0]
 8029208:	1e5a      	subs	r2, r3, #1
 802920a:	6022      	str	r2, [r4, #0]
 802920c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029210:	6863      	ldr	r3, [r4, #4]
 8029212:	3301      	adds	r3, #1
 8029214:	6063      	str	r3, [r4, #4]
 8029216:	e7e9      	b.n	80291ec <_sungetc_r+0xc>
 8029218:	4621      	mov	r1, r4
 802921a:	f000 fc2f 	bl	8029a7c <__submore>
 802921e:	2800      	cmp	r0, #0
 8029220:	d0f1      	beq.n	8029206 <_sungetc_r+0x26>
 8029222:	e7e1      	b.n	80291e8 <_sungetc_r+0x8>
 8029224:	6921      	ldr	r1, [r4, #16]
 8029226:	6823      	ldr	r3, [r4, #0]
 8029228:	b151      	cbz	r1, 8029240 <_sungetc_r+0x60>
 802922a:	4299      	cmp	r1, r3
 802922c:	d208      	bcs.n	8029240 <_sungetc_r+0x60>
 802922e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8029232:	42a9      	cmp	r1, r5
 8029234:	d104      	bne.n	8029240 <_sungetc_r+0x60>
 8029236:	3b01      	subs	r3, #1
 8029238:	3201      	adds	r2, #1
 802923a:	6023      	str	r3, [r4, #0]
 802923c:	6062      	str	r2, [r4, #4]
 802923e:	e7d5      	b.n	80291ec <_sungetc_r+0xc>
 8029240:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029248:	6363      	str	r3, [r4, #52]	; 0x34
 802924a:	2303      	movs	r3, #3
 802924c:	63a3      	str	r3, [r4, #56]	; 0x38
 802924e:	4623      	mov	r3, r4
 8029250:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029254:	6023      	str	r3, [r4, #0]
 8029256:	2301      	movs	r3, #1
 8029258:	e7dc      	b.n	8029214 <_sungetc_r+0x34>

0802925a <__ssrefill_r>:
 802925a:	b510      	push	{r4, lr}
 802925c:	460c      	mov	r4, r1
 802925e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029260:	b169      	cbz	r1, 802927e <__ssrefill_r+0x24>
 8029262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029266:	4299      	cmp	r1, r3
 8029268:	d001      	beq.n	802926e <__ssrefill_r+0x14>
 802926a:	f7fd ffad 	bl	80271c8 <_free_r>
 802926e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029270:	6063      	str	r3, [r4, #4]
 8029272:	2000      	movs	r0, #0
 8029274:	6360      	str	r0, [r4, #52]	; 0x34
 8029276:	b113      	cbz	r3, 802927e <__ssrefill_r+0x24>
 8029278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802927a:	6023      	str	r3, [r4, #0]
 802927c:	bd10      	pop	{r4, pc}
 802927e:	6923      	ldr	r3, [r4, #16]
 8029280:	6023      	str	r3, [r4, #0]
 8029282:	2300      	movs	r3, #0
 8029284:	6063      	str	r3, [r4, #4]
 8029286:	89a3      	ldrh	r3, [r4, #12]
 8029288:	f043 0320 	orr.w	r3, r3, #32
 802928c:	81a3      	strh	r3, [r4, #12]
 802928e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029292:	e7f3      	b.n	802927c <__ssrefill_r+0x22>

08029294 <__ssvfiscanf_r>:
 8029294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029298:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802929c:	460c      	mov	r4, r1
 802929e:	2100      	movs	r1, #0
 80292a0:	9144      	str	r1, [sp, #272]	; 0x110
 80292a2:	9145      	str	r1, [sp, #276]	; 0x114
 80292a4:	499f      	ldr	r1, [pc, #636]	; (8029524 <__ssvfiscanf_r+0x290>)
 80292a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80292a8:	f10d 0804 	add.w	r8, sp, #4
 80292ac:	499e      	ldr	r1, [pc, #632]	; (8029528 <__ssvfiscanf_r+0x294>)
 80292ae:	f8df 927c 	ldr.w	r9, [pc, #636]	; 802952c <__ssvfiscanf_r+0x298>
 80292b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80292b6:	4606      	mov	r6, r0
 80292b8:	4692      	mov	sl, r2
 80292ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80292bc:	9300      	str	r3, [sp, #0]
 80292be:	270a      	movs	r7, #10
 80292c0:	f89a 3000 	ldrb.w	r3, [sl]
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	f000 812a 	beq.w	802951e <__ssvfiscanf_r+0x28a>
 80292ca:	4655      	mov	r5, sl
 80292cc:	f000 fc14 	bl	8029af8 <__locale_ctype_ptr>
 80292d0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80292d4:	4458      	add	r0, fp
 80292d6:	7843      	ldrb	r3, [r0, #1]
 80292d8:	f013 0308 	ands.w	r3, r3, #8
 80292dc:	d01c      	beq.n	8029318 <__ssvfiscanf_r+0x84>
 80292de:	6863      	ldr	r3, [r4, #4]
 80292e0:	2b00      	cmp	r3, #0
 80292e2:	dd12      	ble.n	802930a <__ssvfiscanf_r+0x76>
 80292e4:	f000 fc08 	bl	8029af8 <__locale_ctype_ptr>
 80292e8:	6823      	ldr	r3, [r4, #0]
 80292ea:	781a      	ldrb	r2, [r3, #0]
 80292ec:	4410      	add	r0, r2
 80292ee:	7842      	ldrb	r2, [r0, #1]
 80292f0:	0712      	lsls	r2, r2, #28
 80292f2:	d401      	bmi.n	80292f8 <__ssvfiscanf_r+0x64>
 80292f4:	46aa      	mov	sl, r5
 80292f6:	e7e3      	b.n	80292c0 <__ssvfiscanf_r+0x2c>
 80292f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80292fa:	3201      	adds	r2, #1
 80292fc:	9245      	str	r2, [sp, #276]	; 0x114
 80292fe:	6862      	ldr	r2, [r4, #4]
 8029300:	3301      	adds	r3, #1
 8029302:	3a01      	subs	r2, #1
 8029304:	6062      	str	r2, [r4, #4]
 8029306:	6023      	str	r3, [r4, #0]
 8029308:	e7e9      	b.n	80292de <__ssvfiscanf_r+0x4a>
 802930a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802930c:	4621      	mov	r1, r4
 802930e:	4630      	mov	r0, r6
 8029310:	4798      	blx	r3
 8029312:	2800      	cmp	r0, #0
 8029314:	d0e6      	beq.n	80292e4 <__ssvfiscanf_r+0x50>
 8029316:	e7ed      	b.n	80292f4 <__ssvfiscanf_r+0x60>
 8029318:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 802931c:	f040 8082 	bne.w	8029424 <__ssvfiscanf_r+0x190>
 8029320:	9343      	str	r3, [sp, #268]	; 0x10c
 8029322:	9341      	str	r3, [sp, #260]	; 0x104
 8029324:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8029328:	2b2a      	cmp	r3, #42	; 0x2a
 802932a:	d103      	bne.n	8029334 <__ssvfiscanf_r+0xa0>
 802932c:	2310      	movs	r3, #16
 802932e:	9341      	str	r3, [sp, #260]	; 0x104
 8029330:	f10a 0502 	add.w	r5, sl, #2
 8029334:	46aa      	mov	sl, r5
 8029336:	f815 1b01 	ldrb.w	r1, [r5], #1
 802933a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802933e:	2a09      	cmp	r2, #9
 8029340:	d922      	bls.n	8029388 <__ssvfiscanf_r+0xf4>
 8029342:	2203      	movs	r2, #3
 8029344:	4879      	ldr	r0, [pc, #484]	; (802952c <__ssvfiscanf_r+0x298>)
 8029346:	f7d6 ff5b 	bl	8000200 <memchr>
 802934a:	b138      	cbz	r0, 802935c <__ssvfiscanf_r+0xc8>
 802934c:	eba0 0309 	sub.w	r3, r0, r9
 8029350:	2001      	movs	r0, #1
 8029352:	4098      	lsls	r0, r3
 8029354:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029356:	4318      	orrs	r0, r3
 8029358:	9041      	str	r0, [sp, #260]	; 0x104
 802935a:	46aa      	mov	sl, r5
 802935c:	f89a 3000 	ldrb.w	r3, [sl]
 8029360:	2b67      	cmp	r3, #103	; 0x67
 8029362:	f10a 0501 	add.w	r5, sl, #1
 8029366:	d82b      	bhi.n	80293c0 <__ssvfiscanf_r+0x12c>
 8029368:	2b65      	cmp	r3, #101	; 0x65
 802936a:	f080 809f 	bcs.w	80294ac <__ssvfiscanf_r+0x218>
 802936e:	2b47      	cmp	r3, #71	; 0x47
 8029370:	d810      	bhi.n	8029394 <__ssvfiscanf_r+0x100>
 8029372:	2b45      	cmp	r3, #69	; 0x45
 8029374:	f080 809a 	bcs.w	80294ac <__ssvfiscanf_r+0x218>
 8029378:	2b00      	cmp	r3, #0
 802937a:	d06c      	beq.n	8029456 <__ssvfiscanf_r+0x1c2>
 802937c:	2b25      	cmp	r3, #37	; 0x25
 802937e:	d051      	beq.n	8029424 <__ssvfiscanf_r+0x190>
 8029380:	2303      	movs	r3, #3
 8029382:	9347      	str	r3, [sp, #284]	; 0x11c
 8029384:	9742      	str	r7, [sp, #264]	; 0x108
 8029386:	e027      	b.n	80293d8 <__ssvfiscanf_r+0x144>
 8029388:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802938a:	fb07 1303 	mla	r3, r7, r3, r1
 802938e:	3b30      	subs	r3, #48	; 0x30
 8029390:	9343      	str	r3, [sp, #268]	; 0x10c
 8029392:	e7cf      	b.n	8029334 <__ssvfiscanf_r+0xa0>
 8029394:	2b5b      	cmp	r3, #91	; 0x5b
 8029396:	d06a      	beq.n	802946e <__ssvfiscanf_r+0x1da>
 8029398:	d80c      	bhi.n	80293b4 <__ssvfiscanf_r+0x120>
 802939a:	2b58      	cmp	r3, #88	; 0x58
 802939c:	d1f0      	bne.n	8029380 <__ssvfiscanf_r+0xec>
 802939e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80293a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80293a4:	9241      	str	r2, [sp, #260]	; 0x104
 80293a6:	2210      	movs	r2, #16
 80293a8:	9242      	str	r2, [sp, #264]	; 0x108
 80293aa:	2b6e      	cmp	r3, #110	; 0x6e
 80293ac:	bf8c      	ite	hi
 80293ae:	2304      	movhi	r3, #4
 80293b0:	2303      	movls	r3, #3
 80293b2:	e010      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 80293b4:	2b63      	cmp	r3, #99	; 0x63
 80293b6:	d065      	beq.n	8029484 <__ssvfiscanf_r+0x1f0>
 80293b8:	2b64      	cmp	r3, #100	; 0x64
 80293ba:	d1e1      	bne.n	8029380 <__ssvfiscanf_r+0xec>
 80293bc:	9742      	str	r7, [sp, #264]	; 0x108
 80293be:	e7f4      	b.n	80293aa <__ssvfiscanf_r+0x116>
 80293c0:	2b70      	cmp	r3, #112	; 0x70
 80293c2:	d04b      	beq.n	802945c <__ssvfiscanf_r+0x1c8>
 80293c4:	d826      	bhi.n	8029414 <__ssvfiscanf_r+0x180>
 80293c6:	2b6e      	cmp	r3, #110	; 0x6e
 80293c8:	d062      	beq.n	8029490 <__ssvfiscanf_r+0x1fc>
 80293ca:	d84c      	bhi.n	8029466 <__ssvfiscanf_r+0x1d2>
 80293cc:	2b69      	cmp	r3, #105	; 0x69
 80293ce:	d1d7      	bne.n	8029380 <__ssvfiscanf_r+0xec>
 80293d0:	2300      	movs	r3, #0
 80293d2:	9342      	str	r3, [sp, #264]	; 0x108
 80293d4:	2303      	movs	r3, #3
 80293d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80293d8:	6863      	ldr	r3, [r4, #4]
 80293da:	2b00      	cmp	r3, #0
 80293dc:	dd68      	ble.n	80294b0 <__ssvfiscanf_r+0x21c>
 80293de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80293e0:	0659      	lsls	r1, r3, #25
 80293e2:	d407      	bmi.n	80293f4 <__ssvfiscanf_r+0x160>
 80293e4:	f000 fb88 	bl	8029af8 <__locale_ctype_ptr>
 80293e8:	6823      	ldr	r3, [r4, #0]
 80293ea:	781a      	ldrb	r2, [r3, #0]
 80293ec:	4410      	add	r0, r2
 80293ee:	7842      	ldrb	r2, [r0, #1]
 80293f0:	0712      	lsls	r2, r2, #28
 80293f2:	d464      	bmi.n	80294be <__ssvfiscanf_r+0x22a>
 80293f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80293f6:	2b02      	cmp	r3, #2
 80293f8:	dc73      	bgt.n	80294e2 <__ssvfiscanf_r+0x24e>
 80293fa:	466b      	mov	r3, sp
 80293fc:	4622      	mov	r2, r4
 80293fe:	a941      	add	r1, sp, #260	; 0x104
 8029400:	4630      	mov	r0, r6
 8029402:	f000 f897 	bl	8029534 <_scanf_chars>
 8029406:	2801      	cmp	r0, #1
 8029408:	f000 8089 	beq.w	802951e <__ssvfiscanf_r+0x28a>
 802940c:	2802      	cmp	r0, #2
 802940e:	f47f af71 	bne.w	80292f4 <__ssvfiscanf_r+0x60>
 8029412:	e01d      	b.n	8029450 <__ssvfiscanf_r+0x1bc>
 8029414:	2b75      	cmp	r3, #117	; 0x75
 8029416:	d0d1      	beq.n	80293bc <__ssvfiscanf_r+0x128>
 8029418:	2b78      	cmp	r3, #120	; 0x78
 802941a:	d0c0      	beq.n	802939e <__ssvfiscanf_r+0x10a>
 802941c:	2b73      	cmp	r3, #115	; 0x73
 802941e:	d1af      	bne.n	8029380 <__ssvfiscanf_r+0xec>
 8029420:	2302      	movs	r3, #2
 8029422:	e7d8      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 8029424:	6863      	ldr	r3, [r4, #4]
 8029426:	2b00      	cmp	r3, #0
 8029428:	dd0c      	ble.n	8029444 <__ssvfiscanf_r+0x1b0>
 802942a:	6823      	ldr	r3, [r4, #0]
 802942c:	781a      	ldrb	r2, [r3, #0]
 802942e:	455a      	cmp	r2, fp
 8029430:	d175      	bne.n	802951e <__ssvfiscanf_r+0x28a>
 8029432:	3301      	adds	r3, #1
 8029434:	6862      	ldr	r2, [r4, #4]
 8029436:	6023      	str	r3, [r4, #0]
 8029438:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802943a:	3a01      	subs	r2, #1
 802943c:	3301      	adds	r3, #1
 802943e:	6062      	str	r2, [r4, #4]
 8029440:	9345      	str	r3, [sp, #276]	; 0x114
 8029442:	e757      	b.n	80292f4 <__ssvfiscanf_r+0x60>
 8029444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029446:	4621      	mov	r1, r4
 8029448:	4630      	mov	r0, r6
 802944a:	4798      	blx	r3
 802944c:	2800      	cmp	r0, #0
 802944e:	d0ec      	beq.n	802942a <__ssvfiscanf_r+0x196>
 8029450:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029452:	2800      	cmp	r0, #0
 8029454:	d159      	bne.n	802950a <__ssvfiscanf_r+0x276>
 8029456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802945a:	e05c      	b.n	8029516 <__ssvfiscanf_r+0x282>
 802945c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802945e:	f042 0220 	orr.w	r2, r2, #32
 8029462:	9241      	str	r2, [sp, #260]	; 0x104
 8029464:	e79b      	b.n	802939e <__ssvfiscanf_r+0x10a>
 8029466:	2308      	movs	r3, #8
 8029468:	9342      	str	r3, [sp, #264]	; 0x108
 802946a:	2304      	movs	r3, #4
 802946c:	e7b3      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 802946e:	4629      	mov	r1, r5
 8029470:	4640      	mov	r0, r8
 8029472:	f000 f9b7 	bl	80297e4 <__sccl>
 8029476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802947c:	9341      	str	r3, [sp, #260]	; 0x104
 802947e:	4605      	mov	r5, r0
 8029480:	2301      	movs	r3, #1
 8029482:	e7a8      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 8029484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802948a:	9341      	str	r3, [sp, #260]	; 0x104
 802948c:	2300      	movs	r3, #0
 802948e:	e7a2      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 8029490:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029492:	06c3      	lsls	r3, r0, #27
 8029494:	f53f af2e 	bmi.w	80292f4 <__ssvfiscanf_r+0x60>
 8029498:	9b00      	ldr	r3, [sp, #0]
 802949a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802949c:	1d19      	adds	r1, r3, #4
 802949e:	9100      	str	r1, [sp, #0]
 80294a0:	681b      	ldr	r3, [r3, #0]
 80294a2:	07c0      	lsls	r0, r0, #31
 80294a4:	bf4c      	ite	mi
 80294a6:	801a      	strhmi	r2, [r3, #0]
 80294a8:	601a      	strpl	r2, [r3, #0]
 80294aa:	e723      	b.n	80292f4 <__ssvfiscanf_r+0x60>
 80294ac:	2305      	movs	r3, #5
 80294ae:	e792      	b.n	80293d6 <__ssvfiscanf_r+0x142>
 80294b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80294b2:	4621      	mov	r1, r4
 80294b4:	4630      	mov	r0, r6
 80294b6:	4798      	blx	r3
 80294b8:	2800      	cmp	r0, #0
 80294ba:	d090      	beq.n	80293de <__ssvfiscanf_r+0x14a>
 80294bc:	e7c8      	b.n	8029450 <__ssvfiscanf_r+0x1bc>
 80294be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80294c0:	3201      	adds	r2, #1
 80294c2:	9245      	str	r2, [sp, #276]	; 0x114
 80294c4:	6862      	ldr	r2, [r4, #4]
 80294c6:	3a01      	subs	r2, #1
 80294c8:	2a00      	cmp	r2, #0
 80294ca:	6062      	str	r2, [r4, #4]
 80294cc:	dd02      	ble.n	80294d4 <__ssvfiscanf_r+0x240>
 80294ce:	3301      	adds	r3, #1
 80294d0:	6023      	str	r3, [r4, #0]
 80294d2:	e787      	b.n	80293e4 <__ssvfiscanf_r+0x150>
 80294d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80294d6:	4621      	mov	r1, r4
 80294d8:	4630      	mov	r0, r6
 80294da:	4798      	blx	r3
 80294dc:	2800      	cmp	r0, #0
 80294de:	d081      	beq.n	80293e4 <__ssvfiscanf_r+0x150>
 80294e0:	e7b6      	b.n	8029450 <__ssvfiscanf_r+0x1bc>
 80294e2:	2b04      	cmp	r3, #4
 80294e4:	dc06      	bgt.n	80294f4 <__ssvfiscanf_r+0x260>
 80294e6:	466b      	mov	r3, sp
 80294e8:	4622      	mov	r2, r4
 80294ea:	a941      	add	r1, sp, #260	; 0x104
 80294ec:	4630      	mov	r0, r6
 80294ee:	f000 f885 	bl	80295fc <_scanf_i>
 80294f2:	e788      	b.n	8029406 <__ssvfiscanf_r+0x172>
 80294f4:	4b0e      	ldr	r3, [pc, #56]	; (8029530 <__ssvfiscanf_r+0x29c>)
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	f43f aefc 	beq.w	80292f4 <__ssvfiscanf_r+0x60>
 80294fc:	466b      	mov	r3, sp
 80294fe:	4622      	mov	r2, r4
 8029500:	a941      	add	r1, sp, #260	; 0x104
 8029502:	4630      	mov	r0, r6
 8029504:	f3af 8000 	nop.w
 8029508:	e77d      	b.n	8029406 <__ssvfiscanf_r+0x172>
 802950a:	89a3      	ldrh	r3, [r4, #12]
 802950c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029510:	bf18      	it	ne
 8029512:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8029516:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802951e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029520:	e7f9      	b.n	8029516 <__ssvfiscanf_r+0x282>
 8029522:	bf00      	nop
 8029524:	080291e1 	.word	0x080291e1
 8029528:	0802925b 	.word	0x0802925b
 802952c:	080450f2 	.word	0x080450f2
 8029530:	00000000 	.word	0x00000000

08029534 <_scanf_chars>:
 8029534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029538:	4615      	mov	r5, r2
 802953a:	688a      	ldr	r2, [r1, #8]
 802953c:	4680      	mov	r8, r0
 802953e:	460c      	mov	r4, r1
 8029540:	b932      	cbnz	r2, 8029550 <_scanf_chars+0x1c>
 8029542:	698a      	ldr	r2, [r1, #24]
 8029544:	2a00      	cmp	r2, #0
 8029546:	bf14      	ite	ne
 8029548:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 802954c:	2201      	moveq	r2, #1
 802954e:	608a      	str	r2, [r1, #8]
 8029550:	6822      	ldr	r2, [r4, #0]
 8029552:	06d1      	lsls	r1, r2, #27
 8029554:	bf5f      	itttt	pl
 8029556:	681a      	ldrpl	r2, [r3, #0]
 8029558:	1d11      	addpl	r1, r2, #4
 802955a:	6019      	strpl	r1, [r3, #0]
 802955c:	6817      	ldrpl	r7, [r2, #0]
 802955e:	2600      	movs	r6, #0
 8029560:	69a3      	ldr	r3, [r4, #24]
 8029562:	b1db      	cbz	r3, 802959c <_scanf_chars+0x68>
 8029564:	2b01      	cmp	r3, #1
 8029566:	d107      	bne.n	8029578 <_scanf_chars+0x44>
 8029568:	682b      	ldr	r3, [r5, #0]
 802956a:	6962      	ldr	r2, [r4, #20]
 802956c:	781b      	ldrb	r3, [r3, #0]
 802956e:	5cd3      	ldrb	r3, [r2, r3]
 8029570:	b9a3      	cbnz	r3, 802959c <_scanf_chars+0x68>
 8029572:	2e00      	cmp	r6, #0
 8029574:	d132      	bne.n	80295dc <_scanf_chars+0xa8>
 8029576:	e006      	b.n	8029586 <_scanf_chars+0x52>
 8029578:	2b02      	cmp	r3, #2
 802957a:	d007      	beq.n	802958c <_scanf_chars+0x58>
 802957c:	2e00      	cmp	r6, #0
 802957e:	d12d      	bne.n	80295dc <_scanf_chars+0xa8>
 8029580:	69a3      	ldr	r3, [r4, #24]
 8029582:	2b01      	cmp	r3, #1
 8029584:	d12a      	bne.n	80295dc <_scanf_chars+0xa8>
 8029586:	2001      	movs	r0, #1
 8029588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802958c:	f000 fab4 	bl	8029af8 <__locale_ctype_ptr>
 8029590:	682b      	ldr	r3, [r5, #0]
 8029592:	781b      	ldrb	r3, [r3, #0]
 8029594:	4418      	add	r0, r3
 8029596:	7843      	ldrb	r3, [r0, #1]
 8029598:	071b      	lsls	r3, r3, #28
 802959a:	d4ef      	bmi.n	802957c <_scanf_chars+0x48>
 802959c:	6823      	ldr	r3, [r4, #0]
 802959e:	06da      	lsls	r2, r3, #27
 80295a0:	bf5e      	ittt	pl
 80295a2:	682b      	ldrpl	r3, [r5, #0]
 80295a4:	781b      	ldrbpl	r3, [r3, #0]
 80295a6:	703b      	strbpl	r3, [r7, #0]
 80295a8:	682a      	ldr	r2, [r5, #0]
 80295aa:	686b      	ldr	r3, [r5, #4]
 80295ac:	f102 0201 	add.w	r2, r2, #1
 80295b0:	602a      	str	r2, [r5, #0]
 80295b2:	68a2      	ldr	r2, [r4, #8]
 80295b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80295b8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80295bc:	606b      	str	r3, [r5, #4]
 80295be:	f106 0601 	add.w	r6, r6, #1
 80295c2:	bf58      	it	pl
 80295c4:	3701      	addpl	r7, #1
 80295c6:	60a2      	str	r2, [r4, #8]
 80295c8:	b142      	cbz	r2, 80295dc <_scanf_chars+0xa8>
 80295ca:	2b00      	cmp	r3, #0
 80295cc:	dcc8      	bgt.n	8029560 <_scanf_chars+0x2c>
 80295ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80295d2:	4629      	mov	r1, r5
 80295d4:	4640      	mov	r0, r8
 80295d6:	4798      	blx	r3
 80295d8:	2800      	cmp	r0, #0
 80295da:	d0c1      	beq.n	8029560 <_scanf_chars+0x2c>
 80295dc:	6823      	ldr	r3, [r4, #0]
 80295de:	f013 0310 	ands.w	r3, r3, #16
 80295e2:	d105      	bne.n	80295f0 <_scanf_chars+0xbc>
 80295e4:	68e2      	ldr	r2, [r4, #12]
 80295e6:	3201      	adds	r2, #1
 80295e8:	60e2      	str	r2, [r4, #12]
 80295ea:	69a2      	ldr	r2, [r4, #24]
 80295ec:	b102      	cbz	r2, 80295f0 <_scanf_chars+0xbc>
 80295ee:	703b      	strb	r3, [r7, #0]
 80295f0:	6923      	ldr	r3, [r4, #16]
 80295f2:	441e      	add	r6, r3
 80295f4:	6126      	str	r6, [r4, #16]
 80295f6:	2000      	movs	r0, #0
 80295f8:	e7c6      	b.n	8029588 <_scanf_chars+0x54>
	...

080295fc <_scanf_i>:
 80295fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029600:	469a      	mov	sl, r3
 8029602:	4b74      	ldr	r3, [pc, #464]	; (80297d4 <_scanf_i+0x1d8>)
 8029604:	460c      	mov	r4, r1
 8029606:	4683      	mov	fp, r0
 8029608:	4616      	mov	r6, r2
 802960a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802960e:	b087      	sub	sp, #28
 8029610:	ab03      	add	r3, sp, #12
 8029612:	68a7      	ldr	r7, [r4, #8]
 8029614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029618:	4b6f      	ldr	r3, [pc, #444]	; (80297d8 <_scanf_i+0x1dc>)
 802961a:	69a1      	ldr	r1, [r4, #24]
 802961c:	4a6f      	ldr	r2, [pc, #444]	; (80297dc <_scanf_i+0x1e0>)
 802961e:	2903      	cmp	r1, #3
 8029620:	bf08      	it	eq
 8029622:	461a      	moveq	r2, r3
 8029624:	1e7b      	subs	r3, r7, #1
 8029626:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 802962a:	bf84      	itt	hi
 802962c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8029630:	60a3      	strhi	r3, [r4, #8]
 8029632:	6823      	ldr	r3, [r4, #0]
 8029634:	9200      	str	r2, [sp, #0]
 8029636:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802963a:	bf88      	it	hi
 802963c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8029640:	f104 091c 	add.w	r9, r4, #28
 8029644:	6023      	str	r3, [r4, #0]
 8029646:	bf8c      	ite	hi
 8029648:	197f      	addhi	r7, r7, r5
 802964a:	2700      	movls	r7, #0
 802964c:	464b      	mov	r3, r9
 802964e:	f04f 0800 	mov.w	r8, #0
 8029652:	9301      	str	r3, [sp, #4]
 8029654:	6831      	ldr	r1, [r6, #0]
 8029656:	ab03      	add	r3, sp, #12
 8029658:	2202      	movs	r2, #2
 802965a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802965e:	7809      	ldrb	r1, [r1, #0]
 8029660:	f7d6 fdce 	bl	8000200 <memchr>
 8029664:	9b01      	ldr	r3, [sp, #4]
 8029666:	b330      	cbz	r0, 80296b6 <_scanf_i+0xba>
 8029668:	f1b8 0f01 	cmp.w	r8, #1
 802966c:	d15a      	bne.n	8029724 <_scanf_i+0x128>
 802966e:	6862      	ldr	r2, [r4, #4]
 8029670:	b92a      	cbnz	r2, 802967e <_scanf_i+0x82>
 8029672:	6822      	ldr	r2, [r4, #0]
 8029674:	2108      	movs	r1, #8
 8029676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802967a:	6061      	str	r1, [r4, #4]
 802967c:	6022      	str	r2, [r4, #0]
 802967e:	6822      	ldr	r2, [r4, #0]
 8029680:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8029684:	6022      	str	r2, [r4, #0]
 8029686:	68a2      	ldr	r2, [r4, #8]
 8029688:	1e51      	subs	r1, r2, #1
 802968a:	60a1      	str	r1, [r4, #8]
 802968c:	b19a      	cbz	r2, 80296b6 <_scanf_i+0xba>
 802968e:	6832      	ldr	r2, [r6, #0]
 8029690:	1c51      	adds	r1, r2, #1
 8029692:	6031      	str	r1, [r6, #0]
 8029694:	7812      	ldrb	r2, [r2, #0]
 8029696:	701a      	strb	r2, [r3, #0]
 8029698:	1c5d      	adds	r5, r3, #1
 802969a:	6873      	ldr	r3, [r6, #4]
 802969c:	3b01      	subs	r3, #1
 802969e:	2b00      	cmp	r3, #0
 80296a0:	6073      	str	r3, [r6, #4]
 80296a2:	dc07      	bgt.n	80296b4 <_scanf_i+0xb8>
 80296a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80296a8:	4631      	mov	r1, r6
 80296aa:	4658      	mov	r0, fp
 80296ac:	4798      	blx	r3
 80296ae:	2800      	cmp	r0, #0
 80296b0:	f040 8086 	bne.w	80297c0 <_scanf_i+0x1c4>
 80296b4:	462b      	mov	r3, r5
 80296b6:	f108 0801 	add.w	r8, r8, #1
 80296ba:	f1b8 0f03 	cmp.w	r8, #3
 80296be:	d1c8      	bne.n	8029652 <_scanf_i+0x56>
 80296c0:	6862      	ldr	r2, [r4, #4]
 80296c2:	b90a      	cbnz	r2, 80296c8 <_scanf_i+0xcc>
 80296c4:	220a      	movs	r2, #10
 80296c6:	6062      	str	r2, [r4, #4]
 80296c8:	6862      	ldr	r2, [r4, #4]
 80296ca:	4945      	ldr	r1, [pc, #276]	; (80297e0 <_scanf_i+0x1e4>)
 80296cc:	6960      	ldr	r0, [r4, #20]
 80296ce:	9301      	str	r3, [sp, #4]
 80296d0:	1a89      	subs	r1, r1, r2
 80296d2:	f000 f887 	bl	80297e4 <__sccl>
 80296d6:	9b01      	ldr	r3, [sp, #4]
 80296d8:	f04f 0800 	mov.w	r8, #0
 80296dc:	461d      	mov	r5, r3
 80296de:	68a3      	ldr	r3, [r4, #8]
 80296e0:	6822      	ldr	r2, [r4, #0]
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	d03a      	beq.n	802975c <_scanf_i+0x160>
 80296e6:	6831      	ldr	r1, [r6, #0]
 80296e8:	6960      	ldr	r0, [r4, #20]
 80296ea:	f891 c000 	ldrb.w	ip, [r1]
 80296ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80296f2:	2800      	cmp	r0, #0
 80296f4:	d032      	beq.n	802975c <_scanf_i+0x160>
 80296f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80296fa:	d121      	bne.n	8029740 <_scanf_i+0x144>
 80296fc:	0510      	lsls	r0, r2, #20
 80296fe:	d51f      	bpl.n	8029740 <_scanf_i+0x144>
 8029700:	f108 0801 	add.w	r8, r8, #1
 8029704:	b117      	cbz	r7, 802970c <_scanf_i+0x110>
 8029706:	3301      	adds	r3, #1
 8029708:	3f01      	subs	r7, #1
 802970a:	60a3      	str	r3, [r4, #8]
 802970c:	6873      	ldr	r3, [r6, #4]
 802970e:	3b01      	subs	r3, #1
 8029710:	2b00      	cmp	r3, #0
 8029712:	6073      	str	r3, [r6, #4]
 8029714:	dd1b      	ble.n	802974e <_scanf_i+0x152>
 8029716:	6833      	ldr	r3, [r6, #0]
 8029718:	3301      	adds	r3, #1
 802971a:	6033      	str	r3, [r6, #0]
 802971c:	68a3      	ldr	r3, [r4, #8]
 802971e:	3b01      	subs	r3, #1
 8029720:	60a3      	str	r3, [r4, #8]
 8029722:	e7dc      	b.n	80296de <_scanf_i+0xe2>
 8029724:	f1b8 0f02 	cmp.w	r8, #2
 8029728:	d1ad      	bne.n	8029686 <_scanf_i+0x8a>
 802972a:	6822      	ldr	r2, [r4, #0]
 802972c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8029730:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8029734:	d1bf      	bne.n	80296b6 <_scanf_i+0xba>
 8029736:	2110      	movs	r1, #16
 8029738:	6061      	str	r1, [r4, #4]
 802973a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802973e:	e7a1      	b.n	8029684 <_scanf_i+0x88>
 8029740:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8029744:	6022      	str	r2, [r4, #0]
 8029746:	780b      	ldrb	r3, [r1, #0]
 8029748:	702b      	strb	r3, [r5, #0]
 802974a:	3501      	adds	r5, #1
 802974c:	e7de      	b.n	802970c <_scanf_i+0x110>
 802974e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029752:	4631      	mov	r1, r6
 8029754:	4658      	mov	r0, fp
 8029756:	4798      	blx	r3
 8029758:	2800      	cmp	r0, #0
 802975a:	d0df      	beq.n	802971c <_scanf_i+0x120>
 802975c:	6823      	ldr	r3, [r4, #0]
 802975e:	05d9      	lsls	r1, r3, #23
 8029760:	d50c      	bpl.n	802977c <_scanf_i+0x180>
 8029762:	454d      	cmp	r5, r9
 8029764:	d908      	bls.n	8029778 <_scanf_i+0x17c>
 8029766:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802976a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802976e:	4632      	mov	r2, r6
 8029770:	4658      	mov	r0, fp
 8029772:	4798      	blx	r3
 8029774:	1e6f      	subs	r7, r5, #1
 8029776:	463d      	mov	r5, r7
 8029778:	454d      	cmp	r5, r9
 802977a:	d029      	beq.n	80297d0 <_scanf_i+0x1d4>
 802977c:	6822      	ldr	r2, [r4, #0]
 802977e:	f012 0210 	ands.w	r2, r2, #16
 8029782:	d113      	bne.n	80297ac <_scanf_i+0x1b0>
 8029784:	702a      	strb	r2, [r5, #0]
 8029786:	6863      	ldr	r3, [r4, #4]
 8029788:	9e00      	ldr	r6, [sp, #0]
 802978a:	4649      	mov	r1, r9
 802978c:	4658      	mov	r0, fp
 802978e:	47b0      	blx	r6
 8029790:	f8da 3000 	ldr.w	r3, [sl]
 8029794:	6821      	ldr	r1, [r4, #0]
 8029796:	1d1a      	adds	r2, r3, #4
 8029798:	f8ca 2000 	str.w	r2, [sl]
 802979c:	f011 0f20 	tst.w	r1, #32
 80297a0:	681b      	ldr	r3, [r3, #0]
 80297a2:	d010      	beq.n	80297c6 <_scanf_i+0x1ca>
 80297a4:	6018      	str	r0, [r3, #0]
 80297a6:	68e3      	ldr	r3, [r4, #12]
 80297a8:	3301      	adds	r3, #1
 80297aa:	60e3      	str	r3, [r4, #12]
 80297ac:	eba5 0509 	sub.w	r5, r5, r9
 80297b0:	44a8      	add	r8, r5
 80297b2:	6925      	ldr	r5, [r4, #16]
 80297b4:	4445      	add	r5, r8
 80297b6:	6125      	str	r5, [r4, #16]
 80297b8:	2000      	movs	r0, #0
 80297ba:	b007      	add	sp, #28
 80297bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297c0:	f04f 0800 	mov.w	r8, #0
 80297c4:	e7ca      	b.n	802975c <_scanf_i+0x160>
 80297c6:	07ca      	lsls	r2, r1, #31
 80297c8:	bf4c      	ite	mi
 80297ca:	8018      	strhmi	r0, [r3, #0]
 80297cc:	6018      	strpl	r0, [r3, #0]
 80297ce:	e7ea      	b.n	80297a6 <_scanf_i+0x1aa>
 80297d0:	2001      	movs	r0, #1
 80297d2:	e7f2      	b.n	80297ba <_scanf_i+0x1be>
 80297d4:	0802a4d0 	.word	0x0802a4d0
 80297d8:	08029941 	.word	0x08029941
 80297dc:	08029a59 	.word	0x08029a59
 80297e0:	0804510d 	.word	0x0804510d

080297e4 <__sccl>:
 80297e4:	b570      	push	{r4, r5, r6, lr}
 80297e6:	780b      	ldrb	r3, [r1, #0]
 80297e8:	2b5e      	cmp	r3, #94	; 0x5e
 80297ea:	bf13      	iteet	ne
 80297ec:	1c4a      	addne	r2, r1, #1
 80297ee:	1c8a      	addeq	r2, r1, #2
 80297f0:	784b      	ldrbeq	r3, [r1, #1]
 80297f2:	2100      	movne	r1, #0
 80297f4:	bf08      	it	eq
 80297f6:	2101      	moveq	r1, #1
 80297f8:	1e44      	subs	r4, r0, #1
 80297fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80297fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8029802:	42ac      	cmp	r4, r5
 8029804:	d1fb      	bne.n	80297fe <__sccl+0x1a>
 8029806:	b913      	cbnz	r3, 802980e <__sccl+0x2a>
 8029808:	3a01      	subs	r2, #1
 802980a:	4610      	mov	r0, r2
 802980c:	bd70      	pop	{r4, r5, r6, pc}
 802980e:	f081 0401 	eor.w	r4, r1, #1
 8029812:	54c4      	strb	r4, [r0, r3]
 8029814:	1c51      	adds	r1, r2, #1
 8029816:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 802981a:	2d2d      	cmp	r5, #45	; 0x2d
 802981c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8029820:	460a      	mov	r2, r1
 8029822:	d006      	beq.n	8029832 <__sccl+0x4e>
 8029824:	2d5d      	cmp	r5, #93	; 0x5d
 8029826:	d0f0      	beq.n	802980a <__sccl+0x26>
 8029828:	b90d      	cbnz	r5, 802982e <__sccl+0x4a>
 802982a:	4632      	mov	r2, r6
 802982c:	e7ed      	b.n	802980a <__sccl+0x26>
 802982e:	462b      	mov	r3, r5
 8029830:	e7ef      	b.n	8029812 <__sccl+0x2e>
 8029832:	780e      	ldrb	r6, [r1, #0]
 8029834:	2e5d      	cmp	r6, #93	; 0x5d
 8029836:	d0fa      	beq.n	802982e <__sccl+0x4a>
 8029838:	42b3      	cmp	r3, r6
 802983a:	dcf8      	bgt.n	802982e <__sccl+0x4a>
 802983c:	3301      	adds	r3, #1
 802983e:	429e      	cmp	r6, r3
 8029840:	54c4      	strb	r4, [r0, r3]
 8029842:	dcfb      	bgt.n	802983c <__sccl+0x58>
 8029844:	3102      	adds	r1, #2
 8029846:	e7e6      	b.n	8029816 <__sccl+0x32>

08029848 <_strtol_l.isra.0>:
 8029848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802984c:	4680      	mov	r8, r0
 802984e:	4689      	mov	r9, r1
 8029850:	4692      	mov	sl, r2
 8029852:	461e      	mov	r6, r3
 8029854:	460f      	mov	r7, r1
 8029856:	463d      	mov	r5, r7
 8029858:	9808      	ldr	r0, [sp, #32]
 802985a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802985e:	f000 f947 	bl	8029af0 <__locale_ctype_ptr_l>
 8029862:	4420      	add	r0, r4
 8029864:	7843      	ldrb	r3, [r0, #1]
 8029866:	f013 0308 	ands.w	r3, r3, #8
 802986a:	d132      	bne.n	80298d2 <_strtol_l.isra.0+0x8a>
 802986c:	2c2d      	cmp	r4, #45	; 0x2d
 802986e:	d132      	bne.n	80298d6 <_strtol_l.isra.0+0x8e>
 8029870:	787c      	ldrb	r4, [r7, #1]
 8029872:	1cbd      	adds	r5, r7, #2
 8029874:	2201      	movs	r2, #1
 8029876:	2e00      	cmp	r6, #0
 8029878:	d05d      	beq.n	8029936 <_strtol_l.isra.0+0xee>
 802987a:	2e10      	cmp	r6, #16
 802987c:	d109      	bne.n	8029892 <_strtol_l.isra.0+0x4a>
 802987e:	2c30      	cmp	r4, #48	; 0x30
 8029880:	d107      	bne.n	8029892 <_strtol_l.isra.0+0x4a>
 8029882:	782b      	ldrb	r3, [r5, #0]
 8029884:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029888:	2b58      	cmp	r3, #88	; 0x58
 802988a:	d14f      	bne.n	802992c <_strtol_l.isra.0+0xe4>
 802988c:	786c      	ldrb	r4, [r5, #1]
 802988e:	2610      	movs	r6, #16
 8029890:	3502      	adds	r5, #2
 8029892:	2a00      	cmp	r2, #0
 8029894:	bf14      	ite	ne
 8029896:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802989a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802989e:	2700      	movs	r7, #0
 80298a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80298a4:	4638      	mov	r0, r7
 80298a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80298aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80298ae:	2b09      	cmp	r3, #9
 80298b0:	d817      	bhi.n	80298e2 <_strtol_l.isra.0+0x9a>
 80298b2:	461c      	mov	r4, r3
 80298b4:	42a6      	cmp	r6, r4
 80298b6:	dd23      	ble.n	8029900 <_strtol_l.isra.0+0xb8>
 80298b8:	1c7b      	adds	r3, r7, #1
 80298ba:	d007      	beq.n	80298cc <_strtol_l.isra.0+0x84>
 80298bc:	4584      	cmp	ip, r0
 80298be:	d31c      	bcc.n	80298fa <_strtol_l.isra.0+0xb2>
 80298c0:	d101      	bne.n	80298c6 <_strtol_l.isra.0+0x7e>
 80298c2:	45a6      	cmp	lr, r4
 80298c4:	db19      	blt.n	80298fa <_strtol_l.isra.0+0xb2>
 80298c6:	fb00 4006 	mla	r0, r0, r6, r4
 80298ca:	2701      	movs	r7, #1
 80298cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80298d0:	e7eb      	b.n	80298aa <_strtol_l.isra.0+0x62>
 80298d2:	462f      	mov	r7, r5
 80298d4:	e7bf      	b.n	8029856 <_strtol_l.isra.0+0xe>
 80298d6:	2c2b      	cmp	r4, #43	; 0x2b
 80298d8:	bf04      	itt	eq
 80298da:	1cbd      	addeq	r5, r7, #2
 80298dc:	787c      	ldrbeq	r4, [r7, #1]
 80298de:	461a      	mov	r2, r3
 80298e0:	e7c9      	b.n	8029876 <_strtol_l.isra.0+0x2e>
 80298e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80298e6:	2b19      	cmp	r3, #25
 80298e8:	d801      	bhi.n	80298ee <_strtol_l.isra.0+0xa6>
 80298ea:	3c37      	subs	r4, #55	; 0x37
 80298ec:	e7e2      	b.n	80298b4 <_strtol_l.isra.0+0x6c>
 80298ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80298f2:	2b19      	cmp	r3, #25
 80298f4:	d804      	bhi.n	8029900 <_strtol_l.isra.0+0xb8>
 80298f6:	3c57      	subs	r4, #87	; 0x57
 80298f8:	e7dc      	b.n	80298b4 <_strtol_l.isra.0+0x6c>
 80298fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80298fe:	e7e5      	b.n	80298cc <_strtol_l.isra.0+0x84>
 8029900:	1c7b      	adds	r3, r7, #1
 8029902:	d108      	bne.n	8029916 <_strtol_l.isra.0+0xce>
 8029904:	2322      	movs	r3, #34	; 0x22
 8029906:	f8c8 3000 	str.w	r3, [r8]
 802990a:	4608      	mov	r0, r1
 802990c:	f1ba 0f00 	cmp.w	sl, #0
 8029910:	d107      	bne.n	8029922 <_strtol_l.isra.0+0xda>
 8029912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029916:	b102      	cbz	r2, 802991a <_strtol_l.isra.0+0xd2>
 8029918:	4240      	negs	r0, r0
 802991a:	f1ba 0f00 	cmp.w	sl, #0
 802991e:	d0f8      	beq.n	8029912 <_strtol_l.isra.0+0xca>
 8029920:	b10f      	cbz	r7, 8029926 <_strtol_l.isra.0+0xde>
 8029922:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8029926:	f8ca 9000 	str.w	r9, [sl]
 802992a:	e7f2      	b.n	8029912 <_strtol_l.isra.0+0xca>
 802992c:	2430      	movs	r4, #48	; 0x30
 802992e:	2e00      	cmp	r6, #0
 8029930:	d1af      	bne.n	8029892 <_strtol_l.isra.0+0x4a>
 8029932:	2608      	movs	r6, #8
 8029934:	e7ad      	b.n	8029892 <_strtol_l.isra.0+0x4a>
 8029936:	2c30      	cmp	r4, #48	; 0x30
 8029938:	d0a3      	beq.n	8029882 <_strtol_l.isra.0+0x3a>
 802993a:	260a      	movs	r6, #10
 802993c:	e7a9      	b.n	8029892 <_strtol_l.isra.0+0x4a>
	...

08029940 <_strtol_r>:
 8029940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029942:	4c06      	ldr	r4, [pc, #24]	; (802995c <_strtol_r+0x1c>)
 8029944:	4d06      	ldr	r5, [pc, #24]	; (8029960 <_strtol_r+0x20>)
 8029946:	6824      	ldr	r4, [r4, #0]
 8029948:	6a24      	ldr	r4, [r4, #32]
 802994a:	2c00      	cmp	r4, #0
 802994c:	bf08      	it	eq
 802994e:	462c      	moveq	r4, r5
 8029950:	9400      	str	r4, [sp, #0]
 8029952:	f7ff ff79 	bl	8029848 <_strtol_l.isra.0>
 8029956:	b003      	add	sp, #12
 8029958:	bd30      	pop	{r4, r5, pc}
 802995a:	bf00      	nop
 802995c:	2000285c 	.word	0x2000285c
 8029960:	200028c0 	.word	0x200028c0

08029964 <_strtoul_l.isra.0>:
 8029964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029968:	4680      	mov	r8, r0
 802996a:	4689      	mov	r9, r1
 802996c:	4692      	mov	sl, r2
 802996e:	461e      	mov	r6, r3
 8029970:	460f      	mov	r7, r1
 8029972:	463d      	mov	r5, r7
 8029974:	9808      	ldr	r0, [sp, #32]
 8029976:	f815 4b01 	ldrb.w	r4, [r5], #1
 802997a:	f000 f8b9 	bl	8029af0 <__locale_ctype_ptr_l>
 802997e:	4420      	add	r0, r4
 8029980:	7843      	ldrb	r3, [r0, #1]
 8029982:	f013 0308 	ands.w	r3, r3, #8
 8029986:	d130      	bne.n	80299ea <_strtoul_l.isra.0+0x86>
 8029988:	2c2d      	cmp	r4, #45	; 0x2d
 802998a:	d130      	bne.n	80299ee <_strtoul_l.isra.0+0x8a>
 802998c:	787c      	ldrb	r4, [r7, #1]
 802998e:	1cbd      	adds	r5, r7, #2
 8029990:	2101      	movs	r1, #1
 8029992:	2e00      	cmp	r6, #0
 8029994:	d05c      	beq.n	8029a50 <_strtoul_l.isra.0+0xec>
 8029996:	2e10      	cmp	r6, #16
 8029998:	d109      	bne.n	80299ae <_strtoul_l.isra.0+0x4a>
 802999a:	2c30      	cmp	r4, #48	; 0x30
 802999c:	d107      	bne.n	80299ae <_strtoul_l.isra.0+0x4a>
 802999e:	782b      	ldrb	r3, [r5, #0]
 80299a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80299a4:	2b58      	cmp	r3, #88	; 0x58
 80299a6:	d14e      	bne.n	8029a46 <_strtoul_l.isra.0+0xe2>
 80299a8:	786c      	ldrb	r4, [r5, #1]
 80299aa:	2610      	movs	r6, #16
 80299ac:	3502      	adds	r5, #2
 80299ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80299b2:	2300      	movs	r3, #0
 80299b4:	fbb2 f2f6 	udiv	r2, r2, r6
 80299b8:	fb06 fc02 	mul.w	ip, r6, r2
 80299bc:	ea6f 0c0c 	mvn.w	ip, ip
 80299c0:	4618      	mov	r0, r3
 80299c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80299c6:	2f09      	cmp	r7, #9
 80299c8:	d817      	bhi.n	80299fa <_strtoul_l.isra.0+0x96>
 80299ca:	463c      	mov	r4, r7
 80299cc:	42a6      	cmp	r6, r4
 80299ce:	dd23      	ble.n	8029a18 <_strtoul_l.isra.0+0xb4>
 80299d0:	2b00      	cmp	r3, #0
 80299d2:	db1e      	blt.n	8029a12 <_strtoul_l.isra.0+0xae>
 80299d4:	4282      	cmp	r2, r0
 80299d6:	d31c      	bcc.n	8029a12 <_strtoul_l.isra.0+0xae>
 80299d8:	d101      	bne.n	80299de <_strtoul_l.isra.0+0x7a>
 80299da:	45a4      	cmp	ip, r4
 80299dc:	db19      	blt.n	8029a12 <_strtoul_l.isra.0+0xae>
 80299de:	fb00 4006 	mla	r0, r0, r6, r4
 80299e2:	2301      	movs	r3, #1
 80299e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80299e8:	e7eb      	b.n	80299c2 <_strtoul_l.isra.0+0x5e>
 80299ea:	462f      	mov	r7, r5
 80299ec:	e7c1      	b.n	8029972 <_strtoul_l.isra.0+0xe>
 80299ee:	2c2b      	cmp	r4, #43	; 0x2b
 80299f0:	bf04      	itt	eq
 80299f2:	1cbd      	addeq	r5, r7, #2
 80299f4:	787c      	ldrbeq	r4, [r7, #1]
 80299f6:	4619      	mov	r1, r3
 80299f8:	e7cb      	b.n	8029992 <_strtoul_l.isra.0+0x2e>
 80299fa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80299fe:	2f19      	cmp	r7, #25
 8029a00:	d801      	bhi.n	8029a06 <_strtoul_l.isra.0+0xa2>
 8029a02:	3c37      	subs	r4, #55	; 0x37
 8029a04:	e7e2      	b.n	80299cc <_strtoul_l.isra.0+0x68>
 8029a06:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8029a0a:	2f19      	cmp	r7, #25
 8029a0c:	d804      	bhi.n	8029a18 <_strtoul_l.isra.0+0xb4>
 8029a0e:	3c57      	subs	r4, #87	; 0x57
 8029a10:	e7dc      	b.n	80299cc <_strtoul_l.isra.0+0x68>
 8029a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029a16:	e7e5      	b.n	80299e4 <_strtoul_l.isra.0+0x80>
 8029a18:	2b00      	cmp	r3, #0
 8029a1a:	da09      	bge.n	8029a30 <_strtoul_l.isra.0+0xcc>
 8029a1c:	2322      	movs	r3, #34	; 0x22
 8029a1e:	f8c8 3000 	str.w	r3, [r8]
 8029a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029a26:	f1ba 0f00 	cmp.w	sl, #0
 8029a2a:	d107      	bne.n	8029a3c <_strtoul_l.isra.0+0xd8>
 8029a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a30:	b101      	cbz	r1, 8029a34 <_strtoul_l.isra.0+0xd0>
 8029a32:	4240      	negs	r0, r0
 8029a34:	f1ba 0f00 	cmp.w	sl, #0
 8029a38:	d0f8      	beq.n	8029a2c <_strtoul_l.isra.0+0xc8>
 8029a3a:	b10b      	cbz	r3, 8029a40 <_strtoul_l.isra.0+0xdc>
 8029a3c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8029a40:	f8ca 9000 	str.w	r9, [sl]
 8029a44:	e7f2      	b.n	8029a2c <_strtoul_l.isra.0+0xc8>
 8029a46:	2430      	movs	r4, #48	; 0x30
 8029a48:	2e00      	cmp	r6, #0
 8029a4a:	d1b0      	bne.n	80299ae <_strtoul_l.isra.0+0x4a>
 8029a4c:	2608      	movs	r6, #8
 8029a4e:	e7ae      	b.n	80299ae <_strtoul_l.isra.0+0x4a>
 8029a50:	2c30      	cmp	r4, #48	; 0x30
 8029a52:	d0a4      	beq.n	802999e <_strtoul_l.isra.0+0x3a>
 8029a54:	260a      	movs	r6, #10
 8029a56:	e7aa      	b.n	80299ae <_strtoul_l.isra.0+0x4a>

08029a58 <_strtoul_r>:
 8029a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029a5a:	4c06      	ldr	r4, [pc, #24]	; (8029a74 <_strtoul_r+0x1c>)
 8029a5c:	4d06      	ldr	r5, [pc, #24]	; (8029a78 <_strtoul_r+0x20>)
 8029a5e:	6824      	ldr	r4, [r4, #0]
 8029a60:	6a24      	ldr	r4, [r4, #32]
 8029a62:	2c00      	cmp	r4, #0
 8029a64:	bf08      	it	eq
 8029a66:	462c      	moveq	r4, r5
 8029a68:	9400      	str	r4, [sp, #0]
 8029a6a:	f7ff ff7b 	bl	8029964 <_strtoul_l.isra.0>
 8029a6e:	b003      	add	sp, #12
 8029a70:	bd30      	pop	{r4, r5, pc}
 8029a72:	bf00      	nop
 8029a74:	2000285c 	.word	0x2000285c
 8029a78:	200028c0 	.word	0x200028c0

08029a7c <__submore>:
 8029a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029a80:	460c      	mov	r4, r1
 8029a82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029a88:	4299      	cmp	r1, r3
 8029a8a:	d11d      	bne.n	8029ac8 <__submore+0x4c>
 8029a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8029a90:	f7fd fbe8 	bl	8027264 <_malloc_r>
 8029a94:	b918      	cbnz	r0, 8029a9e <__submore+0x22>
 8029a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029aa2:	63a3      	str	r3, [r4, #56]	; 0x38
 8029aa4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8029aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8029aaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8029aae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8029ab2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8029ab6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8029aba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8029abe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8029ac2:	6020      	str	r0, [r4, #0]
 8029ac4:	2000      	movs	r0, #0
 8029ac6:	e7e8      	b.n	8029a9a <__submore+0x1e>
 8029ac8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8029aca:	0077      	lsls	r7, r6, #1
 8029acc:	463a      	mov	r2, r7
 8029ace:	f000 f84c 	bl	8029b6a <_realloc_r>
 8029ad2:	4605      	mov	r5, r0
 8029ad4:	2800      	cmp	r0, #0
 8029ad6:	d0de      	beq.n	8029a96 <__submore+0x1a>
 8029ad8:	eb00 0806 	add.w	r8, r0, r6
 8029adc:	4601      	mov	r1, r0
 8029ade:	4632      	mov	r2, r6
 8029ae0:	4640      	mov	r0, r8
 8029ae2:	f7fd fb5d 	bl	80271a0 <memcpy>
 8029ae6:	f8c4 8000 	str.w	r8, [r4]
 8029aea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8029aee:	e7e9      	b.n	8029ac4 <__submore+0x48>

08029af0 <__locale_ctype_ptr_l>:
 8029af0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8029af4:	4770      	bx	lr
	...

08029af8 <__locale_ctype_ptr>:
 8029af8:	4b04      	ldr	r3, [pc, #16]	; (8029b0c <__locale_ctype_ptr+0x14>)
 8029afa:	4a05      	ldr	r2, [pc, #20]	; (8029b10 <__locale_ctype_ptr+0x18>)
 8029afc:	681b      	ldr	r3, [r3, #0]
 8029afe:	6a1b      	ldr	r3, [r3, #32]
 8029b00:	2b00      	cmp	r3, #0
 8029b02:	bf08      	it	eq
 8029b04:	4613      	moveq	r3, r2
 8029b06:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8029b0a:	4770      	bx	lr
 8029b0c:	2000285c 	.word	0x2000285c
 8029b10:	200028c0 	.word	0x200028c0

08029b14 <__ascii_mbtowc>:
 8029b14:	b082      	sub	sp, #8
 8029b16:	b901      	cbnz	r1, 8029b1a <__ascii_mbtowc+0x6>
 8029b18:	a901      	add	r1, sp, #4
 8029b1a:	b142      	cbz	r2, 8029b2e <__ascii_mbtowc+0x1a>
 8029b1c:	b14b      	cbz	r3, 8029b32 <__ascii_mbtowc+0x1e>
 8029b1e:	7813      	ldrb	r3, [r2, #0]
 8029b20:	600b      	str	r3, [r1, #0]
 8029b22:	7812      	ldrb	r2, [r2, #0]
 8029b24:	1c10      	adds	r0, r2, #0
 8029b26:	bf18      	it	ne
 8029b28:	2001      	movne	r0, #1
 8029b2a:	b002      	add	sp, #8
 8029b2c:	4770      	bx	lr
 8029b2e:	4610      	mov	r0, r2
 8029b30:	e7fb      	b.n	8029b2a <__ascii_mbtowc+0x16>
 8029b32:	f06f 0001 	mvn.w	r0, #1
 8029b36:	e7f8      	b.n	8029b2a <__ascii_mbtowc+0x16>

08029b38 <memmove>:
 8029b38:	4288      	cmp	r0, r1
 8029b3a:	b510      	push	{r4, lr}
 8029b3c:	eb01 0302 	add.w	r3, r1, r2
 8029b40:	d807      	bhi.n	8029b52 <memmove+0x1a>
 8029b42:	1e42      	subs	r2, r0, #1
 8029b44:	4299      	cmp	r1, r3
 8029b46:	d00a      	beq.n	8029b5e <memmove+0x26>
 8029b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029b4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8029b50:	e7f8      	b.n	8029b44 <memmove+0xc>
 8029b52:	4283      	cmp	r3, r0
 8029b54:	d9f5      	bls.n	8029b42 <memmove+0xa>
 8029b56:	1881      	adds	r1, r0, r2
 8029b58:	1ad2      	subs	r2, r2, r3
 8029b5a:	42d3      	cmn	r3, r2
 8029b5c:	d100      	bne.n	8029b60 <memmove+0x28>
 8029b5e:	bd10      	pop	{r4, pc}
 8029b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029b64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8029b68:	e7f7      	b.n	8029b5a <memmove+0x22>

08029b6a <_realloc_r>:
 8029b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029b6c:	4607      	mov	r7, r0
 8029b6e:	4614      	mov	r4, r2
 8029b70:	460e      	mov	r6, r1
 8029b72:	b921      	cbnz	r1, 8029b7e <_realloc_r+0x14>
 8029b74:	4611      	mov	r1, r2
 8029b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8029b7a:	f7fd bb73 	b.w	8027264 <_malloc_r>
 8029b7e:	b922      	cbnz	r2, 8029b8a <_realloc_r+0x20>
 8029b80:	f7fd fb22 	bl	80271c8 <_free_r>
 8029b84:	4625      	mov	r5, r4
 8029b86:	4628      	mov	r0, r5
 8029b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029b8a:	f000 f821 	bl	8029bd0 <_malloc_usable_size_r>
 8029b8e:	42a0      	cmp	r0, r4
 8029b90:	d20f      	bcs.n	8029bb2 <_realloc_r+0x48>
 8029b92:	4621      	mov	r1, r4
 8029b94:	4638      	mov	r0, r7
 8029b96:	f7fd fb65 	bl	8027264 <_malloc_r>
 8029b9a:	4605      	mov	r5, r0
 8029b9c:	2800      	cmp	r0, #0
 8029b9e:	d0f2      	beq.n	8029b86 <_realloc_r+0x1c>
 8029ba0:	4631      	mov	r1, r6
 8029ba2:	4622      	mov	r2, r4
 8029ba4:	f7fd fafc 	bl	80271a0 <memcpy>
 8029ba8:	4631      	mov	r1, r6
 8029baa:	4638      	mov	r0, r7
 8029bac:	f7fd fb0c 	bl	80271c8 <_free_r>
 8029bb0:	e7e9      	b.n	8029b86 <_realloc_r+0x1c>
 8029bb2:	4635      	mov	r5, r6
 8029bb4:	e7e7      	b.n	8029b86 <_realloc_r+0x1c>

08029bb6 <__ascii_wctomb>:
 8029bb6:	b149      	cbz	r1, 8029bcc <__ascii_wctomb+0x16>
 8029bb8:	2aff      	cmp	r2, #255	; 0xff
 8029bba:	bf85      	ittet	hi
 8029bbc:	238a      	movhi	r3, #138	; 0x8a
 8029bbe:	6003      	strhi	r3, [r0, #0]
 8029bc0:	700a      	strbls	r2, [r1, #0]
 8029bc2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8029bc6:	bf98      	it	ls
 8029bc8:	2001      	movls	r0, #1
 8029bca:	4770      	bx	lr
 8029bcc:	4608      	mov	r0, r1
 8029bce:	4770      	bx	lr

08029bd0 <_malloc_usable_size_r>:
 8029bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029bd4:	1f18      	subs	r0, r3, #4
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	bfbc      	itt	lt
 8029bda:	580b      	ldrlt	r3, [r1, r0]
 8029bdc:	18c0      	addlt	r0, r0, r3
 8029bde:	4770      	bx	lr

08029be0 <_init>:
 8029be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029be2:	bf00      	nop
 8029be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029be6:	bc08      	pop	{r3}
 8029be8:	469e      	mov	lr, r3
 8029bea:	4770      	bx	lr

08029bec <_fini>:
 8029bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029bee:	bf00      	nop
 8029bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029bf2:	bc08      	pop	{r3}
 8029bf4:	469e      	mov	lr, r3
 8029bf6:	4770      	bx	lr
