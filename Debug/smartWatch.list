
smartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b62c  08029c80  08029c80  00039c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080452ac  080452ac  00062a28  2**0
                  CONTENTS
  4 .ARM          00000008  080452ac  080452ac  000552ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080452b4  080452b4  00062a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080452b4  080452b4  000552b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080452b8  080452b8  000552b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  080452bc  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049bc  20002a28  08047ce4  00062a28  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200073e4  08047ce4  000673e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00062a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008ea4d  00000000  00000000  00062a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ec3d  00000000  00000000  000f14a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003358  00000000  00000000  001000e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f98  00000000  00000000  00103440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003fd60  00000000  00000000  001063d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0006d162  00000000  00000000  00146138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df386  00000000  00000000  001b329a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00292620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d720  00000000  00000000  0029269c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a28 	.word	0x20002a28
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08029c68 	.word	0x08029c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a2c 	.word	0x20002a2c
 80001cc:	08029c68 	.word	0x08029c68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fd28 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f82a 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fa6c 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 fa4a 	bl	8001450 <MX_DMA_Init>
  MX_RTC_Init();
 8000fbc:	f000 f8a6 	bl	800110c <MX_RTC_Init>
  MX_SPI1_Init();
 8000fc0:	f000 f8fe 	bl	80011c0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000fc4:	f000 f9cc 	bl	8001360 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000fc8:	f000 fa18 	bl	80013fc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000fcc:	f000 f97a 	bl	80012c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fd0:	f000 f92c 	bl	800122c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //tos_Flash_Init();
  tos_Tft_init();
 8000fd4:	f01e f9dc 	bl	801f390 <tos_Tft_init>
  tos_Get_Rtc(&hrtc);
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <main+0x58>)
 8000fda:	f025 fe6b 	bl	8026cb4 <tos_Get_Rtc>
  tos_Screen_Init();
 8000fde:	f025 fd21 	bl	8026a24 <tos_Screen_Init>
	ST7789_UnSelect();
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <main+0x5c>)
 8000fe8:	f001 fb4a 	bl	8002680 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 8000fec:	f025 fe72 	bl	8026cd4 <tos_Get_Current_Screen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f025 fe38 	bl	8026c68 <tos_Screen_Variables_Getter>
  tos_ScreenController();
 8000ff8:	f025 fd86 	bl	8026b08 <tos_ScreenController>
	  tos_Screen_Variables_Getter(tos_Get_Current_Screen());
 8000ffc:	e7f6      	b.n	8000fec <main+0x44>
 8000ffe:	bf00      	nop
 8001000:	20006938 	.word	0x20006938
 8001004:	40020000 	.word	0x40020000

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b098      	sub	sp, #96	; 0x60
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f026 f90f 	bl	802723a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <SystemClock_Config+0xfc>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a30      	ldr	r2, [pc, #192]	; (8001104 <SystemClock_Config+0xfc>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <SystemClock_Config+0xfc>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <SystemClock_Config+0x100>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <SystemClock_Config+0x100>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0x100>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001072:	2309      	movs	r3, #9
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800108e:	23a8      	movs	r3, #168	; 0xa8
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001096:	2304      	movs	r3, #4
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb08 	bl	80026b4 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010aa:	f000 fa6d 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fd61 	bl	8002b94 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010d8:	f000 fa56 	bl	8001588 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010dc:	2302      	movs	r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 ff44 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010f6:	f000 fa47 	bl	8001588 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3760      	adds	r7, #96	; 0x60
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_RTC_Init+0xac>)
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_RTC_Init+0xb0>)
 8001128:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_RTC_Init+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_RTC_Init+0xac>)
 8001132:	227f      	movs	r2, #127	; 0x7f
 8001134:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_RTC_Init+0xac>)
 8001138:	22f9      	movs	r2, #249	; 0xf9
 800113a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_RTC_Init+0xac>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_RTC_Init+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_RTC_Init+0xac>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <MX_RTC_Init+0xac>)
 8001150:	f001 fff4 	bl	800313c <HAL_RTC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 fa15 	bl	8001588 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_RTC_Init+0xac>)
 800117a:	f002 f870 	bl	800325e <HAL_RTC_SetTime>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001184:	f000 fa00 	bl	8001588 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001188:	2301      	movs	r3, #1
 800118a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800118c:	2301      	movs	r3, #1
 800118e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_RTC_Init+0xac>)
 80011a0:	f002 f978 	bl	8003494 <HAL_RTC_SetDate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011aa:	f000 f9ed 	bl	8001588 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20006938 	.word	0x20006938
 80011bc:	40002800 	.word	0x40002800

080011c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI1_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI1_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI1_Init+0x64>)
 8001212:	f002 fac5 	bl	80037a0 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f9b4 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20006998 	.word	0x20006998
 8001228:	40013000 	.word	0x40013000

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM2_Init+0x94>)
 800124a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001252:	2254      	movs	r2, #84	; 0x54
 8001254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM2_Init+0x94>)
 800125e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001262:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM2_Init+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_TIM2_Init+0x94>)
 8001272:	f002 fcd9 	bl	8003c28 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800127c:	f000 f984 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM2_Init+0x94>)
 800128e:	f002 fe4d 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001298:	f000 f976 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM2_Init+0x94>)
 80012aa:	f003 f863 	bl	8004374 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f968 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200069f0 	.word	0x200069f0

080012c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_TIM3_Init+0x94>)
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <MX_TIM3_Init+0x98>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM3_Init+0x94>)
 80012e8:	2254      	movs	r2, #84	; 0x54
 80012ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM3_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM3_Init+0x94>)
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_TIM3_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_TIM3_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_TIM3_Init+0x94>)
 8001308:	f002 fc8e 	bl	8003c28 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 f939 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM3_Init+0x94>)
 8001324:	f002 fe02 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800132e:	f000 f92b 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM3_Init+0x94>)
 8001340:	f003 f818 	bl	8004374 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800134a:	f000 f91d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200068f8 	.word	0x200068f8
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_TIM4_Init+0x94>)
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <MX_TIM4_Init+0x98>)
 8001380:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_TIM4_Init+0x94>)
 8001384:	2254      	movs	r2, #84	; 0x54
 8001386:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_TIM4_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_TIM4_Init+0x94>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_TIM4_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_TIM4_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_TIM4_Init+0x94>)
 80013a4:	f002 fc40 	bl	8003c28 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f8eb 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_TIM4_Init+0x94>)
 80013c0:	f002 fdb4 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 f8dd 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_TIM4_Init+0x94>)
 80013dc:	f002 ffca 	bl	8004374 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013e6:	f000 f8cf 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200068b8 	.word	0x200068b8
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART6_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800140c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART6_UART_Init+0x4c>)
 8001434:	f003 f82e 	bl	8004494 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 f8a3 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  /* USER CODE END USART6_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20006958 	.word	0x20006958
 800144c:	40011400 	.word	0x40011400

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	203b      	movs	r0, #59	; 0x3b
 8001478:	f000 fc31 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800147c:	203b      	movs	r0, #59	; 0x3b
 800147e:	f000 fc4a 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_GPIO_Init+0xe8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0xe8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <MX_GPIO_Init+0xe8>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0xe8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	210e      	movs	r1, #14
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_GPIO_Init+0xec>)
 800151c:	f001 f8b0 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Left_Btn_Pin Enter_Btn_Pin Right_Btn_Pin */
  GPIO_InitStruct.Pin = Left_Btn_Pin|Enter_Btn_Pin|Right_Btn_Pin;
 8001520:	2370      	movs	r3, #112	; 0x70
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0xf0>)
 8001534:	f000 fef2 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_RST_Pin ST7789_DC_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|ST7789_DC_Pin|ST7789_CS_Pin;
 8001538:	230e      	movs	r3, #14
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0xec>)
 8001550:	f000 fee4 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothState_Pin */
  GPIO_InitStruct.Pin = BluetoothState_Pin;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluetoothState_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_GPIO_Init+0xf4>)
 800156a:	f000 fed7 	bl	800231c <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40021000 	.word	0x40021000
 8001584:	40020800 	.word	0x40020800

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158e:	e7fe      	b.n	800158e <Error_Handler+0x6>

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_MspInit+0x4c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x4c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_RTC_MspInit+0x24>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d102      	bne.n	80015f8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RTC_MspInit+0x28>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40002800 	.word	0x40002800
 8001608:	42470e3c 	.word	0x42470e3c

0800160c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_SPI_MspInit+0xe0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d159      	bne.n	80016e2 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 8001638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_SPI_MspInit+0xe4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001666:	23a0      	movs	r3, #160	; 0xa0
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001676:	2305      	movs	r3, #5
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	481c      	ldr	r0, [pc, #112]	; (80016f4 <HAL_SPI_MspInit+0xe8>)
 8001682:	f000 fe4b 	bl	800231c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_SPI_MspInit+0xf0>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 800168e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001692:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016c8:	f000 fb40 	bl	8001d4c <HAL_DMA_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80016d2:	f7ff ff59 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016da:	649a      	str	r2, [r3, #72]	; 0x48
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_SPI_MspInit+0xec>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40013000 	.word	0x40013000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	20006a30 	.word	0x20006a30
 80016fc:	40026458 	.word	0x40026458

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d116      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a27      	ldr	r2, [pc, #156]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201c      	movs	r0, #28
 8001734:	f000 fad3 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001738:	201c      	movs	r0, #28
 800173a:	f000 faec 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800173e:	e036      	b.n	80017ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_TIM_Base_MspInit+0xbc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d116      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	201d      	movs	r0, #29
 800176c:	f000 fab7 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001770:	201d      	movs	r0, #29
 8001772:	f000 fad0 	bl	8001d16 <HAL_NVIC_EnableIRQ>
}
 8001776:	e01a      	b.n	80017ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_TIM_Base_MspInit+0xc0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d115      	bne.n	80017ae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	201e      	movs	r0, #30
 80017a4:	f000 fa9b 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017a8:	201e      	movs	r0, #30
 80017aa:	f000 fab4 	bl	8001d16 <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000800 	.word	0x40000800

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_UART_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12b      	bne.n	800183e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_UART_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x88>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_UART_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_UART_MspInit+0x88>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800182e:	2308      	movs	r3, #8
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_UART_MspInit+0x8c>)
 800183a:	f000 fd6f 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40011400 	.word	0x40011400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020800 	.word	0x40020800

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f900 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  lv_task_handler();
 80018a4:	f012 f962 	bl	8013b6c <lv_task_handler>
  lv_tick_inc(1);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f010 ff4f 	bl	801274c <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <TIM2_IRQHandler+0x18>)
 80018ba:	f002 fa2f 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  StopWatch_Update_Time();
 80018be:	f024 fb5f 	bl	8025f80 <StopWatch_Update_Time>
  RunMode_Update_Time();
 80018c2:	f021 fe41 	bl	8023548 <RunMode_Update_Time>
  /* USER CODE END TIM2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200069f0 	.word	0x200069f0

080018d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <TIM3_IRQHandler+0x18>)
 80018d6:	f002 fa21 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MainScreen_Updater();
 80018da:	f01f f8b9 	bl	8020a50 <MainScreen_Updater>
  tos_SleepScreen_Counter();
 80018de:	f025 fa19 	bl	8026d14 <tos_SleepScreen_Counter>
  /* USER CODE END TIM3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200068f8 	.word	0x200068f8

080018ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <TIM4_IRQHandler+0x18>)
 80018f2:	f002 fa13 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tos_ButtonCounterIncrease();
 80018f6:	f024 ff9f 	bl	8026838 <tos_ButtonCounterIncrease>
  tos_firstScreen_Update();
 80018fa:	f025 f8cd 	bl	8026a98 <tos_firstScreen_Update>
  /* USER CODE END TIM4_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200068b8 	.word	0x200068b8

08001908 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA2_Stream3_IRQHandler+0x10>)
 800190e:	f000 facb 	bl	8001ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20006a30 	.word	0x20006a30

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f025 fc30 	bl	80271b0 <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20020000 	.word	0x20020000
 800197c:	00000400 	.word	0x00000400
 8001980:	20002a44 	.word	0x20002a44
 8001984:	200073e8 	.word	0x200073e8

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SystemInit+0x28>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <SystemInit+0x28>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SystemInit+0x28>)
 800199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a2:	609a      	str	r2, [r3, #8]
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd5 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f025 fbed 	bl	80271bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fae1 	bl	8000fa8 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr  r3, =_sidata
 80019e8:	080452bc 	.word	0x080452bc
  ldr  r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f0:	20002a28 	.word	0x20002a28
  ldr  r2, =_sbss
 80019f4:	20002a28 	.word	0x20002a28
  ldr  r3, = _ebss
 80019f8:	200073e4 	.word	0x200073e4

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_Init+0x40>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_Init+0x40>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_Init+0x40>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f94d 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f808 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff fdac 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f965 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a80:	f000 f92d 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20006a90 	.word	0x20006a90

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20006a90 	.word	0x20006a90

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_Delay+0x40>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff feb8 	bl	8001acc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e099      	b.n	8001e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e00f      	b.n	8001daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fe9f 	bl	8001acc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d908      	bls.n	8001daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e078      	b.n	8001e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e8      	bne.n	8001d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_DMA_Init+0x158>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d117      	bne.n	8001e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f9e9 	bl	8002228 <DMA_CheckFifoParam>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9a0 	bl	80021bc <DMA_CalcBaseAndBitshift>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	223f      	movs	r2, #63	; 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f010803f 	.word	0xf010803f

08001ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_DMA_IRQHandler+0x258>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a92      	ldr	r2, [pc, #584]	; (8002104 <HAL_DMA_IRQHandler+0x25c>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0a9b      	lsrs	r3, r3, #10
 8001ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01a      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0204 	bic.w	r2, r2, #4
 8001efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2208      	movs	r2, #8
 8001f02:	409a      	lsls	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	2201      	movs	r2, #1
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2201      	movs	r2, #1
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f043 0202 	orr.w	r2, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2204      	movs	r2, #4
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d012      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00b      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0204 	orr.w	r2, r3, #4
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2210      	movs	r2, #16
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d043      	beq.n	8002018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03c      	beq.n	8002018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d018      	beq.n	8001fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d024      	beq.n	8002018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
 8001fd6:	e01f      	b.n	8002018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
 8001fe8:	e016      	b.n	8002018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0208 	bic.w	r2, r2, #8
 8002006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2220      	movs	r2, #32
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 808e 	beq.w	8002146 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8086 	beq.w	8002146 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2220      	movs	r2, #32
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d136      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0216 	bic.w	r2, r2, #22
 8002060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_DMA_IRQHandler+0x1da>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	223f      	movs	r2, #63	; 0x3f
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07d      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
        }
        return;
 80020be:	e078      	b.n	80021b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01c      	beq.n	8002108 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d108      	bne.n	80020ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d030      	beq.n	8002146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e02b      	b.n	8002146 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d027      	beq.n	8002146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e022      	b.n	8002146 <HAL_DMA_IRQHandler+0x29e>
 8002100:	20000000 	.word	0x20000000
 8002104:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0210 	bic.w	r2, r2, #16
 8002124:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	2b00      	cmp	r3, #0
 800214c:	d032      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	429a      	cmp	r2, r3
 800217c:	d307      	bcc.n	800218e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f2      	bne.n	8002172 <HAL_DMA_IRQHandler+0x2ca>
 800218c:	e000      	b.n	8002190 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800218e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e000      	b.n	80021b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021b2:	bf00      	nop
    }
  }
}
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop

080021bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3b10      	subs	r3, #16
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <DMA_CalcBaseAndBitshift+0x64>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <DMA_CalcBaseAndBitshift+0x68>)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d909      	bls.n	80021fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	1d1a      	adds	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	659a      	str	r2, [r3, #88]	; 0x58
 80021fc:	e007      	b.n	800220e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	aaaaaaab 	.word	0xaaaaaaab
 8002224:	0802a57c 	.word	0x0802a57c

08002228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d855      	bhi.n	80022f4 <DMA_CheckFifoParam+0xcc>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <DMA_CheckFifoParam+0x28>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	08002261 	.word	0x08002261
 8002254:	08002273 	.word	0x08002273
 8002258:	08002261 	.word	0x08002261
 800225c:	080022f5 	.word	0x080022f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d045      	beq.n	80022f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002270:	e042      	b.n	80022f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800227a:	d13f      	bne.n	80022fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e03c      	b.n	80022fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228a:	d121      	bne.n	80022d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d836      	bhi.n	8002300 <DMA_CheckFifoParam+0xd8>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <DMA_CheckFifoParam+0x70>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022af 	.word	0x080022af
 80022a0:	080022a9 	.word	0x080022a9
 80022a4:	080022c1 	.word	0x080022c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e02f      	b.n	800230e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d024      	beq.n	8002304 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022be:	e021      	b.n	8002304 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c8:	d11e      	bne.n	8002308 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022ce:	e01b      	b.n	8002308 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d902      	bls.n	80022dc <DMA_CheckFifoParam+0xb4>
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d003      	beq.n	80022e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022da:	e018      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e015      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      break;
 80022f2:	e00b      	b.n	800230c <DMA_CheckFifoParam+0xe4>
      break;
 80022f4:	bf00      	nop
 80022f6:	e00a      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;
 80022f8:	bf00      	nop
 80022fa:	e008      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;
 80022fc:	bf00      	nop
 80022fe:	e006      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;
 8002300:	bf00      	nop
 8002302:	e004      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;
 8002304:	bf00      	nop
 8002306:	e002      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;   
 8002308:	bf00      	nop
 800230a:	e000      	b.n	800230e <DMA_CheckFifoParam+0xe6>
      break;
 800230c:	bf00      	nop
    }
  } 
  
  return status; 
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e16b      	b.n	8002610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 815a 	bne.w	800260a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d00b      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236a:	2b11      	cmp	r3, #17
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0xfc>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b12      	cmp	r3, #18
 8002416:	d123      	bne.n	8002460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80b4 	beq.w	800260a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_GPIO_Init+0x308>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a5e      	ldr	r2, [pc, #376]	; (8002624 <HAL_GPIO_Init+0x308>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_GPIO_Init+0x308>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024be:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_GPIO_Init+0x30c>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_Init+0x310>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02b      	beq.n	8002542 <HAL_GPIO_Init+0x226>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_Init+0x314>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d025      	beq.n	800253e <HAL_GPIO_Init+0x222>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_GPIO_Init+0x318>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01f      	beq.n	800253a <HAL_GPIO_Init+0x21e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_GPIO_Init+0x31c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d019      	beq.n	8002536 <HAL_GPIO_Init+0x21a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_GPIO_Init+0x320>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0x216>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4c      	ldr	r2, [pc, #304]	; (8002640 <HAL_GPIO_Init+0x324>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00d      	beq.n	800252e <HAL_GPIO_Init+0x212>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_GPIO_Init+0x328>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x20e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <HAL_GPIO_Init+0x32c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_GPIO_Init+0x20a>
 8002522:	2307      	movs	r3, #7
 8002524:	e00e      	b.n	8002544 <HAL_GPIO_Init+0x228>
 8002526:	2308      	movs	r3, #8
 8002528:	e00c      	b.n	8002544 <HAL_GPIO_Init+0x228>
 800252a:	2306      	movs	r3, #6
 800252c:	e00a      	b.n	8002544 <HAL_GPIO_Init+0x228>
 800252e:	2305      	movs	r3, #5
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x228>
 8002532:	2304      	movs	r3, #4
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x228>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x228>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x228>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x228>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x30c>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_GPIO_Init+0x330>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002586:	4a31      	ldr	r2, [pc, #196]	; (800264c <HAL_GPIO_Init+0x330>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_GPIO_Init+0x330>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_GPIO_Init+0x330>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_GPIO_Init+0x330>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_GPIO_Init+0x330>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_GPIO_Init+0x330>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_GPIO_Init+0x330>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f ae90 	bls.w	8002338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	3724      	adds	r7, #36	; 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40021c00 	.word	0x40021c00
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e25b      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	4ba3      	ldr	r3, [pc, #652]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4ba0      	ldr	r3, [pc, #640]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b9d      	ldr	r3, [pc, #628]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b99      	ldr	r3, [pc, #612]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e236      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b91      	ldr	r3, [pc, #580]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a90      	ldr	r2, [pc, #576]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a87      	ldr	r2, [pc, #540]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b84      	ldr	r3, [pc, #528]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a83      	ldr	r2, [pc, #524]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a80      	ldr	r2, [pc, #512]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f9ae 	bl	8001acc <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f9aa 	bl	8001acc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1fb      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f99a 	bl	8001acc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f996 	bl	8001acc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1e7      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1bb      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4952      	ldr	r1, [pc, #328]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <HAL_RCC_OscConfig+0x2b0>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff f94f 	bl	8001acc <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff f94b 	bl	8001acc <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e19c      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4940      	ldr	r1, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCC_OscConfig+0x2b0>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f92e 	bl	8001acc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff f92a 	bl	8001acc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e17b      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d030      	beq.n	8002900 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <HAL_RCC_OscConfig+0x2b4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7ff f90e 	bl	8001acc <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f90a 	bl	8001acc <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e15b      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x2b4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff f8f7 	bl	8001acc <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff f8f3 	bl	8001acc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e144      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a0 	beq.w	8002a4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d121      	bne.n	800298e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7ff f8b9 	bl	8001acc <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e011      	b.n	8002982 <HAL_RCC_OscConfig+0x2ce>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
 800296c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002970:	f7ff f8ac 	bl	8001acc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0fd      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x4d4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
 8002996:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a7c      	ldr	r2, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x32a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x312>
 80029ac:	4b77      	ldr	r3, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a76      	ldr	r2, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a73      	ldr	r2, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x32a>
 80029c6:	4b71      	ldr	r3, [pc, #452]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a70      	ldr	r2, [pc, #448]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a6d      	ldr	r2, [pc, #436]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7ff f871 	bl	8001acc <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff f86d 	bl	8001acc <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0bc      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x33a>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f85b 	bl	8001acc <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7ff f857 	bl	8001acc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0a6      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8092 	beq.w	8002b7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d05c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d141      	bne.n	8002af0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <HAL_RCC_OscConfig+0x4dc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7ff f82b 	bl	8001acc <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff f827 	bl	8001acc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e078      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	019b      	lsls	r3, r3, #6
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	4933      	ldr	r1, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_OscConfig+0x4dc>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7ff f800 	bl	8001acc <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fffc 	bl	8001acc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e04d      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
 8002aee:	e045      	b.n	8002b7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x4dc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe ffe9 	bl	8001acc <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe ffe5 	bl	8001acc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002b1c:	e02e      	b.n	8002b7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e029      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_RCC_OscConfig+0x4d8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d115      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10d      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470060 	.word	0x42470060

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0cc      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d90c      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b8      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a58      	ldr	r2, [pc, #352]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c00:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a52      	ldr	r2, [pc, #328]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	494d      	ldr	r1, [pc, #308]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d044      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e067      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4934      	ldr	r1, [pc, #208]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe ff22 	bl	8001acc <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe ff1e 	bl	8001acc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e04f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d20c      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e032      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4916      	ldr	r1, [pc, #88]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1a:	f000 f821 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fe82 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023c00 	.word	0x40023c00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	0802a564 	.word	0x0802a564
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d007      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x32>
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d008      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x38>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80b4 	bne.w	8002ef4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d8e:	60bb      	str	r3, [r7, #8]
       break;
 8002d90:	e0b3      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d92:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d94:	60bb      	str	r3, [r7, #8]
      break;
 8002d96:	e0b0      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d98:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da2:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04a      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dae:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	099b      	lsrs	r3, r3, #6
 8002db4:	f04f 0400 	mov.w	r4, #0
 8002db8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	ea03 0501 	and.w	r5, r3, r1
 8002dc4:	ea04 0602 	and.w	r6, r4, r2
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4632      	mov	r2, r6
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	0154      	lsls	r4, r2, #5
 8002dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dda:	014b      	lsls	r3, r1, #5
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4622      	mov	r2, r4
 8002de0:	1b49      	subs	r1, r1, r5
 8002de2:	eb62 0206 	sbc.w	r2, r2, r6
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	f04f 0400 	mov.w	r4, #0
 8002dee:	0194      	lsls	r4, r2, #6
 8002df0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002df4:	018b      	lsls	r3, r1, #6
 8002df6:	1a5b      	subs	r3, r3, r1
 8002df8:	eb64 0402 	sbc.w	r4, r4, r2
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	00e2      	lsls	r2, r4, #3
 8002e06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e0a:	00d9      	lsls	r1, r3, #3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4614      	mov	r4, r2
 8002e10:	195b      	adds	r3, r3, r5
 8002e12:	eb44 0406 	adc.w	r4, r4, r6
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	0262      	lsls	r2, r4, #9
 8002e20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e24:	0259      	lsls	r1, r3, #9
 8002e26:	460b      	mov	r3, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 0400 	mov.w	r4, #0
 8002e34:	461a      	mov	r2, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	f7fd ff36 	bl	8000ca8 <__aeabi_uldivmod>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e049      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	f04f 0400 	mov.w	r4, #0
 8002e4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	ea03 0501 	and.w	r5, r3, r1
 8002e5a:	ea04 0602 	and.w	r6, r4, r2
 8002e5e:	4629      	mov	r1, r5
 8002e60:	4632      	mov	r2, r6
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	f04f 0400 	mov.w	r4, #0
 8002e6a:	0154      	lsls	r4, r2, #5
 8002e6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e70:	014b      	lsls	r3, r1, #5
 8002e72:	4619      	mov	r1, r3
 8002e74:	4622      	mov	r2, r4
 8002e76:	1b49      	subs	r1, r1, r5
 8002e78:	eb62 0206 	sbc.w	r2, r2, r6
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	f04f 0400 	mov.w	r4, #0
 8002e84:	0194      	lsls	r4, r2, #6
 8002e86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e8a:	018b      	lsls	r3, r1, #6
 8002e8c:	1a5b      	subs	r3, r3, r1
 8002e8e:	eb64 0402 	sbc.w	r4, r4, r2
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ea0:	00d9      	lsls	r1, r3, #3
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	195b      	adds	r3, r3, r5
 8002ea8:	eb44 0406 	adc.w	r4, r4, r6
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	02a2      	lsls	r2, r4, #10
 8002eb6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002eba:	0299      	lsls	r1, r3, #10
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4614      	mov	r4, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4623      	mov	r3, r4
 8002ece:	f7fd feeb 	bl	8000ca8 <__aeabi_uldivmod>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	60bb      	str	r3, [r7, #8]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ef6:	60bb      	str	r3, [r7, #8]
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	68bb      	ldr	r3, [r7, #8]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4601      	mov	r1, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0802a574 	.word	0x0802a574

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffdc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f58:	4601      	mov	r1, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	0802a574 	.word	0x0802a574

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d035      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa0:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa6:	f7fe fd91 	bl	8001acc <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fae:	f7fe fd8d 	bl	8001acc <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0b0      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc0:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	019a      	lsls	r2, r3, #6
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	071b      	lsls	r3, r3, #28
 8002fd8:	4955      	ldr	r1, [pc, #340]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe0:	4b52      	ldr	r3, [pc, #328]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe6:	f7fe fd71 	bl	8001acc <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fee:	f7fe fd6d 	bl	8001acc <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e090      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003000:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8083 	beq.w	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a43      	ldr	r2, [pc, #268]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003036:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3e      	ldr	r2, [pc, #248]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003042:	f7fe fd43 	bl	8001acc <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe fd3f 	bl	8001acc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e062      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003070:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02f      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	429a      	cmp	r2, r3
 8003084:	d028      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d114      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fd0d 	bl	8001acc <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fd09 	bl	8001acc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e02a      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e4:	d10d      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	490d      	ldr	r1, [pc, #52]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
 8003100:	e005      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003108:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800310c:	6093      	str	r3, [r2, #8]
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	4905      	ldr	r1, [pc, #20]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	42470068 	.word	0x42470068
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
 8003138:	42470e40 	.word	0x42470e40

0800313c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e083      	b.n	8003256 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7f5b      	ldrb	r3, [r3, #29]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fa3e 	bl	80015e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	22ca      	movs	r2, #202	; 0xca
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2253      	movs	r2, #83	; 0x53
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 faa8 	bl	80036d0 <RTC_EnterInitMode>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e05e      	b.n	8003256 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031aa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	041a      	lsls	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa3a 	bl	8003680 <HAL_RTC_WaitForSynchro>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2204      	movs	r2, #4
 800321e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e018      	b.n	8003256 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800325e:	b590      	push	{r4, r7, lr}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	7f1b      	ldrb	r3, [r3, #28]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_RTC_SetTime+0x1c>
 8003276:	2302      	movs	r3, #2
 8003278:	e0aa      	b.n	80033d0 <HAL_RTC_SetTime+0x172>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2202      	movs	r2, #2
 8003284:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d126      	bne.n	80032da <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa3f 	bl	8003728 <RTC_ByteToBcd2>
 80032aa:	4603      	mov	r3, r0
 80032ac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa38 	bl	8003728 <RTC_ByteToBcd2>
 80032b8:	4603      	mov	r3, r0
 80032ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032bc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	789b      	ldrb	r3, [r3, #2]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fa30 	bl	8003728 <RTC_ByteToBcd2>
 80032c8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	78db      	ldrb	r3, [r3, #3]
 80032d2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e018      	b.n	800330c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032fa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003300:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	22ca      	movs	r2, #202	; 0xca
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2253      	movs	r2, #83	; 0x53
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f9d7 	bl	80036d0 <RTC_EnterInitMode>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2204      	movs	r2, #4
 8003334:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e047      	b.n	80033d0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800334a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800335e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003386:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d111      	bne.n	80033ba <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f972 	bl	8003680 <HAL_RTC_WaitForSynchro>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2204      	movs	r2, #4
 80033ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00a      	b.n	80033d0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80033ce:	2300      	movs	r3, #0
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}

080033d8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800340a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800340e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11a      	bne.n	800348a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f983 	bl	8003764 <RTC_Bcd2ToByte>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f97a 	bl	8003764 <RTC_Bcd2ToByte>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	789b      	ldrb	r3, [r3, #2]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f971 	bl	8003764 <RTC_Bcd2ToByte>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	7f1b      	ldrb	r3, [r3, #28]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_RTC_SetDate+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e094      	b.n	80035da <HAL_RTC_SetDate+0x146>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2202      	movs	r2, #2
 80034ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10e      	bne.n	80034e0 <HAL_RTC_SetDate+0x4c>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	330a      	adds	r3, #10
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11c      	bne.n	8003520 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f91c 	bl	8003728 <RTC_ByteToBcd2>
 80034f0:	4603      	mov	r3, r0
 80034f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f915 	bl	8003728 <RTC_ByteToBcd2>
 80034fe:	4603      	mov	r3, r0
 8003500:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003502:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	789b      	ldrb	r3, [r3, #2]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f90d 	bl	8003728 <RTC_ByteToBcd2>
 800350e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003510:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e00e      	b.n	800353e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800352c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003532:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	22ca      	movs	r2, #202	; 0xca
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2253      	movs	r2, #83	; 0x53
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f8be 	bl	80036d0 <RTC_EnterInitMode>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e033      	b.n	80035da <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800357c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003580:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003590:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f86d 	bl	8003680 <HAL_RTC_WaitForSynchro>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	22ff      	movs	r2, #255	; 0xff
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2204      	movs	r2, #4
 80035b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e00a      	b.n	80035da <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}

080035e2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003600:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	0b5b      	lsrs	r3, r3, #13
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d11a      	bne.n	8003676 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f88d 	bl	8003764 <RTC_Bcd2ToByte>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f884 	bl	8003764 <RTC_Bcd2ToByte>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	789b      	ldrb	r3, [r3, #2]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f87b 	bl	8003764 <RTC_Bcd2ToByte>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800369c:	f7fe fa16 	bl	8001acc <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036a2:	e009      	b.n	80036b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036a4:	f7fe fa12 	bl	8001acc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b2:	d901      	bls.n	80036b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e007      	b.n	80036c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f9ea 	bl	8001acc <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036fa:	e009      	b.n	8003710 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036fc:	f7fe f9e6 	bl	8001acc <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	d901      	bls.n	8003710 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e007      	b.n	8003720 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ee      	beq.n	80036fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003736:	e005      	b.n	8003744 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	3b0a      	subs	r3, #10
 8003742:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	2b09      	cmp	r3, #9
 8003748:	d8f6      	bhi.n	8003738 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	b2da      	uxtb	r2, r3
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	4313      	orrs	r3, r2
 8003756:	b2db      	uxtb	r3, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4413      	add	r3, r2
 8003792:	b2db      	uxtb	r3, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e056      	b.n	8003860 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd ff1d 	bl	800160c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	ea42 0103 	orr.w	r1, r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	0c1b      	lsrs	r3, r3, #16
 8003830:	f003 0104 	and.w	r1, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_SPI_Transmit+0x22>
 8003886:	2302      	movs	r3, #2
 8003888:	e11e      	b.n	8003ac8 <HAL_SPI_Transmit+0x260>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003892:	f7fe f91b 	bl	8001acc <HAL_GetTick>
 8003896:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ac:	e103      	b.n	8003ab6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SPI_Transmit+0x52>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e0fa      	b.n	8003ab6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003906:	d107      	bne.n	8003918 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003916:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d007      	beq.n	8003936 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393e:	d14b      	bne.n	80039d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_SPI_Transmit+0xe6>
 8003948:	8afb      	ldrh	r3, [r7, #22]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d13e      	bne.n	80039cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	1c9a      	adds	r2, r3, #2
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003972:	e02b      	b.n	80039cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d112      	bne.n	80039a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039a6:	e011      	b.n	80039cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fe f890 	bl	8001acc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d803      	bhi.n	80039c0 <HAL_SPI_Transmit+0x158>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039be:	d102      	bne.n	80039c6 <HAL_SPI_Transmit+0x15e>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ca:	e074      	b.n	8003ab6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ce      	bne.n	8003974 <HAL_SPI_Transmit+0x10c>
 80039d6:	e04c      	b.n	8003a72 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_SPI_Transmit+0x17e>
 80039e0:	8afb      	ldrh	r3, [r7, #22]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d140      	bne.n	8003a68 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a0c:	e02c      	b.n	8003a68 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d113      	bne.n	8003a44 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	7812      	ldrb	r2, [r2, #0]
 8003a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a42:	e011      	b.n	8003a68 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a44:	f7fe f842 	bl	8001acc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d803      	bhi.n	8003a5c <HAL_SPI_Transmit+0x1f4>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Transmit+0x1fa>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a66:	e026      	b.n	8003ab6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1cd      	bne.n	8003a0e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f894 	bl	8003ba4 <SPI_EndRxTxTransaction>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e000      	b.n	8003ab6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae0:	e04c      	b.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d048      	beq.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003aea:	f7fd ffef 	bl	8001acc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d902      	bls.n	8003b00 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13d      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b18:	d111      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d004      	beq.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d107      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d10f      	bne.n	8003b68 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e00f      	b.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d1a3      	bne.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <SPI_EndRxTxTransaction+0x7c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <SPI_EndRxTxTransaction+0x80>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0d5b      	lsrs	r3, r3, #21
 8003bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bce:	d112      	bne.n	8003bf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ff78 	bl	8003ad0 <SPI_WaitFlagStateUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00f      	b.n	8003c16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d0f2      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x52>
 8003c10:	e000      	b.n	8003c14 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c12:	bf00      	nop
  }

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000000 	.word	0x20000000
 8003c24:	165e9f81 	.word	0x165e9f81

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01d      	b.n	8003c76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd fd56 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fa4a 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d007      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_TIM_Base_Stop_IT+0x48>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f240 4344 	movw	r3, #1092	; 0x444
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_Base_Stop_IT+0x48>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0202 	mvn.w	r2, #2
 8003d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9af 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9a1 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9b2 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0204 	mvn.w	r2, #4
 8003d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f985 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f977 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f988 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0208 	mvn.w	r2, #8
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2204      	movs	r2, #4
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f95b 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f94d 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f95e 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0210 	mvn.w	r2, #16
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f931 	bl	80040c2 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f923 	bl	80040ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f934 	bl	80040d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0201 	mvn.w	r2, #1
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8fd 	bl	800409a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fada 	bl	8004480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8f9 	bl	80040ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0220 	mvn.w	r2, #32
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 faa4 	bl	800446c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_ConfigClockSource+0x18>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e0a6      	b.n	8004092 <HAL_TIM_ConfigClockSource+0x166>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d067      	beq.n	800404c <HAL_TIM_ConfigClockSource+0x120>
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d80b      	bhi.n	8003f98 <HAL_TIM_ConfigClockSource+0x6c>
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d073      	beq.n	800406c <HAL_TIM_ConfigClockSource+0x140>
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d802      	bhi.n	8003f8e <HAL_TIM_ConfigClockSource+0x62>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d06f      	beq.n	800406c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f8c:	e078      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d06c      	beq.n	800406c <HAL_TIM_ConfigClockSource+0x140>
 8003f92:	2b30      	cmp	r3, #48	; 0x30
 8003f94:	d06a      	beq.n	800406c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f96:	e073      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f98:	2b70      	cmp	r3, #112	; 0x70
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x8c>
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d804      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x7e>
 8003fa0:	2b50      	cmp	r3, #80	; 0x50
 8003fa2:	d033      	beq.n	800400c <HAL_TIM_ConfigClockSource+0xe0>
 8003fa4:	2b60      	cmp	r3, #96	; 0x60
 8003fa6:	d041      	beq.n	800402c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fa8:	e06a      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d066      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x152>
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d017      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fb6:	e063      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f000 f9b4 	bl	8004334 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
      break;
 8003fe4:	e04c      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f000 f99d 	bl	8004334 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004008:	609a      	str	r2, [r3, #8]
      break;
 800400a:	e039      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	461a      	mov	r2, r3
 800401a:	f000 f911 	bl	8004240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2150      	movs	r1, #80	; 0x50
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f96a 	bl	80042fe <TIM_ITRx_SetConfig>
      break;
 800402a:	e029      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	461a      	mov	r2, r3
 800403a:	f000 f930 	bl	800429e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2160      	movs	r1, #96	; 0x60
 8004044:	4618      	mov	r0, r3
 8004046:	f000 f95a 	bl	80042fe <TIM_ITRx_SetConfig>
      break;
 800404a:	e019      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	461a      	mov	r2, r3
 800405a:	f000 f8f1 	bl	8004240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f94a 	bl	80042fe <TIM_ITRx_SetConfig>
      break;
 800406a:	e009      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 f941 	bl	80042fe <TIM_ITRx_SetConfig>
      break;
 800407c:	e000      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800407e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a40      	ldr	r2, [pc, #256]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3c      	ldr	r2, [pc, #240]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3b      	ldr	r2, [pc, #236]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d027      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d023      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d017      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <TIM_Base_SetConfig+0x128>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <TIM_Base_SetConfig+0x12c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <TIM_Base_SetConfig+0x130>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <TIM_Base_SetConfig+0x134>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <TIM_Base_SetConfig+0x138>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <TIM_Base_SetConfig+0x13c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <TIM_Base_SetConfig+0x124>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40010400 	.word	0x40010400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40001800 	.word	0x40001800
 8004238:	40001c00 	.word	0x40001c00
 800423c:	40002000 	.word	0x40002000

08004240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 030a 	bic.w	r3, r3, #10
 800427c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0210 	bic.w	r2, r3, #16
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	f043 0307 	orr.w	r3, r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	021a      	lsls	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	431a      	orrs	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004388:	2302      	movs	r3, #2
 800438a:	e05a      	b.n	8004442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a21      	ldr	r2, [pc, #132]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d01d      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1a      	ldr	r2, [pc, #104]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10c      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e03f      	b.n	8004526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd f982 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f9b1 	bl	8004840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800450c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	f040 8083 	bne.w	8004656 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Transmit+0x2e>
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e07b      	b.n	8004658 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_UART_Transmit+0x40>
 800456a:	2302      	movs	r3, #2
 800456c:	e074      	b.n	8004658 <HAL_UART_Transmit+0x12a>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004584:	f7fd faa2 	bl	8001acc <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800459e:	e042      	b.n	8004626 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d122      	bne.n	80045fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f8f2 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e042      	b.n	8004658 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3302      	adds	r3, #2
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	e017      	b.n	8004626 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	e013      	b.n	8004626 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f8cf 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e01f      	b.n	8004658 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	60ba      	str	r2, [r7, #8]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1b7      	bne.n	80045a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8b6 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e006      	b.n	8004658 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	f040 8090 	bne.w	80047a2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_UART_Receive+0x2e>
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e088      	b.n	80047a4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive+0x40>
 800469c:	2302      	movs	r3, #2
 800469e:	e081      	b.n	80047a4 <HAL_UART_Receive+0x144>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2222      	movs	r2, #34	; 0x22
 80046b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046b6:	f7fd fa09 	bl	8001acc <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046d0:	e05c      	b.n	800478c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d12b      	bne.n	8004742 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2120      	movs	r1, #32
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f859 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e04f      	b.n	80047a4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10c      	bne.n	800472a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	b29a      	uxth	r2, r3
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3302      	adds	r3, #2
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	e030      	b.n	800478c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b29b      	uxth	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	b29a      	uxth	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3301      	adds	r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e024      	b.n	800478c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2120      	movs	r1, #32
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f82d 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e023      	b.n	80047a4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	60ba      	str	r2, [r7, #8]
 8004770:	b2ca      	uxtb	r2, r1
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e00a      	b.n	800478c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d19d      	bne.n	80046d2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047bc:	e02c      	b.n	8004818 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c4:	d028      	beq.n	8004818 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x30>
 80047cc:	f7fd f97e 	bl	8001acc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d21d      	bcs.n	8004818 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e00f      	b.n	8004838 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d0c3      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004882:	f023 030c 	bic.w	r3, r3, #12
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	430b      	orrs	r3, r1
 800488e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ae:	f040 818b 	bne.w	8004bc8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4ac1      	ldr	r2, [pc, #772]	; (8004bbc <UART_SetConfig+0x37c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d005      	beq.n	80048c8 <UART_SetConfig+0x88>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4abf      	ldr	r2, [pc, #764]	; (8004bc0 <UART_SetConfig+0x380>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f040 80bd 	bne.w	8004a42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7fe fb42 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80048cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	461d      	mov	r5, r3
 80048d2:	f04f 0600 	mov.w	r6, #0
 80048d6:	46a8      	mov	r8, r5
 80048d8:	46b1      	mov	r9, r6
 80048da:	eb18 0308 	adds.w	r3, r8, r8
 80048de:	eb49 0409 	adc.w	r4, r9, r9
 80048e2:	4698      	mov	r8, r3
 80048e4:	46a1      	mov	r9, r4
 80048e6:	eb18 0805 	adds.w	r8, r8, r5
 80048ea:	eb49 0906 	adc.w	r9, r9, r6
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004902:	4688      	mov	r8, r1
 8004904:	4691      	mov	r9, r2
 8004906:	eb18 0005 	adds.w	r0, r8, r5
 800490a:	eb49 0106 	adc.w	r1, r9, r6
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	461d      	mov	r5, r3
 8004914:	f04f 0600 	mov.w	r6, #0
 8004918:	196b      	adds	r3, r5, r5
 800491a:	eb46 0406 	adc.w	r4, r6, r6
 800491e:	461a      	mov	r2, r3
 8004920:	4623      	mov	r3, r4
 8004922:	f7fc f9c1 	bl	8000ca8 <__aeabi_uldivmod>
 8004926:	4603      	mov	r3, r0
 8004928:	460c      	mov	r4, r1
 800492a:	461a      	mov	r2, r3
 800492c:	4ba5      	ldr	r3, [pc, #660]	; (8004bc4 <UART_SetConfig+0x384>)
 800492e:	fba3 2302 	umull	r2, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	461d      	mov	r5, r3
 800493c:	f04f 0600 	mov.w	r6, #0
 8004940:	46a9      	mov	r9, r5
 8004942:	46b2      	mov	sl, r6
 8004944:	eb19 0309 	adds.w	r3, r9, r9
 8004948:	eb4a 040a 	adc.w	r4, sl, sl
 800494c:	4699      	mov	r9, r3
 800494e:	46a2      	mov	sl, r4
 8004950:	eb19 0905 	adds.w	r9, r9, r5
 8004954:	eb4a 0a06 	adc.w	sl, sl, r6
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004964:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004968:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800496c:	4689      	mov	r9, r1
 800496e:	4692      	mov	sl, r2
 8004970:	eb19 0005 	adds.w	r0, r9, r5
 8004974:	eb4a 0106 	adc.w	r1, sl, r6
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	461d      	mov	r5, r3
 800497e:	f04f 0600 	mov.w	r6, #0
 8004982:	196b      	adds	r3, r5, r5
 8004984:	eb46 0406 	adc.w	r4, r6, r6
 8004988:	461a      	mov	r2, r3
 800498a:	4623      	mov	r3, r4
 800498c:	f7fc f98c 	bl	8000ca8 <__aeabi_uldivmod>
 8004990:	4603      	mov	r3, r0
 8004992:	460c      	mov	r4, r1
 8004994:	461a      	mov	r2, r3
 8004996:	4b8b      	ldr	r3, [pc, #556]	; (8004bc4 <UART_SetConfig+0x384>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a86      	ldr	r2, [pc, #536]	; (8004bc4 <UART_SetConfig+0x384>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b8:	4498      	add	r8, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	461d      	mov	r5, r3
 80049be:	f04f 0600 	mov.w	r6, #0
 80049c2:	46a9      	mov	r9, r5
 80049c4:	46b2      	mov	sl, r6
 80049c6:	eb19 0309 	adds.w	r3, r9, r9
 80049ca:	eb4a 040a 	adc.w	r4, sl, sl
 80049ce:	4699      	mov	r9, r3
 80049d0:	46a2      	mov	sl, r4
 80049d2:	eb19 0905 	adds.w	r9, r9, r5
 80049d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ee:	4689      	mov	r9, r1
 80049f0:	4692      	mov	sl, r2
 80049f2:	eb19 0005 	adds.w	r0, r9, r5
 80049f6:	eb4a 0106 	adc.w	r1, sl, r6
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	461d      	mov	r5, r3
 8004a00:	f04f 0600 	mov.w	r6, #0
 8004a04:	196b      	adds	r3, r5, r5
 8004a06:	eb46 0406 	adc.w	r4, r6, r6
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	f7fc f94b 	bl	8000ca8 <__aeabi_uldivmod>
 8004a12:	4603      	mov	r3, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <UART_SetConfig+0x384>)
 8004a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2164      	movs	r1, #100	; 0x64
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	3332      	adds	r3, #50	; 0x32
 8004a2c:	4a65      	ldr	r2, [pc, #404]	; (8004bc4 <UART_SetConfig+0x384>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f003 0207 	and.w	r2, r3, #7
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4442      	add	r2, r8
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	e26f      	b.n	8004f22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a42:	f7fe fa71 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8004a46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	461d      	mov	r5, r3
 8004a4c:	f04f 0600 	mov.w	r6, #0
 8004a50:	46a8      	mov	r8, r5
 8004a52:	46b1      	mov	r9, r6
 8004a54:	eb18 0308 	adds.w	r3, r8, r8
 8004a58:	eb49 0409 	adc.w	r4, r9, r9
 8004a5c:	4698      	mov	r8, r3
 8004a5e:	46a1      	mov	r9, r4
 8004a60:	eb18 0805 	adds.w	r8, r8, r5
 8004a64:	eb49 0906 	adc.w	r9, r9, r6
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a7c:	4688      	mov	r8, r1
 8004a7e:	4691      	mov	r9, r2
 8004a80:	eb18 0005 	adds.w	r0, r8, r5
 8004a84:	eb49 0106 	adc.w	r1, r9, r6
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	f04f 0600 	mov.w	r6, #0
 8004a92:	196b      	adds	r3, r5, r5
 8004a94:	eb46 0406 	adc.w	r4, r6, r6
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	f7fc f904 	bl	8000ca8 <__aeabi_uldivmod>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <UART_SetConfig+0x384>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	461d      	mov	r5, r3
 8004ab6:	f04f 0600 	mov.w	r6, #0
 8004aba:	46a9      	mov	r9, r5
 8004abc:	46b2      	mov	sl, r6
 8004abe:	eb19 0309 	adds.w	r3, r9, r9
 8004ac2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	46a2      	mov	sl, r4
 8004aca:	eb19 0905 	adds.w	r9, r9, r5
 8004ace:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ae6:	4689      	mov	r9, r1
 8004ae8:	4692      	mov	sl, r2
 8004aea:	eb19 0005 	adds.w	r0, r9, r5
 8004aee:	eb4a 0106 	adc.w	r1, sl, r6
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	461d      	mov	r5, r3
 8004af8:	f04f 0600 	mov.w	r6, #0
 8004afc:	196b      	adds	r3, r5, r5
 8004afe:	eb46 0406 	adc.w	r4, r6, r6
 8004b02:	461a      	mov	r2, r3
 8004b04:	4623      	mov	r3, r4
 8004b06:	f7fc f8cf 	bl	8000ca8 <__aeabi_uldivmod>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <UART_SetConfig+0x384>)
 8004b12:	fba3 1302 	umull	r1, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2164      	movs	r1, #100	; 0x64
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	3332      	adds	r3, #50	; 0x32
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <UART_SetConfig+0x384>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b32:	4498      	add	r8, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	461d      	mov	r5, r3
 8004b38:	f04f 0600 	mov.w	r6, #0
 8004b3c:	46a9      	mov	r9, r5
 8004b3e:	46b2      	mov	sl, r6
 8004b40:	eb19 0309 	adds.w	r3, r9, r9
 8004b44:	eb4a 040a 	adc.w	r4, sl, sl
 8004b48:	4699      	mov	r9, r3
 8004b4a:	46a2      	mov	sl, r4
 8004b4c:	eb19 0905 	adds.w	r9, r9, r5
 8004b50:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b68:	4689      	mov	r9, r1
 8004b6a:	4692      	mov	sl, r2
 8004b6c:	eb19 0005 	adds.w	r0, r9, r5
 8004b70:	eb4a 0106 	adc.w	r1, sl, r6
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	461d      	mov	r5, r3
 8004b7a:	f04f 0600 	mov.w	r6, #0
 8004b7e:	196b      	adds	r3, r5, r5
 8004b80:	eb46 0406 	adc.w	r4, r6, r6
 8004b84:	461a      	mov	r2, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	f7fc f88e 	bl	8000ca8 <__aeabi_uldivmod>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <UART_SetConfig+0x384>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	; 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <UART_SetConfig+0x384>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4442      	add	r2, r8
 8004bb8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004bba:	e1b2      	b.n	8004f22 <UART_SetConfig+0x6e2>
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	40011400 	.word	0x40011400
 8004bc4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4ad7      	ldr	r2, [pc, #860]	; (8004f2c <UART_SetConfig+0x6ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d005      	beq.n	8004bde <UART_SetConfig+0x39e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4ad6      	ldr	r2, [pc, #856]	; (8004f30 <UART_SetConfig+0x6f0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	f040 80d1 	bne.w	8004d80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bde:	f7fe f9b7 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8004be2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	469a      	mov	sl, r3
 8004be8:	f04f 0b00 	mov.w	fp, #0
 8004bec:	46d0      	mov	r8, sl
 8004bee:	46d9      	mov	r9, fp
 8004bf0:	eb18 0308 	adds.w	r3, r8, r8
 8004bf4:	eb49 0409 	adc.w	r4, r9, r9
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	46a1      	mov	r9, r4
 8004bfc:	eb18 080a 	adds.w	r8, r8, sl
 8004c00:	eb49 090b 	adc.w	r9, r9, fp
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c18:	4688      	mov	r8, r1
 8004c1a:	4691      	mov	r9, r2
 8004c1c:	eb1a 0508 	adds.w	r5, sl, r8
 8004c20:	eb4b 0609 	adc.w	r6, fp, r9
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	0094      	lsls	r4, r2, #2
 8004c38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3c:	008b      	lsls	r3, r1, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4623      	mov	r3, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	4631      	mov	r1, r6
 8004c46:	f7fc f82f 	bl	8000ca8 <__aeabi_uldivmod>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4bb8      	ldr	r3, [pc, #736]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004c52:	fba3 2302 	umull	r2, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	469b      	mov	fp, r3
 8004c60:	f04f 0c00 	mov.w	ip, #0
 8004c64:	46d9      	mov	r9, fp
 8004c66:	46e2      	mov	sl, ip
 8004c68:	eb19 0309 	adds.w	r3, r9, r9
 8004c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c70:	4699      	mov	r9, r3
 8004c72:	46a2      	mov	sl, r4
 8004c74:	eb19 090b 	adds.w	r9, r9, fp
 8004c78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c90:	4689      	mov	r9, r1
 8004c92:	4692      	mov	sl, r2
 8004c94:	eb1b 0509 	adds.w	r5, fp, r9
 8004c98:	eb4c 060a 	adc.w	r6, ip, sl
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	f04f 0400 	mov.w	r4, #0
 8004cae:	0094      	lsls	r4, r2, #2
 8004cb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cb4:	008b      	lsls	r3, r1, #2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4623      	mov	r3, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	f7fb fff3 	bl	8000ca8 <__aeabi_uldivmod>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b9a      	ldr	r3, [pc, #616]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004cca:	fba3 1302 	umull	r1, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2164      	movs	r1, #100	; 0x64
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	3332      	adds	r3, #50	; 0x32
 8004cdc:	4a95      	ldr	r2, [pc, #596]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce8:	4498      	add	r8, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	469b      	mov	fp, r3
 8004cee:	f04f 0c00 	mov.w	ip, #0
 8004cf2:	46d9      	mov	r9, fp
 8004cf4:	46e2      	mov	sl, ip
 8004cf6:	eb19 0309 	adds.w	r3, r9, r9
 8004cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8004cfe:	4699      	mov	r9, r3
 8004d00:	46a2      	mov	sl, r4
 8004d02:	eb19 090b 	adds.w	r9, r9, fp
 8004d06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d1e:	4689      	mov	r9, r1
 8004d20:	4692      	mov	sl, r2
 8004d22:	eb1b 0509 	adds.w	r5, fp, r9
 8004d26:	eb4c 060a 	adc.w	r6, ip, sl
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	0094      	lsls	r4, r2, #2
 8004d3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	f7fb ffac 	bl	8000ca8 <__aeabi_uldivmod>
 8004d50:	4603      	mov	r3, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b77      	ldr	r3, [pc, #476]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004d58:	fba3 1302 	umull	r1, r3, r3, r2
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	2164      	movs	r1, #100	; 0x64
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	3332      	adds	r3, #50	; 0x32
 8004d6a:	4a72      	ldr	r2, [pc, #456]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4442      	add	r2, r8
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	e0d0      	b.n	8004f22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fe f8d2 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8004d84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	469a      	mov	sl, r3
 8004d8a:	f04f 0b00 	mov.w	fp, #0
 8004d8e:	46d0      	mov	r8, sl
 8004d90:	46d9      	mov	r9, fp
 8004d92:	eb18 0308 	adds.w	r3, r8, r8
 8004d96:	eb49 0409 	adc.w	r4, r9, r9
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	46a1      	mov	r9, r4
 8004d9e:	eb18 080a 	adds.w	r8, r8, sl
 8004da2:	eb49 090b 	adc.w	r9, r9, fp
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004db2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004db6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dba:	4688      	mov	r8, r1
 8004dbc:	4691      	mov	r9, r2
 8004dbe:	eb1a 0508 	adds.w	r5, sl, r8
 8004dc2:	eb4b 0609 	adc.w	r6, fp, r9
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	0094      	lsls	r4, r2, #2
 8004dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	4631      	mov	r1, r6
 8004de8:	f7fb ff5e 	bl	8000ca8 <__aeabi_uldivmod>
 8004dec:	4603      	mov	r3, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004df4:	fba3 2302 	umull	r2, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	469b      	mov	fp, r3
 8004e02:	f04f 0c00 	mov.w	ip, #0
 8004e06:	46d9      	mov	r9, fp
 8004e08:	46e2      	mov	sl, ip
 8004e0a:	eb19 0309 	adds.w	r3, r9, r9
 8004e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e12:	4699      	mov	r9, r3
 8004e14:	46a2      	mov	sl, r4
 8004e16:	eb19 090b 	adds.w	r9, r9, fp
 8004e1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e32:	4689      	mov	r9, r1
 8004e34:	4692      	mov	sl, r2
 8004e36:	eb1b 0509 	adds.w	r5, fp, r9
 8004e3a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 0400 	mov.w	r4, #0
 8004e50:	0094      	lsls	r4, r2, #2
 8004e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e56:	008b      	lsls	r3, r1, #2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	4631      	mov	r1, r6
 8004e60:	f7fb ff22 	bl	8000ca8 <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	2164      	movs	r1, #100	; 0x64
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	3332      	adds	r3, #50	; 0x32
 8004e7e:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8a:	4498      	add	r8, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	469b      	mov	fp, r3
 8004e90:	f04f 0c00 	mov.w	ip, #0
 8004e94:	46d9      	mov	r9, fp
 8004e96:	46e2      	mov	sl, ip
 8004e98:	eb19 0309 	adds.w	r3, r9, r9
 8004e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004ea0:	4699      	mov	r9, r3
 8004ea2:	46a2      	mov	sl, r4
 8004ea4:	eb19 090b 	adds.w	r9, r9, fp
 8004ea8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	4692      	mov	sl, r2
 8004ec4:	eb1b 0509 	adds.w	r5, fp, r9
 8004ec8:	eb4c 060a 	adc.w	r6, ip, sl
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	f04f 0400 	mov.w	r4, #0
 8004ede:	0094      	lsls	r4, r2, #2
 8004ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ee4:	008b      	lsls	r3, r1, #2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4623      	mov	r3, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	4631      	mov	r1, r6
 8004eee:	f7fb fedb 	bl	8000ca8 <__aeabi_uldivmod>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004efa:	fba3 1302 	umull	r1, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2164      	movs	r1, #100	; 0x64
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	; 0x32
 8004f0c:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <UART_SetConfig+0x6f4>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4442      	add	r2, r8
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	e7ff      	b.n	8004f22 <UART_SetConfig+0x6e2>
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	40011000 	.word	0x40011000
 8004f30:	40011400 	.word	0x40011400
 8004f34:	51eb851f 	.word	0x51eb851f

08004f38 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <lv_disp_get_scr_act+0x14>
 8004f46:	f00d fb2b 	bl	80125a0 <lv_disp_get_default>
 8004f4a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e001      	b.n	8004f5a <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <lv_disp_get_layer_top+0x14>
 8004f70:	f00d fb16 	bl	80125a0 <lv_disp_get_default>
 8004f74:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e001      	b.n	8004f84 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <lv_disp_get_layer_sys+0x14>
 8004f9a:	f00d fb01 	bl	80125a0 <lv_disp_get_default>
 8004f9e:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e001      	b.n	8004fae <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004fbc:	2160      	movs	r1, #96	; 0x60
 8004fbe:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <lv_group_init+0x10>)
 8004fc0:	f00e fa00 	bl	80133c4 <lv_ll_init>
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20006df4 	.word	0x20006df4

08004fcc <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d040      	beq.n	800505e <lv_group_add_obj+0x92>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    LV_LL_READ(group->obj_ll, obj_i)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f00e fb72 	bl	80136c8 <lv_ll_get_head>
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	e00a      	b.n	8004ffe <lv_group_add_obj+0x32>
    {
        if((*obj_i) == obj) {
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d037      	beq.n	8005062 <lv_group_add_obj+0x96>
    LV_LL_READ(group->obj_ll, obj_i)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f00e fb8c 	bl	8013714 <lv_ll_get_next>
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f1      	bne.n	8004fe8 <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 800500c:	6838      	ldr	r0, [r7, #0]
 800500e:	f002 f952 	bl	80072b6 <lv_obj_is_focused>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f953 	bl	80052c8 <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f00e fa65 	bl	80134fa <lv_ll_ins_tail>
 8005030:	60b8      	str	r0, [r7, #8]
    lv_mem_assert(next);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d100      	bne.n	800503a <lv_group_add_obj+0x6e>
 8005038:	e7fe      	b.n	8005038 <lv_group_add_obj+0x6c>
    if(next == NULL) return;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <lv_group_add_obj+0x9a>
    *next = obj;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	f00e fb3d 	bl	80136c8 <lv_ll_get_head>
 800504e:	4602      	mov	r2, r0
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <lv_group_add_obj+0x9c>
        lv_group_refocus(group);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f936 	bl	80052c8 <lv_group_refocus>
 800505c:	e004      	b.n	8005068 <lv_group_add_obj+0x9c>
    if(group == NULL) return;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <lv_group_add_obj+0x9c>
            return;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <lv_group_add_obj+0x9c>
    if(next == NULL) return;
 8005066:	bf00      	nop
    }
}
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <lv_group_remove_obj>:
/**
 * Remove an object from its group
 * @param obj pointer to an object to remove
 */
void lv_group_remove_obj(lv_obj_t * obj)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
    lv_group_t * g = obj->group_p;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	60bb      	str	r3, [r7, #8]
    if(g == NULL) return;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d053      	beq.n	800512a <lv_group_remove_obj+0xbc>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d051      	beq.n	800512e <lv_group_remove_obj+0xc0>

    /*Focus on the next object*/
    if(*g->obj_focus == obj) {
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d11f      	bne.n	80050d6 <lv_group_remove_obj+0x68>
        /*If this is the only object in the group then focus to nothing.*/
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f00e fb15 	bl	80136c8 <lv_ll_get_head>
 800509e:	4602      	mov	r2, r0
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d113      	bne.n	80050d0 <lv_group_remove_obj+0x62>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f00e fb1f 	bl	80136ee <lv_ll_get_tail>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10a      	bne.n	80050d0 <lv_group_remove_obj+0x62>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	68d2      	ldr	r2, [r2, #12]
 80050c6:	6810      	ldr	r0, [r2, #0]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2110      	movs	r1, #16
 80050cc:	4798      	blx	r3
 80050ce:	e002      	b.n	80050d6 <lv_group_remove_obj+0x68>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	f000 f8f9 	bl	80052c8 <lv_group_refocus>
    }

    /* If the focuses object is still the same then it was the only object in the group but it will
     * be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     * zero objects*/
    if(*g->obj_focus == obj) {
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d102      	bne.n	80050e8 <lv_group_remove_obj+0x7a>
        g->obj_focus = NULL;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group */
    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f00e faec 	bl	80136c8 <lv_ll_get_head>
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	e016      	b.n	8005122 <lv_group_remove_obj+0xb4>
    {
        if(*i == obj) {
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d10b      	bne.n	8005116 <lv_group_remove_obj+0xa8>
            lv_ll_rem(&g->obj_ll, i);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	4618      	mov	r0, r3
 8005104:	f00e fa32 	bl	801356c <lv_ll_rem>
            lv_mem_free(i);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f00e fc9d 	bl	8013a48 <lv_mem_free>
            obj->group_p = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8005114:	e00c      	b.n	8005130 <lv_group_remove_obj+0xc2>
    LV_LL_READ(g->obj_ll, i)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	4618      	mov	r0, r3
 800511c:	f00e fafa 	bl	8013714 <lv_ll_get_next>
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <lv_group_remove_obj+0x86>
 8005128:	e002      	b.n	8005130 <lv_group_remove_obj+0xc2>
    if(g == NULL) return;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <lv_group_remove_obj+0xc2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800512e:	bf00      	nop
        }
    }
}
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_head, lv_ll_get_next);
 8005140:	4a04      	ldr	r2, [pc, #16]	; (8005154 <lv_group_focus_next+0x1c>)
 8005142:	4905      	ldr	r1, [pc, #20]	; (8005158 <lv_group_focus_next+0x20>)
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8f7 	bl	8005338 <focus_next_core>
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	08013715 	.word	0x08013715
 8005158:	080136c9 	.word	0x080136c9

0800515c <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_tail, lv_ll_get_prev);
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <lv_group_focus_prev+0x1c>)
 8005166:	4905      	ldr	r1, [pc, #20]	; (800517c <lv_group_focus_prev+0x20>)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8e5 	bl	8005338 <focus_next_core>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	08013749 	.word	0x08013749
 800517c:	080136ef 	.word	0x080136ef

08005180 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
    uint8_t en_val = edit ? 1 : 0;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005196:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d028      	beq.n	80051f6 <lv_group_set_editing+0x76>

    group->editing     = en_val;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	b2d9      	uxtb	r1, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80051b2:	f361 0341 	bfi	r3, r1, #1, #1
 80051b6:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f851 	bl	8005262 <lv_group_get_focused>
 80051c0:	6138      	str	r0, [r7, #16]

    if(focused) {
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <lv_group_set_editing+0x6e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	2200      	movs	r2, #0
 80051ce:	210f      	movs	r1, #15
 80051d0:	6938      	ldr	r0, [r7, #16]
 80051d2:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	210c      	movs	r1, #12
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 fdd7 	bl	8006d92 <lv_event_send>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <lv_group_set_editing+0x7a>
    }

    lv_obj_invalidate(focused);
 80051ee:	6938      	ldr	r0, [r7, #16]
 80051f0:	f000 fe1d 	bl	8005e2e <lv_obj_invalidate>
 80051f4:	e002      	b.n	80051fc <lv_group_set_editing+0x7c>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <lv_group_set_editing+0x7c>
        if(res != LV_RES_OK) return;
 80051fa:	bf00      	nop
}
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <lv_group_mod_style>:
 * @param group pointer to group
 * @param style pointer to a style to modify
 * @return a copy of the input style but modified with the 'style_mod' function
 */
lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
    /*Load the current style. It will be modified by the callback*/
    lv_style_copy(&group->style_tmp, style);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	331c      	adds	r3, #28
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f003 faa6 	bl	8008764 <lv_style_copy>

    if(group->editing) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <lv_group_mod_style+0x3e>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <lv_group_mod_style+0x54>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	321c      	adds	r2, #28
 8005238:	4611      	mov	r1, r2
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
 800523e:	e00a      	b.n	8005256 <lv_group_mod_style+0x54>
    } else {
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <lv_group_mod_style+0x54>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	321c      	adds	r2, #28
 8005250:	4611      	mov	r1, r2
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
    }
    return &group->style_tmp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	331c      	adds	r3, #28
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <lv_group_get_focused+0x12>
 8005270:	2300      	movs	r3, #0
 8005272:	e008      	b.n	8005286 <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <lv_group_get_focused+0x1e>
 800527c:	2300      	movs	r3, #0
 800527e:	e002      	b.n	8005286 <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <lv_group_get_editing+0x12>
 80052a0:	2300      	movs	r3, #0
 80052a2:	e00b      	b.n	80052bc <lv_group_get_editing+0x2a>
    return group->editing ? true : false;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80052e4:	f043 0310 	orr.w	r3, r3, #16
 80052e8:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <lv_group_refocus+0x3c>
        lv_group_focus_next(g);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff1b 	bl	8005138 <lv_group_focus_next>
 8005302:	e00a      	b.n	800531a <lv_group_refocus+0x52>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <lv_group_refocus+0x52>
        lv_group_focus_prev(g);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff21 	bl	800515c <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	b2d9      	uxtb	r1, r3
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8005328:	f361 1304 	bfi	r3, r1, #4, #1
 800532c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <focus_next_core>:
    }
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 80a6 	bne.w	80054a2 <focus_next_core+0x16a>

    lv_obj_t ** obj_next     = group->obj_focus;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8005360:	2301      	movs	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 8005364:	2301      	movs	r3, #1
 8005366:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11b      	bne.n	80053a6 <focus_next_core+0x6e>
            if(group->wrap || obj_sentinel == NULL) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <focus_next_core+0x4e>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 8090 	bne.w	80054a6 <focus_next_core+0x16e>
                if(!can_begin) return;
 8005386:	7dbb      	ldrb	r3, [r7, #22]
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 808b 	bne.w	80054aa <focus_next_core+0x172>
                obj_next  = begin(&group->obj_ll);
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4610      	mov	r0, r2
 800539a:	4798      	blx	r3
 800539c:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <focus_next_core+0x7e>
            obj_sentinel = obj_next;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d07b      	beq.n	80054ae <focus_next_core+0x176>
        }

        if(can_move) {
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <focus_next_core+0x98>
            obj_next = move(&group->obj_ll, obj_next);
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	4610      	mov	r0, r2
 80053c4:	4798      	blx	r3
 80053c6:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d070      	beq.n	80054b2 <focus_next_core+0x17a>
        }

        can_move = true;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <focus_next_core+0xba>

        /*Hidden objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 feee 	bl	80071c0 <lv_obj_get_hidden>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <focus_next_core+0xbe>
 80053f0:	e7ba      	b.n	8005368 <focus_next_core+0x30>
        if(obj_next == NULL) continue;
 80053f2:	bf00      	nop
        if(obj_next == NULL) {
 80053f4:	e7b8      	b.n	8005368 <focus_next_core+0x30>
        if(!lv_obj_get_hidden(*obj_next)) break;
 80053f6:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d059      	beq.n	80054b6 <focus_next_core+0x17e>

    if(group->obj_focus) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01c      	beq.n	8005444 <focus_next_core+0x10c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	68d2      	ldr	r2, [r2, #12]
 8005416:	6810      	ldr	r0, [r2, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	2110      	movs	r1, #16
 800541c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2200      	movs	r2, #0
 8005426:	210d      	movs	r1, #13
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fcb2 	bl	8006d92 <lv_event_send>
 800542e:	4603      	mov	r3, r0
 8005430:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8005432:	7d7b      	ldrb	r3, [r7, #21]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d140      	bne.n	80054ba <focus_next_core+0x182>
        lv_obj_invalidate(*group->obj_focus);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fcf5 	bl	8005e2e <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	68d2      	ldr	r2, [r2, #12]
 8005456:	6810      	ldr	r0, [r2, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	210f      	movs	r1, #15
 800545c:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	210c      	movs	r1, #12
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fc92 	bl	8006d92 <lv_event_send>
 800546e:	4603      	mov	r3, r0
 8005470:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8005472:	7d3b      	ldrb	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d122      	bne.n	80054be <focus_next_core+0x186>

    /*If the object or its parent has `top == true` bring it to the foregorund*/
    obj_to_foreground(*group->obj_focus);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f821 	bl	80054c6 <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fccf 	bl	8005e2e <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <focus_next_core+0x188>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	4798      	blx	r3
 80054a0:	e00e      	b.n	80054c0 <focus_next_core+0x188>
    if(group->frozen) return;
 80054a2:	bf00      	nop
 80054a4:	e00c      	b.n	80054c0 <focus_next_core+0x188>
                return;
 80054a6:	bf00      	nop
 80054a8:	e00a      	b.n	80054c0 <focus_next_core+0x188>
                if(!can_begin) return;
 80054aa:	bf00      	nop
 80054ac:	e008      	b.n	80054c0 <focus_next_core+0x188>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80054ae:	bf00      	nop
 80054b0:	e006      	b.n	80054c0 <focus_next_core+0x188>
            if(obj_next == obj_sentinel) return;
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <focus_next_core+0x188>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <focus_next_core+0x188>
        if(res != LV_RES_OK) return;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <focus_next_core+0x188>
    if(res != LV_RES_OK) return;
 80054be:	bf00      	nop
}
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 80054d6:	e00d      	b.n	80054f4 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <obj_to_foreground+0x26>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f001 fd75 	bl	8006fdc <lv_obj_get_parent>
 80054f2:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ee      	bne.n	80054d8 <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8005500:	68b8      	ldr	r0, [r7, #8]
 8005502:	f000 fd69 	bl	8005fd8 <lv_obj_move_foreground>
    }
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 8005512:	2000      	movs	r0, #0
 8005514:	f000 f81f 	bl	8005556 <lv_indev_reset>
}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}

0800551c <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
    return indev_act;
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <lv_indev_get_act+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20002a48 	.word	0x20002a48

08005534 <lv_indev_get_type>:
 * Get the type of an input device
 * @param indev pointer to an input device
 * @return the type of the input device from `lv_hal_indev_type_t` (`LV_INDEV_TYPE_...`)
 */
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <lv_indev_get_type+0x12>
 8005542:	2300      	movs	r3, #0
 8005544:	e001      	b.n	800554a <lv_indev_get_type+0x16>

    return indev->driver.type;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	781b      	ldrb	r3, [r3, #0]
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
    if(indev)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 8005572:	e012      	b.n	800559a <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8005574:	2000      	movs	r0, #0
 8005576:	f00d f8d1 	bl	801271c <lv_indev_get_next>
 800557a:	60f8      	str	r0, [r7, #12]
        while(i) {
 800557c:	e00a      	b.n	8005594 <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i = lv_indev_get_next(i);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f00d f8c5 	bl	801271c <lv_indev_get_next>
 8005592:	60f8      	str	r0, [r7, #12]
        while(i) {
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f1      	bne.n	800557e <lv_indev_reset+0x28>
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <lv_indev_reset_long_press>:
/**
 * Reset the long press state of an input device
 * @param indev pointer to an input device
 */
void lv_indev_reset_long_press(lv_indev_t * indev)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
    indev->proc.long_pr_sent         = 0;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80055b0:	f36f 0300 	bfc	r3, #0, #1
 80055b4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80055b8:	f00d f8e0 	bl	801277c <lv_tick_get>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	64da      	str	r2, [r3, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 80055c2:	f00d f8db 	bl	801277c <lv_tick_get>
 80055c6:	4602      	mov	r2, r0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	649a      	str	r2, [r3, #72]	; 0x48
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <lv_indev_get_point>:
 * Get the last point of an input device (for LV_INDEV_TYPE_POINTER and LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d00c      	beq.n	8005600 <lv_indev_get_point+0x2c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d008      	beq.n	8005600 <lv_indev_get_point+0x2c>
        point->x = -1;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f4:	801a      	strh	r2, [r3, #0]
        point->y = -1;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fc:	805a      	strh	r2, [r3, #2]
 80055fe:	e009      	b.n	8005614 <lv_indev_get_point+0x40>
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	805a      	strh	r2, [r3, #2]
    }
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <lv_indev_is_dragging>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <lv_indev_is_dragging+0x12>
 800562e:	2300      	movs	r3, #0
 8005630:	e014      	b.n	800565c <lv_indev_is_dragging+0x3c>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d005      	beq.n	8005646 <lv_indev_is_dragging+0x26>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d001      	beq.n	8005646 <lv_indev_is_dragging+0x26>
 8005642:	2300      	movs	r3, #0
 8005644:	e00a      	b.n	800565c <lv_indev_is_dragging+0x3c>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf14      	ite	ne
 8005656:	2301      	movne	r3, #1
 8005658:	2300      	moveq	r3, #0
 800565a:	b2db      	uxtb	r3, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <lv_indev_get_vect>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
    if(indev == NULL) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <lv_indev_get_vect+0x1e>
        point->x = 0;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	805a      	strh	r2, [r3, #2]
        return;
 8005684:	e018      	b.n	80056b8 <lv_indev_get_vect+0x50>
    }

    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d00a      	beq.n	80056a4 <lv_indev_get_vect+0x3c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d006      	beq.n	80056a4 <lv_indev_get_vect+0x3c>
        point->x = 0;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2200      	movs	r2, #0
 800569a:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	805a      	strh	r2, [r3, #2]
 80056a2:	e009      	b.n	80056b8 <lv_indev_get_vect+0x50>
    } else {
        point->x = indev->proc.types.pointer.vect.x;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.vect.y;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	805a      	strh	r2, [r3, #2]
    }
}
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <lv_indev_get_obj_act>:
/**
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
    return indev_obj_act;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <lv_indev_get_obj_act+0x14>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20002a4c 	.word	0x20002a4c

080056dc <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80056e6:	2208      	movs	r2, #8
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f021 fd9a 	bl	8027224 <memcpy>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800570e:	b29b      	uxth	r3, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	b29b      	uxth	r3, r3
 8005714:	3301      	adds	r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	b21b      	sxth	r3, r3
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	3301      	adds	r3, #1
 8005744:	b29b      	uxth	r3, r3
 8005746:	b21b      	sxth	r3, r3
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <lv_init+0x54>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d121      	bne.n	80057a4 <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8005760:	f00e f92a 	bl	80139b8 <lv_mem_init>
    lv_task_core_init();
 8005764:	f00e f9f4 	bl	8013b50 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8005768:	f00d fca8 	bl	80130bc <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 800576c:	f00d f83c 	bl	80127e8 <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8005770:	f7ff fc22 	bl	8004fb8 <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8005774:	f002 fdaa 	bl	80082cc <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8005778:	f001 ffd6 	bl	8007728 <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800577c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8005780:	480a      	ldr	r0, [pc, #40]	; (80057ac <lv_init+0x58>)
 8005782:	f00d fe1f 	bl	80133c4 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005786:	2160      	movs	r1, #96	; 0x60
 8005788:	4809      	ldr	r0, [pc, #36]	; (80057b0 <lv_init+0x5c>)
 800578a:	f00d fe1b 	bl	80133c4 <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 800578e:	f7ff febe 	bl	800550e <lv_indev_init>

    lv_img_decoder_init();
 8005792:	f00b fb0b 	bl	8010dac <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8005796:	2001      	movs	r0, #1
 8005798:	f00b fa1e 	bl	8010bd8 <lv_img_cache_set_size>

    lv_initialized = true;
 800579c:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <lv_init+0x54>)
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e000      	b.n	80057a6 <lv_init+0x52>
        return;
 80057a4:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20002a50 	.word	0x20002a50
 80057ac:	20006dbc 	.word	0x20006dbc
 80057b0:	20006dac 	.word	0x20006dac

080057b4 <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]

    lv_obj_t * new_obj = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
    /*Create a screen if the parent is NULL*/
    if(parent == NULL) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 80bf 	bne.w	8005948 <lv_obj_create+0x194>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 80057ca:	f00c fee9 	bl	80125a0 <lv_disp_get_default>
 80057ce:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <lv_obj_create+0x26>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e26a      	b.n	8005cb0 <lv_obj_create+0x4fc>
        }

        new_obj = lv_ll_ins_head(&disp->scr_ll);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3328      	adds	r3, #40	; 0x28
 80057de:	4618      	mov	r0, r3
 80057e0:	f00d fe10 	bl	8013404 <lv_ll_ins_head>
 80057e4:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d100      	bne.n	80057ee <lv_obj_create+0x3a>
 80057ec:	e7fe      	b.n	80057ec <lv_obj_create+0x38>
        if(new_obj == NULL) return NULL;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <lv_obj_create+0x44>
 80057f4:	2300      	movs	r3, #0
 80057f6:	e25b      	b.n	8005cb0 <lv_obj_create+0x4fc>

        new_obj->par = NULL; /*Screens has no a parent*/
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3304      	adds	r3, #4
 8005802:	2148      	movs	r1, #72	; 0x48
 8005804:	4618      	mov	r0, r3
 8005806:	f00d fddd 	bl	80133c4 <lv_ll_init>

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8005816:	2000      	movs	r0, #0
 8005818:	f00c fece 	bl	80125b8 <lv_disp_get_hor_res>
 800581c:	4603      	mov	r3, r0
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	b21a      	sxth	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800582a:	2000      	movs	r0, #0
 800582c:	f00c fee5 	bl	80125fa <lv_disp_get_ver_res>
 8005830:	4603      	mov	r3, r0
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29b      	uxth	r3, r3
 8005838:	b21a      	sxth	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2200      	movs	r2, #0
 8005850:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8005864:	f36f 0300 	bfc	r3, #0, #1
 8005868:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 800586c:	f019 fb8e 	bl	801ef8c <lv_theme_get_current>
 8005870:	60b8      	str	r0, [r7, #8]
        if(th) {
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <lv_obj_create+0xce>
            new_obj->style_p = th->style.scr;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
 8005880:	e002      	b.n	8005888 <lv_obj_create+0xd4>
        } else {
            new_obj->style_p = &lv_style_scr;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4a5b      	ldr	r2, [pc, #364]	; (80059f4 <lv_obj_create+0x240>)
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
        }
        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8005888:	495b      	ldr	r1, [pc, #364]	; (80059f8 <lv_obj_create+0x244>)
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f001 fb12 	bl	8006eb4 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8005890:	495a      	ldr	r1, [pc, #360]	; (80059fc <lv_obj_create+0x248>)
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f001 fb1c 	bl	8006ed0 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3344      	adds	r3, #68	; 0x44
 80058a2:	2204      	movs	r2, #4
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f021 fcc7 	bl	802723a <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
        /*Set attributes*/
        new_obj->click        = 0;
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058b8:	f36f 0300 	bfc	r3, #0, #1
 80058bc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058c6:	f36f 0341 	bfc	r3, #1, #1
 80058ca:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_throw   = 0;
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058d4:	f36f 0382 	bfc	r3, #2, #1
 80058d8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058e2:	f36f 03c3 	bfc	r3, #3, #1
 80058e6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058f0:	f36f 1304 	bfc	r3, #4, #1
 80058f4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80058fe:	f36f 1345 	bfc	r3, #5, #1
 8005902:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale_en = 0;
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005914:	f36f 1386 	bfc	r3, #6, #1
 8005918:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->opa_scale    = LV_OPA_COVER;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->parent_event = 0;
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800592a:	f36f 13c7 	bfc	r3, #7, #1
 800592e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->reserved     = 0;
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005938:	f36f 0387 	bfc	r3, #2, #6
 800593c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        new_obj->ext_attr = NULL;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	625a      	str	r2, [r3, #36]	; 0x24
 8005946:	e0bd      	b.n	8005ac4 <lv_obj_create+0x310>
    }
    /*parent != NULL create normal obj. on a parent*/
    else {
        LV_LOG_TRACE("Object create started");

        new_obj = lv_ll_ins_head(&parent->child_ll);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f00d fd59 	bl	8013404 <lv_ll_ins_head>
 8005952:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d100      	bne.n	800595c <lv_obj_create+0x1a8>
 800595a:	e7fe      	b.n	800595a <lv_obj_create+0x1a6>
        if(new_obj == NULL) return NULL;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <lv_obj_create+0x1b2>
 8005962:	2300      	movs	r3, #0
 8005964:	e1a4      	b.n	8005cb0 <lv_obj_create+0x4fc>

        new_obj->par = parent; /*Set the parent*/
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3304      	adds	r3, #4
 8005970:	2148      	movs	r1, #72	; 0x48
 8005972:	4618      	mov	r0, r3
 8005974:	f00d fd26 	bl	80133c4 <lv_ll_init>

        /*Set coordinates left top corner of parent*/
        new_obj->coords.x1    = parent->coords.x1;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005992:	b29b      	uxth	r3, r3
 8005994:	3364      	adds	r3, #100	; 0x64
 8005996:	b29b      	uxth	r3, r3
 8005998:	b21a      	sxth	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3342      	adds	r3, #66	; 0x42
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	b21a      	sxth	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2200      	movs	r2, #0
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 80059d6:	f36f 0300 	bfc	r3, #0, #1
 80059da:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
        /*Set appearance*/
        lv_theme_t * th = lv_theme_get_current();
 80059de:	f019 fad5 	bl	801ef8c <lv_theme_get_current>
 80059e2:	6138      	str	r0, [r7, #16]
        if(th) {
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <lv_obj_create+0x24c>
            new_obj->style_p = th->style.panel;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
 80059f2:	e008      	b.n	8005a06 <lv_obj_create+0x252>
 80059f4:	20006cec 	.word	0x20006cec
 80059f8:	08007401 	.word	0x08007401
 80059fc:	080072e7 	.word	0x080072e7
        } else {
            new_obj->style_p = &lv_style_plain_color;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4aad      	ldr	r2, [pc, #692]	; (8005cb8 <lv_obj_create+0x504>)
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8005a06:	49ad      	ldr	r1, [pc, #692]	; (8005cbc <lv_obj_create+0x508>)
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f001 fa53 	bl	8006eb4 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8005a0e:	49ac      	ldr	r1, [pc, #688]	; (8005cc0 <lv_obj_create+0x50c>)
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f001 fa5d 	bl	8006ed0 <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3344      	adds	r3, #68	; 0x44
 8005a20:	2204      	movs	r2, #4
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f021 fc08 	bl	802723a <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

        /*Set attributes*/
        new_obj->click        = 1;
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = 0;
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a44:	f36f 0341 	bfc	r3, #1, #1
 8005a48:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005a52:	f043 0303 	orr.w	r3, r3, #3
 8005a56:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = 0;
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a60:	f36f 0382 	bfc	r3, #2, #1
 8005a64:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = 0;
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a6e:	f36f 03c3 	bfc	r3, #3, #1
 8005a72:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = 0;
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a7c:	f36f 1304 	bfc	r3, #4, #1
 8005a80:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = 0;
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005a8a:	f36f 1345 	bfc	r3, #5, #1
 8005a8e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        new_obj->opa_scale_en = 0;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005aa8:	f36f 1386 	bfc	r3, #6, #1
 8005aac:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = 0;
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005ab6:	f36f 13c7 	bfc	r3, #7, #1
 8005aba:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->ext_attr = NULL;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Copy the attributes if required*/
    if(copy != NULL) {
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80e5 	beq.w	8005c96 <lv_obj_create+0x4e2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f103 0210 	add.w	r2, r3, #16
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	3310      	adds	r3, #16
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7ff fdff 	bl	80056dc <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	869a      	strh	r2, [r3, #52]	; 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
#endif

        /*Set free data*/
#if LV_USE_USER_DATA
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3344      	adds	r3, #68	; 0x44
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	3244      	adds	r2, #68	; 0x44
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	601a      	str	r2, [r3, #0]
#endif
        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	879a      	strh	r2, [r3, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b26:	b2d9      	uxtb	r1, r3
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8005b2e:	f361 0300 	bfi	r3, r1, #0, #1
 8005b32:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied the the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->click        = copy->click;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b48:	b2d9      	uxtb	r1, r3
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005b50:	f361 0300 	bfi	r3, r1, #0, #1
 8005b54:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b62:	b2d9      	uxtb	r1, r3
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005b6a:	f361 0341 	bfi	r3, r1, #1, #1
 8005b6e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b78:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005b7c:	b2d9      	uxtb	r1, r3
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8005b84:	f361 0301 	bfi	r3, r1, #0, #2
 8005b88:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b96:	b2d9      	uxtb	r1, r3
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005b9e:	f361 0382 	bfi	r3, r1, #2, #1
 8005ba2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005bb0:	b2d9      	uxtb	r1, r3
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bb8:	f361 03c3 	bfi	r3, r1, #3, #1
 8005bbc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bca:	b2d9      	uxtb	r1, r3
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bd2:	f361 1304 	bfi	r3, r1, #4, #1
 8005bd6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->top          = copy->top;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005be0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005be4:	b2d9      	uxtb	r1, r3
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005bec:	f361 1345 	bfi	r3, r1, #5, #1
 8005bf0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bfe:	b2d9      	uxtb	r1, r3
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005c06:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c0a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30

        new_obj->opa_scale_en = copy->opa_scale_en;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c18:	b2d9      	uxtb	r1, r3
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8005c20:	f361 1386 	bfi	r3, r1, #6, #1
 8005c24:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        new_obj->style_p = copy->style_p;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <lv_obj_create+0x4a8>
            lv_group_add_obj(copy->group_p, new_obj);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	6979      	ldr	r1, [r7, #20]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff f9b8 	bl	8004fcc <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f001 f9bd 	bl	8006fdc <lv_obj_get_parent>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d011      	beq.n	8005c8c <lv_obj_create+0x4d8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <lv_obj_create+0x4d8>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8005c6e:	6838      	ldr	r0, [r7, #0]
 8005c70:	f001 f9ec 	bl	800704c <lv_obj_get_x>
 8005c74:	4603      	mov	r3, r0
 8005c76:	461c      	mov	r4, r3
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f001 fa00 	bl	800707e <lv_obj_get_y>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	4621      	mov	r1, r4
 8005c84:	6978      	ldr	r0, [r7, #20]
 8005c86:	f000 f9d1 	bl	800602c <lv_obj_set_pos>
 8005c8a:	e004      	b.n	8005c96 <lv_obj_create+0x4e2>
        } else {
            lv_obj_set_pos(new_obj, 0, 0);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6978      	ldr	r0, [r7, #20]
 8005c92:	f000 f9cb 	bl	800602c <lv_obj_set_pos>

        LV_LOG_INFO("Object create ready");
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <lv_obj_create+0x4fa>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f000 f8c0 	bl	8005e2e <lv_obj_invalidate>
    }

    return new_obj;
 8005cae:	697b      	ldr	r3, [r7, #20]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd90      	pop	{r4, r7, pc}
 8005cb8:	20006d64 	.word	0x20006d64
 8005cbc:	08007401 	.word	0x08007401
 8005cc0:	080072e7 	.word	0x080072e7

08005cc4 <lv_obj_del>:
 * Delete 'obj' and all of its children
 * @param obj pointer to an object to delete
 * @return LV_RES_INV because the object is deleted
 */
lv_res_t lv_obj_del(lv_obj_t * obj)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8ae 	bl	8005e2e <lv_obj_invalidate>

    /*Delete from the group*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fae3 	bl	800729e <lv_obj_get_group>
 8005cd8:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <lv_obj_del+0x22>
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff f9c4 	bl	800506e <lv_group_remove_obj>
#endif

        /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f00c fdd7 	bl	801289c <lv_anim_del>
#endif

    /*Recursively delete the children*/
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00d fce8 	bl	80136c8 <lv_ll_get_head>
 8005cf8:	61f8      	str	r0, [r7, #28]
    while(i != NULL) {
 8005cfa:	e00b      	b.n	8005d14 <lv_obj_del+0x50>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f00d fd06 	bl	8013714 <lv_ll_get_next>
 8005d08:	60b8      	str	r0, [r7, #8]

        /*Call the recursive del to the child too*/
        delete_children(i);
 8005d0a:	69f8      	ldr	r0, [r7, #28]
 8005d0c:	f001 fc33 	bl	8007576 <delete_children>

        /*Set i to the next node*/
        i = i_next;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <lv_obj_del+0x38>
    }

    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2113      	movs	r1, #19
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 f837 	bl	8006d92 <lv_event_send>

    lv_event_mark_deleted(obj);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fca5 	bl	8007674 <lv_event_mark_deleted>

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 f956 	bl	8006fdc <lv_obj_get_parent>
 8005d30:	6138      	str	r0, [r7, #16]
    if(par == NULL) { /*It is a screen*/
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <lv_obj_del+0x8a>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f915 	bl	8006f68 <lv_obj_get_disp>
 8005d3e:	60f8      	str	r0, [r7, #12]
        lv_ll_rem(&d->scr_ll, obj);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3328      	adds	r3, #40	; 0x28
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f00d fc10 	bl	801356c <lv_ll_rem>
 8005d4c:	e005      	b.n	8005d5a <lv_obj_del+0x96>
    } else {
        lv_ll_rem(&(par->child_ll), obj);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3304      	adds	r3, #4
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f00d fc09 	bl	801356c <lv_ll_rem>
    }

    /* Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f00c fcde 	bl	801271c <lv_indev_get_next>
 8005d60:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8005d62:	e026      	b.n	8005db2 <lv_obj_del+0xee>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d004      	beq.n	8005d78 <lv_obj_del+0xb4>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d102      	bne.n	8005d7e <lv_obj_del+0xba>
            lv_indev_reset(indev);
 8005d78:	69b8      	ldr	r0, [r7, #24]
 8005d7a:	f7ff fbec 	bl	8005556 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d102      	bne.n	8005d8e <lv_obj_del+0xca>
            indev->proc.types.pointer.last_pressed = NULL;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
        }

#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d108      	bne.n	8005daa <lv_obj_del+0xe6>
 8005d98:	f7ff fc94 	bl	80056c4 <lv_indev_get_obj_act>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d102      	bne.n	8005daa <lv_obj_del+0xe6>
            lv_indev_reset(indev);
 8005da4:	69b8      	ldr	r0, [r7, #24]
 8005da6:	f7ff fbd6 	bl	8005556 <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 8005daa:	69b8      	ldr	r0, [r7, #24]
 8005dac:	f00c fcb6 	bl	801271c <lv_indev_get_next>
 8005db0:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1d5      	bne.n	8005d64 <lv_obj_del+0xa0>
    }

    /* All children deleted.
     * Now clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <lv_obj_del+0x112>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f00d fe39 	bl	8013a48 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f00d fe36 	bl	8013a48 <lv_mem_free>

    /*Send a signal to the parent to notify it about the child delete*/
    if(par != NULL) {
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <lv_obj_del+0x12a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2200      	movs	r2, #0
 8005de8:	2101      	movs	r1, #1
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	4798      	blx	r3
    }

    return LV_RES_INV;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <lv_obj_clean>:
/**
 * Delete all children of an object
 * @param obj pointer to an object
 */
void lv_obj_clean(lv_obj_t * obj)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8005e00:	2100      	movs	r1, #0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 f8f6 	bl	8006ff4 <lv_obj_get_child>
 8005e08:	60f8      	str	r0, [r7, #12]
    lv_obj_t * child_next;
    while(child) {
 8005e0a:	e009      	b.n	8005e20 <lv_obj_clean+0x28>
        /* Read the next child before deleting the current
         * because the next couldn't be read from a deleted (invalid) node*/
        child_next = lv_obj_get_child(obj, child);
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f8f0 	bl	8006ff4 <lv_obj_get_child>
 8005e14:	60b8      	str	r0, [r7, #8]
        lv_obj_del(child);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff ff54 	bl	8005cc4 <lv_obj_del>
        child = child_next;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	60fb      	str	r3, [r7, #12]
    while(child) {
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f2      	bne.n	8005e0c <lv_obj_clean+0x14>
    }
}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08a      	sub	sp, #40	; 0x28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_hidden(obj)) return;
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f9c2 	bl	80071c0 <lv_obj_get_hidden>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d17e      	bne.n	8005f40 <lv_obj_invalidate+0x112>

    /*Invalidate the object only if it belongs to the 'LV_GC_ROOT(_lv_act_scr)'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 f87c 	bl	8006f40 <lv_obj_get_screen>
 8005e48:	61f8      	str	r0, [r7, #28]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005e4a:	69f8      	ldr	r0, [r7, #28]
 8005e4c:	f001 f88c 	bl	8006f68 <lv_obj_get_disp>
 8005e50:	61b8      	str	r0, [r7, #24]
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8005e52:	69b8      	ldr	r0, [r7, #24]
 8005e54:	f7ff f870 	bl	8004f38 <lv_disp_get_scr_act>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00d      	beq.n	8005e7c <lv_obj_invalidate+0x4e>
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f7ff f87e 	bl	8004f62 <lv_disp_get_layer_top>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d006      	beq.n	8005e7c <lv_obj_invalidate+0x4e>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8005e6e:	69b8      	ldr	r0, [r7, #24]
 8005e70:	f7ff f88c 	bl	8004f8c <lv_disp_get_layer_sys>
 8005e74:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d164      	bne.n	8005f46 <lv_obj_invalidate+0x118>
        /*Truncate recursively to the parents*/
        lv_area_t area_trunc;
        lv_obj_t * par = lv_obj_get_parent(obj);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 f8ad 	bl	8006fdc <lv_obj_get_parent>
 8005e82:	6278      	str	r0, [r7, #36]	; 0x24
        bool union_ok  = true;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        /*Start with the original coordinates*/
        lv_coord_t ext_size = obj->ext_draw_pad;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005e8e:	82fb      	strh	r3, [r7, #22]
        lv_area_copy(&area_trunc, &obj->coords);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f103 0210 	add.w	r2, r3, #16
 8005e96:	f107 030c 	add.w	r3, r7, #12
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fc1d 	bl	80056dc <lv_area_copy>
        area_trunc.x1 -= ext_size;
 8005ea2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	b21b      	sxth	r3, r3
 8005eb0:	81bb      	strh	r3, [r7, #12]
        area_trunc.y1 -= ext_size;
 8005eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	8afb      	ldrh	r3, [r7, #22]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	81fb      	strh	r3, [r7, #14]
        area_trunc.x2 += ext_size;
 8005ec2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	8afb      	ldrh	r3, [r7, #22]
 8005eca:	4413      	add	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b21b      	sxth	r3, r3
 8005ed0:	823b      	strh	r3, [r7, #16]
        area_trunc.y2 += ext_size;
 8005ed2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	8afb      	ldrh	r3, [r7, #22]
 8005eda:	4413      	add	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	827b      	strh	r3, [r7, #18]

        /*Check through all parents*/
        while(par != NULL) {
 8005ee2:	e01d      	b.n	8005f20 <lv_obj_invalidate+0xf2>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	f103 0210 	add.w	r2, r3, #16
 8005eea:	f107 010c 	add.w	r1, r7, #12
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f00c ff4e 	bl	8012d94 <lv_area_intersect>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8005efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f02:	f083 0301 	eor.w	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <lv_obj_invalidate+0xfa>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0e:	f001 f957 	bl	80071c0 <lv_obj_get_hidden>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d115      	bne.n	8005f44 <lv_obj_invalidate+0x116>

            par = lv_obj_get_parent(par);
 8005f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f1a:	f001 f85f 	bl	8006fdc <lv_obj_get_parent>
 8005f1e:	6278      	str	r0, [r7, #36]	; 0x24
        while(par != NULL) {
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1de      	bne.n	8005ee4 <lv_obj_invalidate+0xb6>
 8005f26:	e000      	b.n	8005f2a <lv_obj_invalidate+0xfc>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8005f28:	bf00      	nop
        }

        if(union_ok) lv_inv_area(disp, &area_trunc);
 8005f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <lv_obj_invalidate+0x118>
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4619      	mov	r1, r3
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f001 fbfd 	bl	8007738 <lv_inv_area>
 8005f3e:	e002      	b.n	8005f46 <lv_obj_invalidate+0x118>
    if(lv_obj_get_hidden(obj)) return;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <lv_obj_invalidate+0x118>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005f44:	bf00      	nop
    }
}
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <lv_obj_set_parent>:
 * Set a new parent for an object. Its relative position will be the same.
 * @param obj pointer to an object. Can't be a screen.
 * @param parent pointer to the new parent object. (Can't be NULL)
 */
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
    if(obj->par == NULL) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d036      	beq.n	8005fcc <lv_obj_set_parent+0x80>
        LV_LOG_WARN("Can't set the parent of a screen");
        return;
    }

    if(parent == NULL) {
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d035      	beq.n	8005fd0 <lv_obj_set_parent+0x84>
        LV_LOG_WARN("Can't set parent == NULL to an object");
        return;
    }

    lv_obj_invalidate(obj);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff ff62 	bl	8005e2e <lv_obj_invalidate>

    lv_point_t old_pos;
    old_pos.x = lv_obj_get_x(obj);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 f86e 	bl	800704c <lv_obj_get_x>
 8005f70:	4603      	mov	r3, r0
 8005f72:	813b      	strh	r3, [r7, #8]
    old_pos.y = lv_obj_get_y(obj);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f882 	bl	800707e <lv_obj_get_y>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	817b      	strh	r3, [r7, #10]

    lv_obj_t * old_par = obj->par;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]

    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	1d18      	adds	r0, r3, #4
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	1d19      	adds	r1, r3, #4
 8005f8e:	2301      	movs	r3, #1
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f00d fb44 	bl	801361e <lv_ll_chg_list>
    obj->par = parent;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8005f9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005fa0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f840 	bl	800602c <lv_obj_set_pos>

    /*Notify the original parent because one of its children is lost*/
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	4798      	blx	r3

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ff32 	bl	8005e2e <lv_obj_invalidate>
 8005fca:	e002      	b.n	8005fd2 <lv_obj_set_parent+0x86>
        return;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <lv_obj_set_parent+0x86>
        return;
 8005fd0:	bf00      	nop
}
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fffb 	bl	8006fdc <lv_obj_get_parent>
 8005fe6:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f00d fb6b 	bl	80136c8 <lv_ll_get_head>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d014      	beq.n	8006024 <lv_obj_move_foreground+0x4c>

    lv_obj_invalidate(parent);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff ff17 	bl	8005e2e <lv_obj_invalidate>

    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1d18      	adds	r0, r3, #4
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1d19      	adds	r1, r3, #4
 8006008:	2301      	movs	r3, #1
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	f00d fb07 	bl	801361e <lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	2101      	movs	r1, #1
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3

    lv_obj_invalidate(parent);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff ff06 	bl	8005e2e <lv_obj_invalidate>
 8006022:	e000      	b.n	8006026 <lv_obj_move_foreground+0x4e>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8006024:	bf00      	nop
}
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
 8006038:	4613      	mov	r3, r2
 800603a:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->par;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]

    x = x + par->coords.x1;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006048:	b29a      	uxth	r2, r3
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	4413      	add	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	807b      	strh	r3, [r7, #2]
    y = y + par->coords.y1;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006058:	b29a      	uxth	r2, r3
 800605a:	883b      	ldrh	r3, [r7, #0]
 800605c:	4413      	add	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	803b      	strh	r3, [r7, #0]

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8006062:	887a      	ldrh	r2, [r7, #2]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800606a:	b29b      	uxth	r3, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	b29b      	uxth	r3, r3
 8006070:	b21b      	sxth	r3, r3
 8006072:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 8006074:	883a      	ldrh	r2, [r7, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800607c:	b29b      	uxth	r3, r3
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	b21b      	sxth	r3, r3
 8006084:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8006086:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <lv_obj_set_pos+0x6a>
 800608e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d051      	beq.n	800613a <lv_obj_set_pos+0x10e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fec9 	bl	8005e2e <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 ffc3 	bl	800702e <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	b21a      	sxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	b21a      	sxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b21a      	sxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4413      	add	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	b21a      	sxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8006108:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800610c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f9b6 	bl	8007484 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f107 0208 	add.w	r2, r7, #8
 8006120:	2102      	movs	r1, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3

    /*Send a signal to the parent too*/
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	2101      	movs	r1, #1
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fe7b 	bl	8005e2e <lv_obj_invalidate>
 8006138:	e000      	b.n	800613c <lv_obj_set_pos+0x110>
    if(diff.x == 0 && diff.y == 0) return;
 800613a:	bf00      	nop
}
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ff95 	bl	800707e <lv_obj_get_y>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ff64 	bl	800602c <lv_obj_set_pos>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 ff67 	bl	800704c <lv_obj_get_x>
 800617e:	4603      	mov	r3, r0
 8006180:	4619      	mov	r1, r3
 8006182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006186:	461a      	mov	r2, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff4f 	bl	800602c <lv_obj_set_pos>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <lv_obj_set_size>:
 * @param obj pointer to an object
 * @param w new width
 * @param h new height
 */
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	807b      	strh	r3, [r7, #2]
 80061a2:	4613      	mov	r3, r2
 80061a4:	803b      	strh	r3, [r7, #0]

    /* Do nothing if the size is not changed */
    /* It is very important else recursive resizing can
     * occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 ff82 	bl	80070b0 <lv_obj_get_width>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <lv_obj_set_size+0x34>
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 ff87 	bl	80070cc <lv_obj_get_height>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d05a      	beq.n	8006280 <lv_obj_set_size+0xea>
        return;
    }

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fe2f 	bl	8005e2e <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80061d0:	f107 0308 	add.w	r3, r7, #8
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 ff29 	bl	800702e <lv_obj_get_coords>

    /*Set the length and height*/
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	887b      	ldrh	r3, [r7, #2]
 80061e6:	4413      	add	r3, r2
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	b21a      	sxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	883b      	ldrh	r3, [r7, #0]
 80061fe:	4413      	add	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	b21a      	sxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	82da      	strh	r2, [r3, #22]

    /*Send a signal to the object with its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f107 0208 	add.w	r2, r7, #8
 8006214:	2102      	movs	r1, #2
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3

    /*Send a signal to the parent too*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fede 	bl	8006fdc <lv_obj_get_parent>
 8006220:	6138      	str	r0, [r7, #16]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <lv_obj_set_size+0x9e>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	2101      	movs	r1, #1
 8006230:	6938      	ldr	r0, [r7, #16]
 8006232:	4798      	blx	r3

    /*Tell the children the parent's size has changed*/
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f00d fa45 	bl	80136c8 <lv_ll_get_head>
 800623e:	6178      	str	r0, [r7, #20]
 8006240:	e00c      	b.n	800625c <lv_obj_set_size+0xc6>
    {
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2200      	movs	r2, #0
 8006248:	2103      	movs	r1, #3
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	4618      	mov	r0, r3
 8006256:	f00d fa5d 	bl	8013714 <lv_ll_get_next>
 800625a:	6178      	str	r0, [r7, #20]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ef      	bne.n	8006242 <lv_obj_set_size+0xac>
    }

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fde3 	bl	8005e2e <lv_obj_invalidate>

    /*Automatically realign the object if required*/
#if LV_USE_OBJ_REALIGN
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <lv_obj_set_size+0xec>
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fca3 	bl	8006bc4 <lv_obj_realign>
 800627e:	e000      	b.n	8006282 <lv_obj_set_size+0xec>
        return;
 8006280:	bf00      	nop
#endif
}
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <lv_obj_set_width>:
 * Set the width of an object
 * @param obj pointer to an object
 * @param w new width
 */
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 ff19 	bl	80070cc <lv_obj_get_height>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ff76 	bl	8006196 <lv_obj_set_size>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <lv_obj_set_height>:
 * Set the height of an object
 * @param obj pointer to an object
 * @param h new height
 */
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fef6 	bl	80070b0 <lv_obj_get_width>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4619      	mov	r1, r3
 80062c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff61 	bl	8006196 <lv_obj_set_size>
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4611      	mov	r1, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	460b      	mov	r3, r1
 80062ec:	71fb      	strb	r3, [r7, #7]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 feaa 	bl	800704c <lv_obj_get_x>
 80062f8:	4603      	mov	r3, r0
 80062fa:	83fb      	strh	r3, [r7, #30]
    lv_coord_t new_y = lv_obj_get_y(obj);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 febe 	bl	800707e <lv_obj_get_y>
 8006302:	4603      	mov	r3, r0
 8006304:	83bb      	strh	r3, [r7, #28]

    if(base == NULL) {
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <lv_obj_align+0x38>
        base = lv_obj_get_parent(obj);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fe65 	bl	8006fdc <lv_obj_get_parent>
 8006312:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	2b14      	cmp	r3, #20
 8006318:	f200 81f9 	bhi.w	800670e <lv_obj_align+0x432>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <lv_obj_align+0x48>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006379 	.word	0x08006379
 8006328:	080063cf 	.word	0x080063cf
 800632c:	080063d9 	.word	0x080063d9
 8006330:	08006409 	.word	0x08006409
 8006334:	08006429 	.word	0x08006429
 8006338:	08006449 	.word	0x08006449
 800633c:	0800648f 	.word	0x0800648f
 8006340:	080064c5 	.word	0x080064c5
 8006344:	080064f5 	.word	0x080064f5
 8006348:	0800653b 	.word	0x0800653b
 800634c:	08006551 	.word	0x08006551
 8006350:	0800658d 	.word	0x0800658d
 8006354:	080065b9 	.word	0x080065b9
 8006358:	080065c9 	.word	0x080065c9
 800635c:	080065ff 	.word	0x080065ff
 8006360:	08006625 	.word	0x08006625
 8006364:	0800663b 	.word	0x0800663b
 8006368:	08006677 	.word	0x08006677
 800636c:	080066a3 	.word	0x080066a3
 8006370:	080066b3 	.word	0x080066b3
 8006374:	080066e9 	.word	0x080066e9
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006378:	68b8      	ldr	r0, [r7, #8]
 800637a:	f000 fe99 	bl	80070b0 <lv_obj_get_width>
 800637e:	4603      	mov	r3, r0
 8006380:	0fda      	lsrs	r2, r3, #31
 8006382:	4413      	add	r3, r2
 8006384:	105b      	asrs	r3, r3, #1
 8006386:	b21b      	sxth	r3, r3
 8006388:	b29c      	uxth	r4, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fe90 	bl	80070b0 <lv_obj_get_width>
 8006390:	4603      	mov	r3, r0
 8006392:	0fda      	lsrs	r2, r3, #31
 8006394:	4413      	add	r3, r2
 8006396:	105b      	asrs	r3, r3, #1
 8006398:	b21b      	sxth	r3, r3
 800639a:	b29b      	uxth	r3, r3
 800639c:	1ae3      	subs	r3, r4, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	f000 fe92 	bl	80070cc <lv_obj_get_height>
 80063a8:	4603      	mov	r3, r0
 80063aa:	0fda      	lsrs	r2, r3, #31
 80063ac:	4413      	add	r3, r2
 80063ae:	105b      	asrs	r3, r3, #1
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	b29c      	uxth	r4, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fe89 	bl	80070cc <lv_obj_get_height>
 80063ba:	4603      	mov	r3, r0
 80063bc:	0fda      	lsrs	r2, r3, #31
 80063be:	4413      	add	r3, r2
 80063c0:	105b      	asrs	r3, r3, #1
 80063c2:	b21b      	sxth	r3, r3
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	1ae3      	subs	r3, r4, r3
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	83bb      	strh	r3, [r7, #28]
            break;
 80063cc:	e19f      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	83bb      	strh	r3, [r7, #28]
            break;
 80063d6:	e19a      	b.n	800670e <lv_obj_align+0x432>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f000 fe69 	bl	80070b0 <lv_obj_get_width>
 80063de:	4603      	mov	r3, r0
 80063e0:	0fda      	lsrs	r2, r3, #31
 80063e2:	4413      	add	r3, r2
 80063e4:	105b      	asrs	r3, r3, #1
 80063e6:	b21b      	sxth	r3, r3
 80063e8:	b29c      	uxth	r4, r3
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fe60 	bl	80070b0 <lv_obj_get_width>
 80063f0:	4603      	mov	r3, r0
 80063f2:	0fda      	lsrs	r2, r3, #31
 80063f4:	4413      	add	r3, r2
 80063f6:	105b      	asrs	r3, r3, #1
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	1ae3      	subs	r3, r4, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	83bb      	strh	r3, [r7, #28]
            break;
 8006406:	e182      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006408:	68b8      	ldr	r0, [r7, #8]
 800640a:	f000 fe51 	bl	80070b0 <lv_obj_get_width>
 800640e:	4603      	mov	r3, r0
 8006410:	b29c      	uxth	r4, r3
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fe4c 	bl	80070b0 <lv_obj_get_width>
 8006418:	4603      	mov	r3, r0
 800641a:	b29b      	uxth	r3, r3
 800641c:	1ae3      	subs	r3, r4, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	83bb      	strh	r3, [r7, #28]
            break;
 8006426:	e172      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 fe4d 	bl	80070cc <lv_obj_get_height>
 8006432:	4603      	mov	r3, r0
 8006434:	b29c      	uxth	r4, r3
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fe48 	bl	80070cc <lv_obj_get_height>
 800643c:	4603      	mov	r3, r0
 800643e:	b29b      	uxth	r3, r3
 8006440:	1ae3      	subs	r3, r4, r3
 8006442:	b29b      	uxth	r3, r3
 8006444:	83bb      	strh	r3, [r7, #28]
            break;
 8006446:	e162      	b.n	800670e <lv_obj_align+0x432>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006448:	68b8      	ldr	r0, [r7, #8]
 800644a:	f000 fe31 	bl	80070b0 <lv_obj_get_width>
 800644e:	4603      	mov	r3, r0
 8006450:	0fda      	lsrs	r2, r3, #31
 8006452:	4413      	add	r3, r2
 8006454:	105b      	asrs	r3, r3, #1
 8006456:	b21b      	sxth	r3, r3
 8006458:	b29c      	uxth	r4, r3
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fe28 	bl	80070b0 <lv_obj_get_width>
 8006460:	4603      	mov	r3, r0
 8006462:	0fda      	lsrs	r2, r3, #31
 8006464:	4413      	add	r3, r2
 8006466:	105b      	asrs	r3, r3, #1
 8006468:	b21b      	sxth	r3, r3
 800646a:	b29b      	uxth	r3, r3
 800646c:	1ae3      	subs	r3, r4, r3
 800646e:	b29b      	uxth	r3, r3
 8006470:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006472:	68b8      	ldr	r0, [r7, #8]
 8006474:	f000 fe2a 	bl	80070cc <lv_obj_get_height>
 8006478:	4603      	mov	r3, r0
 800647a:	b29c      	uxth	r4, r3
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fe25 	bl	80070cc <lv_obj_get_height>
 8006482:	4603      	mov	r3, r0
 8006484:	b29b      	uxth	r3, r3
 8006486:	1ae3      	subs	r3, r4, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	83bb      	strh	r3, [r7, #28]
            break;
 800648c:	e13f      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800648e:	68b8      	ldr	r0, [r7, #8]
 8006490:	f000 fe0e 	bl	80070b0 <lv_obj_get_width>
 8006494:	4603      	mov	r3, r0
 8006496:	b29c      	uxth	r4, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fe09 	bl	80070b0 <lv_obj_get_width>
 800649e:	4603      	mov	r3, r0
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1ae3      	subs	r3, r4, r3
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80064a8:	68b8      	ldr	r0, [r7, #8]
 80064aa:	f000 fe0f 	bl	80070cc <lv_obj_get_height>
 80064ae:	4603      	mov	r3, r0
 80064b0:	b29c      	uxth	r4, r3
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fe0a 	bl	80070cc <lv_obj_get_height>
 80064b8:	4603      	mov	r3, r0
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	1ae3      	subs	r3, r4, r3
 80064be:	b29b      	uxth	r3, r3
 80064c0:	83bb      	strh	r3, [r7, #28]
            break;
 80064c2:	e124      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80064c8:	68b8      	ldr	r0, [r7, #8]
 80064ca:	f000 fdff 	bl	80070cc <lv_obj_get_height>
 80064ce:	4603      	mov	r3, r0
 80064d0:	0fda      	lsrs	r2, r3, #31
 80064d2:	4413      	add	r3, r2
 80064d4:	105b      	asrs	r3, r3, #1
 80064d6:	b21b      	sxth	r3, r3
 80064d8:	b29c      	uxth	r4, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fdf6 	bl	80070cc <lv_obj_get_height>
 80064e0:	4603      	mov	r3, r0
 80064e2:	0fda      	lsrs	r2, r3, #31
 80064e4:	4413      	add	r3, r2
 80064e6:	105b      	asrs	r3, r3, #1
 80064e8:	b21b      	sxth	r3, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	1ae3      	subs	r3, r4, r3
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	83bb      	strh	r3, [r7, #28]
            break;
 80064f2:	e10c      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80064f4:	68b8      	ldr	r0, [r7, #8]
 80064f6:	f000 fddb 	bl	80070b0 <lv_obj_get_width>
 80064fa:	4603      	mov	r3, r0
 80064fc:	b29c      	uxth	r4, r3
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fdd6 	bl	80070b0 <lv_obj_get_width>
 8006504:	4603      	mov	r3, r0
 8006506:	b29b      	uxth	r3, r3
 8006508:	1ae3      	subs	r3, r4, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800650e:	68b8      	ldr	r0, [r7, #8]
 8006510:	f000 fddc 	bl	80070cc <lv_obj_get_height>
 8006514:	4603      	mov	r3, r0
 8006516:	0fda      	lsrs	r2, r3, #31
 8006518:	4413      	add	r3, r2
 800651a:	105b      	asrs	r3, r3, #1
 800651c:	b21b      	sxth	r3, r3
 800651e:	b29c      	uxth	r4, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fdd3 	bl	80070cc <lv_obj_get_height>
 8006526:	4603      	mov	r3, r0
 8006528:	0fda      	lsrs	r2, r3, #31
 800652a:	4413      	add	r3, r2
 800652c:	105b      	asrs	r3, r3, #1
 800652e:	b21b      	sxth	r3, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	1ae3      	subs	r3, r4, r3
 8006534:	b29b      	uxth	r3, r3
 8006536:	83bb      	strh	r3, [r7, #28]
            break;
 8006538:	e0e9      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fdc4 	bl	80070cc <lv_obj_get_height>
 8006544:	4603      	mov	r3, r0
 8006546:	b29b      	uxth	r3, r3
 8006548:	425b      	negs	r3, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	83bb      	strh	r3, [r7, #28]
            break;
 800654e:	e0de      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f000 fdad 	bl	80070b0 <lv_obj_get_width>
 8006556:	4603      	mov	r3, r0
 8006558:	0fda      	lsrs	r2, r3, #31
 800655a:	4413      	add	r3, r2
 800655c:	105b      	asrs	r3, r3, #1
 800655e:	b21b      	sxth	r3, r3
 8006560:	b29c      	uxth	r4, r3
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fda4 	bl	80070b0 <lv_obj_get_width>
 8006568:	4603      	mov	r3, r0
 800656a:	0fda      	lsrs	r2, r3, #31
 800656c:	4413      	add	r3, r2
 800656e:	105b      	asrs	r3, r3, #1
 8006570:	b21b      	sxth	r3, r3
 8006572:	b29b      	uxth	r3, r3
 8006574:	1ae3      	subs	r3, r4, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fda6 	bl	80070cc <lv_obj_get_height>
 8006580:	4603      	mov	r3, r0
 8006582:	b29b      	uxth	r3, r3
 8006584:	425b      	negs	r3, r3
 8006586:	b29b      	uxth	r3, r3
 8006588:	83bb      	strh	r3, [r7, #28]
            break;
 800658a:	e0c0      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800658c:	68b8      	ldr	r0, [r7, #8]
 800658e:	f000 fd8f 	bl	80070b0 <lv_obj_get_width>
 8006592:	4603      	mov	r3, r0
 8006594:	b29c      	uxth	r4, r3
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fd8a 	bl	80070b0 <lv_obj_get_width>
 800659c:	4603      	mov	r3, r0
 800659e:	b29b      	uxth	r3, r3
 80065a0:	1ae3      	subs	r3, r4, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fd90 	bl	80070cc <lv_obj_get_height>
 80065ac:	4603      	mov	r3, r0
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	425b      	negs	r3, r3
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	83bb      	strh	r3, [r7, #28]
            break;
 80065b6:	e0aa      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 80065bc:	68b8      	ldr	r0, [r7, #8]
 80065be:	f000 fd85 	bl	80070cc <lv_obj_get_height>
 80065c2:	4603      	mov	r3, r0
 80065c4:	83bb      	strh	r3, [r7, #28]
            break;
 80065c6:	e0a2      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80065c8:	68b8      	ldr	r0, [r7, #8]
 80065ca:	f000 fd71 	bl	80070b0 <lv_obj_get_width>
 80065ce:	4603      	mov	r3, r0
 80065d0:	0fda      	lsrs	r2, r3, #31
 80065d2:	4413      	add	r3, r2
 80065d4:	105b      	asrs	r3, r3, #1
 80065d6:	b21b      	sxth	r3, r3
 80065d8:	b29c      	uxth	r4, r3
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fd68 	bl	80070b0 <lv_obj_get_width>
 80065e0:	4603      	mov	r3, r0
 80065e2:	0fda      	lsrs	r2, r3, #31
 80065e4:	4413      	add	r3, r2
 80065e6:	105b      	asrs	r3, r3, #1
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	1ae3      	subs	r3, r4, r3
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 80065f2:	68b8      	ldr	r0, [r7, #8]
 80065f4:	f000 fd6a 	bl	80070cc <lv_obj_get_height>
 80065f8:	4603      	mov	r3, r0
 80065fa:	83bb      	strh	r3, [r7, #28]
            break;
 80065fc:	e087      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	f000 fd56 	bl	80070b0 <lv_obj_get_width>
 8006604:	4603      	mov	r3, r0
 8006606:	b29c      	uxth	r4, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fd51 	bl	80070b0 <lv_obj_get_width>
 800660e:	4603      	mov	r3, r0
 8006610:	b29b      	uxth	r3, r3
 8006612:	1ae3      	subs	r3, r4, r3
 8006614:	b29b      	uxth	r3, r3
 8006616:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f000 fd57 	bl	80070cc <lv_obj_get_height>
 800661e:	4603      	mov	r3, r0
 8006620:	83bb      	strh	r3, [r7, #28]
            break;
 8006622:	e074      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -lv_obj_get_width(obj);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fd43 	bl	80070b0 <lv_obj_get_width>
 800662a:	4603      	mov	r3, r0
 800662c:	b29b      	uxth	r3, r3
 800662e:	425b      	negs	r3, r3
 8006630:	b29b      	uxth	r3, r3
 8006632:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	83bb      	strh	r3, [r7, #28]
            break;
 8006638:	e069      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -lv_obj_get_width(obj);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fd38 	bl	80070b0 <lv_obj_get_width>
 8006640:	4603      	mov	r3, r0
 8006642:	b29b      	uxth	r3, r3
 8006644:	425b      	negs	r3, r3
 8006646:	b29b      	uxth	r3, r3
 8006648:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	f000 fd3e 	bl	80070cc <lv_obj_get_height>
 8006650:	4603      	mov	r3, r0
 8006652:	0fda      	lsrs	r2, r3, #31
 8006654:	4413      	add	r3, r2
 8006656:	105b      	asrs	r3, r3, #1
 8006658:	b21b      	sxth	r3, r3
 800665a:	b29c      	uxth	r4, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fd35 	bl	80070cc <lv_obj_get_height>
 8006662:	4603      	mov	r3, r0
 8006664:	0fda      	lsrs	r2, r3, #31
 8006666:	4413      	add	r3, r2
 8006668:	105b      	asrs	r3, r3, #1
 800666a:	b21b      	sxth	r3, r3
 800666c:	b29b      	uxth	r3, r3
 800666e:	1ae3      	subs	r3, r4, r3
 8006670:	b29b      	uxth	r3, r3
 8006672:	83bb      	strh	r3, [r7, #28]
            break;
 8006674:	e04b      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -lv_obj_get_width(obj);
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fd1a 	bl	80070b0 <lv_obj_get_width>
 800667c:	4603      	mov	r3, r0
 800667e:	b29b      	uxth	r3, r3
 8006680:	425b      	negs	r3, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006686:	68b8      	ldr	r0, [r7, #8]
 8006688:	f000 fd20 	bl	80070cc <lv_obj_get_height>
 800668c:	4603      	mov	r3, r0
 800668e:	b29c      	uxth	r4, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fd1b 	bl	80070cc <lv_obj_get_height>
 8006696:	4603      	mov	r3, r0
 8006698:	b29b      	uxth	r3, r3
 800669a:	1ae3      	subs	r3, r4, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	83bb      	strh	r3, [r7, #28]
            break;
 80066a0:	e035      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base);
 80066a2:	68b8      	ldr	r0, [r7, #8]
 80066a4:	f000 fd04 	bl	80070b0 <lv_obj_get_width>
 80066a8:	4603      	mov	r3, r0
 80066aa:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	83bb      	strh	r3, [r7, #28]
            break;
 80066b0:	e02d      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base);
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f000 fcfc 	bl	80070b0 <lv_obj_get_width>
 80066b8:	4603      	mov	r3, r0
 80066ba:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f000 fd05 	bl	80070cc <lv_obj_get_height>
 80066c2:	4603      	mov	r3, r0
 80066c4:	0fda      	lsrs	r2, r3, #31
 80066c6:	4413      	add	r3, r2
 80066c8:	105b      	asrs	r3, r3, #1
 80066ca:	b21b      	sxth	r3, r3
 80066cc:	b29c      	uxth	r4, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fcfc 	bl	80070cc <lv_obj_get_height>
 80066d4:	4603      	mov	r3, r0
 80066d6:	0fda      	lsrs	r2, r3, #31
 80066d8:	4413      	add	r3, r2
 80066da:	105b      	asrs	r3, r3, #1
 80066dc:	b21b      	sxth	r3, r3
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ae3      	subs	r3, r4, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	83bb      	strh	r3, [r7, #28]
            break;
 80066e6:	e012      	b.n	800670e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base);
 80066e8:	68b8      	ldr	r0, [r7, #8]
 80066ea:	f000 fce1 	bl	80070b0 <lv_obj_get_width>
 80066ee:	4603      	mov	r3, r0
 80066f0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80066f2:	68b8      	ldr	r0, [r7, #8]
 80066f4:	f000 fcea 	bl	80070cc <lv_obj_get_height>
 80066f8:	4603      	mov	r3, r0
 80066fa:	b29c      	uxth	r4, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fce5 	bl	80070cc <lv_obj_get_height>
 8006702:	4603      	mov	r3, r0
 8006704:	b29b      	uxth	r3, r3
 8006706:	1ae3      	subs	r3, r4, r3
 8006708:	b29b      	uxth	r3, r3
 800670a:	83bb      	strh	r3, [r7, #28]
            break;
 800670c:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fc64 	bl	8006fdc <lv_obj_get_parent>
 8006714:	61b8      	str	r0, [r7, #24]
    lv_coord_t base_abs_x = base->coords.x1;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	8a1b      	ldrh	r3, [r3, #16]
 800671a:	82fb      	strh	r3, [r7, #22]
    lv_coord_t base_abs_y = base->coords.y1;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	8a5b      	ldrh	r3, [r3, #18]
 8006720:	82bb      	strh	r3, [r7, #20]
    lv_coord_t par_abs_x  = par->coords.x1;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	8a1b      	ldrh	r3, [r3, #16]
 8006726:	827b      	strh	r3, [r7, #18]
    lv_coord_t par_abs_y  = par->coords.y1;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	8a5b      	ldrh	r3, [r3, #18]
 800672c:	823b      	strh	r3, [r7, #16]
    new_x += x_mod + base_abs_x;
 800672e:	88ba      	ldrh	r2, [r7, #4]
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	4413      	add	r3, r2
 8006734:	b29a      	uxth	r2, r3
 8006736:	8bfb      	ldrh	r3, [r7, #30]
 8006738:	4413      	add	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	83fb      	strh	r3, [r7, #30]
    new_y += y_mod + base_abs_y;
 800673e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006740:	8abb      	ldrh	r3, [r7, #20]
 8006742:	4413      	add	r3, r2
 8006744:	b29a      	uxth	r2, r3
 8006746:	8bbb      	ldrh	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	83bb      	strh	r3, [r7, #28]
    new_x -= par_abs_x;
 800674e:	8bfa      	ldrh	r2, [r7, #30]
 8006750:	8a7b      	ldrh	r3, [r7, #18]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	83fb      	strh	r3, [r7, #30]
    new_y -= par_abs_y;
 8006758:	8bba      	ldrh	r2, [r7, #28]
 800675a:	8a3b      	ldrh	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	b29b      	uxth	r3, r3
 8006760:	83bb      	strh	r3, [r7, #28]

    lv_obj_set_pos(obj, new_x, new_y);
 8006762:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fc5d 	bl	800602c <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	79fa      	ldrb	r2, [r7, #7]
 8006776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88ba      	ldrh	r2, [r7, #4]
 800677e:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006784:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 0;
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8006792:	f36f 0341 	bfc	r3, #1, #1
 8006796:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 800679a:	bf00      	nop
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}
 80067a2:	bf00      	nop

080067a4 <lv_obj_align_origo>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4611      	mov	r1, r2
 80067b0:	461a      	mov	r2, r3
 80067b2:	460b      	mov	r3, r1
 80067b4:	71fb      	strb	r3, [r7, #7]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fc46 	bl	800704c <lv_obj_get_x>
 80067c0:	4603      	mov	r3, r0
 80067c2:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fc5a 	bl	800707e <lv_obj_get_y>
 80067ca:	4603      	mov	r3, r0
 80067cc:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fc6e 	bl	80070b0 <lv_obj_get_width>
 80067d4:	4603      	mov	r3, r0
 80067d6:	0fda      	lsrs	r2, r3, #31
 80067d8:	4413      	add	r3, r2
 80067da:	105b      	asrs	r3, r3, #1
 80067dc:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fc74 	bl	80070cc <lv_obj_get_height>
 80067e4:	4603      	mov	r3, r0
 80067e6:	0fda      	lsrs	r2, r3, #31
 80067e8:	4413      	add	r3, r2
 80067ea:	105b      	asrs	r3, r3, #1
 80067ec:	843b      	strh	r3, [r7, #32]

    if(base == NULL) {
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <lv_obj_align_origo+0x58>
        base = lv_obj_get_parent(obj);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fbf1 	bl	8006fdc <lv_obj_get_parent>
 80067fa:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	2b14      	cmp	r3, #20
 8006800:	f200 8195 	bhi.w	8006b2e <lv_obj_align_origo+0x38a>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <lv_obj_align_origo+0x68>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006861 	.word	0x08006861
 8006810:	08006897 	.word	0x08006897
 8006814:	080068a9 	.word	0x080068a9
 8006818:	080068cd 	.word	0x080068cd
 800681c:	080068e9 	.word	0x080068e9
 8006820:	08006905 	.word	0x08006905
 8006824:	08006933 	.word	0x08006933
 8006828:	08006959 	.word	0x08006959
 800682c:	0800697d 	.word	0x0800697d
 8006830:	080069ab 	.word	0x080069ab
 8006834:	080069bd 	.word	0x080069bd
 8006838:	080069e1 	.word	0x080069e1
 800683c:	080069fd 	.word	0x080069fd
 8006840:	08006a19 	.word	0x08006a19
 8006844:	08006a47 	.word	0x08006a47
 8006848:	08006a6d 	.word	0x08006a6d
 800684c:	08006a7f 	.word	0x08006a7f
 8006850:	08006aa3 	.word	0x08006aa3
 8006854:	08006abf 	.word	0x08006abf
 8006858:	08006adb 	.word	0x08006adb
 800685c:	08006b09 	.word	0x08006b09
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	f000 fc25 	bl	80070b0 <lv_obj_get_width>
 8006866:	4603      	mov	r3, r0
 8006868:	0fda      	lsrs	r2, r3, #31
 800686a:	4413      	add	r3, r2
 800686c:	105b      	asrs	r3, r3, #1
 800686e:	b21b      	sxth	r3, r3
 8006870:	b29a      	uxth	r2, r3
 8006872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f000 fc26 	bl	80070cc <lv_obj_get_height>
 8006880:	4603      	mov	r3, r0
 8006882:	0fda      	lsrs	r2, r3, #31
 8006884:	4413      	add	r3, r2
 8006886:	105b      	asrs	r3, r3, #1
 8006888:	b21b      	sxth	r3, r3
 800688a:	b29a      	uxth	r2, r3
 800688c:	8c3b      	ldrh	r3, [r7, #32]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	b29b      	uxth	r3, r3
 8006892:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006894:	e14b      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 8006896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006898:	425b      	negs	r3, r3
 800689a:	b29b      	uxth	r3, r3
 800689c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 800689e:	8c3b      	ldrh	r3, [r7, #32]
 80068a0:	425b      	negs	r3, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068a6:	e142      	b.n	8006b2e <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80068a8:	68b8      	ldr	r0, [r7, #8]
 80068aa:	f000 fc01 	bl	80070b0 <lv_obj_get_width>
 80068ae:	4603      	mov	r3, r0
 80068b0:	0fda      	lsrs	r2, r3, #31
 80068b2:	4413      	add	r3, r2
 80068b4:	105b      	asrs	r3, r3, #1
 80068b6:	b21b      	sxth	r3, r3
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	b29b      	uxth	r3, r3
 80068c0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80068c2:	8c3b      	ldrh	r3, [r7, #32]
 80068c4:	425b      	negs	r3, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068ca:	e130      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80068cc:	68b8      	ldr	r0, [r7, #8]
 80068ce:	f000 fbef 	bl	80070b0 <lv_obj_get_width>
 80068d2:	4603      	mov	r3, r0
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	b29b      	uxth	r3, r3
 80068dc:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80068de:	8c3b      	ldrh	r3, [r7, #32]
 80068e0:	425b      	negs	r3, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80068e6:	e122      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 80068e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ea:	425b      	negs	r3, r3
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f000 fbeb 	bl	80070cc <lv_obj_get_height>
 80068f6:	4603      	mov	r3, r0
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	8c3b      	ldrh	r3, [r7, #32]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006902:	e114      	b.n	8006b2e <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f000 fbd3 	bl	80070b0 <lv_obj_get_width>
 800690a:	4603      	mov	r3, r0
 800690c:	0fda      	lsrs	r2, r3, #31
 800690e:	4413      	add	r3, r2
 8006910:	105b      	asrs	r3, r3, #1
 8006912:	b21b      	sxth	r3, r3
 8006914:	b29a      	uxth	r2, r3
 8006916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 fbd4 	bl	80070cc <lv_obj_get_height>
 8006924:	4603      	mov	r3, r0
 8006926:	b29a      	uxth	r2, r3
 8006928:	8c3b      	ldrh	r3, [r7, #32]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006930:	e0fd      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	f000 fbbc 	bl	80070b0 <lv_obj_get_width>
 8006938:	4603      	mov	r3, r0
 800693a:	b29a      	uxth	r2, r3
 800693c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	b29b      	uxth	r3, r3
 8006942:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006944:	68b8      	ldr	r0, [r7, #8]
 8006946:	f000 fbc1 	bl	80070cc <lv_obj_get_height>
 800694a:	4603      	mov	r3, r0
 800694c:	b29a      	uxth	r2, r3
 800694e:	8c3b      	ldrh	r3, [r7, #32]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	b29b      	uxth	r3, r3
 8006954:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006956:	e0ea      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8006958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800695a:	425b      	negs	r3, r3
 800695c:	b29b      	uxth	r3, r3
 800695e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006960:	68b8      	ldr	r0, [r7, #8]
 8006962:	f000 fbb3 	bl	80070cc <lv_obj_get_height>
 8006966:	4603      	mov	r3, r0
 8006968:	0fda      	lsrs	r2, r3, #31
 800696a:	4413      	add	r3, r2
 800696c:	105b      	asrs	r3, r3, #1
 800696e:	b21b      	sxth	r3, r3
 8006970:	b29a      	uxth	r2, r3
 8006972:	8c3b      	ldrh	r3, [r7, #32]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	b29b      	uxth	r3, r3
 8006978:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800697a:	e0d8      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800697c:	68b8      	ldr	r0, [r7, #8]
 800697e:	f000 fb97 	bl	80070b0 <lv_obj_get_width>
 8006982:	4603      	mov	r3, r0
 8006984:	b29a      	uxth	r2, r3
 8006986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	b29b      	uxth	r3, r3
 800698c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800698e:	68b8      	ldr	r0, [r7, #8]
 8006990:	f000 fb9c 	bl	80070cc <lv_obj_get_height>
 8006994:	4603      	mov	r3, r0
 8006996:	0fda      	lsrs	r2, r3, #31
 8006998:	4413      	add	r3, r2
 800699a:	105b      	asrs	r3, r3, #1
 800699c:	b21b      	sxth	r3, r3
 800699e:	b29a      	uxth	r2, r3
 80069a0:	8c3b      	ldrh	r3, [r7, #32]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069a8:	e0c1      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 80069aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069ac:	425b      	negs	r3, r3
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069b2:	8c3b      	ldrh	r3, [r7, #32]
 80069b4:	425b      	negs	r3, r3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069ba:	e0b8      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f000 fb77 	bl	80070b0 <lv_obj_get_width>
 80069c2:	4603      	mov	r3, r0
 80069c4:	0fda      	lsrs	r2, r3, #31
 80069c6:	4413      	add	r3, r2
 80069c8:	105b      	asrs	r3, r3, #1
 80069ca:	b21b      	sxth	r3, r3
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069d6:	8c3b      	ldrh	r3, [r7, #32]
 80069d8:	425b      	negs	r3, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069de:	e0a6      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80069e0:	68b8      	ldr	r0, [r7, #8]
 80069e2:	f000 fb65 	bl	80070b0 <lv_obj_get_width>
 80069e6:	4603      	mov	r3, r0
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80069f2:	8c3b      	ldrh	r3, [r7, #32]
 80069f4:	425b      	negs	r3, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80069fa:	e098      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 80069fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069fe:	425b      	negs	r3, r3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	f000 fb61 	bl	80070cc <lv_obj_get_height>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	8c3b      	ldrh	r3, [r7, #32]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a16:	e08a      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006a18:	68b8      	ldr	r0, [r7, #8]
 8006a1a:	f000 fb49 	bl	80070b0 <lv_obj_get_width>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	0fda      	lsrs	r2, r3, #31
 8006a22:	4413      	add	r3, r2
 8006a24:	105b      	asrs	r3, r3, #1
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f000 fb4a 	bl	80070cc <lv_obj_get_height>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	8c3b      	ldrh	r3, [r7, #32]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a44:	e073      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f000 fb32 	bl	80070b0 <lv_obj_get_width>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006a58:	68b8      	ldr	r0, [r7, #8]
 8006a5a:	f000 fb37 	bl	80070cc <lv_obj_get_height>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	8c3b      	ldrh	r3, [r7, #32]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a6a:	e060      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8006a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a6e:	425b      	negs	r3, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8006a74:	8c3b      	ldrh	r3, [r7, #32]
 8006a76:	425b      	negs	r3, r3
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006a7c:	e057      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8006a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a80:	425b      	negs	r3, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006a86:	68b8      	ldr	r0, [r7, #8]
 8006a88:	f000 fb20 	bl	80070cc <lv_obj_get_height>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	0fda      	lsrs	r2, r3, #31
 8006a90:	4413      	add	r3, r2
 8006a92:	105b      	asrs	r3, r3, #1
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	8c3b      	ldrh	r3, [r7, #32]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006aa0:	e045      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8006aa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006aaa:	68b8      	ldr	r0, [r7, #8]
 8006aac:	f000 fb0e 	bl	80070cc <lv_obj_get_height>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	8c3b      	ldrh	r3, [r7, #32]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006abc:	e037      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	f000 faf6 	bl	80070b0 <lv_obj_get_width>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8006ad0:	8c3b      	ldrh	r3, [r7, #32]
 8006ad2:	425b      	negs	r3, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006ad8:	e029      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f000 fae8 	bl	80070b0 <lv_obj_get_width>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006aec:	68b8      	ldr	r0, [r7, #8]
 8006aee:	f000 faed 	bl	80070cc <lv_obj_get_height>
 8006af2:	4603      	mov	r3, r0
 8006af4:	0fda      	lsrs	r2, r3, #31
 8006af6:	4413      	add	r3, r2
 8006af8:	105b      	asrs	r3, r3, #1
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	8c3b      	ldrh	r3, [r7, #32]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006b06:	e012      	b.n	8006b2e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b08:	68b8      	ldr	r0, [r7, #8]
 8006b0a:	f000 fad1 	bl	80070b0 <lv_obj_get_width>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f000 fad6 	bl	80070cc <lv_obj_get_height>
 8006b20:	4603      	mov	r3, r0
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	8c3b      	ldrh	r3, [r7, #32]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8006b2c:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fa54 	bl	8006fdc <lv_obj_get_parent>
 8006b34:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	8a1b      	ldrh	r3, [r3, #16]
 8006b3a:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	8a5b      	ldrh	r3, [r3, #18]
 8006b40:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	8a1b      	ldrh	r3, [r3, #16]
 8006b46:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	8a5b      	ldrh	r3, [r3, #18]
 8006b4c:	82bb      	strh	r3, [r7, #20]
    new_x += x_mod + base_abs_x;
 8006b4e:	88ba      	ldrh	r2, [r7, #4]
 8006b50:	8b7b      	ldrh	r3, [r7, #26]
 8006b52:	4413      	add	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b58:	4413      	add	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_mod + base_abs_y;
 8006b5e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006b60:	8b3b      	ldrh	r3, [r7, #24]
 8006b62:	4413      	add	r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b68:	4413      	add	r3, r2
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 8006b6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b70:	8afb      	ldrh	r3, [r7, #22]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 8006b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b7a:	8abb      	ldrh	r3, [r7, #20]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_obj_set_pos(obj, new_x, new_y);
 8006b82:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006b86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fa4d 	bl	800602c <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	79fa      	ldrb	r2, [r7, #7]
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    obj->realign.xofs        = x_mod;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88ba      	ldrh	r2, [r7, #4]
 8006b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.base        = base;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
    obj->realign.origo_align = 1;
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8006bb2:	f043 0302 	orr.w	r3, r3, #2
 8006bb6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif
}
 8006bba:	bf00      	nop
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop

08006bc4 <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    if(obj->realign.origo_align)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d010      	beq.n	8006bfe <lv_obj_realign+0x3a>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fdd4 	bl	80067a4 <lv_obj_align_origo>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8006bfc:	e00f      	b.n	8006c1e <lv_obj_realign+0x5a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	; 0x3c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4603      	mov	r3, r0
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fb5f 	bl	80062dc <lv_obj_align>
}
 8006c1e:	bf00      	nop
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <lv_obj_set_style>:
 * Set a new style for an object
 * @param obj pointer to an object
 * @param style_p pointer to the new style
 */
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
    obj->style_p = style;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	629a      	str	r2, [r3, #40]	; 0x28

    /*Send a signal about style change to every children with NULL style*/
    refresh_children_style(obj);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fc71 	bl	800751e <refresh_children_style>

    /*Notify the object about the style change too*/
    lv_obj_refresh_style(obj);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f804 	bl	8006c4a <lv_obj_refresh_style>
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <lv_obj_refresh_style>:
/**
 * Notify an object about its style is modified
 * @param obj pointer to an object
 */
void lv_obj_refresh_style(lv_obj_t * obj)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f8eb 	bl	8005e2e <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2104      	movs	r1, #4
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f8e2 	bl	8005e2e <lv_obj_invalidate>
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
    obj->click = (en == true ? 1 : 0);
 8006c7e:	78f9      	ldrb	r1, [r7, #3]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006c86:	f361 0300 	bfi	r3, r1, #0, #1
 8006c8a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <lv_obj_set_drag>:
 * Enable the dragging of an object
 * @param obj pointer to an object
 * @param en true: make the object dragable
 */
void lv_obj_set_drag(lv_obj_t * obj, bool en)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <lv_obj_set_drag+0x1a>
 8006cac:	2101      	movs	r1, #1
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ffdf 	bl	8006c72 <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 8006cb4:	78f9      	ldrb	r1, [r7, #3]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006cbc:	f361 0341 	bfi	r3, r1, #1, #1
 8006cc0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <lv_obj_set_drag_throw>:
 * Enable the throwing of an object after is is dragged
 * @param obj pointer to an object
 * @param en true: enable the drag throw
 */
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
    obj->drag_throw = (en == true ? 1 : 0);
 8006cd8:	78f9      	ldrb	r1, [r7, #3]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006ce0:	f361 0382 	bfi	r3, r1, #2, #1
 8006ce4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <lv_obj_set_parent_event>:
 * Propagate the events to the parent too
 * @param obj pointer to an object
 * @param en true: enable the event propagation
 */
void lv_obj_set_parent_event(lv_obj_t * obj, bool en)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
    obj->parent_event = (en == true ? 1 : 0);
 8006d00:	78f9      	ldrb	r1, [r7, #3]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006d08:	f361 13c7 	bfi	r3, r1, #7, #1
 8006d0c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <lv_obj_set_protect>:
 * Set a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
    obj->protect |= prot;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <lv_obj_clear_protect>:
 * Clear a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
    prot = (~prot) & 0xFF;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	70fb      	strb	r3, [r7, #3]
    obj->protect &= prot;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	4013      	ands	r3, r2
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <lv_obj_set_event_cb>:
 * Used by the user to react on event which happens with the object.
 * @param obj pointer to an object
 * @param event_cb the new event function
 */
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
    obj->event_cb = event_cb;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	619a      	str	r2, [r3, #24]
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <lv_event_send+0x18>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e009      	b.n	8006dbe <lv_event_send+0x2c>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6998      	ldr	r0, [r3, #24]
 8006dae:	7afa      	ldrb	r2, [r7, #11]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f000 f808 	bl	8006dc8 <lv_event_send_func>
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]
    return res;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 8006de4:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <lv_event_send_func+0xcc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <lv_event_send_func+0x2a>
        event_temp_data.prev = event_temp_data_head;
 8006dec:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <lv_event_send_func+0xcc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006df2:	4a28      	ldr	r2, [pc, #160]	; (8006e94 <lv_event_send_func+0xcc>)
 8006df4:	f107 0310 	add.w	r3, r7, #16
 8006df8:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 8006dfa:	4b27      	ldr	r3, [pc, #156]	; (8006e98 <lv_event_send_func+0xd0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 8006e00:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <lv_event_send_func+0xd0>)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8006e06:	f7fe fb89 	bl	800551c <lv_indev_get_act>
 8006e0a:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <lv_event_send_func+0x5e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <lv_event_send_func+0x5e>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	79f9      	ldrb	r1, [r7, #7]
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <lv_event_send_func+0x6e>
 8006e2c:	79fa      	ldrb	r2, [r7, #7]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4611      	mov	r1, r2
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 8006e36:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <lv_event_send_func+0xd0>)
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <lv_event_send_func+0xcc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <lv_event_send_func+0xcc>)
 8006e44:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 8006e46:	7d3b      	ldrb	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <lv_event_send_func+0x88>
        return LV_RES_INV;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e01d      	b.n	8006e8c <lv_event_send_func+0xc4>
    }

    if(obj) {
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d019      	beq.n	8006e8a <lv_event_send_func+0xc2>
        if(obj->parent_event && obj->par) {
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d011      	beq.n	8006e8a <lv_event_send_func+0xc2>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <lv_event_send_func+0xc2>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	79f9      	ldrb	r1, [r7, #7]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff8b 	bl	8006d92 <lv_event_send>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 8006e80:	7ffb      	ldrb	r3, [r7, #31]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <lv_event_send_func+0xc2>
                return LV_RES_INV;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <lv_event_send_func+0xc4>
            }
        }
    }

    return LV_RES_OK;
 8006e8a:	2301      	movs	r3, #1
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3728      	adds	r7, #40	; 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20002a54 	.word	0x20002a54
 8006e98:	20002a58 	.word	0x20002a58

08006e9c <lv_event_get_data>:
/**
 * Get the `data` parameter of the current event
 * @return the `data` parameter
 */
const void * lv_event_get_data(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
    return event_act_data;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <lv_event_get_data+0x14>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20002a58 	.word	0x20002a58

08006eb4 <lv_obj_set_signal_cb>:
 * Always call the previous signal function in the new.
 * @param obj pointer to an object
 * @param cb the new signal function
 */
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
    obj->signal_cb = signal_cb;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	61da      	str	r2, [r3, #28]
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <lv_obj_set_design_cb>:
 * Set a new design function for an object
 * @param obj pointer to an object
 * @param design_cb the new design function
 */
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
    obj->design_cb = design_cb;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <lv_obj_allocate_ext_attr>:
 * @param obj pointer to an object
 * @param ext_size the size of the new ext. data
 * @return Normal pointer to the allocated ext
 */
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f00c fdc9 	bl	8013a98 <lv_mem_realloc>
 8006f06:	4602      	mov	r2, r0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24

    return (void *)obj->ext_attr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <lv_obj_refresh_ext_draw_pad>:
/**
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    obj->ext_draw_pad = 0;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	869a      	strh	r2, [r3, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2105      	movs	r1, #5
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3

    lv_obj_invalidate(obj);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fe ff7b 	bl	8005e2e <lv_obj_invalidate>
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
    const lv_obj_t * par = obj;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	f000 f843 	bl	8006fdc <lv_obj_get_parent>
 8006f56:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f6      	bne.n	8006f4c <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_p;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    const lv_obj_t * scr;

    if(obj->par == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <lv_obj_get_disp+0x16>
        scr = obj; /*`obj` is a screen*/
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e003      	b.n	8006f86 <lv_obj_get_disp+0x1e>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff ffde 	bl	8006f40 <lv_obj_get_screen>
 8006f84:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006f86:	4814      	ldr	r0, [pc, #80]	; (8006fd8 <lv_obj_get_disp+0x70>)
 8006f88:	f00c fb9e 	bl	80136c8 <lv_ll_get_head>
 8006f8c:	6138      	str	r0, [r7, #16]
 8006f8e:	e01b      	b.n	8006fc8 <lv_obj_get_disp+0x60>
    {
        lv_obj_t * s;
        LV_LL_READ(d->scr_ll, s)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3328      	adds	r3, #40	; 0x28
 8006f94:	4618      	mov	r0, r3
 8006f96:	f00c fb97 	bl	80136c8 <lv_ll_get_head>
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	e00c      	b.n	8006fb8 <lv_obj_get_disp+0x50>
        {
            if(s == scr) return d;
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d101      	bne.n	8006faa <lv_obj_get_disp+0x42>
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	e012      	b.n	8006fd0 <lv_obj_get_disp+0x68>
        LV_LL_READ(d->scr_ll, s)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3328      	adds	r3, #40	; 0x28
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f00c fbaf 	bl	8013714 <lv_ll_get_next>
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1ef      	bne.n	8006f9e <lv_obj_get_disp+0x36>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006fbe:	6939      	ldr	r1, [r7, #16]
 8006fc0:	4805      	ldr	r0, [pc, #20]	; (8006fd8 <lv_obj_get_disp+0x70>)
 8006fc2:	f00c fba7 	bl	8013714 <lv_ll_get_next>
 8006fc6:	6138      	str	r0, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e0      	bne.n	8006f90 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20006dbc 	.word	0x20006dbc

08006fdc <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
    return obj->par;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
    lv_obj_t * result = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <lv_obj_get_child+0x22>
        result = lv_ll_get_head(&obj->child_ll);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	4618      	mov	r0, r3
 800700e:	f00c fb5b 	bl	80136c8 <lv_ll_get_head>
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	e006      	b.n	8007024 <lv_obj_get_child+0x30>
    } else {
        result = lv_ll_get_next(&obj->child_ll, child);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f00c fb79 	bl	8013714 <lv_ll_get_next>
 8007022:	60f8      	str	r0, [r7, #12]
    }

    return result;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
    lv_area_copy(cords_p, &obj->coords);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3310      	adds	r3, #16
 800703c:	4619      	mov	r1, r3
 800703e:	6838      	ldr	r0, [r7, #0]
 8007040:	f7fe fb4c 	bl	80056dc <lv_area_copy>
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ffc1 	bl	8006fdc <lv_obj_get_parent>
 800705a:	60f8      	str	r0, [r7, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800706a:	b29b      	uxth	r3, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	817b      	strh	r3, [r7, #10]

    return rel_x;
 8007072:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff ffa8 	bl	8006fdc <lv_obj_get_parent>
 800708c:	60f8      	str	r0, [r7, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800709c:	b29b      	uxth	r3, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	817b      	strh	r3, [r7, #10]

    return rel_y;
 80070a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
    return lv_area_get_width(&obj->coords);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3310      	adds	r3, #16
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fb1b 	bl	80056f8 <lv_area_get_width>
 80070c2:	4603      	mov	r3, r0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
    return lv_area_get_height(&obj->coords);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3310      	adds	r3, #16
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fb24 	bl	8005726 <lv_area_get_height>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <lv_obj_get_auto_realign>:
 * Get the automatic realign property of the object.
 * @param obj pointer to an object
 * @return  true: auto realign is enabled; false: auto realign is disabled
 */
bool lv_obj_get_auto_realign(lv_obj_t * obj)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    return obj->realign.auto_realign ? true : false;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
#else
    (void)obj;
    return false;
#endif
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <lv_obj_get_style>:
 * Get the style pointer of an object (if NULL get style of the parent)
 * @param obj pointer to an object
 * @return pointer to a style
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
    const lv_style_t * style_act = obj->style_p;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	617b      	str	r3, [r7, #20]
    if(style_act == NULL) {
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d12c      	bne.n	800717e <lv_obj_get_style+0x6e>
        lv_obj_t * par = obj->par;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	613b      	str	r3, [r7, #16]

        while(par) {
 800712a:	e025      	b.n	8007178 <lv_obj_get_style+0x68>
            if(par->style_p) {
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01e      	beq.n	8007172 <lv_obj_get_style+0x62>
                if(par->style_p->glass == 0) {
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d116      	bne.n	8007172 <lv_obj_get_style+0x62>
#if LV_USE_GROUP == 0
                    style_act = par->style_p;
#else
                    /*If a parent is focused then use then focused style*/
                    lv_group_t * g = lv_obj_get_group(par);
 8007144:	6938      	ldr	r0, [r7, #16]
 8007146:	f000 f8aa 	bl	800729e <lv_obj_get_group>
 800714a:	60f8      	str	r0, [r7, #12]
                    if(lv_group_get_focused(g) == par) {
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7fe f888 	bl	8005262 <lv_group_get_focused>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4293      	cmp	r3, r2
 8007158:	d107      	bne.n	800716a <lv_obj_get_style+0x5a>
                        style_act = lv_group_mod_style(g, par->style_p);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	4619      	mov	r1, r3
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7fe f84e 	bl	8005202 <lv_group_mod_style>
 8007166:	6178      	str	r0, [r7, #20]
                    } else {
                        style_act = par->style_p;
                    }
#endif
                    break;
 8007168:	e009      	b.n	800717e <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	617b      	str	r3, [r7, #20]
                    break;
 8007170:	e005      	b.n	800717e <lv_obj_get_style+0x6e>
                }
            }
            par = par->par;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]
        while(par) {
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d6      	bne.n	800712c <lv_obj_get_style+0x1c>
        }
    }
#if LV_USE_GROUP
    if(obj->group_p) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <lv_obj_get_style+0x96>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe f869 	bl	8005262 <lv_group_get_focused>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4293      	cmp	r3, r2
 8007196:	d106      	bne.n	80071a6 <lv_obj_get_style+0x96>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe f82f 	bl	8005202 <lv_group_mod_style>
 80071a4:	6178      	str	r0, [r7, #20]
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <lv_obj_get_style+0xa0>
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <lv_obj_get_style+0xac>)
 80071ae:	617b      	str	r3, [r7, #20]

    return style_act;
 80071b0:	697b      	ldr	r3, [r7, #20]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20006c74 	.word	0x20006c74

080071c0 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    return obj->hidden == 0 ? false : true;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <lv_obj_get_opa_scale>:
 * Get the opa scale parameter of an object
 * @param obj pointer to an object
 * @return opa scale [0..255]
 */
lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
    const lv_obj_t * parent = obj;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]

    while(parent) {
 80071f6:	e00f      	b.n	8007218 <lv_obj_get_opa_scale+0x2e>
        if(parent->opa_scale_en) return parent->opa_scale;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <lv_obj_get_opa_scale+0x26>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800720e:	e007      	b.n	8007220 <lv_obj_get_opa_scale+0x36>
        parent = lv_obj_get_parent(parent);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fee3 	bl	8006fdc <lv_obj_get_parent>
 8007216:	60f8      	str	r0, [r7, #12]
    while(parent) {
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ec      	bne.n	80071f8 <lv_obj_get_opa_scale+0xe>
    }

    return LV_OPA_COVER;
 800721e:	23ff      	movs	r3, #255	; 0xff
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
    return (obj->protect & prot) == 0 ? false : true;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	4013      	ands	r3, r2
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <lv_obj_get_signal_cb>:
 * Get the signal function of an object
 * @param obj pointer to an object
 * @return the signal function
 */
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
    return obj->signal_cb;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <lv_obj_get_design_cb>:
 * Get the design function of an object
 * @param obj pointer to an object
 * @return the design function
 */
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
    return obj->design_cb;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <lv_obj_get_ext_attr>:
 * @param obj pointer to an object
 * @return the ext pointer but not the dynamic version
 *         Use it as ext->data1, and NOT da(ext)->data1
 */
void * lv_obj_get_ext_attr(const lv_obj_t * obj)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
    return obj->ext_attr;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
    return obj->group_p;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
    if(obj->group_p) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <lv_obj_is_focused+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd ffc9 	bl	8005262 <lv_group_get_focused>
 80072d0:	4602      	mov	r2, r0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <lv_obj_is_focused+0x26>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <lv_obj_is_focused+0x28>
    }

    return false;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return true/false, depends on 'mode'
 */
static bool lv_obj_design(lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode)
{
 80072e6:	b590      	push	{r4, r7, lr}
 80072e8:	b08b      	sub	sp, #44	; 0x2c
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	4613      	mov	r3, r2
 80072f2:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d16a      	bne.n	80073d0 <lv_obj_design+0xea>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3310      	adds	r3, #16
 80072fe:	4619      	mov	r1, r3
 8007300:	68b8      	ldr	r0, [r7, #8]
 8007302:	f00b fe32 	bl	8012f6a <lv_area_is_in>
 8007306:	4603      	mov	r3, r0
 8007308:	f083 0301 	eor.w	r3, r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <lv_obj_design+0x30>
 8007312:	2300      	movs	r3, #0
 8007314:	e070      	b.n	80073f8 <lv_obj_design+0x112>

        /*Can cover the area only if fully solid (no opacity)*/
        const lv_style_t * style = lv_obj_get_style(obj);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff fefa 	bl	8007110 <lv_obj_get_style>
 800731c:	6238      	str	r0, [r7, #32]
        if(style->body.opa < LV_OPA_MAX) return false;
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	7a1b      	ldrb	r3, [r3, #8]
 8007322:	2bfa      	cmp	r3, #250	; 0xfa
 8007324:	d801      	bhi.n	800732a <lv_obj_design+0x44>
 8007326:	2300      	movs	r3, #0
 8007328:	e066      	b.n	80073f8 <lv_obj_design+0x112>

        /* Because of the radius it is not sure the area is covered
         * Check the areas where there is no radius*/
        lv_coord_t r = style->body.radius;
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	88db      	ldrh	r3, [r3, #6]
 800732e:	83fb      	strh	r3, [r7, #30]

        if(r == LV_RADIUS_CIRCLE) return false;
 8007330:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007334:	f647 4218 	movw	r2, #31768	; 0x7c18
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <lv_obj_design+0x5a>
 800733c:	2300      	movs	r3, #0
 800733e:	e05b      	b.n	80073f8 <lv_obj_design+0x112>

        lv_area_t area_tmp;

        /*Check horizontally without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fe71 	bl	800702e <lv_obj_get_coords>
        area_tmp.x1 += r;
 800734c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007350:	b29a      	uxth	r2, r3
 8007352:	8bfb      	ldrh	r3, [r7, #30]
 8007354:	4413      	add	r3, r2
 8007356:	b29b      	uxth	r3, r3
 8007358:	b21b      	sxth	r3, r3
 800735a:	82bb      	strh	r3, [r7, #20]
        area_tmp.x2 -= r;
 800735c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007360:	b29a      	uxth	r2, r3
 8007362:	8bfb      	ldrh	r3, [r7, #30]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	b29b      	uxth	r3, r3
 8007368:	b21b      	sxth	r3, r3
 800736a:	833b      	strh	r3, [r7, #24]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	4619      	mov	r1, r3
 8007372:	68b8      	ldr	r0, [r7, #8]
 8007374:	f00b fdf9 	bl	8012f6a <lv_area_is_in>
 8007378:	4603      	mov	r3, r0
 800737a:	f083 0301 	eor.w	r3, r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <lv_obj_design+0xa2>
 8007384:	2300      	movs	r3, #0
 8007386:	e037      	b.n	80073f8 <lv_obj_design+0x112>

        /*Check vertically without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	4619      	mov	r1, r3
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fe4d 	bl	800702e <lv_obj_get_coords>
        area_tmp.y1 += r;
 8007394:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007398:	b29a      	uxth	r2, r3
 800739a:	8bfb      	ldrh	r3, [r7, #30]
 800739c:	4413      	add	r3, r2
 800739e:	b29b      	uxth	r3, r3
 80073a0:	b21b      	sxth	r3, r3
 80073a2:	82fb      	strh	r3, [r7, #22]
        area_tmp.y2 -= r;
 80073a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	8bfb      	ldrh	r3, [r7, #30]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	837b      	strh	r3, [r7, #26]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80073b4:	f107 0314 	add.w	r3, r7, #20
 80073b8:	4619      	mov	r1, r3
 80073ba:	68b8      	ldr	r0, [r7, #8]
 80073bc:	f00b fdd5 	bl	8012f6a <lv_area_is_in>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f083 0301 	eor.w	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d014      	beq.n	80073f6 <lv_obj_design+0x110>
 80073cc:	2300      	movs	r3, #0
 80073ce:	e013      	b.n	80073f8 <lv_obj_design+0x112>

    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10f      	bne.n	80073f6 <lv_obj_design+0x110>
        const lv_style_t * style = lv_obj_get_style(obj);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fe9a 	bl	8007110 <lv_obj_get_style>
 80073dc:	6278      	str	r0, [r7, #36]	; 0x24
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f103 0410 	add.w	r4, r3, #16
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff ff00 	bl	80071ea <lv_obj_get_opa_scale>
 80073ea:	4603      	mov	r3, r0
 80073ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f005 fbfc 	bl	800cbee <lv_draw_rect>
    }

    return true;
 80073f6:	2301      	movs	r3, #1
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	372c      	adds	r7, #44	; 0x2c
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd90      	pop	{r4, r7, pc}

08007400 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	460b      	mov	r3, r1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	72fb      	strb	r3, [r7, #11]
    (void)param;

    lv_res_t res = LV_RES_OK;
 800740e:	2301      	movs	r3, #1
 8007410:	77fb      	strb	r3, [r7, #31]

    const lv_style_t * style = lv_obj_get_style(obj);
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff fe7c 	bl	8007110 <lv_obj_get_style>
 8007418:	61b8      	str	r0, [r7, #24]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d109      	bne.n	8007434 <lv_obj_signal+0x34>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8007420:	2101      	movs	r1, #1
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff ff00 	bl	8007228 <lv_obj_is_protected>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d022      	beq.n	8007474 <lv_obj_signal+0x74>
 800742e:	2300      	movs	r3, #0
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e01f      	b.n	8007474 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	2b05      	cmp	r3, #5
 8007438:	d10d      	bne.n	8007456 <lv_obj_signal+0x56>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8007446:	429a      	cmp	r2, r3
 8007448:	dd14      	ble.n	8007474 <lv_obj_signal+0x74>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	869a      	strh	r2, [r3, #52]	; 0x34
 8007454:	e00e      	b.n	8007474 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d103      	bne.n	8007464 <lv_obj_signal+0x64>
        lv_obj_refresh_ext_draw_pad(obj);
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fd5b 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
 8007462:	e007      	b.n	8007474 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	2b06      	cmp	r3, #6
 8007468:	d104      	bne.n	8007474 <lv_obj_signal+0x74>
        lv_obj_type_t * buf = param;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	617b      	str	r3, [r7, #20]
        buf->type[0]        = "lv_obj";
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	4a03      	ldr	r2, [pc, #12]	; (8007480 <lv_obj_signal+0x80>)
 8007472:	601a      	str	r2, [r3, #0]
    }

    return res;
 8007474:	7ffb      	ldrb	r3, [r7, #31]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3720      	adds	r7, #32
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	08029c80 	.word	0x08029c80

08007484 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	807b      	strh	r3, [r7, #2]
 8007490:	4613      	mov	r3, r2
 8007492:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f00c f915 	bl	80136c8 <lv_ll_get_head>
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	e036      	b.n	8007510 <refresh_children_position+0x8c>
    {
        i->coords.x1 += x_diff;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	887b      	ldrh	r3, [r7, #2]
 80074ac:	4413      	add	r3, r2
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	b21a      	sxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	883b      	ldrh	r3, [r7, #0]
 80074c0:	4413      	add	r3, r2
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	887b      	ldrh	r3, [r7, #2]
 80074d4:	4413      	add	r3, r2
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	b21a      	sxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	883b      	ldrh	r3, [r7, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 80074f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80074f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff ffc1 	bl	8007484 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	4618      	mov	r0, r3
 800750a:	f00c f903 	bl	8013714 <lv_ll_get_next>
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1c5      	bne.n	80074a2 <refresh_children_position+0x1e>
    }
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8007526:	2100      	movs	r1, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fd63 	bl	8006ff4 <lv_obj_get_child>
 800752e:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8007530:	e01a      	b.n	8007568 <refresh_children_style+0x4a>
        if(child->style_p == NULL) {
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff ffef 	bl	800751e <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fb82 	bl	8006c4a <lv_obj_refresh_style>
 8007546:	e00a      	b.n	800755e <refresh_children_style+0x40>
        } else if(child->style_p->glass) {
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <refresh_children_style+0x40>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff ffe0 	bl	800751e <refresh_children_style>
        }
        child = lv_obj_get_child(obj, child);
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fd47 	bl	8006ff4 <lv_obj_get_child>
 8007566:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e1      	bne.n	8007532 <refresh_children_style+0x14>
    }
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	4618      	mov	r0, r3
 8007584:	f00c f8a0 	bl	80136c8 <lv_ll_get_head>
 8007588:	61f8      	str	r0, [r7, #28]

    /*Remove from the group; remove before transversing children so that
     * the object still has access to all children during the
     * LV_SIGNAL_DEFOCUS call*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff fe87 	bl	800729e <lv_obj_get_group>
 8007590:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <delete_children+0x42>
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fd fd68 	bl	800506e <lv_group_remove_obj>
#endif

    while(i != NULL) {
 800759e:	e00b      	b.n	80075b8 <delete_children+0x42>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f00c f8b4 	bl	8013714 <lv_ll_get_next>
 80075ac:	60f8      	str	r0, [r7, #12]

        /*Call the recursive del to the child too*/
        delete_children(i);
 80075ae:	69f8      	ldr	r0, [r7, #28]
 80075b0:	f7ff ffe1 	bl	8007576 <delete_children>

        /*Set i to the next node*/
        i = i_next;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f0      	bne.n	80075a0 <delete_children+0x2a>
    }

    /*Let the suer free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80075be:	2200      	movs	r2, #0
 80075c0:	2113      	movs	r1, #19
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fbe5 	bl	8006d92 <lv_event_send>

    lv_event_mark_deleted(obj);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f853 	bl	8007674 <lv_event_mark_deleted>

    /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 80075ce:	2100      	movs	r1, #0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f00b f963 	bl	801289c <lv_anim_del>
#endif

    /* Reset the input devices if
     * the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80075d6:	2000      	movs	r0, #0
 80075d8:	f00b f8a0 	bl	801271c <lv_indev_get_next>
 80075dc:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80075de:	e026      	b.n	800762e <delete_children+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d004      	beq.n	80075f4 <delete_children+0x7e>
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d102      	bne.n	80075fa <delete_children+0x84>
            lv_indev_reset(indev);
 80075f4:	69b8      	ldr	r0, [r7, #24]
 80075f6:	f7fd ffae 	bl	8005556 <lv_indev_reset>
        }

        if(indev->proc.types.pointer.last_pressed == obj) {
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d102      	bne.n	800760a <delete_children+0x94>
            indev->proc.types.pointer.last_pressed = NULL;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2200      	movs	r2, #0
 8007608:	641a      	str	r2, [r3, #64]	; 0x40
        }
#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	429a      	cmp	r2, r3
 8007612:	d108      	bne.n	8007626 <delete_children+0xb0>
 8007614:	f7fe f856 	bl	80056c4 <lv_indev_get_obj_act>
 8007618:	4602      	mov	r2, r0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4293      	cmp	r3, r2
 800761e:	d102      	bne.n	8007626 <delete_children+0xb0>
            lv_indev_reset(indev);
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f7fd ff98 	bl	8005556 <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 8007626:	69b8      	ldr	r0, [r7, #24]
 8007628:	f00b f878 	bl	801271c <lv_indev_get_next>
 800762c:	61b8      	str	r0, [r7, #24]
    while(indev) {
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1d5      	bne.n	80075e0 <delete_children+0x6a>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff fcd1 	bl	8006fdc <lv_obj_get_parent>
 800763a:	6138      	str	r0, [r7, #16]
    lv_ll_rem(&(par->child_ll), obj);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3304      	adds	r3, #4
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	4618      	mov	r0, r3
 8007644:	f00b ff92 	bl	801356c <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <delete_children+0xf0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	4618      	mov	r0, r3
 8007662:	f00c f9f1 	bl	8013a48 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f00c f9ee 	bl	8013a48 <lv_mem_free>
}
 800766c:	bf00      	nop
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <lv_event_mark_deleted>:

static void lv_event_mark_deleted(lv_obj_t * obj)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
    lv_event_temp_data_t * t = event_temp_data_head;
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <lv_event_mark_deleted+0x38>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]

    while(t) {
 8007682:	e00a      	b.n	800769a <lv_event_mark_deleted+0x26>
        if(t->obj == obj) t->deleted = true;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	d102      	bne.n	8007694 <lv_event_mark_deleted+0x20>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	711a      	strb	r2, [r3, #4]
        t = t->prev;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60fb      	str	r3, [r7, #12]
    while(t) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f1      	bne.n	8007684 <lv_event_mark_deleted+0x10>
    }
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20002a54 	.word	0x20002a54

080076b0 <lv_area_copy>:
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 80076ba:	2208      	movs	r2, #8
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f01f fdb0 	bl	8027224 <memcpy>
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <lv_area_get_width>:
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3301      	adds	r3, #1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	b21b      	sxth	r3, r3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <lv_area_get_height>:
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007710:	b29b      	uxth	r3, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	b29b      	uxth	r3, r3
 8007716:	3301      	adds	r3, #1
 8007718:	b29b      	uxth	r3, r3
 800771a:	b21b      	sxth	r3, r3
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 800772c:	bf00      	nop
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <lv_inv_area+0x16>
 8007748:	f00a ff2a 	bl	80125a0 <lv_disp_get_default>
 800774c:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 809b 	beq.w	800788c <lv_inv_area+0x154>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <lv_inv_area+0x34>
        disp->inv_p = 0;
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007762:	f36f 0309 	bfc	r3, #0, #10
 8007766:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
        return;
 800776a:	e092      	b.n	8007892 <lv_inv_area+0x15a>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f00a ff1f 	bl	80125b8 <lv_disp_get_hor_res>
 800777a:	4603      	mov	r3, r0
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29b      	uxth	r3, r3
 8007782:	b21b      	sxth	r3, r3
 8007784:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f00a ff37 	bl	80125fa <lv_disp_get_ver_res>
 800778c:	4603      	mov	r3, r0
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	b21b      	sxth	r3, r3
 8007796:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8007798:	f107 0214 	add.w	r2, r7, #20
 800779c:	f107 030c 	add.w	r3, r7, #12
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f00b faf6 	bl	8012d94 <lv_area_intersect>
 80077a8:	4603      	mov	r3, r0
 80077aa:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 80077ac:	7f7b      	ldrb	r3, [r7, #29]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d06f      	beq.n	8007892 <lv_inv_area+0x15a>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <lv_inv_area+0x94>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	4a36      	ldr	r2, [pc, #216]	; (8007898 <lv_inv_area+0x160>)
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	4610      	mov	r0, r2
 80077c4:	f107 020c 	add.w	r2, r7, #12
 80077c8:	4611      	mov	r1, r2
 80077ca:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 80077cc:	2300      	movs	r3, #0
 80077ce:	83fb      	strh	r3, [r7, #30]
 80077d0:	e010      	b.n	80077f4 <lv_inv_area+0xbc>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 80077d2:	8bfb      	ldrh	r3, [r7, #30]
 80077d4:	3308      	adds	r3, #8
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	441a      	add	r2, r3
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f00b fbc1 	bl	8012f6a <lv_area_is_in>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d150      	bne.n	8007890 <lv_inv_area+0x158>
        for(i = 0; i < disp->inv_p; i++) {
 80077ee:	8bfb      	ldrh	r3, [r7, #30]
 80077f0:	3301      	adds	r3, #1
 80077f2:	83fb      	strh	r3, [r7, #30]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80077fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	8bfb      	ldrh	r3, [r7, #30]
 8007804:	4293      	cmp	r3, r2
 8007806:	d3e4      	bcc.n	80077d2 <lv_inv_area+0x9a>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800780e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b1f      	cmp	r3, #31
 8007816:	d810      	bhi.n	800783a <lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800781e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007822:	b29b      	uxth	r3, r3
 8007824:	3308      	adds	r3, #8
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	f107 020c 	add.w	r2, r7, #12
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff ff3c 	bl	80076b0 <lv_area_copy>
 8007838:	e016      	b.n	8007868 <lv_inv_area+0x130>
        } else { /*If no place for the area add the screen*/
            disp->inv_p = 0;
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007840:	f36f 0309 	bfc	r3, #0, #10
 8007844:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007852:	b29b      	uxth	r3, r3
 8007854:	3308      	adds	r3, #8
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	f107 0214 	add.w	r2, r7, #20
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff24 	bl	80076b0 <lv_area_copy>
        }
        disp->inv_p++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800786e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007872:	b29b      	uxth	r3, r3
 8007874:	3301      	adds	r3, #1
 8007876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787a:	b299      	uxth	r1, r3
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007882:	f361 0309 	bfi	r3, r1, #0, #10
 8007886:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160
 800788a:	e002      	b.n	8007892 <lv_inv_area+0x15a>
    if(!disp) return;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <lv_inv_area+0x15a>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8007890:	bf00      	nop
    }
}
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20002a60 	.word	0x20002a60

0800789c <lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * lv_refr_get_disp_refreshing(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
    return disp_refr;
 80078a0:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <lv_refr_get_disp_refreshing+0x14>)
 80078a2:	681b      	ldr	r3, [r3, #0]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20002a60 	.word	0x20002a60

080078b4 <lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void lv_disp_refr_task(lv_task_t * task)
{
 80078b4:	b5b0      	push	{r4, r5, r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 80078bc:	f00a ff5e 	bl	801277c <lv_tick_get>
 80078c0:	61f8      	str	r0, [r7, #28]

    disp_refr = task->user_data;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	4a6c      	ldr	r2, [pc, #432]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80078c8:	6013      	str	r3, [r2, #0]

    lv_refr_join_area();
 80078ca:	f000 f8d9 	bl	8007a80 <lv_refr_join_area>

    lv_refr_areas();
 80078ce:	f000 f973 	bl	8007bb8 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 80078d2:	4b69      	ldr	r3, [pc, #420]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80078da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80c2 	beq.w	8007a6a <lv_disp_refr_task+0x1b6>
        /*In true double buffered mode copy the refreshed areas to the new VDB to keep it up to
         * date*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80078e6:	4b64      	ldr	r3, [pc, #400]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f00a fef5 	bl	80126da <lv_disp_is_true_double_buf>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 808b 	beq.w	8007a0e <lv_disp_refr_task+0x15a>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80078f8:	4b5f      	ldr	r3, [pc, #380]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f00a fec9 	bl	8012694 <lv_disp_get_buf>
 8007902:	61b8      	str	r0, [r7, #24]

            /*Flush the content of the VDB*/
            lv_refr_vdb_flush();
 8007904:	f000 fc5e 	bl	80081c4 <lv_refr_vdb_flush>

            /* With true double buffering the flushing should be only the address change of the
             * current frame buffer. Wait until the address change is ready and copy the changed
             * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
            while(vdb->flushing)
 8007908:	bf00      	nop
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f8      	bne.n	800790a <lv_disp_refr_task+0x56>
                ;

            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	617b      	str	r3, [r7, #20]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d102      	bne.n	8007930 <lv_disp_refr_task+0x7c>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	e001      	b.n	8007934 <lv_disp_refr_task+0x80>
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	613b      	str	r3, [r7, #16]

            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007936:	4b50      	ldr	r3, [pc, #320]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f00a fe3c 	bl	80125b8 <lv_disp_get_hor_res>
 8007940:	4603      	mov	r3, r0
 8007942:	81fb      	strh	r3, [r7, #14]
            uint16_t a;
            for(a = 0; a < disp_refr->inv_p; a++) {
 8007944:	2300      	movs	r3, #0
 8007946:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007948:	e056      	b.n	80079f8 <lv_disp_refr_task+0x144>
                if(disp_refr->inv_area_joined[a] == 0) {
 800794a:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007950:	4413      	add	r3, r2
 8007952:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007956:	2b00      	cmp	r3, #0
 8007958:	d14b      	bne.n	80079f2 <lv_disp_refr_task+0x13e>
                    lv_coord_t y;
                    uint32_t start_offs =
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800795a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800795e:	4b46      	ldr	r3, [pc, #280]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007960:	6819      	ldr	r1, [r3, #0]
 8007962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007964:	3308      	adds	r3, #8
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	440b      	add	r3, r1
 800796a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800796e:	fb03 f302 	mul.w	r3, r3, r2
 8007972:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8007978:	3108      	adds	r1, #8
 800797a:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 800797e:	4413      	add	r3, r2
                    uint32_t start_offs =
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	623b      	str	r3, [r7, #32]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8007984:	4b3c      	ldr	r3, [pc, #240]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800798a:	3308      	adds	r3, #8
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	4413      	add	r3, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff fe9b 	bl	80076cc <lv_area_get_width>
 8007996:	4603      	mov	r3, r0
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	60bb      	str	r3, [r7, #8]

                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800799c:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079a2:	3308      	adds	r3, #8
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	4413      	add	r3, r2
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079ac:	e015      	b.n	80079da <lv_disp_refr_task+0x126>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	18d0      	adds	r0, r2, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	4413      	add	r3, r2
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4619      	mov	r1, r3
 80079be:	f01f fc31 	bl	8027224 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 80079c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	4413      	add	r3, r2
 80079cc:	623b      	str	r3, [r7, #32]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80079ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079da:	4b27      	ldr	r3, [pc, #156]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079e0:	3308      	adds	r3, #8
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	4413      	add	r3, r2
 80079e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80079ea:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80079ee:	429a      	cmp	r2, r3
 80079f0:	dddd      	ble.n	80079ae <lv_disp_refr_task+0xfa>
            for(a = 0; a < disp_refr->inv_p; a++) {
 80079f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079f4:	3301      	adds	r3, #1
 80079f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80079f8:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d39d      	bcc.n	800794a <lv_disp_refr_task+0x96>
                }
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007a0e:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3340      	adds	r3, #64	; 0x40
 8007a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f01f fc0d 	bl	802723a <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007a20:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a28:	2220      	movs	r2, #32
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f01f fc04 	bl	802723a <memset>
        disp_refr->inv_p = 0;
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 8007a3a:	f36f 0309 	bfc	r3, #0, #10
 8007a3e:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00e      	beq.n	8007a6a <lv_disp_refr_task+0x1b6>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699c      	ldr	r4, [r3, #24]
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <lv_disp_refr_task+0x1c4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461d      	mov	r5, r3
 8007a58:	69f8      	ldr	r0, [r7, #28]
 8007a5a:	f00a fea9 	bl	80127b0 <lv_tick_elaps>
 8007a5e:	4601      	mov	r1, r0
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <lv_disp_refr_task+0x1c8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	4628      	mov	r0, r5
 8007a68:	47a0      	blx	r4
        }
    }

    lv_draw_free_buf();
 8007a6a:	f000 fec3 	bl	80087f4 <lv_draw_free_buf>

    LV_LOG_TRACE("lv_refr_task: ready");
}
 8007a6e:	bf00      	nop
 8007a70:	3728      	adds	r7, #40	; 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bdb0      	pop	{r4, r5, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20002a60 	.word	0x20002a60
 8007a7c:	20002a5c 	.word	0x20002a5c

08007a80 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]
 8007a8a:	e083      	b.n	8007b94 <lv_refr_join_area+0x114>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007a8c:	4b49      	ldr	r3, [pc, #292]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d176      	bne.n	8007b8c <lv_refr_join_area+0x10c>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e067      	b.n	8007b74 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8007aa4:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d158      	bne.n	8007b68 <lv_refr_join_area+0xe8>
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d054      	beq.n	8007b68 <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007abe:	4b3d      	ldr	r3, [pc, #244]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	18d0      	adds	r0, r2, r3
 8007aca:	4b3a      	ldr	r3, [pc, #232]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f00b fa19 	bl	8012f0e <lv_area_is_on>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f083 0301 	eor.w	r3, r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d141      	bne.n	8007b6c <lv_refr_join_area+0xec>
                continue;
            }

            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007ae8:	4b32      	ldr	r3, [pc, #200]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	3308      	adds	r3, #8
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	18d1      	adds	r1, r2, r3
 8007af4:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3308      	adds	r3, #8
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	441a      	add	r2, r3
 8007b00:	463b      	mov	r3, r7
 8007b02:	4618      	mov	r0, r3
 8007b04:	f00b f997 	bl	8012e36 <lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f00b f921 	bl	8012d52 <lv_area_get_size>
 8007b10:	4604      	mov	r4, r0
 8007b12:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f00b f917 	bl	8012d52 <lv_area_get_size>
 8007b24:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f00b f90d 	bl	8012d52 <lv_area_get_size>
 8007b38:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007b3a:	442b      	add	r3, r5
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	d216      	bcs.n	8007b6e <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3308      	adds	r3, #8
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	463a      	mov	r2, r7
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fdad 	bl	80076b0 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 8007b56:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e002      	b.n	8007b6e <lv_refr_join_area+0xee>
                continue;
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <lv_refr_join_area+0xee>
                continue;
 8007b6c:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d38c      	bcc.n	8007aa4 <lv_refr_join_area+0x24>
 8007b8a:	e000      	b.n	8007b8e <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007b8c:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <lv_refr_join_area+0x134>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	f4ff af70 	bcc.w	8007a8c <lv_refr_join_area+0xc>
            }
        }
    }
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8007bb4:	20002a60 	.word	0x20002a60

08007bb8 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
    px_num = 0;
 8007bbe:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <lv_refr_areas+0x84>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < disp_refr->inv_p; i++) {
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e028      	b.n	8007c1c <lv_refr_areas+0x64>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 8007bca:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <lv_refr_areas+0x88>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d11c      	bne.n	8007c16 <lv_refr_areas+0x5e>

            lv_refr_area(&disp_refr->inv_areas[i]);
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <lv_refr_areas+0x88>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3308      	adds	r3, #8
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	4413      	add	r3, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f82b 	bl	8007c44 <lv_refr_area>

            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <lv_refr_areas+0x88>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <lv_refr_areas+0x5e>
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <lv_refr_areas+0x88>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4413      	add	r3, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f00b f8a4 	bl	8012d52 <lv_area_get_size>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <lv_refr_areas+0x84>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4413      	add	r3, r2
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <lv_refr_areas+0x84>)
 8007c14:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <lv_refr_areas+0x88>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d3cb      	bcc.n	8007bca <lv_refr_areas+0x12>
        }
    }
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20002a5c 	.word	0x20002a5c
 8007c40:	20002a60 	.word	0x20002a60

08007c44 <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b08d      	sub	sp, #52	; 0x34
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007c4c:	4b7f      	ldr	r3, [pc, #508]	; (8007e4c <lv_refr_area+0x208>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f00a fd42 	bl	80126da <lv_disp_is_true_double_buf>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d027      	beq.n	8007cac <lv_refr_area+0x68>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c5c:	4b7b      	ldr	r3, [pc, #492]	; (8007e4c <lv_refr_area+0x208>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f00a fd17 	bl	8012694 <lv_disp_get_buf>
 8007c66:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007c6e:	4b77      	ldr	r3, [pc, #476]	; (8007e4c <lv_refr_area+0x208>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f00a fca0 	bl	80125b8 <lv_disp_get_hor_res>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	b21a      	sxth	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007c8c:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <lv_refr_area+0x208>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f00a fcb2 	bl	80125fa <lv_disp_get_ver_res>
 8007c96:	4603      	mov	r3, r0
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	b21a      	sxth	r2, r3
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	82da      	strh	r2, [r3, #22]
        lv_refr_area_part(area_p);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f8d3 	bl	8007e50 <lv_refr_area_part>
 8007caa:	e0cb      	b.n	8007e44 <lv_refr_area+0x200>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007cac:	4b67      	ldr	r3, [pc, #412]	; (8007e4c <lv_refr_area+0x208>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f00a fcef 	bl	8012694 <lv_disp_get_buf>
 8007cb6:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fd07 	bl	80076cc <lv_area_get_width>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff fd19 	bl	80076fa <lv_area_get_height>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8007cd2:	4b5e      	ldr	r3, [pc, #376]	; (8007e4c <lv_refr_area+0x208>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f00a fc8f 	bl	80125fa <lv_disp_get_ver_res>
 8007cdc:	4603      	mov	r3, r0
        lv_coord_t y2 =
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	db0c      	blt.n	8007cfc <lv_refr_area+0xb8>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007ce2:	4b5a      	ldr	r3, [pc, #360]	; (8007e4c <lv_refr_area+0x208>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f00a fc87 	bl	80125fa <lv_disp_get_ver_res>
 8007cec:	4603      	mov	r3, r0
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	837b      	strh	r3, [r7, #26]
        lv_coord_t y2 =
 8007cf6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007cfa:	e002      	b.n	8007d02 <lv_refr_area+0xbe>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007d02:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 8007d12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	dd02      	ble.n	8007d22 <lv_refr_area+0xde>
 8007d1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 8007d22:	4b4a      	ldr	r3, [pc, #296]	; (8007e4c <lv_refr_area+0x208>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d034      	beq.n	8007d96 <lv_refr_area+0x152>
            lv_area_t tmp;
            tmp.x1 = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	81fb      	strh	r3, [r7, #14]

            lv_coord_t y_tmp = max_row - 1;
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = y_tmp;
 8007d42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d44:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007d46:	4b41      	ldr	r3, [pc, #260]	; (8007e4c <lv_refr_area+0x208>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	4a3f      	ldr	r2, [pc, #252]	; (8007e4c <lv_refr_area+0x208>)
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	4610      	mov	r0, r2
 8007d52:	f107 020c 	add.w	r2, r7, #12
 8007d56:	4611      	mov	r1, r2
 8007d58:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fccb 	bl	80076fa <lv_area_get_height>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	da0a      	bge.n	8007d84 <lv_refr_area+0x140>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                y_tmp--;
 8007d6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(y_tmp != 0);
 8007d7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1df      	bne.n	8007d42 <lv_refr_area+0xfe>
 8007d82:	e000      	b.n	8007d86 <lv_refr_area+0x142>
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007d84:	bf00      	nop

            if(y_tmp == 0) {
 8007d86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d059      	beq.n	8007e42 <lv_refr_area+0x1fe>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            } else {
                max_row = tmp.y2 + 1;
 8007d8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d92:	3301      	adds	r3, #1
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007da0:	e02c      	b.n	8007dfc <lv_refr_area+0x1b8>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007dba:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dc2:	4413      	add	r3, r2
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	b21a      	sxth	r2, r3
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007dd6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	da02      	bge.n	8007de4 <lv_refr_area+0x1a0>
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	8b7a      	ldrh	r2, [r7, #26]
 8007de2:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	8adb      	ldrh	r3, [r3, #22]
 8007de8:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_refr_area_part(area_p);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f830 	bl	8007e50 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007df6:	4413      	add	r3, r2
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	853b      	strh	r3, [r7, #40]	; 0x28
 8007dfc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	4413      	add	r3, r2
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	ddc9      	ble.n	8007da2 <lv_refr_area+0x15e>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 8007e0e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007e12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d014      	beq.n	8007e44 <lv_refr_area+0x200>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007e32:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	8b7a      	ldrh	r2, [r7, #26]
 8007e38:	82da      	strh	r2, [r3, #22]

            /*Refresh this part too*/
            lv_refr_area_part(area_p);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f808 	bl	8007e50 <lv_refr_area_part>
 8007e40:	e000      	b.n	8007e44 <lv_refr_area+0x200>
                return;
 8007e42:	bf00      	nop
        }
    }
}
 8007e44:	3734      	adds	r7, #52	; 0x34
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20002a60 	.word	0x20002a60

08007e50 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007e58:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f00a fc19 	bl	8012694 <lv_disp_get_buf>
 8007e62:	6178      	str	r0, [r7, #20]

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8007e64:	4b2b      	ldr	r3, [pc, #172]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f00a fc1f 	bl	80126ac <lv_disp_is_double_buf>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f083 0301 	eor.w	r3, r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <lv_refr_area_part+0x3a>
        while(vdb->flushing)
 8007e7a:	bf00      	nop
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f8      	bne.n	8007e7c <lv_refr_area_part+0x2c>
    lv_obj_t * top_p;

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f103 0210 	add.w	r2, r3, #16
 8007e90:	f107 0308 	add.w	r3, r7, #8
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f00a ff7c 	bl	8012d94 <lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007e9c:	4b1d      	ldr	r3, [pc, #116]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fd f849 	bl	8004f38 <lv_disp_get_scr_act>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f832 	bl	8007f18 <lv_refr_get_top_obj>
 8007eb4:	6138      	str	r0, [r7, #16]

    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_p, &start_mask);
 8007eb6:	f107 0308 	add.w	r3, r7, #8
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6938      	ldr	r0, [r7, #16]
 8007ebe:	f000 f87f 	bl	8007fc0 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd f84b 	bl	8004f62 <lv_disp_get_layer_top>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f000 f873 	bl	8007fc0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f854 	bl	8004f8c <lv_disp_get_layer_sys>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f000 f867 	bl	8007fc0 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <lv_refr_area_part+0xc4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f00a fbef 	bl	80126da <lv_disp_is_true_double_buf>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f083 0301 	eor.w	r3, r3, #1
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <lv_refr_area_part+0xbc>
        lv_refr_vdb_flush();
 8007f08:	f000 f95c 	bl	80081c4 <lv_refr_vdb_flush>
    }
}
 8007f0c:	bf00      	nop
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20002a60 	.word	0x20002a60

08007f18 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	3310      	adds	r3, #16
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f00b f81c 	bl	8012f6a <lv_area_is_in>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03e      	beq.n	8007fb6 <lv_refr_get_top_obj+0x9e>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d136      	bne.n	8007fb6 <lv_refr_get_top_obj+0x9e>
        lv_obj_t * i;
        LV_LL_READ(obj->child_ll, i)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f00b fbbb 	bl	80136c8 <lv_ll_get_head>
 8007f52:	6138      	str	r0, [r7, #16]
 8007f54:	e00e      	b.n	8007f74 <lv_refr_get_top_obj+0x5c>
        {
            found_p = lv_refr_get_top_obj(area_p, i);
 8007f56:	6939      	ldr	r1, [r7, #16]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff ffdd 	bl	8007f18 <lv_refr_get_top_obj>
 8007f5e:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <lv_refr_get_top_obj+0x64>
        LV_LL_READ(obj->child_ll, i)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	6939      	ldr	r1, [r7, #16]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f00b fbd1 	bl	8013714 <lv_ll_get_next>
 8007f72:	6138      	str	r0, [r7, #16]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1ed      	bne.n	8007f56 <lv_refr_get_top_obj+0x3e>
 8007f7a:	e000      	b.n	8007f7e <lv_refr_get_top_obj+0x66>
                break;
 8007f7c:	bf00      	nop
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d118      	bne.n	8007fb6 <lv_refr_get_top_obj+0x9e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f7ff f8c3 	bl	8007110 <lv_obj_get_style>
 8007f8a:	60f8      	str	r0, [r7, #12]
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7a1b      	ldrb	r3, [r3, #8]
 8007f90:	2bff      	cmp	r3, #255	; 0xff
 8007f92:	d110      	bne.n	8007fb6 <lv_refr_get_top_obj+0x9e>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	6838      	ldr	r0, [r7, #0]
 8007f9e:	4798      	blx	r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d007      	beq.n	8007fb6 <lv_refr_get_top_obj+0x9e>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007fa6:	6838      	ldr	r0, [r7, #0]
 8007fa8:	f7ff f91f 	bl	80071ea <lv_obj_get_opa_scale>
 8007fac:	4603      	mov	r3, r0
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d101      	bne.n	8007fb6 <lv_refr_get_top_obj+0x9e>
                found_p = obj;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8007fb6:	697b      	ldr	r3, [r7, #20]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <lv_refr_obj_and_children+0x1c>
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <lv_refr_obj_and_children+0x84>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fc ffaf 	bl	8004f38 <lv_disp_get_scr_act>
 8007fda:	6078      	str	r0, [r7, #4]

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f832 	bl	8008048 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fe fff7 	bl	8006fdc <lv_obj_get_parent>
 8007fee:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 8007ff0:	e021      	b.n	8008036 <lv_refr_obj_and_children+0x76>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	6939      	ldr	r1, [r7, #16]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f00b fba5 	bl	8013748 <lv_ll_get_prev>
 8007ffe:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 8008000:	e00a      	b.n	8008018 <lv_refr_obj_and_children+0x58>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f81f 	bl	8008048 <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	3304      	adds	r3, #4
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	4618      	mov	r0, r3
 8008012:	f00b fb99 	bl	8013748 <lv_ll_get_prev>
 8008016:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f1      	bne.n	8008002 <lv_refr_obj_and_children+0x42>
        }

        /*Call the post draw design function of the parents of the to object*/
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	2201      	movs	r2, #1
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6978      	ldr	r0, [r7, #20]
 8008028:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f7fe ffd4 	bl	8006fdc <lv_obj_get_parent>
 8008034:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1da      	bne.n	8007ff2 <lv_refr_obj_and_children+0x32>
    }
}
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20002a60 	.word	0x20002a60

08008048 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08e      	sub	sp, #56	; 0x38
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 80ac 	bne.w	80081bc <lv_refr_obj+0x174>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008068:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800806a:	f107 0318 	add.w	r3, r7, #24
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe ffdc 	bl	800702e <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8008076:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800807a:	b29a      	uxth	r2, r3
 800807c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	b29b      	uxth	r3, r3
 8008082:	b21b      	sxth	r3, r3
 8008084:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 8008086:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800808a:	b29a      	uxth	r2, r3
 800808c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	b29b      	uxth	r3, r3
 8008092:	b21b      	sxth	r3, r3
 8008094:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 8008096:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800809a:	b29a      	uxth	r2, r3
 800809c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800809e:	4413      	add	r3, r2
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	b21b      	sxth	r3, r3
 80080a4:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 80080a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80080ae:	4413      	add	r3, r2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	b21b      	sxth	r3, r3
 80080b4:	83fb      	strh	r3, [r7, #30]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80080b6:	f107 0218 	add.w	r2, r7, #24
 80080ba:	f107 0320 	add.w	r3, r7, #32
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f00a fe67 	bl	8012d94 <lv_area_intersect>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 80080cc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d074      	beq.n	80081be <lv_refr_obj+0x176>

        /* Redraw the object */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f107 0120 	add.w	r1, r7, #32
 80080dc:	2200      	movs	r2, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
        lv_draw_fill(&obj_ext_mask, &obj_ext_mask, debug_color, LV_OPA_50);
        debug_color.full *= 17;
        debug_color.full += 0xA1;
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fe ffa0 	bl	800702e <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80080ee:	f107 0218 	add.w	r2, r7, #24
 80080f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f00a fe4b 	bl	8012d94 <lv_area_intersect>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 8008104:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008108:	2b00      	cmp	r3, #0
 800810a:	d04f      	beq.n	80081ac <lv_refr_obj+0x164>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f00b faec 	bl	80136ee <lv_ll_get_tail>
 8008116:	6378      	str	r0, [r7, #52]	; 0x34
 8008118:	e045      	b.n	80081a6 <lv_refr_obj+0x15e>
            {
                lv_obj_get_coords(child_p, &child_area);
 800811a:	f107 0308 	add.w	r3, r7, #8
 800811e:	4619      	mov	r1, r3
 8008120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008122:	f7fe ff84 	bl	800702e <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800812a:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800812c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008130:	b29a      	uxth	r2, r3
 8008132:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	b21b      	sxth	r3, r3
 800813a:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800813c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008140:	b29a      	uxth	r2, r3
 8008142:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	b21b      	sxth	r3, r3
 800814a:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800814c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008150:	b29a      	uxth	r2, r3
 8008152:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008154:	4413      	add	r3, r2
 8008156:	b29b      	uxth	r3, r3
 8008158:	b21b      	sxth	r3, r3
 800815a:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800815c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008160:	b29a      	uxth	r2, r3
 8008162:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008164:	4413      	add	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	b21b      	sxth	r3, r3
 800816a:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800816c:	f107 0208 	add.w	r2, r7, #8
 8008170:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008174:	f107 0310 	add.w	r3, r7, #16
 8008178:	4618      	mov	r0, r3
 800817a:	f00a fe0b 	bl	8012d94 <lv_area_intersect>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 8008184:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <lv_refr_obj+0x150>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800818c:	f107 0310 	add.w	r3, r7, #16
 8008190:	4619      	mov	r1, r3
 8008192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008194:	f7ff ff58 	bl	8008048 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800819e:	4618      	mov	r0, r3
 80081a0:	f00b fad2 	bl	8013748 <lv_ll_get_prev>
 80081a4:	6378      	str	r0, [r7, #52]	; 0x34
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1b6      	bne.n	800811a <lv_refr_obj+0xd2>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f107 0120 	add.w	r1, r7, #32
 80081b4:	2201      	movs	r2, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
 80081ba:	e000      	b.n	80081be <lv_refr_obj+0x176>
    if(obj->hidden != 0) return;
 80081bc:	bf00      	nop
    }
}
 80081be:	3738      	adds	r7, #56	; 0x38
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80081ca:	4b23      	ldr	r3, [pc, #140]	; (8008258 <lv_refr_vdb_flush+0x94>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f00a fa60 	bl	8012694 <lv_disp_get_buf>
 80081d4:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <lv_refr_vdb_flush+0x94>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f00a fa66 	bl	80126ac <lv_disp_is_double_buf>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <lv_refr_vdb_flush+0x32>
        while(vdb->flushing)
 80081e6:	bf00      	nop
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f8      	bne.n	80081e8 <lv_refr_vdb_flush+0x24>
            ;
    }

    vdb->flushing = 1;
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	7e13      	ldrb	r3, [r2, #24]
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	7613      	strb	r3, [r2, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8008200:	f7ff fb4c 	bl	800789c <lv_refr_get_disp_refreshing>
 8008204:	6038      	str	r0, [r7, #0]
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d008      	beq.n	8008220 <lv_refr_vdb_flush+0x5c>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	f102 0110 	add.w	r1, r2, #16
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6892      	ldr	r2, [r2, #8]
 800821e:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d012      	beq.n	800824e <lv_refr_vdb_flush+0x8a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <lv_refr_vdb_flush+0x8a>
        if(vdb->buf_act == vdb->buf1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d104      	bne.n	8008246 <lv_refr_vdb_flush+0x82>
            vdb->buf_act = vdb->buf2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8008244:	e003      	b.n	800824e <lv_refr_vdb_flush+0x8a>
            vdb->buf_act = vdb->buf1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20002a60 	.word	0x20002a60

0800825c <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	71fb      	strb	r3, [r7, #7]
 8008266:	460b      	mov	r3, r1
 8008268:	71bb      	strb	r3, [r7, #6]
 800826a:	4613      	mov	r3, r2
 800826c:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800826e:	79bb      	ldrb	r3, [r7, #6]
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	b2da      	uxtb	r2, r3
 800827a:	7b3b      	ldrb	r3, [r7, #12]
 800827c:	f362 0302 	bfi	r3, r2, #0, #3
 8008280:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	b2da      	uxtb	r2, r3
 800828e:	7b3b      	ldrb	r3, [r7, #12]
 8008290:	f362 03c7 	bfi	r3, r2, #3, #5
 8008294:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8008296:	797b      	ldrb	r3, [r7, #5]
 8008298:	08db      	lsrs	r3, r3, #3
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	7b7b      	ldrb	r3, [r7, #13]
 80082a4:	f362 0304 	bfi	r3, r2, #0, #5
 80082a8:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80082aa:	79bb      	ldrb	r3, [r7, #6]
 80082ac:	089b      	lsrs	r3, r3, #2
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	7b7b      	ldrb	r3, [r7, #13]
 80082b8:	f362 1347 	bfi	r3, r2, #5, #3
 80082bc:	737b      	strb	r3, [r7, #13]
    return color;
 80082be:	89bb      	ldrh	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 80082cc:	b598      	push	{r3, r4, r7, lr}
 80082ce:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 80082d0:	4aad      	ldr	r2, [pc, #692]	; (8008588 <lv_style_init+0x2bc>)
 80082d2:	7813      	ldrb	r3, [r2, #0]
 80082d4:	f36f 0300 	bfc	r3, #0, #1
 80082d8:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80082da:	4bab      	ldr	r3, [pc, #684]	; (8008588 <lv_style_init+0x2bc>)
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80082e0:	4aa9      	ldr	r2, [pc, #676]	; (8008588 <lv_style_init+0x2bc>)
 80082e2:	4baa      	ldr	r3, [pc, #680]	; (800858c <lv_style_init+0x2c0>)
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80082e8:	4aa7      	ldr	r2, [pc, #668]	; (8008588 <lv_style_init+0x2bc>)
 80082ea:	4ba8      	ldr	r3, [pc, #672]	; (800858c <lv_style_init+0x2c0>)
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 80082f0:	4ba5      	ldr	r3, [pc, #660]	; (8008588 <lv_style_init+0x2bc>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 80082f6:	4ba4      	ldr	r3, [pc, #656]	; (8008588 <lv_style_init+0x2bc>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 80082fc:	4ba2      	ldr	r3, [pc, #648]	; (8008588 <lv_style_init+0x2bc>)
 80082fe:	2200      	movs	r2, #0
 8008300:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 8008302:	4ba1      	ldr	r3, [pc, #644]	; (8008588 <lv_style_init+0x2bc>)
 8008304:	2200      	movs	r2, #0
 8008306:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 8008308:	4b9f      	ldr	r3, [pc, #636]	; (8008588 <lv_style_init+0x2bc>)
 800830a:	2200      	movs	r2, #0
 800830c:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800830e:	4b9e      	ldr	r3, [pc, #632]	; (8008588 <lv_style_init+0x2bc>)
 8008310:	2205      	movs	r2, #5
 8008312:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008314:	4b9c      	ldr	r3, [pc, #624]	; (8008588 <lv_style_init+0x2bc>)
 8008316:	2200      	movs	r2, #0
 8008318:	815a      	strh	r2, [r3, #10]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800831a:	4b9b      	ldr	r3, [pc, #620]	; (8008588 <lv_style_init+0x2bc>)
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 8008320:	4b99      	ldr	r3, [pc, #612]	; (8008588 <lv_style_init+0x2bc>)
 8008322:	2200      	movs	r2, #0
 8008324:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8008326:	4b98      	ldr	r3, [pc, #608]	; (8008588 <lv_style_init+0x2bc>)
 8008328:	220f      	movs	r2, #15
 800832a:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800832c:	4a96      	ldr	r2, [pc, #600]	; (8008588 <lv_style_init+0x2bc>)
 800832e:	4b98      	ldr	r3, [pc, #608]	; (8008590 <lv_style_init+0x2c4>)
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8008334:	4b94      	ldr	r3, [pc, #592]	; (8008588 <lv_style_init+0x2bc>)
 8008336:	2201      	movs	r2, #1
 8008338:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 800833a:	4b93      	ldr	r3, [pc, #588]	; (8008588 <lv_style_init+0x2bc>)
 800833c:	2200      	movs	r2, #0
 800833e:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008340:	4b91      	ldr	r3, [pc, #580]	; (8008588 <lv_style_init+0x2bc>)
 8008342:	22ff      	movs	r2, #255	; 0xff
 8008344:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008348:	4c8f      	ldr	r4, [pc, #572]	; (8008588 <lv_style_init+0x2bc>)
 800834a:	2230      	movs	r2, #48	; 0x30
 800834c:	2130      	movs	r1, #48	; 0x30
 800834e:	2030      	movs	r0, #48	; 0x30
 8008350:	f7ff ff84 	bl	800825c <lv_color_make>
 8008354:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8008356:	4c8c      	ldr	r4, [pc, #560]	; (8008588 <lv_style_init+0x2bc>)
 8008358:	22d8      	movs	r2, #216	; 0xd8
 800835a:	2196      	movs	r1, #150	; 0x96
 800835c:	2055      	movs	r0, #85	; 0x55
 800835e:	f7ff ff7d 	bl	800825c <lv_color_make>
 8008362:	8460      	strh	r0, [r4, #34]	; 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8008364:	4b88      	ldr	r3, [pc, #544]	; (8008588 <lv_style_init+0x2bc>)
 8008366:	4a8b      	ldr	r2, [pc, #556]	; (8008594 <lv_style_init+0x2c8>)
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 800836a:	4b87      	ldr	r3, [pc, #540]	; (8008588 <lv_style_init+0x2bc>)
 800836c:	2200      	movs	r2, #0
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
    lv_style_scr.text.line_space   = 2;
 8008370:	4b85      	ldr	r3, [pc, #532]	; (8008588 <lv_style_init+0x2bc>)
 8008372:	2202      	movs	r2, #2
 8008374:	855a      	strh	r2, [r3, #42]	; 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 8008376:	4b84      	ldr	r3, [pc, #528]	; (8008588 <lv_style_init+0x2bc>)
 8008378:	22ff      	movs	r2, #255	; 0xff
 800837a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800837e:	4c82      	ldr	r4, [pc, #520]	; (8008588 <lv_style_init+0x2bc>)
 8008380:	2220      	movs	r2, #32
 8008382:	2120      	movs	r1, #32
 8008384:	2020      	movs	r0, #32
 8008386:	f7ff ff69 	bl	800825c <lv_color_make>
 800838a:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800838c:	4b7e      	ldr	r3, [pc, #504]	; (8008588 <lv_style_init+0x2bc>)
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 8008394:	4b7c      	ldr	r3, [pc, #496]	; (8008588 <lv_style_init+0x2bc>)
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800839c:	4c7a      	ldr	r4, [pc, #488]	; (8008588 <lv_style_init+0x2bc>)
 800839e:	2220      	movs	r2, #32
 80083a0:	2120      	movs	r1, #32
 80083a2:	2020      	movs	r0, #32
 80083a4:	f7ff ff5a 	bl	800825c <lv_color_make>
 80083a8:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_scr.line.width   = 2;
 80083aa:	4b77      	ldr	r3, [pc, #476]	; (8008588 <lv_style_init+0x2bc>)
 80083ac:	2202      	movs	r2, #2
 80083ae:	86da      	strh	r2, [r3, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 80083b0:	4a75      	ldr	r2, [pc, #468]	; (8008588 <lv_style_init+0x2bc>)
 80083b2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80083b6:	f36f 0300 	bfc	r3, #0, #1
 80083ba:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80083be:	4972      	ldr	r1, [pc, #456]	; (8008588 <lv_style_init+0x2bc>)
 80083c0:	4875      	ldr	r0, [pc, #468]	; (8008598 <lv_style_init+0x2cc>)
 80083c2:	f000 f9cf 	bl	8008764 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 80083c6:	4b74      	ldr	r3, [pc, #464]	; (8008598 <lv_style_init+0x2cc>)
 80083c8:	2205      	movs	r2, #5
 80083ca:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 80083cc:	4b72      	ldr	r3, [pc, #456]	; (8008598 <lv_style_init+0x2cc>)
 80083ce:	2205      	movs	r2, #5
 80083d0:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 80083d2:	4b71      	ldr	r3, [pc, #452]	; (8008598 <lv_style_init+0x2cc>)
 80083d4:	2205      	movs	r2, #5
 80083d6:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 80083d8:	4b6f      	ldr	r3, [pc, #444]	; (8008598 <lv_style_init+0x2cc>)
 80083da:	2205      	movs	r2, #5
 80083dc:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80083de:	496e      	ldr	r1, [pc, #440]	; (8008598 <lv_style_init+0x2cc>)
 80083e0:	486e      	ldr	r0, [pc, #440]	; (800859c <lv_style_init+0x2d0>)
 80083e2:	f000 f9bf 	bl	8008764 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80083e6:	4c6d      	ldr	r4, [pc, #436]	; (800859c <lv_style_init+0x2d0>)
 80083e8:	22f0      	movs	r2, #240	; 0xf0
 80083ea:	21f0      	movs	r1, #240	; 0xf0
 80083ec:	20f0      	movs	r0, #240	; 0xf0
 80083ee:	f7ff ff35 	bl	800825c <lv_color_make>
 80083f2:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 80083f4:	4c69      	ldr	r4, [pc, #420]	; (800859c <lv_style_init+0x2d0>)
 80083f6:	22f0      	movs	r2, #240	; 0xf0
 80083f8:	21f0      	movs	r1, #240	; 0xf0
 80083fa:	20f0      	movs	r0, #240	; 0xf0
 80083fc:	f7ff ff2e 	bl	800825c <lv_color_make>
 8008400:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8008402:	4c66      	ldr	r4, [pc, #408]	; (800859c <lv_style_init+0x2d0>)
 8008404:	22f0      	movs	r2, #240	; 0xf0
 8008406:	21f0      	movs	r1, #240	; 0xf0
 8008408:	20f0      	movs	r0, #240	; 0xf0
 800840a:	f7ff ff27 	bl	800825c <lv_color_make>
 800840e:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8008410:	4c62      	ldr	r4, [pc, #392]	; (800859c <lv_style_init+0x2d0>)
 8008412:	22d8      	movs	r2, #216	; 0xd8
 8008414:	2196      	movs	r1, #150	; 0x96
 8008416:	2055      	movs	r0, #85	; 0x55
 8008418:	f7ff ff20 	bl	800825c <lv_color_make>
 800841c:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800841e:	4a5f      	ldr	r2, [pc, #380]	; (800859c <lv_style_init+0x2d0>)
 8008420:	4b5e      	ldr	r3, [pc, #376]	; (800859c <lv_style_init+0x2d0>)
 8008422:	885b      	ldrh	r3, [r3, #2]
 8008424:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8008426:	495c      	ldr	r1, [pc, #368]	; (8008598 <lv_style_init+0x2cc>)
 8008428:	485d      	ldr	r0, [pc, #372]	; (80085a0 <lv_style_init+0x2d4>)
 800842a:	f000 f99b 	bl	8008764 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800842e:	4c5c      	ldr	r4, [pc, #368]	; (80085a0 <lv_style_init+0x2d4>)
 8008430:	2220      	movs	r2, #32
 8008432:	2120      	movs	r1, #32
 8008434:	2020      	movs	r0, #32
 8008436:	f7ff ff11 	bl	800825c <lv_color_make>
 800843a:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800843c:	4c58      	ldr	r4, [pc, #352]	; (80085a0 <lv_style_init+0x2d4>)
 800843e:	2220      	movs	r2, #32
 8008440:	2120      	movs	r1, #32
 8008442:	2020      	movs	r0, #32
 8008444:	f7ff ff0a 	bl	800825c <lv_color_make>
 8008448:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800844a:	4c55      	ldr	r4, [pc, #340]	; (80085a0 <lv_style_init+0x2d4>)
 800844c:	2220      	movs	r2, #32
 800844e:	2120      	movs	r1, #32
 8008450:	2020      	movs	r0, #32
 8008452:	f7ff ff03 	bl	800825c <lv_color_make>
 8008456:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8008458:	4a51      	ldr	r2, [pc, #324]	; (80085a0 <lv_style_init+0x2d4>)
 800845a:	4b4c      	ldr	r3, [pc, #304]	; (800858c <lv_style_init+0x2c0>)
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8008460:	4a4f      	ldr	r2, [pc, #316]	; (80085a0 <lv_style_init+0x2d4>)
 8008462:	4b50      	ldr	r3, [pc, #320]	; (80085a4 <lv_style_init+0x2d8>)
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8008468:	4b4d      	ldr	r3, [pc, #308]	; (80085a0 <lv_style_init+0x2d4>)
 800846a:	2206      	movs	r2, #6
 800846c:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800846e:	4c4c      	ldr	r4, [pc, #304]	; (80085a0 <lv_style_init+0x2d4>)
 8008470:	2240      	movs	r2, #64	; 0x40
 8008472:	2140      	movs	r1, #64	; 0x40
 8008474:	2040      	movs	r0, #64	; 0x40
 8008476:	f7ff fef1 	bl	800825c <lv_color_make>
 800847a:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800847c:	4b48      	ldr	r3, [pc, #288]	; (80085a0 <lv_style_init+0x2d4>)
 800847e:	2202      	movs	r2, #2
 8008480:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8008482:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <lv_style_init+0x2d4>)
 8008484:	224c      	movs	r2, #76	; 0x4c
 8008486:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008488:	4945      	ldr	r1, [pc, #276]	; (80085a0 <lv_style_init+0x2d4>)
 800848a:	4847      	ldr	r0, [pc, #284]	; (80085a8 <lv_style_init+0x2dc>)
 800848c:	f000 f96a 	bl	8008764 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8008490:	4c45      	ldr	r4, [pc, #276]	; (80085a8 <lv_style_init+0x2dc>)
 8008492:	22e0      	movs	r2, #224	; 0xe0
 8008494:	21e0      	movs	r1, #224	; 0xe0
 8008496:	20e0      	movs	r0, #224	; 0xe0
 8008498:	f7ff fee0 	bl	800825c <lv_color_make>
 800849c:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800849e:	4c42      	ldr	r4, [pc, #264]	; (80085a8 <lv_style_init+0x2dc>)
 80084a0:	22e0      	movs	r2, #224	; 0xe0
 80084a2:	21e0      	movs	r1, #224	; 0xe0
 80084a4:	20e0      	movs	r0, #224	; 0xe0
 80084a6:	f7ff fed9 	bl	800825c <lv_color_make>
 80084aa:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 80084ac:	4c3e      	ldr	r4, [pc, #248]	; (80085a8 <lv_style_init+0x2dc>)
 80084ae:	22c0      	movs	r2, #192	; 0xc0
 80084b0:	21c0      	movs	r1, #192	; 0xc0
 80084b2:	20c0      	movs	r0, #192	; 0xc0
 80084b4:	f7ff fed2 	bl	800825c <lv_color_make>
 80084b8:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80084ba:	4c3b      	ldr	r4, [pc, #236]	; (80085a8 <lv_style_init+0x2dc>)
 80084bc:	22c7      	movs	r2, #199	; 0xc7
 80084be:	219a      	movs	r1, #154	; 0x9a
 80084c0:	206b      	movs	r0, #107	; 0x6b
 80084c2:	f7ff fecb 	bl	800825c <lv_color_make>
 80084c6:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80084c8:	4c37      	ldr	r4, [pc, #220]	; (80085a8 <lv_style_init+0x2dc>)
 80084ca:	228b      	movs	r2, #139	; 0x8b
 80084cc:	2159      	movs	r1, #89	; 0x59
 80084ce:	202b      	movs	r0, #43	; 0x2b
 80084d0:	f7ff fec4 	bl	800825c <lv_color_make>
 80084d4:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80084d6:	4c34      	ldr	r4, [pc, #208]	; (80085a8 <lv_style_init+0x2dc>)
 80084d8:	2242      	movs	r2, #66	; 0x42
 80084da:	212c      	movs	r1, #44	; 0x2c
 80084dc:	2015      	movs	r0, #21
 80084de:	f7ff febd 	bl	800825c <lv_color_make>
 80084e2:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80084e4:	492c      	ldr	r1, [pc, #176]	; (8008598 <lv_style_init+0x2cc>)
 80084e6:	4831      	ldr	r0, [pc, #196]	; (80085ac <lv_style_init+0x2e0>)
 80084e8:	f000 f93c 	bl	8008764 <lv_style_copy>
    lv_style_transp.glass             = 1;
 80084ec:	4a2f      	ldr	r2, [pc, #188]	; (80085ac <lv_style_init+0x2e0>)
 80084ee:	7813      	ldrb	r3, [r2, #0]
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 80084f6:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <lv_style_init+0x2e0>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 80084fc:	4b2b      	ldr	r3, [pc, #172]	; (80085ac <lv_style_init+0x2e0>)
 80084fe:	2200      	movs	r2, #0
 8008500:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008502:	492a      	ldr	r1, [pc, #168]	; (80085ac <lv_style_init+0x2e0>)
 8008504:	482a      	ldr	r0, [pc, #168]	; (80085b0 <lv_style_init+0x2e4>)
 8008506:	f000 f92d 	bl	8008764 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 800850a:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <lv_style_init+0x2e4>)
 800850c:	2200      	movs	r2, #0
 800850e:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <lv_style_init+0x2e4>)
 8008512:	2200      	movs	r2, #0
 8008514:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <lv_style_init+0x2e4>)
 8008518:	2200      	movs	r2, #0
 800851a:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800851c:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <lv_style_init+0x2e4>)
 800851e:	2200      	movs	r2, #0
 8008520:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8008522:	4923      	ldr	r1, [pc, #140]	; (80085b0 <lv_style_init+0x2e4>)
 8008524:	4823      	ldr	r0, [pc, #140]	; (80085b4 <lv_style_init+0x2e8>)
 8008526:	f000 f91d 	bl	8008764 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 800852a:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <lv_style_init+0x2e8>)
 800852c:	2200      	movs	r2, #0
 800852e:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008530:	4919      	ldr	r1, [pc, #100]	; (8008598 <lv_style_init+0x2cc>)
 8008532:	4821      	ldr	r0, [pc, #132]	; (80085b8 <lv_style_init+0x2ec>)
 8008534:	f000 f916 	bl	8008764 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008538:	4c1f      	ldr	r4, [pc, #124]	; (80085b8 <lv_style_init+0x2ec>)
 800853a:	22d0      	movs	r2, #208	; 0xd0
 800853c:	21a2      	movs	r1, #162	; 0xa2
 800853e:	2076      	movs	r0, #118	; 0x76
 8008540:	f7ff fe8c 	bl	800825c <lv_color_make>
 8008544:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008546:	4c1c      	ldr	r4, [pc, #112]	; (80085b8 <lv_style_init+0x2ec>)
 8008548:	225d      	movs	r2, #93	; 0x5d
 800854a:	213a      	movs	r1, #58	; 0x3a
 800854c:	2019      	movs	r0, #25
 800854e:	f7ff fe85 	bl	800825c <lv_color_make>
 8008552:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8008554:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <lv_style_init+0x2ec>)
 8008556:	2206      	movs	r2, #6
 8008558:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <lv_style_init+0x2ec>)
 800855c:	2219      	movs	r2, #25
 800855e:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8008560:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <lv_style_init+0x2ec>)
 8008562:	2219      	movs	r2, #25
 8008564:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <lv_style_init+0x2ec>)
 8008568:	2210      	movs	r2, #16
 800856a:	82da      	strh	r2, [r3, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 800856c:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <lv_style_init+0x2ec>)
 800856e:	2210      	movs	r2, #16
 8008570:	831a      	strh	r2, [r3, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <lv_style_init+0x2ec>)
 8008574:	220a      	movs	r2, #10
 8008576:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008578:	4c0f      	ldr	r4, [pc, #60]	; (80085b8 <lv_style_init+0x2ec>)
 800857a:	2228      	movs	r2, #40	; 0x28
 800857c:	2119      	movs	r1, #25
 800857e:	200b      	movs	r0, #11
 8008580:	f7ff fe6c 	bl	800825c <lv_color_make>
 8008584:	8160      	strh	r0, [r4, #10]
 8008586:	e019      	b.n	80085bc <lv_style_init+0x2f0>
 8008588:	20006cec 	.word	0x20006cec
 800858c:	08029c88 	.word	0x08029c88
 8008590:	08029c8c 	.word	0x08029c8c
 8008594:	20000bec 	.word	0x20000bec
 8008598:	20006c74 	.word	0x20006c74
 800859c:	20006d64 	.word	0x20006d64
 80085a0:	20006b84 	.word	0x20006b84
 80085a4:	08029c90 	.word	0x08029c90
 80085a8:	20006a94 	.word	0x20006a94
 80085ac:	20006ad0 	.word	0x20006ad0
 80085b0:	20006c38 	.word	0x20006c38
 80085b4:	20006bc0 	.word	0x20006bc0
 80085b8:	20006b0c 	.word	0x20006b0c
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80085bc:	4b63      	ldr	r3, [pc, #396]	; (800874c <lv_style_init+0x480>)
 80085be:	2202      	movs	r2, #2
 80085c0:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80085c2:	4b62      	ldr	r3, [pc, #392]	; (800874c <lv_style_init+0x480>)
 80085c4:	22b2      	movs	r2, #178	; 0xb2
 80085c6:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80085c8:	4a60      	ldr	r2, [pc, #384]	; (800874c <lv_style_init+0x480>)
 80085ca:	4b61      	ldr	r3, [pc, #388]	; (8008750 <lv_style_init+0x484>)
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 80085d0:	4b5e      	ldr	r3, [pc, #376]	; (800874c <lv_style_init+0x480>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80085d6:	4c5d      	ldr	r4, [pc, #372]	; (800874c <lv_style_init+0x480>)
 80085d8:	22ff      	movs	r2, #255	; 0xff
 80085da:	21ff      	movs	r1, #255	; 0xff
 80085dc:	20ff      	movs	r0, #255	; 0xff
 80085de:	f7ff fe3d 	bl	800825c <lv_color_make>
 80085e2:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80085e4:	4c59      	ldr	r4, [pc, #356]	; (800874c <lv_style_init+0x480>)
 80085e6:	22ff      	movs	r2, #255	; 0xff
 80085e8:	21ff      	movs	r1, #255	; 0xff
 80085ea:	20ff      	movs	r0, #255	; 0xff
 80085ec:	f7ff fe36 	bl	800825c <lv_color_make>
 80085f0:	8620      	strh	r0, [r4, #48]	; 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80085f2:	4956      	ldr	r1, [pc, #344]	; (800874c <lv_style_init+0x480>)
 80085f4:	4857      	ldr	r0, [pc, #348]	; (8008754 <lv_style_init+0x488>)
 80085f6:	f000 f8b5 	bl	8008764 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80085fa:	4c56      	ldr	r4, [pc, #344]	; (8008754 <lv_style_init+0x488>)
 80085fc:	2294      	movs	r2, #148	; 0x94
 80085fe:	2162      	movs	r1, #98	; 0x62
 8008600:	2033      	movs	r0, #51	; 0x33
 8008602:	f7ff fe2b 	bl	800825c <lv_color_make>
 8008606:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8008608:	4c52      	ldr	r4, [pc, #328]	; (8008754 <lv_style_init+0x488>)
 800860a:	223c      	movs	r2, #60	; 0x3c
 800860c:	2126      	movs	r1, #38	; 0x26
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff fe24 	bl	800825c <lv_color_make>
 8008614:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008616:	4c4f      	ldr	r4, [pc, #316]	; (8008754 <lv_style_init+0x488>)
 8008618:	22c6      	movs	r2, #198	; 0xc6
 800861a:	21b5      	movs	r1, #181	; 0xb5
 800861c:	20a4      	movs	r0, #164	; 0xa4
 800861e:	f7ff fe1d 	bl	800825c <lv_color_make>
 8008622:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008624:	4c4b      	ldr	r4, [pc, #300]	; (8008754 <lv_style_init+0x488>)
 8008626:	22c6      	movs	r2, #198	; 0xc6
 8008628:	21b5      	movs	r1, #181	; 0xb5
 800862a:	20a4      	movs	r0, #164	; 0xa4
 800862c:	f7ff fe16 	bl	800825c <lv_color_make>
 8008630:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008632:	4c48      	ldr	r4, [pc, #288]	; (8008754 <lv_style_init+0x488>)
 8008634:	22c6      	movs	r2, #198	; 0xc6
 8008636:	21b5      	movs	r1, #181	; 0xb5
 8008638:	20a4      	movs	r0, #164	; 0xa4
 800863a:	f7ff fe0f 	bl	800825c <lv_color_make>
 800863e:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8008640:	4942      	ldr	r1, [pc, #264]	; (800874c <lv_style_init+0x480>)
 8008642:	4845      	ldr	r0, [pc, #276]	; (8008758 <lv_style_init+0x48c>)
 8008644:	f000 f88e 	bl	8008764 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008648:	4c43      	ldr	r4, [pc, #268]	; (8008758 <lv_style_init+0x48c>)
 800864a:	2222      	movs	r2, #34	; 0x22
 800864c:	2111      	movs	r1, #17
 800864e:	200a      	movs	r0, #10
 8008650:	f7ff fe04 	bl	800825c <lv_color_make>
 8008654:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008656:	4c40      	ldr	r4, [pc, #256]	; (8008758 <lv_style_init+0x48c>)
 8008658:	2290      	movs	r2, #144	; 0x90
 800865a:	2162      	movs	r1, #98	; 0x62
 800865c:	2037      	movs	r0, #55	; 0x37
 800865e:	f7ff fdfd 	bl	800825c <lv_color_make>
 8008662:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008664:	4c3c      	ldr	r4, [pc, #240]	; (8008758 <lv_style_init+0x48c>)
 8008666:	220d      	movs	r2, #13
 8008668:	2107      	movs	r1, #7
 800866a:	2001      	movs	r0, #1
 800866c:	f7ff fdf6 	bl	800825c <lv_color_make>
 8008670:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008672:	4c39      	ldr	r4, [pc, #228]	; (8008758 <lv_style_init+0x48c>)
 8008674:	22f4      	movs	r2, #244	; 0xf4
 8008676:	21dd      	movs	r1, #221	; 0xdd
 8008678:	20c8      	movs	r0, #200	; 0xc8
 800867a:	f7ff fdef 	bl	800825c <lv_color_make>
 800867e:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8008680:	4c35      	ldr	r4, [pc, #212]	; (8008758 <lv_style_init+0x48c>)
 8008682:	22f4      	movs	r2, #244	; 0xf4
 8008684:	21dd      	movs	r1, #221	; 0xdd
 8008686:	20c8      	movs	r0, #200	; 0xc8
 8008688:	f7ff fde8 	bl	800825c <lv_color_make>
 800868c:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800868e:	4c32      	ldr	r4, [pc, #200]	; (8008758 <lv_style_init+0x48c>)
 8008690:	22f4      	movs	r2, #244	; 0xf4
 8008692:	21dd      	movs	r1, #221	; 0xdd
 8008694:	20c8      	movs	r0, #200	; 0xc8
 8008696:	f7ff fde1 	bl	800825c <lv_color_make>
 800869a:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800869c:	492e      	ldr	r1, [pc, #184]	; (8008758 <lv_style_init+0x48c>)
 800869e:	482f      	ldr	r0, [pc, #188]	; (800875c <lv_style_init+0x490>)
 80086a0:	f000 f860 	bl	8008764 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80086a4:	4c2d      	ldr	r4, [pc, #180]	; (800875c <lv_style_init+0x490>)
 80086a6:	2227      	movs	r2, #39	; 0x27
 80086a8:	2114      	movs	r1, #20
 80086aa:	2002      	movs	r0, #2
 80086ac:	f7ff fdd6 	bl	800825c <lv_color_make>
 80086b0:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80086b2:	4c2a      	ldr	r4, [pc, #168]	; (800875c <lv_style_init+0x490>)
 80086b4:	2270      	movs	r2, #112	; 0x70
 80086b6:	214c      	movs	r1, #76	; 0x4c
 80086b8:	202b      	movs	r0, #43	; 0x2b
 80086ba:	f7ff fdcf 	bl	800825c <lv_color_make>
 80086be:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80086c0:	4c26      	ldr	r4, [pc, #152]	; (800875c <lv_style_init+0x490>)
 80086c2:	22c6      	movs	r2, #198	; 0xc6
 80086c4:	21b5      	movs	r1, #181	; 0xb5
 80086c6:	20a4      	movs	r0, #164	; 0xa4
 80086c8:	f7ff fdc8 	bl	800825c <lv_color_make>
 80086cc:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80086ce:	4c23      	ldr	r4, [pc, #140]	; (800875c <lv_style_init+0x490>)
 80086d0:	22c6      	movs	r2, #198	; 0xc6
 80086d2:	21b5      	movs	r1, #181	; 0xb5
 80086d4:	20a4      	movs	r0, #164	; 0xa4
 80086d6:	f7ff fdc1 	bl	800825c <lv_color_make>
 80086da:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80086dc:	4c1f      	ldr	r4, [pc, #124]	; (800875c <lv_style_init+0x490>)
 80086de:	22c6      	movs	r2, #198	; 0xc6
 80086e0:	21b5      	movs	r1, #181	; 0xb5
 80086e2:	20a4      	movs	r0, #164	; 0xa4
 80086e4:	f7ff fdba 	bl	800825c <lv_color_make>
 80086e8:	86a0      	strh	r0, [r4, #52]	; 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80086ea:	4918      	ldr	r1, [pc, #96]	; (800874c <lv_style_init+0x480>)
 80086ec:	481c      	ldr	r0, [pc, #112]	; (8008760 <lv_style_init+0x494>)
 80086ee:	f000 f839 	bl	8008764 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80086f2:	4c1b      	ldr	r4, [pc, #108]	; (8008760 <lv_style_init+0x494>)
 80086f4:	22d8      	movs	r2, #216	; 0xd8
 80086f6:	21d8      	movs	r1, #216	; 0xd8
 80086f8:	20d8      	movs	r0, #216	; 0xd8
 80086fa:	f7ff fdaf 	bl	800825c <lv_color_make>
 80086fe:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008700:	4c17      	ldr	r4, [pc, #92]	; (8008760 <lv_style_init+0x494>)
 8008702:	22d8      	movs	r2, #216	; 0xd8
 8008704:	21d8      	movs	r1, #216	; 0xd8
 8008706:	20d8      	movs	r0, #216	; 0xd8
 8008708:	f7ff fda8 	bl	800825c <lv_color_make>
 800870c:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800870e:	4c14      	ldr	r4, [pc, #80]	; (8008760 <lv_style_init+0x494>)
 8008710:	2290      	movs	r2, #144	; 0x90
 8008712:	2190      	movs	r1, #144	; 0x90
 8008714:	2090      	movs	r0, #144	; 0x90
 8008716:	f7ff fda1 	bl	800825c <lv_color_make>
 800871a:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 800871c:	4c10      	ldr	r4, [pc, #64]	; (8008760 <lv_style_init+0x494>)
 800871e:	2270      	movs	r2, #112	; 0x70
 8008720:	2170      	movs	r1, #112	; 0x70
 8008722:	2070      	movs	r0, #112	; 0x70
 8008724:	f7ff fd9a 	bl	800825c <lv_color_make>
 8008728:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 800872a:	4c0d      	ldr	r4, [pc, #52]	; (8008760 <lv_style_init+0x494>)
 800872c:	2270      	movs	r2, #112	; 0x70
 800872e:	2170      	movs	r1, #112	; 0x70
 8008730:	2070      	movs	r0, #112	; 0x70
 8008732:	f7ff fd93 	bl	800825c <lv_color_make>
 8008736:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8008738:	4c09      	ldr	r4, [pc, #36]	; (8008760 <lv_style_init+0x494>)
 800873a:	2270      	movs	r2, #112	; 0x70
 800873c:	2170      	movs	r1, #112	; 0x70
 800873e:	2070      	movs	r0, #112	; 0x70
 8008740:	f7ff fd8c 	bl	800825c <lv_color_make>
 8008744:	86a0      	strh	r0, [r4, #52]	; 0x34
}
 8008746:	bf00      	nop
 8008748:	bd98      	pop	{r3, r4, r7, pc}
 800874a:	bf00      	nop
 800874c:	20006b0c 	.word	0x20006b0c
 8008750:	08029c8c 	.word	0x08029c8c
 8008754:	20006b48 	.word	0x20006b48
 8008758:	20006cb0 	.word	0x20006cb0
 800875c:	20006d28 	.word	0x20006d28
 8008760:	20006bfc 	.word	0x20006bfc

08008764 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 800876e:	223c      	movs	r2, #60	; 0x3c
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f01e fd56 	bl	8027224 <memcpy>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8008788:	4b18      	ldr	r3, [pc, #96]	; (80087ec <lv_draw_get_buf+0x6c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	429a      	cmp	r2, r3
 8008790:	d802      	bhi.n	8008798 <lv_draw_get_buf+0x18>
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <lv_draw_get_buf+0x70>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	e024      	b.n	80087e2 <lv_draw_get_buf+0x62>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8008798:	4a14      	ldr	r2, [pc, #80]	; (80087ec <lv_draw_get_buf+0x6c>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10d      	bne.n	80087c2 <lv_draw_get_buf+0x42>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f00b f90e 	bl	80139c8 <lv_mem_alloc>
 80087ac:	4602      	mov	r2, r0
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087b0:	601a      	str	r2, [r3, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d100      	bne.n	80087bc <lv_draw_get_buf+0x3c>
 80087ba:	e7fe      	b.n	80087ba <lv_draw_get_buf+0x3a>
        return LV_GC_ROOT(_lv_draw_buf);
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	e00f      	b.n	80087e2 <lv_draw_get_buf+0x62>
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80087c2:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f00b f965 	bl	8013a98 <lv_mem_realloc>
 80087ce:	4602      	mov	r2, r0
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087d2:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d100      	bne.n	80087de <lv_draw_get_buf+0x5e>
 80087dc:	e7fe      	b.n	80087dc <lv_draw_get_buf+0x5c>
    return LV_GC_ROOT(_lv_draw_buf);
 80087de:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <lv_draw_get_buf+0x70>)
 80087e0:	681b      	ldr	r3, [r3, #0]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20002a64 	.word	0x20002a64
 80087f0:	20006db8 	.word	0x20006db8

080087f4 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_draw_buf)) {
 80087f8:	4b08      	ldr	r3, [pc, #32]	; (800881c <lv_draw_free_buf+0x28>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <lv_draw_free_buf+0x22>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <lv_draw_free_buf+0x28>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f00b f91f 	bl	8013a48 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <lv_draw_free_buf+0x28>)
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
        draw_buf_size = 0;
 8008810:	4b03      	ldr	r3, [pc, #12]	; (8008820 <lv_draw_free_buf+0x2c>)
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
    }
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20006db8 	.word	0x20006db8
 8008820:	20002a64 	.word	0x20002a64

08008824 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	80fb      	strh	r3, [r7, #6]
 800882e:	460b      	mov	r3, r1
 8008830:	80bb      	strh	r3, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	70fb      	strb	r3, [r7, #3]
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8008836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <lv_draw_aa_get_opa+0x1e>
        return LV_OPA_TRANSP;
 800883e:	2300      	movs	r3, #0
 8008840:	e021      	b.n	8008886 <lv_draw_aa_get_opa+0x62>
    else if(seg < 8)
 8008842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008846:	2b07      	cmp	r3, #7
 8008848:	dc10      	bgt.n	800886c <lv_draw_aa_get_opa+0x48>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800884a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a10      	ldr	r2, [pc, #64]	; (8008894 <lv_draw_aa_get_opa+0x70>)
 8008852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008856:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800885a:	4413      	add	r3, r2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	fb03 f302 	mul.w	r3, r3, r2
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	b2db      	uxtb	r3, r3
 800886a:	e00c      	b.n	8008886 <lv_draw_aa_get_opa+0x62>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800886c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	3301      	adds	r3, #1
 8008874:	78fa      	ldrb	r2, [r7, #3]
 8008876:	fb02 f203 	mul.w	r2, r2, r3
 800887a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	fb92 f3f3 	sdiv	r3, r2, r3
 8008884:	b2db      	uxtb	r3, r3
    }
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	2000000c 	.word	0x2000000c

08008898 <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	4603      	mov	r3, r0
 80088a2:	81fb      	strh	r3, [r7, #14]
 80088a4:	460b      	mov	r3, r1
 80088a6:	81bb      	strh	r3, [r7, #12]
 80088a8:	4613      	mov	r3, r2
 80088aa:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 80088b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da05      	bge.n	80088c4 <lv_draw_aa_ver_seg+0x2c>
        aa_inv = true;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
        length = -length;
 80088bc:	897b      	ldrh	r3, [r7, #10]
 80088be:	425b      	negs	r3, r3
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	82bb      	strh	r3, [r7, #20]
 80088c8:	e025      	b.n	8008916 <lv_draw_aa_ver_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 80088ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80088ce:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80088d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff ffa4 	bl	8008824 <lv_draw_aa_get_opa>
 80088dc:	4603      	mov	r3, r0
 80088de:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <lv_draw_aa_ver_seg+0x58>
 80088e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80088ea:	7cfb      	ldrb	r3, [r7, #19]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x, y + i, mask, color, px_opa);
 80088f0:	89ba      	ldrh	r2, [r7, #12]
 80088f2:	8abb      	ldrh	r3, [r7, #20]
 80088f4:	4413      	add	r3, r2
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	b219      	sxth	r1, r3
 80088fa:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80088fe:	7cfb      	ldrb	r3, [r7, #19]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	8c3b      	ldrh	r3, [r7, #32]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	f000 fcb4 	bl	8009272 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800890a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800890e:	b29b      	uxth	r3, r3
 8008910:	3301      	adds	r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	82bb      	strh	r3, [r7, #20]
 8008916:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800891a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800891e:	429a      	cmp	r2, r3
 8008920:	dbd3      	blt.n	80088ca <lv_draw_aa_ver_seg+0x32>
    }
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af02      	add	r7, sp, #8
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	4603      	mov	r3, r0
 8008934:	81fb      	strh	r3, [r7, #14]
 8008936:	460b      	mov	r3, r1
 8008938:	81bb      	strh	r3, [r7, #12]
 800893a:	4613      	mov	r3, r2
 800893c:	817b      	strh	r3, [r7, #10]
    bool aa_inv = false;
 800893e:	2300      	movs	r3, #0
 8008940:	75fb      	strb	r3, [r7, #23]
    if(length < 0) {
 8008942:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008946:	2b00      	cmp	r3, #0
 8008948:	da05      	bge.n	8008956 <lv_draw_aa_hor_seg+0x2c>
        aa_inv = true;
 800894a:	2301      	movs	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
        length = -length;
 800894e:	897b      	ldrh	r3, [r7, #10]
 8008950:	425b      	negs	r3, r3
 8008952:	b29b      	uxth	r3, r3
 8008954:	817b      	strh	r3, [r7, #10]
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 8008956:	2300      	movs	r3, #0
 8008958:	82bb      	strh	r3, [r7, #20]
 800895a:	e025      	b.n	80089a8 <lv_draw_aa_hor_seg+0x7e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 800895c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008960:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8008964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff ff5b 	bl	8008824 <lv_draw_aa_get_opa>
 800896e:	4603      	mov	r3, r0
 8008970:	74fb      	strb	r3, [r7, #19]
        if(aa_inv) px_opa = opa - px_opa;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <lv_draw_aa_hor_seg+0x58>
 8008978:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800897c:	7cfb      	ldrb	r3, [r7, #19]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	74fb      	strb	r3, [r7, #19]
        lv_draw_px(x + i, y, mask, color, px_opa);
 8008982:	89fa      	ldrh	r2, [r7, #14]
 8008984:	8abb      	ldrh	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	b29b      	uxth	r3, r3
 800898a:	b218      	sxth	r0, r3
 800898c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008990:	7cfb      	ldrb	r3, [r7, #19]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	8c3b      	ldrh	r3, [r7, #32]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	f000 fc6b 	bl	8009272 <lv_draw_px>
    for(i = 0; i < length; i++) {
 800899c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	82bb      	strh	r3, [r7, #20]
 80089a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80089ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	dbd3      	blt.n	800895c <lv_draw_aa_hor_seg+0x32>
    }
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <lv_draw_arc>:
 * @param style style of the arc (`body.thickness`, `body.main_color`, `body.opa` is used)
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius, const lv_area_t * mask,
                 uint16_t start_angle, uint16_t end_angle, const lv_style_t * style, lv_opa_t opa_scale)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b094      	sub	sp, #80	; 0x50
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	607b      	str	r3, [r7, #4]
 80089c4:	4603      	mov	r3, r0
 80089c6:	81fb      	strh	r3, [r7, #14]
 80089c8:	460b      	mov	r3, r1
 80089ca:	81bb      	strh	r3, [r7, #12]
 80089cc:	4613      	mov	r3, r2
 80089ce:	817b      	strh	r3, [r7, #10]
    lv_coord_t thickness = style->line.width;
 80089d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    if(thickness > radius) thickness = radius;
 80089d8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80089dc:	897b      	ldrh	r3, [r7, #10]
 80089de:	429a      	cmp	r2, r3
 80089e0:	dd02      	ble.n	80089e8 <lv_draw_arc+0x2c>
 80089e2:	897b      	ldrh	r3, [r7, #10]
 80089e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t r_out = radius;
 80089e8:	897b      	ldrh	r3, [r7, #10]
 80089ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t r_in  = r_out - thickness;
 80089ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80089ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	873b      	strh	r3, [r7, #56]	; 0x38
    int16_t deg_base;
    int16_t deg;
    lv_coord_t x_start[4];
    lv_coord_t x_end[4];

    lv_color_t color = style->line.color;
 80089f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80089fc:	823b      	strh	r3, [r7, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80089fe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a02:	2bff      	cmp	r3, #255	; 0xff
 8008a04:	d102      	bne.n	8008a0c <lv_draw_arc+0x50>
 8008a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a08:	7a1b      	ldrb	r3, [r3, #8]
 8008a0a:	e00b      	b.n	8008a24 <lv_draw_arc+0x68>
 8008a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a0e:	7a1b      	ldrb	r3, [r3, #8]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	fb12 f303 	smulbb	r3, r2, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool (*deg_test)(uint16_t, uint16_t, uint16_t);
    if(start_angle <= end_angle)
 8008a28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008a2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d802      	bhi.n	8008a3a <lv_draw_arc+0x7e>
        deg_test = deg_test_norm;
 8008a34:	4bae      	ldr	r3, [pc, #696]	; (8008cf0 <lv_draw_arc+0x334>)
 8008a36:	643b      	str	r3, [r7, #64]	; 0x40
 8008a38:	e001      	b.n	8008a3e <lv_draw_arc+0x82>
    else
        deg_test = deg_test_inv;
 8008a3a:	4bae      	ldr	r3, [pc, #696]	; (8008cf4 <lv_draw_arc+0x338>)
 8008a3c:	643b      	str	r3, [r7, #64]	; 0x40

    if(deg_test(270, start_angle, end_angle))
 8008a3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008a42:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a48:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <lv_draw_arc+0xc8>
        hor_line(center_x - r_out + 1, center_y, mask, thickness - 1, color, opa); // Left Middle
 8008a54:	89fa      	ldrh	r2, [r7, #14]
 8008a56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	b218      	sxth	r0, r3
 8008a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	b21a      	sxth	r2, r3
 8008a6c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	8a3b      	ldrh	r3, [r7, #16]
 8008a78:	f8ad 3000 	strh.w	r3, [sp]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	f000 faf4 	bl	800906c <hor_line>
    if(deg_test(90, start_angle, end_angle))
 8008a84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008a88:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	205a      	movs	r0, #90	; 0x5a
 8008a90:	4798      	blx	r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d015      	beq.n	8008ac4 <lv_draw_arc+0x108>
        hor_line(center_x + r_in, center_y, mask, thickness - 1, color, opa); // Right Middle
 8008a98:	89fa      	ldrh	r2, [r7, #14]
 8008a9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	b218      	sxth	r0, r3
 8008aa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	b21a      	sxth	r2, r3
 8008aac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8008ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	8a3b      	ldrh	r3, [r7, #16]
 8008ab8:	f8ad 3000 	strh.w	r3, [sp]
 8008abc:	4613      	mov	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	f000 fad4 	bl	800906c <hor_line>
    if(deg_test(180, start_angle, end_angle))
 8008ac4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008ac8:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ace:	20b4      	movs	r0, #180	; 0xb4
 8008ad0:	4798      	blx	r3
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d017      	beq.n	8008b08 <lv_draw_arc+0x14c>
        ver_line(center_x, center_y - r_out + 1, mask, thickness - 1, color, opa); // Top Middle
 8008ad8:	89ba      	ldrh	r2, [r7, #12]
 8008ada:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	b219      	sxth	r1, r3
 8008ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	b21a      	sxth	r2, r3
 8008af0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8008af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	8a3b      	ldrh	r3, [r7, #16]
 8008afc:	f8ad 3000 	strh.w	r3, [sp]
 8008b00:	4613      	mov	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	f000 fa8a 	bl	800901c <ver_line>
    if(deg_test(0, start_angle, end_angle))
 8008b08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b0c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b12:	2000      	movs	r0, #0
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d015      	beq.n	8008b48 <lv_draw_arc+0x18c>
        ver_line(center_x, center_y + r_in, mask, thickness - 1, color, opa); // Bottom middle
 8008b1c:	89ba      	ldrh	r2, [r7, #12]
 8008b1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008b20:	4413      	add	r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	b219      	sxth	r1, r3
 8008b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	b21a      	sxth	r2, r3
 8008b30:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8008b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	8a3b      	ldrh	r3, [r7, #16]
 8008b3c:	f8ad 3000 	strh.w	r3, [sp]
 8008b40:	4613      	mov	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	f000 fa6a 	bl	800901c <ver_line>

    uint32_t r_out_sqr = r_out * r_out;
 8008b48:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008b4c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t r_in_sqr  = r_in * r_in;
 8008b56:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8008b5a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t xi;
    int16_t yi;
    for(yi = -r_out; yi < 0; yi++) {
 8008b64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008b66:	425b      	negs	r3, r3
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008b6c:	e1a8      	b.n	8008ec0 <lv_draw_arc+0x504>
        x_start[0] = LV_COORD_MIN;
 8008b6e:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b72:	83bb      	strh	r3, [r7, #28]
        x_start[1] = LV_COORD_MIN;
 8008b74:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b78:	83fb      	strh	r3, [r7, #30]
        x_start[2] = LV_COORD_MIN;
 8008b7a:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b7e:	843b      	strh	r3, [r7, #32]
        x_start[3] = LV_COORD_MIN;
 8008b80:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b84:	847b      	strh	r3, [r7, #34]	; 0x22
        x_end[0]   = LV_COORD_MIN;
 8008b86:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b8a:	82bb      	strh	r3, [r7, #20]
        x_end[1]   = LV_COORD_MIN;
 8008b8c:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b90:	82fb      	strh	r3, [r7, #22]
        x_end[2]   = LV_COORD_MIN;
 8008b92:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b96:	833b      	strh	r3, [r7, #24]
        x_end[3]   = LV_COORD_MIN;
 8008b98:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8008b9c:	837b      	strh	r3, [r7, #26]
        for(xi = -r_out; xi < 0; xi++) {
 8008b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008ba0:	425b      	negs	r3, r3
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ba6:	e0c4      	b.n	8008d32 <lv_draw_arc+0x376>

            uint32_t r_act_sqr = xi * xi + yi * yi;
 8008ba8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008bac:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8008bb0:	fb02 f203 	mul.w	r2, r2, r3
 8008bb4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008bb8:	f9b7 103c 	ldrsh.w	r1, [r7, #60]	; 0x3c
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
            if(r_act_sqr > r_out_sqr) continue;
 8008bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	f200 80ab 	bhi.w	8008d24 <lv_draw_arc+0x368>

            deg_base = fast_atan2(xi, yi) - 180;
 8008bce:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008bd2:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f97d 	bl	8008ed8 <fast_atan2>
 8008bde:	4603      	mov	r3, r0
 8008be0:	3bb4      	subs	r3, #180	; 0xb4
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	84fb      	strh	r3, [r7, #38]	; 0x26

            deg = 180 + deg_base;
 8008be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008be8:	33b4      	adds	r3, #180	; 0xb4
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008bee:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008bf0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bf4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfa:	4798      	blx	r3
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <lv_draw_arc+0x256>
                if(x_start[0] == LV_COORD_MIN) x_start[0] = xi;
 8008c02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c06:	4a3c      	ldr	r2, [pc, #240]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d111      	bne.n	8008c30 <lv_draw_arc+0x274>
 8008c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c0e:	83bb      	strh	r3, [r7, #28]
 8008c10:	e00e      	b.n	8008c30 <lv_draw_arc+0x274>
            } else if(x_start[0] != LV_COORD_MIN && x_end[0] == LV_COORD_MIN) {
 8008c12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c16:	4a38      	ldr	r2, [pc, #224]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <lv_draw_arc+0x274>
 8008c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c20:	4a35      	ldr	r2, [pc, #212]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d104      	bne.n	8008c30 <lv_draw_arc+0x274>
                x_end[0] = xi - 1;
 8008c26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	82bb      	strh	r3, [r7, #20]
            }

            deg = 360 - deg_base;
 8008c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c32:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008c3a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008c3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c40:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c46:	4798      	blx	r3
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <lv_draw_arc+0x2a2>
                if(x_start[1] == LV_COORD_MIN) x_start[1] = xi;
 8008c4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008c52:	4a29      	ldr	r2, [pc, #164]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d111      	bne.n	8008c7c <lv_draw_arc+0x2c0>
 8008c58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c5a:	83fb      	strh	r3, [r7, #30]
 8008c5c:	e00e      	b.n	8008c7c <lv_draw_arc+0x2c0>
            } else if(x_start[1] != LV_COORD_MIN && x_end[1] == LV_COORD_MIN) {
 8008c5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008c62:	4a25      	ldr	r2, [pc, #148]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d009      	beq.n	8008c7c <lv_draw_arc+0x2c0>
 8008c68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c6c:	4a22      	ldr	r2, [pc, #136]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d104      	bne.n	8008c7c <lv_draw_arc+0x2c0>
                x_end[1] = xi - 1;
 8008c72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c74:	3b01      	subs	r3, #1
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	b21b      	sxth	r3, r3
 8008c7a:	82fb      	strh	r3, [r7, #22]
            }

            deg = 180 - deg_base;
 8008c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c7e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008c86:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008c88:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c8c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c92:	4798      	blx	r3
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <lv_draw_arc+0x2ee>
                if(x_start[2] == LV_COORD_MIN) x_start[2] = xi;
 8008c9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008c9e:	4a16      	ldr	r2, [pc, #88]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d111      	bne.n	8008cc8 <lv_draw_arc+0x30c>
 8008ca4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008ca6:	843b      	strh	r3, [r7, #32]
 8008ca8:	e00e      	b.n	8008cc8 <lv_draw_arc+0x30c>
            } else if(x_start[2] != LV_COORD_MIN && x_end[2] == LV_COORD_MIN) {
 8008caa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008cae:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <lv_draw_arc+0x30c>
 8008cb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008cb8:	4a0f      	ldr	r2, [pc, #60]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d104      	bne.n	8008cc8 <lv_draw_arc+0x30c>
                x_end[2] = xi - 1;
 8008cbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	b21b      	sxth	r3, r3
 8008cc6:	833b      	strh	r3, [r7, #24]
            }

            deg = deg_base;
 8008cc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cca:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(deg_test(deg, start_angle, end_angle)) {
 8008ccc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008cce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008cd2:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8008cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd8:	4798      	blx	r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00d      	beq.n	8008cfc <lv_draw_arc+0x340>
                if(x_start[3] == LV_COORD_MIN) x_start[3] = xi;
 8008ce0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008ce4:	4a04      	ldr	r2, [pc, #16]	; (8008cf8 <lv_draw_arc+0x33c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d117      	bne.n	8008d1a <lv_draw_arc+0x35e>
 8008cea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cec:	847b      	strh	r3, [r7, #34]	; 0x22
 8008cee:	e014      	b.n	8008d1a <lv_draw_arc+0x35e>
 8008cf0:	080090bd 	.word	0x080090bd
 8008cf4:	080090f1 	.word	0x080090f1
 8008cf8:	ffff83e8 	.word	0xffff83e8
            } else if(x_start[3] != LV_COORD_MIN && x_end[3] == LV_COORD_MIN) {
 8008cfc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008d00:	4a74      	ldr	r2, [pc, #464]	; (8008ed4 <lv_draw_arc+0x518>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <lv_draw_arc+0x35e>
 8008d06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008d0a:	4a72      	ldr	r2, [pc, #456]	; (8008ed4 <lv_draw_arc+0x518>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d104      	bne.n	8008d1a <lv_draw_arc+0x35e>
                x_end[3] = xi - 1;
 8008d10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	837b      	strh	r3, [r7, #26]
            }

            if(r_act_sqr < r_in_sqr)
 8008d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d30d      	bcc.n	8008d3e <lv_draw_arc+0x382>
 8008d22:	e000      	b.n	8008d26 <lv_draw_arc+0x36a>
            if(r_act_sqr > r_out_sqr) continue;
 8008d24:	bf00      	nop
        for(xi = -r_out; xi < 0; xi++) {
 8008d26:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d32:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f6ff af36 	blt.w	8008ba8 <lv_draw_arc+0x1ec>
 8008d3c:	e000      	b.n	8008d40 <lv_draw_arc+0x384>
                break; /*No need to continue the iteration in x once we found the inner edge of the
 8008d3e:	bf00      	nop
                          arc*/
        }

        if(x_start[0] != LV_COORD_MIN) {
 8008d40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d44:	4a63      	ldr	r2, [pc, #396]	; (8008ed4 <lv_draw_arc+0x518>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d028      	beq.n	8008d9c <lv_draw_arc+0x3e0>
            if(x_end[0] == LV_COORD_MIN) x_end[0] = xi - 1;
 8008d4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d4e:	4a61      	ldr	r2, [pc, #388]	; (8008ed4 <lv_draw_arc+0x518>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d104      	bne.n	8008d5e <lv_draw_arc+0x3a2>
 8008d54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	82bb      	strh	r3, [r7, #20]
            hor_line(center_x + x_start[0], center_y + yi, mask, x_end[0] - x_start[0], color, opa);
 8008d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	4413      	add	r3, r2
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	b218      	sxth	r0, r3
 8008d6c:	89ba      	ldrh	r2, [r7, #12]
 8008d6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d70:	4413      	add	r3, r2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	b219      	sxth	r1, r3
 8008d76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	b21a      	sxth	r2, r3
 8008d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	8a3b      	ldrh	r3, [r7, #16]
 8008d90:	f8ad 3000 	strh.w	r3, [sp]
 8008d94:	4613      	mov	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f000 f968 	bl	800906c <hor_line>
        }

        if(x_start[1] != LV_COORD_MIN) {
 8008d9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008da0:	4a4c      	ldr	r2, [pc, #304]	; (8008ed4 <lv_draw_arc+0x518>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d028      	beq.n	8008df8 <lv_draw_arc+0x43c>
            if(x_end[1] == LV_COORD_MIN) x_end[1] = xi - 1;
 8008da6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008daa:	4a4a      	ldr	r2, [pc, #296]	; (8008ed4 <lv_draw_arc+0x518>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d104      	bne.n	8008dba <lv_draw_arc+0x3fe>
 8008db0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	b21b      	sxth	r3, r3
 8008db8:	82fb      	strh	r3, [r7, #22]
            hor_line(center_x + x_start[1], center_y - yi, mask, x_end[1] - x_start[1], color, opa);
 8008dba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	b218      	sxth	r0, r3
 8008dc8:	89ba      	ldrh	r2, [r7, #12]
 8008dca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	b219      	sxth	r1, r3
 8008dd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	b21a      	sxth	r2, r3
 8008de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	8a3b      	ldrh	r3, [r7, #16]
 8008dec:	f8ad 3000 	strh.w	r3, [sp]
 8008df0:	4613      	mov	r3, r2
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	f000 f93a 	bl	800906c <hor_line>
        }

        if(x_start[2] != LV_COORD_MIN) {
 8008df8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008dfc:	4a35      	ldr	r2, [pc, #212]	; (8008ed4 <lv_draw_arc+0x518>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d029      	beq.n	8008e56 <lv_draw_arc+0x49a>
            if(x_end[2] == LV_COORD_MIN) x_end[2] = xi - 1;
 8008e02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e06:	4a33      	ldr	r2, [pc, #204]	; (8008ed4 <lv_draw_arc+0x518>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d104      	bne.n	8008e16 <lv_draw_arc+0x45a>
 8008e0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b21b      	sxth	r3, r3
 8008e14:	833b      	strh	r3, [r7, #24]
            hor_line(center_x - x_end[2], center_y + yi, mask, LV_MATH_ABS(x_end[2] - x_start[2]), color, opa);
 8008e16:	89fa      	ldrh	r2, [r7, #14]
 8008e18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	b218      	sxth	r0, r3
 8008e24:	89ba      	ldrh	r2, [r7, #12]
 8008e26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e28:	4413      	add	r3, r2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	b219      	sxth	r1, r3
 8008e2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfb8      	it	lt
 8008e3e:	425b      	neglt	r3, r3
 8008e40:	b21a      	sxth	r2, r3
 8008e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	8a3b      	ldrh	r3, [r7, #16]
 8008e4a:	f8ad 3000 	strh.w	r3, [sp]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f000 f90b 	bl	800906c <hor_line>
        }

        if(x_start[3] != LV_COORD_MIN) {
 8008e56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008e5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <lv_draw_arc+0x518>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d029      	beq.n	8008eb4 <lv_draw_arc+0x4f8>
            if(x_end[3] == LV_COORD_MIN) x_end[3] = xi - 1;
 8008e60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e64:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <lv_draw_arc+0x518>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d104      	bne.n	8008e74 <lv_draw_arc+0x4b8>
 8008e6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	b21b      	sxth	r3, r3
 8008e72:	837b      	strh	r3, [r7, #26]
            hor_line(center_x - x_end[3], center_y - yi, mask, LV_MATH_ABS(x_end[3] - x_start[3]), color, opa);
 8008e74:	89fa      	ldrh	r2, [r7, #14]
 8008e76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	b218      	sxth	r0, r3
 8008e82:	89ba      	ldrh	r2, [r7, #12]
 8008e84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	b219      	sxth	r1, r3
 8008e8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bfb8      	it	lt
 8008e9c:	425b      	neglt	r3, r3
 8008e9e:	b21a      	sxth	r2, r3
 8008ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	8a3b      	ldrh	r3, [r7, #16]
 8008ea8:	f8ad 3000 	strh.w	r3, [sp]
 8008eac:	4613      	mov	r3, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	f000 f8dc 	bl	800906c <hor_line>
    for(yi = -r_out; yi < 0; yi++) {
 8008eb4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3301      	adds	r3, #1
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008ec0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f6ff ae52 	blt.w	8008b6e <lv_draw_arc+0x1b2>
#if LV_ANTIALIAS
        /*TODO*/

#endif
    }
}
 8008eca:	bf00      	nop
 8008ecc:	3748      	adds	r7, #72	; 0x48
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	ffff83e8 	.word	0xffff83e8

08008ed8 <fast_atan2>:

static uint16_t fast_atan2(int x, int y)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b089      	sub	sp, #36	; 0x24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
    // signed int y;            // (and they will be destroyed)
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	77fb      	strb	r3, [r7, #31]
    if(x < 0) {
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da05      	bge.n	8008ef8 <fast_atan2+0x20>
        negflag += 0x01; // x flag bit
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	77fb      	strb	r3, [r7, #31]
        x = (0 - x);     // is now +
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	607b      	str	r3, [r7, #4]
    }
    ux = x; // copy to unsigned var before multiply
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	617b      	str	r3, [r7, #20]
    if(y < 0) {
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da05      	bge.n	8008f0e <fast_atan2+0x36>
        negflag += 0x02; // y flag bit
 8008f02:	7ffb      	ldrb	r3, [r7, #31]
 8008f04:	3302      	adds	r3, #2
 8008f06:	77fb      	strb	r3, [r7, #31]
        y = (0 - y);     // is now +
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	425b      	negs	r3, r3
 8008f0c:	603b      	str	r3, [r7, #0]
    }
    uy = y; // copy to unsigned var before multiply
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	613b      	str	r3, [r7, #16]

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d90d      	bls.n	8008f36 <fast_atan2+0x5e>
        degree = (uy * 45) / ux; // degree result will be 0-45 range
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4413      	add	r3, r2
 8008f22:	011a      	lsls	r2, r3, #4
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	61bb      	str	r3, [r7, #24]
        negflag += 0x10;         // octant flag bit
 8008f2e:	7ffb      	ldrb	r3, [r7, #31]
 8008f30:	3310      	adds	r3, #16
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e009      	b.n	8008f4a <fast_atan2+0x72>
    } else {
        degree = (ux * 45) / uy; // degree result will be 0-45 range
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	011a      	lsls	r2, r3, #4
 8008f40:	1ad2      	subs	r2, r2, r3
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f48:	61bb      	str	r3, [r7, #24]
    }

    // 2. Compensate for the 4 degree error curve
    comp       = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	77bb      	strb	r3, [r7, #30]
    tempdegree = degree;  // use an unsigned char for speed!
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	73fb      	strb	r3, [r7, #15]
    if(tempdegree > 22) { // if top half of range
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b16      	cmp	r3, #22
 8008f56:	d918      	bls.n	8008f8a <fast_atan2+0xb2>
        if(tempdegree <= 44) comp++;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8008f5c:	d802      	bhi.n	8008f64 <fast_atan2+0x8c>
 8008f5e:	7fbb      	ldrb	r3, [r7, #30]
 8008f60:	3301      	adds	r3, #1
 8008f62:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 41) comp++;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b29      	cmp	r3, #41	; 0x29
 8008f68:	d802      	bhi.n	8008f70 <fast_atan2+0x98>
 8008f6a:	7fbb      	ldrb	r3, [r7, #30]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 37) comp++;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b25      	cmp	r3, #37	; 0x25
 8008f74:	d802      	bhi.n	8008f7c <fast_atan2+0xa4>
 8008f76:	7fbb      	ldrb	r3, [r7, #30]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	77bb      	strb	r3, [r7, #30]
        if(tempdegree <= 32) comp++; // max is 4 degrees compensated
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d81b      	bhi.n	8008fba <fast_atan2+0xe2>
 8008f82:	7fbb      	ldrb	r3, [r7, #30]
 8008f84:	3301      	adds	r3, #1
 8008f86:	77bb      	strb	r3, [r7, #30]
 8008f88:	e017      	b.n	8008fba <fast_atan2+0xe2>
    } else {                         // else is lower half of range
        if(tempdegree >= 2) comp++;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d902      	bls.n	8008f96 <fast_atan2+0xbe>
 8008f90:	7fbb      	ldrb	r3, [r7, #30]
 8008f92:	3301      	adds	r3, #1
 8008f94:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 6) comp++;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d902      	bls.n	8008fa2 <fast_atan2+0xca>
 8008f9c:	7fbb      	ldrb	r3, [r7, #30]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 10) comp++;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	d902      	bls.n	8008fae <fast_atan2+0xd6>
 8008fa8:	7fbb      	ldrb	r3, [r7, #30]
 8008faa:	3301      	adds	r3, #1
 8008fac:	77bb      	strb	r3, [r7, #30]
        if(tempdegree >= 15) comp++; // max is 4 degrees compensated
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b0e      	cmp	r3, #14
 8008fb2:	d902      	bls.n	8008fba <fast_atan2+0xe2>
 8008fb4:	7fbb      	ldrb	r3, [r7, #30]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	77bb      	strb	r3, [r7, #30]
    }
    degree += comp; // degree is now accurate to +/- 1 degree!
 8008fba:	7fbb      	ldrb	r3, [r7, #30]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <fast_atan2+0xfc>
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8008fd2:	61bb      	str	r3, [r7, #24]

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) {   // if -Y
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <fast_atan2+0x122>
        if(negflag & 0x01) // if -Y -X
 8008fde:	7ffb      	ldrb	r3, [r7, #31]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <fast_atan2+0x118>
            degree = (180 + degree);
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	33b4      	adds	r3, #180	; 0xb4
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e00d      	b.n	800900c <fast_atan2+0x134>
        else // else is -Y +X
            degree = (180 - degree);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008ff6:	61bb      	str	r3, [r7, #24]
 8008ff8:	e008      	b.n	800900c <fast_atan2+0x134>
    } else {               // else is +Y
        if(negflag & 0x01) // if +Y -X
 8008ffa:	7ffb      	ldrb	r3, [r7, #31]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <fast_atan2+0x134>
            degree = (360 - degree);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800900a:	61bb      	str	r3, [r7, #24]
    }
    return degree;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	b29b      	uxth	r3, r3
}
 8009010:	4618      	mov	r0, r3
 8009012:	3724      	adds	r7, #36	; 0x24
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <ver_line>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void ver_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b089      	sub	sp, #36	; 0x24
 8009020:	af02      	add	r7, sp, #8
 8009022:	60ba      	str	r2, [r7, #8]
 8009024:	461a      	mov	r2, r3
 8009026:	4603      	mov	r3, r0
 8009028:	81fb      	strh	r3, [r7, #14]
 800902a:	460b      	mov	r3, r1
 800902c:	81bb      	strh	r3, [r7, #12]
 800902e:	4613      	mov	r3, r2
 8009030:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x, y + len);
 8009032:	89ba      	ldrh	r2, [r7, #12]
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	4413      	add	r3, r2
 8009038:	b29b      	uxth	r3, r3
 800903a:	b21b      	sxth	r3, r3
 800903c:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8009040:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009044:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009048:	f107 0010 	add.w	r0, r7, #16
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	4623      	mov	r3, r4
 8009050:	f009 fe08 	bl	8012c64 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 8009054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009058:	f107 0010 	add.w	r0, r7, #16
 800905c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	f000 f99f 	bl	80093a2 <lv_draw_fill>
}
 8009064:	bf00      	nop
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	bd90      	pop	{r4, r7, pc}

0800906c <hor_line>:

static void hor_line(lv_coord_t x, lv_coord_t y, const lv_area_t * mask, lv_coord_t len, lv_color_t color, lv_opa_t opa)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b089      	sub	sp, #36	; 0x24
 8009070:	af02      	add	r7, sp, #8
 8009072:	60ba      	str	r2, [r7, #8]
 8009074:	461a      	mov	r2, r3
 8009076:	4603      	mov	r3, r0
 8009078:	81fb      	strh	r3, [r7, #14]
 800907a:	460b      	mov	r3, r1
 800907c:	81bb      	strh	r3, [r7, #12]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
    lv_area_t area;
    lv_area_set(&area, x, y, x + len, y);
 8009082:	89fa      	ldrh	r2, [r7, #14]
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	4413      	add	r3, r2
 8009088:	b29b      	uxth	r3, r3
 800908a:	b21c      	sxth	r4, r3
 800908c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009090:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009094:	f107 0010 	add.w	r0, r7, #16
 8009098:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	4623      	mov	r3, r4
 80090a0:	f009 fde0 	bl	8012c64 <lv_area_set>

    lv_draw_fill(&area, mask, color, opa);
 80090a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090a8:	f107 0010 	add.w	r0, r7, #16
 80090ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	f000 f977 	bl	80093a2 <lv_draw_fill>
}
 80090b4:	bf00      	nop
 80090b6:	371c      	adds	r7, #28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd90      	pop	{r4, r7, pc}

080090bc <deg_test_norm>:

static bool deg_test_norm(uint16_t deg, uint16_t start, uint16_t end)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	80fb      	strh	r3, [r7, #6]
 80090c6:	460b      	mov	r3, r1
 80090c8:	80bb      	strh	r3, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	807b      	strh	r3, [r7, #2]
    if(deg >= start && deg <= end)
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	88bb      	ldrh	r3, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d305      	bcc.n	80090e2 <deg_test_norm+0x26>
 80090d6:	88fa      	ldrh	r2, [r7, #6]
 80090d8:	887b      	ldrh	r3, [r7, #2]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d801      	bhi.n	80090e2 <deg_test_norm+0x26>
        return true;
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <deg_test_norm+0x28>
    else
        return false;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <deg_test_inv>:

static bool deg_test_inv(uint16_t deg, uint16_t start, uint16_t end)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	80fb      	strh	r3, [r7, #6]
 80090fa:	460b      	mov	r3, r1
 80090fc:	80bb      	strh	r3, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	807b      	strh	r3, [r7, #2]
    if(deg >= start || deg <= end) {
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	88bb      	ldrh	r3, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d203      	bcs.n	8009112 <deg_test_inv+0x22>
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	887b      	ldrh	r3, [r7, #2]
 800910e:	429a      	cmp	r2, r3
 8009110:	d801      	bhi.n	8009116 <deg_test_inv+0x26>
        return true;
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <deg_test_inv+0x28>
    } else
        return false;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	80b8      	strh	r0, [r7, #4]
 800912c:	8039      	strh	r1, [r7, #0]
 800912e:	4613      	mov	r3, r2
 8009130:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009132:	793b      	ldrb	r3, [r7, #4]
 8009134:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009138:	b2db      	uxtb	r3, r3
 800913a:	b29a      	uxth	r2, r3
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	b29b      	uxth	r3, r3
 8009140:	fb12 f303 	smulbb	r3, r2, r3
 8009144:	b29a      	uxth	r2, r3
 8009146:	783b      	ldrb	r3, [r7, #0]
 8009148:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800914c:	b2db      	uxtb	r3, r3
 800914e:	b299      	uxth	r1, r3
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009156:	b29b      	uxth	r3, r3
 8009158:	fb11 f303 	smulbb	r3, r1, r3
 800915c:	b29b      	uxth	r3, r3
 800915e:	4413      	add	r3, r2
 8009160:	b29b      	uxth	r3, r3
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	b29b      	uxth	r3, r3
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	b2da      	uxtb	r2, r3
 800916c:	7a3b      	ldrb	r3, [r7, #8]
 800916e:	f362 03c7 	bfi	r3, r2, #3, #5
 8009172:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 8009174:	793b      	ldrb	r3, [r7, #4]
 8009176:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800917a:	b2db      	uxtb	r3, r3
 800917c:	b29b      	uxth	r3, r3
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	b29a      	uxth	r2, r3
 8009182:	797b      	ldrb	r3, [r7, #5]
 8009184:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009188:	b2db      	uxtb	r3, r3
 800918a:	b29b      	uxth	r3, r3
 800918c:	4413      	add	r3, r2
 800918e:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 8009190:	783b      	ldrb	r3, [r7, #0]
 8009192:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009196:	b2db      	uxtb	r3, r3
 8009198:	b29b      	uxth	r3, r3
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	b29a      	uxth	r2, r3
 800919e:	787b      	ldrb	r3, [r7, #1]
 80091a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4413      	add	r3, r2
 80091aa:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	89fa      	ldrh	r2, [r7, #14]
 80091b2:	fb12 f303 	smulbb	r3, r2, r3
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80091be:	b29b      	uxth	r3, r3
 80091c0:	89b9      	ldrh	r1, [r7, #12]
 80091c2:	fb11 f303 	smulbb	r3, r1, r3
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	4413      	add	r3, r2
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	0a1b      	lsrs	r3, r3, #8
 80091ce:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 80091d0:	897b      	ldrh	r3, [r7, #10]
 80091d2:	08db      	lsrs	r3, r3, #3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	7a3b      	ldrb	r3, [r7, #8]
 80091de:	f362 0302 	bfi	r3, r2, #0, #3
 80091e2:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 80091e4:	897b      	ldrh	r3, [r7, #10]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	7a7b      	ldrb	r3, [r7, #9]
 80091ee:	f362 1347 	bfi	r3, r2, #5, #3
 80091f2:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80091f4:	797b      	ldrb	r3, [r7, #5]
 80091f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	b29b      	uxth	r3, r3
 8009202:	fb12 f303 	smulbb	r3, r2, r3
 8009206:	b29a      	uxth	r2, r3
 8009208:	787b      	ldrb	r3, [r7, #1]
 800920a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800920e:	b2db      	uxtb	r3, r3
 8009210:	b299      	uxth	r1, r3
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009218:	b29b      	uxth	r3, r3
 800921a:	fb11 f303 	smulbb	r3, r1, r3
 800921e:	b29b      	uxth	r3, r3
 8009220:	4413      	add	r3, r2
 8009222:	b29b      	uxth	r3, r3
 8009224:	0a1b      	lsrs	r3, r3, #8
 8009226:	b29b      	uxth	r3, r3
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	b2da      	uxtb	r2, r3
 800922e:	7a7b      	ldrb	r3, [r7, #9]
 8009230:	f362 0304 	bfi	r3, r2, #0, #5
 8009234:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009236:	893b      	ldrh	r3, [r7, #8]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800925a:	b29b      	uxth	r3, r3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	b29b      	uxth	r3, r3
 8009260:	3301      	adds	r3, #1
 8009262:	b29b      	uxth	r3, r3
 8009264:	b21b      	sxth	r3, r3
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 8009272:	b5b0      	push	{r4, r5, r7, lr}
 8009274:	b08e      	sub	sp, #56	; 0x38
 8009276:	af04      	add	r7, sp, #16
 8009278:	60ba      	str	r2, [r7, #8]
 800927a:	80bb      	strh	r3, [r7, #4]
 800927c:	4603      	mov	r3, r0
 800927e:	81fb      	strh	r3, [r7, #14]
 8009280:	460b      	mov	r3, r1
 8009282:	81bb      	strh	r3, [r7, #12]

    if(opa < LV_OPA_MIN) return;
 8009284:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009288:	2b0f      	cmp	r3, #15
 800928a:	f240 8084 	bls.w	8009396 <lv_draw_px+0x124>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800928e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009292:	2bfb      	cmp	r3, #251	; 0xfb
 8009294:	d902      	bls.n	800929c <lv_draw_px+0x2a>
 8009296:	23ff      	movs	r3, #255	; 0xff
 8009298:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	db77      	blt.n	800939a <lv_draw_px+0x128>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dc70      	bgt.n	800939a <lv_draw_px+0x128>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	db69      	blt.n	800939a <lv_draw_px+0x128>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80092cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	dc62      	bgt.n	800939a <lv_draw_px+0x128>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80092d4:	f7fe fae2 	bl	800789c <lv_refr_get_disp_refreshing>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80092da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092dc:	f009 f9da 	bl	8012694 <lv_disp_get_buf>
 80092e0:	6238      	str	r0, [r7, #32]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	3310      	adds	r3, #16
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff ffac 	bl	8009244 <lv_area_get_width>
 80092ec:	4603      	mov	r3, r0
 80092ee:	61fb      	str	r3, [r7, #28]

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 80092f0:	89fa      	ldrh	r2, [r7, #14]
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	81fb      	strh	r3, [r7, #14]
    y -= vdb->area.y1;
 8009300:	89ba      	ldrh	r2, [r7, #12]
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009308:	b29b      	uxth	r3, r3
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	b29b      	uxth	r3, r3
 800930e:	81bb      	strh	r3, [r7, #12]

    if(disp->driver.set_px_cb) {
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d014      	beq.n	8009342 <lv_draw_px+0xd0>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	695c      	ldr	r4, [r3, #20]
 800931c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	6899      	ldr	r1, [r3, #8]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	b21a      	sxth	r2, r3
 8009326:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 800932a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	88bb      	ldrh	r3, [r7, #4]
 8009332:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009336:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	462b      	mov	r3, r5
 800933e:	47a0      	blx	r4
 8009340:	e02c      	b.n	800939c <lv_draw_px+0x12a>
    } else {
        bool scr_transp = false;
 8009342:	2300      	movs	r3, #0
 8009344:	76fb      	strb	r3, [r7, #27]
#if LV_COLOR_SCREEN_TRANSP
        scr_transp = disp->driver.screen_transp;
#endif

        lv_color_t * vdb_px_p = vdb->buf_act;
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	617b      	str	r3, [r7, #20]
        vdb_px_p += y * vdb_width + x;
 800934c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	fb02 f203 	mul.w	r2, r2, r3
 8009356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800935a:	4413      	add	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	617b      	str	r3, [r7, #20]

        if(scr_transp == false) {
 8009364:	7efb      	ldrb	r3, [r7, #27]
 8009366:	f083 0301 	eor.w	r3, r3, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d015      	beq.n	800939c <lv_draw_px+0x12a>
            if(opa == LV_OPA_COVER) {
 8009370:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009374:	2bff      	cmp	r3, #255	; 0xff
 8009376:	d103      	bne.n	8009380 <lv_draw_px+0x10e>
                *vdb_px_p = color;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	88ba      	ldrh	r2, [r7, #4]
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	e00d      	b.n	800939c <lv_draw_px+0x12a>
            } else {
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8009380:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	8819      	ldrh	r1, [r3, #0]
 8009388:	88b8      	ldrh	r0, [r7, #4]
 800938a:	f7ff fecb 	bl	8009124 <lv_color_mix>
 800938e:	4602      	mov	r2, r0
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e002      	b.n	800939c <lv_draw_px+0x12a>
    if(opa < LV_OPA_MIN) return;
 8009396:	bf00      	nop
 8009398:	e000      	b.n	800939c <lv_draw_px+0x12a>
        return;
 800939a:	bf00      	nop
#if LV_COLOR_DEPTH == 32
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 800939c:	3728      	adds	r7, #40	; 0x28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bdb0      	pop	{r4, r5, r7, pc}

080093a2 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b090      	sub	sp, #64	; 0x40
 80093a6:	af02      	add	r7, sp, #8
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	80ba      	strh	r2, [r7, #4]
 80093ae:	71fb      	strb	r3, [r7, #7]
    if(opa < LV_OPA_MIN) return;
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b0f      	cmp	r3, #15
 80093b4:	d968      	bls.n	8009488 <lv_draw_fill+0xe6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	2bfb      	cmp	r3, #251	; 0xfb
 80093ba:	d901      	bls.n	80093c0 <lv_draw_fill+0x1e>
 80093bc:	23ff      	movs	r3, #255	; 0xff
 80093be:	71fb      	strb	r3, [r7, #7]
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80093c0:	f107 031c 	add.w	r3, r7, #28
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f009 fce3 	bl	8012d94 <lv_area_intersect>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 80093d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d8:	f083 0301 	eor.w	r3, r3, #1
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d154      	bne.n	800948c <lv_draw_fill+0xea>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80093e2:	f7fe fa5b 	bl	800789c <lv_refr_get_disp_refreshing>
 80093e6:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80093e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ea:	f009 f953 	bl	8012694 <lv_disp_get_buf>
 80093ee:	62f8      	str	r0, [r7, #44]	; 0x2c

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80093f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	b29b      	uxth	r3, r3
 8009402:	b21b      	sxth	r3, r3
 8009404:	82bb      	strh	r3, [r7, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009406:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800940a:	b29a      	uxth	r2, r3
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009412:	b29b      	uxth	r3, r3
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	b21b      	sxth	r3, r3
 800941a:	82fb      	strh	r3, [r7, #22]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800941c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009420:	b29a      	uxth	r2, r3
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009428:	b29b      	uxth	r3, r3
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	b21b      	sxth	r3, r3
 8009430:	833b      	strh	r3, [r7, #24]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009432:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009436:	b29a      	uxth	r2, r3
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800943e:	b29b      	uxth	r3, r3
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	b29b      	uxth	r3, r3
 8009444:	b21b      	sxth	r3, r3
 8009446:	837b      	strh	r3, [r7, #26]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t vdb_width       = lv_area_get_width(&vdb->area);
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	3310      	adds	r3, #16
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fef6 	bl	8009244 <lv_area_get_width>
 8009458:	4603      	mov	r3, r0
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
    /*Move the vdb_tmp to the first row*/
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800945c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009460:	461a      	mov	r2, r3
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	fb03 f302 	mul.w	r3, r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800946c:	4413      	add	r3, r2
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
        else {
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
        }
    }
#else
    sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	6898      	ldr	r0, [r3, #8]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	b219      	sxth	r1, r3
 8009478:	f107 0214 	add.w	r2, r7, #20
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	88bb      	ldrh	r3, [r7, #4]
 8009482:	f000 fd4f 	bl	8009f24 <sw_color_fill>
 8009486:	e002      	b.n	800948e <lv_draw_fill+0xec>
    if(opa < LV_OPA_MIN) return;
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <lv_draw_fill+0xec>
        return;
 800948c:	bf00      	nop
#endif
}
 800948e:	3738      	adds	r7, #56	; 0x38
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 8009494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009496:	b0a1      	sub	sp, #132	; 0x84
 8009498:	af04      	add	r7, sp, #16
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80094a2:	2300      	movs	r3, #0
 80094a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80094a8:	23ff      	movs	r3, #255	; 0xff
 80094aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80094ae:	4bbe      	ldr	r3, [pc, #760]	; (80097a8 <lv_draw_letter+0x314>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80094b4:	4bbd      	ldr	r3, [pc, #756]	; (80097ac <lv_draw_letter+0x318>)
 80094b6:	f107 041c 	add.w	r4, r7, #28
 80094ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 80094c0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80094c4:	2b0f      	cmp	r3, #15
 80094c6:	f240 827e 	bls.w	80099c6 <lv_draw_letter+0x532>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80094ca:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80094ce:	2bfb      	cmp	r3, #251	; 0xfb
 80094d0:	d902      	bls.n	80094d8 <lv_draw_letter+0x44>
 80094d2:	23ff      	movs	r3, #255	; 0xff
 80094d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

    if(font_p == NULL) {
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8275 	beq.w	80099ca <lv_draw_letter+0x536>
        LV_LOG_WARN("Font: character's bitmap not found");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80094e0:	f107 0114 	add.w	r1, r7, #20
 80094e4:	2300      	movs	r3, #0
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f008 fc72 	bl	8011dd2 <lv_font_get_glyph_dsc>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(g_ret == false) return;
 80094f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094f8:	f083 0301 	eor.w	r3, r3, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f040 8265 	bne.w	80099ce <lv_draw_letter+0x53a>

    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800950a:	b29a      	uxth	r2, r3
 800950c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4413      	add	r3, r2
 8009514:	b29b      	uxth	r3, r3
 8009516:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7a1b      	ldrb	r3, [r3, #8]
 8009526:	b299      	uxth	r1, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7a5b      	ldrb	r3, [r3, #9]
 800952c:	b29b      	uxth	r3, r3
 800952e:	1acb      	subs	r3, r1, r3
 8009530:	b29b      	uxth	r3, r3
 8009532:	4413      	add	r3, r2
 8009534:	b29a      	uxth	r2, r3
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	b29b      	uxth	r3, r3
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	b29a      	uxth	r2, r3
 800953e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8009542:	b29b      	uxth	r3, r3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    const uint8_t * bpp_opa_table;
    uint8_t bitmask_init;
    uint8_t bitmask;

    switch(g.bpp) {
 800954c:	7ebb      	ldrb	r3, [r7, #26]
 800954e:	3b01      	subs	r3, #1
 8009550:	2b07      	cmp	r3, #7
 8009552:	f200 823e 	bhi.w	80099d2 <lv_draw_letter+0x53e>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <lv_draw_letter+0xc8>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	0800957d 	.word	0x0800957d
 8009560:	0800958b 	.word	0x0800958b
 8009564:	080099d3 	.word	0x080099d3
 8009568:	08009599 	.word	0x08009599
 800956c:	080099d3 	.word	0x080099d3
 8009570:	080099d3 	.word	0x080099d3
 8009574:	080099d3 	.word	0x080099d3
 8009578:	080095a7 	.word	0x080095a7
        case 1:
            bpp_opa_table = bpp1_opa_table;
 800957c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009580:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0x80;
 8009582:	2380      	movs	r3, #128	; 0x80
 8009584:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8009588:	e013      	b.n	80095b2 <lv_draw_letter+0x11e>
        case 2:
            bpp_opa_table = bpp2_opa_table;
 800958a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800958e:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xC0;
 8009590:	23c0      	movs	r3, #192	; 0xc0
 8009592:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8009596:	e00c      	b.n	80095b2 <lv_draw_letter+0x11e>
        case 4:
            bpp_opa_table = bpp4_opa_table;
 8009598:	f107 031c 	add.w	r3, r7, #28
 800959c:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xF0;
 800959e:	23f0      	movs	r3, #240	; 0xf0
 80095a0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 80095a4:	e005      	b.n	80095b2 <lv_draw_letter+0x11e>
        case 8:
            bpp_opa_table = NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	66fb      	str	r3, [r7, #108]	; 0x6c
            bitmask_init  = 0xFF;
 80095aa:	23ff      	movs	r3, #255	; 0xff
 80095ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;       /*No opa table, pixel value will be used directly*/
 80095b0:	bf00      	nop
        default: return; /*Invalid bpp. Can't render the letter*/
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f008 fbfd 	bl	8011db4 <lv_font_get_glyph_bitmap>
 80095ba:	6678      	str	r0, [r7, #100]	; 0x64

    if(map_p == NULL) return;
 80095bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 8209 	beq.w	80099d6 <lv_draw_letter+0x542>

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80095c4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80095c8:	7dba      	ldrb	r2, [r7, #22]
 80095ca:	4413      	add	r3, r2
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	f2c0 8201 	blt.w	80099da <lv_draw_letter+0x546>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80095de:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 80095e2:	429a      	cmp	r2, r3
 80095e4:	f300 81f9 	bgt.w	80099da <lv_draw_letter+0x546>
 80095e8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80095ec:	7dfa      	ldrb	r2, [r7, #23]
 80095ee:	4413      	add	r3, r2
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80095f6:	4293      	cmp	r3, r2
 80095f8:	f2c0 81ef 	blt.w	80099da <lv_draw_letter+0x546>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009602:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8009606:	429a      	cmp	r2, r3
 8009608:	f300 81e7 	bgt.w	80099da <lv_draw_letter+0x546>

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800960c:	f7fe f946 	bl	800789c <lv_refr_get_disp_refreshing>
 8009610:	64f8      	str	r0, [r7, #76]	; 0x4c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009612:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009614:	f009 f83e 	bl	8012694 <lv_disp_get_buf>
 8009618:	64b8      	str	r0, [r7, #72]	; 0x48

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 800961a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800961c:	3310      	adds	r3, #16
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fe10 	bl	8009244 <lv_area_get_width>
 8009624:	4603      	mov	r3, r0
 8009626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800962a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t col, row;

    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8009630:	7dbb      	ldrb	r3, [r7, #22]
 8009632:	08db      	lsrs	r3, r3, #3
 8009634:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(g.box_w & 0x7) width_byte_scr++;
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <lv_draw_letter+0x1b8>
 8009642:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009646:	3301      	adds	r3, #1
 8009648:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800964c:	7dbb      	ldrb	r3, [r7, #22]
 800964e:	b29a      	uxth	r2, r3
 8009650:	7ebb      	ldrb	r3, [r7, #26]
 8009652:	b29b      	uxth	r3, r3
 8009654:	fb12 f303 	smulbb	r3, r2, r3
 8009658:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Calculate the col/row start/end on the map*/
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009662:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8009666:	429a      	cmp	r2, r3
 8009668:	da09      	bge.n	800967e <lv_draw_letter+0x1ea>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009670:	b29a      	uxth	r2, r3
 8009672:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	b29b      	uxth	r3, r3
 800967a:	b21b      	sxth	r3, r3
 800967c:	e000      	b.n	8009680 <lv_draw_letter+0x1ec>
 800967e:	2300      	movs	r3, #0
 8009680:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8009684:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8009688:	7dba      	ldrb	r2, [r7, #22]
 800968a:	4413      	add	r3, r2
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009692:	4293      	cmp	r3, r2
 8009694:	dc02      	bgt.n	800969c <lv_draw_letter+0x208>
 8009696:	7dbb      	ldrb	r3, [r7, #22]
 8009698:	b21b      	sxth	r3, r3
 800969a:	e00a      	b.n	80096b2 <lv_draw_letter+0x21e>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3301      	adds	r3, #1
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	b21b      	sxth	r3, r3
 80096b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096ba:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80096be:	429a      	cmp	r2, r3
 80096c0:	da09      	bge.n	80096d6 <lv_draw_letter+0x242>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	b21b      	sxth	r3, r3
 80096d4:	e000      	b.n	80096d8 <lv_draw_letter+0x244>
 80096d6:	2300      	movs	r3, #0
 80096d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80096da:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80096de:	7dfa      	ldrb	r2, [r7, #23]
 80096e0:	4413      	add	r3, r2
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80096e8:	4293      	cmp	r3, r2
 80096ea:	dc02      	bgt.n	80096f2 <lv_draw_letter+0x25e>
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	b21b      	sxth	r3, r3
 80096f0:	e00a      	b.n	8009708 <lv_draw_letter+0x274>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	3301      	adds	r3, #1
 8009704:	b29b      	uxth	r3, r3
 8009706:	b21b      	sxth	r3, r3
 8009708:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800970a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800970e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009710:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800971a:	fb02 f203 	mul.w	r2, r2, r3
 800971e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8009722:	4413      	add	r3, r2
 8009724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009726:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009730:	4413      	add	r3, r2
 8009732:	663b      	str	r3, [r7, #96]	; 0x60

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8009734:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009738:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800973c:	fb02 f203 	mul.w	r2, r2, r3
 8009740:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009744:	4413      	add	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800974a:	4413      	add	r3, r2
 800974c:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800974e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009752:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009756:	fb02 f203 	mul.w	r2, r2, r3
 800975a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800975e:	7eb9      	ldrb	r1, [r7, #26]
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
    map_p += bit_ofs >> 3;
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	08db      	lsrs	r3, r3, #3
 800976c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800976e:	4413      	add	r3, r2
 8009770:	667b      	str	r3, [r7, #100]	; 0x64

    uint8_t letter_px;
    lv_opa_t px_opa;
    uint16_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	b29b      	uxth	r3, r3
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    bool scr_transp = false;
 800977e:	2300      	movs	r3, #0
 8009780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    for(row = row_start; row < row_end; row++) {
 8009784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009786:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800978a:	e114      	b.n	80099b6 <lv_draw_letter+0x522>
        bitmask = bitmask_init >> col_bit;
 800978c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8009790:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009794:	fa42 f303 	asr.w	r3, r2, r3
 8009798:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        for(col = col_start; col < col_end; col++) {
 800979c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80097a0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80097a4:	e0cc      	b.n	8009940 <lv_draw_letter+0x4ac>
 80097a6:	bf00      	nop
 80097a8:	08029c94 	.word	0x08029c94
 80097ac:	08029c98 	.word	0x08029c98
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 80097b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80097b8:	4013      	ands	r3, r2
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80097c2:	f1c3 0308 	rsb	r3, r3, #8
 80097c6:	7eb9      	ldrb	r1, [r7, #26]
 80097c8:	1a5b      	subs	r3, r3, r1
 80097ca:	fa42 f303 	asr.w	r3, r2, r3
 80097ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            if(letter_px != 0) {
 80097d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 8089 	beq.w	80098ee <lv_draw_letter+0x45a>
                if(opa == LV_OPA_COVER) {
 80097dc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80097e0:	2bff      	cmp	r3, #255	; 0xff
 80097e2:	d10d      	bne.n	8009800 <lv_draw_letter+0x36c>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80097e4:	7ebb      	ldrb	r3, [r7, #26]
 80097e6:	2b08      	cmp	r3, #8
 80097e8:	d005      	beq.n	80097f6 <lv_draw_letter+0x362>
 80097ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097f0:	4413      	add	r3, r2
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	e001      	b.n	80097fa <lv_draw_letter+0x366>
 80097f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097fa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80097fe:	e020      	b.n	8009842 <lv_draw_letter+0x3ae>
                } else {
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8009800:	7ebb      	ldrb	r3, [r7, #26]
 8009802:	2b08      	cmp	r3, #8
 8009804:	d10c      	bne.n	8009820 <lv_draw_letter+0x38c>
 8009806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800980a:	b29a      	uxth	r2, r3
 800980c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009810:	b29b      	uxth	r3, r3
 8009812:	fb12 f303 	smulbb	r3, r2, r3
 8009816:	b29b      	uxth	r3, r3
 8009818:	0a1b      	lsrs	r3, r3, #8
 800981a:	b29b      	uxth	r3, r3
 800981c:	b2db      	uxtb	r3, r3
 800981e:	e00e      	b.n	800983e <lv_draw_letter+0x3aa>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8009820:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009826:	4413      	add	r3, r2
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	b29a      	uxth	r2, r3
 800982c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009830:	b29b      	uxth	r3, r3
 8009832:	fb12 f303 	smulbb	r3, r2, r3
 8009836:	b29b      	uxth	r3, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	b29b      	uxth	r3, r3
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                }

                if(disp->driver.set_px_cb) {
 8009842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02c      	beq.n	80098a4 <lv_draw_letter+0x410>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	695c      	ldr	r4, [r3, #20]
 800984e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009852:	6899      	ldr	r1, [r3, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8009854:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009858:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800985c:	4413      	add	r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009862:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009866:	b29b      	uxth	r3, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800986c:	b21e      	sxth	r6, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800986e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009872:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009876:	4413      	add	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009880:	b29b      	uxth	r3, r3
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8009886:	b21b      	sxth	r3, r3
 8009888:	f9b7 5046 	ldrsh.w	r5, [r7, #70]	; 0x46
 800988c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8009890:	9202      	str	r2, [sp, #8]
 8009892:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8009896:	f8ad 2004 	strh.w	r2, [sp, #4]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4633      	mov	r3, r6
 800989e:	462a      	mov	r2, r5
 80098a0:	47a0      	blx	r4
 80098a2:	e024      	b.n	80098ee <lv_draw_letter+0x45a>
                } else if(vdb_buf_tmp->full != color.full) {
 80098a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098a6:	881a      	ldrh	r2, [r3, #0]
 80098a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d01e      	beq.n	80098ee <lv_draw_letter+0x45a>
                    if(px_opa > LV_OPA_MAX)
 80098b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80098b4:	2bfb      	cmp	r3, #251	; 0xfb
 80098b6:	d904      	bls.n	80098c2 <lv_draw_letter+0x42e>
                        *vdb_buf_tmp = color;
 80098b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ba:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	e015      	b.n	80098ee <lv_draw_letter+0x45a>
                    else if(px_opa > LV_OPA_MIN) {
 80098c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d911      	bls.n	80098ee <lv_draw_letter+0x45a>
                        if(scr_transp == false) {
 80098ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ce:	f083 0301 	eor.w	r3, r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <lv_draw_letter+0x45a>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 80098d8:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80098dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098de:	8819      	ldrh	r1, [r3, #0]
 80098e0:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 80098e4:	f7ff fc1e 	bl	8009124 <lv_color_mix>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ec:	801a      	strh	r2, [r3, #0]
                        }
                    }
                }
            }

            vdb_buf_tmp++;
 80098ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f0:	3302      	adds	r3, #2
 80098f2:	663b      	str	r3, [r7, #96]	; 0x60

            if(col_bit < 8 - g.bpp) {
 80098f4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80098f8:	7ebb      	ldrb	r3, [r7, #26]
 80098fa:	f1c3 0308 	rsb	r3, r3, #8
 80098fe:	429a      	cmp	r2, r3
 8009900:	da0d      	bge.n	800991e <lv_draw_letter+0x48a>
                col_bit += g.bpp;
 8009902:	7ebb      	ldrb	r3, [r7, #26]
 8009904:	b29a      	uxth	r2, r3
 8009906:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800990a:	4413      	add	r3, r2
 800990c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask >> g.bpp;
 8009910:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8009914:	7eba      	ldrb	r2, [r7, #26]
 8009916:	4113      	asrs	r3, r2
 8009918:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800991c:	e009      	b.n	8009932 <lv_draw_letter+0x49e>
            } else {
                col_bit = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                bitmask = bitmask_init;
 8009924:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8009928:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                map_p++;
 800992c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800992e:	3301      	adds	r3, #1
 8009930:	667b      	str	r3, [r7, #100]	; 0x64
        for(col = col_start; col < col_end; col++) {
 8009932:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8009936:	b29b      	uxth	r3, r3
 8009938:	3301      	adds	r3, #1
 800993a:	b29b      	uxth	r3, r3
 800993c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009940:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8009944:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8009948:	429a      	cmp	r2, r3
 800994a:	f6ff af31 	blt.w	80097b0 <lv_draw_letter+0x31c>
            }
        }
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800994e:	7dbb      	ldrb	r3, [r7, #22]
 8009950:	461a      	mov	r2, r3
 8009952:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8009956:	1ad2      	subs	r2, r2, r3
 8009958:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800995c:	4413      	add	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	7ebb      	ldrb	r3, [r7, #26]
 8009962:	b29b      	uxth	r3, r3
 8009964:	fb12 f303 	smulbb	r3, r2, r3
 8009968:	b29a      	uxth	r2, r3
 800996a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800996e:	4413      	add	r3, r2
 8009970:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        map_p += (col_bit >> 3);
 8009974:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009978:	08db      	lsrs	r3, r3, #3
 800997a:	b29b      	uxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009980:	4413      	add	r3, r2
 8009982:	667b      	str	r3, [r7, #100]	; 0x64
        col_bit = col_bit & 0x7;
 8009984:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009988:	f003 0307 	and.w	r3, r3, #7
 800998c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8009990:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009994:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8009998:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800999c:	1acb      	subs	r3, r1, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099a4:	4413      	add	r3, r2
 80099a6:	663b      	str	r3, [r7, #96]	; 0x60
    for(row = row_start; row < row_end; row++) {
 80099a8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	3301      	adds	r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80099b6:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80099ba:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80099be:	429a      	cmp	r2, r3
 80099c0:	f6ff aee4 	blt.w	800978c <lv_draw_letter+0x2f8>
 80099c4:	e00a      	b.n	80099dc <lv_draw_letter+0x548>
    if(opa < LV_OPA_MIN) return;
 80099c6:	bf00      	nop
 80099c8:	e008      	b.n	80099dc <lv_draw_letter+0x548>
        return;
 80099ca:	bf00      	nop
 80099cc:	e006      	b.n	80099dc <lv_draw_letter+0x548>
    if(g_ret == false) return;
 80099ce:	bf00      	nop
 80099d0:	e004      	b.n	80099dc <lv_draw_letter+0x548>
        default: return; /*Invalid bpp. Can't render the letter*/
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <lv_draw_letter+0x548>
    if(map_p == NULL) return;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <lv_draw_letter+0x548>
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80099da:	bf00      	nop
    }
}
 80099dc:	3774      	adds	r7, #116	; 0x74
 80099de:	46bd      	mov	sp, r7
 80099e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e2:	bf00      	nop

080099e4 <lv_draw_map>:
 * @param recolor mix the pixels with this color
 * @param recolor_opa the intense of recoloring
 */
void lv_draw_map(const lv_area_t * cords_p, const lv_area_t * mask_p, const uint8_t * map_p, lv_opa_t opa,
                 bool chroma_key, bool alpha_byte, lv_color_t recolor, lv_opa_t recolor_opa)
{
 80099e4:	b5b0      	push	{r4, r5, r7, lr}
 80099e6:	b098      	sub	sp, #96	; 0x60
 80099e8:	af04      	add	r7, sp, #16
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	70fb      	strb	r3, [r7, #3]

    if(opa < LV_OPA_MIN) return;
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	2b0f      	cmp	r3, #15
 80099f6:	f240 825c 	bls.w	8009eb2 <lv_draw_map+0x4ce>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	2bfb      	cmp	r3, #251	; 0xfb
 80099fe:	d901      	bls.n	8009a04 <lv_draw_map+0x20>
 8009a00:	23ff      	movs	r3, #255	; 0xff
 8009a02:	70fb      	strb	r3, [r7, #3]
    bool union_ok;

    /*Get the union of map size and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8009a04:	f107 0320 	add.w	r3, r7, #32
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f009 f9c1 	bl	8012d94 <lv_area_intersect>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) return;
 8009a18:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009a1c:	f083 0301 	eor.w	r3, r3, #1
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 8247 	bne.w	8009eb6 <lv_draw_map+0x4d2>

    /*The pixel size in byte is different if an alpha byte is added too*/
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009a28:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <lv_draw_map+0x50>
 8009a30:	2303      	movs	r3, #3
 8009a32:	e000      	b.n	8009a36 <lv_draw_map+0x52>
 8009a34:	2302      	movs	r3, #2
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    /*If the map starts OUT of the masked area then calc. the first pixel*/
    lv_coord_t map_width = lv_area_get_width(cords_p);
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fc02 	bl	8009244 <lv_area_get_width>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if(cords_p->y1 < masked_a.y1) {
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009a4c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009a50:	429a      	cmp	r2, r3
 8009a52:	da11      	bge.n	8009a78 <lv_draw_map+0x94>
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8009a54:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009a58:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009a64:	1a8a      	subs	r2, r1, r2
 8009a66:	fb02 f303 	mul.w	r3, r2, r3
 8009a6a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	4413      	add	r3, r2
 8009a76:	607b      	str	r3, [r7, #4]
    }
    if(cords_p->x1 < masked_a.x1) {
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	da0e      	bge.n	8009aa4 <lv_draw_map+0xc0>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8009a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009a98:	fb02 f303 	mul.w	r3, r2, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	607b      	str	r3, [r7, #4]
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8009aa4:	f7fd fefa 	bl	800789c <lv_refr_get_disp_refreshing>
 8009aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009aaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009aac:	f008 fdf2 	bl	8012694 <lv_disp_get_buf>
 8009ab0:	63b8      	str	r0, [r7, #56]	; 0x38

    /*Stores coordinates relative to the current VDB*/
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8009ab2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	b21b      	sxth	r3, r3
 8009ac6:	843b      	strh	r3, [r7, #32]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8009ac8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	b21b      	sxth	r3, r3
 8009adc:	847b      	strh	r3, [r7, #34]	; 0x22
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8009ade:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	b21b      	sxth	r3, r3
 8009af2:	84bb      	strh	r3, [r7, #36]	; 0x24
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8009af4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	b21b      	sxth	r3, r3
 8009b08:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	3310      	adds	r3, #16
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff fb98 	bl	8009244 <lv_area_get_width>
 8009b14:	4603      	mov	r3, r0
 8009b16:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 8009b1e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009b22:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009b26:	fb02 f303 	mul.w	r3, r2, r3
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b2e:	4413      	add	r3, r2
 8009b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8009b32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b3a:	4413      	add	r3, r2
 8009b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

    lv_coord_t row;
    lv_coord_t map_useful_w = lv_area_get_width(&masked_a);
 8009b3e:	f107 0320 	add.w	r3, r7, #32
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fb7e 	bl	8009244 <lv_area_get_width>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	86bb      	strh	r3, [r7, #52]	; 0x34

    bool scr_transp = false;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    /*The simplest case just copy the pixels into the VDB*/
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8009b52:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009b56:	f083 0301 	eor.w	r3, r3, #1
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 808d 	beq.w	8009c7c <lv_draw_map+0x298>
 8009b62:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009b66:	f083 0301 	eor.w	r3, r3, #1
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8085 	beq.w	8009c7c <lv_draw_map+0x298>
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	2bff      	cmp	r3, #255	; 0xff
 8009b76:	f040 8081 	bne.w	8009c7c <lv_draw_map+0x298>
 8009b7a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d17c      	bne.n	8009c7c <lv_draw_map+0x298>

        /*Use the custom VDB write function is exists*/
        if(disp->driver.set_px_cb) {
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d04f      	beq.n	8009c2a <lv_draw_map+0x246>
            lv_coord_t col;
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009b90:	e044      	b.n	8009c1c <lv_draw_map+0x238>
                for(col = 0; col < map_useful_w; col++) {
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009b98:	e029      	b.n	8009bee <lv_draw_map+0x20a>
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8009b9a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8009b9e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	83bb      	strh	r3, [r7, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8009bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb0:	695c      	ldr	r4, [r3, #20]
 8009bb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	6899      	ldr	r1, [r3, #8]
 8009bb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009bc2:	4413      	add	r3, r2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	b21d      	sxth	r5, r3
 8009bc8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	9302      	str	r3, [sp, #8]
 8009bd0:	8bbb      	ldrh	r3, [r7, #28]
 8009bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009bd6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462b      	mov	r3, r5
 8009bde:	47a0      	blx	r4
                for(col = 0; col < map_useful_w; col++) {
 8009be0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	3301      	adds	r3, #1
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009bee:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8009bf2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	dbcf      	blt.n	8009b9a <lv_draw_map+0x1b6>
                                           px_color, opa);
                }
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8009bfa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009bfe:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009c02:	fb02 f303 	mul.w	r3, r2, r3
 8009c06:	461a      	mov	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	607b      	str	r3, [r7, #4]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c0e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	3301      	adds	r3, #1
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009c20:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009c24:	429a      	cmp	r2, r3
 8009c26:	ddb4      	ble.n	8009b92 <lv_draw_map+0x1ae>
        if(disp->driver.set_px_cb) {
 8009c28:	e146      	b.n	8009eb8 <lv_draw_map+0x4d4>
            }
        }
        /*Normal native VDB*/
        else {
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c30:	e01d      	b.n	8009c6e <lv_draw_map+0x28a>
                    sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                } else {
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
                }
#else
                sw_mem_blend(vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 8009c32:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c3c:	f000 f93f 	bl	8009ebe <sw_mem_blend>
#endif
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8009c40:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009c44:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009c48:	fb02 f303 	mul.w	r3, r2, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4413      	add	r3, r2
 8009c52:	607b      	str	r3, [r7, #4]
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009c54:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c5c:	4413      	add	r3, r2
 8009c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c60:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3301      	adds	r3, #1
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009c72:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009c76:	429a      	cmp	r2, r3
 8009c78:	dddb      	ble.n	8009c32 <lv_draw_map+0x24e>
        if(disp->driver.set_px_cb) {
 8009c7a:	e11d      	b.n	8009eb8 <lv_draw_map+0x4d4>

    /*In the other cases every pixel need to be checked one-by-one*/
    else {

        lv_coord_t col;
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	833b      	strh	r3, [r7, #24]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009c80:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009c84:	461a      	mov	r2, r3
 8009c86:	8b39      	ldrh	r1, [r7, #24]
 8009c88:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 8009c8c:	f7ff fa4a 	bl	8009124 <lv_color_mix>
 8009c90:	4603      	mov	r3, r0
 8009c92:	82bb      	strh	r3, [r7, #20]
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c9a:	e102      	b.n	8009ea2 <lv_draw_map+0x4be>
            for(col = 0; col < map_useful_w; col++) {
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009ca2:	e0e0      	b.n	8009e66 <lv_draw_map+0x482>
                lv_opa_t opa_result  = opa;
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                uint8_t * px_color_p = (uint8_t *)&map_p[(uint32_t)col * px_size_byte];
 8009caa:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009cae:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4413      	add	r3, r2
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
                lv_color_t px_color;

                /*Calculate with the pixel level alpha*/
                if(alpha_byte) {
 8009cbc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d022      	beq.n	8009d0a <lv_draw_map+0x326>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                    px_color.full = px_color_p[0];
#elif LV_COLOR_DEPTH == 16
                    /*Because of Alpha byte 16 bit color can start on odd address which can cause
                     * crash*/
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	3301      	adds	r3, #1
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	823b      	strh	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 32
                    px_color = *((lv_color_t *)px_color_p);
#endif
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	789b      	ldrb	r3, [r3, #2]
 8009ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    if(px_opa == LV_OPA_TRANSP)
 8009ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 80b2 	beq.w	8009e52 <lv_draw_map+0x46e>
                        continue;
                    else if(px_opa != LV_OPA_COVER)
 8009cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cf2:	2bff      	cmp	r3, #255	; 0xff
 8009cf4:	d00c      	beq.n	8009d10 <lv_draw_map+0x32c>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8009cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cfa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009d08:	e002      	b.n	8009d10 <lv_draw_map+0x32c>
                } else {
                    px_color = *((lv_color_t *)px_color_p);
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	823b      	strh	r3, [r7, #16]
                }

                /*Handle chroma key*/
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8009d10:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <lv_draw_map+0x340>
 8009d18:	8a3a      	ldrh	r2, [r7, #16]
 8009d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1c:	8b9b      	ldrh	r3, [r3, #28]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	f000 8099 	beq.w	8009e56 <lv_draw_map+0x472>

                /*Re-color the pixel if required*/
                if(recolor_opa != LV_OPA_TRANSP) {
 8009d24:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d04d      	beq.n	8009dc8 <lv_draw_map+0x3e4>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8009d2c:	8b3a      	ldrh	r2, [r7, #24]
 8009d2e:	8a3b      	ldrh	r3, [r7, #16]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d00b      	beq.n	8009d4c <lv_draw_map+0x368>
                                                               new colors (save the last)*/
                        last_img_px  = px_color;
 8009d34:	8a3b      	ldrh	r3, [r7, #16]
 8009d36:	833b      	strh	r3, [r7, #24]
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009d38:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	8b39      	ldrh	r1, [r7, #24]
 8009d40:	f8b7 0068 	ldrh.w	r0, [r7, #104]	; 0x68
 8009d44:	f7ff f9ee 	bl	8009124 <lv_color_mix>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	82bb      	strh	r3, [r7, #20]
                    }
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 8009d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01a      	beq.n	8009d8a <lv_draw_map+0x3a6>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8009d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d56:	695c      	ldr	r4, [r3, #20]
 8009d58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	6899      	ldr	r1, [r3, #8]
 8009d5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d68:	4413      	add	r3, r2
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	b21d      	sxth	r5, r3
 8009d6e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009d72:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009d76:	9302      	str	r3, [sp, #8]
 8009d78:	8abb      	ldrh	r3, [r7, #20]
 8009d7a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009d7e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	462b      	mov	r3, r5
 8009d86:	47a0      	blx	r4
 8009d88:	e066      	b.n	8009e58 <lv_draw_map+0x474>
                                               row, recolored_px, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {
                        if(opa_result == LV_OPA_COVER)
 8009d8a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009d8e:	2bff      	cmp	r3, #255	; 0xff
 8009d90:	d107      	bne.n	8009da2 <lv_draw_map+0x3be>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8009d92:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d9a:	4413      	add	r3, r2
 8009d9c:	8aba      	ldrh	r2, [r7, #20]
 8009d9e:	801a      	strh	r2, [r3, #0]
 8009da0:	e05a      	b.n	8009e58 <lv_draw_map+0x474>
                        else
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8009da2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009daa:	4413      	add	r3, r2
 8009dac:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009db0:	0052      	lsls	r2, r2, #1
 8009db2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009db4:	188c      	adds	r4, r1, r2
 8009db6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009dba:	8819      	ldrh	r1, [r3, #0]
 8009dbc:	8ab8      	ldrh	r0, [r7, #20]
 8009dbe:	f7ff f9b1 	bl	8009124 <lv_color_mix>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	8023      	strh	r3, [r4, #0]
 8009dc6:	e047      	b.n	8009e58 <lv_draw_map+0x474>
                    }
                } else {
                    /*Handle custom VDB write is present*/
                    if(disp->driver.set_px_cb) {
 8009dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01a      	beq.n	8009e06 <lv_draw_map+0x422>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	695c      	ldr	r4, [r3, #20]
 8009dd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	6899      	ldr	r1, [r3, #8]
 8009dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009de4:	4413      	add	r3, r2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	b21d      	sxth	r5, r3
 8009dea:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009dee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	8a3b      	ldrh	r3, [r7, #16]
 8009df6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009dfa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	462b      	mov	r3, r5
 8009e02:	47a0      	blx	r4
 8009e04:	e028      	b.n	8009e58 <lv_draw_map+0x474>
                                               row, px_color, opa_result);
                    }
                    /*Normal native VDB write*/
                    else {

                        if(opa_result == LV_OPA_COVER)
 8009e06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009e0a:	2bff      	cmp	r3, #255	; 0xff
 8009e0c:	d107      	bne.n	8009e1e <lv_draw_map+0x43a>
                            vdb_buf_tmp[col] = px_color;
 8009e0e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e16:	4413      	add	r3, r2
 8009e18:	8a3a      	ldrh	r2, [r7, #16]
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e01c      	b.n	8009e58 <lv_draw_map+0x474>
                        else {
                            if(scr_transp == false) {
 8009e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e22:	f083 0301 	eor.w	r3, r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d015      	beq.n	8009e58 <lv_draw_map+0x474>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8009e2c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e34:	4413      	add	r3, r2
 8009e36:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009e3a:	0052      	lsls	r2, r2, #1
 8009e3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e3e:	188c      	adds	r4, r1, r2
 8009e40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009e44:	8819      	ldrh	r1, [r3, #0]
 8009e46:	8a38      	ldrh	r0, [r7, #16]
 8009e48:	f7ff f96c 	bl	8009124 <lv_color_mix>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	8023      	strh	r3, [r4, #0]
 8009e50:	e002      	b.n	8009e58 <lv_draw_map+0x474>
                        continue;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <lv_draw_map+0x474>
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8009e56:	bf00      	nop
            for(col = 0; col < map_useful_w; col++) {
 8009e58:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009e66:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8009e6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	f6ff af18 	blt.w	8009ca4 <lv_draw_map+0x2c0>
                        }
                    }
                }
            }

            map_p += map_width * px_size_byte; /*Next row on the map*/
 8009e74:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8009e78:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009e7c:	fb02 f303 	mul.w	r3, r2, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	607b      	str	r3, [r7, #4]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009e88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e90:	4413      	add	r3, r2
 8009e92:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8009e94:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ea2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ea6:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	f77f aef6 	ble.w	8009c9c <lv_draw_map+0x2b8>
 8009eb0:	e002      	b.n	8009eb8 <lv_draw_map+0x4d4>
    if(opa < LV_OPA_MIN) return;
 8009eb2:	bf00      	nop
 8009eb4:	e000      	b.n	8009eb8 <lv_draw_map+0x4d4>
    if(union_ok == false) return;
 8009eb6:	bf00      	nop
        }
    }
}
 8009eb8:	3750      	adds	r7, #80	; 0x50
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bdb0      	pop	{r4, r5, r7, pc}

08009ebe <sw_mem_blend>:
 * @param src pointer to pixel map. Copy it to 'dest'.
 * @param length number of pixels in 'src'
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_mem_blend(lv_color_t * dest, const lv_color_t * src, uint32_t length, lv_opa_t opa)
{
 8009ebe:	b590      	push	{r4, r7, lr}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	70fb      	strb	r3, [r7, #3]
    if(opa == LV_OPA_COVER) {
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	2bff      	cmp	r3, #255	; 0xff
 8009ed0:	d107      	bne.n	8009ee2 <sw_mem_blend+0x24>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f01d f9a2 	bl	8027224 <memcpy>
        uint32_t col;
        for(col = 0; col < length; col++) {
            dest[col] = lv_color_mix(src[col], dest[col], opa);
        }
    }
}
 8009ee0:	e01c      	b.n	8009f1c <sw_mem_blend+0x5e>
        for(col = 0; col < length; col++) {
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e015      	b.n	8009f14 <sw_mem_blend+0x56>
            dest[col] = lv_color_mix(src[col], dest[col], opa);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	4413      	add	r3, r2
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	0052      	lsls	r2, r2, #1
 8009ef4:	68f9      	ldr	r1, [r7, #12]
 8009ef6:	4411      	add	r1, r2
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	0052      	lsls	r2, r2, #1
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	1884      	adds	r4, r0, r2
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	8809      	ldrh	r1, [r1, #0]
 8009f04:	8818      	ldrh	r0, [r3, #0]
 8009f06:	f7ff f90d 	bl	8009124 <lv_color_mix>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	8023      	strh	r3, [r4, #0]
        for(col = 0; col < length; col++) {
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	3301      	adds	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d3e5      	bcc.n	8009ee8 <sw_mem_blend+0x2a>
}
 8009f1c:	bf00      	nop
 8009f1e:	371c      	adds	r7, #28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd90      	pop	{r4, r7, pc}

08009f24 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b08f      	sub	sp, #60	; 0x3c
 8009f28:	af04      	add	r7, sp, #16
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	813b      	strh	r3, [r7, #8]
 8009f30:	460b      	mov	r3, r1
 8009f32:	817b      	strh	r3, [r7, #10]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8009f34:	f7fd fcb2 	bl	800789c <lv_refr_get_disp_refreshing>
 8009f38:	6238      	str	r0, [r7, #32]
    if(disp->driver.set_px_cb) {
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d035      	beq.n	8009fae <sw_color_fill+0x8a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f48:	e029      	b.n	8009f9e <sw_color_fill+0x7a>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	885b      	ldrh	r3, [r3, #2]
 8009f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f50:	e018      	b.n	8009f84 <sw_color_fill+0x60>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	695c      	ldr	r4, [r3, #20]
 8009f56:	6a38      	ldr	r0, [r7, #32]
 8009f58:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8009f5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009f60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009f64:	9302      	str	r3, [sp, #8]
 8009f66:	893b      	ldrh	r3, [r7, #8]
 8009f68:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009f6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	460b      	mov	r3, r1
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	47a0      	blx	r4
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009f78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	3301      	adds	r3, #1
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009f8a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	dddf      	ble.n	8009f52 <sw_color_fill+0x2e>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009f92:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	3301      	adds	r3, #1
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009fa4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	ddce      	ble.n	8009f4a <sw_color_fill+0x26>
                }
                mem += mem_width;
            }
        }
    }
}
 8009fac:	e0c4      	b.n	800a138 <sw_color_fill+0x214>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009fba:	fb03 f302 	mul.w	r3, r3, r2
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
        if(opa == LV_OPA_COVER) {
 8009fc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009fca:	2bff      	cmp	r3, #255	; 0xff
 8009fcc:	d159      	bne.n	800a082 <sw_color_fill+0x15e>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009fd4:	e00c      	b.n	8009ff0 <sw_color_fill+0xcc>
                mem[col] = color;
 8009fd6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4413      	add	r3, r2
 8009fe0:	893a      	ldrh	r2, [r7, #8]
 8009fe2:	801a      	strh	r2, [r3, #0]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009fe4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	3301      	adds	r3, #1
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ff6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	ddeb      	ble.n	8009fd6 <sw_color_fill+0xb2>
            lv_color_t * mem_first = &mem[fill_area->x1];
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	61bb      	str	r3, [r7, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a012:	461a      	mov	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	3301      	adds	r3, #1
 800a01e:	b29b      	uxth	r3, r3
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	b29b      	uxth	r3, r3
 800a024:	82fb      	strh	r3, [r7, #22]
            mem += mem_width;
 800a026:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3301      	adds	r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a040:	e017      	b.n	800a072 <sw_color_fill+0x14e>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a052:	69b9      	ldr	r1, [r7, #24]
 800a054:	4618      	mov	r0, r3
 800a056:	f01d f8e5 	bl	8027224 <memcpy>
                mem += mem_width;
 800a05a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a066:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	3301      	adds	r3, #1
 800a06e:	b29b      	uxth	r3, r3
 800a070:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a078:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a07c:	429a      	cmp	r2, r3
 800a07e:	dde0      	ble.n	800a042 <sw_color_fill+0x11e>
}
 800a080:	e05a      	b.n	800a138 <sw_color_fill+0x214>
            bool scr_transp = false;
 800a082:	2300      	movs	r3, #0
 800a084:	77fb      	strb	r3, [r7, #31]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800a086:	2300      	movs	r3, #0
 800a088:	82bb      	strh	r3, [r7, #20]
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a08a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a08e:	461a      	mov	r2, r3
 800a090:	8ab9      	ldrh	r1, [r7, #20]
 800a092:	8938      	ldrh	r0, [r7, #8]
 800a094:	f7ff f846 	bl	8009124 <lv_color_mix>
 800a098:	4603      	mov	r3, r0
 800a09a:	823b      	strh	r3, [r7, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	885b      	ldrh	r3, [r3, #2]
 800a0a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0a2:	e042      	b.n	800a12a <sw_color_fill+0x206>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0aa:	e02b      	b.n	800a104 <sw_color_fill+0x1e0>
                    if(scr_transp == false) {
 800a0ac:	7ffb      	ldrb	r3, [r7, #31]
 800a0ae:	f083 0301 	eor.w	r3, r3, #1
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01f      	beq.n	800a0f8 <sw_color_fill+0x1d4>
                        if(mem[col].full != bg_tmp.full) {
 800a0b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881a      	ldrh	r2, [r3, #0]
 800a0c4:	8abb      	ldrh	r3, [r7, #20]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d00f      	beq.n	800a0ea <sw_color_fill+0x1c6>
                            bg_tmp  = mem[col];
 800a0ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	82bb      	strh	r3, [r7, #20]
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a0d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a0dc:	461a      	mov	r2, r3
 800a0de:	8ab9      	ldrh	r1, [r7, #20]
 800a0e0:	8938      	ldrh	r0, [r7, #8]
 800a0e2:	f7ff f81f 	bl	8009124 <lv_color_mix>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	823b      	strh	r3, [r7, #16]
                        mem[col] = opa_tmp;
 800a0ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	8a3a      	ldrh	r2, [r7, #16]
 800a0f6:	801a      	strh	r2, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a0f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3301      	adds	r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a10a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a10e:	429a      	cmp	r2, r3
 800a110:	ddcc      	ble.n	800a0ac <sw_color_fill+0x188>
                mem += mem_width;
 800a112:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a11e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a122:	b29b      	uxth	r3, r3
 800a124:	3301      	adds	r3, #1
 800a126:	b29b      	uxth	r3, r3
 800a128:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a130:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a134:	429a      	cmp	r2, r3
 800a136:	ddb5      	ble.n	800a0a4 <sw_color_fill+0x180>
}
 800a138:	bf00      	nop
 800a13a:	372c      	adds	r7, #44	; 0x2c
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd90      	pop	{r4, r7, pc}

0800a140 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800a14a:	2208      	movs	r2, #8
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f01d f868 	bl	8027224 <memcpy>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a172:	b29b      	uxth	r3, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	3301      	adds	r3, #1
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	b21b      	sxth	r3, r3
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <lv_draw_img>:
 * @param style style of the image
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_style_t * style,
                 lv_opa_t opa_scale)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af06      	add	r7, sp, #24
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d11a      	bne.n	800a1d6 <lv_draw_img+0x4a>
        LV_LOG_WARN("Image draw: src is NULL");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a1a0:	23ff      	movs	r3, #255	; 0xff
 800a1a2:	4a23      	ldr	r2, [pc, #140]	; (800a230 <lv_draw_img+0xa4>)
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f002 fd21 	bl	800cbee <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	4b1b      	ldr	r3, [pc, #108]	; (800a234 <lv_draw_img+0xa8>)
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	23ff      	movs	r3, #255	; 0xff
 800a1ca:	4a19      	ldr	r2, [pc, #100]	; (800a230 <lv_draw_img+0xa4>)
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fa74 	bl	800a6bc <lv_draw_label>
        return;
 800a1d4:	e028      	b.n	800a228 <lv_draw_img+0x9c>
    }

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, style, opa_scale);
 800a1d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f8f0 	bl	800a3c8 <lv_img_draw_core>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d11a      	bne.n	800a228 <lv_draw_img+0x9c>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a1f2:	23ff      	movs	r3, #255	; 0xff
 800a1f4:	4a0e      	ldr	r2, [pc, #56]	; (800a230 <lv_draw_img+0xa4>)
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f002 fcf8 	bl	800cbee <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800a1fe:	2300      	movs	r3, #0
 800a200:	9305      	str	r3, [sp, #20]
 800a202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a20c:	9303      	str	r3, [sp, #12]
 800a20e:	2300      	movs	r3, #0
 800a210:	9302      	str	r3, [sp, #8]
 800a212:	2300      	movs	r3, #0
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <lv_draw_img+0xa8>)
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	23ff      	movs	r3, #255	; 0xff
 800a21c:	4a04      	ldr	r2, [pc, #16]	; (800a230 <lv_draw_img+0xa4>)
 800a21e:	68b9      	ldr	r1, [r7, #8]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fa4b 	bl	800a6bc <lv_draw_label>
        return;
 800a226:	bf00      	nop
    }
}
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20006c74 	.word	0x20006c74
 800a234:	08029ca8 	.word	0x08029ca8

0800a238 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	2b0e      	cmp	r3, #14
 800a24a:	d836      	bhi.n	800a2ba <lv_img_color_format_get_px_size+0x82>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <lv_img_color_format_get_px_size+0x1c>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a291 	.word	0x0800a291
 800a258:	0800a291 	.word	0x0800a291
 800a25c:	0800a2bb 	.word	0x0800a2bb
 800a260:	0800a2bb 	.word	0x0800a2bb
 800a264:	0800a297 	.word	0x0800a297
 800a268:	0800a29d 	.word	0x0800a29d
 800a26c:	0800a297 	.word	0x0800a297
 800a270:	0800a2a3 	.word	0x0800a2a3
 800a274:	0800a2a9 	.word	0x0800a2a9
 800a278:	0800a2af 	.word	0x0800a2af
 800a27c:	0800a2b5 	.word	0x0800a2b5
 800a280:	0800a2a3 	.word	0x0800a2a3
 800a284:	0800a2a9 	.word	0x0800a2a9
 800a288:	0800a2af 	.word	0x0800a2af
 800a28c:	0800a2b5 	.word	0x0800a2b5
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
 800a294:	e014      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 800a296:	2310      	movs	r3, #16
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	e011      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 800a29c:	2318      	movs	r3, #24
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	e00e      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	e00b      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e008      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	73fb      	strb	r3, [r7, #15]
 800a2b2:	e005      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	73fb      	strb	r3, [r7, #15]
 800a2b8:	e002      	b.n	800a2c0 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
 800a2be:	bf00      	nop
    }

    return px_size;
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop

0800a2d0 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d004      	beq.n	800a2ee <lv_img_color_format_is_chroma_keyed+0x1e>
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	db05      	blt.n	800a2f4 <lv_img_color_format_is_chroma_keyed+0x24>
 800a2e8:	3b06      	subs	r3, #6
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	d802      	bhi.n	800a2f4 <lv_img_color_format_is_chroma_keyed+0x24>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	73fb      	strb	r3, [r7, #15]
 800a2f2:	e002      	b.n	800a2fa <lv_img_color_format_is_chroma_keyed+0x2a>
        default: is_chroma_keyed = false; break;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
 800a2f8:	bf00      	nop
    }

    return is_chroma_keyed;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	3b02      	subs	r3, #2
 800a31a:	2b0c      	cmp	r3, #12
 800a31c:	d81f      	bhi.n	800a35e <lv_img_color_format_has_alpha+0x56>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <lv_img_color_format_has_alpha+0x1c>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a359 	.word	0x0800a359
 800a328:	0800a35f 	.word	0x0800a35f
 800a32c:	0800a35f 	.word	0x0800a35f
 800a330:	0800a359 	.word	0x0800a359
 800a334:	0800a35f 	.word	0x0800a35f
 800a338:	0800a35f 	.word	0x0800a35f
 800a33c:	0800a35f 	.word	0x0800a35f
 800a340:	0800a35f 	.word	0x0800a35f
 800a344:	0800a35f 	.word	0x0800a35f
 800a348:	0800a359 	.word	0x0800a359
 800a34c:	0800a359 	.word	0x0800a359
 800a350:	0800a359 	.word	0x0800a359
 800a354:	0800a359 	.word	0x0800a359
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
 800a358:	2301      	movs	r3, #1
 800a35a:	73fb      	strb	r3, [r7, #15]
 800a35c:	e002      	b.n	800a364 <lv_img_color_format_has_alpha+0x5c>
        default: has_alpha = false; break;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
 800a362:	bf00      	nop
    }

    return has_alpha;
 800a364:	7bfb      	ldrb	r3, [r7, #15]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop

0800a374 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800a37c:	2303      	movs	r3, #3
 800a37e:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <lv_img_src_get_type+0x16>
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	e018      	b.n	800a3bc <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b1f      	cmp	r3, #31
 800a394:	d907      	bls.n	800a3a6 <lv_img_src_get_type+0x32>
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	db02      	blt.n	800a3a6 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
 800a3a4:	e009      	b.n	800a3ba <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	da02      	bge.n	800a3b6 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73fb      	strb	r3, [r7, #15]
 800a3b4:	e001      	b.n	800a3ba <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <lv_img_draw_core>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * mask, const void * src,
                                 const lv_style_t * style, lv_opa_t opa_scale)
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b095      	sub	sp, #84	; 0x54
 800a3cc:	af06      	add	r7, sp, #24
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800a3d6:	f107 0318 	add.w	r3, r7, #24
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f008 fcd8 	bl	8012d94 <lv_area_intersect>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(union_ok == false) {
 800a3ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3ee:	f083 0301 	eor.w	r3, r3, #1
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <lv_img_draw_core+0x34>
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e0fd      	b.n	800a5f8 <lv_img_draw_core+0x230>
                             successfully.*/
    }

    lv_opa_t opa =
 800a3fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a400:	2bff      	cmp	r3, #255	; 0xff
 800a402:	d103      	bne.n	800a40c <lv_img_draw_core+0x44>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a40a:	e00c      	b.n	800a426 <lv_img_draw_core+0x5e>
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a412:	b29a      	uxth	r2, r3
 800a414:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a418:	b29b      	uxth	r3, r3
 800a41a:	fb12 f303 	smulbb	r3, r2, r3
 800a41e:	b29b      	uxth	r3, r3
    lv_opa_t opa =
 800a420:	0a1b      	lsrs	r3, r3, #8
 800a422:	b29b      	uxth	r3, r3
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f006 faf1 	bl	8010a14 <lv_img_cache_open>
 800a432:	62f8      	str	r0, [r7, #44]	; 0x2c

    if(cdsc == NULL) return LV_RES_INV;
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <lv_img_draw_core+0x76>
 800a43a:	2300      	movs	r3, #0
 800a43c:	e0dc      	b.n	800a5f8 <lv_img_draw_core+0x230>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	7c1b      	ldrb	r3, [r3, #16]
 800a442:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a446:	b2db      	uxtb	r3, r3
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff ff41 	bl	800a2d0 <lv_img_color_format_is_chroma_keyed>
 800a44e:	4603      	mov	r3, r0
 800a450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	7c1b      	ldrb	r3, [r3, #16]
 800a458:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff ff52 	bl	800a308 <lv_img_color_format_has_alpha>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01b      	beq.n	800a4aa <lv_img_draw_core+0xe2>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 800a472:	23ff      	movs	r3, #255	; 0xff
 800a474:	4a62      	ldr	r2, [pc, #392]	; (800a600 <lv_img_draw_core+0x238>)
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f002 fbb8 	bl	800cbee <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	2200      	movs	r2, #0
 800a484:	9205      	str	r2, [sp, #20]
 800a486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a48a:	9204      	str	r2, [sp, #16]
 800a48c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a490:	9203      	str	r2, [sp, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	9202      	str	r2, [sp, #8]
 800a496:	2200      	movs	r2, #0
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	23ff      	movs	r3, #255	; 0xff
 800a49e:	4a58      	ldr	r2, [pc, #352]	; (800a600 <lv_img_draw_core+0x238>)
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 f90a 	bl	800a6bc <lv_draw_label>
 800a4a8:	e0a5      	b.n	800a5f6 <lv_img_draw_core+0x22e>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d017      	beq.n	800a4e2 <lv_img_draw_core+0x11a>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	695a      	ldr	r2, [r3, #20]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a4bc:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 800a4c0:	9303      	str	r3, [sp, #12]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a4c6:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a4ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff fa82 	bl	80099e4 <lv_draw_map>
 800a4e0:	e089      	b.n	800a5f6 <lv_img_draw_core+0x22e>
                    style->image.intense);
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);
 800a4e2:	f107 0318 	add.w	r3, r7, #24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fe38 	bl	800a15c <lv_area_get_width>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	853b      	strh	r3, [r7, #40]	; 0x28

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 800a4f0:	f107 0318 	add.w	r3, r7, #24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fe31 	bl	800a15c <lv_area_get_width>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4613      	mov	r3, r2
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	4413      	add	r3, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe f93b 	bl	8008780 <lv_draw_get_buf>
 800a50a:	6278      	str	r0, [r7, #36]	; 0x24

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800a50c:	f107 0218 	add.w	r2, r7, #24
 800a510:	f107 0310 	add.w	r3, r7, #16
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fe12 	bl	800a140 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800a51c:	f107 0310 	add.w	r3, r7, #16
 800a520:	2101      	movs	r1, #1
 800a522:	4618      	mov	r0, r3
 800a524:	f008 fbd5 	bl	8012cd2 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 800a528:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a534:	b29b      	uxth	r3, r3
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	b29b      	uxth	r3, r3
 800a53a:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_coord_t y = mask_com.y1 - coords->y1;
 800a53c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a550:	8b7b      	ldrh	r3, [r7, #26]
 800a552:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a554:	e049      	b.n	800a5ea <lv_img_draw_core+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a558:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800a55c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800a560:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4623      	mov	r3, r4
 800a56a:	f006 fce5 	bl	8010f38 <lv_img_decoder_read_line>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(read_res != LV_RES_OK) {
 800a574:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d005      	beq.n	800a588 <lv_img_draw_core+0x1c0>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	4618      	mov	r0, r3
 800a580:	f006 fd06 	bl	8010f90 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
 800a584:	2300      	movs	r3, #0
 800a586:	e037      	b.n	800a5f8 <lv_img_draw_core+0x230>
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a58e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a592:	f107 0010 	add.w	r0, r7, #16
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a59c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a5a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	f7ff fa17 	bl	80099e4 <lv_draw_map>
            line.y1++;
 800a5b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3301      	adds	r3, #1
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	b21b      	sxth	r3, r3
 800a5c2:	827b      	strh	r3, [r7, #18]
            line.y2++;
 800a5c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	82fb      	strh	r3, [r7, #22]
            y++;
 800a5d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	3301      	adds	r3, #1
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a5de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a5ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5ee:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	ddaf      	ble.n	800a556 <lv_img_draw_core+0x18e>
        }
    }

    return LV_RES_OK;
 800a5f6:	2301      	movs	r3, #1
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	373c      	adds	r7, #60	; 0x3c
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd90      	pop	{r4, r7, pc}
 800a600:	20006c74 	.word	0x20006c74

0800a604 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7a1b      	ldrb	r3, [r3, #8]
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
 800a626:	460b      	mov	r3, r1
 800a628:	71bb      	strb	r3, [r7, #6]
 800a62a:	4613      	mov	r3, r2
 800a62c:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 800a62e:	79bb      	ldrb	r3, [r7, #6]
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0307 	and.w	r3, r3, #7
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	7b3b      	ldrb	r3, [r7, #12]
 800a63c:	f362 0302 	bfi	r3, r2, #0, #3
 800a640:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	08db      	lsrs	r3, r3, #3
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 031f 	and.w	r3, r3, #31
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	7b3b      	ldrb	r3, [r7, #12]
 800a650:	f362 03c7 	bfi	r3, r2, #3, #5
 800a654:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 800a656:	797b      	ldrb	r3, [r7, #5]
 800a658:	08db      	lsrs	r3, r3, #3
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	b2da      	uxtb	r2, r3
 800a662:	7b7b      	ldrb	r3, [r7, #13]
 800a664:	f362 0304 	bfi	r3, r2, #0, #5
 800a668:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 800a66a:	79bb      	ldrb	r3, [r7, #6]
 800a66c:	089b      	lsrs	r3, r3, #2
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	b2da      	uxtb	r2, r3
 800a676:	7b7b      	ldrb	r3, [r7, #13]
 800a678:	f362 1347 	bfi	r3, r2, #5, #3
 800a67c:	737b      	strb	r3, [r7, #13]
    return color;
 800a67e:	89bb      	ldrh	r3, [r7, #12]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <lv_area_get_width>:
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	b21b      	sxth	r3, r3
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
	...

0800a6bc <lv_draw_label>:
 * @param sel_end end index of selected area (`LV_LABEL_TXT_SEL_OFF` if none)
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, uint16_t sel_start, uint16_t sel_end,
                   lv_draw_label_hint_t * hint)
{
 800a6bc:	b590      	push	{r4, r7, lr}
 800a6be:	b0b1      	sub	sp, #196	; 0xc4
 800a6c0:	af04      	add	r7, sp, #16
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	70fb      	strb	r3, [r7, #3]
    const lv_font_t * font = style->text.font;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800a6d2:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <lv_draw_label+0x30>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff ffd4 	bl	800a68c <lv_area_get_width>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800a6ea:	e019      	b.n	800a720 <lv_draw_label+0x64>
    } else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a6fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a700:	f897 20c4 	ldrb.w	r2, [r7, #196]	; 0xc4
 800a704:	9202      	str	r2, [sp, #8]
 800a706:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a70a:	9201      	str	r2, [sp, #4]
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	4623      	mov	r3, r4
 800a710:	460a      	mov	r2, r1
 800a712:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800a716:	f009 fca3 	bl	8014060 <lv_txt_get_size>
                        flag);
        w = p.x;
 800a71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a71c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    }

    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a720:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800a724:	f7ff ff6e 	bl	800a604 <lv_font_get_line_height>
 800a728:	4603      	mov	r3, r0
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a732:	b29b      	uxth	r3, r3
 800a734:	4413      	add	r3, r2
 800a736:	b29b      	uxth	r3, r3
 800a738:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Init variables for the first line*/
    lv_coord_t line_width = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    lv_point_t pos;
    pos.x = coords->x1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a748:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    pos.y = coords->y1;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a752:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_coord_t x_ofs = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    lv_coord_t y_ofs = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    if(offset != NULL) {
 800a762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d013      	beq.n	800a792 <lv_draw_label+0xd6>
        x_ofs = offset->x;
 800a76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        y_ofs = offset->y;
 800a774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a778:	885b      	ldrh	r3, [r3, #2]
 800a77a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        pos.y += y_ofs;
 800a77e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a782:	b29a      	uxth	r2, r3
 800a784:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a788:	4413      	add	r3, r2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	b21b      	sxth	r3, r3
 800a78e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_start     = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int32_t last_line_start = -1;
 800a798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a79c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0) {
 800a7a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01f      	beq.n	800a7e8 <lv_draw_label+0x12c>
 800a7a8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11b      	bne.n	800a7e8 <lv_draw_label+0x12c>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800a7b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a7c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a7c6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800a7ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	dd04      	ble.n	800a7de <lv_draw_label+0x122>
            hint->line_start = -1;
 800a7d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7dc:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800a7de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800a7e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d013      	beq.n	800a818 <lv_draw_label+0x15c>
 800a7f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	db0f      	blt.n	800a818 <lv_draw_label+0x15c>
        line_start = last_line_start;
 800a7f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        pos.y += hint->y;
 800a800:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a804:	b29a      	uxth	r2, r3
 800a806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	4413      	add	r3, r2
 800a810:	b29b      	uxth	r3, r3
 800a812:	b21b      	sxth	r3, r3
 800a814:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    }

    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a818:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a81c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a820:	18d0      	adds	r0, r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a828:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800a82c:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	460b      	mov	r3, r1
 800a834:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800a838:	f009 fcc4 	bl	80141c4 <lv_txt_get_next_line>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a844:	4413      	add	r3, r2
 800a846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 800a84a:	e053      	b.n	800a8f4 <lv_draw_label+0x238>
        /*Go to next line*/
        line_start = line_end;
 800a84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a85c:	18d0      	adds	r0, r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a864:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800a868:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	460b      	mov	r3, r1
 800a870:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800a874:	f009 fca6 	bl	80141c4 <lv_txt_get_next_line>
 800a878:	4603      	mov	r3, r0
 800a87a:	461a      	mov	r2, r3
 800a87c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a880:	4413      	add	r3, r2
 800a882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        pos.y += line_height;
 800a886:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a890:	4413      	add	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	b21b      	sxth	r3, r3
 800a896:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800a89a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01f      	beq.n	800a8e2 <lv_draw_label+0x226>
 800a8a2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a8a6:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800a8aa:	db1a      	blt.n	800a8e2 <lv_draw_label+0x226>
 800a8ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da15      	bge.n	800a8e2 <lv_draw_label+0x226>
            hint->line_start = line_start;
 800a8b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8be:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800a8c0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8cc:	1ad2      	subs	r2, r2, r3
 800a8ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8d2:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8e0:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800a8e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a8e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8ea:	4413      	add	r3, r2
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 827d 	beq.w	800adee <lv_draw_label+0x732>
    while(pos.y + line_height < mask->y1) {
 800a8f4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800a8fe:	4413      	add	r3, r2
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a906:	4293      	cmp	r3, r2
 800a908:	dba0      	blt.n	800a84c <lv_draw_label+0x190>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 800a90a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d030      	beq.n	800a978 <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a916:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a91a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a91e:	18d0      	adds	r0, r2, r3
 800a920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a924:	b29a      	uxth	r2, r3
 800a926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	b299      	uxth	r1, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a936:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4613      	mov	r3, r2
 800a93e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a942:	f009 fcf1 	bl	8014328 <lv_txt_get_width>
 800a946:	4603      	mov	r3, r0
 800a948:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff fe9d 	bl	800a68c <lv_area_get_width>
 800a952:	4603      	mov	r3, r0
 800a954:	461a      	mov	r2, r3
 800a956:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	0fda      	lsrs	r2, r3, #31
 800a95e:	4413      	add	r3, r2
 800a960:	105b      	asrs	r3, r3, #1
 800a962:	4619      	mov	r1, r3
 800a964:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800a968:	b29a      	uxth	r2, r3
 800a96a:	b28b      	uxth	r3, r1
 800a96c:	4413      	add	r3, r2
 800a96e:	b29b      	uxth	r3, r3
 800a970:	b21b      	sxth	r3, r3
 800a972:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800a976:	e031      	b.n	800a9dc <lv_draw_label+0x320>

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800a978:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d02b      	beq.n	800a9dc <lv_draw_label+0x320>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a98c:	18d0      	adds	r0, r2, r3
 800a98e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a992:	b29a      	uxth	r2, r3
 800a994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a998:	b29b      	uxth	r3, r3
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	b299      	uxth	r1, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800a9a4:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9b0:	f009 fcba 	bl	8014328 <lv_txt_get_width>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        pos.x += lv_area_get_width(coords) - line_width;
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff fe66 	bl	800a68c <lv_area_get_width>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800a9ce:	b292      	uxth	r2, r2
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	b21b      	sxth	r3, r3
 800a9d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    }

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	2bff      	cmp	r3, #255	; 0xff
 800a9e0:	d103      	bne.n	800a9ea <lv_draw_label+0x32e>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9e8:	e00b      	b.n	800aa02 <lv_draw_label+0x346>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	fb12 f303 	smulbb	r3, r2, r3
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	0a1b      	lsrs	r3, r3, #8
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    uint32_t i;
    uint16_t par_start = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    lv_color_t recolor;
    lv_coord_t letter_w;
    lv_style_t sel_style;
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800aa12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa16:	499c      	ldr	r1, [pc, #624]	; (800ac88 <lv_draw_label+0x5cc>)
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fd fea3 	bl	8008764 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800aa22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800aa24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa26:	857b      	strh	r3, [r7, #42]	; 0x2a

    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800aa28:	e1d7      	b.n	800adda <lv_draw_label+0x71e>
        if(offset != NULL) {
 800aa2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <lv_draw_label+0x38a>
            pos.x += x_ofs;
 800aa32:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800aa3c:	4413      	add	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	b21b      	sxth	r3, r3
 800aa42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }
        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800aa46:	2300      	movs	r3, #0
 800aa48:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        i         = line_start;
 800aa4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa50:	66bb      	str	r3, [r7, #104]	; 0x68
        uint32_t letter;
        uint32_t letter_next;
        while(i < line_end) {
 800aa52:	e120      	b.n	800ac96 <lv_draw_label+0x5da>
            letter      = lv_txt_encoded_next(txt, &i);
 800aa54:	4b8d      	ldr	r3, [pc, #564]	; (800ac8c <lv_draw_label+0x5d0>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800aa62:	4798      	blx	r3
 800aa64:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800aa68:	4b88      	ldr	r3, [pc, #544]	; (800ac8c <lv_draw_label+0x5d0>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa6e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800aa72:	440a      	add	r2, r1
 800aa74:	2100      	movs	r1, #0
 800aa76:	4610      	mov	r0, r2
 800aa78:	4798      	blx	r3
 800aa7a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

            /*Handle the re-color command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800aa7e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d07a      	beq.n	800ab80 <lv_draw_label+0x4c4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800aa8a:	2323      	movs	r3, #35	; 0x23
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d11a      	bne.n	800aacc <lv_draw_label+0x410>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800aa96:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <lv_draw_label+0x3f0>
                        par_start = i;
 800aa9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                        cmd_state = CMD_STATE_PAR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800aaaa:	e0f4      	b.n	800ac96 <lv_draw_label+0x5da>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800aaac:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d103      	bne.n	800aabc <lv_draw_label+0x400>
                        cmd_state = CMD_STATE_WAIT;
 800aab4:	2300      	movs	r3, #0
 800aab6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800aaba:	e007      	b.n	800aacc <lv_draw_label+0x410>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800aabc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d103      	bne.n	800aacc <lv_draw_label+0x410>
                        cmd_state = CMD_STATE_WAIT;
 800aac4:	2300      	movs	r3, #0
 800aac6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                        continue;
 800aaca:	e0e4      	b.n	800ac96 <lv_draw_label+0x5da>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800aacc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d155      	bne.n	800ab80 <lv_draw_label+0x4c4>
                    if(letter == ' ') {
 800aad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aad8:	2b20      	cmp	r3, #32
 800aada:	f040 80db 	bne.w	800ac94 <lv_draw_label+0x5d8>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800aade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aae0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b07      	cmp	r3, #7
 800aae8:	d142      	bne.n	800ab70 <lv_draw_label+0x4b4>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800aaea:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aaee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aaf2:	18d1      	adds	r1, r2, r3
 800aaf4:	f107 0318 	add.w	r3, r7, #24
 800aaf8:	2206      	movs	r2, #6
 800aafa:	4618      	mov	r0, r3
 800aafc:	f01c fb92 	bl	8027224 <memcpy>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800ab00:	2300      	movs	r3, #0
 800ab02:	77bb      	strb	r3, [r7, #30]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ab04:	7e3b      	ldrb	r3, [r7, #24]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f978 	bl	800adfc <hex_char_to_num>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	011c      	lsls	r4, r3, #4
 800ab10:	7e7b      	ldrb	r3, [r7, #25]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f972 	bl	800adfc <hex_char_to_num>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4423      	add	r3, r4
 800ab1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800ab20:	7ebb      	ldrb	r3, [r7, #26]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 f96a 	bl	800adfc <hex_char_to_num>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	011c      	lsls	r4, r3, #4
 800ab2c:	7efb      	ldrb	r3, [r7, #27]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f964 	bl	800adfc <hex_char_to_num>
 800ab34:	4603      	mov	r3, r0
 800ab36:	4423      	add	r3, r4
 800ab38:	67fb      	str	r3, [r7, #124]	; 0x7c
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800ab3a:	7f3b      	ldrb	r3, [r7, #28]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f95d 	bl	800adfc <hex_char_to_num>
 800ab42:	4603      	mov	r3, r0
 800ab44:	011c      	lsls	r4, r3, #4
 800ab46:	7f7b      	ldrb	r3, [r7, #29]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 f957 	bl	800adfc <hex_char_to_num>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4423      	add	r3, r4
 800ab52:	67bb      	str	r3, [r7, #120]	; 0x78
                            recolor = lv_color_make(r, g, b);
 800ab54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab5c:	b2d1      	uxtb	r1, r2
 800ab5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff fd5a 	bl	800a61c <lv_color_make>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab6e:	e003      	b.n	800ab78 <lv_draw_label+0x4bc>
                        } else {
                            recolor.full = style->text.color.full;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8c1b      	ldrh	r3, [r3, #32]
 800ab74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ab78:	2302      	movs	r3, #2
 800ab7a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    }
                    continue;
 800ab7e:	e089      	b.n	800ac94 <lv_draw_label+0x5d8>
                }
            }

            lv_color_t color = style->text.color;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8c1b      	ldrh	r3, [r3, #32]
 800ab84:	843b      	strh	r3, [r7, #32]

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800ab86:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d102      	bne.n	800ab94 <lv_draw_label+0x4d8>
 800ab8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab92:	843b      	strh	r3, [r7, #32]

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ab94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ab98:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ab9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800aba0:	f007 f92a 	bl	8011df8 <lv_font_get_glyph_width>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800abaa:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800abae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d043      	beq.n	800ac3e <lv_draw_label+0x582>
 800abb6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800abba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d03d      	beq.n	800ac3e <lv_draw_label+0x582>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800abc2:	4b33      	ldr	r3, [pc, #204]	; (800ac90 <lv_draw_label+0x5d4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abc8:	4611      	mov	r1, r2
 800abca:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800abce:	4798      	blx	r3
 800abd0:	4603      	mov	r3, r0
 800abd2:	673b      	str	r3, [r7, #112]	; 0x70
                /*Do not draw the rectangle on the character at `sel_start`.*/
                if(char_ind > sel_start && char_ind <= sel_end) {
 800abd4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800abd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abda:	429a      	cmp	r2, r3
 800abdc:	dd2f      	ble.n	800ac3e <lv_draw_label+0x582>
 800abde:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800abe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abe4:	429a      	cmp	r2, r3
 800abe6:	dc2a      	bgt.n	800ac3e <lv_draw_label+0x582>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800abe8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800abec:	823b      	strh	r3, [r7, #16]
                    sel_coords.y1 = pos.y;
 800abee:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800abf2:	827b      	strh	r3, [r7, #18]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800abf4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800abfe:	4413      	add	r3, r2
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	b21b      	sxth	r3, r3
 800ac14:	82bb      	strh	r3, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800ac16:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ac20:	4413      	add	r3, r2
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	b21b      	sxth	r3, r3
 800ac2a:	82fb      	strh	r3, [r7, #22]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800ac2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ac30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac34:	f107 0010 	add.w	r0, r7, #16
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	f001 ffd8 	bl	800cbee <lv_draw_rect>
                }
            }
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800ac3e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800ac42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	8c3b      	ldrh	r3, [r7, #32]
 800ac4a:	f8ad 3000 	strh.w	r3, [sp]
 800ac4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	f7fe fc1c 	bl	8009494 <lv_draw_letter>

            if(letter_w > 0) {
 800ac5c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dd18      	ble.n	800ac96 <lv_draw_label+0x5da>
                pos.x += letter_w + style->text.letter_space;
 800ac64:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800ac70:	b299      	uxth	r1, r3
 800ac72:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ac76:	440b      	add	r3, r1
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	b21b      	sxth	r3, r3
 800ac80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ac84:	e007      	b.n	800ac96 <lv_draw_label+0x5da>
 800ac86:	bf00      	nop
 800ac88:	20006d64 	.word	0x20006d64
 800ac8c:	2000279c 	.word	0x2000279c
 800ac90:	200027a8 	.word	0x200027a8
                    continue;
 800ac94:	bf00      	nop
        while(i < line_end) {
 800ac96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac98:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	f63f aed9 	bhi.w	800aa54 <lv_draw_label+0x398>
            }
        }
        /*Go to next line*/
        line_start = line_end;
 800aca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800acaa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800acae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acb2:	18d0      	adds	r0, r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800acba:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	; 0xae
 800acbe:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	460b      	mov	r3, r1
 800acc6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800acca:	f009 fa7b 	bl	80141c4 <lv_txt_get_next_line>
 800acce:	4603      	mov	r3, r0
 800acd0:	461a      	mov	r2, r3
 800acd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acd6:	4413      	add	r3, r2
 800acd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        pos.x = coords->x1;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ace2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 800ace6:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d030      	beq.n	800ad54 <lv_draw_label+0x698>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800acf2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800acf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acfa:	18d0      	adds	r0, r2, r3
 800acfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	b299      	uxth	r1, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800ad12:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad1e:	f009 fb03 	bl	8014328 <lv_txt_get_width>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fcaf 	bl	800a68c <lv_area_get_width>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	461a      	mov	r2, r3
 800ad32:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	0fda      	lsrs	r2, r3, #31
 800ad3a:	4413      	add	r3, r2
 800ad3c:	105b      	asrs	r3, r3, #1
 800ad3e:	4619      	mov	r1, r3
 800ad40:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	b28b      	uxth	r3, r1
 800ad48:	4413      	add	r3, r2
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	b21b      	sxth	r3, r3
 800ad4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ad52:	e031      	b.n	800adb8 <lv_draw_label+0x6fc>

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800ad54:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d02b      	beq.n	800adb8 <lv_draw_label+0x6fc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800ad60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ad64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad68:	18d0      	adds	r0, r2, r3
 800ad6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	b299      	uxth	r1, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
            line_width =
 800ad80:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4613      	mov	r3, r2
 800ad88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad8c:	f009 facc 	bl	8014328 <lv_txt_get_width>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
            pos.x += lv_area_get_width(coords) - line_width;
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fc78 	bl	800a68c <lv_area_get_width>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800adaa:	b292      	uxth	r2, r2
 800adac:	b29b      	uxth	r3, r3
 800adae:	4413      	add	r3, r2
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        /*Go the next line position*/
        pos.y += line_height;
 800adb8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800adc2:	4413      	add	r3, r2
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	b21b      	sxth	r3, r3
 800adc8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if(pos.y > mask->y2) return;
 800adcc:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800add6:	429a      	cmp	r2, r3
 800add8:	dc0b      	bgt.n	800adf2 <lv_draw_label+0x736>
    while(txt[line_start] != '\0') {
 800adda:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800adde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ade2:	4413      	add	r3, r2
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f47f ae1f 	bne.w	800aa2a <lv_draw_label+0x36e>
 800adec:	e002      	b.n	800adf4 <lv_draw_label+0x738>
        if(txt[line_start] == '\0') return;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <lv_draw_label+0x738>
        if(pos.y > mask->y2) return;
 800adf2:	bf00      	nop
    }
}
 800adf4:	37b4      	adds	r7, #180	; 0xb4
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd90      	pop	{r4, r7, pc}
 800adfa:	bf00      	nop

0800adfc <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	2b2f      	cmp	r3, #47	; 0x2f
 800ae0e:	d906      	bls.n	800ae1e <hex_char_to_num+0x22>
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	2b39      	cmp	r3, #57	; 0x39
 800ae14:	d803      	bhi.n	800ae1e <hex_char_to_num+0x22>
        result = hex - '0';
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	3b30      	subs	r3, #48	; 0x30
 800ae1a:	73fb      	strb	r3, [r7, #15]
 800ae1c:	e02d      	b.n	800ae7a <hex_char_to_num+0x7e>
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b60      	cmp	r3, #96	; 0x60
 800ae22:	d902      	bls.n	800ae2a <hex_char_to_num+0x2e>
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	3b20      	subs	r3, #32
 800ae28:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	3b41      	subs	r3, #65	; 0x41
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d820      	bhi.n	800ae74 <hex_char_to_num+0x78>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <hex_char_to_num+0x3c>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae57 	.word	0x0800ae57
 800ae40:	0800ae5d 	.word	0x0800ae5d
 800ae44:	0800ae63 	.word	0x0800ae63
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800ae6f 	.word	0x0800ae6f
            case 'A': result = 10; break;
 800ae50:	230a      	movs	r3, #10
 800ae52:	73fb      	strb	r3, [r7, #15]
 800ae54:	e011      	b.n	800ae7a <hex_char_to_num+0x7e>
            case 'B': result = 11; break;
 800ae56:	230b      	movs	r3, #11
 800ae58:	73fb      	strb	r3, [r7, #15]
 800ae5a:	e00e      	b.n	800ae7a <hex_char_to_num+0x7e>
            case 'C': result = 12; break;
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	73fb      	strb	r3, [r7, #15]
 800ae60:	e00b      	b.n	800ae7a <hex_char_to_num+0x7e>
            case 'D': result = 13; break;
 800ae62:	230d      	movs	r3, #13
 800ae64:	73fb      	strb	r3, [r7, #15]
 800ae66:	e008      	b.n	800ae7a <hex_char_to_num+0x7e>
            case 'E': result = 14; break;
 800ae68:	230e      	movs	r3, #14
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	e005      	b.n	800ae7a <hex_char_to_num+0x7e>
            case 'F': result = 15; break;
 800ae6e:	230f      	movs	r3, #15
 800ae70:	73fb      	strb	r3, [r7, #15]
 800ae72:	e002      	b.n	800ae7a <hex_char_to_num+0x7e>
            default: result = 0; break;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
 800ae78:	bf00      	nop
        }
    }

    return result;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * mask,
                  const lv_style_t * style, lv_opa_t opa_scale)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b090      	sub	sp, #64	; 0x40
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]

    if(style->line.width == 0) return;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 81ce 	beq.w	800b23e <lv_draw_line+0x3b6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d108      	bne.n	800aec4 <lv_draw_line+0x3c>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	f000 81bf 	beq.w	800b242 <lv_draw_line+0x3ba>

    /*Return if the points are out of the mask*/
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aed2:	4619      	mov	r1, r3
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800aeda:	1acb      	subs	r3, r1, r3
 800aedc:	429a      	cmp	r2, r3
 800aede:	da0e      	bge.n	800aefe <lv_draw_line+0x76>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aee6:	461a      	mov	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeee:	4619      	mov	r1, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800aef6:	1acb      	subs	r3, r1, r3
 800aef8:	429a      	cmp	r2, r3
 800aefa:	f2c0 81a4 	blt.w	800b246 <lv_draw_line+0x3be>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800af0c:	4619      	mov	r1, r3
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af14:	440b      	add	r3, r1
 800af16:	429a      	cmp	r2, r3
 800af18:	dd0e      	ble.n	800af38 <lv_draw_line+0xb0>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af20:	461a      	mov	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800af28:	4619      	mov	r1, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af30:	440b      	add	r3, r1
 800af32:	429a      	cmp	r2, r3
 800af34:	f300 8189 	bgt.w	800b24a <lv_draw_line+0x3c2>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af46:	4619      	mov	r1, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af4e:	1acb      	subs	r3, r1, r3
 800af50:	429a      	cmp	r2, r3
 800af52:	da0e      	bge.n	800af72 <lv_draw_line+0xea>
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af62:	4619      	mov	r1, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af6a:	1acb      	subs	r3, r1, r3
 800af6c:	429a      	cmp	r2, r3
 800af6e:	f2c0 816e 	blt.w	800b24e <lv_draw_line+0x3c6>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af78:	461a      	mov	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800af80:	4619      	mov	r1, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800af88:	440b      	add	r3, r1
 800af8a:	429a      	cmp	r2, r3
 800af8c:	dd0e      	ble.n	800afac <lv_draw_line+0x124>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af94:	461a      	mov	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800af9c:	4619      	mov	r1, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800afa4:	440b      	add	r3, r1
 800afa6:	429a      	cmp	r2, r3
 800afa8:	f300 8153 	bgt.w	800b252 <lv_draw_line+0x3ca>
    lv_point_t p1;
    lv_point_t p2;

    /*If the line if rather vertical then be sure y1 < y2 else x1 < x2*/

    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afb2:	461a      	mov	r2, r3
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800afc0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afca:	4619      	mov	r1, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afd2:	1acb      	subs	r3, r1, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb8      	it	lt
 800afd8:	425b      	neglt	r3, r3
 800afda:	429a      	cmp	r2, r3
 800afdc:	dd29      	ble.n	800b032 <lv_draw_line+0x1aa>

        /*Steps less in y then x -> rather horizontal*/
        if(point1->x < point2->x) {
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afea:	429a      	cmp	r2, r3
 800afec:	da10      	bge.n	800b010 <lv_draw_line+0x188>
            p1.x = point1->x;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aff4:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800affc:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b004:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b00c:	82fb      	strh	r3, [r7, #22]
 800b00e:	e039      	b.n	800b084 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b016:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b01e:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b026:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b02e:	82fb      	strh	r3, [r7, #22]
 800b030:	e028      	b.n	800b084 <lv_draw_line+0x1fc>
        }
    } else {
        /*Steps less in x then y -> rather vertical*/
        if(point1->y < point2->y) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b03e:	429a      	cmp	r2, r3
 800b040:	da10      	bge.n	800b064 <lv_draw_line+0x1dc>
            p1.x = point1->x;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b048:	833b      	strh	r3, [r7, #24]
            p1.y = point1->y;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b050:	837b      	strh	r3, [r7, #26]
            p2.x = point2->x;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b058:	82bb      	strh	r3, [r7, #20]
            p2.y = point2->y;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b060:	82fb      	strh	r3, [r7, #22]
 800b062:	e00f      	b.n	800b084 <lv_draw_line+0x1fc>
        } else {
            p1.x = point2->x;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b06a:	833b      	strh	r3, [r7, #24]
            p1.y = point2->y;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b072:	837b      	strh	r3, [r7, #26]
            p2.x = point1->x;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b07a:	82bb      	strh	r3, [r7, #20]
            p2.y = point1->y;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b082:	82fb      	strh	r3, [r7, #22]
        }
    }

    line_init(&main_line, &p1, &p2);
 800b084:	f107 0214 	add.w	r2, r7, #20
 800b088:	f107 0118 	add.w	r1, r7, #24
 800b08c:	f107 031c 	add.w	r3, r7, #28
 800b090:	4618      	mov	r0, r3
 800b092:	f001 fbb0 	bl	800c7f6 <line_init>

    /*Special case draw a horizontal line*/
    if(main_line.p1.y == main_line.p2.y) {
 800b096:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b09a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d108      	bne.n	800b0b4 <lv_draw_line+0x22c>
        line_draw_hor(&main_line, mask, style, opa_scale);
 800b0a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0a6:	f107 001c 	add.w	r0, r7, #28
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	f000 f8d4 	bl	800b25a <line_draw_hor>
 800b0b2:	e0cf      	b.n	800b254 <lv_draw_line+0x3cc>
    }
    /*Special case draw a vertical line*/
    else if(main_line.p1.x == main_line.p2.x) {
 800b0b4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b0b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d108      	bne.n	800b0d2 <lv_draw_line+0x24a>
        line_draw_ver(&main_line, mask, style, opa_scale);
 800b0c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0c4:	f107 001c 	add.w	r0, r7, #28
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	f000 f93e 	bl	800b34c <line_draw_ver>
 800b0d0:	e0c0      	b.n	800b254 <lv_draw_line+0x3cc>
    }
    /*Arbitrary skew line*/
    else {
        bool dir_ori = false;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if LV_ANTIALIAS
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b0d8:	f7fc fbe0 	bl	800789c <lv_refr_get_disp_refreshing>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f007 faac 	bl	801263c <lv_disp_get_antialiasing>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(aa) {
 800b0ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 8099 	beq.w	800b226 <lv_draw_line+0x39e>
            lv_point_t p_tmp;

            if(main_line.hor) {
 800b0f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d04a      	beq.n	800b192 <lv_draw_line+0x30a>
                if(main_line.p1.y < main_line.p2.y) {
 800b0fc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b100:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b104:	429a      	cmp	r2, r3
 800b106:	da1d      	bge.n	800b144 <lv_draw_line+0x2bc>
                    dir_ori = true;
 800b108:	2301      	movs	r3, #1
 800b10a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800b10e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b112:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y - 1;
 800b114:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	b21b      	sxth	r3, r3
 800b120:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b122:	f107 0210 	add.w	r2, r7, #16
 800b126:	f107 0118 	add.w	r1, r7, #24
 800b12a:	f107 031c 	add.w	r3, r7, #28
 800b12e:	4618      	mov	r0, r3
 800b130:	f001 fb61 	bl	800c7f6 <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800b134:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b138:	2b00      	cmp	r3, #0
 800b13a:	bfb8      	it	lt
 800b13c:	425b      	neglt	r3, r3
 800b13e:	b21b      	sxth	r3, r3
 800b140:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b142:	e070      	b.n	800b226 <lv_draw_line+0x39e>
                } else if(main_line.p1.y > main_line.p2.y) {
 800b144:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b148:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b14c:	429a      	cmp	r2, r3
 800b14e:	dd6a      	ble.n	800b226 <lv_draw_line+0x39e>
                    dir_ori = false;
 800b150:	2300      	movs	r3, #0
 800b152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x;
 800b156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b15a:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y + 1;
 800b15c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b160:	b29b      	uxth	r3, r3
 800b162:	3301      	adds	r3, #1
 800b164:	b29b      	uxth	r3, r3
 800b166:	b21b      	sxth	r3, r3
 800b168:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b16a:	f107 0210 	add.w	r2, r7, #16
 800b16e:	f107 0118 	add.w	r1, r7, #24
 800b172:	f107 031c 	add.w	r3, r7, #28
 800b176:	4618      	mov	r0, r3
 800b178:	f001 fb3d 	bl	800c7f6 <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 800b17c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfb8      	it	lt
 800b184:	425b      	neglt	r3, r3
 800b186:	b29b      	uxth	r3, r3
 800b188:	425b      	negs	r3, r3
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	b21b      	sxth	r3, r3
 800b18e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b190:	e049      	b.n	800b226 <lv_draw_line+0x39e>
                }
            } else {
                if(main_line.p1.x < main_line.p2.x) {
 800b192:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	da1d      	bge.n	800b1da <lv_draw_line+0x352>
                    dir_ori = true;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x - 1;
 800b1a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	b21b      	sxth	r3, r3
 800b1b0:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800b1b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b1b6:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b1b8:	f107 0210 	add.w	r2, r7, #16
 800b1bc:	f107 0118 	add.w	r1, r7, #24
 800b1c0:	f107 031c 	add.w	r3, r7, #28
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 fb16 	bl	800c7f6 <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800b1ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfb8      	it	lt
 800b1d2:	425b      	neglt	r3, r3
 800b1d4:	b21b      	sxth	r3, r3
 800b1d6:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b1d8:	e025      	b.n	800b226 <lv_draw_line+0x39e>
                } else if(main_line.p1.x > main_line.p2.x) {
 800b1da:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b1de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	dd1f      	ble.n	800b226 <lv_draw_line+0x39e>
                    dir_ori = false;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    p_tmp.x = main_line.p2.x + 1;
 800b1ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	b21b      	sxth	r3, r3
 800b1f8:	823b      	strh	r3, [r7, #16]
                    p_tmp.y = main_line.p2.y;
 800b1fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b1fe:	827b      	strh	r3, [r7, #18]
                    line_init(&main_line, &p1, &p_tmp);
 800b200:	f107 0210 	add.w	r2, r7, #16
 800b204:	f107 0118 	add.w	r1, r7, #24
 800b208:	f107 031c 	add.w	r3, r7, #28
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 faf2 	bl	800c7f6 <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 800b212:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b216:	2b00      	cmp	r3, #0
 800b218:	bfb8      	it	lt
 800b21a:	425b      	neglt	r3, r3
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	425b      	negs	r3, r3
 800b220:	b29b      	uxth	r3, r3
 800b222:	b21b      	sxth	r3, r3
 800b224:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
            }
        }
#endif
        line_draw_skew(&main_line, dir_ori, mask, style, opa_scale);
 800b226:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800b22a:	f107 001c 	add.w	r0, r7, #28
 800b22e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	f000 f901 	bl	800b43e <line_draw_skew>
 800b23c:	e00a      	b.n	800b254 <lv_draw_line+0x3cc>
    if(style->line.width == 0) return;
 800b23e:	bf00      	nop
 800b240:	e008      	b.n	800b254 <lv_draw_line+0x3cc>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800b242:	bf00      	nop
 800b244:	e006      	b.n	800b254 <lv_draw_line+0x3cc>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 800b246:	bf00      	nop
 800b248:	e004      	b.n	800b254 <lv_draw_line+0x3cc>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 800b24a:	bf00      	nop
 800b24c:	e002      	b.n	800b254 <lv_draw_line+0x3cc>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <lv_draw_line+0x3cc>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 800b252:	bf00      	nop
    }
}
 800b254:	3738      	adds	r7, #56	; 0x38
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <line_draw_hor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void line_draw_hor(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b08a      	sub	sp, #40	; 0x28
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3b01      	subs	r3, #1
 800b272:	b29b      	uxth	r3, r3
 800b274:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800b276:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b27a:	105b      	asrs	r3, r3, #1
 800b27c:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800b27e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	2bff      	cmp	r3, #255	; 0xff
 800b28a:	d103      	bne.n	800b294 <line_draw_hor+0x3a>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b292:	e00b      	b.n	800b2ac <line_draw_hor+0x52>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	78fb      	ldrb	r3, [r7, #3]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	fb12 f303 	smulbb	r3, r2, r3
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	0a1b      	lsrs	r3, r3, #8
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2b6:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b2be:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y - width_half - width_1;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	b21b      	sxth	r3, r3
 800b2d6:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y + width_half;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e2:	4413      	add	r3, r2
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	b21b      	sxth	r3, r3
 800b2e8:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b2ea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b2ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	bfa8      	it	ge
 800b2f6:	4613      	movge	r3, r2
 800b2f8:	b21b      	sxth	r3, r3
 800b2fa:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b2fc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b300:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b304:	4293      	cmp	r3, r2
 800b306:	bfb8      	it	lt
 800b308:	4613      	movlt	r3, r2
 800b30a:	b21b      	sxth	r3, r3
 800b30c:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b30e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b312:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b316:	4293      	cmp	r3, r2
 800b318:	bfa8      	it	ge
 800b31a:	4613      	movge	r3, r2
 800b31c:	b21b      	sxth	r3, r3
 800b31e:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b320:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b324:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b328:	4293      	cmp	r3, r2
 800b32a:	bfb8      	it	lt
 800b32c:	4613      	movlt	r3, r2
 800b32e:	b21b      	sxth	r3, r3
 800b330:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800b332:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	f107 0010 	add.w	r0, r7, #16
 800b33c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	f7fe f82f 	bl	80093a2 <lv_draw_fill>
}
 800b344:	bf00      	nop
 800b346:	3728      	adds	r7, #40	; 0x28
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <line_draw_ver>:

static void line_draw_ver(line_draw_t * main_line, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	; 0x28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	70fb      	strb	r3, [r7, #3]
    lv_coord_t width      = style->line.width - 1;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800b360:	b29b      	uxth	r3, r3
 800b362:	3b01      	subs	r3, #1
 800b364:	b29b      	uxth	r3, r3
 800b366:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t width_half = width >> 1;
 800b368:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b36c:	105b      	asrs	r3, r3, #1
 800b36e:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t width_1    = width & 0x1;
 800b370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	2bff      	cmp	r3, #255	; 0xff
 800b37c:	d103      	bne.n	800b386 <line_draw_ver+0x3a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b384:	e00b      	b.n	800b39e <line_draw_ver+0x52>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	b29b      	uxth	r3, r3
 800b392:	fb12 f303 	smulbb	r3, r2, r3
 800b396:	b29b      	uxth	r3, r3
 800b398:	0a1b      	lsrs	r3, r3, #8
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    lv_area_t act_area;
    act_area.x1 = main_line->p1.x - width_half;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	b21b      	sxth	r3, r3
 800b3b2:	833b      	strh	r3, [r7, #24]
    act_area.x2 = main_line->p2.x + width_half + width_1;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3be:	4413      	add	r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3c4:	4413      	add	r3, r2
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	b21b      	sxth	r3, r3
 800b3ca:	83bb      	strh	r3, [r7, #28]
    act_area.y1 = main_line->p1.y;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3d2:	837b      	strh	r3, [r7, #26]
    act_area.y2 = main_line->p2.y;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3da:	83fb      	strh	r3, [r7, #30]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 800b3dc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b3e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	bfa8      	it	ge
 800b3e8:	4613      	movge	r3, r2
 800b3ea:	b21b      	sxth	r3, r3
 800b3ec:	823b      	strh	r3, [r7, #16]
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 800b3ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b3f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	bfb8      	it	lt
 800b3fa:	4613      	movlt	r3, r2
 800b3fc:	b21b      	sxth	r3, r3
 800b3fe:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 800b400:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b404:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b408:	4293      	cmp	r3, r2
 800b40a:	bfa8      	it	ge
 800b40c:	4613      	movge	r3, r2
 800b40e:	b21b      	sxth	r3, r3
 800b410:	827b      	strh	r3, [r7, #18]
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 800b412:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b416:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfb8      	it	lt
 800b41e:	4613      	movlt	r3, r2
 800b420:	b21b      	sxth	r3, r3
 800b422:	82fb      	strh	r3, [r7, #22]
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800b424:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	f107 0010 	add.w	r0, r7, #16
 800b42e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800b430:	68b9      	ldr	r1, [r7, #8]
 800b432:	f7fd ffb6 	bl	80093a2 <lv_draw_fill>
}
 800b436:	bf00      	nop
 800b438:	3728      	adds	r7, #40	; 0x28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <line_draw_skew>:

static void line_draw_skew(line_draw_t * main_line, bool dir_ori, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b09e      	sub	sp, #120	; 0x78
 800b442:	af02      	add	r7, sp, #8
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	603b      	str	r3, [r7, #0]
 800b44a:	460b      	mov	r3, r1
 800b44c:	72fb      	strb	r3, [r7, #11]

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 800b44e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800b452:	2bff      	cmp	r3, #255	; 0xff
 800b454:	d103      	bne.n	800b45e <line_draw_skew+0x20>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b45c:	e00c      	b.n	800b478 <line_draw_skew+0x3a>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b464:	b29a      	uxth	r2, r3
 800b466:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	fb12 f303 	smulbb	r3, r2, r3
 800b470:	b29b      	uxth	r3, r3
 800b472:	0a1b      	lsrs	r3, r3, #8
 800b474:	b29b      	uxth	r3, r3
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
#if LV_ANTIALIAS
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b47c:	f7fc fa0e 	bl	800789c <lv_refr_get_disp_refreshing>
 800b480:	4603      	mov	r3, r0
 800b482:	4618      	mov	r0, r3
 800b484:	f007 f8da 	bl	801263c <lv_disp_get_antialiasing>
 800b488:	4603      	mov	r3, r0
 800b48a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
#endif
    lv_point_t vect_main, vect_norm;
    vect_main.x = main_line->p2.x - main_line->p1.x;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b494:	b29a      	uxth	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	b21b      	sxth	r3, r3
 800b4a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    vect_main.y = main_line->p2.y - main_line->p1.y;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	b21b      	sxth	r3, r3
 800b4be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(main_line->hor) {
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	7e1b      	ldrb	r3, [r3, #24]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d025      	beq.n	800b516 <line_draw_skew+0xd8>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	7afb      	ldrb	r3, [r7, #11]
 800b4dc:	440b      	add	r3, r1
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	da0c      	bge.n	800b4fc <line_draw_skew+0xbe>
            vect_norm.x = -vect_main.y;
 800b4e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	425b      	negs	r3, r3
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	b21b      	sxth	r3, r3
 800b4ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800b4f2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b4f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b4fa:	e031      	b.n	800b560 <line_draw_skew+0x122>
        } else {
            vect_norm.x = vect_main.y;
 800b4fc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b500:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800b504:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b508:	b29b      	uxth	r3, r3
 800b50a:	425b      	negs	r3, r3
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	b21b      	sxth	r3, r3
 800b510:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b514:	e024      	b.n	800b560 <line_draw_skew+0x122>
        }
    } else {
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b51c:	461a      	mov	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b524:	4619      	mov	r1, r3
 800b526:	7afb      	ldrb	r3, [r7, #11]
 800b528:	440b      	add	r3, r1
 800b52a:	429a      	cmp	r2, r3
 800b52c:	da0c      	bge.n	800b548 <line_draw_skew+0x10a>
            vect_norm.x = vect_main.y;
 800b52e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b532:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = -vect_main.x;
 800b536:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	425b      	negs	r3, r3
 800b53e:	b29b      	uxth	r3, r3
 800b540:	b21b      	sxth	r3, r3
 800b542:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b546:	e00b      	b.n	800b560 <line_draw_skew+0x122>
        } else {
            vect_norm.x = -vect_main.y;
 800b548:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	425b      	negs	r3, r3
 800b550:	b29b      	uxth	r3, r3
 800b552:	b21b      	sxth	r3, r3
 800b554:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            vect_norm.y = vect_main.x;
 800b558:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800b55c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }
    }

    /* In case of a short but tick line the perpendicular ending is longer then the real line.
     * it would break the calculations so make the normal vector larger*/
    vect_norm.x = vect_norm.x << 4;
 800b560:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b564:	011b      	lsls	r3, r3, #4
 800b566:	b21b      	sxth	r3, r3
 800b568:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    vect_norm.y = vect_norm.y << 4;
 800b56c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	b21b      	sxth	r3, r3
 800b574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lv_coord_t width;
    width = style->line.width;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b57c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    /* The pattern stores the points of the line ending. It has the good direction and length.
     * The worth case is the 45° line where pattern can have 1.41 x `width` points*/

    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 800b580:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	4618      	mov	r0, r3
 800b588:	f7fd f8fa 	bl	8008780 <lv_draw_get_buf>
 800b58c:	65b8      	str	r0, [r7, #88]	; 0x58
    lv_coord_t i = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    /*Create a perpendicular pattern (a small line)*/
    if(width != 0) {
 800b594:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d05b      	beq.n	800b654 <line_draw_skew+0x216>
        line_draw_t pattern_line;
        lv_point_t p0 = {0, 0};
 800b59c:	2300      	movs	r3, #0
 800b59e:	82bb      	strh	r3, [r7, #20]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	82fb      	strh	r3, [r7, #22]
        line_init(&pattern_line, &p0, &vect_norm);
 800b5a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b5a8:	f107 0114 	add.w	r1, r7, #20
 800b5ac:	f107 0318 	add.w	r3, r7, #24
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 f920 	bl	800c7f6 <line_init>

        uint32_t width_sqr = width * width;
 800b5b6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b5ba:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800b5be:	fb02 f303 	mul.w	r3, r2, r3
 800b5c2:	657b      	str	r3, [r7, #84]	; 0x54
        /* Run for a lot of times. Meanwhile the real width will be determined as well */
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b5ca:	e03d      	b.n	800b648 <line_draw_skew+0x20a>
            pattern[i].x = pattern_line.p_act.x;
 800b5cc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5da:	801a      	strh	r2, [r3, #0]
            pattern[i].y = pattern_line.p_act.y;
 800b5dc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800b5ea:	805a      	strh	r2, [r3, #2]

            /*Finish the pattern line if it's length equal to the desired width (Use Pythagoras
             * theorem)*/
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 800b5ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b5f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5f4:	fb02 f203 	mul.w	r2, r2, r3
 800b5f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b5fc:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	4413      	add	r3, r2
 800b606:	653b      	str	r3, [r7, #80]	; 0x50
            if(sqr >= width_sqr) {
 800b608:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d30f      	bcc.n	800b630 <line_draw_skew+0x1f2>
                width = i;
 800b610:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b614:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#if LV_ANTIALIAS
                if(aa) width--;
 800b618:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d018      	beq.n	800b652 <line_draw_skew+0x214>
 800b620:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b624:	b29b      	uxth	r3, r3
 800b626:	3b01      	subs	r3, #1
 800b628:	b29b      	uxth	r3, r3
 800b62a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
#endif
                break;
 800b62e:	e010      	b.n	800b652 <line_draw_skew+0x214>
            }

            line_next(&pattern_line);
 800b630:	f107 0318 	add.w	r3, r7, #24
 800b634:	4618      	mov	r0, r3
 800b636:	f001 f96a 	bl	800c90e <line_next>
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 800b63a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b63e:	b29b      	uxth	r3, r3
 800b640:	3301      	adds	r3, #1
 800b642:	b29b      	uxth	r3, r3
 800b644:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b648:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	ddbd      	ble.n	800b5cc <line_draw_skew+0x18e>
 800b650:	e000      	b.n	800b654 <line_draw_skew+0x216>
                break;
 800b652:	bf00      	nop
        }
    }

#if LV_ANTIALIAS
    lv_coord_t aa_last_corner;
    lv_coord_t width_safe = width;
 800b654:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b658:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    if(aa) {
 800b65c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <line_draw_skew+0x23a>
        if(width == 0) width_safe = 1;
 800b664:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <line_draw_skew+0x234>
 800b66c:	2301      	movs	r3, #1
 800b66e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        aa_last_corner = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    }
#endif

    lv_coord_t x_center_ofs = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    lv_coord_t y_center_ofs = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    if(width != 0) {
 800b684:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d01e      	beq.n	800b6ca <line_draw_skew+0x28c>
        x_center_ofs = pattern[width - 1].x / 2;
 800b68c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b694:	3b01      	subs	r3, #1
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b69a:	4413      	add	r3, r2
 800b69c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6a0:	0fda      	lsrs	r2, r3, #31
 800b6a2:	4413      	add	r3, r2
 800b6a4:	105b      	asrs	r3, r3, #1
 800b6a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        y_center_ofs = pattern[width - 1].y / 2;
 800b6aa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800b6ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6be:	0fda      	lsrs	r2, r3, #31
 800b6c0:	4413      	add	r3, r2
 800b6c2:	105b      	asrs	r3, r3, #1
 800b6c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b6c8:	e034      	b.n	800b734 <line_draw_skew+0x2f6>
    } else {
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	7e1b      	ldrb	r3, [r3, #24]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d014      	beq.n	800b6fc <line_draw_skew+0x2be>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	440b      	add	r3, r1
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	db08      	blt.n	800b6fc <line_draw_skew+0x2be>
 800b6ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	b21a      	sxth	r2, r3
 800b6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6fa:	805a      	strh	r2, [r3, #2]
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	7e1b      	ldrb	r3, [r3, #24]
 800b700:	f083 0301 	eor.w	r3, r3, #1
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d014      	beq.n	800b734 <line_draw_skew+0x2f6>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b710:	461a      	mov	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b718:	4619      	mov	r1, r3
 800b71a:	7afb      	ldrb	r3, [r7, #11]
 800b71c:	440b      	add	r3, r1
 800b71e:	429a      	cmp	r2, r3
 800b720:	db08      	blt.n	800b734 <line_draw_skew+0x2f6>
 800b722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b724:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	3b01      	subs	r3, #1
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	b21a      	sxth	r2, r3
 800b730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b732:	801a      	strh	r2, [r3, #0]
    }

    /* Make the coordinates relative to the center */
    for(i = 0; i < width; i++) {
 800b734:	2300      	movs	r3, #0
 800b736:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800b73a:	e224      	b.n	800bb86 <line_draw_skew+0x748>
        pattern[i].x -= x_center_ofs;
 800b73c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b744:	4413      	add	r3, r2
 800b746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	b299      	uxth	r1, r3
 800b754:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b75c:	4413      	add	r3, r2
 800b75e:	b20a      	sxth	r2, r1
 800b760:	801a      	strh	r2, [r3, #0]
        pattern[i].y -= y_center_ofs;
 800b762:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b76a:	4413      	add	r3, r2
 800b76c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b770:	b29a      	uxth	r2, r3
 800b772:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	b299      	uxth	r1, r3
 800b77a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b782:	4413      	add	r3, r2
 800b784:	b20a      	sxth	r2, r1
 800b786:	805a      	strh	r2, [r3, #2]
#if LV_ANTIALIAS
        if(aa) {
 800b788:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 81f3 	beq.w	800bb78 <line_draw_skew+0x73a>
            if(i != 0) {
 800b792:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 81ee 	beq.w	800bb78 <line_draw_skew+0x73a>
                if(main_line->hor) {
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	7e1b      	ldrb	r3, [r3, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 80f5 	beq.w	800b990 <line_draw_skew+0x552>
                    if(pattern[i - 1].x != pattern[i].x) {
 800b7a6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7ba:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7c2:	440b      	add	r3, r1
 800b7c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	f000 81d5 	beq.w	800bb78 <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 800b7ce:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7e6:	440b      	add	r3, r1
 800b7e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        if(main_line->sy < 0) {
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da67      	bge.n	800b8d0 <line_draw_skew+0x492>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b806:	b29a      	uxth	r2, r3
 800b808:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b810:	440b      	add	r3, r1
 800b812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b816:	b29b      	uxth	r3, r3
 800b818:	4413      	add	r3, r2
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	3b01      	subs	r3, #1
 800b81e:	b29b      	uxth	r3, r3
 800b820:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b828:	b29a      	uxth	r2, r3
 800b82a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b832:	440b      	add	r3, r1
 800b834:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4413      	add	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b842:	4413      	add	r3, r2
 800b844:	b29b      	uxth	r3, r3
 800b846:	3301      	adds	r3, #1
 800b848:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b84a:	b219      	sxth	r1, r3
 800b84c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b850:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b85a:	f8ad 3000 	strh.w	r3, [sp]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f7fd f81a 	bl	8008898 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b874:	440b      	add	r3, r1
 800b876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4413      	add	r3, r2
 800b87e:	b29b      	uxth	r3, r3
 800b880:	3301      	adds	r3, #1
 800b882:	b29b      	uxth	r3, r3
 800b884:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1, -seg_w, mask,
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b896:	440b      	add	r3, r1
 800b898:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4413      	add	r3, r2
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b8a6:	4413      	add	r3, r2
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b8ae:	b219      	sxth	r1, r3
 800b8b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b8b4:	425b      	negs	r3, r3
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	b21a      	sxth	r2, r3
 800b8ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b8c4:	f8ad 3000 	strh.w	r3, [sp]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f7fc ffe5 	bl	8008898 <lv_draw_aa_ver_seg>
 800b8ce:	e05a      	b.n	800b986 <line_draw_skew+0x548>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8e0:	440b      	add	r3, r1
 800b8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y, seg_w, mask,
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b902:	440b      	add	r3, r1
 800b904:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	4413      	add	r3, r2
 800b90c:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800b90e:	b219      	sxth	r1, r3
 800b910:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b914:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b91e:	f8ad 3000 	strh.w	r3, [sp]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f7fc ffb8 	bl	8008898 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);

                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b938:	440b      	add	r3, r1
 800b93a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	4413      	add	r3, r2
 800b942:	b29b      	uxth	r3, r3
 800b944:	3301      	adds	r3, #1
 800b946:	b29b      	uxth	r3, r3
 800b948:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y, -seg_w, mask,
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b950:	b29a      	uxth	r2, r3
 800b952:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b95a:	440b      	add	r3, r1
 800b95c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b960:	b29b      	uxth	r3, r3
 800b962:	4413      	add	r3, r2
 800b964:	b29b      	uxth	r3, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800b966:	b219      	sxth	r1, r3
 800b968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b96c:	425b      	negs	r3, r3
 800b96e:	b29b      	uxth	r3, r3
 800b970:	b21a      	sxth	r2, r3
 800b972:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b97c:	f8ad 3000 	strh.w	r3, [sp]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f7fc ff89 	bl	8008898 <lv_draw_aa_ver_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800b986:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b98a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800b98e:	e0f3      	b.n	800bb78 <line_draw_skew+0x73a>
                    }
                } else {
                    if(pattern[i - 1].y != pattern[i].y) {
 800b990:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b998:	3b01      	subs	r3, #1
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b99e:	4413      	add	r3, r2
 800b9a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b9a4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9ac:	440b      	add	r3, r1
 800b9ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	f000 80e0 	beq.w	800bb78 <line_draw_skew+0x73a>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 800b9b8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9d0:	440b      	add	r3, r1
 800b9d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                        if(main_line->sx < 0) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	da67      	bge.n	800baba <line_draw_skew+0x67c>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9fa:	440b      	add	r3, r1
 800b9fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	4413      	add	r3, r2
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3301      	adds	r3, #1
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba24:	440b      	add	r3, r1
 800ba26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4413      	add	r3, r2
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 800ba34:	b219      	sxth	r1, r3
 800ba36:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800ba3a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ba44:	f8ad 3000 	strh.w	r3, [sp]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f7fc ff6e 	bl	800892a <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba5e:	440b      	add	r3, r1
 800ba60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	4413      	add	r3, r2
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba6e:	4413      	add	r3, r2
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	3301      	adds	r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba88:	440b      	add	r3, r1
 800ba8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	4413      	add	r3, r2
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	3301      	adds	r3, #1
 800ba96:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 800ba98:	b219      	sxth	r1, r3
 800ba9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba9e:	425b      	negs	r3, r3
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	b21a      	sxth	r2, r3
 800baa4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800baa8:	9301      	str	r3, [sp, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800baae:	f8ad 3000 	strh.w	r3, [sp]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f7fc ff39 	bl	800892a <lv_draw_aa_hor_seg>
 800bab8:	e05a      	b.n	800bb70 <line_draw_skew+0x732>
                                               style->line.color, opa);
                        } else {
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baca:	440b      	add	r3, r1
 800bacc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	4413      	add	r3, r2
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	b218      	sxth	r0, r3
                                               main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w, mask,
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bade:	b29a      	uxth	r2, r3
 800bae0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bae8:	440b      	add	r3, r1
 800baea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	4413      	add	r3, r2
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800baf8:	b219      	sxth	r1, r3
 800bafa:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800bafe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bb08:	f8ad 3000 	strh.w	r3, [sp]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f7fc ff0c 	bl	800892a <lv_draw_aa_hor_seg>
                                               style->line.color, opa);

                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb22:	440b      	add	r3, r1
 800bb24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	4413      	add	r3, r2
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	b218      	sxth	r0, r3
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb40:	440b      	add	r3, r1
 800bb42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	4413      	add	r3, r2
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	b29b      	uxth	r3, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bb50:	b219      	sxth	r1, r3
 800bb52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bb56:	425b      	negs	r3, r3
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	b21a      	sxth	r2, r3
 800bb5c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bb66:	f8ad 3000 	strh.w	r3, [sp]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f7fc fedd 	bl	800892a <lv_draw_aa_hor_seg>
                                               style->line.color, opa);
                        }
                        aa_last_corner = i;
 800bb70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb74:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    for(i = 0; i < width; i++) {
 800bb78:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	3301      	adds	r3, #1
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800bb86:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800bb8a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	f6ff add4 	blt.w	800b73c <line_draw_skew+0x2fe>
#endif
    }

#if LV_ANTIALIAS
    /*Add the last part of anti-aliasing for the perpendicular ending*/
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
 800bb94:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 81f5 	beq.w	800bf88 <line_draw_skew+0xb4a>
 800bb9e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 81f0 	beq.w	800bf88 <line_draw_skew+0xb4a>
        if(main_line->hor) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	7e1b      	ldrb	r3, [r3, #24]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 80f6 	beq.w	800bd9e <line_draw_skew+0x960>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 800bbb2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bbb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbd0:	440b      	add	r3, r1
 800bbd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if(main_line->sy < 0) {
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da70      	bge.n	800bccc <line_draw_skew+0x88e>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbfa:	440b      	add	r3, r1
 800bbfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4413      	add	r3, r2
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc1c:	440b      	add	r3, r1
 800bc1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	4413      	add	r3, r2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bc2c:	4413      	add	r3, r2
 800bc2e:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bc30:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bc3e:	4413      	add	r3, r2
 800bc40:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bc42:	b21a      	sxth	r2, r3
 800bc44:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bc4e:	f8ad 3000 	strh.w	r3, [sp]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f7fc fe20 	bl	8008898 <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc68:	440b      	add	r3, r1
 800bc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	4413      	add	r3, r2
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	3301      	adds	r3, #1
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc8a:	440b      	add	r3, r1
 800bc8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4413      	add	r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bc9a:	4413      	add	r3, r2
 800bc9c:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bc9e:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bcac:	4413      	add	r3, r2
 800bcae:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bcb0:	425b      	negs	r3, r3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bcba:	9301      	str	r3, [sp, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bcc0:	f8ad 3000 	strh.w	r3, [sp]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f7fc fde7 	bl	8008898 <lv_draw_aa_ver_seg>
 800bcca:	e15d      	b.n	800bf88 <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcdc:	440b      	add	r3, r1
 800bcde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	4413      	add	r3, r2
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcfe:	440b      	add	r3, r1
 800bd00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	4413      	add	r3, r2
 800bd08:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bd0a:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bd18:	4413      	add	r3, r2
 800bd1a:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 800bd1c:	b21a      	sxth	r2, r3
 800bd1e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bd28:	f8ad 3000 	strh.w	r3, [sp]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f7fc fdb3 	bl	8008898 <lv_draw_aa_ver_seg>
                                   style->line.color, opa);

                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd42:	440b      	add	r3, r1
 800bd44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3301      	adds	r3, #1
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd64:	440b      	add	r3, r1
 800bd66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd70:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bd7e:	4413      	add	r3, r2
 800bd80:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 800bd82:	425b      	negs	r3, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	b21a      	sxth	r2, r3
 800bd88:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bd92:	f8ad 3000 	strh.w	r3, [sp]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f7fc fd7e 	bl	8008898 <lv_draw_aa_ver_seg>
 800bd9c:	e0f4      	b.n	800bf88 <line_draw_skew+0xb4a>
                                   style->line.color, opa);
            }
        } else {
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 800bd9e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bda2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bda6:	3b01      	subs	r3, #1
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdac:	4413      	add	r3, r2
 800bdae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdbc:	440b      	add	r3, r1
 800bdbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(main_line->sx < 0) {
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da70      	bge.n	800beb8 <line_draw_skew+0xa7a>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bde6:	440b      	add	r3, r1
 800bde8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	4413      	add	r3, r2
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be02:	b29a      	uxth	r2, r3
 800be04:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be0c:	440b      	add	r3, r1
 800be0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be12:	b29b      	uxth	r3, r3
 800be14:	4413      	add	r3, r2
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800be1c:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be24:	b29a      	uxth	r2, r3
 800be26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be2a:	4413      	add	r3, r2
 800be2c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 800be2e:	b21a      	sxth	r2, r3
 800be30:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800be3a:	f8ad 3000 	strh.w	r3, [sp]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f7fc fd73 	bl	800892a <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be54:	440b      	add	r3, r1
 800be56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	4413      	add	r3, r2
 800be5e:	b29a      	uxth	r2, r3
 800be60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be64:	4413      	add	r3, r2
 800be66:	b29b      	uxth	r3, r3
 800be68:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be70:	b29a      	uxth	r2, r3
 800be72:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be7a:	440b      	add	r3, r1
 800be7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be80:	b29b      	uxth	r3, r3
 800be82:	4413      	add	r3, r2
 800be84:	b29b      	uxth	r3, r3
 800be86:	3301      	adds	r3, #1
 800be88:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800be8a:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800be92:	b29a      	uxth	r2, r3
 800be94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be98:	4413      	add	r3, r2
 800be9a:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 800be9c:	425b      	negs	r3, r3
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	b21a      	sxth	r2, r3
 800bea2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800beac:	f8ad 3000 	strh.w	r3, [sp]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f7fc fd3a 	bl	800892a <lv_draw_aa_hor_seg>
 800beb6:	e067      	b.n	800bf88 <line_draw_skew+0xb4a>
                                   style->line.color, opa);

            } else {
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bec8:	440b      	add	r3, r1
 800beca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4413      	add	r3, r2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	b218      	sxth	r0, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bedc:	b29a      	uxth	r2, r3
 800bede:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bee6:	440b      	add	r3, r1
 800bee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800beec:	b29b      	uxth	r3, r3
 800beee:	4413      	add	r3, r2
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bef6:	b219      	sxth	r1, r3
                                   main_line->p1.y + pattern[aa_last_corner].y - 1, seg_w + main_line->sx, mask,
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800befe:	b29a      	uxth	r2, r3
 800bf00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf04:	4413      	add	r3, r2
 800bf06:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 800bf08:	b21a      	sxth	r2, r3
 800bf0a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bf14:	f8ad 3000 	strh.w	r3, [sp]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f7fc fd06 	bl	800892a <lv_draw_aa_hor_seg>
                                   style->line.color, opa);

                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf2e:	440b      	add	r3, r1
 800bf30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	4413      	add	r3, r2
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	b218      	sxth	r0, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf4c:	440b      	add	r3, r1
 800bf4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	4413      	add	r3, r2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	3301      	adds	r3, #1
 800bf5a:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf5c:	b219      	sxth	r1, r3
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf6a:	4413      	add	r3, r2
 800bf6c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 800bf6e:	425b      	negs	r3, r3
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	b21a      	sxth	r2, r3
 800bf74:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bf7e:	f8ad 3000 	strh.w	r3, [sp]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f7fc fcd1 	bl	800892a <lv_draw_aa_hor_seg>
#endif

#if LV_ANTIALIAS

    /*Shift the anti aliasing on the edges (-1, 1 or 0 (zero only in case width == 0))*/
    lv_coord_t aa_shift1 = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    lv_coord_t aa_shift2 = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    if(aa) {
 800bf94:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d049      	beq.n	800c030 <line_draw_skew+0xbf2>
        if(main_line->hor == false) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	7e1b      	ldrb	r3, [r3, #24]
 800bfa0:	f083 0301 	eor.w	r3, r3, #1
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d021      	beq.n	800bfee <line_draw_skew+0xbb0>
            if(main_line->sx < 0) {
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da0e      	bge.n	800bfd2 <line_draw_skew+0xb94>
                aa_shift1 = -1;
 800bfb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfb8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800bfbc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <line_draw_skew+0xb8c>
 800bfc4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800bfc8:	e000      	b.n	800bfcc <line_draw_skew+0xb8e>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800bfd0:	e02e      	b.n	800c030 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800bfd8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <line_draw_skew+0xba8>
 800bfe0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bfe4:	e000      	b.n	800bfe8 <line_draw_skew+0xbaa>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bfec:	e020      	b.n	800c030 <line_draw_skew+0xbf2>
            }
        } else {
            if(main_line->sy < 0) {
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da0e      	bge.n	800c016 <line_draw_skew+0xbd8>
                aa_shift1 = -1;
 800bff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bffc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 800c000:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <line_draw_skew+0xbd0>
 800c008:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800c00c:	e000      	b.n	800c010 <line_draw_skew+0xbd2>
 800c00e:	2300      	movs	r3, #0
 800c010:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800c014:	e00c      	b.n	800c030 <line_draw_skew+0xbf2>
            } else {
                aa_shift2 = 1;
 800c016:	2301      	movs	r3, #1
 800c018:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 800c01c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <line_draw_skew+0xbec>
 800c024:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800c028:	e000      	b.n	800c02c <line_draw_skew+0xbee>
 800c02a:	2300      	movs	r3, #0
 800c02c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }
    }
#endif

    volatile lv_point_t prev_p;
    prev_p.x = main_line->p1.x;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c036:	87bb      	strh	r3, [r7, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c03e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t draw_area;
    bool first_run = true;
 800c040:	2301      	movs	r3, #1
 800c042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if(main_line->hor) {
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	7e1b      	ldrb	r3, [r3, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 82dd 	beq.w	800c60a <line_draw_skew+0x11cc>
        while(line_next_y(main_line)) {
 800c050:	e0f3      	b.n	800c23a <line_draw_skew+0xdfc>
            for(i = 0; i < width; i++) {
 800c052:	2300      	movs	r3, #0
 800c054:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c058:	e074      	b.n	800c144 <line_draw_skew+0xd06>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800c05a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c05c:	b21b      	sxth	r3, r3
 800c05e:	b29a      	uxth	r2, r3
 800c060:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c068:	440b      	add	r3, r1
 800c06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4413      	add	r3, r2
 800c072:	b29b      	uxth	r3, r3
 800c074:	b21b      	sxth	r3, r3
 800c076:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800c078:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c07a:	b21b      	sxth	r3, r3
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c086:	440b      	add	r3, r1
 800c088:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	4413      	add	r3, r2
 800c090:	b29b      	uxth	r3, r3
 800c092:	b21b      	sxth	r3, r3
 800c094:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 800c096:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	b21b      	sxth	r3, r3
 800c0b8:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1;
 800c0ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c0be:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c0c0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c0ca:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	f7fd f968 	bl	80093a2 <lv_draw_fill>

                /* Fill the gaps
                 * When stepping in y one pixel remains empty on every corner (don't do this on the
                 * first segment ) */
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800c0d2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d02d      	beq.n	800c136 <line_draw_skew+0xcf8>
 800c0da:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c0e8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c0ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0f6:	440b      	add	r3, r1
 800c0f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d01a      	beq.n	800c136 <line_draw_skew+0xcf8>
 800c100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c104:	f083 0301 	eor.w	r3, r3, #1
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d013      	beq.n	800c136 <line_draw_skew+0xcf8>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800c10e:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800c112:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c116:	b29a      	uxth	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	b29b      	uxth	r3, r3
 800c124:	b219      	sxth	r1, r3
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c12c:	9200      	str	r2, [sp, #0]
 800c12e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	f7fd f89e 	bl	8009272 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800c136:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	3301      	adds	r3, #1
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c144:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c148:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c14c:	429a      	cmp	r2, r3
 800c14e:	db84      	blt.n	800c05a <line_draw_skew+0xc1c>
                }
            }

#if LV_ANTIALIAS
            if(aa) {
 800c150:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c154:	2b00      	cmp	r3, #0
 800c156:	d065      	beq.n	800c224 <line_draw_skew+0xde6>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c15a:	b21b      	sxth	r3, r3
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c160:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c164:	b29b      	uxth	r3, r3
 800c166:	4413      	add	r3, r2
 800c168:	b29b      	uxth	r3, r3
 800c16a:	b218      	sxth	r0, r3
 800c16c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c16e:	b21b      	sxth	r3, r3
 800c170:	b29a      	uxth	r2, r3
 800c172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4413      	add	r3, r2
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	b29b      	uxth	r3, r3
 800c186:	b219      	sxth	r1, r3
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 800c188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c18a:	b21b      	sxth	r3, r3
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c194:	b29b      	uxth	r3, r3
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c19a:	b21a      	sxth	r2, r3
 800c19c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c1a6:	f8ad 3000 	strh.w	r3, [sp]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f7fc fbbd 	bl	800892a <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c1b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1b2:	b21b      	sxth	r3, r3
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c1ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1c4:	440b      	add	r3, r1
 800c1c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4413      	add	r3, r2
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800c1d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1d4:	b21b      	sxth	r3, r3
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c1dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1e6:	440b      	add	r3, r1
 800c1e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c1fa:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c202:	b29a      	uxth	r2, r3
 800c204:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c206:	b21b      	sxth	r3, r3
 800c208:	b29b      	uxth	r3, r3
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	b29b      	uxth	r3, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 800c20e:	b21a      	sxth	r2, r3
 800c210:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c21a:	f8ad 3000 	strh.w	r3, [sp]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f7fc fb83 	bl	800892a <lv_draw_aa_hor_seg>
                                   mask, style->line.color, opa);
            }
#endif

            first_run = false;
 800c224:	2300      	movs	r3, #0
 800c226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            prev_p.x = main_line->p_act.x;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c230:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c238:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_y(main_line)) {
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 fbcf 	bl	800c9de <line_next_y>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	f47f af05 	bne.w	800c052 <line_draw_skew+0xc14>
        }

        for(i = 0; i < width; i++) {
 800c248:	2300      	movs	r3, #0
 800c24a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c24e:	e072      	b.n	800c336 <line_draw_skew+0xef8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800c250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c252:	b21b      	sxth	r3, r3
 800c254:	b29a      	uxth	r2, r3
 800c256:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c25e:	440b      	add	r3, r1
 800c260:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c264:	b29b      	uxth	r3, r3
 800c266:	4413      	add	r3, r2
 800c268:	b29b      	uxth	r3, r3
 800c26a:	b21b      	sxth	r3, r3
 800c26c:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800c26e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c270:	b21b      	sxth	r3, r3
 800c272:	b29a      	uxth	r2, r3
 800c274:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c27c:	440b      	add	r3, r1
 800c27e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c282:	b29b      	uxth	r3, r3
 800c284:	4413      	add	r3, r2
 800c286:	b29b      	uxth	r3, r3
 800c288:	b21b      	sxth	r3, r3
 800c28a:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 800c28c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c290:	b29a      	uxth	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4413      	add	r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	b21b      	sxth	r3, r3
 800c2aa:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1;
 800c2ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c2b0:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c2b2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c2bc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	f7fd f86f 	bl	80093a2 <lv_draw_fill>

            /* Fill the gaps
             * When stepping in y one pixel remains empty on every corner */
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 800c2c4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d02d      	beq.n	800c328 <line_draw_skew+0xeea>
 800c2cc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c2da:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c2de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2e8:	440b      	add	r3, r1
 800c2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d01a      	beq.n	800c328 <line_draw_skew+0xeea>
 800c2f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2f6:	f083 0301 	eor.w	r3, r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d013      	beq.n	800c328 <line_draw_skew+0xeea>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 800c300:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	; 0x34
 800c304:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c310:	b29b      	uxth	r3, r3
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	b29b      	uxth	r3, r3
 800c316:	b219      	sxth	r1, r3
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c31e:	9200      	str	r2, [sp, #0]
 800c320:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	f7fc ffa5 	bl	8009272 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800c328:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3301      	adds	r3, #1
 800c330:	b29b      	uxth	r3, r3
 800c332:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c336:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c33a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c33e:	429a      	cmp	r2, r3
 800c340:	db86      	blt.n	800c250 <line_draw_skew+0xe12>
            }
        }

#if LV_ANTIALIAS
        if(aa) {
 800c342:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8251 	beq.w	800c7ee <line_draw_skew+0x13b0>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c34c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c34e:	b21b      	sxth	r3, r3
 800c350:	b29a      	uxth	r2, r3
 800c352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c354:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	4413      	add	r3, r2
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	b218      	sxth	r0, r3
 800c360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c362:	b21b      	sxth	r3, r3
 800c364:	b29a      	uxth	r2, r3
 800c366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c368:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	4413      	add	r3, r2
 800c370:	b29a      	uxth	r2, r3
 800c372:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	b29b      	uxth	r3, r3
 800c37a:	b219      	sxth	r1, r3
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c382:	b29a      	uxth	r2, r3
 800c384:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c386:	b21b      	sxth	r3, r3
 800c388:	b29b      	uxth	r3, r3
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 800c38e:	43db      	mvns	r3, r3
 800c390:	b29b      	uxth	r3, r3
 800c392:	b21a      	sxth	r2, r3
 800c394:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c39e:	f8ad 3000 	strh.w	r3, [sp]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f7fc fac1 	bl	800892a <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800c3a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3aa:	b21b      	sxth	r3, r3
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c3b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3bc:	440b      	add	r3, r1
 800c3be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	b218      	sxth	r0, r3
 800c3ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3cc:	b21b      	sxth	r3, r3
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c3d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3de:	440b      	add	r3, r1
 800c3e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c3ee:	4413      	add	r3, r2
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	b219      	sxth	r1, r3
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c3fe:	b21b      	sxth	r3, r3
 800c400:	b29b      	uxth	r3, r3
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	b29b      	uxth	r3, r3
 800c406:	3301      	adds	r3, #1
 800c408:	b29b      	uxth	r3, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 800c40a:	b21a      	sxth	r2, r3
 800c40c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c416:	f8ad 3000 	strh.w	r3, [sp]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f7fc fa85 	bl	800892a <lv_draw_aa_hor_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
        }
#endif
    }
}
 800c420:	e1e5      	b.n	800c7ee <line_draw_skew+0x13b0>
            for(i = 0; i < width; i++) {
 800c422:	2300      	movs	r3, #0
 800c424:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c428:	e074      	b.n	800c514 <line_draw_skew+0x10d6>
                draw_area.x1 = prev_p.x + pattern[i].x;
 800c42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c42c:	b21b      	sxth	r3, r3
 800c42e:	b29a      	uxth	r2, r3
 800c430:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c438:	440b      	add	r3, r1
 800c43a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c43e:	b29b      	uxth	r3, r3
 800c440:	4413      	add	r3, r2
 800c442:	b29b      	uxth	r3, r3
 800c444:	b21b      	sxth	r3, r3
 800c446:	86bb      	strh	r3, [r7, #52]	; 0x34
                draw_area.y1 = prev_p.y + pattern[i].y;
 800c448:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c44a:	b21b      	sxth	r3, r3
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c456:	440b      	add	r3, r1
 800c458:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	4413      	add	r3, r2
 800c460:	b29b      	uxth	r3, r3
 800c462:	b21b      	sxth	r3, r3
 800c464:	86fb      	strh	r3, [r7, #54]	; 0x36
                draw_area.x2 = draw_area.x1;
 800c466:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c46a:	873b      	strh	r3, [r7, #56]	; 0x38
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 800c46c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c470:	b29a      	uxth	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	4413      	add	r3, r2
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c480:	b21b      	sxth	r3, r3
 800c482:	b29b      	uxth	r3, r3
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	b29b      	uxth	r3, r3
 800c488:	3b01      	subs	r3, #1
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	b21b      	sxth	r3, r3
 800c48e:	877b      	strh	r3, [r7, #58]	; 0x3a
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c490:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c49a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	f7fc ff80 	bl	80093a2 <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800c4a2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d02d      	beq.n	800c506 <line_draw_skew+0x10c8>
 800c4aa:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c4b8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c4bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4c6:	440b      	add	r3, r1
 800c4c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d01a      	beq.n	800c506 <line_draw_skew+0x10c8>
 800c4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d4:	f083 0301 	eor.w	r3, r3, #1
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d013      	beq.n	800c506 <line_draw_skew+0x10c8>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800c4de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	b218      	sxth	r0, r3
 800c4f2:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c4fc:	9200      	str	r2, [sp, #0]
 800c4fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	f7fc feb6 	bl	8009272 <lv_draw_px>
            for(i = 0; i < width; i++) {
 800c506:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	3301      	adds	r3, #1
 800c50e:	b29b      	uxth	r3, r3
 800c510:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c514:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c518:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c51c:	429a      	cmp	r2, r3
 800c51e:	db84      	blt.n	800c42a <line_draw_skew+0xfec>
            if(aa) {
 800c520:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c524:	2b00      	cmp	r3, #0
 800c526:	d065      	beq.n	800c5f4 <line_draw_skew+0x11b6>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c528:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c52a:	b21b      	sxth	r3, r3
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c530:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c534:	b29b      	uxth	r3, r3
 800c536:	4413      	add	r3, r2
 800c538:	b29a      	uxth	r2, r3
 800c53a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	b29b      	uxth	r3, r3
 800c542:	b218      	sxth	r0, r3
 800c544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c546:	b21b      	sxth	r3, r3
 800c548:	b29a      	uxth	r2, r3
 800c54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c54c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c550:	b29b      	uxth	r3, r3
 800c552:	4413      	add	r3, r2
 800c554:	b29b      	uxth	r3, r3
 800c556:	b219      	sxth	r1, r3
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 800c558:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c55a:	b21b      	sxth	r3, r3
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c564:	b29b      	uxth	r3, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c56a:	b21a      	sxth	r2, r3
 800c56c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c576:	f8ad 3000 	strh.w	r3, [sp]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f7fc f98c 	bl	8008898 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c580:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c582:	b21b      	sxth	r3, r3
 800c584:	b29a      	uxth	r2, r3
 800c586:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c58a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c58e:	3b01      	subs	r3, #1
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c594:	440b      	add	r3, r1
 800c596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	4413      	add	r3, r2
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c5a4:	4413      	add	r3, r2
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	b218      	sxth	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800c5aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5ac:	b21b      	sxth	r3, r3
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c5b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5be:	440b      	add	r3, r1
 800c5c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c5ca:	b219      	sxth	r1, r3
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5d6:	b21b      	sxth	r3, r3
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	b29b      	uxth	r3, r3
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 800c5de:	b21a      	sxth	r2, r3
 800c5e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c5ea:	f8ad 3000 	strh.w	r3, [sp]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f7fc f952 	bl	8008898 <lv_draw_aa_ver_seg>
            first_run = false;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            prev_p.x = main_line->p_act.x;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c600:	87bb      	strh	r3, [r7, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c608:	87fb      	strh	r3, [r7, #62]	; 0x3e
        while(line_next_x(main_line)) {
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 fa05 	bl	800ca1a <line_next_x>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	f47f af05 	bne.w	800c422 <line_draw_skew+0xfe4>
        for(i = 0; i < width; i++) {
 800c618:	2300      	movs	r3, #0
 800c61a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c61e:	e072      	b.n	800c706 <line_draw_skew+0x12c8>
            draw_area.x1 = prev_p.x + pattern[i].x;
 800c620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c622:	b21b      	sxth	r3, r3
 800c624:	b29a      	uxth	r2, r3
 800c626:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c62e:	440b      	add	r3, r1
 800c630:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4413      	add	r3, r2
 800c638:	b29b      	uxth	r3, r3
 800c63a:	b21b      	sxth	r3, r3
 800c63c:	86bb      	strh	r3, [r7, #52]	; 0x34
            draw_area.y1 = prev_p.y + pattern[i].y;
 800c63e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c640:	b21b      	sxth	r3, r3
 800c642:	b29a      	uxth	r2, r3
 800c644:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c64c:	440b      	add	r3, r1
 800c64e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c652:	b29b      	uxth	r3, r3
 800c654:	4413      	add	r3, r2
 800c656:	b29b      	uxth	r3, r3
 800c658:	b21b      	sxth	r3, r3
 800c65a:	86fb      	strh	r3, [r7, #54]	; 0x36
            draw_area.x2 = draw_area.x1;
 800c65c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c660:	873b      	strh	r3, [r7, #56]	; 0x38
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 800c662:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c666:	b29a      	uxth	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	4413      	add	r3, r2
 800c672:	b29a      	uxth	r2, r3
 800c674:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c676:	b21b      	sxth	r3, r3
 800c678:	b29b      	uxth	r3, r3
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	b21b      	sxth	r3, r3
 800c680:	877b      	strh	r3, [r7, #58]	; 0x3a
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 800c682:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c68c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	f7fc fe87 	bl	80093a2 <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 800c694:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d02d      	beq.n	800c6f8 <line_draw_skew+0x12ba>
 800c69c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c6aa:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6b8:	440b      	add	r3, r1
 800c6ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d01a      	beq.n	800c6f8 <line_draw_skew+0x12ba>
 800c6c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6c6:	f083 0301 	eor.w	r3, r3, #1
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d013      	beq.n	800c6f8 <line_draw_skew+0x12ba>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 800c6d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	b218      	sxth	r0, r3
 800c6e4:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c6ee:	9200      	str	r2, [sp, #0]
 800c6f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	f7fc fdbd 	bl	8009272 <lv_draw_px>
        for(i = 0; i < width; i++) {
 800c6f8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	3301      	adds	r3, #1
 800c700:	b29b      	uxth	r3, r3
 800c702:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800c706:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800c70a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800c70e:	429a      	cmp	r2, r3
 800c710:	db86      	blt.n	800c620 <line_draw_skew+0x11e2>
        if(aa) {
 800c712:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800c716:	2b00      	cmp	r3, #0
 800c718:	d069      	beq.n	800c7ee <line_draw_skew+0x13b0>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c71a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c71c:	b21b      	sxth	r3, r3
 800c71e:	b29a      	uxth	r2, r3
 800c720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c722:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c726:	b29b      	uxth	r3, r3
 800c728:	4413      	add	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	b29b      	uxth	r3, r3
 800c734:	b218      	sxth	r0, r3
 800c736:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c738:	b21b      	sxth	r3, r3
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c73e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c742:	b29b      	uxth	r3, r3
 800c744:	4413      	add	r3, r2
 800c746:	b29b      	uxth	r3, r3
 800c748:	b219      	sxth	r1, r3
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c750:	b29a      	uxth	r2, r3
 800c752:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c754:	b21b      	sxth	r3, r3
 800c756:	b29b      	uxth	r3, r3
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 800c75c:	43db      	mvns	r3, r3
 800c75e:	b29b      	uxth	r3, r3
 800c760:	b21a      	sxth	r2, r3
 800c762:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c766:	9301      	str	r3, [sp, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c76c:	f8ad 3000 	strh.w	r3, [sp]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f7fc f891 	bl	8008898 <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800c776:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c778:	b21b      	sxth	r3, r3
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c784:	3b01      	subs	r3, #1
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c78a:	440b      	add	r3, r1
 800c78c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c790:	b29b      	uxth	r3, r3
 800c792:	4413      	add	r3, r2
 800c794:	b29a      	uxth	r2, r3
 800c796:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800c79a:	4413      	add	r3, r2
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	b218      	sxth	r0, r3
 800c7a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800c7aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7b4:	440b      	add	r3, r1
 800c7b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	4413      	add	r3, r2
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	b219      	sxth	r1, r3
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7cc:	b21b      	sxth	r3, r3
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	b29b      	uxth	r3, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 800c7d8:	b21a      	sxth	r2, r3
 800c7da:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c7e4:	f8ad 3000 	strh.w	r3, [sp]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f7fc f855 	bl	8008898 <lv_draw_aa_ver_seg>
}
 800c7ee:	bf00      	nop
 800c7f0:	3770      	adds	r7, #112	; 0x70
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <line_init>:

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 800c7f6:	b480      	push	{r7}
 800c7f8:	b085      	sub	sp, #20
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
    line->p1.x = p1->x;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	801a      	strh	r2, [r3, #0]
    line->p1.y = p1->y;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	805a      	strh	r2, [r3, #2]
    line->p2.x = p2->x;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	809a      	strh	r2, [r3, #4]
    line->p2.y = p2->y;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	80da      	strh	r2, [r3, #6]

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c830:	461a      	mov	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfb8      	it	lt
 800c83e:	425b      	neglt	r3, r3
 800c840:	b21a      	sxth	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	819a      	strh	r2, [r3, #12]
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	da01      	bge.n	800c85a <line_init+0x64>
 800c856:	2201      	movs	r2, #1
 800c858:	e001      	b.n	800c85e <line_init+0x68>
 800c85a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	81da      	strh	r2, [r3, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c868:	461a      	mov	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	bfb8      	it	lt
 800c876:	425b      	neglt	r3, r3
 800c878:	b21a      	sxth	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	821a      	strh	r2, [r3, #16]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	da01      	bge.n	800c892 <line_init+0x9c>
 800c88e:	2201      	movs	r2, #1
 800c890:	e001      	b.n	800c896 <line_init+0xa0>
 800c892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	825a      	strh	r2, [r3, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	dd07      	ble.n	800c8ba <line_init+0xc4>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c8b0:	0fda      	lsrs	r2, r3, #31
 800c8b2:	4413      	add	r3, r2
 800c8b4:	105b      	asrs	r3, r3, #1
 800c8b6:	b21b      	sxth	r3, r3
 800c8b8:	e007      	b.n	800c8ca <line_init+0xd4>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8c0:	425b      	negs	r3, r3
 800c8c2:	0fda      	lsrs	r2, r3, #31
 800c8c4:	4413      	add	r3, r2
 800c8c6:	105b      	asrs	r3, r3, #1
 800c8c8:	b21b      	sxth	r3, r3
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	8293      	strh	r3, [r2, #20]
    line->e2  = 0;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	82da      	strh	r2, [r3, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	bfcc      	ite	gt
 800c8e4:	2301      	movgt	r3, #1
 800c8e6:	2300      	movle	r3, #0
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	761a      	strb	r2, [r3, #24]

    line->p_act.x = line->p1.x;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	811a      	strh	r2, [r3, #8]
    line->p_act.y = line->p1.y;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	815a      	strh	r2, [r3, #10]
}
 800c902:	bf00      	nop
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <line_next>:

static bool line_next(line_draw_t * line)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c922:	429a      	cmp	r2, r3
 800c924:	d109      	bne.n	800c93a <line_next+0x2c>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c932:	429a      	cmp	r2, r3
 800c934:	d101      	bne.n	800c93a <line_next+0x2c>
 800c936:	2300      	movs	r3, #0
 800c938:	e04b      	b.n	800c9d2 <line_next+0xc4>
    line->e2 = line->err;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	82da      	strh	r2, [r3, #22]
    if(line->e2 > -line->dx) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c952:	425b      	negs	r3, r3
 800c954:	429a      	cmp	r2, r3
 800c956:	dd19      	ble.n	800c98c <line_next+0x7e>
        line->err -= line->dy;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c966:	b29b      	uxth	r3, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	b21a      	sxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	829a      	strh	r2, [r3, #20]
        line->p_act.x += line->sx;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c978:	b29a      	uxth	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c980:	b29b      	uxth	r3, r3
 800c982:	4413      	add	r3, r2
 800c984:	b29b      	uxth	r3, r3
 800c986:	b21a      	sxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	811a      	strh	r2, [r3, #8]
    }
    if(line->e2 < line->dy) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c998:	429a      	cmp	r2, r3
 800c99a:	da19      	bge.n	800c9d0 <line_next+0xc2>
        line->err += line->dx;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	4413      	add	r3, r2
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	b21a      	sxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	829a      	strh	r2, [r3, #20]
        line->p_act.y += line->sy;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	b21a      	sxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	815a      	strh	r2, [r3, #10]
    }
    return true;
 800c9d0:	2301      	movs	r3, #1
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <line_next_y>:
 * Iterate until step one in y direction.
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
    lv_coord_t last_y = line->p_act.y;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff ff8e 	bl	800c90e <line_next>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f083 0301 	eor.w	r3, r3, #1
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <line_next_y+0x24>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e007      	b.n	800ca12 <line_next_y+0x34>
    } while(last_y == line->p_act.y);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ca08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d0ed      	beq.n	800c9ec <line_next_y+0xe>

    return true;
 800ca10:	2301      	movs	r3, #1
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <line_next_x>:
 * Iterate until step one in x direction.
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
    lv_coord_t last_x = line->p_act.x;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	891b      	ldrh	r3, [r3, #8]
 800ca26:	81fb      	strh	r3, [r7, #14]

    do {
        if(!line_next(line)) return false;
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff ff70 	bl	800c90e <line_next>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f083 0301 	eor.w	r3, r3, #1
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <line_next_x+0x24>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e007      	b.n	800ca4e <line_next_x+0x34>
    } while(last_x == line->p_act.x);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d0ed      	beq.n	800ca28 <line_next_x+0xe>

    return true;
 800ca4c:	2301      	movs	r3, #1
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <lv_color_mix>:
{
 800ca56:	b480      	push	{r7}
 800ca58:	b085      	sub	sp, #20
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	80b8      	strh	r0, [r7, #4]
 800ca5e:	8039      	strh	r1, [r7, #0]
 800ca60:	4613      	mov	r3, r2
 800ca62:	70fb      	strb	r3, [r7, #3]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ca64:	793b      	ldrb	r3, [r7, #4]
 800ca66:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	fb12 f303 	smulbb	r3, r2, r3
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	783b      	ldrb	r3, [r7, #0]
 800ca7a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	b299      	uxth	r1, r3
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	fb11 f303 	smulbb	r3, r1, r3
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	4413      	add	r3, r2
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	0a1b      	lsrs	r3, r3, #8
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	f003 031f 	and.w	r3, r3, #31
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	7a3b      	ldrb	r3, [r7, #8]
 800caa0:	f362 03c7 	bfi	r3, r2, #3, #5
 800caa4:	723b      	strb	r3, [r7, #8]
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 800caa6:	793b      	ldrb	r3, [r7, #4]
 800caa8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800caac:	b2db      	uxtb	r3, r3
 800caae:	b29b      	uxth	r3, r3
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	797b      	ldrb	r3, [r7, #5]
 800cab6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4413      	add	r3, r2
 800cac0:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 800cac2:	783b      	ldrb	r3, [r7, #0]
 800cac4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	b29b      	uxth	r3, r3
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	b29a      	uxth	r2, r3
 800cad0:	787b      	ldrb	r3, [r7, #1]
 800cad2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	b29b      	uxth	r3, r3
 800cada:	4413      	add	r3, r2
 800cadc:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	89fa      	ldrh	r2, [r7, #14]
 800cae4:	fb12 f303 	smulbb	r3, r2, r3
 800cae8:	b29a      	uxth	r2, r3
 800caea:	78fb      	ldrb	r3, [r7, #3]
 800caec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	89b9      	ldrh	r1, [r7, #12]
 800caf4:	fb11 f303 	smulbb	r3, r1, r3
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	4413      	add	r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	0a1b      	lsrs	r3, r3, #8
 800cb00:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 800cb02:	897b      	ldrh	r3, [r7, #10]
 800cb04:	08db      	lsrs	r3, r3, #3
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f003 0307 	and.w	r3, r3, #7
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	7a3b      	ldrb	r3, [r7, #8]
 800cb10:	f362 0302 	bfi	r3, r2, #0, #3
 800cb14:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 800cb16:	897b      	ldrh	r3, [r7, #10]
 800cb18:	f003 0307 	and.w	r3, r3, #7
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	7a7b      	ldrb	r3, [r7, #9]
 800cb20:	f362 1347 	bfi	r3, r2, #5, #3
 800cb24:	727b      	strb	r3, [r7, #9]
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800cb26:	797b      	ldrb	r3, [r7, #5]
 800cb28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	fb12 f303 	smulbb	r3, r2, r3
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	787b      	ldrb	r3, [r7, #1]
 800cb3c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	b299      	uxth	r1, r3
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	fb11 f303 	smulbb	r3, r1, r3
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	4413      	add	r3, r2
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	0a1b      	lsrs	r3, r3, #8
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	7a7b      	ldrb	r3, [r7, #9]
 800cb62:	f362 0304 	bfi	r3, r2, #0, #5
 800cb66:	727b      	strb	r3, [r7, #9]
    return ret;
 800cb68:	893b      	ldrh	r3, [r7, #8]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <lv_area_copy>:
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 800cb80:	2208      	movs	r2, #8
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f01a fb4d 	bl	8027224 <memcpy>
}
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <lv_area_get_width>:
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	3301      	adds	r3, #1
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	b21b      	sxth	r3, r3
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	3301      	adds	r3, #1
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	b21b      	sxth	r3, r3
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <lv_draw_rect>:
 * @param mask the rectangle will be drawn only in this mask
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
 800cbfa:	70fb      	strb	r3, [r7, #3]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7ff ffdf 	bl	800cbc0 <lv_area_get_height>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dd4e      	ble.n	800cca6 <lv_draw_rect+0xb8>
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f7ff ffc2 	bl	800cb92 <lv_area_get_width>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dd48      	ble.n	800cca6 <lv_draw_rect+0xb8>

#if LV_USE_SHADOW
    if(style->body.shadow.width != 0) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d005      	beq.n	800cc2a <lv_draw_rect+0x3c>
        lv_draw_shadow(coords, mask, style, opa_scale);
 800cc1e:	78fb      	ldrb	r3, [r7, #3]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f002 ff63 	bl	800faf0 <lv_draw_shadow>
    }
#endif

    /* If the object is out of the mask there is nothing to draw.
     * Draw shadow before it because the shadow is out of `coords`*/
    if(lv_area_is_on(coords, mask) == false) return;
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f006 f96e 	bl	8012f0e <lv_area_is_on>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f083 0301 	eor.w	r3, r3, #1
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d135      	bne.n	800ccaa <lv_draw_rect+0xbc>

    if(style->body.opa > LV_OPA_MIN) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7a1b      	ldrb	r3, [r3, #8]
 800cc42:	2b10      	cmp	r3, #16
 800cc44:	d910      	bls.n	800cc68 <lv_draw_rect+0x7a>
        lv_draw_rect_main_mid(coords, mask, style, opa_scale);
 800cc46:	78fb      	ldrb	r3, [r7, #3]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 f830 	bl	800ccb2 <lv_draw_rect_main_mid>

        if(style->body.radius != 0) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <lv_draw_rect+0x7a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f000 f927 	bl	800ceb6 <lv_draw_rect_main_corner>
        }
    }

    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d01c      	beq.n	800ccac <lv_draw_rect+0xbe>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7b9b      	ldrb	r3, [r3, #14]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d018      	beq.n	800ccac <lv_draw_rect+0xbe>
       style->body.border.opa >= LV_OPA_MIN) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	7bdb      	ldrb	r3, [r3, #15]
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800cc7e:	2b0f      	cmp	r3, #15
 800cc80:	d914      	bls.n	800ccac <lv_draw_rect+0xbe>
        lv_draw_rect_border_straight(coords, mask, style, opa_scale);
 800cc82:	78fb      	ldrb	r3, [r7, #3]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	68b9      	ldr	r1, [r7, #8]
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f001 f93d 	bl	800df08 <lv_draw_rect_border_straight>

        if(style->body.radius != 0) {
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d009      	beq.n	800ccac <lv_draw_rect+0xbe>
            lv_draw_rect_border_corner(coords, mask, style, opa_scale);
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	68b9      	ldr	r1, [r7, #8]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f001 fcdf 	bl	800e662 <lv_draw_rect_border_corner>
 800cca4:	e002      	b.n	800ccac <lv_draw_rect+0xbe>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cca6:	bf00      	nop
 800cca8:	e000      	b.n	800ccac <lv_draw_rect+0xbe>
    if(lv_area_is_on(coords, mask) == false) return;
 800ccaa:	bf00      	nop
        }
    }
}
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <lv_draw_rect_main_mid>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_mid(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b08e      	sub	sp, #56	; 0x38
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	607a      	str	r2, [r7, #4]
 800ccbe:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ccc6:	863b      	strh	r3, [r7, #48]	; 0x30
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ccc8:	f7fa fde8 	bl	800789c <lv_refr_get_disp_refreshing>
 800cccc:	4603      	mov	r3, r0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f005 fcb4 	bl	801263c <lv_disp_get_antialiasing>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    lv_color_t mcolor = style->body.main_color;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	885b      	ldrh	r3, [r3, #2]
 800ccde:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_color_t gcolor = style->body.grad_color;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	889b      	ldrh	r3, [r3, #4]
 800cce4:	843b      	strh	r3, [r7, #32]
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f7ff ff6a 	bl	800cbc0 <lv_area_get_height>
 800ccec:	4603      	mov	r3, r0
 800ccee:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t width  = lv_area_get_width(coords);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7ff ff4e 	bl	800cb92 <lv_area_get_width>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800ccfa:	78fb      	ldrb	r3, [r7, #3]
 800ccfc:	2bff      	cmp	r3, #255	; 0xff
 800ccfe:	d102      	bne.n	800cd06 <lv_draw_rect_main_mid+0x54>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7a1b      	ldrb	r3, [r3, #8]
 800cd04:	e00a      	b.n	800cd1c <lv_draw_rect_main_mid+0x6a>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	7a1b      	ldrb	r3, [r3, #8]
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	fb12 f303 	smulbb	r3, r2, r3
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cd20:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800cd24:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800cd28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f003 fdd8 	bl	80108e0 <lv_draw_cont_radius_corr>
 800cd30:	4603      	mov	r3, r0
 800cd32:	863b      	strh	r3, [r7, #48]	; 0x30

    /*If the radius is too big then there is no body*/
    if(radius > height / 2) return;
 800cd34:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800cd36:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cd3a:	0fd9      	lsrs	r1, r3, #31
 800cd3c:	440b      	add	r3, r1
 800cd3e:	105b      	asrs	r3, r3, #1
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	429a      	cmp	r2, r3
 800cd44:	f300 80b3 	bgt.w	800ceae <lv_draw_rect_main_mid+0x1fc>

    lv_area_t work_area;
    work_area.x1 = coords->x1;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd4e:	833b      	strh	r3, [r7, #24]
    work_area.x2 = coords->x2;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cd56:	83bb      	strh	r3, [r7, #28]

    if(mcolor.full == gcolor.full) {
 800cd58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd5a:	8c3b      	ldrh	r3, [r7, #32]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d140      	bne.n	800cde2 <lv_draw_rect_main_mid+0x130>
        work_area.y1 = coords->y1 + radius;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	b21b      	sxth	r3, r3
 800cd70:	837b      	strh	r3, [r7, #26]
        work_area.y2 = coords->y2 - radius;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	b21b      	sxth	r3, r3
 800cd82:	83fb      	strh	r3, [r7, #30]

        if(style->body.radius != 0) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d020      	beq.n	800cdd0 <lv_draw_rect_main_mid+0x11e>

            if(aa) {
 800cd8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00e      	beq.n	800cdb4 <lv_draw_rect_main_mid+0x102>
                work_area.y1 += 2;
 800cd96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	3302      	adds	r3, #2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	b21b      	sxth	r3, r3
 800cda2:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 2;
 800cda4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	3b02      	subs	r3, #2
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	b21b      	sxth	r3, r3
 800cdb0:	83fb      	strh	r3, [r7, #30]
 800cdb2:	e00d      	b.n	800cdd0 <lv_draw_rect_main_mid+0x11e>
            } else {
                work_area.y1 += 1;
 800cdb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	3301      	adds	r3, #1
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	b21b      	sxth	r3, r3
 800cdc0:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 1;
 800cdc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	b21b      	sxth	r3, r3
 800cdce:	83fb      	strh	r3, [r7, #30]
            }
        }

        lv_draw_fill(&work_area, mask, mcolor, opa);
 800cdd0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cdd4:	f107 0018 	add.w	r0, r7, #24
 800cdd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	f7fc fae1 	bl	80093a2 <lv_draw_fill>
 800cde0:	e066      	b.n	800ceb0 <lv_draw_rect_main_mid+0x1fe>
    } else {
        lv_coord_t row;
        lv_coord_t row_start = coords->y1 + radius;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cdec:	4413      	add	r3, r2
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t row_end   = coords->y2 - radius;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_color_t act_color;

        if(style->body.radius != 0) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d014      	beq.n	800ce36 <lv_draw_rect_main_mid+0x184>
            if(aa) {
 800ce0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d008      	beq.n	800ce26 <lv_draw_rect_main_mid+0x174>
                row_start += 2;
 800ce14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce16:	3302      	adds	r3, #2
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 2;
 800ce1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ce1e:	3b02      	subs	r3, #2
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	867b      	strh	r3, [r7, #50]	; 0x32
 800ce24:	e007      	b.n	800ce36 <lv_draw_rect_main_mid+0x184>
            } else {
                row_start += 1;
 800ce26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce28:	3301      	adds	r3, #1
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	86bb      	strh	r3, [r7, #52]	; 0x34
                row_end -= 1;
 800ce2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ce30:	3b01      	subs	r3, #1
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	867b      	strh	r3, [r7, #50]	; 0x32
            }
        }
        if(row_start < 0) row_start = 0;
 800ce36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	da01      	bge.n	800ce42 <lv_draw_rect_main_mid+0x190>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	86bb      	strh	r3, [r7, #52]	; 0x34

        for(row = row_start; row <= row_end; row++) {
 800ce42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce44:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ce46:	e02b      	b.n	800cea0 <lv_draw_rect_main_mid+0x1ee>
            work_area.y1 = row;
 800ce48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce4a:	837b      	strh	r3, [r7, #26]
            work_area.y2 = row;
 800ce4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce4e:	83fb      	strh	r3, [r7, #30]
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4613      	mov	r3, r2
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	1a9a      	subs	r2, r3, r2
 800ce66:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ce6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800ce72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce76:	461a      	mov	r2, r3
 800ce78:	8c39      	ldrh	r1, [r7, #32]
 800ce7a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800ce7c:	f7ff fdeb 	bl	800ca56 <lv_color_mix>
 800ce80:	4603      	mov	r3, r0
 800ce82:	82bb      	strh	r3, [r7, #20]

            lv_draw_fill(&work_area, mask, act_color, opa);
 800ce84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ce88:	f107 0018 	add.w	r0, r7, #24
 800ce8c:	8aba      	ldrh	r2, [r7, #20]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	f7fc fa87 	bl	80093a2 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
 800ce94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cea0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800cea4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	ddcd      	ble.n	800ce48 <lv_draw_rect_main_mid+0x196>
 800ceac:	e000      	b.n	800ceb0 <lv_draw_rect_main_mid+0x1fe>
    if(radius > height / 2) return;
 800ceae:	bf00      	nop
        }
    }
}
 800ceb0:	3738      	adds	r7, #56	; 0x38
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <lv_draw_rect_main_corner>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                     lv_opa_t opa_scale)
{
 800ceb6:	b5b0      	push	{r4, r5, r7, lr}
 800ceb8:	b0a4      	sub	sp, #144	; 0x90
 800ceba:	af02      	add	r7, sp, #8
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
 800cec2:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ceca:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800cece:	f7fa fce5 	bl	800789c <lv_refr_get_disp_refreshing>
 800ced2:	4603      	mov	r3, r0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f005 fbb1 	bl	801263c <lv_disp_get_antialiasing>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    lv_color_t mcolor = style->body.main_color;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	885b      	ldrh	r3, [r3, #2]
 800cee4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_color_t gcolor = style->body.grad_color;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	889b      	ldrh	r3, [r3, #4]
 800ceec:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	2bff      	cmp	r3, #255	; 0xff
 800cef4:	d102      	bne.n	800cefc <lv_draw_rect_main_corner+0x46>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7a1b      	ldrb	r3, [r3, #8]
 800cefa:	e00a      	b.n	800cf12 <lv_draw_rect_main_corner+0x5c>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7a1b      	ldrb	r3, [r3, #8]
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	78fb      	ldrb	r3, [r7, #3]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	fb12 f303 	smulbb	r3, r2, r3
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	0a1b      	lsrs	r3, r3, #8
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7ff fe52 	bl	800cbc0 <lv_area_get_height>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    lv_coord_t width  = lv_area_get_width(coords);
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f7ff fe35 	bl	800cb92 <lv_area_get_width>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cf2e:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800cf32:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 800cf36:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f003 fcd0 	bl	80108e0 <lv_draw_cont_radius_corr>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf52:	4413      	add	r3, r2
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	4413      	add	r3, r2
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	b21b      	sxth	r3, r3
 800cf62:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    lt_origo.y = coords->y1 + radius + aa;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf72:	4413      	add	r3, r2
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    lb_origo.x = coords->x1 + radius + aa;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf92:	4413      	add	r3, r2
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	4413      	add	r3, r2
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	b21b      	sxth	r3, r3
 800cfa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	b21b      	sxth	r3, r3
 800cfc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    rt_origo.x = coords->x2 - radius - aa;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	b21b      	sxth	r3, r3
 800cfe2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    rt_origo.y = coords->y1 + radius + aa;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cff2:	4413      	add	r3, r2
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	4413      	add	r3, r2
 800cffe:	b29b      	uxth	r3, r3
 800d000:	b21b      	sxth	r3, r3
 800d002:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    rb_origo.x = coords->x2 - radius - aa;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	b29a      	uxth	r2, r3
 800d016:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	b29b      	uxth	r3, r3
 800d020:	b21b      	sxth	r3, r3
 800d022:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    rb_origo.y = coords->y2 - radius - aa;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	b29a      	uxth	r2, r3
 800d036:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	b29b      	uxth	r3, r3
 800d040:	b21b      	sxth	r3, r3
 800d042:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mid_bot_area;
    lv_area_t edge_bot_area;

    lv_point_t cir;
    lv_coord_t cir_tmp;
    lv_circ_init(&cir, &cir_tmp, radius);
 800d046:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800d04a:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800d04e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d052:	4618      	mov	r0, r3
 800d054:	f005 ffb9 	bl	8012fca <lv_circ_init>

    /*Init the areas*/
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d058:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d062:	b29b      	uxth	r3, r3
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	b29b      	uxth	r3, r3
 800d068:	b219      	sxth	r1, r3
 800d06a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d06e:	b29a      	uxth	r2, r3
 800d070:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d074:	b29b      	uxth	r3, r3
 800d076:	4413      	add	r3, r2
 800d078:	b29b      	uxth	r3, r3
 800d07a:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d07c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d080:	b29a      	uxth	r2, r3
 800d082:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d086:	b29b      	uxth	r3, r3
 800d088:	4413      	add	r3, r2
 800d08a:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d08c:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d08e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d092:	b29a      	uxth	r2, r3
 800d094:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4413      	add	r3, r2
 800d09c:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d09e:	b21b      	sxth	r3, r3
 800d0a0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	462b      	mov	r3, r5
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	f005 fddb 	bl	8012c64 <lv_area_set>

    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0ae:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	b219      	sxth	r1, r3
 800d0c0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4413      	add	r3, r2
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d0d2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	4413      	add	r3, r2
 800d0e0:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0e2:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d0e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	4413      	add	r3, r2
 800d0f2:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d0f4:	b21b      	sxth	r3, r3
 800d0f6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	4622      	mov	r2, r4
 800d100:	f005 fdb0 	bl	8012c64 <lv_area_set>

    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d104:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d108:	b29a      	uxth	r2, r3
 800d10a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d10e:	b29b      	uxth	r3, r3
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	b29b      	uxth	r3, r3
 800d114:	b219      	sxth	r1, r3
 800d116:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d120:	b29b      	uxth	r3, r3
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	b29b      	uxth	r3, r3
 800d126:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d128:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d132:	b29b      	uxth	r3, r3
 800d134:	4413      	add	r3, r2
 800d136:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d138:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d13a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d13e:	b29a      	uxth	r2, r3
 800d140:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d144:	b29b      	uxth	r3, r3
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d14a:	b21b      	sxth	r3, r3
 800d14c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	462b      	mov	r3, r5
 800d154:	4622      	mov	r2, r4
 800d156:	f005 fd85 	bl	8012c64 <lv_area_set>

    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d15a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d15e:	b29a      	uxth	r2, r3
 800d160:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d164:	b29b      	uxth	r3, r3
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	b29b      	uxth	r3, r3
 800d16a:	b219      	sxth	r1, r3
 800d16c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d170:	b29a      	uxth	r2, r3
 800d172:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d176:	b29b      	uxth	r3, r3
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d17e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d182:	b29a      	uxth	r2, r3
 800d184:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d188:	b29b      	uxth	r3, r3
 800d18a:	4413      	add	r3, r2
 800d18c:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d18e:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d190:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d194:	b29a      	uxth	r2, r3
 800d196:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	462b      	mov	r3, r5
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	f005 fd5a 	bl	8012c64 <lv_area_set>
#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    lv_coord_t out_y_seg_end   = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    lv_coord_t out_x_last      = radius;
 800d1bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d1c0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    lv_color_t aa_color_hor_top;
    lv_color_t aa_color_hor_bottom;
    lv_color_t aa_color_ver;
#endif

    while(lv_circ_cont(&cir)) {
 800d1c4:	e367      	b.n	800d896 <lv_draw_rect_main_corner+0x9e0>
#if LV_ANTIALIAS
        if(aa) {
 800d1c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 8197 	beq.w	800d4fe <lv_draw_rect_main_corner+0x648>
            /*New step in y on the outter circle*/
            if(out_x_last != cir.x) {
 800d1d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d1d4:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	f000 8190 	beq.w	800d4fe <lv_draw_rect_main_corner+0x648>
                out_y_seg_end       = cir.y;
 800d1de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d1e0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800d1e4:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d1e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800d1f4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d1f8:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800d1fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d1fe:	837b      	strh	r3, [r7, #26]

                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800d200:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d204:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	461a      	mov	r2, r3
 800d20c:	4613      	mov	r3, r2
 800d20e:	021b      	lsls	r3, r3, #8
 800d210:	1a9a      	subs	r2, r3, r2
 800d212:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d216:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800d21e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d222:	461a      	mov	r2, r3
 800d224:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800d228:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800d22c:	f7ff fc13 	bl	800ca56 <lv_color_mix>
 800d230:	4603      	mov	r3, r0
 800d232:	84bb      	strh	r3, [r7, #36]	; 0x24
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800d234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d238:	461a      	mov	r2, r3
 800d23a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d23e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d242:	f7ff fc08 	bl	800ca56 <lv_color_mix>
 800d246:	4603      	mov	r3, r0
 800d248:	843b      	strh	r3, [r7, #32]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800d24a:	2300      	movs	r3, #0
 800d24c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800d250:	e147      	b.n	800d4e2 <lv_draw_rect_main_corner+0x62c>
                    lv_opa_t aa_opa;
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800d252:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d256:	2b01      	cmp	r3, #1
 800d258:	dd0c      	ble.n	800d274 <lv_draw_rect_main_corner+0x3be>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800d25a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800d25e:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800d262:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d266:	4618      	mov	r0, r3
 800d268:	f003 fb7c 	bl	8010964 <antialias_get_opa_circ>
 800d26c:	4603      	mov	r3, r0
 800d26e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d272:	e00f      	b.n	800d294 <lv_draw_rect_main_corner+0x3de>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800d274:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800d278:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 800d27c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d280:	4618      	mov	r0, r3
 800d282:	f7fb facf 	bl	8008824 <lv_draw_aa_get_opa>
 800d286:	4603      	mov	r3, r0
 800d288:	461a      	mov	r2, r3
 800d28a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d28e:	1a9b      	subs	r3, r3, r2
 800d290:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
                    }

                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800d294:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d298:	b29a      	uxth	r2, r3
 800d29a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d2a8:	4413      	add	r3, r2
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	b218      	sxth	r0, r3
 800d2ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	4413      	add	r3, r2
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	3301      	adds	r3, #1
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	b219      	sxth	r1, r3
 800d2c4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	8c3b      	ldrh	r3, [r7, #32]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	f7fb ffd0 	bl	8009272 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800d2d2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	b218      	sxth	r0, r3
 800d2ec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	4413      	add	r3, r2
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	b219      	sxth	r1, r3
 800d302:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	8c3b      	ldrh	r3, [r7, #32]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	f7fb ffb1 	bl	8009272 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800d310:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d314:	b29a      	uxth	r2, r3
 800d316:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	b29a      	uxth	r2, r3
 800d320:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	b29b      	uxth	r3, r3
 800d328:	b218      	sxth	r0, r3
 800d32a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d32e:	b29a      	uxth	r2, r3
 800d330:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d334:	b29b      	uxth	r3, r3
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	b29b      	uxth	r3, r3
 800d33a:	3b01      	subs	r3, #1
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	b219      	sxth	r1, r3
 800d340:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	f7fb ff92 	bl	8009272 <lv_draw_px>
                               aa_color_hor_top, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800d34e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d352:	b29a      	uxth	r2, r3
 800d354:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4413      	add	r3, r2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d362:	4413      	add	r3, r2
 800d364:	b29b      	uxth	r3, r3
 800d366:	b218      	sxth	r0, r3
 800d368:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d372:	b29b      	uxth	r3, r3
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	b29b      	uxth	r3, r3
 800d378:	3b01      	subs	r3, #1
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	b219      	sxth	r1, r3
 800d37e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	f7fb ff73 	bl	8009272 <lv_draw_px>
                               aa_color_hor_top, aa_opa);

                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800d38c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800d390:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800d394:	1ad2      	subs	r2, r2, r3
 800d396:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800d39a:	4413      	add	r3, r2
 800d39c:	461a      	mov	r2, r3
 800d39e:	4613      	mov	r3, r2
 800d3a0:	021b      	lsls	r3, r3, #8
 800d3a2:	1a9a      	subs	r2, r3, r2
 800d3a4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d3a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800d3b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d3ba:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d3be:	f7ff fb4a 	bl	800ca56 <lv_color_mix>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800d3c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	4413      	add	r3, r2
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	b218      	sxth	r0, r3
 800d3dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d3f0:	4413      	add	r3, r2
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	b219      	sxth	r1, r3
 800d3f6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	8bbb      	ldrh	r3, [r7, #28]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	f7fb ff37 	bl	8009272 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800d404:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d408:	b29a      	uxth	r2, r3
 800d40a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	b29b      	uxth	r3, r3
 800d414:	3b01      	subs	r3, #1
 800d416:	b29b      	uxth	r3, r3
 800d418:	b218      	sxth	r0, r3
 800d41a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d41e:	b29a      	uxth	r2, r3
 800d420:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d424:	b29b      	uxth	r3, r3
 800d426:	4413      	add	r3, r2
 800d428:	b29a      	uxth	r2, r3
 800d42a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d42e:	4413      	add	r3, r2
 800d430:	b29b      	uxth	r3, r3
 800d432:	b219      	sxth	r1, r3
 800d434:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	8bbb      	ldrh	r3, [r7, #28]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	f7fb ff18 	bl	8009272 <lv_draw_px>
                               aa_color_ver, aa_opa);

                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800d442:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d446:	461a      	mov	r2, r3
 800d448:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800d44c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800d450:	f7ff fb01 	bl	800ca56 <lv_color_mix>
 800d454:	4603      	mov	r3, r0
 800d456:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800d458:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d462:	b29b      	uxth	r3, r3
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	b29b      	uxth	r3, r3
 800d468:	3b01      	subs	r3, #1
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	b218      	sxth	r0, r3
 800d46e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d472:	b29a      	uxth	r2, r3
 800d474:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	b29b      	uxth	r3, r3
 800d486:	b219      	sxth	r1, r3
 800d488:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	8bbb      	ldrh	r3, [r7, #28]
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	f7fb feee 	bl	8009272 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800d496:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	4413      	add	r3, r2
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	b218      	sxth	r0, r3
 800d4ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	b219      	sxth	r1, r3
 800d4c6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	8bbb      	ldrh	r3, [r7, #28]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	f7fb fecf 	bl	8009272 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800d4d4:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	3301      	adds	r3, #1
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800d4e2:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800d4e6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	f6ff aeb1 	blt.w	800d252 <lv_draw_rect_main_corner+0x39c>
                               aa_color_ver, aa_opa);
                }

                out_x_last      = cir.x;
 800d4f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d4f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                out_y_seg_start = out_y_seg_end;
 800d4f6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800d4fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            }
        }
#endif
        uint8_t edge_top_refr = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        uint8_t mid_top_refr  = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        uint8_t mid_bot_refr  = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        uint8_t edge_bot_refr = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        /* If a new row coming draw the previous
         * The y coordinate can remain the same so wait for a new*/
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800d516:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d51a:	461a      	mov	r2, r3
 800d51c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d520:	4619      	mov	r1, r3
 800d522:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d526:	440b      	add	r3, r1
 800d528:	429a      	cmp	r2, r3
 800d52a:	d002      	beq.n	800d532 <lv_draw_rect_main_corner+0x67c>
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800d532:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d536:	461a      	mov	r2, r3
 800d538:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d53c:	4619      	mov	r1, r3
 800d53e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d542:	440b      	add	r3, r1
 800d544:	429a      	cmp	r2, r3
 800d546:	d002      	beq.n	800d54e <lv_draw_rect_main_corner+0x698>
 800d548:	2301      	movs	r3, #1
 800d54a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800d54e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d552:	461a      	mov	r2, r3
 800d554:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d558:	4619      	mov	r1, r3
 800d55a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d55e:	1acb      	subs	r3, r1, r3
 800d560:	429a      	cmp	r2, r3
 800d562:	d002      	beq.n	800d56a <lv_draw_rect_main_corner+0x6b4>
 800d564:	2301      	movs	r3, #1
 800d566:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800d56a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d56e:	461a      	mov	r2, r3
 800d570:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d574:	4619      	mov	r1, r3
 800d576:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d57a:	1acb      	subs	r3, r1, r3
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d002      	beq.n	800d586 <lv_draw_rect_main_corner+0x6d0>
 800d580:	2301      	movs	r3, #1
 800d582:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

        /*Draw the areas which are not disabled*/
        if(edge_top_refr != 0) {
 800d586:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d030      	beq.n	800d5f0 <lv_draw_rect_main_corner+0x73a>
            if(mcolor.full == gcolor.full)
 800d58e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d592:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d596:	429a      	cmp	r2, r3
 800d598:	d104      	bne.n	800d5a4 <lv_draw_rect_main_corner+0x6ee>
                act_color = mcolor;
 800d59a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d59e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d5a2:	e01c      	b.n	800d5de <lv_draw_rect_main_corner+0x728>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	021b      	lsls	r3, r3, #8
 800d5b8:	1a9a      	subs	r2, r3, r2
 800d5ba:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d5c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d5d0:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d5d4:	f7ff fa3f 	bl	800ca56 <lv_color_mix>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800d5de:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d5e2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d5e6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	f7fb fed9 	bl	80093a2 <lv_draw_fill>
        }

        if(mid_top_refr != 0) {
 800d5f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d030      	beq.n	800d65a <lv_draw_rect_main_corner+0x7a4>
            if(mcolor.full == gcolor.full)
 800d5f8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d5fc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d600:	429a      	cmp	r2, r3
 800d602:	d104      	bne.n	800d60e <lv_draw_rect_main_corner+0x758>
                act_color = mcolor;
 800d604:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d608:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d60c:	e01c      	b.n	800d648 <lv_draw_rect_main_corner+0x792>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d614:	461a      	mov	r2, r3
 800d616:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	461a      	mov	r2, r3
 800d61e:	4613      	mov	r3, r2
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	1a9a      	subs	r2, r3, r2
 800d624:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d628:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d634:	461a      	mov	r2, r3
 800d636:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d63a:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d63e:	f7ff fa0a 	bl	800ca56 <lv_color_mix>
 800d642:	4603      	mov	r3, r0
 800d644:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800d648:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d64c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d650:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	f7fb fea4 	bl	80093a2 <lv_draw_fill>
        }

        if(mid_bot_refr != 0) {
 800d65a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d030      	beq.n	800d6c4 <lv_draw_rect_main_corner+0x80e>
            if(mcolor.full == gcolor.full)
 800d662:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d666:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d104      	bne.n	800d678 <lv_draw_rect_main_corner+0x7c2>
                act_color = mcolor;
 800d66e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d672:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d676:	e01c      	b.n	800d6b2 <lv_draw_rect_main_corner+0x7fc>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d67e:	461a      	mov	r2, r3
 800d680:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	461a      	mov	r2, r3
 800d688:	4613      	mov	r3, r2
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	1a9a      	subs	r2, r3, r2
 800d68e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d692:	fbb2 f3f3 	udiv	r3, r2, r3
 800d696:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d69a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d6a4:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d6a8:	f7ff f9d5 	bl	800ca56 <lv_color_mix>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800d6b2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d6b6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d6ba:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	f7fb fe6f 	bl	80093a2 <lv_draw_fill>
        }

        if(edge_bot_refr != 0) {
 800d6c4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d030      	beq.n	800d72e <lv_draw_rect_main_corner+0x878>

            if(mcolor.full == gcolor.full)
 800d6cc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d6d0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d104      	bne.n	800d6e2 <lv_draw_rect_main_corner+0x82c>
                act_color = mcolor;
 800d6d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d6dc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d6e0:	e01c      	b.n	800d71c <lv_draw_rect_main_corner+0x866>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	1a9a      	subs	r2, r3, r2
 800d6f8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800d704:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d708:	461a      	mov	r2, r3
 800d70a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d70e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d712:	f7ff f9a0 	bl	800ca56 <lv_color_mix>
 800d716:	4603      	mov	r3, r0
 800d718:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800d71c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d720:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d724:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	f7fb fe3a 	bl	80093a2 <lv_draw_fill>
        }

        /*Save the current coordinates*/
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d72e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d732:	b29a      	uxth	r2, r3
 800d734:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d738:	b29b      	uxth	r3, r3
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	b219      	sxth	r1, r3
 800d740:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d744:	b29a      	uxth	r2, r3
 800d746:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4413      	add	r3, r2
 800d74e:	b29b      	uxth	r3, r3
 800d750:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d752:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d756:	b29a      	uxth	r2, r3
 800d758:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4413      	add	r3, r2
 800d760:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d762:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800d764:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d768:	b29a      	uxth	r2, r3
 800d76a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d76e:	b29b      	uxth	r3, r3
 800d770:	4413      	add	r3, r2
 800d772:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800d774:	b21b      	sxth	r3, r3
 800d776:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	462b      	mov	r3, r5
 800d77e:	4622      	mov	r2, r4
 800d780:	f005 fa70 	bl	8012c64 <lv_area_set>

        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d784:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800d788:	b29a      	uxth	r2, r3
 800d78a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d78e:	b29b      	uxth	r3, r3
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	b29b      	uxth	r3, r3
 800d794:	b219      	sxth	r1, r3
 800d796:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	4413      	add	r3, r2
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d7a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d7b8:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800d7ba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4413      	add	r3, r2
 800d7c8:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800d7ca:	b21b      	sxth	r3, r3
 800d7cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	462b      	mov	r3, r5
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	f005 fa45 	bl	8012c64 <lv_area_set>

        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d7da:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	b219      	sxth	r1, r3
 800d7ec:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d7fe:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d802:	b29a      	uxth	r2, r3
 800d804:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d808:	b29b      	uxth	r3, r3
 800d80a:	4413      	add	r3, r2
 800d80c:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d80e:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800d810:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d814:	b29a      	uxth	r2, r3
 800d816:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800d820:	b21b      	sxth	r3, r3
 800d822:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	462b      	mov	r3, r5
 800d82a:	4622      	mov	r2, r4
 800d82c:	f005 fa1a 	bl	8012c64 <lv_area_set>

        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d830:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800d834:	b29a      	uxth	r2, r3
 800d836:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	b29b      	uxth	r3, r3
 800d840:	b219      	sxth	r1, r3
 800d842:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800d846:	b29a      	uxth	r2, r3
 800d848:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	b29b      	uxth	r3, r3
 800d852:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d854:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800d858:	b29a      	uxth	r2, r3
 800d85a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d85e:	b29b      	uxth	r3, r3
 800d860:	4413      	add	r3, r2
 800d862:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d864:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800d866:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d870:	b29b      	uxth	r3, r3
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800d876:	b21b      	sxth	r3, r3
 800d878:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	462b      	mov	r3, r5
 800d880:	4622      	mov	r2, r4
 800d882:	f005 f9ef 	bl	8012c64 <lv_area_set>

        lv_circ_next(&cir, &cir_tmp);
 800d886:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d88a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f005 fbc9 	bl	8013028 <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 800d896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d89a:	4618      	mov	r0, r3
 800d89c:	f005 fbaf 	bl	8012ffe <lv_circ_cont>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f47f ac8f 	bne.w	800d1c6 <lv_draw_rect_main_corner+0x310>
    }

    if(mcolor.full == gcolor.full)
 800d8a8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d8ac:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d104      	bne.n	800d8be <lv_draw_rect_main_corner+0xa08>
        act_color = mcolor;
 800d8b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d8b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d8bc:	e01c      	b.n	800d8f8 <lv_draw_rect_main_corner+0xa42>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	021b      	lsls	r3, r3, #8
 800d8d2:	1a9a      	subs	r2, r3, r2
 800d8d4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800d8e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d8ea:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d8ee:	f7ff f8b2 	bl	800ca56 <lv_color_mix>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800d8f8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d8fc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d900:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	f7fb fd4c 	bl	80093a2 <lv_draw_fill>

    if(edge_top_area.y1 != mid_top_area.y1) {
 800d90a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800d90e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d912:	429a      	cmp	r2, r3
 800d914:	d030      	beq.n	800d978 <lv_draw_rect_main_corner+0xac2>

        if(mcolor.full == gcolor.full)
 800d916:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d91a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d91e:	429a      	cmp	r2, r3
 800d920:	d104      	bne.n	800d92c <lv_draw_rect_main_corner+0xa76>
            act_color = mcolor;
 800d922:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d926:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d92a:	e01c      	b.n	800d966 <lv_draw_rect_main_corner+0xab0>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d932:	461a      	mov	r2, r3
 800d934:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	4613      	mov	r3, r2
 800d93e:	021b      	lsls	r3, r3, #8
 800d940:	1a9a      	subs	r2, r3, r2
 800d942:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d946:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800d94e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d952:	461a      	mov	r2, r3
 800d954:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d958:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d95c:	f7ff f87b 	bl	800ca56 <lv_color_mix>
 800d960:	4603      	mov	r3, r0
 800d962:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800d966:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d96a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d96e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d972:	68b9      	ldr	r1, [r7, #8]
 800d974:	f7fb fd15 	bl	80093a2 <lv_draw_fill>
    }

    if(mcolor.full == gcolor.full)
 800d978:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d97c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d980:	429a      	cmp	r2, r3
 800d982:	d104      	bne.n	800d98e <lv_draw_rect_main_corner+0xad8>
        act_color = mcolor;
 800d984:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d988:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d98c:	e01c      	b.n	800d9c8 <lv_draw_rect_main_corner+0xb12>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d994:	461a      	mov	r2, r3
 800d996:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	461a      	mov	r2, r3
 800d99e:	4613      	mov	r3, r2
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	1a9a      	subs	r2, r3, r2
 800d9a4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800d9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800d9b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800d9ba:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800d9be:	f7ff f84a 	bl	800ca56 <lv_color_mix>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800d9c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d9cc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d9d0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d9d4:	68b9      	ldr	r1, [r7, #8]
 800d9d6:	f7fb fce4 	bl	80093a2 <lv_draw_fill>

    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800d9da:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800d9de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d030      	beq.n	800da48 <lv_draw_rect_main_corner+0xb92>

        if(mcolor.full == gcolor.full)
 800d9e6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d9ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d104      	bne.n	800d9fc <lv_draw_rect_main_corner+0xb46>
            act_color = mcolor;
 800d9f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d9f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800d9fa:	e01c      	b.n	800da36 <lv_draw_rect_main_corner+0xb80>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800da02:	461a      	mov	r2, r3
 800da04:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	461a      	mov	r2, r3
 800da0c:	4613      	mov	r3, r2
 800da0e:	021b      	lsls	r3, r3, #8
 800da10:	1a9a      	subs	r2, r3, r2
 800da12:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800da16:	fbb2 f3f3 	udiv	r3, r2, r3
 800da1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800da1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800da22:	461a      	mov	r2, r3
 800da24:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800da28:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800da2c:	f7ff f813 	bl	800ca56 <lv_color_mix>
 800da30:	4603      	mov	r3, r0
 800da32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800da36:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800da3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800da3e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800da42:	68b9      	ldr	r1, [r7, #8]
 800da44:	f7fb fcad 	bl	80093a2 <lv_draw_fill>
    }

#if LV_ANTIALIAS
    if(aa) {
 800da48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 8257 	beq.w	800df00 <lv_draw_rect_main_corner+0x104a>
        /*The first and the last line is not drawn*/
        edge_top_area.x1 = coords->x1 + radius + 2;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800da5e:	4413      	add	r3, r2
 800da60:	b29b      	uxth	r3, r3
 800da62:	3302      	adds	r3, #2
 800da64:	b29b      	uxth	r3, r3
 800da66:	b21b      	sxth	r3, r3
 800da68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        edge_top_area.x2 = coords->x2 - radius - 2;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da72:	b29a      	uxth	r2, r3
 800da74:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	3b02      	subs	r3, #2
 800da7e:	b29b      	uxth	r3, r3
 800da80:	b21b      	sxth	r3, r3
 800da82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        edge_top_area.y1 = coords->y1;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y1;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800da9a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800daa4:	8852      	ldrh	r2, [r2, #2]
 800daa6:	68b9      	ldr	r1, [r7, #8]
 800daa8:	f7fb fc7b 	bl	80093a2 <lv_draw_fill>

        edge_top_area.y1 = coords->y2;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dab2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        edge_top_area.y2 = coords->y2;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dabc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800dac0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800daca:	8892      	ldrh	r2, [r2, #4]
 800dacc:	68b9      	ldr	r1, [r7, #8]
 800dace:	f7fb fc68 	bl	80093a2 <lv_draw_fill>

        /*Last parts of the anti-alias*/
        out_y_seg_end       = cir.y;
 800dad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dad4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800dad8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800dadc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800dae8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800daec:	82bb      	strh	r3, [r7, #20]
        aa_p.y = out_y_seg_start;
 800daee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800daf2:	82fb      	strh	r3, [r7, #22]

        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800daf4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800daf8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	461a      	mov	r2, r3
 800db00:	4613      	mov	r3, r2
 800db02:	021b      	lsls	r3, r3, #8
 800db04:	1a9a      	subs	r2, r3, r2
 800db06:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800db0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800db12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db16:	461a      	mov	r2, r3
 800db18:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800db1c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800db20:	f7fe ff99 	bl	800ca56 <lv_color_mix>
 800db24:	4603      	mov	r3, r0
 800db26:	843b      	strh	r3, [r7, #32]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800db28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800db2c:	461a      	mov	r2, r3
 800db2e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800db32:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800db36:	f7fe ff8e 	bl	800ca56 <lv_color_mix>
 800db3a:	4603      	mov	r3, r0
 800db3c:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800db3e:	2300      	movs	r3, #0
 800db40:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800db44:	e136      	b.n	800ddb4 <lv_draw_rect_main_corner+0xefe>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800db46:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800db4a:	f9b7 107a 	ldrsh.w	r1, [r7, #122]	; 0x7a
 800db4e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800db52:	4618      	mov	r0, r3
 800db54:	f7fa fe66 	bl	8008824 <lv_draw_aa_get_opa>
 800db58:	4603      	mov	r3, r0
 800db5a:	461a      	mov	r2, r3
 800db5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800db60:	1a9b      	subs	r3, r3, r2
 800db62:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800db66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db70:	b29b      	uxth	r3, r3
 800db72:	4413      	add	r3, r2
 800db74:	b29a      	uxth	r2, r3
 800db76:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db7a:	4413      	add	r3, r2
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	b218      	sxth	r0, r3
 800db80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800db84:	b29a      	uxth	r2, r3
 800db86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4413      	add	r3, r2
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3301      	adds	r3, #1
 800db92:	b29b      	uxth	r3, r3
 800db94:	b219      	sxth	r1, r3
 800db96:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	f7fb fb67 	bl	8009272 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800dba4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	b218      	sxth	r0, r3
 800dbbe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4413      	add	r3, r2
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3301      	adds	r3, #1
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	b219      	sxth	r1, r3
 800dbd4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	f7fb fb48 	bl	8009272 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800dbe2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	b218      	sxth	r0, r3
 800dbfc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	b219      	sxth	r1, r3
 800dc12:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	8c3b      	ldrh	r3, [r7, #32]
 800dc1a:	68ba      	ldr	r2, [r7, #8]
 800dc1c:	f7fb fb29 	bl	8009272 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800dc20:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4413      	add	r3, r2
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc34:	4413      	add	r3, r2
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b218      	sxth	r0, r3
 800dc3a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	b219      	sxth	r1, r3
 800dc50:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	8c3b      	ldrh	r3, [r7, #32]
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	f7fb fb0a 	bl	8009272 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);

            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800dc5e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800dc62:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800dc66:	1ad2      	subs	r2, r2, r3
 800dc68:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800dc6c:	4413      	add	r3, r2
 800dc6e:	461a      	mov	r2, r3
 800dc70:	4613      	mov	r3, r2
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	1a9a      	subs	r2, r3, r2
 800dc76:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800dc7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800dc82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc86:	461a      	mov	r2, r3
 800dc88:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800dc8c:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800dc90:	f7fe fee1 	bl	800ca56 <lv_color_mix>
 800dc94:	4603      	mov	r3, r0
 800dc96:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800dc98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	4413      	add	r3, r2
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	3301      	adds	r3, #1
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	b218      	sxth	r0, r3
 800dcae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4413      	add	r3, r2
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	b219      	sxth	r1, r3
 800dcc8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	8bbb      	ldrh	r3, [r7, #28]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	f7fb face 	bl	8009272 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800dcd6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3b01      	subs	r3, #1
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	b218      	sxth	r0, r3
 800dcec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	4413      	add	r3, r2
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd00:	4413      	add	r3, r2
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	b219      	sxth	r1, r3
 800dd06:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	8bbb      	ldrh	r3, [r7, #28]
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	f7fb faaf 	bl	8009272 <lv_draw_px>
                       aa_opa);

            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800dd14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dd18:	461a      	mov	r2, r3
 800dd1a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800dd1e:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800dd22:	f7fe fe98 	bl	800ca56 <lv_color_mix>
 800dd26:	4603      	mov	r3, r0
 800dd28:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800dd2a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	b218      	sxth	r0, r3
 800dd40:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	b219      	sxth	r1, r3
 800dd5a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	8bbb      	ldrh	r3, [r7, #28]
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	f7fb fa85 	bl	8009272 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800dd68:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	4413      	add	r3, r2
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	3301      	adds	r3, #1
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	b218      	sxth	r0, r3
 800dd7e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	b219      	sxth	r1, r3
 800dd98:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	8bbb      	ldrh	r3, [r7, #28]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	f7fb fa66 	bl	8009272 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800dda6:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	3301      	adds	r3, #1
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800ddb4:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800ddb8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	f6ff aec2 	blt.w	800db46 <lv_draw_rect_main_corner+0xc90>
                       aa_opa);
        }

        /*In some cases the last pixel is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800ddc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ddd2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ddd6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ddda:	429a      	cmp	r2, r3
 800dddc:	f040 8090 	bne.w	800df00 <lv_draw_rect_main_corner+0x104a>
            aa_p.x = out_x_last;
 800dde0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800dde4:	82bb      	strh	r3, [r7, #20]
            aa_p.y = out_x_last;
 800dde6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ddea:	82fb      	strh	r3, [r7, #22]

            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800ddec:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	021b      	lsls	r3, r3, #8
 800ddf4:	1a9a      	subs	r2, r3, r2
 800ddf6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800ddfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800de02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de06:	461a      	mov	r2, r3
 800de08:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800de0c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
 800de10:	f7fe fe21 	bl	800ca56 <lv_color_mix>
 800de14:	4603      	mov	r3, r0
 800de16:	84bb      	strh	r3, [r7, #36]	; 0x24
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800de18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de1c:	461a      	mov	r2, r3
 800de1e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800de22:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800de26:	f7fe fe16 	bl	800ca56 <lv_color_mix>
 800de2a:	4603      	mov	r3, r0
 800de2c:	843b      	strh	r3, [r7, #32]

            lv_opa_t aa_opa = opa >> 1;
 800de2e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de32:	085b      	lsrs	r3, r3, #1
 800de34:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800de38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de42:	b29b      	uxth	r3, r3
 800de44:	4413      	add	r3, r2
 800de46:	b29b      	uxth	r3, r3
 800de48:	b218      	sxth	r0, r3
 800de4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de4e:	b29a      	uxth	r2, r3
 800de50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de54:	b29b      	uxth	r3, r3
 800de56:	4413      	add	r3, r2
 800de58:	b29b      	uxth	r3, r3
 800de5a:	b219      	sxth	r1, r3
 800de5c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	8c3b      	ldrh	r3, [r7, #32]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	f7fb fa04 	bl	8009272 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800de6a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800de6e:	b29a      	uxth	r2, r3
 800de70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de74:	b29b      	uxth	r3, r3
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	b29b      	uxth	r3, r3
 800de7a:	b218      	sxth	r0, r3
 800de7c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800de80:	b29a      	uxth	r2, r3
 800de82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800de86:	b29b      	uxth	r3, r3
 800de88:	4413      	add	r3, r2
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	b219      	sxth	r1, r3
 800de8e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	8c3b      	ldrh	r3, [r7, #32]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	f7fb f9eb 	bl	8009272 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800de9c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	b29b      	uxth	r3, r3
 800deac:	b218      	sxth	r0, r3
 800deae:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800deb8:	b29b      	uxth	r3, r3
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	b29b      	uxth	r3, r3
 800debe:	b219      	sxth	r1, r3
 800dec0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	f7fb f9d2 	bl	8009272 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800dece:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4413      	add	r3, r2
 800dedc:	b29b      	uxth	r3, r3
 800dede:	b218      	sxth	r0, r3
 800dee0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800deea:	b29b      	uxth	r3, r3
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	b29b      	uxth	r3, r3
 800def0:	b219      	sxth	r1, r3
 800def2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	f7fb f9b9 	bl	8009272 <lv_draw_px>
                       aa_opa);
        }
    }
#endif
}
 800df00:	bf00      	nop
 800df02:	3788      	adds	r7, #136	; 0x88
 800df04:	46bd      	mov	sp, r7
 800df06:	bdb0      	pop	{r4, r5, r7, pc}

0800df08 <lv_draw_rect_border_straight>:
 * @param rstyle pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         lv_opa_t opa_scale)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08c      	sub	sp, #48	; 0x30
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df1c:	857b      	strh	r3, [r7, #42]	; 0x2a
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800df1e:	f7f9 fcbd 	bl	800789c <lv_refr_get_disp_refreshing>
 800df22:	4603      	mov	r3, r0
 800df24:	4618      	mov	r0, r3
 800df26:	f004 fb89 	bl	801263c <lv_disp_get_antialiasing>
 800df2a:	4603      	mov	r3, r0
 800df2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    lv_coord_t width  = lv_area_get_width(coords);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f7fe fe2e 	bl	800cb92 <lv_area_get_width>
 800df36:	4603      	mov	r3, r0
 800df38:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t height = lv_area_get_height(coords);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7fe fe40 	bl	800cbc0 <lv_area_get_height>
 800df40:	4603      	mov	r3, r0
 800df42:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t bwidth = style->body.border.width;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	899b      	ldrh	r3, [r3, #12]
 800df48:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	2bff      	cmp	r3, #255	; 0xff
 800df4e:	d102      	bne.n	800df56 <lv_draw_rect_border_straight+0x4e>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7bdb      	ldrb	r3, [r3, #15]
 800df54:	e00a      	b.n	800df6c <lv_draw_rect_border_straight+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	7bdb      	ldrb	r3, [r3, #15]
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	78fb      	ldrb	r3, [r7, #3]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	fb12 f303 	smulbb	r3, r2, r3
 800df64:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800df66:	0a1b      	lsrs	r3, r3, #8
 800df68:	b29b      	uxth	r3, r3
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    lv_border_part_t part = style->body.border.part;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7b9b      	ldrb	r3, [r3, #14]
 800df74:	f887 3020 	strb.w	r3, [r7, #32]
    lv_color_t color      = style->body.border.color;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	895b      	ldrh	r3, [r3, #10]
 800df7c:	83bb      	strh	r3, [r7, #28]
    lv_area_t work_area;
    lv_coord_t length_corr = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t corner_size = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*the 0 px border width drawn as 1 px, so decrement the b_width*/
    bwidth--;
 800df86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	3b01      	subs	r3, #1
 800df8e:	b29b      	uxth	r3, r3
 800df90:	847b      	strh	r3, [r7, #34]	; 0x22

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800df92:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800df96:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800df9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df9c:	4618      	mov	r0, r3
 800df9e:	f002 fc9f 	bl	80108e0 <lv_draw_cont_radius_corr>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(radius < bwidth) {
 800dfa6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800dfa8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dfac:	429a      	cmp	r2, r3
 800dfae:	da0c      	bge.n	800dfca <lv_draw_rect_border_straight+0xc2>
        length_corr = bwidth - radius - aa;
 800dfb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        corner_size = bwidth;
 800dfc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dfc8:	e006      	b.n	800dfd8 <lv_draw_rect_border_straight+0xd0>
    } else {
        corner_size = radius + aa;
 800dfca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfd2:	4413      	add	r3, r2
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    /*If radius == 0 is a special case*/
    if(style->body.radius == 0) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f040 80ca 	bne.w	800e178 <lv_draw_rect_border_straight+0x270>
        /*Left top corner*/
        if(part & LV_BORDER_TOP) {
 800dfe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfe8:	f003 0302 	and.w	r3, r3, #2
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01c      	beq.n	800e02a <lv_draw_rect_border_straight+0x122>
            work_area.x1 = coords->x1;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dff6:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dffe:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e006:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e00e:	b29a      	uxth	r2, r3
 800e010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e012:	4413      	add	r3, r2
 800e014:	b29b      	uxth	r3, r3
 800e016:	b21b      	sxth	r3, r3
 800e018:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e01a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e01e:	f107 0014 	add.w	r0, r7, #20
 800e022:	8bba      	ldrh	r2, [r7, #28]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	f7fb f9bc 	bl	80093a2 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & LV_BORDER_RIGHT) {
 800e02a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e02e:	f003 0308 	and.w	r3, r3, #8
 800e032:	2b00      	cmp	r3, #0
 800e034:	d03a      	beq.n	800e0ac <lv_draw_rect_border_straight+0x1a4>
            work_area.x1 = coords->x2 - bwidth;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	b29b      	uxth	r3, r3
 800e044:	b21b      	sxth	r3, r3
 800e046:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e04e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e056:	b29a      	uxth	r2, r3
 800e058:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e05c:	f003 0302 	and.w	r3, r3, #2
 800e060:	2b00      	cmp	r3, #0
 800e062:	d003      	beq.n	800e06c <lv_draw_rect_border_straight+0x164>
 800e064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e066:	3301      	adds	r3, #1
 800e068:	b29b      	uxth	r3, r3
 800e06a:	e000      	b.n	800e06e <lv_draw_rect_border_straight+0x166>
 800e06c:	2300      	movs	r3, #0
 800e06e:	4413      	add	r3, r2
 800e070:	b29b      	uxth	r3, r3
 800e072:	b21b      	sxth	r3, r3
 800e074:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d003      	beq.n	800e092 <lv_draw_rect_border_straight+0x18a>
 800e08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e08c:	3301      	adds	r3, #1
 800e08e:	b29b      	uxth	r3, r3
 800e090:	e000      	b.n	800e094 <lv_draw_rect_border_straight+0x18c>
 800e092:	2300      	movs	r3, #0
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	b29b      	uxth	r3, r3
 800e098:	b21b      	sxth	r3, r3
 800e09a:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e09c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e0a0:	f107 0014 	add.w	r0, r7, #20
 800e0a4:	8bba      	ldrh	r2, [r7, #28]
 800e0a6:	68b9      	ldr	r1, [r7, #8]
 800e0a8:	f7fb f97b 	bl	80093a2 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & LV_BORDER_LEFT) {
 800e0ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0b0:	f003 0304 	and.w	r3, r3, #4
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d03a      	beq.n	800e12e <lv_draw_rect_border_straight+0x226>
            work_area.x1 = coords->x1;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0be:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + bwidth;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ca:	4413      	add	r3, r2
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	b21b      	sxth	r3, r3
 800e0d0:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0de:	f003 0302 	and.w	r3, r3, #2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <lv_draw_rect_border_straight+0x1e6>
 800e0e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	e000      	b.n	800e0f0 <lv_draw_rect_border_straight+0x1e8>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	b21b      	sxth	r3, r3
 800e0f6:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e104:	f003 0301 	and.w	r3, r3, #1
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <lv_draw_rect_border_straight+0x20c>
 800e10c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e10e:	3301      	adds	r3, #1
 800e110:	b29b      	uxth	r3, r3
 800e112:	e000      	b.n	800e116 <lv_draw_rect_border_straight+0x20e>
 800e114:	2300      	movs	r3, #0
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	b29b      	uxth	r3, r3
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e11e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e122:	f107 0014 	add.w	r0, r7, #20
 800e126:	8bba      	ldrh	r2, [r7, #28]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	f7fb f93a 	bl	80093a2 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & LV_BORDER_BOTTOM) {
 800e12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 828f 	beq.w	800e65a <lv_draw_rect_border_straight+0x752>
            work_area.x1 = coords->x1;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e142:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e14a:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e152:	b29a      	uxth	r2, r3
 800e154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	b29b      	uxth	r3, r3
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e164:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e166:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e16a:	f107 0014 	add.w	r0, r7, #20
 800e16e:	8bba      	ldrh	r2, [r7, #28]
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	f7fb f916 	bl	80093a2 <lv_draw_fill>
 800e176:	e271      	b.n	800e65c <lv_draw_rect_border_straight+0x754>
        }
        return;
    }

    /* Modify the corner_size if corner is drawn */
    corner_size++;
 800e178:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	3301      	adds	r3, #1
 800e180:	b29b      	uxth	r3, r3
 800e182:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /*Depending one which part's are drawn modify the area lengths */
    if(part & LV_BORDER_TOP)
 800e184:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d009      	beq.n	800e1a4 <lv_draw_rect_border_straight+0x29c>
        work_area.y1 = coords->y1 + corner_size;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e196:	b29a      	uxth	r2, r3
 800e198:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e19a:	4413      	add	r3, r2
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	b21b      	sxth	r3, r3
 800e1a0:	82fb      	strh	r3, [r7, #22]
 800e1a2:	e008      	b.n	800e1b6 <lv_draw_rect_border_straight+0x2ae>
    else
        work_area.y1 = coords->y1 + radius;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1ae:	4413      	add	r3, r2
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	82fb      	strh	r3, [r7, #22]

    if(part & LV_BORDER_BOTTOM)
 800e1b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d009      	beq.n	800e1d6 <lv_draw_rect_border_straight+0x2ce>
        work_area.y2 = coords->y2 - corner_size;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	b21b      	sxth	r3, r3
 800e1d2:	837b      	strh	r3, [r7, #26]
 800e1d4:	e008      	b.n	800e1e8 <lv_draw_rect_border_straight+0x2e0>
    else
        work_area.y2 = coords->y2 - radius;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	837b      	strh	r3, [r7, #26]

    /*Left border*/
    if(part & LV_BORDER_LEFT) {
 800e1e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1ec:	f003 0304 	and.w	r3, r3, #4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d013      	beq.n	800e21c <lv_draw_rect_border_straight+0x314>
        work_area.x1 = coords->x1;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1fa:	82bb      	strh	r3, [r7, #20]
        work_area.x2 = work_area.x1 + bwidth;
 800e1fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e200:	b29a      	uxth	r2, r3
 800e202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e204:	4413      	add	r3, r2
 800e206:	b29b      	uxth	r3, r3
 800e208:	b21b      	sxth	r3, r3
 800e20a:	833b      	strh	r3, [r7, #24]
        lv_draw_fill(&work_area, mask, color, opa);
 800e20c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e210:	f107 0014 	add.w	r0, r7, #20
 800e214:	8bba      	ldrh	r2, [r7, #28]
 800e216:	68b9      	ldr	r1, [r7, #8]
 800e218:	f7fb f8c3 	bl	80093a2 <lv_draw_fill>
    }

    /*Right border*/
    if(part & LV_BORDER_RIGHT) {
 800e21c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e220:	f003 0308 	and.w	r3, r3, #8
 800e224:	2b00      	cmp	r3, #0
 800e226:	d013      	beq.n	800e250 <lv_draw_rect_border_straight+0x348>
        work_area.x2 = coords->x2;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e22e:	833b      	strh	r3, [r7, #24]
        work_area.x1 = work_area.x2 - bwidth;
 800e230:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e234:	b29a      	uxth	r2, r3
 800e236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	b21b      	sxth	r3, r3
 800e23e:	82bb      	strh	r3, [r7, #20]
        lv_draw_fill(&work_area, mask, color, opa);
 800e240:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e244:	f107 0014 	add.w	r0, r7, #20
 800e248:	8bba      	ldrh	r2, [r7, #28]
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	f7fb f8a9 	bl	80093a2 <lv_draw_fill>
    }

    work_area.x1 = coords->x1 + corner_size - length_corr;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e256:	b29a      	uxth	r2, r3
 800e258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e25a:	4413      	add	r3, r2
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	b29b      	uxth	r3, r3
 800e264:	b21b      	sxth	r3, r3
 800e266:	82bb      	strh	r3, [r7, #20]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	b29a      	uxth	r2, r3
 800e276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e278:	4413      	add	r3, r2
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	b21b      	sxth	r3, r3
 800e27e:	833b      	strh	r3, [r7, #24]

    /*Upper border*/
    if(part & LV_BORDER_TOP) {
 800e280:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e284:	f003 0302 	and.w	r3, r3, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d014      	beq.n	800e2b6 <lv_draw_rect_border_straight+0x3ae>
        work_area.y1 = coords->y1;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e292:	82fb      	strh	r3, [r7, #22]
        work_area.y2 = coords->y1 + bwidth;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e29e:	4413      	add	r3, r2
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	b21b      	sxth	r3, r3
 800e2a4:	837b      	strh	r3, [r7, #26]
        lv_draw_fill(&work_area, mask, color, opa);
 800e2a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e2aa:	f107 0014 	add.w	r0, r7, #20
 800e2ae:	8bba      	ldrh	r2, [r7, #28]
 800e2b0:	68b9      	ldr	r1, [r7, #8]
 800e2b2:	f7fb f876 	bl	80093a2 <lv_draw_fill>
    }

    /*Lower border*/
    if(part & LV_BORDER_BOTTOM) {
 800e2b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2ba:	f003 0301 	and.w	r3, r3, #1
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d013      	beq.n	800e2ea <lv_draw_rect_border_straight+0x3e2>
        work_area.y2 = coords->y2;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2c8:	837b      	strh	r3, [r7, #26]
        work_area.y1 = work_area.y2 - bwidth;
 800e2ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	b21b      	sxth	r3, r3
 800e2d8:	82fb      	strh	r3, [r7, #22]
        lv_draw_fill(&work_area, mask, color, opa);
 800e2da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e2de:	f107 0014 	add.w	r0, r7, #20
 800e2e2:	8bba      	ldrh	r2, [r7, #28]
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	f7fb f85c 	bl	80093a2 <lv_draw_fill>
    }

    /*Draw the a remaining rectangles if the radius is smaller then bwidth */
    if(length_corr != 0) {
 800e2ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 80fc 	beq.w	800e4ec <lv_draw_rect_border_straight+0x5e4>
        /*Left top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800e2f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2f8:	f003 0302 	and.w	r3, r3, #2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d038      	beq.n	800e372 <lv_draw_rect_border_straight+0x46a>
 800e300:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e304:	f003 0304 	and.w	r3, r3, #4
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d032      	beq.n	800e372 <lv_draw_rect_border_straight+0x46a>
            work_area.x1 = coords->x1;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e312:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e31e:	4413      	add	r3, r2
 800e320:	b29a      	uxth	r2, r3
 800e322:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e326:	b29b      	uxth	r3, r3
 800e328:	4413      	add	r3, r2
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	b21b      	sxth	r3, r3
 800e32e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e336:	b29a      	uxth	r2, r3
 800e338:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e33a:	4413      	add	r3, r2
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e342:	b29b      	uxth	r3, r3
 800e344:	4413      	add	r3, r2
 800e346:	b29b      	uxth	r3, r3
 800e348:	3301      	adds	r3, #1
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	b21b      	sxth	r3, r3
 800e34e:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e356:	b29a      	uxth	r2, r3
 800e358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e35a:	4413      	add	r3, r2
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	b21b      	sxth	r3, r3
 800e360:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e362:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e366:	f107 0014 	add.w	r0, r7, #20
 800e36a:	8bba      	ldrh	r2, [r7, #28]
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	f7fb f818 	bl	80093a2 <lv_draw_fill>
        }

        /*Right top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800e372:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e376:	f003 0302 	and.w	r3, r3, #2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d038      	beq.n	800e3f0 <lv_draw_rect_border_straight+0x4e8>
 800e37e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e382:	f003 0308 	and.w	r3, r3, #8
 800e386:	2b00      	cmp	r3, #0
 800e388:	d032      	beq.n	800e3f0 <lv_draw_rect_border_straight+0x4e8>
            work_area.x1 = coords->x2 - radius - aa;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e390:	b29a      	uxth	r2, r3
 800e392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	b29a      	uxth	r2, r3
 800e398:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	b21b      	sxth	r3, r3
 800e3a4:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e3ac:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3b8:	4413      	add	r3, r2
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	4413      	add	r3, r2
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	b21b      	sxth	r3, r3
 800e3cc:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3d8:	4413      	add	r3, r2
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	b21b      	sxth	r3, r3
 800e3de:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e3e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e3e4:	f107 0014 	add.w	r0, r7, #20
 800e3e8:	8bba      	ldrh	r2, [r7, #28]
 800e3ea:	68b9      	ldr	r1, [r7, #8]
 800e3ec:	f7fa ffd9 	bl	80093a2 <lv_draw_fill>
        }

        /*Left bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800e3f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d038      	beq.n	800e46e <lv_draw_rect_border_straight+0x566>
 800e3fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	2b00      	cmp	r3, #0
 800e406:	d032      	beq.n	800e46e <lv_draw_rect_border_straight+0x566>
            work_area.x1 = coords->x1;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e40e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e416:	b29a      	uxth	r2, r3
 800e418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e41a:	4413      	add	r3, r2
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e422:	b29b      	uxth	r3, r3
 800e424:	4413      	add	r3, r2
 800e426:	b29b      	uxth	r3, r3
 800e428:	b21b      	sxth	r3, r3
 800e42a:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e432:	b29a      	uxth	r2, r3
 800e434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	b29b      	uxth	r3, r3
 800e43a:	b21b      	sxth	r3, r3
 800e43c:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e444:	b29a      	uxth	r2, r3
 800e446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e450:	b29b      	uxth	r3, r3
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	b29b      	uxth	r3, r3
 800e456:	3b01      	subs	r3, #1
 800e458:	b29b      	uxth	r3, r3
 800e45a:	b21b      	sxth	r3, r3
 800e45c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e45e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e462:	f107 0014 	add.w	r0, r7, #20
 800e466:	8bba      	ldrh	r2, [r7, #28]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	f7fa ff9a 	bl	80093a2 <lv_draw_fill>
        }

        /*Right bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b00      	cmp	r3, #0
 800e478:	d038      	beq.n	800e4ec <lv_draw_rect_border_straight+0x5e4>
 800e47a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e47e:	f003 0308 	and.w	r3, r3, #8
 800e482:	2b00      	cmp	r3, #0
 800e484:	d032      	beq.n	800e4ec <lv_draw_rect_border_straight+0x5e4>
            work_area.x1 = coords->x2 - radius - aa;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	b29a      	uxth	r2, r3
 800e494:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e498:	b29b      	uxth	r3, r3
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	b21b      	sxth	r3, r3
 800e4a0:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e4a8:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	b21b      	sxth	r3, r3
 800e4ba:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	b21b      	sxth	r3, r3
 800e4da:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e4dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e4e0:	f107 0014 	add.w	r0, r7, #20
 800e4e4:	8bba      	ldrh	r2, [r7, #28]
 800e4e6:	68b9      	ldr	r1, [r7, #8]
 800e4e8:	f7fa ff5b 	bl	80093a2 <lv_draw_fill>
        }
    }

    /*If radius == 0 one px on the corners are not drawn by main drawer*/
    if(style->body.radius == 0) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f040 80b2 	bne.w	800e65c <lv_draw_rect_border_straight+0x754>
        /*Left top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800e4f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4fc:	f003 0306 	and.w	r3, r3, #6
 800e500:	2b00      	cmp	r3, #0
 800e502:	d025      	beq.n	800e550 <lv_draw_rect_border_straight+0x648>
            work_area.x1 = coords->x1;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e50a:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e512:	b29a      	uxth	r2, r3
 800e514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4413      	add	r3, r2
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	b21b      	sxth	r3, r3
 800e520:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e528:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e530:	b29a      	uxth	r2, r3
 800e532:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e536:	b29b      	uxth	r3, r3
 800e538:	4413      	add	r3, r2
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	b21b      	sxth	r3, r3
 800e53e:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e540:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e544:	f107 0014 	add.w	r0, r7, #20
 800e548:	8bba      	ldrh	r2, [r7, #28]
 800e54a:	68b9      	ldr	r1, [r7, #8]
 800e54c:	f7fa ff29 	bl	80093a2 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800e550:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e554:	f003 030a 	and.w	r3, r3, #10
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d025      	beq.n	800e5a8 <lv_draw_rect_border_straight+0x6a0>
            work_area.x1 = coords->x2 - aa;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e562:	b29a      	uxth	r2, r3
 800e564:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e568:	b29b      	uxth	r3, r3
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	b21b      	sxth	r3, r3
 800e570:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e578:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e580:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e588:	b29a      	uxth	r2, r3
 800e58a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e58e:	b29b      	uxth	r3, r3
 800e590:	4413      	add	r3, r2
 800e592:	b29b      	uxth	r3, r3
 800e594:	b21b      	sxth	r3, r3
 800e596:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e598:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e59c:	f107 0014 	add.w	r0, r7, #20
 800e5a0:	8bba      	ldrh	r2, [r7, #28]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	f7fa fefd 	bl	80093a2 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800e5a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5ac:	f003 0305 	and.w	r3, r3, #5
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d025      	beq.n	800e600 <lv_draw_rect_border_straight+0x6f8>
            work_area.x1 = coords->x1;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ba:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	4413      	add	r3, r2
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	b21b      	sxth	r3, r3
 800e5d0:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	b21b      	sxth	r3, r3
 800e5e6:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e5ee:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e5f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e5f4:	f107 0014 	add.w	r0, r7, #20
 800e5f8:	8bba      	ldrh	r2, [r7, #28]
 800e5fa:	68b9      	ldr	r1, [r7, #8]
 800e5fc:	f7fa fed1 	bl	80093a2 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800e600:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e604:	f003 0309 	and.w	r3, r3, #9
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d027      	beq.n	800e65c <lv_draw_rect_border_straight+0x754>
            work_area.x1 = coords->x2 - aa;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e612:	b29a      	uxth	r2, r3
 800e614:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e618:	b29b      	uxth	r3, r3
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	b21b      	sxth	r3, r3
 800e620:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e628:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e630:	b29a      	uxth	r2, r3
 800e632:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e636:	b29b      	uxth	r3, r3
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	b21b      	sxth	r3, r3
 800e63e:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e646:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800e648:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e64c:	f107 0014 	add.w	r0, r7, #20
 800e650:	8bba      	ldrh	r2, [r7, #28]
 800e652:	68b9      	ldr	r1, [r7, #8]
 800e654:	f7fa fea5 	bl	80093a2 <lv_draw_fill>
 800e658:	e000      	b.n	800e65c <lv_draw_rect_border_straight+0x754>
        return;
 800e65a:	bf00      	nop
        }
    }
}
 800e65c:	3730      	adds	r7, #48	; 0x30
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <lv_draw_rect_border_corner>:
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                       lv_opa_t opa_scale)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b0a0      	sub	sp, #128	; 0x80
 800e666:	af02      	add	r7, sp, #8
 800e668:	60f8      	str	r0, [r7, #12]
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
 800e66e:	70fb      	strb	r3, [r7, #3]
    uint16_t radius       = style->body.radius;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e676:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800e67a:	f7f9 f90f 	bl	800789c <lv_refr_get_disp_refreshing>
 800e67e:	4603      	mov	r3, r0
 800e680:	4618      	mov	r0, r3
 800e682:	f003 ffdb 	bl	801263c <lv_disp_get_antialiasing>
 800e686:	4603      	mov	r3, r0
 800e688:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    lv_coord_t bwidth     = style->body.border.width;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	899b      	ldrh	r3, [r3, #12]
 800e690:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    lv_color_t color      = style->body.border.color;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	895b      	ldrh	r3, [r3, #10]
 800e698:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    lv_border_part_t part = style->body.border.part;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7b9b      	ldrb	r3, [r3, #14]
 800e6a0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800e6a4:	78fb      	ldrb	r3, [r7, #3]
 800e6a6:	2bff      	cmp	r3, #255	; 0xff
 800e6a8:	d102      	bne.n	800e6b0 <lv_draw_rect_border_corner+0x4e>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	7bdb      	ldrb	r3, [r3, #15]
 800e6ae:	e00a      	b.n	800e6c6 <lv_draw_rect_border_corner+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7bdb      	ldrb	r3, [r3, #15]
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	fb12 f303 	smulbb	r3, r2, r3
 800e6be:	b29b      	uxth	r3, r3
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800e6c0:	0a1b      	lsrs	r3, r3, #8
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    /*0 px border width drawn as 1 px, so decrement the bwidth*/
    bwidth--;
 800e6ca:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

#if LV_ANTIALIAS
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800e6d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d006      	beq.n	800e6ee <lv_draw_rect_border_corner+0x8c>
 800e6e0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
#endif

    lv_coord_t width  = lv_area_get_width(coords);
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f7fe fa4f 	bl	800cb92 <lv_area_get_width>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    lv_coord_t height = lv_area_get_height(coords);
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f7fe fa60 	bl	800cbc0 <lv_area_get_height>
 800e700:	4603      	mov	r3, r0
 800e702:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800e706:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800e70a:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	; 0x56
 800e70e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e712:	4618      	mov	r0, r3
 800e714:	f002 f8e4 	bl	80108e0 <lv_draw_cont_radius_corr>
 800e718:	4603      	mov	r3, r0
 800e71a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e724:	b29a      	uxth	r2, r3
 800e726:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e72a:	4413      	add	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e732:	b29b      	uxth	r3, r3
 800e734:	4413      	add	r3, r2
 800e736:	b29b      	uxth	r3, r3
 800e738:	b21b      	sxth	r3, r3
 800e73a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lt_origo.y = coords->y1 + radius + aa;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e744:	b29a      	uxth	r2, r3
 800e746:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e74a:	4413      	add	r3, r2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e752:	b29b      	uxth	r3, r3
 800e754:	4413      	add	r3, r2
 800e756:	b29b      	uxth	r3, r3
 800e758:	b21b      	sxth	r3, r3
 800e75a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    lb_origo.x = coords->x1 + radius + aa;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e764:	b29a      	uxth	r2, r3
 800e766:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e76a:	4413      	add	r3, r2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e772:	b29b      	uxth	r3, r3
 800e774:	4413      	add	r3, r2
 800e776:	b29b      	uxth	r3, r3
 800e778:	b21b      	sxth	r3, r3
 800e77a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lb_origo.y = coords->y2 - radius - aa;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e782:	b29a      	uxth	r2, r3
 800e784:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e790:	b29b      	uxth	r3, r3
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	b29b      	uxth	r3, r3
 800e796:	b21b      	sxth	r3, r3
 800e798:	87fb      	strh	r3, [r7, #62]	; 0x3e

    rt_origo.x = coords->x2 - radius - aa;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	b21b      	sxth	r3, r3
 800e7b6:	873b      	strh	r3, [r7, #56]	; 0x38
    rt_origo.y = coords->y1 + radius + aa;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7c4:	4413      	add	r3, r2
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	4413      	add	r3, r2
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	b21b      	sxth	r3, r3
 800e7d4:	877b      	strh	r3, [r7, #58]	; 0x3a

    rb_origo.x = coords->x2 - radius - aa;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e7e2:	1ad3      	subs	r3, r2, r3
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	b21b      	sxth	r3, r3
 800e7f2:	86bb      	strh	r3, [r7, #52]	; 0x34
    rb_origo.y = coords->y2 - radius - aa;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	b29a      	uxth	r2, r3
 800e804:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e808:	b29b      	uxth	r3, r3
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	b21b      	sxth	r3, r3
 800e810:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_point_t cir_out;
    lv_coord_t tmp_out;
    lv_circ_init(&cir_out, &tmp_out, radius);
 800e812:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800e816:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 800e81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e81e:	4618      	mov	r0, r3
 800e820:	f004 fbd3 	bl	8012fca <lv_circ_init>

    lv_point_t cir_in;
    lv_coord_t tmp_in;
    lv_coord_t radius_in = radius - bwidth;
 800e824:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e828:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	b29b      	uxth	r3, r3
 800e830:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

    if(radius_in < 0) {
 800e834:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800e838:	2b00      	cmp	r3, #0
 800e83a:	da02      	bge.n	800e842 <lv_draw_rect_border_corner+0x1e0>
        radius_in = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    }

    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800e842:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800e846:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800e84a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e84e:	4618      	mov	r0, r3
 800e850:	f004 fbbb 	bl	8012fca <lv_circ_init>
    lv_coord_t act_w1;
    lv_coord_t act_w2;

#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    lv_coord_t out_y_seg_end   = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t out_x_last      = radius;
 800e860:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e864:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    lv_coord_t in_y_seg_start = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    lv_coord_t in_y_seg_end   = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t in_x_last      = radius - bwidth;
 800e874:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e878:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e87c:	1ad3      	subs	r3, r2, r3
 800e87e:	b29b      	uxth	r3, r3
 800e880:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#endif

    while(cir_out.y <= cir_out.x) {
 800e884:	f000 bd74 	b.w	800f370 <lv_draw_rect_border_corner+0xd0e>

        /*Calculate the actual width to avoid overwriting pixels*/
        if(cir_in.y < cir_in.x) {
 800e888:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800e88c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e890:	429a      	cmp	r2, r3
 800e892:	da0e      	bge.n	800e8b2 <lv_draw_rect_border_corner+0x250>
            act_w1 = cir_out.x - cir_in.x;
 800e894:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e898:	b29a      	uxth	r2, r3
 800e89a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1;
 800e8a8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800e8ac:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800e8b0:	e00f      	b.n	800e8d2 <lv_draw_rect_border_corner+0x270>
        } else {
            act_w1 = cir_out.x - cir_out.y;
 800e8b2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            act_w2 = act_w1 - 1;
 800e8c6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

#if LV_ANTIALIAS
        if(aa) {
 800e8d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 8340 	beq.w	800ef5c <lv_draw_rect_border_corner+0x8fa>
            /*New step in y on the outter circle*/
            if(out_x_last != cir_out.x) {
 800e8dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e8e0:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	f000 817b 	beq.w	800ebe0 <lv_draw_rect_border_corner+0x57e>
                out_y_seg_end       = cir_out.y;
 800e8ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e8ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800e8f0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800e8f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800e900:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e904:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800e906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e90a:	837b      	strh	r3, [r7, #26]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800e90c:	2300      	movs	r3, #0
 800e90e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e912:	e157      	b.n	800ebc4 <lv_draw_rect_border_corner+0x562>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800e914:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e918:	2b01      	cmp	r3, #1
 800e91a:	dd0c      	ble.n	800e936 <lv_draw_rect_border_corner+0x2d4>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800e91c:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800e920:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800e924:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e928:	4618      	mov	r0, r3
 800e92a:	f002 f81b 	bl	8010964 <antialias_get_opa_circ>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800e934:	e00f      	b.n	800e956 <lv_draw_rect_border_corner+0x2f4>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800e936:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800e93a:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800e93e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800e942:	4618      	mov	r0, r3
 800e944:	f7f9 ff6e 	bl	8008824 <lv_draw_aa_get_opa>
 800e948:	4603      	mov	r3, r0
 800e94a:	461a      	mov	r2, r3
 800e94c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e950:	1a9b      	subs	r3, r3, r2
 800e952:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800e956:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d045      	beq.n	800e9ee <lv_draw_rect_border_corner+0x38c>
 800e962:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e966:	f003 0308 	and.w	r3, r3, #8
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d03f      	beq.n	800e9ee <lv_draw_rect_border_corner+0x38c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800e96e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e972:	b29a      	uxth	r2, r3
 800e974:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4413      	add	r3, r2
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	3301      	adds	r3, #1
 800e980:	b29b      	uxth	r3, r3
 800e982:	b218      	sxth	r0, r3
 800e984:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e988:	b29a      	uxth	r2, r3
 800e98a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	4413      	add	r3, r2
 800e992:	b29a      	uxth	r2, r3
 800e994:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e998:	4413      	add	r3, r2
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	b219      	sxth	r1, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e9a4:	9200      	str	r2, [sp, #0]
 800e9a6:	895b      	ldrh	r3, [r3, #10]
 800e9a8:	68ba      	ldr	r2, [r7, #8]
 800e9aa:	f7fa fc62 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800e9ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	4413      	add	r3, r2
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e9c2:	4413      	add	r3, r2
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	b218      	sxth	r0, r3
 800e9c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	4413      	add	r3, r2
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3301      	adds	r3, #1
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	b219      	sxth	r1, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e9e4:	9200      	str	r2, [sp, #0]
 800e9e6:	895b      	ldrh	r3, [r3, #10]
 800e9e8:	68ba      	ldr	r2, [r7, #8]
 800e9ea:	f7fa fc42 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800e9ee:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d045      	beq.n	800ea86 <lv_draw_rect_border_corner+0x424>
 800e9fa:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e9fe:	f003 0304 	and.w	r3, r3, #4
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d03f      	beq.n	800ea86 <lv_draw_rect_border_corner+0x424>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800ea06:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	b218      	sxth	r0, r3
 800ea20:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	4413      	add	r3, r2
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	3301      	adds	r3, #1
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	b219      	sxth	r1, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ea3c:	9200      	str	r2, [sp, #0]
 800ea3e:	895b      	ldrh	r3, [r3, #10]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	f7fa fc16 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ea46:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	b218      	sxth	r0, r3
 800ea5c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	4413      	add	r3, r2
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ea70:	4413      	add	r3, r2
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	b219      	sxth	r1, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ea7c:	9200      	str	r2, [sp, #0]
 800ea7e:	895b      	ldrh	r3, [r3, #10]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	f7fa fbf6 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ea86:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d045      	beq.n	800eb1e <lv_draw_rect_border_corner+0x4bc>
 800ea92:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ea96:	f003 0304 	and.w	r3, r3, #4
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d03f      	beq.n	800eb1e <lv_draw_rect_border_corner+0x4bc>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ea9e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b01      	subs	r3, #1
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	b218      	sxth	r0, r3
 800eab4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	b219      	sxth	r1, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ead4:	9200      	str	r2, [sp, #0]
 800ead6:	895b      	ldrh	r3, [r3, #10]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	f7fa fbca 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800eade:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	b218      	sxth	r0, r3
 800eaf8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	b219      	sxth	r1, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800eb14:	9200      	str	r2, [sp, #0]
 800eb16:	895b      	ldrh	r3, [r3, #10]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	f7fa fbaa 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800eb1e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d045      	beq.n	800ebb6 <lv_draw_rect_border_corner+0x554>
 800eb2a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eb2e:	f003 0308 	and.w	r3, r3, #8
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d03f      	beq.n	800ebb6 <lv_draw_rect_border_corner+0x554>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800eb36:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4413      	add	r3, r2
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	b218      	sxth	r0, r3
 800eb50:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	b219      	sxth	r1, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800eb6c:	9200      	str	r2, [sp, #0]
 800eb6e:	895b      	ldrh	r3, [r3, #10]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	f7fa fb7e 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800eb76:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	4413      	add	r3, r2
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	3301      	adds	r3, #1
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	b218      	sxth	r0, r3
 800eb8c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	b219      	sxth	r1, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ebac:	9200      	str	r2, [sp, #0]
 800ebae:	895b      	ldrh	r3, [r3, #10]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	f7fa fb5e 	bl	8009272 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800ebb6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ebc4:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800ebc8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	f6ff aea1 	blt.w	800e914 <lv_draw_rect_border_corner+0x2b2>
                                   style->body.border.color, aa_opa);
                    }
                }

                out_x_last      = cir_out.x;
 800ebd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ebd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                out_y_seg_start = out_y_seg_end;
 800ebd8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ebdc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
            }

            /*New step in y on the inner circle*/
            if(in_x_last != cir_in.x) {
 800ebe0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ebe4:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	f000 81b7 	beq.w	800ef5c <lv_draw_rect_border_corner+0x8fa>
                in_y_seg_end        = cir_out.y;
 800ebee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ebf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800ebf4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ebf8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
                lv_point_t aa_p;

                aa_p.x = in_x_last;
 800ec04:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800ec08:	82bb      	strh	r3, [r7, #20]
                aa_p.y = in_y_seg_start;
 800ec0a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800ec0e:	82fb      	strh	r3, [r7, #22]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800ec10:	2300      	movs	r3, #0
 800ec12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ec16:	e193      	b.n	800ef40 <lv_draw_rect_border_corner+0x8de>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800ec18:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	dd10      	ble.n	800ec42 <lv_draw_rect_border_corner+0x5e0>
                                                                           on the first segment*/
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800ec20:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800ec24:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 800ec28:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f001 fe99 	bl	8010964 <antialias_get_opa_circ>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
 800ec36:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800ec40:	e00b      	b.n	800ec5a <lv_draw_rect_border_corner+0x5f8>
                    } else {
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ec42:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800ec46:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 800ec4a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7f9 fde8 	bl	8008824 <lv_draw_aa_get_opa>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ec5a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d025      	beq.n	800ecb2 <lv_draw_rect_border_corner+0x650>
 800ec66:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ec6a:	f003 0308 	and.w	r3, r3, #8
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d01f      	beq.n	800ecb2 <lv_draw_rect_border_corner+0x650>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ec72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	4413      	add	r3, r2
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	b218      	sxth	r0, r3
 800ec88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4413      	add	r3, r2
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ec9c:	4413      	add	r3, r2
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	b219      	sxth	r1, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800eca8:	9200      	str	r2, [sp, #0]
 800ecaa:	895b      	ldrh	r3, [r3, #10]
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	f7fa fae0 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ecb2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d025      	beq.n	800ed0a <lv_draw_rect_border_corner+0x6a8>
 800ecbe:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ecc2:	f003 0304 	and.w	r3, r3, #4
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01f      	beq.n	800ed0a <lv_draw_rect_border_corner+0x6a8>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800ecca:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	b218      	sxth	r0, r3
 800ece4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	b219      	sxth	r1, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ed00:	9200      	str	r2, [sp, #0]
 800ed02:	895b      	ldrh	r3, [r3, #10]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	f7fa fab4 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ed0a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed0e:	f003 0302 	and.w	r3, r3, #2
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d025      	beq.n	800ed62 <lv_draw_rect_border_corner+0x700>
 800ed16:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed1a:	f003 0304 	and.w	r3, r3, #4
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d01f      	beq.n	800ed62 <lv_draw_rect_border_corner+0x700>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ed22:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	3301      	adds	r3, #1
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	b218      	sxth	r0, r3
 800ed38:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	b219      	sxth	r1, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ed58:	9200      	str	r2, [sp, #0]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	f7fa fa88 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ed62:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed66:	f003 0302 	and.w	r3, r3, #2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d025      	beq.n	800edba <lv_draw_rect_border_corner+0x758>
 800ed6e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d01f      	beq.n	800edba <lv_draw_rect_border_corner+0x758>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800ed7a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4413      	add	r3, r2
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ed8e:	4413      	add	r3, r2
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	b218      	sxth	r0, r3
 800ed94:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	3301      	adds	r3, #1
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	b219      	sxth	r1, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800edb0:	9200      	str	r2, [sp, #0]
 800edb2:	895b      	ldrh	r3, [r3, #10]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	f7fa fa5c 	bl	8009272 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    /*Be sure the pixels on the middle are not drawn twice*/
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800edba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800edbe:	1e5a      	subs	r2, r3, #1
 800edc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edc4:	4619      	mov	r1, r3
 800edc6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800edca:	440b      	add	r3, r1
 800edcc:	429a      	cmp	r2, r3
 800edce:	f000 80b0 	beq.w	800ef32 <lv_draw_rect_border_corner+0x8d0>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800edd2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d025      	beq.n	800ee2a <lv_draw_rect_border_corner+0x7c8>
 800edde:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ede2:	f003 0308 	and.w	r3, r3, #8
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d01f      	beq.n	800ee2a <lv_draw_rect_border_corner+0x7c8>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800edea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800edee:	b29a      	uxth	r2, r3
 800edf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	4413      	add	r3, r2
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800edfe:	4413      	add	r3, r2
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	b218      	sxth	r0, r3
 800ee04:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	4413      	add	r3, r2
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	b219      	sxth	r1, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ee20:	9200      	str	r2, [sp, #0]
 800ee22:	895b      	ldrh	r3, [r3, #10]
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	f7fa fa24 	bl	8009272 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ee2a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d025      	beq.n	800ee82 <lv_draw_rect_border_corner+0x820>
 800ee36:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee3a:	f003 0304 	and.w	r3, r3, #4
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d01f      	beq.n	800ee82 <lv_draw_rect_border_corner+0x820>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800ee42:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	3301      	adds	r3, #1
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	b218      	sxth	r0, r3
 800ee58:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	4413      	add	r3, r2
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ee6c:	4413      	add	r3, r2
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	b219      	sxth	r1, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ee78:	9200      	str	r2, [sp, #0]
 800ee7a:	895b      	ldrh	r3, [r3, #10]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	f7fa f9f8 	bl	8009272 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ee82:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee86:	f003 0302 	and.w	r3, r3, #2
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d025      	beq.n	800eeda <lv_draw_rect_border_corner+0x878>
 800ee8e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee92:	f003 0304 	and.w	r3, r3, #4
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d01f      	beq.n	800eeda <lv_draw_rect_border_corner+0x878>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800ee9a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	b29a      	uxth	r2, r3
 800eeaa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	b218      	sxth	r0, r3
 800eeb4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3301      	adds	r3, #1
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	b219      	sxth	r1, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800eed0:	9200      	str	r2, [sp, #0]
 800eed2:	895b      	ldrh	r3, [r3, #10]
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	f7fa f9cc 	bl	8009272 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800eeda:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eede:	f003 0302 	and.w	r3, r3, #2
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d025      	beq.n	800ef32 <lv_draw_rect_border_corner+0x8d0>
 800eee6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800eeea:	f003 0308 	and.w	r3, r3, #8
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d01f      	beq.n	800ef32 <lv_draw_rect_border_corner+0x8d0>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800eef2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4413      	add	r3, r2
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	3b01      	subs	r3, #1
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	b218      	sxth	r0, r3
 800ef08:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	b219      	sxth	r1, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800ef28:	9200      	str	r2, [sp, #0]
 800ef2a:	895b      	ldrh	r3, [r3, #10]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	f7fa f9a0 	bl	8009272 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800ef32:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	3301      	adds	r3, #1
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ef40:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ef44:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	f6ff ae65 	blt.w	800ec18 <lv_draw_rect_border_corner+0x5b6>
                                       mask, style->body.border.color, aa_opa);
                        }
                    }
                }

                in_x_last      = cir_in.x;
 800ef4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef50:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                in_y_seg_start = in_y_seg_end;
 800ef54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ef58:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
            }
        }
#endif

        /*Draw the octets to the right bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ef5c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ef60:	f003 0301 	and.w	r3, r3, #1
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d06f      	beq.n	800f048 <lv_draw_rect_border_corner+0x9e6>
 800ef68:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ef6c:	f003 0308 	and.w	r3, r3, #8
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d069      	beq.n	800f048 <lv_draw_rect_border_corner+0x9e6>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800ef74:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	4413      	add	r3, r2
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	b21b      	sxth	r3, r3
 800ef8e:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800ef90:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	4413      	add	r3, r2
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	b21b      	sxth	r3, r3
 800efa2:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800efa4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efae:	b29b      	uxth	r3, r3
 800efb0:	4413      	add	r3, r2
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	b21b      	sxth	r3, r3
 800efb6:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800efb8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	4413      	add	r3, r2
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	b21b      	sxth	r3, r3
 800efca:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800efcc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800efd0:	f107 001c 	add.w	r0, r7, #28
 800efd4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800efd8:	68b9      	ldr	r1, [r7, #8]
 800efda:	f7fa f9e2 	bl	80093a2 <lv_draw_fill>

            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800efde:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800efe8:	b29b      	uxth	r3, r3
 800efea:	4413      	add	r3, r2
 800efec:	b29b      	uxth	r3, r3
 800efee:	b21b      	sxth	r3, r3
 800eff0:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800eff2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800effc:	b29b      	uxth	r3, r3
 800effe:	4413      	add	r3, r2
 800f000:	b29b      	uxth	r3, r3
 800f002:	b21b      	sxth	r3, r3
 800f004:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800f006:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f010:	b29b      	uxth	r3, r3
 800f012:	4413      	add	r3, r2
 800f014:	b29a      	uxth	r2, r3
 800f016:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	b21b      	sxth	r3, r3
 800f020:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800f022:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f026:	b29a      	uxth	r2, r3
 800f028:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4413      	add	r3, r2
 800f030:	b29b      	uxth	r3, r3
 800f032:	b21b      	sxth	r3, r3
 800f034:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f036:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f03a:	f107 001c 	add.w	r0, r7, #28
 800f03e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	f7fa f9ad 	bl	80093a2 <lv_draw_fill>
        }

        /*Draw the octets to the left bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f048:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f04c:	f003 0301 	and.w	r3, r3, #1
 800f050:	2b00      	cmp	r3, #0
 800f052:	d06f      	beq.n	800f134 <lv_draw_rect_border_corner+0xad2>
 800f054:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f058:	f003 0304 	and.w	r3, r3, #4
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d069      	beq.n	800f134 <lv_draw_rect_border_corner+0xad2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800f060:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f064:	b29a      	uxth	r2, r3
 800f066:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	b29b      	uxth	r3, r3
 800f070:	b21b      	sxth	r3, r3
 800f072:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800f074:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f078:	b29a      	uxth	r2, r3
 800f07a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f07e:	b29b      	uxth	r3, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29b      	uxth	r3, r3
 800f084:	b21b      	sxth	r3, r3
 800f086:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800f088:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f092:	b29b      	uxth	r3, r3
 800f094:	4413      	add	r3, r2
 800f096:	b29a      	uxth	r2, r3
 800f098:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	b21b      	sxth	r3, r3
 800f0a2:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800f0a4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	b21b      	sxth	r3, r3
 800f0b6:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f0b8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f0bc:	f107 001c 	add.w	r0, r7, #28
 800f0c0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	f7fa f96c 	bl	80093a2 <lv_draw_fill>

            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800f0ca:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	b21b      	sxth	r3, r3
 800f0dc:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800f0de:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f0f2:	4413      	add	r3, r2
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800f0fa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f104:	b29b      	uxth	r3, r3
 800f106:	4413      	add	r3, r2
 800f108:	b29b      	uxth	r3, r3
 800f10a:	b21b      	sxth	r3, r3
 800f10c:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800f10e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f112:	b29a      	uxth	r2, r3
 800f114:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f118:	b29b      	uxth	r3, r3
 800f11a:	4413      	add	r3, r2
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	b21b      	sxth	r3, r3
 800f120:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f122:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f126:	f107 001c 	add.w	r0, r7, #28
 800f12a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f12e:	68b9      	ldr	r1, [r7, #8]
 800f130:	f7fa f937 	bl	80093a2 <lv_draw_fill>
        }

        /*Draw the octets to the left top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f134:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f138:	f003 0302 	and.w	r3, r3, #2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d07d      	beq.n	800f23c <lv_draw_rect_border_corner+0xbda>
 800f140:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d077      	beq.n	800f23c <lv_draw_rect_border_corner+0xbda>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800f14c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f150:	461a      	mov	r2, r3
 800f152:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f156:	441a      	add	r2, r3
 800f158:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f15c:	4619      	mov	r1, r3
 800f15e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f162:	1acb      	subs	r3, r1, r3
 800f164:	429a      	cmp	r2, r3
 800f166:	dd34      	ble.n	800f1d2 <lv_draw_rect_border_corner+0xb70>
                /*Don't draw if the lines are common in the middle*/
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800f168:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f172:	b29b      	uxth	r3, r3
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	b29b      	uxth	r3, r3
 800f178:	b21b      	sxth	r3, r3
 800f17a:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800f17c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f180:	b29a      	uxth	r2, r3
 800f182:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f186:	b29b      	uxth	r3, r3
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f190:	4413      	add	r3, r2
 800f192:	b29b      	uxth	r3, r3
 800f194:	b21b      	sxth	r3, r3
 800f196:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800f198:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	b21b      	sxth	r3, r3
 800f1aa:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800f1ac:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	b21b      	sxth	r3, r3
 800f1be:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800f1c0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f1c4:	f107 001c 	add.w	r0, r7, #28
 800f1c8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f1cc:	68b9      	ldr	r1, [r7, #8]
 800f1ce:	f7fa f8e8 	bl	80093a2 <lv_draw_fill>
            }

            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800f1d2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	b21b      	sxth	r3, r3
 800f1e4:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800f1e6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	b21b      	sxth	r3, r3
 800f1f8:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800f1fa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f204:	b29b      	uxth	r3, r3
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	b29b      	uxth	r3, r3
 800f20a:	b21b      	sxth	r3, r3
 800f20c:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800f20e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f212:	b29a      	uxth	r2, r3
 800f214:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f218:	b29b      	uxth	r3, r3
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f222:	4413      	add	r3, r2
 800f224:	b29b      	uxth	r3, r3
 800f226:	b21b      	sxth	r3, r3
 800f228:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f22a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f22e:	f107 001c 	add.w	r0, r7, #28
 800f232:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f236:	68b9      	ldr	r1, [r7, #8]
 800f238:	f7fa f8b3 	bl	80093a2 <lv_draw_fill>
        }

        /*Draw the octets to the right top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f23c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b00      	cmp	r3, #0
 800f246:	d07d      	beq.n	800f344 <lv_draw_rect_border_corner+0xce2>
 800f248:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f24c:	f003 0308 	and.w	r3, r3, #8
 800f250:	2b00      	cmp	r3, #0
 800f252:	d077      	beq.n	800f344 <lv_draw_rect_border_corner+0xce2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800f254:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f258:	b29a      	uxth	r2, r3
 800f25a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f25e:	b29b      	uxth	r3, r3
 800f260:	4413      	add	r3, r2
 800f262:	b29b      	uxth	r3, r3
 800f264:	b21b      	sxth	r3, r3
 800f266:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800f268:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f272:	b29b      	uxth	r3, r3
 800f274:	4413      	add	r3, r2
 800f276:	b29b      	uxth	r3, r3
 800f278:	b21b      	sxth	r3, r3
 800f27a:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800f27c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f280:	b29a      	uxth	r2, r3
 800f282:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f286:	b29b      	uxth	r3, r3
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	b21b      	sxth	r3, r3
 800f28e:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800f290:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f294:	b29a      	uxth	r2, r3
 800f296:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800f2a4:	4413      	add	r3, r2
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	b21b      	sxth	r3, r3
 800f2aa:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800f2ac:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f2b0:	f107 001c 	add.w	r0, r7, #28
 800f2b4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f2b8:	68b9      	ldr	r1, [r7, #8]
 800f2ba:	f7fa f872 	bl	80093a2 <lv_draw_fill>

            /*Don't draw if the lines are common in the middle*/
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800f2be:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f2c8:	441a      	add	r2, r3
 800f2ca:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f2d4:	1acb      	subs	r3, r1, r3
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	dd34      	ble.n	800f344 <lv_draw_rect_border_corner+0xce2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800f2da:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4413      	add	r3, r2
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	b21b      	sxth	r3, r3
 800f2f4:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800f2f6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f300:	b29b      	uxth	r3, r3
 800f302:	4413      	add	r3, r2
 800f304:	b29b      	uxth	r3, r3
 800f306:	b21b      	sxth	r3, r3
 800f308:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800f30a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f30e:	b29a      	uxth	r2, r3
 800f310:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f314:	b29b      	uxth	r3, r3
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	b29b      	uxth	r3, r3
 800f31a:	b21b      	sxth	r3, r3
 800f31c:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800f31e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f322:	b29a      	uxth	r2, r3
 800f324:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f328:	b29b      	uxth	r3, r3
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	b21b      	sxth	r3, r3
 800f330:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800f332:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f336:	f107 001c 	add.w	r0, r7, #28
 800f33a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f33e:	68b9      	ldr	r1, [r7, #8]
 800f340:	f7fa f82f 	bl	80093a2 <lv_draw_fill>
            }
        }
        lv_circ_next(&cir_out, &tmp_out);
 800f344:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800f348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f34c:	4611      	mov	r1, r2
 800f34e:	4618      	mov	r0, r3
 800f350:	f003 fe6a 	bl	8013028 <lv_circ_next>

        /*The internal circle will be ready faster
         * so check it! */
        if(cir_in.y < cir_in.x) {
 800f354:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800f358:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800f35c:	429a      	cmp	r2, r3
 800f35e:	da07      	bge.n	800f370 <lv_draw_rect_border_corner+0xd0e>
            lv_circ_next(&cir_in, &tmp_in);
 800f360:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800f364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f368:	4611      	mov	r1, r2
 800f36a:	4618      	mov	r0, r3
 800f36c:	f003 fe5c 	bl	8013028 <lv_circ_next>
    while(cir_out.y <= cir_out.x) {
 800f370:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800f374:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f378:	429a      	cmp	r2, r3
 800f37a:	f77f aa85 	ble.w	800e888 <lv_draw_rect_border_corner+0x226>
        }
    }

#if LV_ANTIALIAS
    if(aa) {
 800f37e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f382:	2b00      	cmp	r3, #0
 800f384:	f000 83b0 	beq.w	800fae8 <lv_draw_rect_border_corner+0x1486>
        /*Last parts of the outer anti-alias*/
        out_y_seg_end       = cir_out.y;
 800f388:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f38a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800f38e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800f392:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800f39e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f3a2:	823b      	strh	r3, [r7, #16]
        aa_p.y = out_y_seg_start;
 800f3a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f3a8:	827b      	strh	r3, [r7, #18]

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f3b0:	e146      	b.n	800f640 <lv_draw_rect_border_corner+0xfde>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800f3b2:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800f3b6:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 800f3ba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7f9 fa30 	bl	8008824 <lv_draw_aa_get_opa>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f3cc:	1a9b      	subs	r3, r3, r2
 800f3ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f3d2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f3d6:	f003 0301 	and.w	r3, r3, #1
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d045      	beq.n	800f46a <lv_draw_rect_border_corner+0xe08>
 800f3de:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f3e2:	f003 0308 	and.w	r3, r3, #8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d03f      	beq.n	800f46a <lv_draw_rect_border_corner+0xe08>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800f3ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	4413      	add	r3, r2
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	b218      	sxth	r0, r3
 800f400:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f404:	b29a      	uxth	r2, r3
 800f406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	4413      	add	r3, r2
 800f40e:	b29a      	uxth	r2, r3
 800f410:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f414:	4413      	add	r3, r2
 800f416:	b29b      	uxth	r3, r3
 800f418:	b219      	sxth	r1, r3
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f420:	9200      	str	r2, [sp, #0]
 800f422:	895b      	ldrh	r3, [r3, #10]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	f7f9 ff24 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800f42a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f42e:	b29a      	uxth	r2, r3
 800f430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f434:	b29b      	uxth	r3, r3
 800f436:	4413      	add	r3, r2
 800f438:	b29a      	uxth	r2, r3
 800f43a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f43e:	4413      	add	r3, r2
 800f440:	b29b      	uxth	r3, r3
 800f442:	b218      	sxth	r0, r3
 800f444:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f448:	b29a      	uxth	r2, r3
 800f44a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	4413      	add	r3, r2
 800f452:	b29b      	uxth	r3, r3
 800f454:	3301      	adds	r3, #1
 800f456:	b29b      	uxth	r3, r3
 800f458:	b219      	sxth	r1, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f460:	9200      	str	r2, [sp, #0]
 800f462:	895b      	ldrh	r3, [r3, #10]
 800f464:	68ba      	ldr	r2, [r7, #8]
 800f466:	f7f9 ff04 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f46a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d045      	beq.n	800f502 <lv_draw_rect_border_corner+0xea0>
 800f476:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f47a:	f003 0304 	and.w	r3, r3, #4
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d03f      	beq.n	800f502 <lv_draw_rect_border_corner+0xea0>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800f482:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f486:	b29a      	uxth	r2, r3
 800f488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	b29a      	uxth	r2, r3
 800f492:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	b29b      	uxth	r3, r3
 800f49a:	b218      	sxth	r0, r3
 800f49c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	4413      	add	r3, r2
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	b219      	sxth	r1, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f4b8:	9200      	str	r2, [sp, #0]
 800f4ba:	895b      	ldrh	r3, [r3, #10]
 800f4bc:	68ba      	ldr	r2, [r7, #8]
 800f4be:	f7f9 fed8 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800f4c2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	b218      	sxth	r0, r3
 800f4d8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	4413      	add	r3, r2
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f4ec:	4413      	add	r3, r2
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	b219      	sxth	r1, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f4f8:	9200      	str	r2, [sp, #0]
 800f4fa:	895b      	ldrh	r3, [r3, #10]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	f7f9 feb8 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f502:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f506:	f003 0302 	and.w	r3, r3, #2
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d045      	beq.n	800f59a <lv_draw_rect_border_corner+0xf38>
 800f50e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f512:	f003 0304 	and.w	r3, r3, #4
 800f516:	2b00      	cmp	r3, #0
 800f518:	d03f      	beq.n	800f59a <lv_draw_rect_border_corner+0xf38>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800f51a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f51e:	b29a      	uxth	r2, r3
 800f520:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f524:	b29b      	uxth	r3, r3
 800f526:	1ad3      	subs	r3, r2, r3
 800f528:	b29b      	uxth	r3, r3
 800f52a:	3b01      	subs	r3, #1
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	b218      	sxth	r0, r3
 800f530:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f534:	b29a      	uxth	r2, r3
 800f536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	b29a      	uxth	r2, r3
 800f540:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	b29b      	uxth	r3, r3
 800f548:	b219      	sxth	r1, r3
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f550:	9200      	str	r2, [sp, #0]
 800f552:	895b      	ldrh	r3, [r3, #10]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	f7f9 fe8c 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800f55a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f55e:	b29a      	uxth	r2, r3
 800f560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f564:	b29b      	uxth	r3, r3
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	b29a      	uxth	r2, r3
 800f56a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	b29b      	uxth	r3, r3
 800f572:	b218      	sxth	r0, r3
 800f574:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f578:	b29a      	uxth	r2, r3
 800f57a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	b29b      	uxth	r3, r3
 800f584:	3b01      	subs	r3, #1
 800f586:	b29b      	uxth	r3, r3
 800f588:	b219      	sxth	r1, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f590:	9200      	str	r2, [sp, #0]
 800f592:	895b      	ldrh	r3, [r3, #10]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	f7f9 fe6c 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f59a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f59e:	f003 0302 	and.w	r3, r3, #2
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d045      	beq.n	800f632 <lv_draw_rect_border_corner+0xfd0>
 800f5a6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f5aa:	f003 0308 	and.w	r3, r3, #8
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d03f      	beq.n	800f632 <lv_draw_rect_border_corner+0xfd0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800f5b2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f5c6:	4413      	add	r3, r2
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	b218      	sxth	r0, r3
 800f5cc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	b219      	sxth	r1, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f5e8:	9200      	str	r2, [sp, #0]
 800f5ea:	895b      	ldrh	r3, [r3, #10]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	f7f9 fe40 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800f5f2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	4413      	add	r3, r2
 800f600:	b29b      	uxth	r3, r3
 800f602:	3301      	adds	r3, #1
 800f604:	b29b      	uxth	r3, r3
 800f606:	b218      	sxth	r0, r3
 800f608:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f612:	b29b      	uxth	r3, r3
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	b29a      	uxth	r2, r3
 800f618:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	b29b      	uxth	r3, r3
 800f620:	b219      	sxth	r1, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f628:	9200      	str	r2, [sp, #0]
 800f62a:	895b      	ldrh	r3, [r3, #10]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	f7f9 fe20 	bl	8009272 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800f632:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800f636:	b29b      	uxth	r3, r3
 800f638:	3301      	adds	r3, #1
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f640:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800f644:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f648:	429a      	cmp	r2, r3
 800f64a:	f6ff aeb2 	blt.w	800f3b2 <lv_draw_rect_border_corner+0xd50>
                           style->body.border.color, aa_opa);
            }
        }

        /*In some cases the last pixel in the outer middle is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800f64e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f652:	461a      	mov	r2, r3
 800f654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f65e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f662:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f666:	429a      	cmp	r2, r3
 800f668:	f040 80a3 	bne.w	800f7b2 <lv_draw_rect_border_corner+0x1150>
            aa_p.x = out_x_last;
 800f66c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f670:	823b      	strh	r3, [r7, #16]
            aa_p.y = out_x_last;
 800f672:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f676:	827b      	strh	r3, [r7, #18]

            lv_opa_t aa_opa = opa >> 1;
 800f678:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f67c:	085b      	lsrs	r3, r3, #1
 800f67e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f682:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01f      	beq.n	800f6ce <lv_draw_rect_border_corner+0x106c>
 800f68e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f692:	f003 0308 	and.w	r3, r3, #8
 800f696:	2b00      	cmp	r3, #0
 800f698:	d019      	beq.n	800f6ce <lv_draw_rect_border_corner+0x106c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800f69a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	4413      	add	r3, r2
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	b218      	sxth	r0, r3
 800f6ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f6b0:	b29a      	uxth	r2, r3
 800f6b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4413      	add	r3, r2
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	b219      	sxth	r1, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f6c4:	9200      	str	r2, [sp, #0]
 800f6c6:	895b      	ldrh	r3, [r3, #10]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	f7f9 fdd2 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f6ce:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d01f      	beq.n	800f71a <lv_draw_rect_border_corner+0x10b8>
 800f6da:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f6de:	f003 0304 	and.w	r3, r3, #4
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d019      	beq.n	800f71a <lv_draw_rect_border_corner+0x10b8>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800f6e6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	b218      	sxth	r0, r3
 800f6f8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4413      	add	r3, r2
 800f706:	b29b      	uxth	r3, r3
 800f708:	b219      	sxth	r1, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f710:	9200      	str	r2, [sp, #0]
 800f712:	895b      	ldrh	r3, [r3, #10]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	f7f9 fdac 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f71a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f71e:	f003 0302 	and.w	r3, r3, #2
 800f722:	2b00      	cmp	r3, #0
 800f724:	d01f      	beq.n	800f766 <lv_draw_rect_border_corner+0x1104>
 800f726:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f72a:	f003 0304 	and.w	r3, r3, #4
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d019      	beq.n	800f766 <lv_draw_rect_border_corner+0x1104>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800f732:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f736:	b29a      	uxth	r2, r3
 800f738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	b29b      	uxth	r3, r3
 800f742:	b218      	sxth	r0, r3
 800f744:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f748:	b29a      	uxth	r2, r3
 800f74a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	b29b      	uxth	r3, r3
 800f754:	b219      	sxth	r1, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f75c:	9200      	str	r2, [sp, #0]
 800f75e:	895b      	ldrh	r3, [r3, #10]
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	f7f9 fd86 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f766:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d01f      	beq.n	800f7b2 <lv_draw_rect_border_corner+0x1150>
 800f772:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f776:	f003 0308 	and.w	r3, r3, #8
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d019      	beq.n	800f7b2 <lv_draw_rect_border_corner+0x1150>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800f77e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f782:	b29a      	uxth	r2, r3
 800f784:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	4413      	add	r3, r2
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	b218      	sxth	r0, r3
 800f790:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f794:	b29a      	uxth	r2, r3
 800f796:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	b219      	sxth	r1, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f7a8:	9200      	str	r2, [sp, #0]
 800f7aa:	895b      	ldrh	r3, [r3, #10]
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	f7f9 fd60 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }
        }

        /*Last parts of the inner anti-alias*/
        in_y_seg_end = cir_in.y;
 800f7b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        aa_p.x       = in_x_last;
 800f7b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800f7bc:	823b      	strh	r3, [r7, #16]
        aa_p.y       = in_y_seg_start;
 800f7be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800f7c2:	827b      	strh	r3, [r7, #18]
        seg_size     = in_y_seg_end - in_y_seg_start;
 800f7c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800f7c8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        for(i = 0; i < seg_size; i++) {
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f7da:	e17e      	b.n	800fada <lv_draw_rect_border_corner+0x1478>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800f7dc:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 800f7e0:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 800f7e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f9 f81b 	bl	8008824 <lv_draw_aa_get_opa>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f7f4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f7f8:	f003 0301 	and.w	r3, r3, #1
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d025      	beq.n	800f84c <lv_draw_rect_border_corner+0x11ea>
 800f800:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f804:	f003 0308 	and.w	r3, r3, #8
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01f      	beq.n	800f84c <lv_draw_rect_border_corner+0x11ea>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800f80c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f810:	b29a      	uxth	r2, r3
 800f812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f816:	b29b      	uxth	r3, r3
 800f818:	4413      	add	r3, r2
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	3b01      	subs	r3, #1
 800f81e:	b29b      	uxth	r3, r3
 800f820:	b218      	sxth	r0, r3
 800f822:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f826:	b29a      	uxth	r2, r3
 800f828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	4413      	add	r3, r2
 800f830:	b29a      	uxth	r2, r3
 800f832:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f836:	4413      	add	r3, r2
 800f838:	b29b      	uxth	r3, r3
 800f83a:	b219      	sxth	r1, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f842:	9200      	str	r2, [sp, #0]
 800f844:	895b      	ldrh	r3, [r3, #10]
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	f7f9 fd13 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f84c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d025      	beq.n	800f8a4 <lv_draw_rect_border_corner+0x1242>
 800f858:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f85c:	f003 0304 	and.w	r3, r3, #4
 800f860:	2b00      	cmp	r3, #0
 800f862:	d01f      	beq.n	800f8a4 <lv_draw_rect_border_corner+0x1242>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800f864:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f868:	b29a      	uxth	r2, r3
 800f86a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	b29a      	uxth	r2, r3
 800f874:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	b218      	sxth	r0, r3
 800f87e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f882:	b29a      	uxth	r2, r3
 800f884:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f888:	b29b      	uxth	r3, r3
 800f88a:	4413      	add	r3, r2
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	3b01      	subs	r3, #1
 800f890:	b29b      	uxth	r3, r3
 800f892:	b219      	sxth	r1, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f89a:	9200      	str	r2, [sp, #0]
 800f89c:	895b      	ldrh	r3, [r3, #10]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	f7f9 fce7 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800f8a4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f8a8:	f003 0302 	and.w	r3, r3, #2
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d025      	beq.n	800f8fc <lv_draw_rect_border_corner+0x129a>
 800f8b0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f8b4:	f003 0304 	and.w	r3, r3, #4
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d01f      	beq.n	800f8fc <lv_draw_rect_border_corner+0x129a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800f8bc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	b218      	sxth	r0, r3
 800f8d2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	b219      	sxth	r1, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f8f2:	9200      	str	r2, [sp, #0]
 800f8f4:	895b      	ldrh	r3, [r3, #10]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	f7f9 fcbb 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800f8fc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f900:	f003 0302 	and.w	r3, r3, #2
 800f904:	2b00      	cmp	r3, #0
 800f906:	d025      	beq.n	800f954 <lv_draw_rect_border_corner+0x12f2>
 800f908:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b00      	cmp	r3, #0
 800f912:	d01f      	beq.n	800f954 <lv_draw_rect_border_corner+0x12f2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800f914:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f918:	b29a      	uxth	r2, r3
 800f91a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	4413      	add	r3, r2
 800f922:	b29a      	uxth	r2, r3
 800f924:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f928:	4413      	add	r3, r2
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	b218      	sxth	r0, r3
 800f92e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800f932:	b29a      	uxth	r2, r3
 800f934:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	3301      	adds	r3, #1
 800f940:	b29b      	uxth	r3, r3
 800f942:	b219      	sxth	r1, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f94a:	9200      	str	r2, [sp, #0]
 800f94c:	895b      	ldrh	r3, [r3, #10]
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	f7f9 fc8f 	bl	8009272 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800f954:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f958:	1e5a      	subs	r2, r3, #1
 800f95a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f95e:	4619      	mov	r1, r3
 800f960:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800f964:	440b      	add	r3, r1
 800f966:	429a      	cmp	r2, r3
 800f968:	f000 80b0 	beq.w	800facc <lv_draw_rect_border_corner+0x146a>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800f96c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b00      	cmp	r3, #0
 800f976:	d025      	beq.n	800f9c4 <lv_draw_rect_border_corner+0x1362>
 800f978:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f97c:	f003 0308 	and.w	r3, r3, #8
 800f980:	2b00      	cmp	r3, #0
 800f982:	d01f      	beq.n	800f9c4 <lv_draw_rect_border_corner+0x1362>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800f984:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f988:	b29a      	uxth	r2, r3
 800f98a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4413      	add	r3, r2
 800f992:	b29a      	uxth	r2, r3
 800f994:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f998:	4413      	add	r3, r2
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	b218      	sxth	r0, r3
 800f99e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	b219      	sxth	r1, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800f9ba:	9200      	str	r2, [sp, #0]
 800f9bc:	895b      	ldrh	r3, [r3, #10]
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	f7f9 fc57 	bl	8009272 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800f9c4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f9c8:	f003 0301 	and.w	r3, r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d025      	beq.n	800fa1c <lv_draw_rect_border_corner+0x13ba>
 800f9d0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f9d4:	f003 0304 	and.w	r3, r3, #4
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d01f      	beq.n	800fa1c <lv_draw_rect_border_corner+0x13ba>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800f9dc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	b218      	sxth	r0, r3
 800f9f2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4413      	add	r3, r2
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fa06:	4413      	add	r3, r2
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	b219      	sxth	r1, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800fa12:	9200      	str	r2, [sp, #0]
 800fa14:	895b      	ldrh	r3, [r3, #10]
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	f7f9 fc2b 	bl	8009272 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800fa1c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa20:	f003 0302 	and.w	r3, r3, #2
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d025      	beq.n	800fa74 <lv_draw_rect_border_corner+0x1412>
 800fa28:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa2c:	f003 0304 	and.w	r3, r3, #4
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d01f      	beq.n	800fa74 <lv_draw_rect_border_corner+0x1412>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800fa34:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	b218      	sxth	r0, r3
 800fa4e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	b219      	sxth	r1, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800fa6a:	9200      	str	r2, [sp, #0]
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	f7f9 fbff 	bl	8009272 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800fa74:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa78:	f003 0302 	and.w	r3, r3, #2
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d025      	beq.n	800facc <lv_draw_rect_border_corner+0x146a>
 800fa80:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800fa84:	f003 0308 	and.w	r3, r3, #8
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d01f      	beq.n	800facc <lv_draw_rect_border_corner+0x146a>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800fa8c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	4413      	add	r3, r2
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	b218      	sxth	r0, r3
 800faa2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800faac:	b29b      	uxth	r3, r3
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	b29b      	uxth	r3, r3
 800faba:	b219      	sxth	r1, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800fac2:	9200      	str	r2, [sp, #0]
 800fac4:	895b      	ldrh	r3, [r3, #10]
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	f7f9 fbd3 	bl	8009272 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800facc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	3301      	adds	r3, #1
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800fada:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800fade:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fae2:	429a      	cmp	r2, r3
 800fae4:	f6ff ae7a 	blt.w	800f7dc <lv_draw_rect_border_corner+0x117a>
                }
            }
        }
    }
#endif
}
 800fae8:	bf00      	nop
 800faea:	3778      	adds	r7, #120	; 0x78
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <lv_draw_shadow>:
 * @param mask pointer to a mask area (from the design functions)
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_shadow(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	70fb      	strb	r3, [r7, #3]
    /* If mask is in the middle of cords do not draw shadow*/
    lv_coord_t radius = style->body.radius;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	88db      	ldrh	r3, [r3, #6]
 800fb02:	83fb      	strh	r3, [r7, #30]
    lv_coord_t width  = lv_area_get_width(coords);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7fd f844 	bl	800cb92 <lv_area_get_width>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t height = lv_area_get_height(coords);
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f7fd f856 	bl	800cbc0 <lv_area_get_height>
 800fb14:	4603      	mov	r3, r0
 800fb16:	837b      	strh	r3, [r7, #26]
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 800fb18:	8bfb      	ldrh	r3, [r7, #30]
 800fb1a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fb1e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 fedc 	bl	80108e0 <lv_draw_cont_radius_corr>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	83fb      	strh	r3, [r7, #30]
    lv_area_t area_tmp;

    /*Check horizontally without radius*/
    lv_area_copy(&area_tmp, coords);
 800fb2c:	f107 0310 	add.w	r3, r7, #16
 800fb30:	68f9      	ldr	r1, [r7, #12]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fd f81f 	bl	800cb76 <lv_area_copy>
    area_tmp.x1 += radius;
 800fb38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	8bfb      	ldrh	r3, [r7, #30]
 800fb40:	4413      	add	r3, r2
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	b21b      	sxth	r3, r3
 800fb46:	823b      	strh	r3, [r7, #16]
    area_tmp.x2 -= radius;
 800fb48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	8bfb      	ldrh	r3, [r7, #30]
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	b21b      	sxth	r3, r3
 800fb56:	82bb      	strh	r3, [r7, #20]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fb58:	f107 0310 	add.w	r3, r7, #16
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	68b8      	ldr	r0, [r7, #8]
 800fb60:	f003 fa03 	bl	8012f6a <lv_area_is_in>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d134      	bne.n	800fbd4 <lv_draw_shadow+0xe4>

    /*Check vertically without radius*/
    lv_area_copy(&area_tmp, coords);
 800fb6a:	f107 0310 	add.w	r3, r7, #16
 800fb6e:	68f9      	ldr	r1, [r7, #12]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fd f800 	bl	800cb76 <lv_area_copy>
    area_tmp.y1 += radius;
 800fb76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	8bfb      	ldrh	r3, [r7, #30]
 800fb7e:	4413      	add	r3, r2
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	b21b      	sxth	r3, r3
 800fb84:	827b      	strh	r3, [r7, #18]
    area_tmp.y2 -= radius;
 800fb86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fb8a:	b29a      	uxth	r2, r3
 800fb8c:	8bfb      	ldrh	r3, [r7, #30]
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	b21b      	sxth	r3, r3
 800fb94:	82fb      	strh	r3, [r7, #22]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fb96:	f107 0310 	add.w	r3, r7, #16
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	68b8      	ldr	r0, [r7, #8]
 800fb9e:	f003 f9e4 	bl	8012f6a <lv_area_is_in>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d117      	bne.n	800fbd8 <lv_draw_shadow+0xe8>

    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d106      	bne.n	800fbbe <lv_draw_shadow+0xce>
        lv_draw_shadow_full(coords, mask, style, opa_scale);
 800fbb0:	78fb      	ldrb	r3, [r7, #3]
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f000 f812 	bl	800fbe0 <lv_draw_shadow_full>
 800fbbc:	e00d      	b.n	800fbda <lv_draw_shadow+0xea>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	7d1b      	ldrb	r3, [r3, #20]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d109      	bne.n	800fbda <lv_draw_shadow+0xea>
        lv_draw_shadow_bottom(coords, mask, style, opa_scale);
 800fbc6:	78fb      	ldrb	r3, [r7, #3]
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	68b9      	ldr	r1, [r7, #8]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f000 fb2e 	bl	801022e <lv_draw_shadow_bottom>
 800fbd2:	e002      	b.n	800fbda <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fbd4:	bf00      	nop
 800fbd6:	e000      	b.n	800fbda <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800fbd8:	bf00      	nop
    }
}
 800fbda:	3720      	adds	r7, #32
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <lv_draw_shadow_full>:

static void lv_draw_shadow_full(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                lv_opa_t opa_scale)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b0a0      	sub	sp, #128	; 0x80
 800fbe4:	af02      	add	r7, sp, #8
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
 800fbec:	70fb      	strb	r3, [r7, #3]
     * radius means smaller average shadow opacity. The solution should be to start `line` from `-
     * swidth` and handle if the straight part is short (or zero) and the value is taken from the
     * other corner. `col` also should start from `- swidth`
     */

    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800fbee:	f7f7 fe55 	bl	800789c <lv_refr_get_disp_refreshing>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f002 fd21 	bl	801263c <lv_disp_get_antialiasing>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    lv_coord_t radius = style->body.radius;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	88db      	ldrh	r3, [r3, #6]
 800fc04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    lv_coord_t swidth = style->body.shadow.width;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	8a5b      	ldrh	r3, [r3, #18]
 800fc0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    lv_coord_t width  = lv_area_get_width(coords);
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f7fc ffbe 	bl	800cb92 <lv_area_get_width>
 800fc16:	4603      	mov	r3, r0
 800fc18:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    lv_coord_t height = lv_area_get_height(coords);
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f7fc ffcf 	bl	800cbc0 <lv_area_get_height>
 800fc22:	4603      	mov	r3, r0
 800fc24:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800fc28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fc2c:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800fc30:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 fe53 	bl	80108e0 <lv_draw_cont_radius_corr>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    radius += aa;
 800fc40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fc4a:	4413      	add	r3, r2
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

    /*Allocate a draw buffer the buffer required to draw the shadow*/
    int16_t filter_width = 2 * swidth + 1;
 800fc52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800fc62:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fc66:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800fc6a:	4413      	add	r3, r2
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	f023 0303 	bic.w	r3, r3, #3
 800fc72:	65bb      	str	r3, [r7, #88]	; 0x58
    curve_x_size *= sizeof(lv_coord_t);
 800fc74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc76:	005b      	lsls	r3, r3, #1
 800fc78:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800fc7a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fc7e:	3303      	adds	r3, #3
 800fc80:	f023 0303 	bic.w	r3, r3, #3
 800fc84:	657b      	str	r3, [r7, #84]	; 0x54
    line_1d_blur_size *= sizeof(uint32_t);
 800fc86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t line_2d_blur_size = ((radius + swidth + 1) + 3) & ~0x3;     /*Round to 4*/
 800fc8c:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fc90:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800fc94:	4413      	add	r3, r2
 800fc96:	3304      	adds	r3, #4
 800fc98:	f023 0303 	bic.w	r3, r3, #3
 800fc9c:	653b      	str	r3, [r7, #80]	; 0x50
    line_2d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800fc9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fca2:	441a      	add	r2, r3
 800fca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca6:	4413      	add	r3, r2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7f8 fd69 	bl	8008780 <lv_draw_get_buf>
 800fcae:	64f8      	str	r0, [r7, #76]	; 0x4c

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 800fcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb2:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 800fcb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcb8:	4413      	add	r3, r2
 800fcba:	647b      	str	r3, [r7, #68]	; 0x44
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800fcbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcc0:	4413      	add	r3, r2
 800fcc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcc4:	4413      	add	r3, r2
 800fcc6:	643b      	str	r3, [r7, #64]	; 0x40

    memset(curve_x, 0, curve_x_size);
 800fcc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcca:	2100      	movs	r1, #0
 800fccc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fcce:	f017 fab4 	bl	802723a <memset>
    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 800fcd2:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800fcd6:	f107 0136 	add.w	r1, r7, #54	; 0x36
 800fcda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fcde:	4618      	mov	r0, r3
 800fce0:	f003 f973 	bl	8012fca <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800fce4:	e017      	b.n	800fd16 <lv_draw_shadow_full+0x136>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800fce6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcee:	4413      	add	r3, r2
 800fcf0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800fcf4:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800fcf6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcfe:	4413      	add	r3, r2
 800fd00:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800fd04:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 800fd06:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800fd0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd0e:	4611      	mov	r1, r2
 800fd10:	4618      	mov	r0, r3
 800fd12:	f003 f989 	bl	8013028 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800fd16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f003 f96f 	bl	8012ffe <lv_circ_cont>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1df      	bne.n	800fce6 <lv_draw_shadow_full+0x106>
    }
    int16_t line;
    /*1D Blur horizontally*/
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800fd26:	78fb      	ldrb	r3, [r7, #3]
 800fd28:	2bff      	cmp	r3, #255	; 0xff
 800fd2a:	d102      	bne.n	800fd32 <lv_draw_shadow_full+0x152>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	7a1b      	ldrb	r3, [r3, #8]
 800fd30:	e00a      	b.n	800fd48 <lv_draw_shadow_full+0x168>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	7a1b      	ldrb	r3, [r3, #8]
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	fb12 f303 	smulbb	r3, r2, r3
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	0a1b      	lsrs	r3, r3, #8
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for(line = 0; line < filter_width; line++) {
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fd52:	e021      	b.n	800fd98 <lv_draw_shadow_full+0x1b8>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800fd54:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800fd58:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd64:	fb03 f302 	mul.w	r3, r3, r2
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	021a      	lsls	r2, r3, #8
                             (filter_width * filter_width);
 800fd6c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fd70:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 800fd74:	fb01 f303 	mul.w	r3, r1, r3
 800fd78:	4618      	mov	r0, r3
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800fd7a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd82:	440b      	add	r3, r1
 800fd84:	fbb2 f2f0 	udiv	r2, r2, r0
 800fd88:	601a      	str	r2, [r3, #0]
    for(line = 0; line < filter_width; line++) {
 800fd8a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	3301      	adds	r3, #1
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fd98:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fd9c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800fda0:	429a      	cmp	r2, r3
 800fda2:	dbd7      	blt.n	800fd54 <lv_draw_shadow_full+0x174>
    lv_point_t point_lb;
    lv_point_t ofs_rb;
    lv_point_t ofs_rt;
    lv_point_t ofs_lb;
    lv_point_t ofs_lt;
    ofs_rb.x = coords->x2 - radius - aa;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	b21b      	sxth	r3, r3
 800fdc0:	843b      	strh	r3, [r7, #32]
    ofs_rb.y = coords->y2 - radius - aa;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	b21b      	sxth	r3, r3
 800fdde:	847b      	strh	r3, [r7, #34]	; 0x22

    ofs_rt.x = coords->x2 - radius - aa;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	b21b      	sxth	r3, r3
 800fdfc:	83bb      	strh	r3, [r7, #28]
    ofs_rt.y = coords->y1 + radius + aa;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe0a:	4413      	add	r3, r2
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4413      	add	r3, r2
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	b21b      	sxth	r3, r3
 800fe1a:	83fb      	strh	r3, [r7, #30]

    ofs_lb.x = coords->x1 + radius + aa;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe28:	4413      	add	r3, r2
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	4413      	add	r3, r2
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	b21b      	sxth	r3, r3
 800fe38:	833b      	strh	r3, [r7, #24]
    ofs_lb.y = coords->y2 - radius - aa;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	b21b      	sxth	r3, r3
 800fe56:	837b      	strh	r3, [r7, #26]

    ofs_lt.x = coords->x1 + radius + aa;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe64:	4413      	add	r3, r2
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	4413      	add	r3, r2
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	82bb      	strh	r3, [r7, #20]
    ofs_lt.y = coords->y1 + radius + aa;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fe82:	4413      	add	r3, r2
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4413      	add	r3, r2
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	b21b      	sxth	r3, r3
 800fe92:	82fb      	strh	r3, [r7, #22]
    bool line_ready;
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800fe94:	2300      	movs	r3, #0
 800fe96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800fe9a:	e1ba      	b.n	8010212 <lv_draw_shadow_full+0x632>
        line_ready = false;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800fea2:	2300      	movs	r3, #0
 800fea4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800fea8:	e098      	b.n	800ffdc <lv_draw_shadow_full+0x3fc>
                                                         shadow pixel (radius + swidth))*/

            /*Sum the opacities from the lines above and below this 'row'*/
            int16_t line_rel;
            uint32_t px_opa_sum = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800feae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800feb2:	425b      	negs	r3, r3
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800feba:	e06e      	b.n	800ff9a <lv_draw_shadow_full+0x3ba>
                /*Get the relative x position of the 'line_rel' to 'line'*/
                int16_t col_rel;
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800febc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fec0:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800fec4:	4413      	add	r3, r2
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	da12      	bge.n	800fef0 <lv_draw_shadow_full+0x310>
                    col_rel = radius - curve_x[line] - col;
 800feca:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800fece:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fed6:	440b      	add	r3, r1
 800fed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fedc:	b29b      	uxth	r3, r3
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29b      	uxth	r3, r3
 800feea:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800feee:	e023      	b.n	800ff38 <lv_draw_shadow_full+0x358>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800fef0:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800fef4:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800fef8:	441a      	add	r2, r3
 800fefa:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800fefe:	429a      	cmp	r2, r3
 800ff00:	dc52      	bgt.n	800ffa8 <lv_draw_shadow_full+0x3c8>
                    break;
                } else { /*Blur from the curve*/
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800ff02:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800ff06:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ff0a:	4413      	add	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff10:	4413      	add	r3, r2
 800ff12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff20:	440b      	add	r3, r1
 800ff22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
                }

                /*Add the value of the 1D blur on 'col_rel' position*/
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800ff38:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800ff3c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff40:	425b      	negs	r3, r3
 800ff42:	429a      	cmp	r2, r3
 800ff44:	da0a      	bge.n	800ff5c <lv_draw_shadow_full+0x37c>
                    if(line_rel == -swidth)
 800ff46:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800ff4a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff4e:	425b      	negs	r3, r3
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d12b      	bne.n	800ffac <lv_draw_shadow_full+0x3cc>
                        line_ready = true; /*If no data even on the very first line then it wont't
 800ff54:	2301      	movs	r3, #1
 800ff56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                                              be anything else in this line*/
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800ff5a:	e027      	b.n	800ffac <lv_draw_shadow_full+0x3cc>
                } else if(col_rel > swidth)
 800ff5c:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800ff60:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ff64:	429a      	cmp	r2, r3
 800ff66:	dd05      	ble.n	800ff74 <lv_draw_shadow_full+0x394>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800ff68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff6e:	4413      	add	r3, r2
 800ff70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff72:	e00b      	b.n	800ff8c <lv_draw_shadow_full+0x3ac>
                else
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800ff74:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ff78:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff82:	4413      	add	r3, r2
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff88:	4413      	add	r3, r2
 800ff8a:	66fb      	str	r3, [r7, #108]	; 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800ff8c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	3301      	adds	r3, #1
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800ff9a:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800ff9e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	dd8a      	ble.n	800febc <lv_draw_shadow_full+0x2dc>
 800ffa6:	e002      	b.n	800ffae <lv_draw_shadow_full+0x3ce>
                    break;
 800ffa8:	bf00      	nop
 800ffaa:	e000      	b.n	800ffae <lv_draw_shadow_full+0x3ce>
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800ffac:	bf00      	nop
            }

            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800ffae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb0:	0a19      	lsrs	r1, r3, #8
 800ffb2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffb8:	4413      	add	r3, r2
 800ffba:	b2ca      	uxtb	r2, r1
 800ffbc:	701a      	strb	r2, [r3, #0]
            if(line_ready) {
 800ffbe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d005      	beq.n	800ffd2 <lv_draw_shadow_full+0x3f2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800ffc6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffca:	3301      	adds	r3, #1
 800ffcc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                break;
 800ffd0:	e00e      	b.n	800fff0 <lv_draw_shadow_full+0x410>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800ffd2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ffdc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ffe0:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 800ffe4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ffe8:	440b      	add	r3, r1
 800ffea:	429a      	cmp	r2, r3
 800ffec:	f77f af5d 	ble.w	800feaa <lv_draw_shadow_full+0x2ca>
            }
        }

        /*Flush the line*/
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800fff0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fff8:	4413      	add	r3, r2
 800fffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fffe:	b29a      	uxth	r2, r3
 8010000:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010004:	b29b      	uxth	r3, r3
 8010006:	4413      	add	r3, r2
 8010008:	b29b      	uxth	r3, r3
 801000a:	3301      	adds	r3, #1
 801000c:	b29b      	uxth	r3, r3
 801000e:	b21b      	sxth	r3, r3
 8010010:	863b      	strh	r3, [r7, #48]	; 0x30
        point_rt.y = ofs_rt.y - line;
 8010012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010016:	b29a      	uxth	r2, r3
 8010018:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	b29b      	uxth	r3, r3
 8010020:	b21b      	sxth	r3, r3
 8010022:	867b      	strh	r3, [r7, #50]	; 0x32

        point_rb.x = curve_x[line] + ofs_rb.x + 1;
 8010024:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801002c:	4413      	add	r3, r2
 801002e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010032:	b29a      	uxth	r2, r3
 8010034:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010038:	b29b      	uxth	r3, r3
 801003a:	4413      	add	r3, r2
 801003c:	b29b      	uxth	r3, r3
 801003e:	3301      	adds	r3, #1
 8010040:	b29b      	uxth	r3, r3
 8010042:	b21b      	sxth	r3, r3
 8010044:	85bb      	strh	r3, [r7, #44]	; 0x2c
        point_rb.y = ofs_rb.y + line;
 8010046:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801004a:	b29a      	uxth	r2, r3
 801004c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010050:	4413      	add	r3, r2
 8010052:	b29b      	uxth	r3, r3
 8010054:	b21b      	sxth	r3, r3
 8010056:	85fb      	strh	r3, [r7, #46]	; 0x2e

        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8010058:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801005c:	b29a      	uxth	r2, r3
 801005e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010066:	440b      	add	r3, r1
 8010068:	f9b3 3000 	ldrsh.w	r3, [r3]
 801006c:	b29b      	uxth	r3, r3
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	b29b      	uxth	r3, r3
 8010072:	3b01      	subs	r3, #1
 8010074:	b29b      	uxth	r3, r3
 8010076:	b21b      	sxth	r3, r3
 8010078:	853b      	strh	r3, [r7, #40]	; 0x28
        point_lt.y = ofs_lt.y - line;
 801007a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801007e:	b29a      	uxth	r2, r3
 8010080:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	b29b      	uxth	r3, r3
 8010088:	b21b      	sxth	r3, r3
 801008a:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_lb.x = ofs_lb.x - curve_x[line] - 1;
 801008c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010090:	b29a      	uxth	r2, r3
 8010092:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801009a:	440b      	add	r3, r1
 801009c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	b21b      	sxth	r3, r3
 80100ac:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_lb.y = ofs_lb.y + line;
 80100ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80100b8:	4413      	add	r3, r2
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	b21b      	sxth	r3, r3
 80100be:	84fb      	strh	r3, [r7, #38]	; 0x26

        uint16_t d;
        for(d = 1; d < col; d++) {
 80100c0:	2301      	movs	r3, #1
 80100c2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80100c6:	e08c      	b.n	80101e2 <lv_draw_shadow_full+0x602>

            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 80100c8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80100cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	da14      	bge.n	80100fe <lv_draw_shadow_full+0x51e>
 80100d4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80100d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80100dc:	429a      	cmp	r2, r3
 80100de:	da0e      	bge.n	80100fe <lv_draw_shadow_full+0x51e>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80100e0:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 80100e4:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80100e8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80100ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100ee:	4413      	add	r3, r2
 80100f0:	781a      	ldrb	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	9200      	str	r2, [sp, #0]
 80100f6:	8a1b      	ldrh	r3, [r3, #16]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	f7f9 f8ba 	bl	8009272 <lv_draw_px>
            }

            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 80100fe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010102:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010106:	429a      	cmp	r2, r3
 8010108:	da14      	bge.n	8010134 <lv_draw_shadow_full+0x554>
 801010a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801010e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010112:	429a      	cmp	r2, r3
 8010114:	dd0e      	ble.n	8010134 <lv_draw_shadow_full+0x554>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8010116:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 801011a:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 801011e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010124:	4413      	add	r3, r2
 8010126:	781a      	ldrb	r2, [r3, #0]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	9200      	str	r2, [sp, #0]
 801012c:	8a1b      	ldrh	r3, [r3, #16]
 801012e:	68ba      	ldr	r2, [r7, #8]
 8010130:	f7f9 f89f 	bl	8009272 <lv_draw_px>
            }

            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8010134:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8010138:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801013c:	429a      	cmp	r2, r3
 801013e:	dd14      	ble.n	801016a <lv_draw_shadow_full+0x58a>
 8010140:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8010144:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010148:	429a      	cmp	r2, r3
 801014a:	da0e      	bge.n	801016a <lv_draw_shadow_full+0x58a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801014c:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 8010150:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8010154:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801015a:	4413      	add	r3, r2
 801015c:	781a      	ldrb	r2, [r3, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	9200      	str	r2, [sp, #0]
 8010162:	8a1b      	ldrh	r3, [r3, #16]
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	f7f9 f884 	bl	8009272 <lv_draw_px>
            }

            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 801016a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 801016e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010172:	429a      	cmp	r2, r3
 8010174:	dd14      	ble.n	80101a0 <lv_draw_shadow_full+0x5c0>
 8010176:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801017a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801017e:	429a      	cmp	r2, r3
 8010180:	dd0e      	ble.n	80101a0 <lv_draw_shadow_full+0x5c0>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8010182:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 8010186:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 801018a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801018e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010190:	4413      	add	r3, r2
 8010192:	781a      	ldrb	r2, [r3, #0]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	9200      	str	r2, [sp, #0]
 8010198:	8a1b      	ldrh	r3, [r3, #16]
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	f7f9 f869 	bl	8009272 <lv_draw_px>
            }

            point_rb.x++;
 80101a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	3301      	adds	r3, #1
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	b21b      	sxth	r3, r3
 80101ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
            point_lb.x--;
 80101ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	3b01      	subs	r3, #1
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	b21b      	sxth	r3, r3
 80101ba:	84bb      	strh	r3, [r7, #36]	; 0x24

            point_rt.x++;
 80101bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	3301      	adds	r3, #1
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	b21b      	sxth	r3, r3
 80101c8:	863b      	strh	r3, [r7, #48]	; 0x30
            point_lt.x--;
 80101ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	3b01      	subs	r3, #1
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	b21b      	sxth	r3, r3
 80101d6:	853b      	strh	r3, [r7, #40]	; 0x28
        for(d = 1; d < col; d++) {
 80101d8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80101dc:	3301      	adds	r3, #1
 80101de:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80101e2:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80101e6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80101ea:	429a      	cmp	r2, r3
 80101ec:	f4ff af6c 	bcc.w	80100c8 <lv_draw_shadow_full+0x4e8>
        }

        /* Put the first line to the edges too.
         * It is not correct because blur should be done below the corner too
         * but is is simple, fast and gives a good enough result*/
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 80101f0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d105      	bne.n	8010204 <lv_draw_shadow_full+0x624>
 80101f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	68b9      	ldr	r1, [r7, #8]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f000 fa17 	bl	8010632 <lv_draw_shadow_full_straight>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8010204:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8010208:	b29b      	uxth	r3, r3
 801020a:	3301      	adds	r3, #1
 801020c:	b29b      	uxth	r3, r3
 801020e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8010212:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8010216:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 801021a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801021e:	440b      	add	r3, r1
 8010220:	429a      	cmp	r2, r3
 8010222:	f77f ae3b 	ble.w	800fe9c <lv_draw_shadow_full+0x2bc>
    }
}
 8010226:	bf00      	nop
 8010228:	3778      	adds	r7, #120	; 0x78
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <lv_draw_shadow_bottom>:

static void lv_draw_shadow_bottom(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b09a      	sub	sp, #104	; 0x68
 8010232:	af02      	add	r7, sp, #8
 8010234:	60f8      	str	r0, [r7, #12]
 8010236:	60b9      	str	r1, [r7, #8]
 8010238:	607a      	str	r2, [r7, #4]
 801023a:	70fb      	strb	r3, [r7, #3]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801023c:	f7f7 fb2e 	bl	800789c <lv_refr_get_disp_refreshing>
 8010240:	4603      	mov	r3, r0
 8010242:	4618      	mov	r0, r3
 8010244:	f002 f9fa 	bl	801263c <lv_disp_get_antialiasing>
 8010248:	4603      	mov	r3, r0
 801024a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_coord_t radius = style->body.radius;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	88db      	ldrh	r3, [r3, #6]
 8010252:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    lv_coord_t swidth = style->body.shadow.width;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	8a5b      	ldrh	r3, [r3, #18]
 801025a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    lv_coord_t width  = lv_area_get_width(coords);
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f7fc fc97 	bl	800cb92 <lv_area_get_width>
 8010264:	4603      	mov	r3, r0
 8010266:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    lv_coord_t height = lv_area_get_height(coords);
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f7fc fca8 	bl	800cbc0 <lv_area_get_height>
 8010270:	4603      	mov	r3, r0
 8010272:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010276:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801027a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801027e:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8010282:	4618      	mov	r0, r3
 8010284:	f000 fb2c 	bl	80108e0 <lv_draw_cont_radius_corr>
 8010288:	4603      	mov	r3, r0
 801028a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 801028e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010292:	b29b      	uxth	r3, r3
 8010294:	461a      	mov	r2, r3
 8010296:	0052      	lsls	r2, r2, #1
 8010298:	4413      	add	r3, r2
 801029a:	b29a      	uxth	r2, r3
 801029c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80102a0:	4413      	add	r3, r2
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    swidth += aa;
 80102a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80102b2:	4413      	add	r3, r2
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 80102ba:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80102be:	3304      	adds	r3, #4
 80102c0:	f023 0303 	bic.w	r3, r3, #3
 80102c4:	64bb      	str	r3, [r7, #72]	; 0x48
    curve_x_size *= sizeof(lv_coord_t);
 80102c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 80102cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	3303      	adds	r3, #3
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	f023 0303 	bic.w	r3, r3, #3
 80102da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    line_1d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80102de:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80102e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e4:	4413      	add	r3, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7f8 fa4a 	bl	8008780 <lv_draw_get_buf>
 80102ec:	6438      	str	r0, [r7, #64]	; 0x40

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 80102ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 80102f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102f6:	4413      	add	r3, r2
 80102f8:	63bb      	str	r3, [r7, #56]	; 0x38

    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 80102fa:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 80102fe:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8010302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010306:	4618      	mov	r0, r3
 8010308:	f002 fe5f 	bl	8012fca <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 801030c:	e017      	b.n	801033e <lv_draw_shadow_bottom+0x110>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 801030e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010316:	4413      	add	r3, r2
 8010318:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801031c:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 801031e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010322:	005b      	lsls	r3, r3, #1
 8010324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010326:	4413      	add	r3, r2
 8010328:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801032c:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 801032e:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8010332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010336:	4611      	mov	r1, r2
 8010338:	4618      	mov	r0, r3
 801033a:	f002 fe75 	bl	8013028 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 801033e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010342:	4618      	mov	r0, r3
 8010344:	f002 fe5b 	bl	8012ffe <lv_circ_cont>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1df      	bne.n	801030e <lv_draw_shadow_bottom+0xe0>
    }

    int16_t col;

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 801034e:	78fb      	ldrb	r3, [r7, #3]
 8010350:	2bff      	cmp	r3, #255	; 0xff
 8010352:	d102      	bne.n	801035a <lv_draw_shadow_bottom+0x12c>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7a1b      	ldrb	r3, [r3, #8]
 8010358:	e00a      	b.n	8010370 <lv_draw_shadow_bottom+0x142>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	7a1b      	ldrb	r3, [r3, #8]
 801035e:	b29a      	uxth	r2, r3
 8010360:	78fb      	ldrb	r3, [r7, #3]
 8010362:	b29b      	uxth	r3, r3
 8010364:	fb12 f303 	smulbb	r3, r2, r3
 8010368:	b29b      	uxth	r3, r3
 801036a:	0a1b      	lsrs	r3, r3, #8
 801036c:	b29b      	uxth	r3, r3
 801036e:	b2db      	uxtb	r3, r3
 8010370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for(col = 0; col < swidth; col++) {
 8010374:	2300      	movs	r3, #0
 8010376:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801037a:	e01b      	b.n	80103b4 <lv_draw_shadow_bottom+0x186>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 801037c:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8010380:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010384:	1ad3      	subs	r3, r2, r3
 8010386:	461a      	mov	r2, r3
 8010388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801038c:	fb03 f302 	mul.w	r3, r3, r2
 8010390:	085a      	lsrs	r2, r3, #1
 8010392:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010396:	fbb2 f1f3 	udiv	r1, r2, r3
 801039a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801039e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103a0:	4413      	add	r3, r2
 80103a2:	b2ca      	uxtb	r2, r1
 80103a4:	701a      	strb	r2, [r3, #0]
    for(col = 0; col < swidth; col++) {
 80103a6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	3301      	adds	r3, #1
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80103b4:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80103b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80103bc:	429a      	cmp	r2, r3
 80103be:	dbdd      	blt.n	801037c <lv_draw_shadow_bottom+0x14e>
    lv_point_t point_r;
    lv_area_t area_mid;
    lv_point_t ofs_l;
    lv_point_t ofs_r;

    ofs_l.x = coords->x1 + radius;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80103cc:	4413      	add	r3, r2
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	b21b      	sxth	r3, r3
 80103d2:	833b      	strh	r3, [r7, #24]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80103da:	b29a      	uxth	r2, r3
 80103dc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	3301      	adds	r3, #1
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	b21b      	sxth	r3, r3
 80103f4:	837b      	strh	r3, [r7, #26]

    ofs_r.x = coords->x2 - radius;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	b29b      	uxth	r3, r3
 8010406:	b21b      	sxth	r3, r3
 8010408:	82bb      	strh	r3, [r7, #20]
    ofs_r.y = coords->y2 - radius + 1 - aa;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010410:	b29a      	uxth	r2, r3
 8010412:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010416:	1ad3      	subs	r3, r2, r3
 8010418:	b29a      	uxth	r2, r3
 801041a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801041e:	b29b      	uxth	r3, r3
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29b      	uxth	r3, r3
 8010424:	3301      	adds	r3, #1
 8010426:	b29b      	uxth	r3, r3
 8010428:	b21b      	sxth	r3, r3
 801042a:	82fb      	strh	r3, [r7, #22]

    for(col = 0; col <= radius; col++) {
 801042c:	2300      	movs	r3, #0
 801042e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8010432:	e0b0      	b.n	8010596 <lv_draw_shadow_bottom+0x368>
        point_l.x = ofs_l.x - col;
 8010434:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010438:	b29a      	uxth	r2, r3
 801043a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	b29b      	uxth	r3, r3
 8010442:	b21b      	sxth	r3, r3
 8010444:	853b      	strh	r3, [r7, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 8010446:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801044a:	b29a      	uxth	r2, r3
 801044c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010454:	440b      	add	r3, r1
 8010456:	f9b3 3000 	ldrsh.w	r3, [r3]
 801045a:	b29b      	uxth	r3, r3
 801045c:	4413      	add	r3, r2
 801045e:	b29b      	uxth	r3, r3
 8010460:	b21b      	sxth	r3, r3
 8010462:	857b      	strh	r3, [r7, #42]	; 0x2a

        point_r.x = ofs_r.x + col;
 8010464:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010468:	b29a      	uxth	r2, r3
 801046a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801046e:	4413      	add	r3, r2
 8010470:	b29b      	uxth	r3, r3
 8010472:	b21b      	sxth	r3, r3
 8010474:	84bb      	strh	r3, [r7, #36]	; 0x24
        point_r.y = ofs_r.y + curve_x[col];
 8010476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801047a:	b29a      	uxth	r2, r3
 801047c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010484:	440b      	add	r3, r1
 8010486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801048a:	b29b      	uxth	r3, r3
 801048c:	4413      	add	r3, r2
 801048e:	b29b      	uxth	r3, r3
 8010490:	b21b      	sxth	r3, r3
 8010492:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_opa_t px_opa;
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 8010494:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8010498:	2b00      	cmp	r3, #0
 801049a:	d016      	beq.n	80104ca <lv_draw_shadow_bottom+0x29c>
 801049c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80104a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104a4:	3b01      	subs	r3, #1
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104aa:	4413      	add	r3, r2
 80104ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104ba:	440b      	add	r3, r1
 80104bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	b21b      	sxth	r3, r3
 80104c8:	e000      	b.n	80104cc <lv_draw_shadow_bottom+0x29e>
 80104ca:	2300      	movs	r3, #0
 80104cc:	86bb      	strh	r3, [r7, #52]	; 0x34
        uint16_t d;
        for(d = 0; d < swidth; d++) {
 80104ce:	2300      	movs	r3, #0
 80104d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80104d4:	e052      	b.n	801057c <lv_draw_shadow_bottom+0x34e>
            /*When stepping a pixel in y calculate the average with the pixel from the prev. column
             * to make a blur */
            if(diff == 0) {
 80104d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d107      	bne.n	80104ee <lv_draw_shadow_bottom+0x2c0>
                px_opa = line_1d_blur[d];
 80104de:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80104e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104e4:	4413      	add	r3, r2
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80104ec:	e015      	b.n	801051a <lv_draw_shadow_bottom+0x2ec>
            } else {
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 80104ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80104f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104f4:	4413      	add	r3, r2
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80104fe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010502:	1acb      	subs	r3, r1, r3
 8010504:	4619      	mov	r1, r3
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	440b      	add	r3, r1
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	b29b      	uxth	r3, r3
 801050e:	4413      	add	r3, r2
 8010510:	b29b      	uxth	r3, r3
 8010512:	085b      	lsrs	r3, r3, #1
 8010514:	b29b      	uxth	r3, r3
 8010516:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            }
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 801051a:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 801051e:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8010528:	9200      	str	r2, [sp, #0]
 801052a:	8a1b      	ldrh	r3, [r3, #16]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	f7f8 fea0 	bl	8009272 <lv_draw_px>
            point_l.y++;
 8010532:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010536:	b29b      	uxth	r3, r3
 8010538:	3301      	adds	r3, #1
 801053a:	b29b      	uxth	r3, r3
 801053c:	b21b      	sxth	r3, r3
 801053e:	857b      	strh	r3, [r7, #42]	; 0x2a

            /*Don't overdraw the pixel on the middle*/
            if(point_r.x > ofs_l.x) {
 8010540:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010544:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010548:	429a      	cmp	r2, r3
 801054a:	dd0b      	ble.n	8010564 <lv_draw_shadow_bottom+0x336>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 801054c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8010550:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 801055a:	9200      	str	r2, [sp, #0]
 801055c:	8a1b      	ldrh	r3, [r3, #16]
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	f7f8 fe87 	bl	8009272 <lv_draw_px>
            }
            point_r.y++;
 8010564:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010568:	b29b      	uxth	r3, r3
 801056a:	3301      	adds	r3, #1
 801056c:	b29b      	uxth	r3, r3
 801056e:	b21b      	sxth	r3, r3
 8010570:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(d = 0; d < swidth; d++) {
 8010572:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8010576:	3301      	adds	r3, #1
 8010578:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 801057c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8010580:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010584:	429a      	cmp	r2, r3
 8010586:	dba6      	blt.n	80104d6 <lv_draw_shadow_bottom+0x2a8>
    for(col = 0; col <= radius; col++) {
 8010588:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801058c:	b29b      	uxth	r3, r3
 801058e:	3301      	adds	r3, #1
 8010590:	b29b      	uxth	r3, r3
 8010592:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8010596:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801059a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801059e:	429a      	cmp	r2, r3
 80105a0:	f77f af48 	ble.w	8010434 <lv_draw_shadow_bottom+0x206>
        }
    }

    area_mid.x1 = ofs_l.x + 1;
 80105a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	3301      	adds	r3, #1
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	b21b      	sxth	r3, r3
 80105b0:	83bb      	strh	r3, [r7, #28]
    area_mid.y1 = ofs_l.y + radius;
 80105b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80105bc:	4413      	add	r3, r2
 80105be:	b29b      	uxth	r3, r3
 80105c0:	b21b      	sxth	r3, r3
 80105c2:	83fb      	strh	r3, [r7, #30]
    area_mid.x2 = ofs_r.x - 1;
 80105c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	3b01      	subs	r3, #1
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	b21b      	sxth	r3, r3
 80105d0:	843b      	strh	r3, [r7, #32]
    area_mid.y2 = area_mid.y1;
 80105d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80105d6:	847b      	strh	r3, [r7, #34]	; 0x22

    uint16_t d;
    for(d = 0; d < swidth; d++) {
 80105d8:	2300      	movs	r3, #0
 80105da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80105de:	e01e      	b.n	801061e <lv_draw_shadow_bottom+0x3f0>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 80105e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80105e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105e6:	4413      	add	r3, r2
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	f107 001c 	add.w	r0, r7, #28
 80105f0:	8a12      	ldrh	r2, [r2, #16]
 80105f2:	68b9      	ldr	r1, [r7, #8]
 80105f4:	f7f8 fed5 	bl	80093a2 <lv_draw_fill>
        area_mid.y1++;
 80105f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	3301      	adds	r3, #1
 8010600:	b29b      	uxth	r3, r3
 8010602:	b21b      	sxth	r3, r3
 8010604:	83fb      	strh	r3, [r7, #30]
        area_mid.y2++;
 8010606:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801060a:	b29b      	uxth	r3, r3
 801060c:	3301      	adds	r3, #1
 801060e:	b29b      	uxth	r3, r3
 8010610:	b21b      	sxth	r3, r3
 8010612:	847b      	strh	r3, [r7, #34]	; 0x22
    for(d = 0; d < swidth; d++) {
 8010614:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8010618:	3301      	adds	r3, #1
 801061a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801061e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8010622:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010626:	429a      	cmp	r2, r3
 8010628:	dbda      	blt.n	80105e0 <lv_draw_shadow_bottom+0x3b2>
    }
}
 801062a:	bf00      	nop
 801062c:	3760      	adds	r7, #96	; 0x60
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <lv_draw_shadow_full_straight>:

static void lv_draw_shadow_full_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         const lv_opa_t * map)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b090      	sub	sp, #64	; 0x40
 8010636:	af00      	add	r7, sp, #0
 8010638:	60f8      	str	r0, [r7, #12]
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	607a      	str	r2, [r7, #4]
 801063e:	603b      	str	r3, [r7, #0]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010640:	f7f7 f92c 	bl	800789c <lv_refr_get_disp_refreshing>
 8010644:	4603      	mov	r3, r0
 8010646:	4618      	mov	r0, r3
 8010648:	f001 fff8 	bl	801263c <lv_disp_get_antialiasing>
 801064c:	4603      	mov	r3, r0
 801064e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    lv_coord_t radius = style->body.radius;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	88db      	ldrh	r3, [r3, #6]
 8010656:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t swidth = style->body.shadow.width;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8a5b      	ldrh	r3, [r3, #18]
 801065c:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t width  = lv_area_get_width(coords);
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f7fc fa97 	bl	800cb92 <lv_area_get_width>
 8010664:	4603      	mov	r3, r0
 8010666:	86fb      	strh	r3, [r7, #54]	; 0x36
    lv_coord_t height = lv_area_get_height(coords);
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7fc faa9 	bl	800cbc0 <lv_area_get_height>
 801066e:	4603      	mov	r3, r0
 8010670:	86bb      	strh	r3, [r7, #52]	; 0x34

    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010672:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010674:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010678:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 801067c:	4618      	mov	r0, r3
 801067e:	f000 f92f 	bl	80108e0 <lv_draw_cont_radius_corr>
 8010682:	4603      	mov	r3, r0
 8010684:	877b      	strh	r3, [r7, #58]	; 0x3a
    radius += aa;
 8010686:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801068a:	b29a      	uxth	r2, r3
 801068c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801068e:	4413      	add	r3, r2
 8010690:	b29b      	uxth	r3, r3
 8010692:	877b      	strh	r3, [r7, #58]	; 0x3a

    lv_area_t right_area;
    right_area.x1 = coords->x2 + 1 - aa;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801069a:	b29a      	uxth	r2, r3
 801069c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	3301      	adds	r3, #1
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	b21b      	sxth	r3, r3
 80106ac:	853b      	strh	r3, [r7, #40]	; 0x28
    right_area.y1 = coords->y1 + radius + aa;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106b8:	4413      	add	r3, r2
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	4413      	add	r3, r2
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	b21b      	sxth	r3, r3
 80106c8:	857b      	strh	r3, [r7, #42]	; 0x2a
    right_area.x2 = right_area.x1;
 80106ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80106ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
    right_area.y2 = coords->y2 - radius - aa;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	b29a      	uxth	r2, r3
 80106de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	b21b      	sxth	r3, r3
 80106ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    lv_area_t left_area;
    left_area.x1 = coords->x1 - 1 + aa;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	4413      	add	r3, r2
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	3b01      	subs	r3, #1
 8010700:	b29b      	uxth	r3, r3
 8010702:	b21b      	sxth	r3, r3
 8010704:	843b      	strh	r3, [r7, #32]
    left_area.y1 = coords->y1 + radius + aa;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801070c:	b29a      	uxth	r2, r3
 801070e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010710:	4413      	add	r3, r2
 8010712:	b29a      	uxth	r2, r3
 8010714:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010718:	b29b      	uxth	r3, r3
 801071a:	4413      	add	r3, r2
 801071c:	b29b      	uxth	r3, r3
 801071e:	b21b      	sxth	r3, r3
 8010720:	847b      	strh	r3, [r7, #34]	; 0x22
    left_area.x2 = left_area.x1;
 8010722:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010726:	84bb      	strh	r3, [r7, #36]	; 0x24
    left_area.y2 = coords->y2 - radius - aa;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801072e:	b29a      	uxth	r2, r3
 8010730:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29a      	uxth	r2, r3
 8010736:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801073a:	b29b      	uxth	r3, r3
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	b29b      	uxth	r3, r3
 8010740:	b21b      	sxth	r3, r3
 8010742:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t top_area;
    top_area.x1 = coords->x1 + radius + aa;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801074a:	b29a      	uxth	r2, r3
 801074c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801074e:	4413      	add	r3, r2
 8010750:	b29a      	uxth	r2, r3
 8010752:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010756:	b29b      	uxth	r3, r3
 8010758:	4413      	add	r3, r2
 801075a:	b29b      	uxth	r3, r3
 801075c:	b21b      	sxth	r3, r3
 801075e:	833b      	strh	r3, [r7, #24]
    top_area.y1 = coords->y1 - 1 + aa;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010766:	b29a      	uxth	r2, r3
 8010768:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801076c:	b29b      	uxth	r3, r3
 801076e:	4413      	add	r3, r2
 8010770:	b29b      	uxth	r3, r3
 8010772:	3b01      	subs	r3, #1
 8010774:	b29b      	uxth	r3, r3
 8010776:	b21b      	sxth	r3, r3
 8010778:	837b      	strh	r3, [r7, #26]
    top_area.x2 = coords->x2 - radius - aa;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010780:	b29a      	uxth	r2, r3
 8010782:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	b29a      	uxth	r2, r3
 8010788:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801078c:	b29b      	uxth	r3, r3
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	b29b      	uxth	r3, r3
 8010792:	b21b      	sxth	r3, r3
 8010794:	83bb      	strh	r3, [r7, #28]
    top_area.y2 = top_area.y1;
 8010796:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801079a:	83fb      	strh	r3, [r7, #30]

    lv_area_t bottom_area;
    bottom_area.x1 = coords->x1 + radius + aa;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107a6:	4413      	add	r3, r2
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	4413      	add	r3, r2
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	b21b      	sxth	r3, r3
 80107b6:	823b      	strh	r3, [r7, #16]
    bottom_area.y1 = coords->y2 + 1 - aa;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80107be:	b29a      	uxth	r2, r3
 80107c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	3301      	adds	r3, #1
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	b21b      	sxth	r3, r3
 80107d0:	827b      	strh	r3, [r7, #18]
    bottom_area.x2 = coords->x2 - radius - aa;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80107d8:	b29a      	uxth	r2, r3
 80107da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	b29a      	uxth	r2, r3
 80107e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	b21b      	sxth	r3, r3
 80107ec:	82bb      	strh	r3, [r7, #20]
    bottom_area.y2 = bottom_area.y1;
 80107ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107f2:	82fb      	strh	r3, [r7, #22]

    lv_opa_t opa_act;
    int16_t d;
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80107f4:	2301      	movs	r3, #1
 80107f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80107f8:	e068      	b.n	80108cc <lv_draw_shadow_full_straight+0x29a>
        opa_act = map[d];
 80107fa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	4413      	add	r3, r2
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8010808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010812:	8a12      	ldrh	r2, [r2, #16]
 8010814:	68b9      	ldr	r1, [r7, #8]
 8010816:	f7f8 fdc4 	bl	80093a2 <lv_draw_fill>
        right_area.x1++;
 801081a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801081e:	b29b      	uxth	r3, r3
 8010820:	3301      	adds	r3, #1
 8010822:	b29b      	uxth	r3, r3
 8010824:	b21b      	sxth	r3, r3
 8010826:	853b      	strh	r3, [r7, #40]	; 0x28
        right_area.x2++;
 8010828:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801082c:	b29b      	uxth	r3, r3
 801082e:	3301      	adds	r3, #1
 8010830:	b29b      	uxth	r3, r3
 8010832:	b21b      	sxth	r3, r3
 8010834:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8010836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	f107 0020 	add.w	r0, r7, #32
 8010840:	8a12      	ldrh	r2, [r2, #16]
 8010842:	68b9      	ldr	r1, [r7, #8]
 8010844:	f7f8 fdad 	bl	80093a2 <lv_draw_fill>
        left_area.x1--;
 8010848:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801084c:	b29b      	uxth	r3, r3
 801084e:	3b01      	subs	r3, #1
 8010850:	b29b      	uxth	r3, r3
 8010852:	b21b      	sxth	r3, r3
 8010854:	843b      	strh	r3, [r7, #32]
        left_area.x2--;
 8010856:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801085a:	b29b      	uxth	r3, r3
 801085c:	3b01      	subs	r3, #1
 801085e:	b29b      	uxth	r3, r3
 8010860:	b21b      	sxth	r3, r3
 8010862:	84bb      	strh	r3, [r7, #36]	; 0x24

        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8010864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	f107 0018 	add.w	r0, r7, #24
 801086e:	8a12      	ldrh	r2, [r2, #16]
 8010870:	68b9      	ldr	r1, [r7, #8]
 8010872:	f7f8 fd96 	bl	80093a2 <lv_draw_fill>
        top_area.y1--;
 8010876:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801087a:	b29b      	uxth	r3, r3
 801087c:	3b01      	subs	r3, #1
 801087e:	b29b      	uxth	r3, r3
 8010880:	b21b      	sxth	r3, r3
 8010882:	837b      	strh	r3, [r7, #26]
        top_area.y2--;
 8010884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010888:	b29b      	uxth	r3, r3
 801088a:	3b01      	subs	r3, #1
 801088c:	b29b      	uxth	r3, r3
 801088e:	b21b      	sxth	r3, r3
 8010890:	83fb      	strh	r3, [r7, #30]

        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8010892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	f107 0010 	add.w	r0, r7, #16
 801089c:	8a12      	ldrh	r2, [r2, #16]
 801089e:	68b9      	ldr	r1, [r7, #8]
 80108a0:	f7f8 fd7f 	bl	80093a2 <lv_draw_fill>
        bottom_area.y1++;
 80108a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	3301      	adds	r3, #1
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	b21b      	sxth	r3, r3
 80108b0:	827b      	strh	r3, [r7, #18]
        bottom_area.y2++;
 80108b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	3301      	adds	r3, #1
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	b21b      	sxth	r3, r3
 80108be:	82fb      	strh	r3, [r7, #22]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80108c0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	3301      	adds	r3, #1
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80108cc:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80108d0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80108d4:	429a      	cmp	r2, r3
 80108d6:	dd90      	ble.n	80107fa <lv_draw_shadow_full_straight+0x1c8>
    }
}
 80108d8:	bf00      	nop
 80108da:	3740      	adds	r7, #64	; 0x40
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <lv_draw_cont_radius_corr>:

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	80fb      	strh	r3, [r7, #6]
 80108ea:	460b      	mov	r3, r1
 80108ec:	80bb      	strh	r3, [r7, #4]
 80108ee:	4613      	mov	r3, r2
 80108f0:	807b      	strh	r3, [r7, #2]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80108f2:	f7f6 ffd3 	bl	800789c <lv_refr_get_disp_refreshing>
 80108f6:	4603      	mov	r3, r0
 80108f8:	4618      	mov	r0, r3
 80108fa:	f001 fe9f 	bl	801263c <lv_disp_get_antialiasing>
 80108fe:	4603      	mov	r3, r0
 8010900:	73fb      	strb	r3, [r7, #15]

    if(r >= (w >> 1)) {
 8010902:	88fb      	ldrh	r3, [r7, #6]
 8010904:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010908:	1052      	asrs	r2, r2, #1
 801090a:	b212      	sxth	r2, r2
 801090c:	4293      	cmp	r3, r2
 801090e:	db0a      	blt.n	8010926 <lv_draw_cont_radius_corr+0x46>
        r = (w >> 1);
 8010910:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010914:	105b      	asrs	r3, r3, #1
 8010916:	b21b      	sxth	r3, r3
 8010918:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 801091a:	88fb      	ldrh	r3, [r7, #6]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <lv_draw_cont_radius_corr+0x46>
 8010920:	88fb      	ldrh	r3, [r7, #6]
 8010922:	3b01      	subs	r3, #1
 8010924:	80fb      	strh	r3, [r7, #6]
    }
    if(r >= (h >> 1)) {
 8010926:	88fb      	ldrh	r3, [r7, #6]
 8010928:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801092c:	1052      	asrs	r2, r2, #1
 801092e:	b212      	sxth	r2, r2
 8010930:	4293      	cmp	r3, r2
 8010932:	db0a      	blt.n	801094a <lv_draw_cont_radius_corr+0x6a>
        r = (h >> 1);
 8010934:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010938:	105b      	asrs	r3, r3, #1
 801093a:	b21b      	sxth	r3, r3
 801093c:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 801093e:	88fb      	ldrh	r3, [r7, #6]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <lv_draw_cont_radius_corr+0x6a>
 8010944:	88fb      	ldrh	r3, [r7, #6]
 8010946:	3b01      	subs	r3, #1
 8010948:	80fb      	strh	r3, [r7, #6]
    }

    if(r > 0) r -= aa;
 801094a:	88fb      	ldrh	r3, [r7, #6]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d004      	beq.n	801095a <lv_draw_cont_radius_corr+0x7a>
 8010950:	7bfb      	ldrb	r3, [r7, #15]
 8010952:	b29b      	uxth	r3, r3
 8010954:	88fa      	ldrh	r2, [r7, #6]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	80fb      	strh	r3, [r7, #6]

    return r;
 801095a:	88fb      	ldrh	r3, [r7, #6]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	4603      	mov	r3, r0
 801096c:	80fb      	strh	r3, [r7, #6]
 801096e:	460b      	mov	r3, r1
 8010970:	80bb      	strh	r3, [r7, #4]
 8010972:	4613      	mov	r3, r2
 8010974:	70fb      	strb	r3, [r7, #3]
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8010976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801097a:	2b02      	cmp	r3, #2
 801097c:	d10a      	bne.n	8010994 <antialias_get_opa_circ+0x30>
 801097e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010982:	4a20      	ldr	r2, [pc, #128]	; (8010a04 <antialias_get_opa_circ+0xa0>)
 8010984:	5cd3      	ldrb	r3, [r2, r3]
 8010986:	461a      	mov	r2, r3
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	fb03 f302 	mul.w	r3, r3, r2
 801098e:	121b      	asrs	r3, r3, #8
 8010990:	b2db      	uxtb	r3, r3
 8010992:	e031      	b.n	80109f8 <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8010994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010998:	2b03      	cmp	r3, #3
 801099a:	d10a      	bne.n	80109b2 <antialias_get_opa_circ+0x4e>
 801099c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109a0:	4a19      	ldr	r2, [pc, #100]	; (8010a08 <antialias_get_opa_circ+0xa4>)
 80109a2:	5cd3      	ldrb	r3, [r2, r3]
 80109a4:	461a      	mov	r2, r3
 80109a6:	78fb      	ldrb	r3, [r7, #3]
 80109a8:	fb03 f302 	mul.w	r3, r3, r2
 80109ac:	121b      	asrs	r3, r3, #8
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	e022      	b.n	80109f8 <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80109b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109b6:	2b04      	cmp	r3, #4
 80109b8:	d10a      	bne.n	80109d0 <antialias_get_opa_circ+0x6c>
 80109ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109be:	4a13      	ldr	r2, [pc, #76]	; (8010a0c <antialias_get_opa_circ+0xa8>)
 80109c0:	5cd3      	ldrb	r3, [r2, r3]
 80109c2:	461a      	mov	r2, r3
 80109c4:	78fb      	ldrb	r3, [r7, #3]
 80109c6:	fb03 f302 	mul.w	r3, r3, r2
 80109ca:	121b      	asrs	r3, r3, #8
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	e013      	b.n	80109f8 <antialias_get_opa_circ+0x94>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80109d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80109d4:	4613      	mov	r3, r2
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	1a9b      	subs	r3, r3, r2
 80109da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109de:	3a01      	subs	r2, #1
 80109e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80109e4:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	4a09      	ldr	r2, [pc, #36]	; (8010a10 <antialias_get_opa_circ+0xac>)
 80109ea:	5cd3      	ldrb	r3, [r2, r3]
 80109ec:	461a      	mov	r2, r3
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	fb03 f302 	mul.w	r3, r3, r2
 80109f4:	0a1b      	lsrs	r3, r3, #8
 80109f6:	b2db      	uxtb	r3, r3
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3714      	adds	r7, #20
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr
 8010a04:	0802a5b4 	.word	0x0802a5b4
 8010a08:	0802a5b8 	.word	0x0802a5b8
 8010a0c:	0802a5bc 	.word	0x0802a5bc
 8010a10:	0802a5c0 	.word	0x0802a5c0

08010a14 <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b088      	sub	sp, #32
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
    if(entry_cnt == 0) {
 8010a1e:	4b6b      	ldr	r3, [pc, #428]	; (8010bcc <lv_img_cache_open+0x1b8>)
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d101      	bne.n	8010a2a <lv_img_cache_open+0x16>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8010a26:	2300      	movs	r3, #0
 8010a28:	e0cc      	b.n	8010bc4 <lv_img_cache_open+0x1b0>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8010a2a:	4b69      	ldr	r3, [pc, #420]	; (8010bd0 <lv_img_cache_open+0x1bc>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010a30:	2300      	movs	r3, #0
 8010a32:	83fb      	strh	r3, [r7, #30]
 8010a34:	e021      	b.n	8010a7a <lv_img_cache_open+0x66>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8010a36:	8bfa      	ldrh	r2, [r7, #30]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	461a      	mov	r2, r3
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	4413      	add	r3, r2
 8010a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a48:	4a62      	ldr	r2, [pc, #392]	; (8010bd4 <lv_img_cache_open+0x1c0>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	db12      	blt.n	8010a74 <lv_img_cache_open+0x60>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8010a4e:	8bfa      	ldrh	r2, [r7, #30]
 8010a50:	4613      	mov	r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	00db      	lsls	r3, r3, #3
 8010a58:	461a      	mov	r2, r3
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a60:	8bfa      	ldrh	r2, [r7, #30]
 8010a62:	4613      	mov	r3, r2
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	4413      	add	r3, r2
 8010a70:	1e4a      	subs	r2, r1, #1
 8010a72:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8010a74:	8bfb      	ldrh	r3, [r7, #30]
 8010a76:	3301      	adds	r3, #1
 8010a78:	83fb      	strh	r3, [r7, #30]
 8010a7a:	4b54      	ldr	r3, [pc, #336]	; (8010bcc <lv_img_cache_open+0x1b8>)
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	8bfa      	ldrh	r2, [r7, #30]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d3d8      	bcc.n	8010a36 <lv_img_cache_open+0x22>
        }
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8010a84:	2300      	movs	r3, #0
 8010a86:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < entry_cnt; i++) {
 8010a88:	2300      	movs	r3, #0
 8010a8a:	83fb      	strh	r3, [r7, #30]
 8010a8c:	e02a      	b.n	8010ae4 <lv_img_cache_open+0xd0>
        if(cache[i].dec_dsc.src == src) {
 8010a8e:	8bfa      	ldrh	r2, [r7, #30]
 8010a90:	4613      	mov	r3, r2
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	461a      	mov	r2, r3
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d11b      	bne.n	8010ade <lv_img_cache_open+0xca>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8010aa6:	8bfa      	ldrh	r2, [r7, #30]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	61bb      	str	r3, [r7, #24]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010abc:	461a      	mov	r2, r3
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010ad2:	dd0d      	ble.n	8010af0 <lv_img_cache_open+0xdc>
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ada:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8010adc:	e008      	b.n	8010af0 <lv_img_cache_open+0xdc>
    for(i = 0; i < entry_cnt; i++) {
 8010ade:	8bfb      	ldrh	r3, [r7, #30]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	83fb      	strh	r3, [r7, #30]
 8010ae4:	4b39      	ldr	r3, [pc, #228]	; (8010bcc <lv_img_cache_open+0x1b8>)
 8010ae6:	881b      	ldrh	r3, [r3, #0]
 8010ae8:	8bfa      	ldrh	r2, [r7, #30]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d3cf      	bcc.n	8010a8e <lv_img_cache_open+0x7a>
 8010aee:	e000      	b.n	8010af2 <lv_img_cache_open+0xde>
            break;
 8010af0:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d164      	bne.n	8010bc2 <lv_img_cache_open+0x1ae>
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8010afc:	2301      	movs	r3, #1
 8010afe:	83fb      	strh	r3, [r7, #30]
 8010b00:	e018      	b.n	8010b34 <lv_img_cache_open+0x120>
            if(cache[i].life < cached_src->life) {
 8010b02:	8bfa      	ldrh	r2, [r7, #30]
 8010b04:	4613      	mov	r3, r2
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	4413      	add	r3, r2
 8010b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	da08      	bge.n	8010b2e <lv_img_cache_open+0x11a>
                cached_src = &cache[i];
 8010b1c:	8bfa      	ldrh	r2, [r7, #30]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	461a      	mov	r2, r3
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	61bb      	str	r3, [r7, #24]
        for(i = 1; i < entry_cnt; i++) {
 8010b2e:	8bfb      	ldrh	r3, [r7, #30]
 8010b30:	3301      	adds	r3, #1
 8010b32:	83fb      	strh	r3, [r7, #30]
 8010b34:	4b25      	ldr	r3, [pc, #148]	; (8010bcc <lv_img_cache_open+0x1b8>)
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	8bfa      	ldrh	r2, [r7, #30]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d3e1      	bcc.n	8010b02 <lv_img_cache_open+0xee>
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d003      	beq.n	8010b4e <lv_img_cache_open+0x13a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f000 fa21 	bl	8010f90 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
 8010b4e:	f001 fe15 	bl	801277c <lv_tick_get>
 8010b52:	6138      	str	r0, [r7, #16]
        cached_src->dec_dsc.time_to_open = 0;
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	2200      	movs	r2, #0
 8010b58:	619a      	str	r2, [r3, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	6879      	ldr	r1, [r7, #4]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 f987 	bl	8010e74 <lv_img_decoder_open>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]
        if(open_res == LV_RES_INV) {
 8010b6a:	7bfb      	ldrb	r3, [r7, #15]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d114      	bne.n	8010b9a <lv_img_cache_open+0x186>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 fa0c 	bl	8010f90 <lv_img_decoder_close>
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	2224      	movs	r2, #36	; 0x24
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f016 fb5b 	bl	802723a <memset>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 8010b84:	2228      	movs	r2, #40	; 0x28
 8010b86:	2100      	movs	r1, #0
 8010b88:	69b8      	ldr	r0, [r7, #24]
 8010b8a:	f016 fb56 	bl	802723a <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b94:	625a      	str	r2, [r3, #36]	; 0x24
            return NULL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	e014      	b.n	8010bc4 <lv_img_cache_open+0x1b0>
        }

        cached_src->life = 0;
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	625a      	str	r2, [r3, #36]	; 0x24

        /*If `time_to_open` was not set in the open function set it here*/
        if(cached_src->dec_dsc.time_to_open == 0) {
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d105      	bne.n	8010bb4 <lv_img_cache_open+0x1a0>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8010ba8:	6938      	ldr	r0, [r7, #16]
 8010baa:	f001 fe01 	bl	80127b0 <lv_tick_elaps>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	619a      	str	r2, [r3, #24]
        }

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	699b      	ldr	r3, [r3, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d102      	bne.n	8010bc2 <lv_img_cache_open+0x1ae>
 8010bbc:	69bb      	ldr	r3, [r7, #24]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	619a      	str	r2, [r3, #24]
    }

    return cached_src;
 8010bc2:	69bb      	ldr	r3, [r7, #24]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3720      	adds	r7, #32
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	20002a68 	.word	0x20002a68
 8010bd0:	20006de4 	.word	0x20006de4
 8010bd4:	80000002 	.word	0x80000002

08010bd8 <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8010be2:	4b27      	ldr	r3, [pc, #156]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d007      	beq.n	8010bfa <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 8010bea:	2000      	movs	r0, #0
 8010bec:	f000 f84c 	bl	8010c88 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8010bf0:	4b23      	ldr	r3, [pc, #140]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f002 ff27 	bl	8013a48 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8010bfa:	88fa      	ldrh	r2, [r7, #6]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	4413      	add	r3, r2
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	4618      	mov	r0, r3
 8010c06:	f002 fedf 	bl	80139c8 <lv_mem_alloc>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	4b1c      	ldr	r3, [pc, #112]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010c0e:	601a      	str	r2, [r3, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8010c10:	4b1b      	ldr	r3, [pc, #108]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d100      	bne.n	8010c1a <lv_img_cache_set_size+0x42>
 8010c18:	e7fe      	b.n	8010c18 <lv_img_cache_set_size+0x40>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8010c1a:	4b19      	ldr	r3, [pc, #100]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d103      	bne.n	8010c2a <lv_img_cache_set_size+0x52>
        entry_cnt = 0;
 8010c22:	4b18      	ldr	r3, [pc, #96]	; (8010c84 <lv_img_cache_set_size+0xac>)
 8010c24:	2200      	movs	r2, #0
 8010c26:	801a      	strh	r2, [r3, #0]
        return;
 8010c28:	e027      	b.n	8010c7a <lv_img_cache_set_size+0xa2>
    }
    entry_cnt = new_entry_cnt;
 8010c2a:	4a16      	ldr	r2, [pc, #88]	; (8010c84 <lv_img_cache_set_size+0xac>)
 8010c2c:	88fb      	ldrh	r3, [r7, #6]
 8010c2e:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010c30:	2300      	movs	r3, #0
 8010c32:	81fb      	strh	r3, [r7, #14]
 8010c34:	e01c      	b.n	8010c70 <lv_img_cache_set_size+0x98>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010c36:	4b12      	ldr	r3, [pc, #72]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010c38:	6819      	ldr	r1, [r3, #0]
 8010c3a:	89fa      	ldrh	r2, [r7, #14]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	00db      	lsls	r3, r3, #3
 8010c44:	440b      	add	r3, r1
 8010c46:	2224      	movs	r2, #36	; 0x24
 8010c48:	2100      	movs	r1, #0
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f016 faf5 	bl	802723a <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 8010c50:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <lv_img_cache_set_size+0xa8>)
 8010c52:	6819      	ldr	r1, [r3, #0]
 8010c54:	89fa      	ldrh	r2, [r7, #14]
 8010c56:	4613      	mov	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	00db      	lsls	r3, r3, #3
 8010c5e:	440b      	add	r3, r1
 8010c60:	2228      	movs	r2, #40	; 0x28
 8010c62:	2100      	movs	r1, #0
 8010c64:	4618      	mov	r0, r3
 8010c66:	f016 fae8 	bl	802723a <memset>
    for(i = 0; i < entry_cnt; i++) {
 8010c6a:	89fb      	ldrh	r3, [r7, #14]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	81fb      	strh	r3, [r7, #14]
 8010c70:	4b04      	ldr	r3, [pc, #16]	; (8010c84 <lv_img_cache_set_size+0xac>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	89fa      	ldrh	r2, [r7, #14]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d3dd      	bcc.n	8010c36 <lv_img_cache_set_size+0x5e>
    }
}
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	20006de4 	.word	0x20006de4
 8010c84:	20002a68 	.word	0x20002a68

08010c88 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8010c90:	4b28      	ldr	r3, [pc, #160]	; (8010d34 <lv_img_cache_invalidate_src+0xac>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8010c96:	2300      	movs	r3, #0
 8010c98:	81fb      	strh	r3, [r7, #14]
 8010c9a:	e041      	b.n	8010d20 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8010c9c:	89fa      	ldrh	r2, [r7, #14]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4413      	add	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	4413      	add	r3, r2
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d002      	beq.n	8010cba <lv_img_cache_invalidate_src+0x32>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d12f      	bne.n	8010d1a <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 8010cba:	89fa      	ldrh	r2, [r7, #14]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	4413      	add	r3, r2
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00a      	beq.n	8010ce6 <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8010cd0:	89fa      	ldrh	r2, [r7, #14]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	461a      	mov	r2, r3
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	4413      	add	r3, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f000 f955 	bl	8010f90 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010ce6:	89fa      	ldrh	r2, [r7, #14]
 8010ce8:	4613      	mov	r3, r2
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	4413      	add	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	2224      	movs	r2, #36	; 0x24
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f016 fa9d 	bl	802723a <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8010d00:	89fa      	ldrh	r2, [r7, #14]
 8010d02:	4613      	mov	r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4413      	add	r3, r2
 8010d10:	2228      	movs	r2, #40	; 0x28
 8010d12:	2100      	movs	r1, #0
 8010d14:	4618      	mov	r0, r3
 8010d16:	f016 fa90 	bl	802723a <memset>
    for(i = 0; i < entry_cnt; i++) {
 8010d1a:	89fb      	ldrh	r3, [r7, #14]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	81fb      	strh	r3, [r7, #14]
 8010d20:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <lv_img_cache_invalidate_src+0xb0>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	89fa      	ldrh	r2, [r7, #14]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d3b8      	bcc.n	8010c9c <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 8010d2a:	bf00      	nop
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	20006de4 	.word	0x20006de4
 8010d38:	20002a68 	.word	0x20002a68

08010d3c <lv_color_make>:
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	4603      	mov	r3, r0
 8010d44:	71fb      	strb	r3, [r7, #7]
 8010d46:	460b      	mov	r3, r1
 8010d48:	71bb      	strb	r3, [r7, #6]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	717b      	strb	r3, [r7, #5]
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8010d4e:	79bb      	ldrb	r3, [r7, #6]
 8010d50:	095b      	lsrs	r3, r3, #5
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	f003 0307 	and.w	r3, r3, #7
 8010d58:	b2da      	uxtb	r2, r3
 8010d5a:	7b3b      	ldrb	r3, [r7, #12]
 8010d5c:	f362 0302 	bfi	r3, r2, #0, #3
 8010d60:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	08db      	lsrs	r3, r3, #3
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	f003 031f 	and.w	r3, r3, #31
 8010d6c:	b2da      	uxtb	r2, r3
 8010d6e:	7b3b      	ldrb	r3, [r7, #12]
 8010d70:	f362 03c7 	bfi	r3, r2, #3, #5
 8010d74:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8010d76:	797b      	ldrb	r3, [r7, #5]
 8010d78:	08db      	lsrs	r3, r3, #3
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 031f 	and.w	r3, r3, #31
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	7b7b      	ldrb	r3, [r7, #13]
 8010d84:	f362 0304 	bfi	r3, r2, #0, #5
 8010d88:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8010d8a:	79bb      	ldrb	r3, [r7, #6]
 8010d8c:	089b      	lsrs	r3, r3, #2
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	f003 0307 	and.w	r3, r3, #7
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	7b7b      	ldrb	r3, [r7, #13]
 8010d98:	f362 1347 	bfi	r3, r2, #5, #3
 8010d9c:	737b      	strb	r3, [r7, #13]
    return color;
 8010d9e:	89bb      	ldrh	r3, [r7, #12]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3714      	adds	r7, #20
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8010db2:	2114      	movs	r1, #20
 8010db4:	4810      	ldr	r0, [pc, #64]	; (8010df8 <lv_img_decoder_init+0x4c>)
 8010db6:	f002 fb05 	bl	80133c4 <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8010dba:	f000 f8ff 	bl	8010fbc <lv_img_decoder_create>
 8010dbe:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d103      	bne.n	8010dce <lv_img_decoder_init+0x22>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        lv_mem_assert(decoder);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d111      	bne.n	8010df0 <lv_img_decoder_init+0x44>
 8010dcc:	e7fe      	b.n	8010dcc <lv_img_decoder_init+0x20>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8010dce:	490b      	ldr	r1, [pc, #44]	; (8010dfc <lv_img_decoder_init+0x50>)
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f000 f90f 	bl	8010ff4 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8010dd6:	490a      	ldr	r1, [pc, #40]	; (8010e00 <lv_img_decoder_init+0x54>)
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f919 	bl	8011010 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8010dde:	4909      	ldr	r1, [pc, #36]	; (8010e04 <lv_img_decoder_init+0x58>)
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 f923 	bl	801102c <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8010de6:	4908      	ldr	r1, [pc, #32]	; (8010e08 <lv_img_decoder_init+0x5c>)
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 f92d 	bl	8011048 <lv_img_decoder_set_close_cb>
 8010dee:	e000      	b.n	8010df2 <lv_img_decoder_init+0x46>
        return;
 8010df0:	bf00      	nop
}
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20006dc8 	.word	0x20006dc8
 8010dfc:	08011065 	.word	0x08011065
 8010e00:	08011169 	.word	0x08011169
 8010e04:	080113c1 	.word	0x080113c1
 8010e08:	080114e5 	.word	0x080114e5

08010e0c <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	7813      	ldrb	r3, [r2, #0]
 8010e1a:	f36f 1347 	bfc	r3, #5, #3
 8010e1e:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 8010e20:	2300      	movs	r3, #0
 8010e22:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010e24:	4812      	ldr	r0, [pc, #72]	; (8010e70 <lv_img_decoder_get_info+0x64>)
 8010e26:	f002 fc4f 	bl	80136c8 <lv_ll_get_head>
 8010e2a:	60b8      	str	r0, [r7, #8]
 8010e2c:	e015      	b.n	8010e5a <lv_img_decoder_get_info+0x4e>
    {
        res = LV_RES_INV;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00a      	beq.n	8010e50 <lv_img_decoder_get_info+0x44>
            res = d->info_cb(d, src, header);
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	68b8      	ldr	r0, [r7, #8]
 8010e44:	4798      	blx	r3
 8010e46:	4603      	mov	r3, r0
 8010e48:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 8010e4a:	7bfb      	ldrb	r3, [r7, #15]
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d008      	beq.n	8010e62 <lv_img_decoder_get_info+0x56>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010e50:	68b9      	ldr	r1, [r7, #8]
 8010e52:	4807      	ldr	r0, [pc, #28]	; (8010e70 <lv_img_decoder_get_info+0x64>)
 8010e54:	f002 fc5e 	bl	8013714 <lv_ll_get_next>
 8010e58:	60b8      	str	r0, [r7, #8]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d1e6      	bne.n	8010e2e <lv_img_decoder_get_info+0x22>
 8010e60:	e000      	b.n	8010e64 <lv_img_decoder_get_info+0x58>
            if(res == LV_RES_OK) break;
 8010e62:	bf00      	nop
        }
    }

    return res;
 8010e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20006dc8 	.word	0x20006dc8

08010e74 <lv_img_decoder_open>:
 * @param style the style of the image
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, const lv_style_t * style)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
    dsc->style     = style;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	609a      	str	r2, [r3, #8]
    dsc->src       = src;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	605a      	str	r2, [r3, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 8010e8c:	68b8      	ldr	r0, [r7, #8]
 8010e8e:	f7f9 fa71 	bl	800a374 <lv_img_src_get_type>
 8010e92:	4603      	mov	r3, r0
 8010e94:	461a      	mov	r2, r3
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	621a      	str	r2, [r3, #32]

    lv_res_t res = LV_RES_INV;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	75fb      	strb	r3, [r7, #23]

    lv_img_decoder_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010ea4:	4823      	ldr	r0, [pc, #140]	; (8010f34 <lv_img_decoder_open+0xc0>)
 8010ea6:	f002 fc0f 	bl	80136c8 <lv_ll_get_head>
 8010eaa:	6138      	str	r0, [r7, #16]
 8010eac:	e02f      	b.n	8010f0e <lv_img_decoder_open+0x9a>
    {
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d023      	beq.n	8010efe <lv_img_decoder_open+0x8a>
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d01f      	beq.n	8010efe <lv_img_decoder_open+0x8a>

        res = d->info_cb(d, src, &dsc->header);
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	3210      	adds	r2, #16
 8010ec6:	68b9      	ldr	r1, [r7, #8]
 8010ec8:	6938      	ldr	r0, [r7, #16]
 8010eca:	4798      	blx	r3
 8010ecc:	4603      	mov	r3, r0
 8010ece:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) continue;
 8010ed0:	7dfb      	ldrb	r3, [r7, #23]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d115      	bne.n	8010f02 <lv_img_decoder_open+0x8e>

        dsc->error_msg = NULL;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	693a      	ldr	r2, [r7, #16]
 8010ee6:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	68f9      	ldr	r1, [r7, #12]
 8010eee:	6938      	ldr	r0, [r7, #16]
 8010ef0:	4798      	blx	r3
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	75fb      	strb	r3, [r7, #23]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d00c      	beq.n	8010f16 <lv_img_decoder_open+0xa2>
 8010efc:	e002      	b.n	8010f04 <lv_img_decoder_open+0x90>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8010efe:	bf00      	nop
 8010f00:	e000      	b.n	8010f04 <lv_img_decoder_open+0x90>
        if(res != LV_RES_OK) continue;
 8010f02:	bf00      	nop
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8010f04:	6939      	ldr	r1, [r7, #16]
 8010f06:	480b      	ldr	r0, [pc, #44]	; (8010f34 <lv_img_decoder_open+0xc0>)
 8010f08:	f002 fc04 	bl	8013714 <lv_ll_get_next>
 8010f0c:	6138      	str	r0, [r7, #16]
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1cc      	bne.n	8010eae <lv_img_decoder_open+0x3a>
 8010f14:	e000      	b.n	8010f18 <lv_img_decoder_open+0xa4>
        if(res == LV_RES_OK) break;
 8010f16:	bf00      	nop
    }

    if(res == LV_RES_INV) {
 8010f18:	7dfb      	ldrb	r3, [r7, #23]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d104      	bne.n	8010f28 <lv_img_decoder_open+0xb4>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8010f1e:	2224      	movs	r2, #36	; 0x24
 8010f20:	2100      	movs	r1, #0
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f016 f989 	bl	802723a <memset>
    }

    return res;
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3718      	adds	r7, #24
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20006dc8 	.word	0x20006dc8

08010f38 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8010f38:	b590      	push	{r4, r7, lr}
 8010f3a:	b089      	sub	sp, #36	; 0x24
 8010f3c:	af02      	add	r7, sp, #8
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	4608      	mov	r0, r1
 8010f42:	4611      	mov	r1, r2
 8010f44:	461a      	mov	r2, r3
 8010f46:	4603      	mov	r3, r0
 8010f48:	817b      	strh	r3, [r7, #10]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	813b      	strh	r3, [r7, #8]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8010f52:	2300      	movs	r3, #0
 8010f54:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d012      	beq.n	8010f86 <lv_img_decoder_read_line+0x4e>
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	689c      	ldr	r4, [r3, #8]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8010f6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	68f9      	ldr	r1, [r7, #12]
 8010f80:	47a0      	blx	r4
 8010f82:	4603      	mov	r3, r0
 8010f84:	75fb      	strb	r3, [r7, #23]

    return res;
 8010f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	371c      	adds	r7, #28
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd90      	pop	{r4, r7, pc}

08010f90 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d007      	beq.n	8010fb2 <lv_img_decoder_close+0x22>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	6812      	ldr	r2, [r2, #0]
 8010fac:	6879      	ldr	r1, [r7, #4]
 8010fae:	4610      	mov	r0, r2
 8010fb0:	4798      	blx	r3
}
 8010fb2:	bf00      	nop
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8010fc2:	480b      	ldr	r0, [pc, #44]	; (8010ff0 <lv_img_decoder_create+0x34>)
 8010fc4:	f002 fa1e 	bl	8013404 <lv_ll_ins_head>
 8010fc8:	6078      	str	r0, [r7, #4]
    lv_mem_assert(decoder);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d100      	bne.n	8010fd2 <lv_img_decoder_create+0x16>
 8010fd0:	e7fe      	b.n	8010fd0 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d101      	bne.n	8010fdc <lv_img_decoder_create+0x20>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	e005      	b.n	8010fe8 <lv_img_decoder_create+0x2c>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8010fdc:	2214      	movs	r2, #20
 8010fde:	2100      	movs	r1, #0
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f016 f92a 	bl	802723a <memset>

    return decoder;
 8010fe6:	687b      	ldr	r3, [r7, #4]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	20006dc8 	.word	0x20006dc8

08010ff4 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	601a      	str	r2, [r3, #0]
}
 8011004:	bf00      	nop
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	683a      	ldr	r2, [r7, #0]
 801101e:	605a      	str	r2, [r3, #4]
}
 8011020:	bf00      	nop
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	609a      	str	r2, [r3, #8]
}
 801103c:	bf00      	nop
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	683a      	ldr	r2, [r7, #0]
 8011056:	60da      	str	r2, [r3, #12]
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <lv_img_decoder_built_in_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011070:	68b8      	ldr	r0, [r7, #8]
 8011072:	f7f9 f97f 	bl	800a374 <lv_img_src_get_type>
 8011076:	4603      	mov	r3, r0
 8011078:	77bb      	strb	r3, [r7, #30]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801107a:	7fbb      	ldrb	r3, [r7, #30]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d11e      	bne.n	80110be <lv_img_decoder_built_in_info+0x5a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011088:	b299      	uxth	r1, r3
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	6813      	ldr	r3, [r2, #0]
 801108e:	f361 2394 	bfi	r3, r1, #10, #11
 8011092:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	885b      	ldrh	r3, [r3, #2]
 8011098:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801109c:	b299      	uxth	r1, r3
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	8853      	ldrh	r3, [r2, #2]
 80110a2:	f361 134f 	bfi	r3, r1, #5, #11
 80110a6:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80110b0:	b2d9      	uxtb	r1, r3
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	7813      	ldrb	r3, [r2, #0]
 80110b6:	f361 0304 	bfi	r3, r1, #0, #5
 80110ba:	7013      	strb	r3, [r2, #0]
 80110bc:	e04e      	b.n	801115c <lv_img_decoder_built_in_info+0xf8>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 80110be:	7fbb      	ldrb	r3, [r7, #30]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d133      	bne.n	801112c <lv_img_decoder_built_in_info+0xc8>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80110c4:	f107 0314 	add.w	r3, r7, #20
 80110c8:	2202      	movs	r2, #2
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f001 ffff 	bl	80130d0 <lv_fs_open>
 80110d2:	4603      	mov	r3, r0
 80110d4:	77fb      	strb	r3, [r7, #31]
        if(res == LV_FS_RES_OK) {
 80110d6:	7ffb      	ldrb	r3, [r7, #31]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d10e      	bne.n	80110fa <lv_img_decoder_built_in_info+0x96>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 80110dc:	f107 0310 	add.w	r3, r7, #16
 80110e0:	f107 0014 	add.w	r0, r7, #20
 80110e4:	2204      	movs	r2, #4
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	f002 f8a1 	bl	801322e <lv_fs_read>
 80110ec:	4603      	mov	r3, r0
 80110ee:	77fb      	strb	r3, [r7, #31]
            lv_fs_close(&file);
 80110f0:	f107 0314 	add.w	r3, r7, #20
 80110f4:	4618      	mov	r0, r3
 80110f6:	f002 f86b 	bl	80131d0 <lv_fs_close>
        }

        /*Create a dummy header on fs error*/
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 80110fa:	7ffb      	ldrb	r3, [r7, #31]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d102      	bne.n	8011106 <lv_img_decoder_built_in_info+0xa2>
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	2b04      	cmp	r3, #4
 8011104:	d02a      	beq.n	801115c <lv_img_decoder_built_in_info+0xf8>
            header->w  = LV_DPI;
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	6813      	ldr	r3, [r2, #0]
 801110a:	2164      	movs	r1, #100	; 0x64
 801110c:	f361 2394 	bfi	r3, r1, #10, #11
 8011110:	6013      	str	r3, [r2, #0]
            header->h  = LV_DPI;
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	8853      	ldrh	r3, [r2, #2]
 8011116:	2164      	movs	r1, #100	; 0x64
 8011118:	f361 134f 	bfi	r3, r1, #5, #11
 801111c:	8053      	strh	r3, [r2, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	7813      	ldrb	r3, [r2, #0]
 8011122:	f36f 0304 	bfc	r3, #0, #5
 8011126:	7013      	strb	r3, [r2, #0]
            return LV_RES_INV;
 8011128:	2300      	movs	r3, #0
 801112a:	e018      	b.n	801115e <lv_img_decoder_built_in_info+0xfa>
        }
    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 801112c:	7fbb      	ldrb	r3, [r7, #30]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d112      	bne.n	8011158 <lv_img_decoder_built_in_info+0xf4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8011132:	687a      	ldr	r2, [r7, #4]
 8011134:	6813      	ldr	r3, [r2, #0]
 8011136:	2101      	movs	r1, #1
 8011138:	f361 2394 	bfi	r3, r1, #10, #11
 801113c:	6013      	str	r3, [r2, #0]
        header->h = 1;
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	8853      	ldrh	r3, [r2, #2]
 8011142:	2101      	movs	r1, #1
 8011144:	f361 134f 	bfi	r3, r1, #5, #11
 8011148:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	7813      	ldrb	r3, [r2, #0]
 801114e:	210b      	movs	r1, #11
 8011150:	f361 0304 	bfi	r3, r1, #0, #5
 8011154:	7013      	strb	r3, [r2, #0]
 8011156:	e001      	b.n	801115c <lv_img_decoder_built_in_info+0xf8>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8011158:	2300      	movs	r3, #0
 801115a:	e000      	b.n	801115e <lv_img_decoder_built_in_info+0xfa>
    }
    return LV_RES_OK;
 801115c:	2301      	movs	r3, #1
}
 801115e:	4618      	mov	r0, r3
 8011160:	3720      	adds	r7, #32
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <lv_img_decoder_built_in_open>:

static lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8011168:	b5b0      	push	{r4, r5, r7, lr}
 801116a:	b08c      	sub	sp, #48	; 0x30
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	7b1b      	ldrb	r3, [r3, #12]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d153      	bne.n	8011222 <lv_img_decoder_built_in_open+0xba>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	4618      	mov	r0, r3
 8011180:	f002 f8ae 	bl	80132e0 <lv_fs_get_ext>
 8011184:	4603      	mov	r3, r0
 8011186:	498d      	ldr	r1, [pc, #564]	; (80113bc <lv_img_decoder_built_in_open+0x254>)
 8011188:	4618      	mov	r0, r3
 801118a:	f7ef f821 	bl	80001d0 <strcmp>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d001      	beq.n	8011198 <lv_img_decoder_built_in_open+0x30>
 8011194:	2300      	movs	r3, #0
 8011196:	e10d      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	6859      	ldr	r1, [r3, #4]
 801119c:	f107 030c 	add.w	r3, r7, #12
 80111a0:	2202      	movs	r2, #2
 80111a2:	4618      	mov	r0, r3
 80111a4:	f001 ff94 	bl	80130d0 <lv_fs_open>
 80111a8:	4603      	mov	r3, r0
 80111aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if(res != LV_FS_RES_OK) {
 80111ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d001      	beq.n	80111ba <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80111b6:	2300      	movs	r3, #0
 80111b8:	e0fc      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	6a1b      	ldr	r3, [r3, #32]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d115      	bne.n	80111ee <lv_img_decoder_built_in_open+0x86>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80111c2:	2008      	movs	r0, #8
 80111c4:	f002 fc00 	bl	80139c8 <lv_mem_alloc>
 80111c8:	4602      	mov	r2, r0
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d104      	bne.n	80111e0 <lv_img_decoder_built_in_open+0x78>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	6a1b      	ldr	r3, [r3, #32]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d100      	bne.n	80111e0 <lv_img_decoder_built_in_open+0x78>
 80111de:	e7fe      	b.n	80111de <lv_img_decoder_built_in_open+0x76>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	6a1b      	ldr	r3, [r3, #32]
 80111e4:	2208      	movs	r2, #8
 80111e6:	2100      	movs	r1, #0
 80111e8:	4618      	mov	r0, r3
 80111ea:	f016 f826 	bl	802723a <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	6a1b      	ldr	r3, [r3, #32]
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24
        user_data->f                               = lv_mem_alloc(sizeof(f));
 80111f4:	2008      	movs	r0, #8
 80111f6:	f002 fbe7 	bl	80139c8 <lv_mem_alloc>
 80111fa:	4602      	mov	r2, r0
 80111fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fe:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d104      	bne.n	8011212 <lv_img_decoder_built_in_open+0xaa>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_mem_assert(user_data->f);
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d100      	bne.n	8011212 <lv_img_decoder_built_in_open+0xaa>
 8011210:	e7fe      	b.n	8011210 <lv_img_decoder_built_in_open+0xa8>
        }

        memcpy(user_data->f, &f, sizeof(f));
 8011212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f107 010c 	add.w	r1, r7, #12
 801121a:	2208      	movs	r2, #8
 801121c:	4618      	mov	r0, r3
 801121e:	f016 f801 	bl	8027224 <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	7c1b      	ldrb	r3, [r3, #16]
 8011226:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801122a:	b2db      	uxtb	r3, r3
 801122c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8011230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011234:	2b04      	cmp	r3, #4
 8011236:	d007      	beq.n	8011248 <lv_img_decoder_built_in_open+0xe0>
 8011238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801123c:	2b05      	cmp	r3, #5
 801123e:	d003      	beq.n	8011248 <lv_img_decoder_built_in_open+0xe0>
 8011240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011244:	2b06      	cmp	r3, #6
 8011246:	d10f      	bne.n	8011268 <lv_img_decoder_built_in_open+0x100>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	7b1b      	ldrb	r3, [r3, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d106      	bne.n	801125e <lv_img_decoder_built_in_open+0xf6>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	689a      	ldr	r2, [r3, #8]
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 801125a:	2301      	movs	r3, #1
 801125c:	e0aa      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	2200      	movs	r2, #0
 8011262:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 8011264:	2301      	movs	r3, #1
 8011266:	e0a5      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8011268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801126c:	2b07      	cmp	r3, #7
 801126e:	d00b      	beq.n	8011288 <lv_img_decoder_built_in_open+0x120>
 8011270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011274:	2b08      	cmp	r3, #8
 8011276:	d007      	beq.n	8011288 <lv_img_decoder_built_in_open+0x120>
 8011278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801127c:	2b09      	cmp	r3, #9
 801127e:	d003      	beq.n	8011288 <lv_img_decoder_built_in_open+0x120>
 8011280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011284:	2b0a      	cmp	r3, #10
 8011286:	d17b      	bne.n	8011380 <lv_img_decoder_built_in_open+0x218>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8011288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801128c:	4618      	mov	r0, r3
 801128e:	f7f8 ffd3 	bl	800a238 <lv_img_color_format_get_px_size>
 8011292:	4603      	mov	r3, r0
 8011294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        uint32_t palette_size = 1 << px_size;
 8011298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801129c:	2201      	movs	r2, #1
 801129e:	fa02 f303 	lsl.w	r3, r2, r3
 80112a2:	61fb      	str	r3, [r7, #28]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	6a1b      	ldr	r3, [r3, #32]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d115      	bne.n	80112d8 <lv_img_decoder_built_in_open+0x170>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80112ac:	2008      	movs	r0, #8
 80112ae:	f002 fb8b 	bl	80139c8 <lv_mem_alloc>
 80112b2:	4602      	mov	r2, r0
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	6a1b      	ldr	r3, [r3, #32]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d104      	bne.n	80112ca <lv_img_decoder_built_in_open+0x162>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	6a1b      	ldr	r3, [r3, #32]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d100      	bne.n	80112ca <lv_img_decoder_built_in_open+0x162>
 80112c8:	e7fe      	b.n	80112c8 <lv_img_decoder_built_in_open+0x160>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	6a1b      	ldr	r3, [r3, #32]
 80112ce:	2208      	movs	r2, #8
 80112d0:	2100      	movs	r1, #0
 80112d2:	4618      	mov	r0, r3
 80112d4:	f015 ffb1 	bl	802723a <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	6a1b      	ldr	r3, [r3, #32]
 80112dc:	61bb      	str	r3, [r7, #24]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	4618      	mov	r0, r3
 80112e4:	f002 fb70 	bl	80139c8 <lv_mem_alloc>
 80112e8:	4602      	mov	r2, r0
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	605a      	str	r2, [r3, #4]
        if(user_data->palette == NULL) {
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d104      	bne.n	8011300 <lv_img_decoder_built_in_open+0x198>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            lv_mem_assert(user_data->f);
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d100      	bne.n	8011300 <lv_img_decoder_built_in_open+0x198>
 80112fe:	e7fe      	b.n	80112fe <lv_img_decoder_built_in_open+0x196>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	7b1b      	ldrb	r3, [r3, #12]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d10f      	bne.n	8011328 <lv_img_decoder_built_in_open+0x1c0>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2104      	movs	r1, #4
 801130e:	4618      	mov	r0, r3
 8011310:	f001 ffc3 	bl	801329a <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	6818      	ldr	r0, [r3, #0]
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	6859      	ldr	r1, [r3, #4]
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	005a      	lsls	r2, r3, #1
 8011320:	2300      	movs	r3, #0
 8011322:	f001 ff84 	bl	801322e <lv_fs_read>
 8011326:	e026      	b.n	8011376 <lv_img_decoder_built_in_open+0x20e>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	617b      	str	r3, [r7, #20]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8011330:	2300      	movs	r3, #0
 8011332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011334:	e01b      	b.n	801136e <lv_img_decoder_built_in_open+0x206>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8011336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	697a      	ldr	r2, [r7, #20]
 801133c:	4413      	add	r3, r2
 801133e:	7898      	ldrb	r0, [r3, #2]
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	4413      	add	r3, r2
 8011348:	7859      	ldrb	r1, [r3, #1]
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	697a      	ldr	r2, [r7, #20]
 8011350:	4413      	add	r3, r2
 8011352:	781d      	ldrb	r5, [r3, #0]
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	685a      	ldr	r2, [r3, #4]
 8011358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135a:	005b      	lsls	r3, r3, #1
 801135c:	18d4      	adds	r4, r2, r3
 801135e:	462a      	mov	r2, r5
 8011360:	f7ff fcec 	bl	8010d3c <lv_color_make>
 8011364:	4603      	mov	r3, r0
 8011366:	8023      	strh	r3, [r4, #0]
            for(i = 0; i < palette_size; i++) {
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	3301      	adds	r3, #1
 801136c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801136e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	429a      	cmp	r2, r3
 8011374:	d3df      	bcc.n	8011336 <lv_img_decoder_built_in_open+0x1ce>
            }
        }

        dsc->img_data = NULL;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2200      	movs	r2, #0
 801137a:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 801137c:	2301      	movs	r3, #1
 801137e:	e019      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8011380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011384:	2b0b      	cmp	r3, #11
 8011386:	d00b      	beq.n	80113a0 <lv_img_decoder_built_in_open+0x238>
 8011388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801138c:	2b0c      	cmp	r3, #12
 801138e:	d007      	beq.n	80113a0 <lv_img_decoder_built_in_open+0x238>
 8011390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011394:	2b0d      	cmp	r3, #13
 8011396:	d003      	beq.n	80113a0 <lv_img_decoder_built_in_open+0x238>
 8011398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801139c:	2b0e      	cmp	r3, #14
 801139e:	d104      	bne.n	80113aa <lv_img_decoder_built_in_open+0x242>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2200      	movs	r2, #0
 80113a4:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 80113a6:	2301      	movs	r3, #1
 80113a8:	e004      	b.n	80113b4 <lv_img_decoder_built_in_open+0x24c>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 f899 	bl	80114e4 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 80113b2:	2300      	movs	r3, #0
    }
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3730      	adds	r7, #48	; 0x30
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bdb0      	pop	{r4, r5, r7, pc}
 80113bc:	08029cc4 	.word	0x08029cc4

080113c0 <lv_img_decoder_built_in_read_line>:

static lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b088      	sub	sp, #32
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4611      	mov	r1, r2
 80113cc:	461a      	mov	r2, r3
 80113ce:	460b      	mov	r3, r1
 80113d0:	80fb      	strh	r3, [r7, #6]
 80113d2:	4613      	mov	r3, r2
 80113d4:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 80113d6:	2300      	movs	r3, #0
 80113d8:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	7c1b      	ldrb	r3, [r3, #16]
 80113de:	f003 031f 	and.w	r3, r3, #31
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	d00d      	beq.n	8011404 <lv_img_decoder_built_in_read_line+0x44>
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	7c1b      	ldrb	r3, [r3, #16]
 80113ec:	f003 031f 	and.w	r3, r3, #31
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b05      	cmp	r3, #5
 80113f4:	d006      	beq.n	8011404 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	7c1b      	ldrb	r3, [r3, #16]
 80113fa:	f003 031f 	and.w	r3, r3, #31
 80113fe:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011400:	2b06      	cmp	r3, #6
 8011402:	d112      	bne.n	801142a <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	7b1b      	ldrb	r3, [r3, #12]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d166      	bne.n	80114da <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 801140c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8011410:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011414:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	4603      	mov	r3, r0
 801141e:	68b8      	ldr	r0, [r7, #8]
 8011420:	f000 f88c 	bl	801153c <lv_img_decoder_built_in_line_true_color>
 8011424:	4603      	mov	r3, r0
 8011426:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011428:	e057      	b.n	80114da <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	7c1b      	ldrb	r3, [r3, #16]
 801142e:	f003 031f 	and.w	r3, r3, #31
 8011432:	b2db      	uxtb	r3, r3
 8011434:	2b0b      	cmp	r3, #11
 8011436:	d014      	beq.n	8011462 <lv_img_decoder_built_in_read_line+0xa2>
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	7c1b      	ldrb	r3, [r3, #16]
 801143c:	f003 031f 	and.w	r3, r3, #31
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b0c      	cmp	r3, #12
 8011444:	d00d      	beq.n	8011462 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	7c1b      	ldrb	r3, [r3, #16]
 801144a:	f003 031f 	and.w	r3, r3, #31
 801144e:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8011450:	2b0d      	cmp	r3, #13
 8011452:	d006      	beq.n	8011462 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	7c1b      	ldrb	r3, [r3, #16]
 8011458:	f003 031f 	and.w	r3, r3, #31
 801145c:	b2db      	uxtb	r3, r3
 801145e:	2b0e      	cmp	r3, #14
 8011460:	d10e      	bne.n	8011480 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8011462:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8011466:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801146a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	4603      	mov	r3, r0
 8011474:	68b8      	ldr	r0, [r7, #8]
 8011476:	f000 f8bf 	bl	80115f8 <lv_img_decoder_built_in_line_alpha>
 801147a:	4603      	mov	r3, r0
 801147c:	75fb      	strb	r3, [r7, #23]
 801147e:	e02c      	b.n	80114da <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	7c1b      	ldrb	r3, [r3, #16]
 8011484:	f003 031f 	and.w	r3, r3, #31
 8011488:	b2db      	uxtb	r3, r3
 801148a:	2b07      	cmp	r3, #7
 801148c:	d014      	beq.n	80114b8 <lv_img_decoder_built_in_read_line+0xf8>
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	7c1b      	ldrb	r3, [r3, #16]
 8011492:	f003 031f 	and.w	r3, r3, #31
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b08      	cmp	r3, #8
 801149a:	d00d      	beq.n	80114b8 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	7c1b      	ldrb	r3, [r3, #16]
 80114a0:	f003 031f 	and.w	r3, r3, #31
 80114a4:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80114a6:	2b09      	cmp	r3, #9
 80114a8:	d006      	beq.n	80114b8 <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	7c1b      	ldrb	r3, [r3, #16]
 80114ae:	f003 031f 	and.w	r3, r3, #31
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b0a      	cmp	r3, #10
 80114b6:	d10e      	bne.n	80114d6 <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 80114b8:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80114bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80114c0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	4603      	mov	r3, r0
 80114ca:	68b8      	ldr	r0, [r7, #8]
 80114cc:	f000 faaa 	bl	8011a24 <lv_img_decoder_built_in_line_indexed>
 80114d0:	4603      	mov	r3, r0
 80114d2:	75fb      	strb	r3, [r7, #23]
 80114d4:	e001      	b.n	80114da <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 80114d6:	2300      	movs	r3, #0
 80114d8:	e000      	b.n	80114dc <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 80114da:	7dfb      	ldrb	r3, [r7, #23]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <lv_img_decoder_built_in_close>:

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d01c      	beq.n	8011534 <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d009      	beq.n	8011516 <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	4618      	mov	r0, r3
 8011508:	f001 fe62 	bl	80131d0 <lv_fs_close>
            lv_mem_free(user_data->f);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4618      	mov	r0, r3
 8011512:	f002 fa99 	bl	8013a48 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d004      	beq.n	8011528 <lv_img_decoder_built_in_close+0x44>
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	4618      	mov	r0, r3
 8011524:	f002 fa90 	bl	8013a48 <lv_mem_free>

        lv_mem_free(user_data);
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f002 fa8d 	bl	8013a48 <lv_mem_free>

        dsc->user_data = NULL;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2200      	movs	r2, #0
 8011532:	621a      	str	r2, [r3, #32]
    }
}
 8011534:	bf00      	nop
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <lv_img_decoder_built_in_line_true_color>:

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b08a      	sub	sp, #40	; 0x28
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	4608      	mov	r0, r1
 8011546:	4611      	mov	r1, r2
 8011548:	461a      	mov	r2, r3
 801154a:	4603      	mov	r3, r0
 801154c:	817b      	strh	r3, [r7, #10]
 801154e:	460b      	mov	r3, r1
 8011550:	813b      	strh	r3, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	7c1b      	ldrb	r3, [r3, #16]
 8011560:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011564:	b2db      	uxtb	r3, r3
 8011566:	4618      	mov	r0, r3
 8011568:	f7f8 fe66 	bl	800a238 <lv_img_color_format_get_px_size>
 801156c:	4603      	mov	r3, r0
 801156e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011572:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	6912      	ldr	r2, [r2, #16]
 801157a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801157e:	b292      	uxth	r2, r2
 8011580:	fb02 f203 	mul.w	r2, r2, r3
 8011584:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011588:	4413      	add	r3, r2
 801158a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801158e:	fb02 f303 	mul.w	r3, r2, r3
 8011592:	10db      	asrs	r3, r3, #3
 8011594:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	3304      	adds	r3, #4
 801159a:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 801159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	69f9      	ldr	r1, [r7, #28]
 80115a2:	4618      	mov	r0, r3
 80115a4:	f001 fe79 	bl	801329a <lv_fs_seek>
 80115a8:	4603      	mov	r3, r0
 80115aa:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 80115ac:	7efb      	ldrb	r3, [r7, #27]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e01c      	b.n	80115f0 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 80115b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80115be:	08d2      	lsrs	r2, r2, #3
 80115c0:	b2d2      	uxtb	r2, r2
 80115c2:	fb02 f303 	mul.w	r3, r2, r3
 80115c6:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 80115cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ce:	6818      	ldr	r0, [r3, #0]
 80115d0:	f107 0310 	add.w	r3, r7, #16
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115d8:	f001 fe29 	bl	801322e <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 80115dc:	7efb      	ldrb	r3, [r7, #27]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d103      	bne.n	80115ea <lv_img_decoder_built_in_line_true_color+0xae>
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d001      	beq.n	80115ee <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 80115ea:	2300      	movs	r3, #0
 80115ec:	e000      	b.n	80115f0 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 80115ee:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3728      	adds	r7, #40	; 0x28
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 80115f8:	b590      	push	{r4, r7, lr}
 80115fa:	b0d1      	sub	sp, #324	; 0x144
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	f107 040c 	add.w	r4, r7, #12
 8011602:	6020      	str	r0, [r4, #0]
 8011604:	460c      	mov	r4, r1
 8011606:	4610      	mov	r0, r2
 8011608:	4619      	mov	r1, r3
 801160a:	f107 030a 	add.w	r3, r7, #10
 801160e:	4622      	mov	r2, r4
 8011610:	801a      	strh	r2, [r3, #0]
 8011612:	f107 0308 	add.w	r3, r7, #8
 8011616:	4602      	mov	r2, r0
 8011618:	801a      	strh	r2, [r3, #0]
 801161a:	1dbb      	adds	r3, r7, #6
 801161c:	460a      	mov	r2, r1
 801161e:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011620:	2300      	movs	r3, #0
 8011622:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8011626:	23ff      	movs	r3, #255	; 0xff
 8011628:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801162c:	4bcc      	ldr	r3, [pc, #816]	; (8011960 <lv_img_decoder_built_in_line_alpha+0x368>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8011634:	4bcb      	ldr	r3, [pc, #812]	; (8011964 <lv_img_decoder_built_in_line_alpha+0x36c>)
 8011636:	f507 7482 	add.w	r4, r7, #260	; 0x104
 801163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801163c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8011640:	f107 030c 	add.w	r3, r7, #12
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801164a:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 801164e:	2300      	movs	r3, #0
 8011650:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8011654:	e022      	b.n	801169c <lv_img_decoder_built_in_line_alpha+0xa4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8011656:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 801165a:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 801165e:	4613      	mov	r3, r2
 8011660:	005b      	lsls	r3, r3, #1
 8011662:	4413      	add	r3, r2
 8011664:	461a      	mov	r2, r3
 8011666:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801166a:	4413      	add	r3, r2
 801166c:	b2ca      	uxtb	r2, r1
 801166e:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8011670:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8011674:	0a1b      	lsrs	r3, r3, #8
 8011676:	b299      	uxth	r1, r3
 8011678:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 801167c:	4613      	mov	r3, r2
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	4413      	add	r3, r2
 8011682:	3301      	adds	r3, #1
 8011684:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011688:	4413      	add	r3, r2
 801168a:	b2ca      	uxtb	r2, r1
 801168c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 801168e:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8011692:	b29b      	uxth	r3, r3
 8011694:	3301      	adds	r3, #1
 8011696:	b29b      	uxth	r3, r3
 8011698:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 801169c:	1dbb      	adds	r3, r7, #6
 801169e:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 80116a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	dbd5      	blt.n	8011656 <lv_img_decoder_built_in_line_alpha+0x5e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 80116aa:	2300      	movs	r3, #0
 80116ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 80116b0:	f107 030c 	add.w	r3, r7, #12
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	7c1b      	ldrb	r3, [r3, #16]
 80116b8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	4618      	mov	r0, r3
 80116c0:	f7f8 fdba 	bl	800a238 <lv_img_color_format_get_px_size>
 80116c4:	4603      	mov	r3, r0
 80116c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80116ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80116ce:	2201      	movs	r2, #1
 80116d0:	fa02 f303 	lsl.w	r3, r2, r3
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	3b01      	subs	r3, #1
 80116d8:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    lv_coord_t w = 0;
 80116dc:	2300      	movs	r3, #0
 80116de:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    uint32_t ofs = 0;
 80116e2:	2300      	movs	r3, #0
 80116e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    int8_t pos   = 0;
 80116e8:	2300      	movs	r3, #0
 80116ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    switch(dsc->header.cf) {
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	7c1b      	ldrb	r3, [r3, #16]
 80116f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	3b0b      	subs	r3, #11
 80116fe:	2b03      	cmp	r3, #3
 8011700:	f200 80f0 	bhi.w	80118e4 <lv_img_decoder_built_in_line_alpha+0x2ec>
 8011704:	a201      	add	r2, pc, #4	; (adr r2, 801170c <lv_img_decoder_built_in_line_alpha+0x114>)
 8011706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801170a:	bf00      	nop
 801170c:	0801171d 	.word	0x0801171d
 8011710:	0801179d 	.word	0x0801179d
 8011714:	08011821 	.word	0x08011821
 8011718:	080118a5 	.word	0x080118a5
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801171c:	f107 030c 	add.w	r3, r7, #12
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011728:	b29b      	uxth	r3, r3
 801172a:	10db      	asrs	r3, r3, #3
 801172c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x7) w++;
 8011730:	f107 030c 	add.w	r3, r7, #12
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801173c:	b29b      	uxth	r3, r3
 801173e:	f003 0307 	and.w	r3, r3, #7
 8011742:	2b00      	cmp	r3, #0
 8011744:	d006      	beq.n	8011754 <lv_img_decoder_built_in_line_alpha+0x15c>
 8011746:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801174a:	b29b      	uxth	r3, r3
 801174c:	3301      	adds	r3, #1
 801174e:	b29b      	uxth	r3, r3
 8011750:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 3); /*First pixel*/
 8011754:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8011758:	f107 0208 	add.w	r2, r7, #8
 801175c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011760:	fb02 f303 	mul.w	r3, r2, r3
 8011764:	f107 020a 	add.w	r2, r7, #10
 8011768:	f9b2 2000 	ldrsh.w	r2, [r2]
 801176c:	10d2      	asrs	r2, r2, #3
 801176e:	b212      	sxth	r2, r2
 8011770:	4413      	add	r3, r2
 8011772:	461a      	mov	r2, r3
 8011774:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011778:	4413      	add	r3, r2
 801177a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 7 - (x & 0x7);
 801177e:	f107 030a 	add.w	r3, r7, #10
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	b25b      	sxtb	r3, r3
 8011786:	43db      	mvns	r3, r3
 8011788:	b25b      	sxtb	r3, r3
 801178a:	f003 0307 	and.w	r3, r3, #7
 801178e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha1_opa_table;
 8011792:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011796:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 801179a:	e0a3      	b.n	80118e4 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801179c:	f107 030c 	add.w	r3, r7, #12
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	109b      	asrs	r3, r3, #2
 80117ac:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x3) w++;
 80117b0:	f107 030c 	add.w	r3, r7, #12
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80117bc:	b29b      	uxth	r3, r3
 80117be:	f003 0303 	and.w	r3, r3, #3
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d006      	beq.n	80117d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
 80117c6:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	3301      	adds	r3, #1
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 2); /*First pixel*/
 80117d4:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80117d8:	f107 0208 	add.w	r2, r7, #8
 80117dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117e0:	fb02 f303 	mul.w	r3, r2, r3
 80117e4:	f107 020a 	add.w	r2, r7, #10
 80117e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117ec:	1092      	asrs	r2, r2, #2
 80117ee:	b212      	sxth	r2, r2
 80117f0:	4413      	add	r3, r2
 80117f2:	461a      	mov	r2, r3
 80117f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80117f8:	4413      	add	r3, r2
 80117fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 6 - ((x & 0x3) * 2);
 80117fe:	f107 030a 	add.w	r3, r7, #10
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	43db      	mvns	r3, r3
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f003 0303 	and.w	r3, r3, #3
 801180c:	b2db      	uxtb	r3, r3
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	b2db      	uxtb	r3, r3
 8011812:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha2_opa_table;
 8011816:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801181a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 801181e:	e061      	b.n	80118e4 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011820:	f107 030c 	add.w	r3, r7, #12
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801182c:	b29b      	uxth	r3, r3
 801182e:	105b      	asrs	r3, r3, #1
 8011830:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            if(dsc->header.w & 0x1) w++;
 8011834:	f107 030c 	add.w	r3, r7, #12
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	691b      	ldr	r3, [r3, #16]
 801183c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011840:	b29b      	uxth	r3, r3
 8011842:	f003 0301 	and.w	r3, r3, #1
 8011846:	2b00      	cmp	r3, #0
 8011848:	d006      	beq.n	8011858 <lv_img_decoder_built_in_line_alpha+0x260>
 801184a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801184e:	b29b      	uxth	r3, r3
 8011850:	3301      	adds	r3, #1
 8011852:	b29b      	uxth	r3, r3
 8011854:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + (x >> 1); /*First pixel*/
 8011858:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 801185c:	f107 0208 	add.w	r2, r7, #8
 8011860:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011864:	fb02 f303 	mul.w	r3, r2, r3
 8011868:	f107 020a 	add.w	r2, r7, #10
 801186c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011870:	1052      	asrs	r2, r2, #1
 8011872:	b212      	sxth	r2, r2
 8011874:	4413      	add	r3, r2
 8011876:	461a      	mov	r2, r3
 8011878:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801187c:	4413      	add	r3, r2
 801187e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos       = 4 - ((x & 0x1) * 4);
 8011882:	f107 030a 	add.w	r3, r7, #10
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	f003 0301 	and.w	r3, r3, #1
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <lv_img_decoder_built_in_line_alpha+0x29c>
 8011890:	2304      	movs	r3, #4
 8011892:	e000      	b.n	8011896 <lv_img_decoder_built_in_line_alpha+0x29e>
 8011894:	2300      	movs	r3, #0
 8011896:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            opa_table = alpha4_opa_table;
 801189a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801189e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            break;
 80118a2:	e01f      	b.n	80118e4 <lv_img_decoder_built_in_line_alpha+0x2ec>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80118a4:	f107 030c 	add.w	r3, r7, #12
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	691b      	ldr	r3, [r3, #16]
 80118ac:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
            ofs += w * y + x;  /*First pixel*/
 80118b6:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80118ba:	f107 0208 	add.w	r2, r7, #8
 80118be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80118c2:	fb02 f203 	mul.w	r2, r2, r3
 80118c6:	f107 030a 	add.w	r3, r7, #10
 80118ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118ce:	4413      	add	r3, r2
 80118d0:	461a      	mov	r2, r3
 80118d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80118d6:	4413      	add	r3, r2
 80118d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            pos = 0;
 80118dc:	2300      	movs	r3, #0
 80118de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80118e2:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80118e4:	f107 030c 	add.w	r3, r7, #12
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6a1b      	ldr	r3, [r3, #32]
 80118ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80118f6:	f107 030c 	add.w	r3, r7, #12
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	7b1b      	ldrb	r3, [r3, #12]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d10e      	bne.n	8011920 <lv_img_decoder_built_in_line_alpha+0x328>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8011902:	f107 030c 	add.w	r3, r7, #12
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        data_tmp = img_dsc->data + ofs;
 801190e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011912:	689a      	ldr	r2, [r3, #8]
 8011914:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011918:	4413      	add	r3, r2
 801191a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801191e:	e017      	b.n	8011950 <lv_img_decoder_built_in_line_alpha+0x358>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801192a:	3304      	adds	r3, #4
 801192c:	4619      	mov	r1, r3
 801192e:	4610      	mov	r0, r2
 8011930:	f001 fcb3 	bl	801329a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8011934:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	f9b7 2136 	ldrsh.w	r2, [r7, #310]	; 0x136
 801193e:	f107 0110 	add.w	r1, r7, #16
 8011942:	2300      	movs	r3, #0
 8011944:	f001 fc73 	bl	801322e <lv_fs_read>
        data_tmp = fs_buf;
 8011948:	f107 0310 	add.w	r3, r7, #16
 801194c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8011950:	2300      	movs	r3, #0
 8011952:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 8011956:	2300      	movs	r3, #0
 8011958:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 801195c:	e054      	b.n	8011a08 <lv_img_decoder_built_in_line_alpha+0x410>
 801195e:	bf00      	nop
 8011960:	08029cc8 	.word	0x08029cc8
 8011964:	08029ccc 	.word	0x08029ccc
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8011968:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801196c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011970:	4413      	add	r3, r2
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	4619      	mov	r1, r3
 8011976:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 801197a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 801197e:	fa02 f303 	lsl.w	r3, r2, r3
 8011982:	ea01 0203 	and.w	r2, r1, r3
 8011986:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 801198a:	fa42 f303 	asr.w	r3, r2, r3
 801198e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8011992:	f107 030c 	add.w	r3, r7, #12
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	7c1b      	ldrb	r3, [r3, #16]
 801199a:	f003 031f 	and.w	r3, r3, #31
 801199e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80119a0:	2b0e      	cmp	r3, #14
 80119a2:	d006      	beq.n	80119b2 <lv_img_decoder_built_in_line_alpha+0x3ba>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80119a4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80119a8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80119ac:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80119ae:	781a      	ldrb	r2, [r3, #0]
 80119b0:	e001      	b.n	80119b6 <lv_img_decoder_built_in_line_alpha+0x3be>
 80119b2:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 80119b6:	f9b7 113e 	ldrsh.w	r1, [r7, #318]	; 0x13e
 80119ba:	460b      	mov	r3, r1
 80119bc:	005b      	lsls	r3, r3, #1
 80119be:	440b      	add	r3, r1
 80119c0:	3302      	adds	r3, #2
 80119c2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80119c6:	440b      	add	r3, r1
 80119c8:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 80119ca:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80119ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if(pos < 0) {
 80119da:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 80119de:	2b00      	cmp	r3, #0
 80119e0:	da0b      	bge.n	80119fa <lv_img_decoder_built_in_line_alpha+0x402>
            pos = 8 - px_size;
 80119e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119e6:	f1c3 0308 	rsb	r3, r3, #8
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            data_tmp++;
 80119f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119f4:	3301      	adds	r3, #1
 80119f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for(i = 0; i < len; i++) {
 80119fa:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	3301      	adds	r3, #1
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8011a08:	1dbb      	adds	r3, r7, #6
 8011a0a:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	; 0x13e
 8011a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	dba8      	blt.n	8011968 <lv_img_decoder_built_in_line_alpha+0x370>
        }
    }

    return LV_RES_OK;
 8011a16:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd90      	pop	{r4, r7, pc}
 8011a22:	bf00      	nop

08011a24 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	b0cb      	sub	sp, #300	; 0x12c
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	f107 040c 	add.w	r4, r7, #12
 8011a2e:	6020      	str	r0, [r4, #0]
 8011a30:	460c      	mov	r4, r1
 8011a32:	4610      	mov	r0, r2
 8011a34:	4619      	mov	r1, r3
 8011a36:	f107 030a 	add.w	r3, r7, #10
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	801a      	strh	r2, [r3, #0]
 8011a3e:	f107 0308 	add.w	r3, r7, #8
 8011a42:	4602      	mov	r2, r0
 8011a44:	801a      	strh	r2, [r3, #0]
 8011a46:	1dbb      	adds	r3, r7, #6
 8011a48:	460a      	mov	r2, r1
 8011a4a:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8011a4c:	f107 030c 	add.w	r3, r7, #12
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	7c1b      	ldrb	r3, [r3, #16]
 8011a54:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7f8 fbec 	bl	800a238 <lv_img_color_format_get_px_size>
 8011a60:	4603      	mov	r3, r0
 8011a62:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011a66:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	3b01      	subs	r3, #1
 8011a74:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

    lv_coord_t w = 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    int8_t pos   = 0;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
    uint32_t ofs = 0;
 8011a84:	2300      	movs	r3, #0
 8011a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    switch(dsc->header.cf) {
 8011a8a:	f107 030c 	add.w	r3, r7, #12
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	7c1b      	ldrb	r3, [r3, #16]
 8011a92:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	3b07      	subs	r3, #7
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	f200 80f9 	bhi.w	8011c92 <lv_img_decoder_built_in_line_indexed+0x26e>
 8011aa0:	a201      	add	r2, pc, #4	; (adr r2, 8011aa8 <lv_img_decoder_built_in_line_indexed+0x84>)
 8011aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa6:	bf00      	nop
 8011aa8:	08011ab9 	.word	0x08011ab9
 8011aac:	08011b3b 	.word	0x08011b3b
 8011ab0:	08011bc1 	.word	0x08011bc1
 8011ab4:	08011c47 	.word	0x08011c47
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011ab8:	f107 030c 	add.w	r3, r7, #12
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	691b      	ldr	r3, [r3, #16]
 8011ac0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	10db      	asrs	r3, r3, #3
 8011ac8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x7) w++;
 8011acc:	f107 030c 	add.w	r3, r7, #12
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	f003 0307 	and.w	r3, r3, #7
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d006      	beq.n	8011af0 <lv_img_decoder_built_in_line_indexed+0xcc>
 8011ae2:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	3301      	adds	r3, #1
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 3); /*First pixel*/
 8011af0:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011af4:	f107 0208 	add.w	r2, r7, #8
 8011af8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011afc:	fb02 f303 	mul.w	r3, r2, r3
 8011b00:	f107 020a 	add.w	r2, r7, #10
 8011b04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b08:	10d2      	asrs	r2, r2, #3
 8011b0a:	b212      	sxth	r2, r2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	461a      	mov	r2, r3
 8011b10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b14:	4413      	add	r3, r2
 8011b16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 8;                /*Skip the palette*/
 8011b1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b1e:	3308      	adds	r3, #8
 8011b20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 7 - (x & 0x7);
 8011b24:	f107 030a 	add.w	r3, r7, #10
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	b25b      	sxtb	r3, r3
 8011b2c:	43db      	mvns	r3, r3
 8011b2e:	b25b      	sxtb	r3, r3
 8011b30:	f003 0307 	and.w	r3, r3, #7
 8011b34:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011b38:	e0ab      	b.n	8011c92 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011b3a:	f107 030c 	add.w	r3, r7, #12
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	691b      	ldr	r3, [r3, #16]
 8011b42:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	109b      	asrs	r3, r3, #2
 8011b4a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x3) w++;
 8011b4e:	f107 030c 	add.w	r3, r7, #12
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	f003 0303 	and.w	r3, r3, #3
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d006      	beq.n	8011b72 <lv_img_decoder_built_in_line_indexed+0x14e>
 8011b64:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 2); /*First pixel*/
 8011b72:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011b76:	f107 0208 	add.w	r2, r7, #8
 8011b7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b7e:	fb02 f303 	mul.w	r3, r2, r3
 8011b82:	f107 020a 	add.w	r2, r7, #10
 8011b86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b8a:	1092      	asrs	r2, r2, #2
 8011b8c:	b212      	sxth	r2, r2
 8011b8e:	4413      	add	r3, r2
 8011b90:	461a      	mov	r2, r3
 8011b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011b96:	4413      	add	r3, r2
 8011b98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 16;               /*Skip the palette*/
 8011b9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011ba0:	3310      	adds	r3, #16
 8011ba2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 6 - ((x & 0x3) * 2);
 8011ba6:	f107 030a 	add.w	r3, r7, #10
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	43db      	mvns	r3, r3
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 0303 	and.w	r3, r3, #3
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011bbe:	e068      	b.n	8011c92 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011bc0:	f107 030c 	add.w	r3, r7, #12
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	691b      	ldr	r3, [r3, #16]
 8011bc8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	105b      	asrs	r3, r3, #1
 8011bd0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            if(dsc->header.w & 0x1) w++;
 8011bd4:	f107 030c 	add.w	r3, r7, #12
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	691b      	ldr	r3, [r3, #16]
 8011bdc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	f003 0301 	and.w	r3, r3, #1
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d006      	beq.n	8011bf8 <lv_img_decoder_built_in_line_indexed+0x1d4>
 8011bea:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + (x >> 1); /*First pixel*/
 8011bf8:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011bfc:	f107 0208 	add.w	r2, r7, #8
 8011c00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c04:	fb02 f303 	mul.w	r3, r2, r3
 8011c08:	f107 020a 	add.w	r2, r7, #10
 8011c0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c10:	1052      	asrs	r2, r2, #1
 8011c12:	b212      	sxth	r2, r2
 8011c14:	4413      	add	r3, r2
 8011c16:	461a      	mov	r2, r3
 8011c18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c1c:	4413      	add	r3, r2
 8011c1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 64;               /*Skip the palette*/
 8011c22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c26:	3340      	adds	r3, #64	; 0x40
 8011c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 4 - ((x & 0x1) * 4);
 8011c2c:	f107 030a 	add.w	r3, r7, #10
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	f003 0301 	and.w	r3, r3, #1
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <lv_img_decoder_built_in_line_indexed+0x21a>
 8011c3a:	2304      	movs	r3, #4
 8011c3c:	e000      	b.n	8011c40 <lv_img_decoder_built_in_line_indexed+0x21c>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011c44:	e025      	b.n	8011c92 <lv_img_decoder_built_in_line_indexed+0x26e>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8011c46:	f107 030c 	add.w	r3, r7, #12
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	691b      	ldr	r3, [r3, #16]
 8011c4e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
            ofs += w * y + x;  /*First pixel*/
 8011c58:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8011c5c:	f107 0208 	add.w	r2, r7, #8
 8011c60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c64:	fb02 f203 	mul.w	r2, r2, r3
 8011c68:	f107 030a 	add.w	r3, r7, #10
 8011c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c70:	4413      	add	r3, r2
 8011c72:	461a      	mov	r2, r3
 8011c74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c78:	4413      	add	r3, r2
 8011c7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            ofs += 1024;       /*Skip the palette*/
 8011c7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            pos = 0;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            break;
 8011c90:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011c92:	f107 030c 	add.w	r3, r7, #12
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	6a1b      	ldr	r3, [r3, #32]
 8011c9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011ca4:	f107 030c 	add.w	r3, r7, #12
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	7b1b      	ldrb	r3, [r3, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d10e      	bne.n	8011cce <lv_img_decoder_built_in_line_indexed+0x2aa>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8011cb0:	f107 030c 	add.w	r3, r7, #12
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        data_tmp                     = img_dsc->data + ofs;
 8011cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011cc6:	4413      	add	r3, r2
 8011cc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8011ccc:	e017      	b.n	8011cfe <lv_img_decoder_built_in_line_indexed+0x2da>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011cce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011cd8:	3304      	adds	r3, #4
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f001 fadc 	bl	801329a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8011ce2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011ce6:	6818      	ldr	r0, [r3, #0]
 8011ce8:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8011cec:	f107 0110 	add.w	r1, r7, #16
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f001 fa9c 	bl	801322e <lv_fs_read>
        data_tmp = fs_buf;
 8011cf6:	f107 0310 	add.w	r3, r7, #16
 8011cfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
 8011d04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    for(i = 0; i < len; i++) {
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8011d12:	e042      	b.n	8011d9a <lv_img_decoder_built_in_line_indexed+0x376>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8011d14:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8011d18:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8011d1c:	4413      	add	r3, r2
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	4619      	mov	r1, r3
 8011d22:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8011d26:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8011d2e:	ea01 0203 	and.w	r2, r1, r3
 8011d32:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d36:	fa42 f303 	asr.w	r3, r2, r3
 8011d3a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cbuf[i] = user_data->palette[val_act];
 8011d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011d42:	685a      	ldr	r2, [r3, #4]
 8011d44:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8011d48:	005b      	lsls	r3, r3, #1
 8011d4a:	441a      	add	r2, r3
 8011d4c:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8011d56:	440b      	add	r3, r1
 8011d58:	8812      	ldrh	r2, [r2, #0]
 8011d5a:	801a      	strh	r2, [r3, #0]

        pos -= px_size;
 8011d5c:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 8011d60:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011d64:	1ad3      	subs	r3, r2, r3
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
        if(pos < 0) {
 8011d6c:	f997 3125 	ldrsb.w	r3, [r7, #293]	; 0x125
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	da0b      	bge.n	8011d8c <lv_img_decoder_built_in_line_indexed+0x368>
            pos = 8 - px_size;
 8011d74:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011d78:	f1c3 0308 	rsb	r3, r3, #8
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
            data_tmp++;
 8011d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011d86:	3301      	adds	r3, #1
 8011d88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(i = 0; i < len; i++) {
 8011d8c:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	3301      	adds	r3, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8011d9a:	1dbb      	adds	r3, r7, #6
 8011d9c:	f9b7 211a 	ldrsh.w	r2, [r7, #282]	; 0x11a
 8011da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	dbb5      	blt.n	8011d14 <lv_img_decoder_built_in_line_indexed+0x2f0>
        }
    }

    return LV_RES_OK;
 8011da8:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd90      	pop	{r4, r7, pc}

08011db4 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	6839      	ldr	r1, [r7, #0]
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	4798      	blx	r3
 8011dc8:	4603      	mov	r3, r0
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8011dd2:	b590      	push	{r4, r7, lr}
 8011dd4:	b085      	sub	sp, #20
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	60f8      	str	r0, [r7, #12]
 8011dda:	60b9      	str	r1, [r7, #8]
 8011ddc:	607a      	str	r2, [r7, #4]
 8011dde:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681c      	ldr	r4, [r3, #0]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	47a0      	blx	r4
 8011dee:	4603      	mov	r3, r0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3714      	adds	r7, #20
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd90      	pop	{r4, r7, pc}

08011df8 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b088      	sub	sp, #32
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8011e04:	f107 0114 	add.w	r1, r7, #20
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	68ba      	ldr	r2, [r7, #8]
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7ff ffe0 	bl	8011dd2 <lv_font_get_glyph_dsc>
 8011e12:	4603      	mov	r3, r0
 8011e14:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 8011e16:	7ffb      	ldrb	r3, [r7, #31]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <lv_font_get_glyph_width+0x28>
 8011e1c:	8abb      	ldrh	r3, [r7, #20]
 8011e1e:	e000      	b.n	8011e22 <lv_font_get_glyph_width+0x2a>
    else return 0;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3720      	adds	r7, #32
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b086      	sub	sp, #24
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
 8011e32:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e3a:	6839      	ldr	r1, [r7, #0]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 f883 	bl	8011f48 <get_glyph_dsc_id>
 8011e42:	6138      	str	r0, [r7, #16]
    if(!gid) return false;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d101      	bne.n	8011e4e <lv_font_get_bitmap_fmt_txt+0x24>
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	e011      	b.n	8011e72 <lv_font_get_bitmap_fmt_txt+0x48>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	685a      	ldr	r2, [r3, #4]
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	00db      	lsls	r3, r3, #3
 8011e56:	4413      	add	r3, r2
 8011e58:	60fb      	str	r3, [r7, #12]

    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d007      	beq.n	8011e70 <lv_font_get_bitmap_fmt_txt+0x46>
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011e6c:	4413      	add	r3, r2
 8011e6e:	e000      	b.n	8011e72 <lv_font_get_bitmap_fmt_txt+0x48>

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3718      	adds	r7, #24
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b08a      	sub	sp, #40	; 0x28
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	60f8      	str	r0, [r7, #12]
 8011e82:	60b9      	str	r1, [r7, #8]
 8011e84:	607a      	str	r2, [r7, #4]
 8011e86:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e8e:	6879      	ldr	r1, [r7, #4]
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f000 f859 	bl	8011f48 <get_glyph_dsc_id>
 8011e96:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	e04e      	b.n	8011f40 <lv_font_get_glyph_dsc_fmt_txt+0xc6>

    int8_t kvalue = 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(fdsc->kern_dsc) {
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00f      	beq.n	8011ed0 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8011eb0:	6839      	ldr	r1, [r7, #0]
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f000 f848 	bl	8011f48 <get_glyph_dsc_id>
 8011eb8:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d007      	beq.n	8011ed0 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 8011ec0:	69ba      	ldr	r2, [r7, #24]
 8011ec2:	69f9      	ldr	r1, [r7, #28]
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 f97b 	bl	80121c0 <get_kern_value>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011ed0:	6a3b      	ldr	r3, [r7, #32]
 8011ed2:	685a      	ldr	r2, [r3, #4]
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	4413      	add	r3, r2
 8011eda:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	885b      	ldrh	r3, [r3, #2]
 8011ee0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011eec:	6a3a      	ldr	r2, [r7, #32]
 8011eee:	8a12      	ldrh	r2, [r2, #16]
 8011ef0:	fb02 f303 	mul.w	r3, r2, r3
 8011ef4:	111b      	asrs	r3, r3, #4
 8011ef6:	440b      	add	r3, r1
 8011ef8:	613b      	str	r3, [r7, #16]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	3308      	adds	r3, #8
 8011efe:	091b      	lsrs	r3, r3, #4
 8011f00:	613b      	str	r3, [r7, #16]

    dsc_out->adv_w = adv_w;
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	795a      	ldrb	r2, [r3, #5]
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	791a      	ldrb	r2, [r3, #4]
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	79db      	ldrb	r3, [r3, #7]
 8011f28:	b25a      	sxtb	r2, r3
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = fdsc->bpp;
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	7cdb      	ldrb	r3, [r3, #19]
 8011f32:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	461a      	mov	r2, r3
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	719a      	strb	r2, [r3, #6]

    return true;
 8011f3e:	2301      	movs	r3, #1
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3728      	adds	r7, #40	; 0x28
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8011f48:	b590      	push	{r4, r7, lr}
 8011f4a:	b08f      	sub	sp, #60	; 0x3c
 8011f4c:	af02      	add	r7, sp, #8
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d101      	bne.n	8011f5c <get_glyph_dsc_id+0x14>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	e12a      	b.n	80121b2 <get_glyph_dsc_id+0x26a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	627b      	str	r3, [r7, #36]	; 0x24

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	695b      	ldr	r3, [r3, #20]
 8011f66:	683a      	ldr	r2, [r7, #0]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d102      	bne.n	8011f72 <get_glyph_dsc_id+0x2a>
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6e:	699b      	ldr	r3, [r3, #24]
 8011f70:	e11f      	b.n	80121b2 <get_glyph_dsc_id+0x26a>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011f72:	2300      	movs	r3, #0
 8011f74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011f76:	e10b      	b.n	8012190 <get_glyph_dsc_id+0x248>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	6899      	ldr	r1, [r3, #8]
 8011f7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f7e:	4613      	mov	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	4413      	add	r3, r2
 8011f84:	009b      	lsls	r3, r3, #2
 8011f86:	440b      	add	r3, r1
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	6899      	ldr	r1, [r3, #8]
 8011f94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f96:	4613      	mov	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	440b      	add	r3, r1
 8011fa0:	889b      	ldrh	r3, [r3, #4]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d203      	bcs.n	8011fb2 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011faa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fac:	3301      	adds	r3, #1
 8011fae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011fb0:	e0ee      	b.n	8012190 <get_glyph_dsc_id+0x248>
        uint32_t glyph_id = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	6899      	ldr	r1, [r3, #8]
 8011fba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	009b      	lsls	r3, r3, #2
 8011fc0:	4413      	add	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	440b      	add	r3, r1
 8011fc6:	7c9b      	ldrb	r3, [r3, #18]
 8011fc8:	f003 0303 	and.w	r3, r3, #3
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d10d      	bne.n	8011fee <get_glyph_dsc_id+0xa6>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	6899      	ldr	r1, [r3, #8]
 8011fd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fd8:	4613      	mov	r3, r2
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	4413      	add	r3, r2
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	440b      	add	r3, r1
 8011fe2:	88db      	ldrh	r3, [r3, #6]
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	4413      	add	r3, r2
 8011fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8011fec:	e0c8      	b.n	8012180 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8011fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff0:	6899      	ldr	r1, [r3, #8]
 8011ff2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	4413      	add	r3, r2
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	440b      	add	r3, r1
 8011ffe:	7c9b      	ldrb	r3, [r3, #18]
 8012000:	f003 0303 	and.w	r3, r3, #3
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b01      	cmp	r3, #1
 8012008:	d11a      	bne.n	8012040 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200c:	6899      	ldr	r1, [r3, #8]
 801200e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012010:	4613      	mov	r3, r2
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	4413      	add	r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	440b      	add	r3, r1
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012020:	6899      	ldr	r1, [r3, #8]
 8012022:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012024:	4613      	mov	r3, r2
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	4413      	add	r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	440b      	add	r3, r1
 801202e:	88db      	ldrh	r3, [r3, #6]
 8012030:	4619      	mov	r1, r3
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	4413      	add	r3, r2
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	440b      	add	r3, r1
 801203c:	62bb      	str	r3, [r7, #40]	; 0x28
 801203e:	e09f      	b.n	8012180 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8012040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012042:	6899      	ldr	r1, [r3, #8]
 8012044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012046:	4613      	mov	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	4413      	add	r3, r2
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	440b      	add	r3, r1
 8012050:	7c9b      	ldrb	r3, [r3, #18]
 8012052:	f003 0303 	and.w	r3, r3, #3
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b02      	cmp	r3, #2
 801205a:	d13b      	bne.n	80120d4 <get_glyph_dsc_id+0x18c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	6899      	ldr	r1, [r3, #8]
 8012060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012062:	4613      	mov	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	440b      	add	r3, r1
 801206c:	689c      	ldr	r4, [r3, #8]
 801206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012070:	6899      	ldr	r1, [r3, #8]
 8012072:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012074:	4613      	mov	r3, r2
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	4413      	add	r3, r2
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	440b      	add	r3, r1
 801207e:	8a1b      	ldrh	r3, [r3, #16]
 8012080:	461a      	mov	r2, r3
 8012082:	f107 0008 	add.w	r0, r7, #8
 8012086:	4b4d      	ldr	r3, [pc, #308]	; (80121bc <get_glyph_dsc_id+0x274>)
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	2302      	movs	r3, #2
 801208c:	4621      	mov	r1, r4
 801208e:	f002 fbfb 	bl	8014888 <lv_utils_bsearch>
 8012092:	6178      	str	r0, [r7, #20]

            if(p) {
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d072      	beq.n	8012180 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 801209a:	6979      	ldr	r1, [r7, #20]
 801209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209e:	6898      	ldr	r0, [r3, #8]
 80120a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120a2:	4613      	mov	r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	4413      	add	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4403      	add	r3, r0
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	1acb      	subs	r3, r1, r3
 80120b0:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	085b      	lsrs	r3, r3, #1
 80120b6:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	6899      	ldr	r1, [r3, #8]
 80120bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120be:	4613      	mov	r3, r2
 80120c0:	009b      	lsls	r3, r3, #2
 80120c2:	4413      	add	r3, r2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	440b      	add	r3, r1
 80120c8:	88db      	ldrh	r3, [r3, #6]
 80120ca:	461a      	mov	r2, r3
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	4413      	add	r3, r2
 80120d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80120d2:	e055      	b.n	8012180 <get_glyph_dsc_id+0x238>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80120d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d6:	6899      	ldr	r1, [r3, #8]
 80120d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120da:	4613      	mov	r3, r2
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	4413      	add	r3, r2
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	440b      	add	r3, r1
 80120e4:	7c9b      	ldrb	r3, [r3, #18]
 80120e6:	f003 0303 	and.w	r3, r3, #3
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	2b03      	cmp	r3, #3
 80120ee:	d147      	bne.n	8012180 <get_glyph_dsc_id+0x238>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	6899      	ldr	r1, [r3, #8]
 80120f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120f6:	4613      	mov	r3, r2
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	4413      	add	r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	440b      	add	r3, r1
 8012100:	689c      	ldr	r4, [r3, #8]
 8012102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012104:	6899      	ldr	r1, [r3, #8]
 8012106:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012108:	4613      	mov	r3, r2
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	4413      	add	r3, r2
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	440b      	add	r3, r1
 8012112:	8a1b      	ldrh	r3, [r3, #16]
 8012114:	461a      	mov	r2, r3
 8012116:	f107 0008 	add.w	r0, r7, #8
 801211a:	4b28      	ldr	r3, [pc, #160]	; (80121bc <get_glyph_dsc_id+0x274>)
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	2302      	movs	r3, #2
 8012120:	4621      	mov	r1, r4
 8012122:	f002 fbb1 	bl	8014888 <lv_utils_bsearch>
 8012126:	6238      	str	r0, [r7, #32]

            if(p) {
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d028      	beq.n	8012180 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 801212e:	6a39      	ldr	r1, [r7, #32]
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	6898      	ldr	r0, [r3, #8]
 8012134:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012136:	4613      	mov	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4413      	add	r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	4403      	add	r3, r0
 8012140:	689b      	ldr	r3, [r3, #8]
 8012142:	1acb      	subs	r3, r1, r3
 8012144:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	085b      	lsrs	r3, r3, #1
 801214a:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	6899      	ldr	r1, [r3, #8]
 8012150:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012152:	4613      	mov	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4413      	add	r3, r2
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	440b      	add	r3, r1
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8012160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012162:	6899      	ldr	r1, [r3, #8]
 8012164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012166:	4613      	mov	r3, r2
 8012168:	009b      	lsls	r3, r3, #2
 801216a:	4413      	add	r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	440b      	add	r3, r1
 8012170:	88db      	ldrh	r3, [r3, #6]
 8012172:	4619      	mov	r1, r3
 8012174:	69ba      	ldr	r2, [r7, #24]
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	4413      	add	r3, r2
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	440b      	add	r3, r1
 801217e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	683a      	ldr	r2, [r7, #0]
 8012184:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801218a:	619a      	str	r2, [r3, #24]
        return glyph_id;
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	e010      	b.n	80121b2 <get_glyph_dsc_id+0x26a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	8a5b      	ldrh	r3, [r3, #18]
 8012194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012198:	b29b      	uxth	r3, r3
 801219a:	461a      	mov	r2, r3
 801219c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801219e:	4293      	cmp	r3, r2
 80121a0:	f4ff aeea 	bcc.w	8011f78 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	683a      	ldr	r2, [r7, #0]
 80121a8:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	2200      	movs	r2, #0
 80121ae:	619a      	str	r2, [r3, #24]
    return 0;
 80121b0:	2300      	movs	r3, #0

}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3734      	adds	r7, #52	; 0x34
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd90      	pop	{r4, r7, pc}
 80121ba:	bf00      	nop
 80121bc:	080123a9 	.word	0x080123a9

080121c0 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b094      	sub	sp, #80	; 0x50
 80121c4:	af02      	add	r7, sp, #8
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 80121d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121da:	7cdb      	ldrb	r3, [r3, #19]
 80121dc:	f003 0320 	and.w	r3, r3, #32
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d164      	bne.n	80122b0 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 80121e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 80121ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ee:	7adb      	ldrb	r3, [r3, #11]
 80121f0:	f003 0303 	and.w	r3, r3, #3
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d12b      	bne.n	8012252 <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 80121fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	b29b      	uxth	r3, r3
 8012204:	021b      	lsls	r3, r3, #8
 8012206:	b29a      	uxth	r2, r3
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	b29b      	uxth	r3, r3
 801220c:	4413      	add	r3, r2
 801220e:	b29b      	uxth	r3, r3
 8012210:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8012212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801221a:	461a      	mov	r2, r3
 801221c:	f107 001a 	add.w	r0, r7, #26
 8012220:	4b3b      	ldr	r3, [pc, #236]	; (8012310 <get_kern_value+0x150>)
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	2302      	movs	r3, #2
 8012226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012228:	f002 fb2e 	bl	8014888 <lv_utils_bsearch>
 801222c:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d067      	beq.n	8012304 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8012234:	6a3a      	ldr	r2, [r7, #32]
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012238:	1ad3      	subs	r3, r2, r3
 801223a:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	085b      	lsrs	r3, r3, #1
 8012240:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 8012242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012244:	685a      	ldr	r2, [r3, #4]
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	4413      	add	r3, r2
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012250:	e058      	b.n	8012304 <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 8012252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012254:	7adb      	ldrb	r3, [r3, #11]
 8012256:	f003 0303 	and.w	r3, r3, #3
 801225a:	b2db      	uxtb	r3, r3
 801225c:	2b01      	cmp	r3, #1
 801225e:	d151      	bne.n	8012304 <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 8012260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	021a      	lsls	r2, r3, #8
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	4413      	add	r3, r2
 801226e:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8012270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012278:	461a      	mov	r2, r3
 801227a:	f107 0014 	add.w	r0, r7, #20
 801227e:	4b25      	ldr	r3, [pc, #148]	; (8012314 <get_kern_value+0x154>)
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	2304      	movs	r3, #4
 8012284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012286:	f002 faff 	bl	8014888 <lv_utils_bsearch>
 801228a:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	2b00      	cmp	r3, #0
 8012290:	d038      	beq.n	8012304 <get_kern_value+0x144>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8012292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	62bb      	str	r3, [r7, #40]	; 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 801229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229c:	091b      	lsrs	r3, r3, #4
 801229e:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 80122a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	4413      	add	r3, r2
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80122ae:	e029      	b.n	8012304 <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 80122b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80122b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122b8:	685a      	ldr	r2, [r3, #4]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	4413      	add	r3, r2
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 80122c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4413      	add	r3, r2
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 80122d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d014      	beq.n	8012304 <get_kern_value+0x144>
 80122da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d010      	beq.n	8012304 <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 80122e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80122ea:	3a01      	subs	r2, #1
 80122ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122ee:	7b49      	ldrb	r1, [r1, #13]
 80122f0:	fb01 f102 	mul.w	r1, r1, r2
 80122f4:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80122f8:	3a01      	subs	r2, #1
 80122fa:	440a      	add	r2, r1
 80122fc:	4413      	add	r3, r2
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8012304:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012308:	4618      	mov	r0, r3
 801230a:	3748      	adds	r7, #72	; 0x48
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	08012319 	.word	0x08012319
 8012314:	08012361 	.word	0x08012361

08012318 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	781a      	ldrb	r2, [r3, #0]
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	429a      	cmp	r2, r3
 8012334:	d006      	beq.n	8012344 <kern_pair_8_compare+0x2c>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	461a      	mov	r2, r3
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	e007      	b.n	8012354 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	3301      	adds	r3, #1
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	461a      	mov	r2, r3
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	3301      	adds	r3, #1
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	1ad3      	subs	r3, r2, r3

}
 8012354:	4618      	mov	r0, r3
 8012356:	3714      	adds	r7, #20
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	881a      	ldrh	r2, [r3, #0]
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	881b      	ldrh	r3, [r3, #0]
 801237a:	429a      	cmp	r2, r3
 801237c:	d006      	beq.n	801238c <kern_pair_16_compare+0x2c>
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	461a      	mov	r2, r3
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	e007      	b.n	801239c <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	3302      	adds	r3, #2
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	461a      	mov	r2, r3
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	3302      	adds	r3, #2
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	1ad3      	subs	r3, r2, r3
}
 801239c:	4618      	mov	r0, r3
 801239e:	3714      	adds	r7, #20
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	461a      	mov	r2, r3
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	1ad3      	subs	r3, r2, r3
}
 80123be:	4618      	mov	r0, r3
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr

080123ca <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b082      	sub	sp, #8
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_disp_drv_t));
 80123d2:	2224      	movs	r2, #36	; 0x24
 80123d4:	2100      	movs	r1, #0
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f014 ff2f 	bl	802723a <memset>

    driver->flush_cb         = NULL;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	22f0      	movs	r2, #240	; 0xf0
 80123e6:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	22f0      	movs	r2, #240	; 0xf0
 80123ec:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	7a13      	ldrb	r3, [r2, #8]
 80123f8:	f36f 0341 	bfc	r3, #1, #1
 80123fc:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	7f13      	ldrb	r3, [r2, #28]
 8012402:	f043 0307 	orr.w	r3, r3, #7
 8012406:	7713      	strb	r3, [r2, #28]
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	7f13      	ldrb	r3, [r2, #28]
 801240c:	f36f 03c7 	bfc	r3, #3, #5
 8012410:	7713      	strb	r3, [r2, #28]
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	7f53      	ldrb	r3, [r2, #29]
 8012416:	f36f 0304 	bfc	r3, #0, #5
 801241a:	7753      	strb	r3, [r2, #29]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	7f53      	ldrb	r3, [r2, #29]
 8012420:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012424:	7753      	strb	r3, [r2, #29]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	7a13      	ldrb	r3, [r2, #8]
 801242a:	f043 0301 	orr.w	r3, r3, #1
 801242e:	7213      	strb	r3, [r2, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2200      	movs	r2, #0
 8012434:	621a      	str	r2, [r3, #32]
#endif

    driver->set_px_cb = NULL;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2200      	movs	r2, #0
 801243a:	615a      	str	r2, [r3, #20]
}
 801243c:	bf00      	nop
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
 8012450:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8012452:	221c      	movs	r2, #28
 8012454:	2100      	movs	r1, #0
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f014 feef 	bl	802723a <memset>

    disp_buf->buf1    = buf1;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	68ba      	ldr	r2, [r7, #8]
 8012460:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	60da      	str	r2, [r3, #12]
}
 8012476:	bf00      	nop
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
	...

08012480 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8012488:	4841      	ldr	r0, [pc, #260]	; (8012590 <lv_disp_drv_register+0x110>)
 801248a:	f000 ffbb 	bl	8013404 <lv_ll_ins_head>
 801248e:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d105      	bne.n	80124a2 <lv_disp_drv_register+0x22>
        lv_mem_assert(disp);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d100      	bne.n	801249e <lv_disp_drv_register+0x1e>
 801249c:	e7fe      	b.n	801249c <lv_disp_drv_register+0x1c>
        return NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	e072      	b.n	8012588 <lv_disp_drv_register+0x108>
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2224      	movs	r2, #36	; 0x24
 80124a6:	6879      	ldr	r1, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f014 febb 	bl	8027224 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80124b4:	2220      	movs	r2, #32
 80124b6:	2100      	movs	r1, #0
 80124b8:	4618      	mov	r0, r3
 80124ba:	f014 febe 	bl	802723a <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	3340      	adds	r3, #64	; 0x40
 80124c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f014 feb6 	bl	802723a <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3328      	adds	r3, #40	; 0x28
 80124d2:	2148      	movs	r1, #72	; 0x48
 80124d4:	4618      	mov	r0, r3
 80124d6:	f000 ff75 	bl	80133c4 <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 80124da:	4b2e      	ldr	r3, [pc, #184]	; (8012594 <lv_disp_drv_register+0x114>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d102      	bne.n	80124e8 <lv_disp_drv_register+0x68>
 80124e2:	4a2c      	ldr	r2, [pc, #176]	; (8012594 <lv_disp_drv_register+0x114>)
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 80124e8:	4b2a      	ldr	r3, [pc, #168]	; (8012594 <lv_disp_drv_register+0x114>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80124ee:	4a29      	ldr	r2, [pc, #164]	; (8012594 <lv_disp_drv_register+0x114>)
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6013      	str	r3, [r2, #0]
                                        new display*/

    disp->inv_p = 0;
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	f8b2 3160 	ldrh.w	r3, [r2, #352]	; 0x160
 80124fa:	f36f 0309 	bfc	r3, #0, #10
 80124fe:	f8a2 3160 	strh.w	r3, [r2, #352]	; 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8012502:	2100      	movs	r1, #0
 8012504:	2000      	movs	r0, #0
 8012506:	f7f3 f955 	bl	80057b4 <lv_obj_create>
 801250a:	4602      	mov	r2, r0
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	635a      	str	r2, [r3, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012510:	2100      	movs	r1, #0
 8012512:	2000      	movs	r0, #0
 8012514:	f7f3 f94e 	bl	80057b4 <lv_obj_create>
 8012518:	4602      	mov	r2, r0
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	639a      	str	r2, [r3, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801251e:	2100      	movs	r1, #0
 8012520:	2000      	movs	r0, #0
 8012522:	f7f3 f947 	bl	80057b4 <lv_obj_create>
 8012526:	4602      	mov	r2, r0
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	63da      	str	r2, [r3, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012530:	4919      	ldr	r1, [pc, #100]	; (8012598 <lv_disp_drv_register+0x118>)
 8012532:	4618      	mov	r0, r3
 8012534:	f7f4 fb77 	bl	8006c26 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801253c:	4916      	ldr	r1, [pc, #88]	; (8012598 <lv_disp_drv_register+0x118>)
 801253e:	4618      	mov	r0, r3
 8012540:	f7f4 fb71 	bl	8006c26 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012548:	4618      	mov	r0, r3
 801254a:	f7f3 fc70 	bl	8005e2e <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801254e:	4a11      	ldr	r2, [pc, #68]	; (8012594 <lv_disp_drv_register+0x114>)
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	6013      	str	r3, [r2, #0]

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2203      	movs	r2, #3
 8012558:	211e      	movs	r1, #30
 801255a:	4810      	ldr	r0, [pc, #64]	; (801259c <lv_disp_drv_register+0x11c>)
 801255c:	f001 fc64 	bl	8013e28 <lv_task_create>
 8012560:	4602      	mov	r2, r0
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	625a      	str	r2, [r3, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801256a:	2b00      	cmp	r3, #0
 801256c:	d100      	bne.n	8012570 <lv_disp_drv_register+0xf0>
 801256e:	e7fe      	b.n	801256e <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <lv_disp_drv_register+0xfc>
 8012578:	2300      	movs	r3, #0
 801257a:	e005      	b.n	8012588 <lv_disp_drv_register+0x108>

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012580:	4618      	mov	r0, r3
 8012582:	f001 fcff 	bl	8013f84 <lv_task_ready>

    return disp;
 8012586:	68fb      	ldr	r3, [r7, #12]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	20006dbc 	.word	0x20006dbc
 8012594:	20002a6c 	.word	0x20002a6c
 8012598:	20006ad0 	.word	0x20006ad0
 801259c:	080078b5 	.word	0x080078b5

080125a0 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 80125a0:	b480      	push	{r7}
 80125a2:	af00      	add	r7, sp, #0
    return disp_def;
 80125a4:	4b03      	ldr	r3, [pc, #12]	; (80125b4 <lv_disp_get_default+0x14>)
 80125a6:	681b      	ldr	r3, [r3, #0]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	20002a6c 	.word	0x20002a6c

080125b8 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d102      	bne.n	80125cc <lv_disp_get_hor_res+0x14>
 80125c6:	f7ff ffeb 	bl	80125a0 <lv_disp_get_default>
 80125ca:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <lv_disp_get_hor_res+0x1e>
        return LV_HOR_RES_MAX;
 80125d2:	23f0      	movs	r3, #240	; 0xf0
 80125d4:	e00d      	b.n	80125f2 <lv_disp_get_hor_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	7a1b      	ldrb	r3, [r3, #8]
 80125da:	f003 0302 	and.w	r3, r3, #2
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d103      	bne.n	80125ec <lv_disp_get_hor_res+0x34>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125ea:	e002      	b.n	80125f2 <lv_disp_get_hor_res+0x3a>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3708      	adds	r7, #8
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b082      	sub	sp, #8
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d102      	bne.n	801260e <lv_disp_get_ver_res+0x14>
 8012608:	f7ff ffca 	bl	80125a0 <lv_disp_get_default>
 801260c:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <lv_disp_get_ver_res+0x1e>
        return LV_VER_RES_MAX;
 8012614:	23f0      	movs	r3, #240	; 0xf0
 8012616:	e00d      	b.n	8012634 <lv_disp_get_ver_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	7a1b      	ldrb	r3, [r3, #8]
 801261c:	f003 0302 	and.w	r3, r3, #2
 8012620:	b2db      	uxtb	r3, r3
 8012622:	2b00      	cmp	r3, #0
 8012624:	d103      	bne.n	801262e <lv_disp_get_ver_res+0x34>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801262c:	e002      	b.n	8012634 <lv_disp_get_ver_res+0x3a>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d102      	bne.n	8012650 <lv_disp_get_antialiasing+0x14>
 801264a:	f7ff ffa9 	bl	80125a0 <lv_disp_get_default>
 801264e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return false;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <lv_disp_get_antialiasing+0x1e>
 8012656:	2300      	movs	r3, #0
 8012658:	e008      	b.n	801266c <lv_disp_get_antialiasing+0x30>

    return disp->driver.antialiasing ? true : false;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	7a1b      	ldrb	r3, [r3, #8]
 801265e:	f003 0301 	and.w	r3, r3, #1
 8012662:	2b00      	cmp	r3, #0
 8012664:	bf14      	ite	ne
 8012666:	2301      	movne	r3, #1
 8012668:	2300      	moveq	r3, #0
 801266a:	b2db      	uxtb	r3, r3
#endif
}
 801266c:	4618      	mov	r0, r3
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
    disp_drv->buffer->flushing = 0;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	685a      	ldr	r2, [r3, #4]
 8012680:	7e13      	ldrb	r3, [r2, #24]
 8012682:	f36f 0300 	bfc	r3, #0, #1
 8012686:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	685b      	ldr	r3, [r3, #4]
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	370c      	adds	r7, #12
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr

080126ac <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d006      	beq.n	80126cc <lv_disp_is_double_buf+0x20>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d001      	beq.n	80126cc <lv_disp_is_double_buf+0x20>
        return true;
 80126c8:	2301      	movs	r3, #1
 80126ca:	e000      	b.n	80126ce <lv_disp_is_double_buf+0x22>
    else
        return false;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	370c      	adds	r7, #12
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr

080126da <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b084      	sub	sp, #16
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126e8:	461a      	mov	r2, r3
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80126f0:	fb03 f302 	mul.w	r3, r3, r2
 80126f4:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff ffd8 	bl	80126ac <lv_disp_is_double_buf>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d007      	beq.n	8012712 <lv_disp_is_true_double_buf+0x38>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	429a      	cmp	r2, r3
 801270c:	d101      	bne.n	8012712 <lv_disp_is_true_double_buf+0x38>
        return true;
 801270e:	2301      	movs	r3, #1
 8012710:	e000      	b.n	8012714 <lv_disp_is_true_double_buf+0x3a>
    } else {
        return false;
 8012712:	2300      	movs	r3, #0
    }
}
 8012714:	4618      	mov	r0, r3
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d104      	bne.n	8012734 <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801272a:	4807      	ldr	r0, [pc, #28]	; (8012748 <lv_indev_get_next+0x2c>)
 801272c:	f000 ffcc 	bl	80136c8 <lv_ll_get_head>
 8012730:	4603      	mov	r3, r0
 8012732:	e004      	b.n	801273e <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8012734:	6879      	ldr	r1, [r7, #4]
 8012736:	4804      	ldr	r0, [pc, #16]	; (8012748 <lv_indev_get_next+0x2c>)
 8012738:	f000 ffec 	bl	8013714 <lv_ll_get_next>
 801273c:	4603      	mov	r3, r0
}
 801273e:	4618      	mov	r0, r3
 8012740:	3708      	adds	r7, #8
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	20006dac 	.word	0x20006dac

0801274c <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 8012754:	4b07      	ldr	r3, [pc, #28]	; (8012774 <lv_tick_inc+0x28>)
 8012756:	2200      	movs	r2, #0
 8012758:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801275a:	4b07      	ldr	r3, [pc, #28]	; (8012778 <lv_tick_inc+0x2c>)
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4413      	add	r3, r2
 8012762:	4a05      	ldr	r2, [pc, #20]	; (8012778 <lv_tick_inc+0x2c>)
 8012764:	6013      	str	r3, [r2, #0]
}
 8012766:	bf00      	nop
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	20002a74 	.word	0x20002a74
 8012778:	20002a70 	.word	0x20002a70

0801277c <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8012782:	4b09      	ldr	r3, [pc, #36]	; (80127a8 <lv_tick_get+0x2c>)
 8012784:	2201      	movs	r2, #1
 8012786:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 8012788:	4b08      	ldr	r3, [pc, #32]	; (80127ac <lv_tick_get+0x30>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 801278e:	4b06      	ldr	r3, [pc, #24]	; (80127a8 <lv_tick_get+0x2c>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	b2db      	uxtb	r3, r3
 8012794:	2b00      	cmp	r3, #0
 8012796:	d0f4      	beq.n	8012782 <lv_tick_get+0x6>
                                Continue until make a non interrupted cycle */

    return result;
 8012798:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801279a:	4618      	mov	r0, r3
 801279c:	370c      	adds	r7, #12
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop
 80127a8:	20002a74 	.word	0x20002a74
 80127ac:	20002a70 	.word	0x20002a70

080127b0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 80127b8:	f7ff ffe0 	bl	801277c <lv_tick_get>
 80127bc:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 80127be:	68fa      	ldr	r2, [r7, #12]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d304      	bcc.n	80127d0 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 80127c6:	68fa      	ldr	r2, [r7, #12]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	607b      	str	r3, [r7, #4]
 80127ce:	e006      	b.n	80127de <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	425b      	negs	r3, r3
 80127d4:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	4413      	add	r3, r2
 80127dc:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 80127de:	687b      	ldr	r3, [r7, #4]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 80127ec:	2128      	movs	r1, #40	; 0x28
 80127ee:	4808      	ldr	r0, [pc, #32]	; (8012810 <lv_anim_core_init+0x28>)
 80127f0:	f000 fde8 	bl	80133c4 <lv_ll_init>
    last_task_run = lv_tick_get();
 80127f4:	f7ff ffc2 	bl	801277c <lv_tick_get>
 80127f8:	4602      	mov	r2, r0
 80127fa:	4b06      	ldr	r3, [pc, #24]	; (8012814 <lv_anim_core_init+0x2c>)
 80127fc:	601a      	str	r2, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 80127fe:	2300      	movs	r3, #0
 8012800:	2203      	movs	r2, #3
 8012802:	211e      	movs	r1, #30
 8012804:	4804      	ldr	r0, [pc, #16]	; (8012818 <lv_anim_core_init+0x30>)
 8012806:	f001 fb0f 	bl	8013e28 <lv_task_create>
}
 801280a:	bf00      	nop
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	20006de8 	.word	0x20006de8
 8012814:	20002a78 	.word	0x20002a78
 8012818:	080129d1 	.word	0x080129d1

0801281c <lv_anim_create>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_create(lv_anim_t * a)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the  same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <lv_anim_create+0x20>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	4619      	mov	r1, r3
 8012836:	4610      	mov	r0, r2
 8012838:	f000 f830 	bl	801289c <lv_anim_del>

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801283c:	4815      	ldr	r0, [pc, #84]	; (8012894 <lv_anim_create+0x78>)
 801283e:	f000 fde1 	bl	8013404 <lv_ll_ins_head>
 8012842:	60f8      	str	r0, [r7, #12]
    lv_mem_assert(new_anim);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d100      	bne.n	801284c <lv_anim_create+0x30>
 801284a:	e7fe      	b.n	801284a <lv_anim_create+0x2e>
    if(new_anim == NULL) return;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d01c      	beq.n	801288c <lv_anim_create+0x70>

    /*Initialize the animation descriptor*/
    a->playback_now = 0;
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012858:	f36f 0382 	bfc	r3, #2, #1
 801285c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8012860:	2228      	movs	r2, #40	; 0x28
 8012862:	6879      	ldr	r1, [r7, #4]
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f014 fcdd 	bl	8027224 <memcpy>

    /*Set the start value*/
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d008      	beq.n	8012884 <lv_anim_create+0x68>
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	6810      	ldr	r0, [r2, #0]
 801287a:	68fa      	ldr	r2, [r7, #12]
 801287c:	6912      	ldr	r2, [r2, #16]
 801287e:	b212      	sxth	r2, r2
 8012880:	4611      	mov	r1, r2
 8012882:	4798      	blx	r3

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_list_changed = true;
 8012884:	4b04      	ldr	r3, [pc, #16]	; (8012898 <lv_anim_create+0x7c>)
 8012886:	2201      	movs	r2, #1
 8012888:	701a      	strb	r2, [r3, #0]
 801288a:	e000      	b.n	801288e <lv_anim_create+0x72>
    if(new_anim == NULL) return;
 801288c:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	20006de8 	.word	0x20006de8
 8012898:	20002a7c 	.word	0x20002a7c

0801289c <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b086      	sub	sp, #24
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 80128a6:	2300      	movs	r3, #0
 80128a8:	74fb      	strb	r3, [r7, #19]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80128aa:	4816      	ldr	r0, [pc, #88]	; (8012904 <lv_anim_del+0x68>)
 80128ac:	f000 ff0c 	bl	80136c8 <lv_ll_get_head>
 80128b0:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 80128b2:	e01f      	b.n	80128f4 <lv_anim_del+0x58>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80128b4:	6979      	ldr	r1, [r7, #20]
 80128b6:	4813      	ldr	r0, [pc, #76]	; (8012904 <lv_anim_del+0x68>)
 80128b8:	f000 ff2c 	bl	8013714 <lv_ll_get_next>
 80128bc:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d113      	bne.n	80128f0 <lv_anim_del+0x54>
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	683a      	ldr	r2, [r7, #0]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d002      	beq.n	80128d8 <lv_anim_del+0x3c>
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d10b      	bne.n	80128f0 <lv_anim_del+0x54>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 80128d8:	6979      	ldr	r1, [r7, #20]
 80128da:	480a      	ldr	r0, [pc, #40]	; (8012904 <lv_anim_del+0x68>)
 80128dc:	f000 fe46 	bl	801356c <lv_ll_rem>
            lv_mem_free(a);
 80128e0:	6978      	ldr	r0, [r7, #20]
 80128e2:	f001 f8b1 	bl	8013a48 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 80128e6:	4b08      	ldr	r3, [pc, #32]	; (8012908 <lv_anim_del+0x6c>)
 80128e8:	2201      	movs	r2, #1
 80128ea:	701a      	strb	r2, [r3, #0]
                                         the linked list*/
            del = true;
 80128ec:	2301      	movs	r3, #1
 80128ee:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1dc      	bne.n	80128b4 <lv_anim_del+0x18>
    }

    return del;
 80128fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3718      	adds	r7, #24
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	20006de8 	.word	0x20006de8
 8012908:	20002a7c 	.word	0x20002a7c

0801290c <lv_anim_speed_to_time>:
 * @param start start value of the animation
 * @param end end value of the animation
 * @return the required time [ms] for the animation with the given parameters
 */
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)
{
 801290c:	b480      	push	{r7}
 801290e:	b085      	sub	sp, #20
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	80fb      	strh	r3, [r7, #6]
 8012916:	460b      	mov	r3, r1
 8012918:	80bb      	strh	r3, [r7, #4]
 801291a:	4613      	mov	r3, r2
 801291c:	807b      	strh	r3, [r7, #2]
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 801291e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012922:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	2b00      	cmp	r3, #0
 801292a:	bfb8      	it	lt
 801292c:	425b      	neglt	r3, r3
 801292e:	60bb      	str	r3, [r7, #8]
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012936:	fb02 f203 	mul.w	r2, r2, r3
 801293a:	88fb      	ldrh	r3, [r7, #6]
 801293c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012940:	60fb      	str	r3, [r7, #12]

    if(time > UINT16_MAX) time = UINT16_MAX;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012948:	d302      	bcc.n	8012950 <lv_anim_speed_to_time+0x44>
 801294a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801294e:	60fb      	str	r3, [r7, #12]

    if(time == 0) {
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d102      	bne.n	801295c <lv_anim_speed_to_time+0x50>
        time++;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	3301      	adds	r3, #1
 801295a:	60fb      	str	r3, [r7, #12]
    }

    return time;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	b29b      	uxth	r3, r3
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	8b1b      	ldrh	r3, [r3, #24]
 8012978:	461a      	mov	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012980:	429a      	cmp	r2, r3
 8012982:	d103      	bne.n	801298c <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8012984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012988:	60fb      	str	r3, [r7, #12]
 801298a:	e008      	b.n	801299e <lv_anim_path_linear+0x32>
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012992:	029b      	lsls	r3, r3, #10
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	8b12      	ldrh	r2, [r2, #24]
 8012998:	fb93 f3f2 	sdiv	r3, r3, r2
 801299c:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	695a      	ldr	r2, [r3, #20]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	fb02 f303 	mul.w	r3, r2, r3
 80129ae:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	129b      	asrs	r3, r3, #10
 80129b4:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	691b      	ldr	r3, [r3, #16]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	4413      	add	r3, r2
 80129be:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	b21b      	sxth	r3, r3
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3714      	adds	r7, #20
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b086      	sub	sp, #24
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80129d8:	4842      	ldr	r0, [pc, #264]	; (8012ae4 <anim_task+0x114>)
 80129da:	f000 fe75 	bl	80136c8 <lv_ll_get_head>
 80129de:	6178      	str	r0, [r7, #20]
 80129e0:	e00b      	b.n	80129fa <anim_task+0x2a>
    {
        a->has_run = 0;
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80129e8:	f36f 03c3 	bfc	r3, #3, #1
 80129ec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80129f0:	6979      	ldr	r1, [r7, #20]
 80129f2:	483c      	ldr	r0, [pc, #240]	; (8012ae4 <anim_task+0x114>)
 80129f4:	f000 fe8e 	bl	8013714 <lv_ll_get_next>
 80129f8:	6178      	str	r0, [r7, #20]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1f0      	bne.n	80129e2 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8012a00:	4b39      	ldr	r3, [pc, #228]	; (8012ae8 <anim_task+0x118>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7ff fed3 	bl	80127b0 <lv_tick_elaps>
 8012a0a:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012a0c:	4835      	ldr	r0, [pc, #212]	; (8012ae4 <anim_task+0x114>)
 8012a0e:	f000 fe5b 	bl	80136c8 <lv_ll_get_head>
 8012a12:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 8012a14:	e059      	b.n	8012aca <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8012a16:	4b35      	ldr	r3, [pc, #212]	; (8012aec <anim_task+0x11c>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012a22:	f003 0308 	and.w	r3, r3, #8
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d140      	bne.n	8012aae <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8012a2c:	697a      	ldr	r2, [r7, #20]
 8012a2e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012a32:	f043 0308 	orr.w	r3, r3, #8
 8012a36:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            a->act_time += elaps;
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	4413      	add	r3, r2
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	b21a      	sxth	r2, r3
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	db29      	blt.n	8012aae <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a60:	461a      	mov	r2, r3
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	8b1b      	ldrh	r3, [r3, #24]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	dd04      	ble.n	8012a74 <anim_task+0xa4>
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	8b1b      	ldrh	r3, [r3, #24]
 8012a6e:	b21a      	sxth	r2, r3
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	6978      	ldr	r0, [r7, #20]
 8012a7a:	4798      	blx	r3
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d007      	beq.n	8012a98 <anim_task+0xc8>
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	697a      	ldr	r2, [r7, #20]
 8012a8e:	6812      	ldr	r2, [r2, #0]
 8012a90:	68f9      	ldr	r1, [r7, #12]
 8012a92:	b209      	sxth	r1, r1
 8012a94:	4610      	mov	r0, r2
 8012a96:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	8b1b      	ldrh	r3, [r3, #24]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	db02      	blt.n	8012aae <anim_task+0xde>
                    anim_ready_handler(a);
 8012aa8:	6978      	ldr	r0, [r7, #20]
 8012aaa:	f000 f821 	bl	8012af0 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8012aae:	4b0f      	ldr	r3, [pc, #60]	; (8012aec <anim_task+0x11c>)
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d004      	beq.n	8012ac0 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012ab6:	480b      	ldr	r0, [pc, #44]	; (8012ae4 <anim_task+0x114>)
 8012ab8:	f000 fe06 	bl	80136c8 <lv_ll_get_head>
 8012abc:	6178      	str	r0, [r7, #20]
 8012abe:	e004      	b.n	8012aca <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012ac0:	6979      	ldr	r1, [r7, #20]
 8012ac2:	4808      	ldr	r0, [pc, #32]	; (8012ae4 <anim_task+0x114>)
 8012ac4:	f000 fe26 	bl	8013714 <lv_ll_get_next>
 8012ac8:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1a2      	bne.n	8012a16 <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 8012ad0:	f7ff fe54 	bl	801277c <lv_tick_get>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	4b04      	ldr	r3, [pc, #16]	; (8012ae8 <anim_task+0x118>)
 8012ad8:	601a      	str	r2, [r3, #0]
}
 8012ada:	bf00      	nop
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	20006de8 	.word	0x20006de8
 8012ae8:	20002a78 	.word	0x20002a78
 8012aec:	20002a7c 	.word	0x20002a7c

08012af0 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08e      	sub	sp, #56	; 0x38
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012afe:	f003 0302 	and.w	r3, r3, #2
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d107      	bne.n	8012b18 <anim_ready_handler+0x28>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b0e:	f003 0301 	and.w	r3, r3, #1
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d017      	beq.n	8012b48 <anim_ready_handler+0x58>
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b1e:	f003 0302 	and.w	r3, r3, #2
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d129      	bne.n	8012b7c <anim_ready_handler+0x8c>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d021      	beq.n	8012b7c <anim_ready_handler+0x8c>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b3e:	f003 0304 	and.w	r3, r3, #4
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d019      	beq.n	8012b7c <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8012b48:	f107 030c 	add.w	r3, r7, #12
 8012b4c:	2228      	movs	r2, #40	; 0x28
 8012b4e:	6879      	ldr	r1, [r7, #4]
 8012b50:	4618      	mov	r0, r3
 8012b52:	f014 fb67 	bl	8027224 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	4829      	ldr	r0, [pc, #164]	; (8012c00 <anim_ready_handler+0x110>)
 8012b5a:	f000 fd07 	bl	801356c <lv_ll_rem>
        lv_mem_free(a);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 ff72 	bl	8013a48 <lv_mem_free>
        anim_list_changed = true;
 8012b64:	4b27      	ldr	r3, [pc, #156]	; (8012c04 <anim_ready_handler+0x114>)
 8012b66:	2201      	movs	r2, #1
 8012b68:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d040      	beq.n	8012bf2 <anim_ready_handler+0x102>
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	f107 020c 	add.w	r2, r7, #12
 8012b76:	4610      	mov	r0, r2
 8012b78:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012b7a:	e03a      	b.n	8012bf2 <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	8bdb      	ldrh	r3, [r3, #30]
 8012b80:	425b      	negs	r3, r3
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	b21a      	sxth	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d02c      	beq.n	8012bf4 <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012ba0:	f003 0304 	and.w	r3, r3, #4
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <anim_ready_handler+0xc8>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b9b      	ldrh	r3, [r3, #28]
 8012bae:	425b      	negs	r3, r3
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	b21a      	sxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012bbe:	f003 0304 	and.w	r3, r3, #4
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	bf0c      	ite	eq
 8012bc8:	2301      	moveq	r3, #1
 8012bca:	2300      	movne	r3, #0
 8012bcc:	b2d9      	uxtb	r1, r3
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8012bd4:	f361 0382 	bfi	r3, r1, #2, #1
 8012bd8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	637b      	str	r3, [r7, #52]	; 0x34
            a->start = a->end;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	695a      	ldr	r2, [r3, #20]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bee:	615a      	str	r2, [r3, #20]
 8012bf0:	e000      	b.n	8012bf4 <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8012bf2:	bf00      	nop
        }
    }

    return anim_list_changed;
 8012bf4:	4b03      	ldr	r3, [pc, #12]	; (8012c04 <anim_ready_handler+0x114>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3738      	adds	r7, #56	; 0x38
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20006de8 	.word	0x20006de8
 8012c04:	20002a7c 	.word	0x20002a7c

08012c08 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b083      	sub	sp, #12
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	3301      	adds	r3, #1
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	b21b      	sxth	r3, r3
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	370c      	adds	r7, #12
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8012c36:	b480      	push	{r7}
 8012c38:	b083      	sub	sp, #12
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	1ad3      	subs	r3, r2, r3
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	3301      	adds	r3, #1
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	b21b      	sxth	r3, r3
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b085      	sub	sp, #20
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	4608      	mov	r0, r1
 8012c6e:	4611      	mov	r1, r2
 8012c70:	461a      	mov	r2, r3
 8012c72:	4603      	mov	r3, r0
 8012c74:	817b      	strh	r3, [r7, #10]
 8012c76:	460b      	mov	r3, r1
 8012c78:	813b      	strh	r3, [r7, #8]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	897a      	ldrh	r2, [r7, #10]
 8012c82:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	893a      	ldrh	r2, [r7, #8]
 8012c88:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	88fa      	ldrh	r2, [r7, #6]
 8012c8e:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	8b3a      	ldrh	r2, [r7, #24]
 8012c94:	80da      	strh	r2, [r3, #6]
}
 8012c96:	bf00      	nop
 8012c98:	3714      	adds	r7, #20
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr

08012ca2 <lv_area_set_width>:
 * Set the width of an area
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
 8012ca2:	b480      	push	{r7}
 8012ca4:	b083      	sub	sp, #12
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	460b      	mov	r3, r1
 8012cac:	807b      	strh	r3, [r7, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	887b      	ldrh	r3, [r7, #2]
 8012cb8:	4413      	add	r3, r2
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	b21a      	sxth	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	809a      	strh	r2, [r3, #4]
}
 8012cc6:	bf00      	nop
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	460b      	mov	r3, r1
 8012cdc:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	887b      	ldrh	r3, [r7, #2]
 8012ce8:	4413      	add	r3, r2
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	3b01      	subs	r3, #1
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	b21a      	sxth	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	80da      	strh	r2, [r3, #6]
}
 8012cf6:	bf00      	nop
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b084      	sub	sp, #16
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	807b      	strh	r3, [r7, #2]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	803b      	strh	r3, [r7, #0]
    lv_coord_t w = lv_area_get_width(area_p);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7ff ff78 	bl	8012c08 <lv_area_get_width>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_area_get_height(area_p);
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7ff ff8a 	bl	8012c36 <lv_area_get_height>
 8012d22:	4603      	mov	r3, r0
 8012d24:	81bb      	strh	r3, [r7, #12]
    area_p->x1   = x;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	887a      	ldrh	r2, [r7, #2]
 8012d2a:	801a      	strh	r2, [r3, #0]
    area_p->y1   = y;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	883a      	ldrh	r2, [r7, #0]
 8012d30:	805a      	strh	r2, [r3, #2]
    lv_area_set_width(area_p, w);
 8012d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d36:	4619      	mov	r1, r3
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f7ff ffb2 	bl	8012ca2 <lv_area_set_width>
    lv_area_set_height(area_p, h);
 8012d3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ff ffc4 	bl	8012cd2 <lv_area_set_height>
}
 8012d4a:	bf00      	nop
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 8012d52:	b480      	push	{r7}
 8012d54:	b085      	sub	sp, #20
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012d60:	461a      	mov	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d68:	1ad3      	subs	r3, r2, r3
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012d74:	4619      	mov	r1, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d7c:	1acb      	subs	r3, r1, r3
 8012d7e:	3301      	adds	r3, #1
 8012d80:	fb03 f302 	mul.w	r3, r3, r2
 8012d84:	60fb      	str	r3, [r7, #12]

    return size;
 8012d86:	68fb      	ldr	r3, [r7, #12]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3714      	adds	r7, #20
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr

08012d94 <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b087      	sub	sp, #28
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012dac:	4293      	cmp	r3, r2
 8012dae:	bfb8      	it	lt
 8012db0:	4613      	movlt	r3, r2
 8012db2:	b21a      	sxth	r2, r3
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	bfb8      	it	lt
 8012dc8:	4613      	movlt	r3, r2
 8012dca:	b21a      	sxth	r2, r3
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	bfa8      	it	ge
 8012de0:	4613      	movge	r3, r2
 8012de2:	b21a      	sxth	r2, r3
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012df4:	4293      	cmp	r3, r2
 8012df6:	bfa8      	it	ge
 8012df8:	4613      	movge	r3, r2
 8012dfa:	b21a      	sxth	r2, r3
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8012e00:	2301      	movs	r3, #1
 8012e02:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	dc07      	bgt.n	8012e24 <lv_area_intersect+0x90>
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	dd01      	ble.n	8012e28 <lv_area_intersect+0x94>
        union_ok = false;
 8012e24:	2300      	movs	r3, #0
 8012e26:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 8012e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	371c      	adds	r7, #28
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012e36:	b480      	push	{r7}
 8012e38:	b085      	sub	sp, #20
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	60f8      	str	r0, [r7, #12]
 8012e3e:	60b9      	str	r1, [r7, #8]
 8012e40:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	bfa8      	it	ge
 8012e52:	4613      	movge	r3, r2
 8012e54:	b21a      	sxth	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e66:	4293      	cmp	r3, r2
 8012e68:	bfa8      	it	ge
 8012e6a:	4613      	movge	r3, r2
 8012e6c:	b21a      	sxth	r2, r3
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	bfb8      	it	lt
 8012e82:	4613      	movlt	r3, r2
 8012e84:	b21a      	sxth	r2, r3
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e96:	4293      	cmp	r3, r2
 8012e98:	bfb8      	it	lt
 8012e9a:	4613      	movlt	r3, r2
 8012e9c:	b21a      	sxth	r2, r3
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	80da      	strh	r2, [r3, #6]
}
 8012ea2:	bf00      	nop
 8012ea4:	3714      	adds	r7, #20
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <lv_area_is_point_on>:
 * @param a_p pointer to an area
 * @param p_p pointer to a point
 * @return false:the point is out of the area
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b085      	sub	sp, #20
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
 8012eb6:	6039      	str	r1, [r7, #0]
    bool is_on = false;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	73fb      	strb	r3, [r7, #15]

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	db19      	blt.n	8012f00 <lv_area_is_point_on+0x52>
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	dc11      	bgt.n	8012f00 <lv_area_is_point_on+0x52>
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	db09      	blt.n	8012f00 <lv_area_is_point_on+0x52>
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	dc01      	bgt.n	8012f00 <lv_area_is_point_on+0x52>
        is_on = true;
 8012efc:	2301      	movs	r3, #1
 8012efe:	73fb      	strb	r3, [r7, #15]
    }

    return is_on;
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3714      	adds	r7, #20
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr

08012f0e <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8012f0e:	b480      	push	{r7}
 8012f10:	b083      	sub	sp, #12
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
 8012f16:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	dc19      	bgt.n	8012f5c <lv_area_is_on+0x4e>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	db11      	blt.n	8012f5c <lv_area_is_on+0x4e>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	dc09      	bgt.n	8012f5c <lv_area_is_on+0x4e>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	db01      	blt.n	8012f5c <lv_area_is_on+0x4e>
        return true;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e000      	b.n	8012f5e <lv_area_is_on+0x50>
    } else {
        return false;
 8012f5c:	2300      	movs	r3, #0
    }
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	370c      	adds	r7, #12
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr

08012f6a <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 8012f6a:	b480      	push	{r7}
 8012f6c:	b085      	sub	sp, #20
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
 8012f72:	6039      	str	r1, [r7, #0]
    bool is_in = false;
 8012f74:	2300      	movs	r3, #0
 8012f76:	73fb      	strb	r3, [r7, #15]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	db19      	blt.n	8012fbc <lv_area_is_in+0x52>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	db11      	blt.n	8012fbc <lv_area_is_in+0x52>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	dc09      	bgt.n	8012fbc <lv_area_is_in+0x52>
       ain_p->y2 <= aholder_p->y2) {
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	dc01      	bgt.n	8012fbc <lv_area_is_in+0x52>
        is_in = true;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	73fb      	strb	r3, [r7, #15]
    }

    return is_in;
 8012fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3714      	adds	r7, #20
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr

08012fca <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8012fca:	b480      	push	{r7}
 8012fcc:	b085      	sub	sp, #20
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	60b9      	str	r1, [r7, #8]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	88fa      	ldrh	r2, [r7, #6]
 8012fdc:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8012fe4:	88fb      	ldrh	r3, [r7, #6]
 8012fe6:	f1c3 0301 	rsb	r3, r3, #1
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	b21a      	sxth	r2, r3
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	801a      	strh	r2, [r3, #0]
}
 8012ff2:	bf00      	nop
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr

08012ffe <lv_circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
 8012ffe:	b480      	push	{r7}
 8013000:	b083      	sub	sp, #12
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013012:	429a      	cmp	r2, r3
 8013014:	bfd4      	ite	le
 8013016:	2301      	movle	r3, #1
 8013018:	2300      	movgt	r3, #0
 801301a:	b2db      	uxtb	r3, r3
}
 801301c:	4618      	mov	r0, r3
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <lv_circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
    c->y++;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013038:	b29b      	uxth	r3, r3
 801303a:	3301      	adds	r3, #1
 801303c:	b29b      	uxth	r3, r3
 801303e:	b21a      	sxth	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	805a      	strh	r2, [r3, #2]

    if(*tmp <= 0) {
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	f9b3 3000 	ldrsh.w	r3, [r3]
 801304a:	2b00      	cmp	r3, #0
 801304c:	dc11      	bgt.n	8013072 <lv_circ_next+0x4a>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013054:	b29a      	uxth	r2, r3
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801305c:	b29b      	uxth	r3, r3
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	b29b      	uxth	r3, r3
 8013062:	4413      	add	r3, r2
 8013064:	b29b      	uxth	r3, r3
 8013066:	3301      	adds	r3, #1
 8013068:	b29b      	uxth	r3, r3
 801306a:	b21a      	sxth	r2, r3
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	801a      	strh	r2, [r3, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
    }
}
 8013070:	e01e      	b.n	80130b0 <lv_circ_next+0x88>
        c->x--;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013078:	b29b      	uxth	r3, r3
 801307a:	3b01      	subs	r3, #1
 801307c:	b29b      	uxth	r3, r3
 801307e:	b21a      	sxth	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	801a      	strh	r2, [r3, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801308a:	b29a      	uxth	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013092:	4619      	mov	r1, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f9b3 3000 	ldrsh.w	r3, [r3]
 801309a:	1acb      	subs	r3, r1, r3
 801309c:	b29b      	uxth	r3, r3
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	4413      	add	r3, r2
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	3301      	adds	r3, #1
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	b21a      	sxth	r2, r3
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	801a      	strh	r2, [r3, #0]
}
 80130b0:	bf00      	nop
 80130b2:	370c      	adds	r7, #12
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr

080130bc <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 80130c0:	2148      	movs	r1, #72	; 0x48
 80130c2:	4802      	ldr	r0, [pc, #8]	; (80130cc <lv_fs_init+0x10>)
 80130c4:	f000 f97e 	bl	80133c4 <lv_ll_init>
}
 80130c8:	bf00      	nop
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	20006dd4 	.word	0x20006dd4

080130d0 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 80130d0:	b590      	push	{r4, r7, lr}
 80130d2:	b089      	sub	sp, #36	; 0x24
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	4613      	mov	r3, r2
 80130dc:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	2200      	movs	r2, #0
 80130e2:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2200      	movs	r2, #0
 80130e8:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d101      	bne.n	80130f4 <lv_fs_open+0x24>
 80130f0:	230b      	movs	r3, #11
 80130f2:	e069      	b.n	80131c8 <lv_fs_open+0xf8>

    char letter = path[0];
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 80130fa:	7ffb      	ldrb	r3, [r7, #31]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 f941 	bl	8013384 <lv_fs_get_drv>
 8013102:	4602      	mov	r2, r0
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d104      	bne.n	801311a <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 8013116:	2303      	movs	r3, #3
 8013118:	e056      	b.n	80131c8 <lv_fs_open+0xf8>
    }

    if(file_p->drv->ready_cb != NULL) {
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	689b      	ldr	r3, [r3, #8]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d014      	beq.n	801314e <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	68fa      	ldr	r2, [r7, #12]
 801312c:	6852      	ldr	r2, [r2, #4]
 801312e:	4610      	mov	r0, r2
 8013130:	4798      	blx	r3
 8013132:	4603      	mov	r3, r0
 8013134:	f083 0301 	eor.w	r3, r3, #1
 8013138:	b2db      	uxtb	r3, r3
 801313a:	2b00      	cmp	r3, #0
 801313c:	d007      	beq.n	801314e <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	2200      	movs	r2, #0
 8013148:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 801314a:	2301      	movs	r3, #1
 801314c:	e03c      	b.n	80131c8 <lv_fs_open+0xf8>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	885b      	ldrh	r3, [r3, #2]
 8013154:	4618      	mov	r0, r3
 8013156:	f000 fc37 	bl	80139c8 <lv_mem_alloc>
 801315a:	4602      	mov	r2, r0
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	601a      	str	r2, [r3, #0]
    lv_mem_assert(file_p->file_d);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d100      	bne.n	801316a <lv_fs_open+0x9a>
 8013168:	e7fe      	b.n	8013168 <lv_fs_open+0x98>
    if(file_p->file_d == NULL) {
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d104      	bne.n	801317c <lv_fs_open+0xac>
        file_p->drv = NULL;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2200      	movs	r2, #0
 8013176:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 8013178:	230a      	movs	r3, #10
 801317a:	e025      	b.n	80131c8 <lv_fs_open+0xf8>
    }

    if(file_p->drv->open_cb == NULL) {
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d101      	bne.n	801318a <lv_fs_open+0xba>
        return LV_FS_RES_NOT_IMP;
 8013186:	2309      	movs	r3, #9
 8013188:	e01e      	b.n	80131c8 <lv_fs_open+0xf8>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801318a:	68b8      	ldr	r0, [r7, #8]
 801318c:	f000 f8d8 	bl	8013340 <lv_fs_get_real_path>
 8013190:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	68dc      	ldr	r4, [r3, #12]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	6858      	ldr	r0, [r3, #4]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6819      	ldr	r1, [r3, #0]
 80131a0:	79fb      	ldrb	r3, [r7, #7]
 80131a2:	69ba      	ldr	r2, [r7, #24]
 80131a4:	47a0      	blx	r4
 80131a6:	4603      	mov	r3, r0
 80131a8:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 80131aa:	7dfb      	ldrb	r3, [r7, #23]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00a      	beq.n	80131c6 <lv_fs_open+0xf6>
        lv_mem_free(file_p->file_d);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 fc47 	bl	8013a48 <lv_mem_free>
        file_p->file_d = NULL;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2200      	movs	r2, #0
 80131be:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	605a      	str	r2, [r3, #4]
    }

    return res;
 80131c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3724      	adds	r7, #36	; 0x24
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd90      	pop	{r4, r7, pc}

080131d0 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d101      	bne.n	80131e4 <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 80131e0:	230b      	movs	r3, #11
 80131e2:	e020      	b.n	8013226 <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	691b      	ldr	r3, [r3, #16]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 80131ee:	2309      	movs	r3, #9
 80131f0:	e019      	b.n	8013226 <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	691b      	ldr	r3, [r3, #16]
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	6850      	ldr	r0, [r2, #4]
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	4611      	mov	r1, r2
 8013202:	4798      	blx	r3
 8013204:	4603      	mov	r3, r0
 8013206:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4618      	mov	r0, r3
 801320e:	f000 fc1b 	bl	8013a48 <lv_mem_free>
    file_p->file_d = NULL;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2200      	movs	r2, #0
 8013222:	601a      	str	r2, [r3, #0]

    return res;
 8013224:	7bfb      	ldrb	r3, [r7, #15]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801322e:	b590      	push	{r4, r7, lr}
 8013230:	b089      	sub	sp, #36	; 0x24
 8013232:	af02      	add	r7, sp, #8
 8013234:	60f8      	str	r0, [r7, #12]
 8013236:	60b9      	str	r1, [r7, #8]
 8013238:	607a      	str	r2, [r7, #4]
 801323a:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d002      	beq.n	8013248 <lv_fs_read+0x1a>
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2200      	movs	r2, #0
 8013246:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d101      	bne.n	8013254 <lv_fs_read+0x26>
 8013250:	230b      	movs	r3, #11
 8013252:	e01e      	b.n	8013292 <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	699b      	ldr	r3, [r3, #24]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d101      	bne.n	8013262 <lv_fs_read+0x34>
 801325e:	2309      	movs	r3, #9
 8013260:	e017      	b.n	8013292 <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 8013262:	2300      	movs	r3, #0
 8013264:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	699c      	ldr	r4, [r3, #24]
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6858      	ldr	r0, [r3, #4]
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6819      	ldr	r1, [r3, #0]
 8013274:	f107 0310 	add.w	r3, r7, #16
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	47a0      	blx	r4
 8013280:	4603      	mov	r3, r0
 8013282:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d002      	beq.n	8013290 <lv_fs_read+0x62>
 801328a:	693a      	ldr	r2, [r7, #16]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	601a      	str	r2, [r3, #0]

    return res;
 8013290:	7dfb      	ldrb	r3, [r7, #23]
}
 8013292:	4618      	mov	r0, r3
 8013294:	371c      	adds	r7, #28
 8013296:	46bd      	mov	sp, r7
 8013298:	bd90      	pop	{r4, r7, pc}

0801329a <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b084      	sub	sp, #16
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
 80132a2:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d101      	bne.n	80132b0 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 80132ac:	230b      	movs	r3, #11
 80132ae:	e012      	b.n	80132d6 <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	6a1b      	ldr	r3, [r3, #32]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 80132ba:	2309      	movs	r3, #9
 80132bc:	e00b      	b.n	80132d6 <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	6a1b      	ldr	r3, [r3, #32]
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	6850      	ldr	r0, [r2, #4]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	6811      	ldr	r1, [r2, #0]
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	4798      	blx	r3
 80132d0:	4603      	mov	r3, r0
 80132d2:	73fb      	strb	r3, [r7, #15]

    return res;
 80132d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3710      	adds	r7, #16
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
	...

080132e0 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = strlen(fn); i > 0; i--) {
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f7ec ff7b 	bl	80001e4 <strlen>
 80132ee:	4603      	mov	r3, r0
 80132f0:	81fb      	strh	r3, [r7, #14]
 80132f2:	e01b      	b.n	801332c <lv_fs_get_ext+0x4c>
        if(fn[i] == '.') {
 80132f4:	89fb      	ldrh	r3, [r7, #14]
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	4413      	add	r3, r2
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	2b2e      	cmp	r3, #46	; 0x2e
 80132fe:	d104      	bne.n	801330a <lv_fs_get_ext+0x2a>
            return &fn[i + 1];
 8013300:	89fb      	ldrh	r3, [r7, #14]
 8013302:	3301      	adds	r3, #1
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	4413      	add	r3, r2
 8013308:	e014      	b.n	8013334 <lv_fs_get_ext+0x54>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 801330a:	89fb      	ldrh	r3, [r7, #14]
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	4413      	add	r3, r2
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b2f      	cmp	r3, #47	; 0x2f
 8013314:	d005      	beq.n	8013322 <lv_fs_get_ext+0x42>
 8013316:	89fb      	ldrh	r3, [r7, #14]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	4413      	add	r3, r2
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2b5c      	cmp	r3, #92	; 0x5c
 8013320:	d101      	bne.n	8013326 <lv_fs_get_ext+0x46>
            return ""; /*No extension if a '\' or '/' found*/
 8013322:	4b06      	ldr	r3, [pc, #24]	; (801333c <lv_fs_get_ext+0x5c>)
 8013324:	e006      	b.n	8013334 <lv_fs_get_ext+0x54>
    for(i = strlen(fn); i > 0; i--) {
 8013326:	89fb      	ldrh	r3, [r7, #14]
 8013328:	3b01      	subs	r3, #1
 801332a:	81fb      	strh	r3, [r7, #14]
 801332c:	89fb      	ldrh	r3, [r7, #14]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d1e0      	bne.n	80132f4 <lv_fs_get_ext+0x14>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 8013332:	4b02      	ldr	r3, [pc, #8]	; (801333c <lv_fs_get_ext+0x5c>)
}
 8013334:	4618      	mov	r0, r3
 8013336:	3710      	adds	r7, #16
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	08029cdc 	.word	0x08029cdc

08013340 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	3301      	adds	r3, #1
 801334c:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 801334e:	e00e      	b.n	801336e <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	2b3a      	cmp	r3, #58	; 0x3a
 8013356:	d007      	beq.n	8013368 <lv_fs_get_real_path+0x28>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	2b5c      	cmp	r3, #92	; 0x5c
 801335e:	d003      	beq.n	8013368 <lv_fs_get_real_path+0x28>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	2b2f      	cmp	r3, #47	; 0x2f
 8013366:	d106      	bne.n	8013376 <lv_fs_get_real_path+0x36>
            path++;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	3301      	adds	r3, #1
 801336c:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d1ec      	bne.n	8013350 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 8013376:	687b      	ldr	r3, [r7, #4]
}
 8013378:	4618      	mov	r0, r3
 801337a:	370c      	adds	r7, #12
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr

08013384 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	4603      	mov	r3, r0
 801338c:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 801338e:	480c      	ldr	r0, [pc, #48]	; (80133c0 <lv_fs_get_drv+0x3c>)
 8013390:	f000 f99a 	bl	80136c8 <lv_ll_get_head>
 8013394:	60f8      	str	r0, [r7, #12]
 8013396:	e00b      	b.n	80133b0 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	79fa      	ldrb	r2, [r7, #7]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d101      	bne.n	80133a6 <lv_fs_get_drv+0x22>
            return drv;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	e008      	b.n	80133b8 <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 80133a6:	68f9      	ldr	r1, [r7, #12]
 80133a8:	4805      	ldr	r0, [pc, #20]	; (80133c0 <lv_fs_get_drv+0x3c>)
 80133aa:	f000 f9b3 	bl	8013714 <lv_ll_get_next>
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1f0      	bne.n	8013398 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	20006dd4 	.word	0x20006dd4

080133c4 <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2200      	movs	r2, #0
 80133d2:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	f003 0303 	and.w	r3, r3, #3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d006      	beq.n	80133f2 <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	f023 0303 	bic.w	r3, r3, #3
 80133ea:	603b      	str	r3, [r7, #0]
        node_size += 4;
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	3304      	adds	r3, #4
 80133f0:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	601a      	str	r2, [r3, #0]
}
 80133f8:	bf00      	nop
 80133fa:	370c      	adds	r7, #12
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b084      	sub	sp, #16
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	3308      	adds	r3, #8
 8013412:	4618      	mov	r0, r3
 8013414:	f000 fad8 	bl	80139c8 <lv_mem_alloc>
 8013418:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d020      	beq.n	8013462 <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8013420:	2200      	movs	r2, #0
 8013422:	68f9      	ldr	r1, [r7, #12]
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f000 fa08 	bl	801383a <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	461a      	mov	r2, r3
 8013430:	68f9      	ldr	r1, [r7, #12]
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 fa27 	bl	8013886 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d006      	beq.n	801344e <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	4619      	mov	r1, r3
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 f9f6 	bl	801383a <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	689b      	ldr	r3, [r3, #8]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8013462:	68fb      	ldr	r3, [r7, #12]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d002      	beq.n	8013482 <lv_ll_ins_prev+0x16>
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d101      	bne.n	8013486 <lv_ll_ins_prev+0x1a>
 8013482:	2300      	movs	r3, #0
 8013484:	e035      	b.n	80134f2 <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f000 f91e 	bl	80136c8 <lv_ll_get_head>
 801348c:	4602      	mov	r2, r0
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	4293      	cmp	r3, r2
 8013492:	d108      	bne.n	80134a6 <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7ff ffb5 	bl	8013404 <lv_ll_ins_head>
 801349a:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d126      	bne.n	80134f0 <lv_ll_ins_prev+0x84>
 80134a2:	2300      	movs	r3, #0
 80134a4:	e025      	b.n	80134f2 <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	3308      	adds	r3, #8
 80134ac:	4618      	mov	r0, r3
 80134ae:	f000 fa8b 	bl	80139c8 <lv_mem_alloc>
 80134b2:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d101      	bne.n	80134be <lv_ll_ins_prev+0x52>
 80134ba:	2300      	movs	r3, #0
 80134bc:	e019      	b.n	80134f2 <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 f941 	bl	8013748 <lv_ll_get_prev>
 80134c6:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 80134c8:	68fa      	ldr	r2, [r7, #12]
 80134ca:	68b9      	ldr	r1, [r7, #8]
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f000 f9da 	bl	8013886 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	68f9      	ldr	r1, [r7, #12]
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f000 f9af 	bl	801383a <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	6839      	ldr	r1, [r7, #0]
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f000 f9aa 	bl	801383a <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 80134e6:	683a      	ldr	r2, [r7, #0]
 80134e8:	68f9      	ldr	r1, [r7, #12]
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f000 f9cb 	bl	8013886 <node_set_next>
    }

    return n_new;
 80134f0:	68fb      	ldr	r3, [r7, #12]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b084      	sub	sp, #16
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	3308      	adds	r3, #8
 8013508:	4618      	mov	r0, r3
 801350a:	f000 fa5d 	bl	80139c8 <lv_mem_alloc>
 801350e:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <lv_ll_ins_tail+0x20>
 8013516:	2300      	movs	r3, #0
 8013518:	e024      	b.n	8013564 <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d020      	beq.n	8013562 <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8013520:	2200      	movs	r2, #0
 8013522:	68f9      	ldr	r1, [r7, #12]
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f000 f9ae 	bl	8013886 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	461a      	mov	r2, r3
 8013530:	68f9      	ldr	r1, [r7, #12]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 f981 	bl	801383a <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d006      	beq.n	801354e <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	4619      	mov	r1, r3
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 f99c 	bl	8013886 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d102      	bne.n	8013562 <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 8013562:	68fb      	ldr	r3, [r7, #12]
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f000 f8a6 	bl	80136c8 <lv_ll_get_head>
 801357c:	4602      	mov	r2, r0
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	4293      	cmp	r3, r2
 8013582:	d116      	bne.n	80135b2 <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8013584:	6839      	ldr	r1, [r7, #0]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f000 f8c4 	bl	8013714 <lv_ll_get_next>
 801358c:	4602      	mov	r2, r0
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d103      	bne.n	80135a2 <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 80135a0:	e039      	b.n	8013616 <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	4619      	mov	r1, r3
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 f945 	bl	801383a <node_set_prev>
}
 80135b0:	e031      	b.n	8013616 <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 f89b 	bl	80136ee <lv_ll_get_tail>
 80135b8:	4602      	mov	r2, r0
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	4293      	cmp	r3, r2
 80135be:	d116      	bne.n	80135ee <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80135c0:	6839      	ldr	r1, [r7, #0]
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 f8c0 	bl	8013748 <lv_ll_get_prev>
 80135c8:	4602      	mov	r2, r0
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d103      	bne.n	80135de <lv_ll_rem+0x72>
            ll_p->head = NULL;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2200      	movs	r2, #0
 80135da:	605a      	str	r2, [r3, #4]
}
 80135dc:	e01b      	b.n	8013616 <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	2200      	movs	r2, #0
 80135e4:	4619      	mov	r1, r3
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f000 f94d 	bl	8013886 <node_set_next>
}
 80135ec:	e013      	b.n	8013616 <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 80135ee:	6839      	ldr	r1, [r7, #0]
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f000 f8a9 	bl	8013748 <lv_ll_get_prev>
 80135f6:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80135f8:	6839      	ldr	r1, [r7, #0]
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f000 f88a 	bl	8013714 <lv_ll_get_next>
 8013600:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 8013602:	68ba      	ldr	r2, [r7, #8]
 8013604:	68f9      	ldr	r1, [r7, #12]
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 f93d 	bl	8013886 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	68b9      	ldr	r1, [r7, #8]
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f000 f912 	bl	801383a <node_set_prev>
}
 8013616:	bf00      	nop
 8013618:	3710      	adds	r7, #16
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}

0801361e <lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 801361e:	b580      	push	{r7, lr}
 8013620:	b084      	sub	sp, #16
 8013622:	af00      	add	r7, sp, #0
 8013624:	60f8      	str	r0, [r7, #12]
 8013626:	60b9      	str	r1, [r7, #8]
 8013628:	607a      	str	r2, [r7, #4]
 801362a:	70fb      	strb	r3, [r7, #3]
    lv_ll_rem(ll_ori_p, node);
 801362c:	6879      	ldr	r1, [r7, #4]
 801362e:	68f8      	ldr	r0, [r7, #12]
 8013630:	f7ff ff9c 	bl	801356c <lv_ll_rem>

    if(head) {
 8013634:	78fb      	ldrb	r3, [r7, #3]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d021      	beq.n	801367e <lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 801363a:	2200      	movs	r2, #0
 801363c:	6879      	ldr	r1, [r7, #4]
 801363e:	68b8      	ldr	r0, [r7, #8]
 8013640:	f000 f8fb 	bl	801383a <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	461a      	mov	r2, r3
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	68b8      	ldr	r0, [r7, #8]
 801364e:	f000 f91a 	bl	8013886 <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d006      	beq.n	8013668 <lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	4619      	mov	r1, r3
 8013662:	68b8      	ldr	r0, [r7, #8]
 8013664:	f000 f8e9 	bl	801383a <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d124      	bne.n	80136c0 <lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 801367c:	e020      	b.n	80136c0 <lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	461a      	mov	r2, r3
 8013684:	6879      	ldr	r1, [r7, #4]
 8013686:	68b8      	ldr	r0, [r7, #8]
 8013688:	f000 f8d7 	bl	801383a <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 801368c:	2200      	movs	r2, #0
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	68b8      	ldr	r0, [r7, #8]
 8013692:	f000 f8f8 	bl	8013886 <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d006      	beq.n	80136ac <lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4619      	mov	r1, r3
 80136a6:	68b8      	ldr	r0, [r7, #8]
 80136a8:	f000 f8ed 	bl	8013886 <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d102      	bne.n	80136c0 <lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	687a      	ldr	r2, [r7, #4]
 80136be:	605a      	str	r2, [r3, #4]
}
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 80136d0:	2300      	movs	r3, #0
 80136d2:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d002      	beq.n	80136e0 <lv_ll_get_head+0x18>
        head = ll_p->head;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	60fb      	str	r3, [r7, #12]
    }

    return head;
 80136e0:	68fb      	ldr	r3, [r7, #12]
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3714      	adds	r7, #20
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr

080136ee <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 80136ee:	b480      	push	{r7}
 80136f0:	b085      	sub	sp, #20
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 80136f6:	2300      	movs	r3, #0
 80136f8:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d002      	beq.n	8013706 <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 8013706:	68fb      	ldr	r3, [r7, #12]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3714      	adds	r7, #20
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr

08013714 <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 801371e:	2300      	movs	r3, #0
 8013720:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d008      	beq.n	801373a <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	3304      	adds	r3, #4
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	4413      	add	r3, r2
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	60bb      	str	r3, [r7, #8]
    }

    return next;
 801373a:	68bb      	ldr	r3, [r7, #8]
}
 801373c:	4618      	mov	r0, r3
 801373e:	3714      	adds	r7, #20
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr

08013748 <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8013748:	b480      	push	{r7}
 801374a:	b085      	sub	sp, #20
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 8013752:	2300      	movs	r3, #0
 8013754:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d007      	beq.n	801376c <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	4413      	add	r3, r2
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 801376c:	68bb      	ldr	r3, [r7, #8]
}
 801376e:	4618      	mov	r0, r3
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr

0801377a <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 801377a:	b580      	push	{r7, lr}
 801377c:	b086      	sub	sp, #24
 801377e:	af00      	add	r7, sp, #0
 8013780:	60f8      	str	r0, [r7, #12]
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 8013786:	68ba      	ldr	r2, [r7, #8]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	429a      	cmp	r2, r3
 801378c:	d035      	beq.n	80137fa <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d005      	beq.n	80137a0 <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8013794:	6879      	ldr	r1, [r7, #4]
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f7ff ffd6 	bl	8013748 <lv_ll_get_prev>
 801379c:	6178      	str	r0, [r7, #20]
 801379e:	e003      	b.n	80137a8 <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f7ff ffa4 	bl	80136ee <lv_ll_get_tail>
 80137a6:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 80137a8:	68ba      	ldr	r2, [r7, #8]
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d026      	beq.n	80137fe <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 80137b0:	68b9      	ldr	r1, [r7, #8]
 80137b2:	68f8      	ldr	r0, [r7, #12]
 80137b4:	f7ff feda 	bl	801356c <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	6979      	ldr	r1, [r7, #20]
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f000 f862 	bl	8013886 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 80137c2:	697a      	ldr	r2, [r7, #20]
 80137c4:	68b9      	ldr	r1, [r7, #8]
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f000 f837 	bl	801383a <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 80137cc:	68ba      	ldr	r2, [r7, #8]
 80137ce:	6879      	ldr	r1, [r7, #4]
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f000 f832 	bl	801383a <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	68b9      	ldr	r1, [r7, #8]
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f000 f853 	bl	8013886 <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d102      	bne.n	80137ec <lv_ll_move_before+0x72>
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	68ba      	ldr	r2, [r7, #8]
 80137ea:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <lv_ll_move_before+0x86>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	68ba      	ldr	r2, [r7, #8]
 80137f6:	605a      	str	r2, [r3, #4]
 80137f8:	e002      	b.n	8013800 <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 80137fa:	bf00      	nop
 80137fc:	e000      	b.n	8013800 <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 80137fe:	bf00      	nop
}
 8013800:	3718      	adds	r7, #24
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}

08013806 <lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool lv_ll_is_empty(lv_ll_t * ll_p)
{
 8013806:	b480      	push	{r7}
 8013808:	b083      	sub	sp, #12
 801380a:	af00      	add	r7, sp, #0
 801380c:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d101      	bne.n	8013818 <lv_ll_is_empty+0x12>
 8013814:	2301      	movs	r3, #1
 8013816:	e00a      	b.n	801382e <lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d105      	bne.n	801382c <lv_ll_is_empty+0x26>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <lv_ll_is_empty+0x26>
 8013828:	2301      	movs	r3, #1
 801382a:	e000      	b.n	801382e <lv_ll_is_empty+0x28>

    return false;
 801382c:	2300      	movs	r3, #0
}
 801382e:	4618      	mov	r0, r3
 8013830:	370c      	adds	r7, #12
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr

0801383a <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801383a:	b580      	push	{r7, lr}
 801383c:	b086      	sub	sp, #24
 801383e:	af00      	add	r7, sp, #0
 8013840:	60f8      	str	r0, [r7, #12]
 8013842:	60b9      	str	r1, [r7, #8]
 8013844:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d018      	beq.n	801387e <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 801384c:	2304      	movs	r3, #4
 801384e:	617b      	str	r3, [r7, #20]
    if(prev)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d009      	beq.n	801386a <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	68ba      	ldr	r2, [r7, #8]
 801385c:	4413      	add	r3, r2
 801385e:	1d39      	adds	r1, r7, #4
 8013860:	697a      	ldr	r2, [r7, #20]
 8013862:	4618      	mov	r0, r3
 8013864:	f013 fcde 	bl	8027224 <memcpy>
 8013868:	e00a      	b.n	8013880 <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	4413      	add	r3, r2
 8013872:	697a      	ldr	r2, [r7, #20]
 8013874:	2100      	movs	r1, #0
 8013876:	4618      	mov	r0, r3
 8013878:	f013 fcdf 	bl	802723a <memset>
 801387c:	e000      	b.n	8013880 <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801387e:	bf00      	nop
}
 8013880:	3718      	adds	r7, #24
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8013886:	b580      	push	{r7, lr}
 8013888:	b086      	sub	sp, #24
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d01a      	beq.n	80138ce <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 8013898:	2304      	movs	r3, #4
 801389a:	617b      	str	r3, [r7, #20]
    if(next)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00a      	beq.n	80138b8 <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	3304      	adds	r3, #4
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	4413      	add	r3, r2
 80138ac:	1d39      	adds	r1, r7, #4
 80138ae:	697a      	ldr	r2, [r7, #20]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f013 fcb7 	bl	8027224 <memcpy>
 80138b6:	e00b      	b.n	80138d0 <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	3304      	adds	r3, #4
 80138be:	68ba      	ldr	r2, [r7, #8]
 80138c0:	4413      	add	r3, r2
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	2100      	movs	r1, #0
 80138c6:	4618      	mov	r0, r3
 80138c8:	f013 fcb7 	bl	802723a <memset>
 80138cc:	e000      	b.n	80138d0 <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80138ce:	bf00      	nop
}
 80138d0:	3718      	adds	r7, #24
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
	...

080138d8 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t lv_trigo_sin(int16_t angle)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
 80138de:	4603      	mov	r3, r0
 80138e0:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 80138e2:	2300      	movs	r3, #0
 80138e4:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 80138e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80138ea:	4a31      	ldr	r2, [pc, #196]	; (80139b0 <lv_trigo_sin+0xd8>)
 80138ec:	fb82 1203 	smull	r1, r2, r2, r3
 80138f0:	441a      	add	r2, r3
 80138f2:	1211      	asrs	r1, r2, #8
 80138f4:	17da      	asrs	r2, r3, #31
 80138f6:	1a8a      	subs	r2, r1, r2
 80138f8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80138fc:	fb01 f202 	mul.w	r2, r1, r2
 8013900:	1a9b      	subs	r3, r3, r2
 8013902:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8013904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013908:	2b00      	cmp	r3, #0
 801390a:	da04      	bge.n	8013916 <lv_trigo_sin+0x3e>
 801390c:	88fb      	ldrh	r3, [r7, #6]
 801390e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013912:	b29b      	uxth	r3, r3
 8013914:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8013916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801391a:	2b59      	cmp	r3, #89	; 0x59
 801391c:	dc06      	bgt.n	801392c <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 801391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013922:	4a24      	ldr	r2, [pc, #144]	; (80139b4 <lv_trigo_sin+0xdc>)
 8013924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013928:	81fb      	strh	r3, [r7, #14]
 801392a:	e038      	b.n	801399e <lv_trigo_sin+0xc6>
    } else if(angle >= 90 && angle < 180) {
 801392c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013930:	2b59      	cmp	r3, #89	; 0x59
 8013932:	dd0f      	ble.n	8013954 <lv_trigo_sin+0x7c>
 8013934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013938:	2bb3      	cmp	r3, #179	; 0xb3
 801393a:	dc0b      	bgt.n	8013954 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 801393c:	88fb      	ldrh	r3, [r7, #6]
 801393e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8013942:	b29b      	uxth	r3, r3
 8013944:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8013946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801394a:	4a1a      	ldr	r2, [pc, #104]	; (80139b4 <lv_trigo_sin+0xdc>)
 801394c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013950:	81fb      	strh	r3, [r7, #14]
 8013952:	e024      	b.n	801399e <lv_trigo_sin+0xc6>
    } else if(angle >= 180 && angle < 270) {
 8013954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013958:	2bb3      	cmp	r3, #179	; 0xb3
 801395a:	dd12      	ble.n	8013982 <lv_trigo_sin+0xaa>
 801395c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013960:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013964:	da0d      	bge.n	8013982 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8013966:	88fb      	ldrh	r3, [r7, #6]
 8013968:	3bb4      	subs	r3, #180	; 0xb4
 801396a:	b29b      	uxth	r3, r3
 801396c:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801396e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013972:	4a10      	ldr	r2, [pc, #64]	; (80139b4 <lv_trigo_sin+0xdc>)
 8013974:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013978:	b29b      	uxth	r3, r3
 801397a:	425b      	negs	r3, r3
 801397c:	b29b      	uxth	r3, r3
 801397e:	81fb      	strh	r3, [r7, #14]
 8013980:	e00d      	b.n	801399e <lv_trigo_sin+0xc6>
    } else { /*angle >=270*/
        angle = 360 - angle;
 8013982:	88fb      	ldrh	r3, [r7, #6]
 8013984:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8013988:	b29b      	uxth	r3, r3
 801398a:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801398c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013990:	4a08      	ldr	r2, [pc, #32]	; (80139b4 <lv_trigo_sin+0xdc>)
 8013992:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013996:	b29b      	uxth	r3, r3
 8013998:	425b      	negs	r3, r3
 801399a:	b29b      	uxth	r3, r3
 801399c:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801399e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3714      	adds	r7, #20
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	b60b60b7 	.word	0xb60b60b7
 80139b4:	200026e0 	.word	0x200026e0

080139b8 <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 80139b8:	b480      	push	{r7}
 80139ba:	af00      	add	r7, sp, #0
    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
    full->header.s.used = 0;
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
#endif
}
 80139bc:	bf00      	nop
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
	...

080139c8 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d101      	bne.n	80139da <lv_mem_alloc+0x12>
        return &zero_mem;
 80139d6:	4b1b      	ldr	r3, [pc, #108]	; (8013a44 <lv_mem_alloc+0x7c>)
 80139d8:	e030      	b.n	8013a3c <lv_mem_alloc+0x74>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f003 0303 	and.w	r3, r3, #3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d006      	beq.n	80139f2 <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f023 0303 	bic.w	r3, r3, #3
 80139ea:	607b      	str	r3, [r7, #4]
        size += 4;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	3304      	adds	r3, #4
 80139f0:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 80139f2:	2300      	movs	r3, #0
 80139f4:	60fb      	str	r3, [r7, #12]
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	3304      	adds	r3, #4
 80139fa:	4618      	mov	r0, r3
 80139fc:	f013 fc02 	bl	8027204 <malloc>
 8013a00:	4603      	mov	r3, r0
 8013a02:	60fb      	str	r3, [r7, #12]
    if(alloc != NULL) {
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00f      	beq.n	8013a2a <lv_mem_alloc+0x62>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013a10:	68fa      	ldr	r2, [r7, #12]
 8013a12:	6813      	ldr	r3, [r2, #0]
 8013a14:	f361 035f 	bfi	r3, r1, #1, #31
 8013a18:	6013      	str	r3, [r2, #0]
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	7813      	ldrb	r3, [r2, #0]
 8013a1e:	f043 0301 	orr.w	r3, r3, #1
 8013a22:	7013      	strb	r3, [r2, #0]

        alloc = &((lv_mem_ent_t *)alloc)->first_data;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	3304      	adds	r3, #4
 8013a28:	60fb      	str	r3, [r7, #12]
    }
#endif                /* LV_ENABLE_GC */
#endif                /* LV_MEM_CUSTOM */

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) memset(alloc, 0xaa, size);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d004      	beq.n	8013a3a <lv_mem_alloc+0x72>
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	21aa      	movs	r1, #170	; 0xaa
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f013 fc00 	bl	802723a <memset>
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	20002a80 	.word	0x20002a80

08013a48 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4a10      	ldr	r2, [pc, #64]	; (8013a94 <lv_mem_free+0x4c>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d017      	beq.n	8013a88 <lv_mem_free+0x40>
    if(data == NULL) return;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d016      	beq.n	8013a8c <lv_mem_free+0x44>

#if LV_MEM_ADD_JUNK
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 f858 	bl	8013b14 <lv_mem_get_size>
 8013a64:	4603      	mov	r3, r0
 8013a66:	461a      	mov	r2, r3
 8013a68:	21bb      	movs	r1, #187	; 0xbb
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f013 fbe5 	bl	802723a <memset>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3b04      	subs	r3, #4
 8013a74:	60fb      	str	r3, [r7, #12]
    e->header.s.used = 0;
 8013a76:	68fa      	ldr	r2, [r7, #12]
 8013a78:	7813      	ldrb	r3, [r2, #0]
 8013a7a:	f36f 0300 	bfc	r3, #0, #1
 8013a7e:	7013      	strb	r3, [r2, #0]
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f013 fbc7 	bl	8027214 <free>
 8013a86:	e002      	b.n	8013a8e <lv_mem_free+0x46>
    if(data == &zero_mem) return;
 8013a88:	bf00      	nop
 8013a8a:	e000      	b.n	8013a8e <lv_mem_free+0x46>
    if(data == NULL) return;
 8013a8c:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 8013a8e:	3710      	adds	r7, #16
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	20002a80 	.word	0x20002a80

08013a98 <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, uint32_t new_size)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00b      	beq.n	8013ac0 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	3b04      	subs	r3, #4
 8013aac:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	f003 0301 	and.w	r3, r3, #1
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d101      	bne.n	8013ac0 <lv_mem_realloc+0x28>
            data_p = NULL;
 8013abc:	2300      	movs	r3, #0
 8013abe:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f000 f827 	bl	8013b14 <lv_mem_get_size>
 8013ac6:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d101      	bne.n	8013ad4 <lv_mem_realloc+0x3c>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	e01a      	b.n	8013b0a <lv_mem_realloc+0x72>
        return &e->first_data;
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 8013ad4:	6838      	ldr	r0, [r7, #0]
 8013ad6:	f7ff ff77 	bl	80139c8 <lv_mem_alloc>
 8013ada:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d012      	beq.n	8013b08 <lv_mem_realloc+0x70>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00f      	beq.n	8013b08 <lv_mem_realloc+0x70>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00c      	beq.n	8013b08 <lv_mem_realloc+0x70>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8013aee:	693a      	ldr	r2, [r7, #16]
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	4293      	cmp	r3, r2
 8013af4:	bf28      	it	cs
 8013af6:	4613      	movcs	r3, r2
 8013af8:	461a      	mov	r2, r3
 8013afa:	6879      	ldr	r1, [r7, #4]
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f013 fb91 	bl	8027224 <memcpy>
            lv_mem_free(data_p);
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7ff ffa0 	bl	8013a48 <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 8013b08:	68fb      	ldr	r3, [r7, #12]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3718      	adds	r7, #24
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <lv_mem_get_size+0x12>
 8013b22:	2300      	movs	r3, #0
 8013b24:	e00c      	b.n	8013b40 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4a08      	ldr	r2, [pc, #32]	; (8013b4c <lv_mem_get_size+0x38>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d101      	bne.n	8013b32 <lv_mem_get_size+0x1e>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	e006      	b.n	8013b40 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	3b04      	subs	r3, #4
 8013b36:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3714      	adds	r7, #20
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	20002a80 	.word	0x20002a80

08013b50 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8013b54:	2114      	movs	r1, #20
 8013b56:	4804      	ldr	r0, [pc, #16]	; (8013b68 <lv_task_core_init+0x18>)
 8013b58:	f7ff fc34 	bl	80133c4 <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 8013b5c:	2001      	movs	r0, #1
 8013b5e:	f000 fa23 	bl	8013fa8 <lv_task_enable>
}
 8013b62:	bf00      	nop
 8013b64:	bd80      	pop	{r7, pc}
 8013b66:	bf00      	nop
 8013b68:	20006da0 	.word	0x20006da0

08013b6c <lv_task_handler>:

/**
 * Call it  periodically to handle lv_tasks.
 */
LV_ATTRIBUTE_TASK_HANDLER void lv_task_handler(void)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool task_handler_mutex = false;
    if(task_handler_mutex) return;
 8013b72:	4b6b      	ldr	r3, [pc, #428]	; (8013d20 <lv_task_handler+0x1b4>)
 8013b74:	781b      	ldrb	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f040 80cd 	bne.w	8013d16 <lv_task_handler+0x1aa>
    task_handler_mutex = true;
 8013b7c:	4b68      	ldr	r3, [pc, #416]	; (8013d20 <lv_task_handler+0x1b4>)
 8013b7e:	2201      	movs	r2, #1
 8013b80:	701a      	strb	r2, [r3, #0]

    static uint32_t idle_period_start = 0;
    static uint32_t handler_start     = 0;
    static uint32_t busy_time         = 0;

    if(lv_task_run == false) {
 8013b82:	4b68      	ldr	r3, [pc, #416]	; (8013d24 <lv_task_handler+0x1b8>)
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	f083 0301 	eor.w	r3, r3, #1
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d003      	beq.n	8013b98 <lv_task_handler+0x2c>
        task_handler_mutex = false; /*Release mutex*/
 8013b90:	4b63      	ldr	r3, [pc, #396]	; (8013d20 <lv_task_handler+0x1b4>)
 8013b92:	2200      	movs	r2, #0
 8013b94:	701a      	strb	r2, [r3, #0]
        return;
 8013b96:	e0bf      	b.n	8013d18 <lv_task_handler+0x1ac>
    }

    handler_start = lv_tick_get();
 8013b98:	f7fe fdf0 	bl	801277c <lv_tick_get>
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	4b62      	ldr	r3, [pc, #392]	; (8013d28 <lv_task_handler+0x1bc>)
 8013ba0:	601a      	str	r2, [r3, #0]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	60fb      	str	r3, [r7, #12]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	72fb      	strb	r3, [r7, #11]
        task_deleted             = false;
 8013baa:	4b60      	ldr	r3, [pc, #384]	; (8013d2c <lv_task_handler+0x1c0>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 8013bb0:	4b5f      	ldr	r3, [pc, #380]	; (8013d30 <lv_task_handler+0x1c4>)
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013bb6:	485f      	ldr	r0, [pc, #380]	; (8013d34 <lv_task_handler+0x1c8>)
 8013bb8:	f7ff fd86 	bl	80136c8 <lv_ll_get_head>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	4b5e      	ldr	r3, [pc, #376]	; (8013d38 <lv_task_handler+0x1cc>)
 8013bc0:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8013bc2:	e05e      	b.n	8013c82 <lv_task_handler+0x116>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8013bc4:	4b5c      	ldr	r3, [pc, #368]	; (8013d38 <lv_task_handler+0x1cc>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	4619      	mov	r1, r3
 8013bca:	485a      	ldr	r0, [pc, #360]	; (8013d34 <lv_task_handler+0x1c8>)
 8013bcc:	f7ff fda2 	bl	8013714 <lv_ll_get_next>
 8013bd0:	6078      	str	r0, [r7, #4]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8013bd2:	4b59      	ldr	r3, [pc, #356]	; (8013d38 <lv_task_handler+0x1cc>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	7c1b      	ldrb	r3, [r3, #16]
 8013bd8:	f003 0307 	and.w	r3, r3, #7
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d054      	beq.n	8013c8c <lv_task_handler+0x120>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8013be2:	4b55      	ldr	r3, [pc, #340]	; (8013d38 <lv_task_handler+0x1cc>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d105      	bne.n	8013bf8 <lv_task_handler+0x8c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8013bec:	2300      	movs	r3, #0
 8013bee:	60fb      	str	r3, [r7, #12]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 8013bf0:	4a51      	ldr	r2, [pc, #324]	; (8013d38 <lv_task_handler+0x1cc>)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 8013bf6:	e044      	b.n	8013c82 <lv_task_handler+0x116>
            }

            /*Just try to run the tasks with highest priority.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8013bf8:	4b4f      	ldr	r3, [pc, #316]	; (8013d38 <lv_task_handler+0x1cc>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	7c1b      	ldrb	r3, [r3, #16]
 8013bfe:	f003 0307 	and.w	r3, r3, #7
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	2b05      	cmp	r3, #5
 8013c06:	d105      	bne.n	8013c14 <lv_task_handler+0xa8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8013c08:	4b4b      	ldr	r3, [pc, #300]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 f9db 	bl	8013fc8 <lv_task_exec>
 8013c12:	e02b      	b.n	8013c6c <lv_task_handler+0x100>
            }
            /*Tasks with higher priority then the interrupted shall be run in every case*/
            else if(task_interrupter) {
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d01a      	beq.n	8013c50 <lv_task_handler+0xe4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8013c1a:	4b47      	ldr	r3, [pc, #284]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	7c1b      	ldrb	r3, [r3, #16]
 8013c20:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013c24:	b2da      	uxtb	r2, r3
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	7c1b      	ldrb	r3, [r3, #16]
 8013c2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d91b      	bls.n	8013c6c <lv_task_handler+0x100>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8013c34:	4b40      	ldr	r3, [pc, #256]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f000 f9c5 	bl	8013fc8 <lv_task_exec>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d013      	beq.n	8013c6c <lv_task_handler+0x100>
                        task_interrupter =
 8013c44:	4b3c      	ldr	r3, [pc, #240]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	60fb      	str	r3, [r7, #12]
                            LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
                        end_flag = false;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	72fb      	strb	r3, [r7, #11]
                        break;
 8013c4e:	e022      	b.n	8013c96 <lv_task_handler+0x12a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8013c50:	4b39      	ldr	r3, [pc, #228]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 f9b7 	bl	8013fc8 <lv_task_exec>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d005      	beq.n	8013c6c <lv_task_handler+0x100>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8013c60:	4b35      	ldr	r3, [pc, #212]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	60fb      	str	r3, [r7, #12]
                    end_flag         = false;
 8013c66:	2300      	movs	r3, #0
 8013c68:	72fb      	strb	r3, [r7, #11]
                    break;
 8013c6a:	e014      	b.n	8013c96 <lv_task_handler+0x12a>
                }
            }

            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8013c6c:	4b2f      	ldr	r3, [pc, #188]	; (8013d2c <lv_task_handler+0x1c0>)
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10d      	bne.n	8013c90 <lv_task_handler+0x124>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8013c74:	4b2e      	ldr	r3, [pc, #184]	; (8013d30 <lv_task_handler+0x1c4>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d10b      	bne.n	8013c94 <lv_task_handler+0x128>

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8013c7c:	4a2e      	ldr	r2, [pc, #184]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8013c82:	4b2d      	ldr	r3, [pc, #180]	; (8013d38 <lv_task_handler+0x1cc>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d19c      	bne.n	8013bc4 <lv_task_handler+0x58>
 8013c8a:	e004      	b.n	8013c96 <lv_task_handler+0x12a>
                break;
 8013c8c:	bf00      	nop
 8013c8e:	e002      	b.n	8013c96 <lv_task_handler+0x12a>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8013c90:	bf00      	nop
 8013c92:	e000      	b.n	8013c96 <lv_task_handler+0x12a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8013c94:	bf00      	nop
        }
    } while(!end_flag);
 8013c96:	7afb      	ldrb	r3, [r7, #11]
 8013c98:	f083 0301 	eor.w	r3, r3, #1
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d181      	bne.n	8013ba6 <lv_task_handler+0x3a>

    busy_time += lv_tick_elaps(handler_start);
 8013ca2:	4b21      	ldr	r3, [pc, #132]	; (8013d28 <lv_task_handler+0x1bc>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fe fd82 	bl	80127b0 <lv_tick_elaps>
 8013cac:	4602      	mov	r2, r0
 8013cae:	4b23      	ldr	r3, [pc, #140]	; (8013d3c <lv_task_handler+0x1d0>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	4a21      	ldr	r2, [pc, #132]	; (8013d3c <lv_task_handler+0x1d0>)
 8013cb6:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8013cb8:	4b21      	ldr	r3, [pc, #132]	; (8013d40 <lv_task_handler+0x1d4>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fe fd77 	bl	80127b0 <lv_tick_elaps>
 8013cc2:	6038      	str	r0, [r7, #0]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013cca:	d320      	bcc.n	8013d0e <lv_task_handler+0x1a2>

        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8013ccc:	4b1b      	ldr	r3, [pc, #108]	; (8013d3c <lv_task_handler+0x1d0>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2264      	movs	r2, #100	; 0x64
 8013cd2:	fb02 f303 	mul.w	r3, r2, r3
 8013cd6:	4a1b      	ldr	r2, [pc, #108]	; (8013d44 <lv_task_handler+0x1d8>)
 8013cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8013cdc:	095b      	lsrs	r3, r3, #5
 8013cde:	b2da      	uxtb	r2, r3
 8013ce0:	4b19      	ldr	r3, [pc, #100]	; (8013d48 <lv_task_handler+0x1dc>)
 8013ce2:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8013ce4:	4b18      	ldr	r3, [pc, #96]	; (8013d48 <lv_task_handler+0x1dc>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	2b64      	cmp	r3, #100	; 0x64
 8013cea:	d805      	bhi.n	8013cf8 <lv_task_handler+0x18c>
 8013cec:	4b16      	ldr	r3, [pc, #88]	; (8013d48 <lv_task_handler+0x1dc>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	e000      	b.n	8013cfa <lv_task_handler+0x18e>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	4a13      	ldr	r2, [pc, #76]	; (8013d48 <lv_task_handler+0x1dc>)
 8013cfc:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8013cfe:	4b0f      	ldr	r3, [pc, #60]	; (8013d3c <lv_task_handler+0x1d0>)
 8013d00:	2200      	movs	r2, #0
 8013d02:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8013d04:	f7fe fd3a 	bl	801277c <lv_tick_get>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	4b0d      	ldr	r3, [pc, #52]	; (8013d40 <lv_task_handler+0x1d4>)
 8013d0c:	601a      	str	r2, [r3, #0]
    }

    task_handler_mutex = false; /*Release the mutex*/
 8013d0e:	4b04      	ldr	r3, [pc, #16]	; (8013d20 <lv_task_handler+0x1b4>)
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
 8013d14:	e000      	b.n	8013d18 <lv_task_handler+0x1ac>
    if(task_handler_mutex) return;
 8013d16:	bf00      	nop

    LV_LOG_TRACE("lv_task_handler ready");
}
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20002a88 	.word	0x20002a88
 8013d24:	20002a84 	.word	0x20002a84
 8013d28:	20002a8c 	.word	0x20002a8c
 8013d2c:	20002a86 	.word	0x20002a86
 8013d30:	20002a87 	.word	0x20002a87
 8013d34:	20006da0 	.word	0x20006da0
 8013d38:	20006de0 	.word	0x20006de0
 8013d3c:	20002a90 	.word	0x20002a90
 8013d40:	20002a94 	.word	0x20002a94
 8013d44:	10624dd3 	.word	0x10624dd3
 8013d48:	20002a85 	.word	0x20002a85

08013d4c <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 8013d52:	2300      	movs	r3, #0
 8013d54:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8013d56:	4832      	ldr	r0, [pc, #200]	; (8013e20 <lv_task_create_basic+0xd4>)
 8013d58:	f7ff fcb6 	bl	80136c8 <lv_ll_get_head>
 8013d5c:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10c      	bne.n	8013d7e <lv_task_create_basic+0x32>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8013d64:	482e      	ldr	r0, [pc, #184]	; (8013e20 <lv_task_create_basic+0xd4>)
 8013d66:	f7ff fb4d 	bl	8013404 <lv_ll_ins_head>
 8013d6a:	6078      	str	r0, [r7, #4]
        lv_mem_assert(new_task);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d100      	bne.n	8013d74 <lv_task_create_basic+0x28>
 8013d72:	e7fe      	b.n	8013d72 <lv_task_create_basic+0x26>
        if(new_task == NULL) return NULL;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d130      	bne.n	8013ddc <lv_task_create_basic+0x90>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	e04c      	b.n	8013e18 <lv_task_create_basic+0xcc>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	7c1b      	ldrb	r3, [r3, #16]
 8013d82:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013d86:	b2db      	uxtb	r3, r3
 8013d88:	2b03      	cmp	r3, #3
 8013d8a:	d80d      	bhi.n	8013da8 <lv_task_create_basic+0x5c>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013d8c:	6839      	ldr	r1, [r7, #0]
 8013d8e:	4824      	ldr	r0, [pc, #144]	; (8013e20 <lv_task_create_basic+0xd4>)
 8013d90:	f7ff fb6c 	bl	801346c <lv_ll_ins_prev>
 8013d94:	6078      	str	r0, [r7, #4]
                lv_mem_assert(new_task);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d100      	bne.n	8013d9e <lv_task_create_basic+0x52>
 8013d9c:	e7fe      	b.n	8013d9c <lv_task_create_basic+0x50>
                if(new_task == NULL) return NULL;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d10a      	bne.n	8013dba <lv_task_create_basic+0x6e>
 8013da4:	2300      	movs	r3, #0
 8013da6:	e037      	b.n	8013e18 <lv_task_create_basic+0xcc>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8013da8:	6839      	ldr	r1, [r7, #0]
 8013daa:	481d      	ldr	r0, [pc, #116]	; (8013e20 <lv_task_create_basic+0xd4>)
 8013dac:	f7ff fcb2 	bl	8013714 <lv_ll_get_next>
 8013db0:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d1e2      	bne.n	8013d7e <lv_task_create_basic+0x32>
 8013db8:	e000      	b.n	8013dbc <lv_task_create_basic+0x70>
                break;
 8013dba:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10c      	bne.n	8013ddc <lv_task_create_basic+0x90>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8013dc2:	4817      	ldr	r0, [pc, #92]	; (8013e20 <lv_task_create_basic+0xd4>)
 8013dc4:	f7ff fb99 	bl	80134fa <lv_ll_ins_tail>
 8013dc8:	6078      	str	r0, [r7, #4]
            lv_mem_assert(new_task);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d100      	bne.n	8013dd2 <lv_task_create_basic+0x86>
 8013dd0:	e7fe      	b.n	8013dd0 <lv_task_create_basic+0x84>
            if(new_task == NULL) return NULL;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <lv_task_create_basic+0x90>
 8013dd8:	2300      	movs	r3, #0
 8013dda:	e01d      	b.n	8013e18 <lv_task_create_basic+0xcc>
        }
    }

    new_task->period  = DEF_PERIOD;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013de2:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	7c13      	ldrb	r3, [r2, #16]
 8013dee:	2103      	movs	r1, #3
 8013df0:	f361 0302 	bfi	r3, r1, #0, #3
 8013df4:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	7c13      	ldrb	r3, [r2, #16]
 8013dfa:	f36f 03c3 	bfc	r3, #3, #1
 8013dfe:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 8013e00:	f7fe fcbc 	bl	801277c <lv_tick_get>
 8013e04:	4602      	mov	r2, r0
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	60da      	str	r2, [r3, #12]

    task_created = true;
 8013e10:	4b04      	ldr	r3, [pc, #16]	; (8013e24 <lv_task_create_basic+0xd8>)
 8013e12:	2201      	movs	r2, #1
 8013e14:	701a      	strb	r2, [r3, #0]

    return new_task;
 8013e16:	687b      	ldr	r3, [r7, #4]
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	20006da0 	.word	0x20006da0
 8013e24:	20002a87 	.word	0x20002a87

08013e28 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b086      	sub	sp, #24
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	603b      	str	r3, [r7, #0]
 8013e34:	4613      	mov	r3, r2
 8013e36:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 8013e38:	f7ff ff88 	bl	8013d4c <lv_task_create_basic>
 8013e3c:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_task);
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d100      	bne.n	8013e46 <lv_task_create+0x1e>
 8013e44:	e7fe      	b.n	8013e44 <lv_task_create+0x1c>
    if(new_task == NULL) return NULL;
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d101      	bne.n	8013e50 <lv_task_create+0x28>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	e010      	b.n	8013e72 <lv_task_create+0x4a>

    lv_task_set_cb(new_task, task_cb);
 8013e50:	68f9      	ldr	r1, [r7, #12]
 8013e52:	6978      	ldr	r0, [r7, #20]
 8013e54:	f000 f811 	bl	8013e7a <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	6978      	ldr	r0, [r7, #20]
 8013e5c:	f000 f884 	bl	8013f68 <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 8013e60:	79fb      	ldrb	r3, [r7, #7]
 8013e62:	4619      	mov	r1, r3
 8013e64:	6978      	ldr	r0, [r7, #20]
 8013e66:	f000 f835 	bl	8013ed4 <lv_task_set_prio>
    new_task->user_data = user_data;
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	683a      	ldr	r2, [r7, #0]
 8013e6e:	60da      	str	r2, [r3, #12]

    return new_task;
 8013e70:	697b      	ldr	r3, [r7, #20]
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	b083      	sub	sp, #12
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
 8013e82:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	609a      	str	r2, [r3, #8]
}
 8013e8a:	bf00      	nop
 8013e8c:	370c      	adds	r7, #12
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e94:	4770      	bx	lr
	...

08013e98 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8013ea0:	6879      	ldr	r1, [r7, #4]
 8013ea2:	4809      	ldr	r0, [pc, #36]	; (8013ec8 <lv_task_del+0x30>)
 8013ea4:	f7ff fb62 	bl	801356c <lv_ll_rem>

    lv_mem_free(task);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ff fdcd 	bl	8013a48 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8013eae:	4b07      	ldr	r3, [pc, #28]	; (8013ecc <lv_task_del+0x34>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d102      	bne.n	8013ebe <lv_task_del+0x26>
 8013eb8:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <lv_task_del+0x38>)
 8013eba:	2201      	movs	r2, #1
 8013ebc:	701a      	strb	r2, [r3, #0]
}
 8013ebe:	bf00      	nop
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	20006da0 	.word	0x20006da0
 8013ecc:	20006de0 	.word	0x20006de0
 8013ed0:	20002a86 	.word	0x20002a86

08013ed4 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	460b      	mov	r3, r1
 8013ede:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	7c1b      	ldrb	r3, [r3, #16]
 8013ee4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	461a      	mov	r2, r3
 8013eec:	78fb      	ldrb	r3, [r7, #3]
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d033      	beq.n	8013f5a <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8013ef2:	481c      	ldr	r0, [pc, #112]	; (8013f64 <lv_task_set_prio+0x90>)
 8013ef4:	f7ff fbe8 	bl	80136c8 <lv_ll_get_head>
 8013ef8:	60f8      	str	r0, [r7, #12]
 8013efa:	e017      	b.n	8013f2c <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	7c1b      	ldrb	r3, [r3, #16]
 8013f00:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	461a      	mov	r2, r3
 8013f08:	78fb      	ldrb	r3, [r7, #3]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	dc09      	bgt.n	8013f22 <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8013f0e:	68fa      	ldr	r2, [r7, #12]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d00e      	beq.n	8013f34 <lv_task_set_prio+0x60>
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	6879      	ldr	r1, [r7, #4]
 8013f1a:	4812      	ldr	r0, [pc, #72]	; (8013f64 <lv_task_set_prio+0x90>)
 8013f1c:	f7ff fc2d 	bl	801377a <lv_ll_move_before>
            break;
 8013f20:	e008      	b.n	8013f34 <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8013f22:	68f9      	ldr	r1, [r7, #12]
 8013f24:	480f      	ldr	r0, [pc, #60]	; (8013f64 <lv_task_set_prio+0x90>)
 8013f26:	f7ff fbf5 	bl	8013714 <lv_ll_get_next>
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d1e4      	bne.n	8013efc <lv_task_set_prio+0x28>
 8013f32:	e000      	b.n	8013f36 <lv_task_set_prio+0x62>
            break;
 8013f34:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d104      	bne.n	8013f46 <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	6879      	ldr	r1, [r7, #4]
 8013f40:	4808      	ldr	r0, [pc, #32]	; (8013f64 <lv_task_set_prio+0x90>)
 8013f42:	f7ff fc1a 	bl	801377a <lv_ll_move_before>
    }

    task->prio = prio;
 8013f46:	78fb      	ldrb	r3, [r7, #3]
 8013f48:	f003 0307 	and.w	r3, r3, #7
 8013f4c:	b2d9      	uxtb	r1, r3
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	7c13      	ldrb	r3, [r2, #16]
 8013f52:	f361 0302 	bfi	r3, r1, #0, #3
 8013f56:	7413      	strb	r3, [r2, #16]
 8013f58:	e000      	b.n	8013f5c <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 8013f5a:	bf00      	nop
}
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	20006da0 	.word	0x20006da0

08013f68 <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b083      	sub	sp, #12
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
    task->period = period;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	601a      	str	r2, [r3, #0]
}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 8013f8c:	f7fe fbf6 	bl	801277c <lv_tick_get>
 8013f90:	4602      	mov	r2, r0
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	1e5a      	subs	r2, r3, #1
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	605a      	str	r2, [r3, #4]
}
 8013f9e:	bf00      	nop
 8013fa0:	3708      	adds	r7, #8
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
	...

08013fa8 <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	4603      	mov	r3, r0
 8013fb0:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 8013fb2:	4a04      	ldr	r2, [pc, #16]	; (8013fc4 <lv_task_enable+0x1c>)
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	7013      	strb	r3, [r2, #0]
}
 8013fb8:	bf00      	nop
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr
 8013fc4:	20002a84 	.word	0x20002a84

08013fc8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
    bool exec = false;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	73fb      	strb	r3, [r7, #15]

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fe fbe9 	bl	80127b0 <lv_tick_elaps>
 8013fde:	60b8      	str	r0, [r7, #8]
    if(elp >= task->period) {
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	68ba      	ldr	r2, [r7, #8]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d325      	bcc.n	8014036 <lv_task_exec+0x6e>
        task->last_run = lv_tick_get();
 8013fea:	f7fe fbc7 	bl	801277c <lv_tick_get>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	605a      	str	r2, [r3, #4]
        task_deleted   = false;
 8013ff4:	4b12      	ldr	r3, [pc, #72]	; (8014040 <lv_task_exec+0x78>)
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	701a      	strb	r2, [r3, #0]
        task_created   = false;
 8013ffa:	4b12      	ldr	r3, [pc, #72]	; (8014044 <lv_task_exec+0x7c>)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	701a      	strb	r2, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d003      	beq.n	8014010 <lv_task_exec+0x48>
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	689b      	ldr	r3, [r3, #8]
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8014010:	4b0b      	ldr	r3, [pc, #44]	; (8014040 <lv_task_exec+0x78>)
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	f083 0301 	eor.w	r3, r3, #1
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b00      	cmp	r3, #0
 801401c:	d009      	beq.n	8014032 <lv_task_exec+0x6a>
            if(task->once != 0) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	7c1b      	ldrb	r3, [r3, #16]
 8014022:	f003 0308 	and.w	r3, r3, #8
 8014026:	b2db      	uxtb	r3, r3
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <lv_task_exec+0x6a>
                lv_task_del(task);
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f7ff ff33 	bl	8013e98 <lv_task_del>
            }
        }
        exec = true;
 8014032:	2301      	movs	r3, #1
 8014034:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 8014036:	7bfb      	ldrb	r3, [r7, #15]
}
 8014038:	4618      	mov	r0, r3
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	20002a86 	.word	0x20002a86
 8014044:	20002a87 	.word	0x20002a87

08014048 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8014048:	b480      	push	{r7}
 801404a:	b083      	sub	sp, #12
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	7a1b      	ldrb	r3, [r3, #8]
}
 8014054:	4618      	mov	r0, r3
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr

08014060 <lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b08a      	sub	sp, #40	; 0x28
 8014064:	af02      	add	r7, sp, #8
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2200      	movs	r2, #0
 8014072:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2200      	movs	r2, #0
 8014078:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	2b00      	cmp	r3, #0
 801407e:	f000 809a 	beq.w	80141b6 <lv_txt_get_size+0x156>
    if(font == NULL) return;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 8098 	beq.w	80141ba <lv_txt_get_size+0x15a>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801408a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801408e:	f003 0302 	and.w	r3, r3, #2
 8014092:	2b00      	cmp	r3, #0
 8014094:	d002      	beq.n	801409c <lv_txt_get_size+0x3c>
 8014096:	f647 4318 	movw	r3, #31768	; 0x7c18
 801409a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 801409c:	2300      	movs	r3, #0
 801409e:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 80140a0:	2300      	movs	r3, #0
 80140a2:	61bb      	str	r3, [r7, #24]
    lv_coord_t act_line_length;
    uint8_t letter_height = lv_font_get_line_height(font);
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff ffcf 	bl	8014048 <lv_font_get_line_height>
 80140aa:	4603      	mov	r3, r0
 80140ac:	75fb      	strb	r3, [r7, #23]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 80140ae:	e048      	b.n	8014142 <lv_txt_get_size+0xe2>
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80140b0:	68ba      	ldr	r2, [r7, #8]
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	18d0      	adds	r0, r2, r3
 80140b6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80140ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80140be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	460b      	mov	r3, r1
 80140c6:	6879      	ldr	r1, [r7, #4]
 80140c8:	f000 f87c 	bl	80141c4 <lv_txt_get_next_line>
 80140cc:	4603      	mov	r3, r0
 80140ce:	461a      	mov	r2, r3
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	4413      	add	r3, r2
 80140d4:	61bb      	str	r3, [r7, #24]
        size_res->y += letter_height;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140dc:	b29a      	uxth	r2, r3
 80140de:	7dfb      	ldrb	r3, [r7, #23]
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	4413      	add	r3, r2
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	b21a      	sxth	r2, r3
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	805a      	strh	r2, [r3, #2]
        size_res->y += line_space;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80140f6:	4413      	add	r3, r2
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	b21a      	sxth	r2, r3
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	805a      	strh	r2, [r3, #2]

        /*Calculate the the longest line*/
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8014100:	68ba      	ldr	r2, [r7, #8]
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	18d0      	adds	r0, r2, r3
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	b29a      	uxth	r2, r3
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	b29b      	uxth	r3, r3
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	b299      	uxth	r1, r3
 8014112:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014116:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	4613      	mov	r3, r2
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	f000 f902 	bl	8014328 <lv_txt_get_width>
 8014124:	4603      	mov	r3, r0
 8014126:	82bb      	strh	r3, [r7, #20]

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801412e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8014132:	4293      	cmp	r3, r2
 8014134:	bfb8      	it	lt
 8014136:	4613      	movlt	r3, r2
 8014138:	b21a      	sxth	r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	4413      	add	r3, r2
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1b0      	bne.n	80140b0 <lv_txt_get_size+0x50>
    }

    /*Ma ke the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d01b      	beq.n	801418c <lv_txt_get_size+0x12c>
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	3b01      	subs	r3, #1
 8014158:	68ba      	ldr	r2, [r7, #8]
 801415a:	4413      	add	r3, r2
 801415c:	781b      	ldrb	r3, [r3, #0]
 801415e:	2b0a      	cmp	r3, #10
 8014160:	d006      	beq.n	8014170 <lv_txt_get_size+0x110>
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	3b01      	subs	r3, #1
 8014166:	68ba      	ldr	r2, [r7, #8]
 8014168:	4413      	add	r3, r2
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b0d      	cmp	r3, #13
 801416e:	d10d      	bne.n	801418c <lv_txt_get_size+0x12c>
        size_res->y += letter_height + line_space;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014176:	b29a      	uxth	r2, r3
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	b299      	uxth	r1, r3
 801417c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801417e:	440b      	add	r3, r1
 8014180:	b29b      	uxth	r3, r3
 8014182:	4413      	add	r3, r2
 8014184:	b29b      	uxth	r3, r3
 8014186:	b21a      	sxth	r2, r3
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d104      	bne.n	80141a0 <lv_txt_get_size+0x140>
        size_res->y = letter_height;
 8014196:	7dfb      	ldrb	r3, [r7, #23]
 8014198:	b21a      	sxth	r2, r3
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	805a      	strh	r2, [r3, #2]
 801419e:	e00d      	b.n	80141bc <lv_txt_get_size+0x15c>
    else
        size_res->y -= line_space;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80141aa:	1ad3      	subs	r3, r2, r3
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	b21a      	sxth	r2, r3
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	805a      	strh	r2, [r3, #2]
 80141b4:	e002      	b.n	80141bc <lv_txt_get_size+0x15c>
    if(text == NULL) return;
 80141b6:	bf00      	nop
 80141b8:	e000      	b.n	80141bc <lv_txt_get_size+0x15c>
    if(font == NULL) return;
 80141ba:	bf00      	nop
}
 80141bc:	3720      	adds	r7, #32
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
	...

080141c4 <lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b08c      	sub	sp, #48	; 0x30
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	60f8      	str	r0, [r7, #12]
 80141cc:	60b9      	str	r1, [r7, #8]
 80141ce:	4611      	mov	r1, r2
 80141d0:	461a      	mov	r2, r3
 80141d2:	460b      	mov	r3, r1
 80141d4:	80fb      	strh	r3, [r7, #6]
 80141d6:	4613      	mov	r3, r2
 80141d8:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d101      	bne.n	80141e4 <lv_txt_get_next_line+0x20>
 80141e0:	2300      	movs	r3, #0
 80141e2:	e099      	b.n	8014318 <lv_txt_get_next_line+0x154>
    if(font == NULL) return 0;
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d101      	bne.n	80141ee <lv_txt_get_next_line+0x2a>
 80141ea:	2300      	movs	r3, #0
 80141ec:	e094      	b.n	8014318 <lv_txt_get_next_line+0x154>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80141ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80141f2:	f003 0302 	and.w	r3, r3, #2
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d002      	beq.n	8014200 <lv_txt_get_next_line+0x3c>
 80141fa:	f647 4318 	movw	r3, #31768	; 0x7c18
 80141fe:	80bb      	strh	r3, [r7, #4]

    uint32_t i                   = 0;
 8014200:	2300      	movs	r3, #0
 8014202:	61bb      	str	r3, [r7, #24]
    uint32_t i_next              = 0;
 8014204:	2300      	movs	r3, #0
 8014206:	617b      	str	r3, [r7, #20]
    lv_coord_t cur_w             = 0;
 8014208:	2300      	movs	r3, #0
 801420a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t last_break          = NO_BREAK_FOUND;
 801420c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014210:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014212:	2300      	movs	r3, #0
 8014214:	74fb      	strb	r3, [r7, #19]
    uint32_t letter_w;
    uint32_t letter      = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	623b      	str	r3, [r7, #32]
    uint32_t letter_next = 0;
 801421a:	2300      	movs	r3, #0
 801421c:	627b      	str	r3, [r7, #36]	; 0x24

    letter_next = lv_txt_encoded_next(txt, &i_next);
 801421e:	4b40      	ldr	r3, [pc, #256]	; (8014320 <lv_txt_get_next_line+0x15c>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f107 0214 	add.w	r2, r7, #20
 8014226:	4611      	mov	r1, r2
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	4798      	blx	r3
 801422c:	6278      	str	r0, [r7, #36]	; 0x24

    while(txt[i] != '\0') {
 801422e:	e06b      	b.n	8014308 <lv_txt_get_next_line+0x144>
        letter      = letter_next;
 8014230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014232:	623b      	str	r3, [r7, #32]
        i           = i_next;
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	61bb      	str	r3, [r7, #24]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014238:	4b39      	ldr	r3, [pc, #228]	; (8014320 <lv_txt_get_next_line+0x15c>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f107 0214 	add.w	r2, r7, #20
 8014240:	4611      	mov	r1, r2
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	4798      	blx	r3
 8014246:	6278      	str	r0, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014248:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801424c:	f003 0301 	and.w	r3, r3, #1
 8014250:	2b00      	cmp	r3, #0
 8014252:	d009      	beq.n	8014268 <lv_txt_get_next_line+0xa4>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014254:	f107 0313 	add.w	r3, r7, #19
 8014258:	6a39      	ldr	r1, [r7, #32]
 801425a:	4618      	mov	r0, r3
 801425c:	f000 f8ce 	bl	80143fc <lv_txt_is_cmd>
 8014260:	4603      	mov	r3, r0
 8014262:	2b00      	cmp	r3, #0
 8014264:	d000      	beq.n	8014268 <lv_txt_get_next_line+0xa4>
                continue; /*Skip the letter is it is part of a command*/
 8014266:	e04f      	b.n	8014308 <lv_txt_get_next_line+0x144>
            }
        }

        /*Check for new line chars*/
        if(letter == '\n' || letter == '\r') {
 8014268:	6a3b      	ldr	r3, [r7, #32]
 801426a:	2b0a      	cmp	r3, #10
 801426c:	d002      	beq.n	8014274 <lv_txt_get_next_line+0xb0>
 801426e:	6a3b      	ldr	r3, [r7, #32]
 8014270:	2b0d      	cmp	r3, #13
 8014272:	d10b      	bne.n	801428c <lv_txt_get_next_line+0xc8>
            /*Return with the first letter of the next line*/
            if(letter == '\r' && letter_next == '\n')
 8014274:	6a3b      	ldr	r3, [r7, #32]
 8014276:	2b0d      	cmp	r3, #13
 8014278:	d105      	bne.n	8014286 <lv_txt_get_next_line+0xc2>
 801427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427c:	2b0a      	cmp	r3, #10
 801427e:	d102      	bne.n	8014286 <lv_txt_get_next_line+0xc2>
                return i_next;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	b29b      	uxth	r3, r3
 8014284:	e048      	b.n	8014318 <lv_txt_get_next_line+0x154>
            else
                return i;
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	b29b      	uxth	r3, r3
 801428a:	e045      	b.n	8014318 <lv_txt_get_next_line+0x154>
        } else { /*Check the actual length*/
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801428e:	6a39      	ldr	r1, [r7, #32]
 8014290:	68b8      	ldr	r0, [r7, #8]
 8014292:	f7fd fdb1 	bl	8011df8 <lv_font_get_glyph_width>
 8014296:	4603      	mov	r3, r0
 8014298:	61fb      	str	r3, [r7, #28]
            cur_w += letter_w;
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	b29a      	uxth	r2, r3
 801429e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142a0:	4413      	add	r3, r2
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*If the txt is too long then finish, this is the line end*/
            if(cur_w > max_width) {
 80142a6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80142aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	dd1a      	ble.n	80142e8 <lv_txt_get_next_line+0x124>
                /*If a break character was already found break there*/
                if(last_break != NO_BREAK_FOUND) {
 80142b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142b8:	d002      	beq.n	80142c0 <lv_txt_get_next_line+0xfc>
                    i = last_break;
 80142ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142bc:	61bb      	str	r3, [r7, #24]
 80142be:	e006      	b.n	80142ce <lv_txt_get_next_line+0x10a>
                } else {
                    /* Now this character is out of the area so it will be first character of the next line*/
                    /* But 'i' already points to the next character (because of lv_txt_utf8_next) step beck one*/
                    lv_txt_encoded_prev(txt, &i);
 80142c0:	4b18      	ldr	r3, [pc, #96]	; (8014324 <lv_txt_get_next_line+0x160>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f107 0218 	add.w	r2, r7, #24
 80142c8:	4611      	mov	r1, r2
 80142ca:	68f8      	ldr	r0, [r7, #12]
 80142cc:	4798      	blx	r3
                }

                /* Do not let to return without doing nothing.
                 * Find at least one character (Avoid infinite loop )*/
                if(i == 0) lv_txt_encoded_next(txt, &i);
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d106      	bne.n	80142e2 <lv_txt_get_next_line+0x11e>
 80142d4:	4b12      	ldr	r3, [pc, #72]	; (8014320 <lv_txt_get_next_line+0x15c>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f107 0218 	add.w	r2, r7, #24
 80142dc:	4611      	mov	r1, r2
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	4798      	blx	r3

                return i;
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	e017      	b.n	8014318 <lv_txt_get_next_line+0x154>
            }
            /*If this char still can fit to this line then check if
             * txt can be broken here later */
            else if(is_break_char(letter)) {
 80142e8:	6a38      	ldr	r0, [r7, #32]
 80142ea:	f000 faa9 	bl	8014840 <is_break_char>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d001      	beq.n	80142f8 <lv_txt_get_next_line+0x134>
                last_break = i; /*Save the first char index after break*/
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        if(letter_w > 0) {
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d004      	beq.n	8014308 <lv_txt_get_next_line+0x144>
            cur_w += letter_space;
 80142fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014300:	88fb      	ldrh	r3, [r7, #6]
 8014302:	4413      	add	r3, r2
 8014304:	b29b      	uxth	r3, r3
 8014306:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(txt[i] != '\0') {
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	4413      	add	r3, r2
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d18d      	bne.n	8014230 <lv_txt_get_next_line+0x6c>
        }
    }

    return i;
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	b29b      	uxth	r3, r3
}
 8014318:	4618      	mov	r0, r3
 801431a:	3730      	adds	r7, #48	; 0x30
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}
 8014320:	2000279c 	.word	0x2000279c
 8014324:	200027a0 	.word	0x200027a0

08014328 <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b08a      	sub	sp, #40	; 0x28
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	607a      	str	r2, [r7, #4]
 8014332:	461a      	mov	r2, r3
 8014334:	460b      	mov	r3, r1
 8014336:	817b      	strh	r3, [r7, #10]
 8014338:	4613      	mov	r3, r2
 801433a:	813b      	strh	r3, [r7, #8]
    if(txt == NULL) return 0;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d101      	bne.n	8014346 <lv_txt_get_width+0x1e>
 8014342:	2300      	movs	r3, #0
 8014344:	e053      	b.n	80143ee <lv_txt_get_width+0xc6>
    if(font == NULL) return 0;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d101      	bne.n	8014350 <lv_txt_get_width+0x28>
 801434c:	2300      	movs	r3, #0
 801434e:	e04e      	b.n	80143ee <lv_txt_get_width+0xc6>

    uint32_t i                   = 0;
 8014350:	2300      	movs	r3, #0
 8014352:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 8014354:	2300      	movs	r3, #0
 8014356:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014358:	2300      	movs	r3, #0
 801435a:	74fb      	strb	r3, [r7, #19]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
 801435c:	897b      	ldrh	r3, [r7, #10]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d043      	beq.n	80143ea <lv_txt_get_width+0xc2>
        while(i < length) {
 8014362:	e035      	b.n	80143d0 <lv_txt_get_width+0xa8>
            letter      = lv_txt_encoded_next(txt, &i);
 8014364:	4b24      	ldr	r3, [pc, #144]	; (80143f8 <lv_txt_get_width+0xd0>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f107 0214 	add.w	r2, r7, #20
 801436c:	4611      	mov	r1, r2
 801436e:	68f8      	ldr	r0, [r7, #12]
 8014370:	4798      	blx	r3
 8014372:	6238      	str	r0, [r7, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8014374:	4b20      	ldr	r3, [pc, #128]	; (80143f8 <lv_txt_get_width+0xd0>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	697a      	ldr	r2, [r7, #20]
 801437a:	68f9      	ldr	r1, [r7, #12]
 801437c:	440a      	add	r2, r1
 801437e:	2100      	movs	r1, #0
 8014380:	4610      	mov	r0, r2
 8014382:	4798      	blx	r3
 8014384:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014386:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801438a:	f003 0301 	and.w	r3, r3, #1
 801438e:	2b00      	cmp	r3, #0
 8014390:	d009      	beq.n	80143a6 <lv_txt_get_width+0x7e>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014392:	f107 0313 	add.w	r3, r7, #19
 8014396:	6a39      	ldr	r1, [r7, #32]
 8014398:	4618      	mov	r0, r3
 801439a:	f000 f82f 	bl	80143fc <lv_txt_is_cmd>
 801439e:	4603      	mov	r3, r0
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d000      	beq.n	80143a6 <lv_txt_get_width+0x7e>
                    continue;
 80143a4:	e014      	b.n	80143d0 <lv_txt_get_width+0xa8>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80143a6:	69fa      	ldr	r2, [r7, #28]
 80143a8:	6a39      	ldr	r1, [r7, #32]
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7fd fd24 	bl	8011df8 <lv_font_get_glyph_width>
 80143b0:	4603      	mov	r3, r0
 80143b2:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 80143b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	dd09      	ble.n	80143d0 <lv_txt_get_width+0xa8>
                width += char_width;
 80143bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143be:	8b7b      	ldrh	r3, [r7, #26]
 80143c0:	4413      	add	r3, r2
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 80143c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143c8:	893b      	ldrh	r3, [r7, #8]
 80143ca:	4413      	add	r3, r2
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 80143d0:	897a      	ldrh	r2, [r7, #10]
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d8c5      	bhi.n	8014364 <lv_txt_get_width+0x3c>
            }
        }

        if(width > 0) {
 80143d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80143dc:	2b00      	cmp	r3, #0
 80143de:	dd04      	ble.n	80143ea <lv_txt_get_width+0xc2>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80143e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143e2:	893b      	ldrh	r3, [r7, #8]
 80143e4:	1ad3      	subs	r3, r2, r3
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 80143ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3728      	adds	r7, #40	; 0x28
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
 80143f6:	bf00      	nop
 80143f8:	2000279c 	.word	0x2000279c

080143fc <lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b085      	sub	sp, #20
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8014406:	2300      	movs	r3, #0
 8014408:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801440a:	2323      	movs	r3, #35	; 0x23
 801440c:	461a      	mov	r2, r3
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	4293      	cmp	r3, r2
 8014412:	d11a      	bne.n	801444a <lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d105      	bne.n	8014428 <lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2201      	movs	r2, #1
 8014420:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8014422:	2301      	movs	r3, #1
 8014424:	73fb      	strb	r3, [r7, #15]
 8014426:	e010      	b.n	801444a <lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	2b01      	cmp	r3, #1
 801442e:	d103      	bne.n	8014438 <lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2200      	movs	r2, #0
 8014434:	701a      	strb	r2, [r3, #0]
 8014436:	e008      	b.n	801444a <lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	2b02      	cmp	r3, #2
 801443e:	d104      	bne.n	801444a <lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8014446:	2301      	movs	r3, #1
 8014448:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d107      	bne.n	8014462 <lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	2b20      	cmp	r3, #32
 8014456:	d102      	bne.n	801445e <lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2202      	movs	r2, #2
 801445c:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 801445e:	2301      	movs	r3, #1
 8014460:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8014462:	7bfb      	ldrb	r3, [r7, #15]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
    if((str[0] & 0x80) == 0)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	b25b      	sxtb	r3, r3
 801447e:	2b00      	cmp	r3, #0
 8014480:	db01      	blt.n	8014486 <lv_txt_utf8_size+0x16>
        return 1;
 8014482:	2301      	movs	r3, #1
 8014484:	e018      	b.n	80144b8 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xE0) == 0xC0)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801448e:	2bc0      	cmp	r3, #192	; 0xc0
 8014490:	d101      	bne.n	8014496 <lv_txt_utf8_size+0x26>
        return 2;
 8014492:	2302      	movs	r3, #2
 8014494:	e010      	b.n	80144b8 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF0) == 0xE0)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801449e:	2be0      	cmp	r3, #224	; 0xe0
 80144a0:	d101      	bne.n	80144a6 <lv_txt_utf8_size+0x36>
        return 3;
 80144a2:	2303      	movs	r3, #3
 80144a4:	e008      	b.n	80144b8 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF8) == 0xF0)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80144ae:	2bf0      	cmp	r3, #240	; 0xf0
 80144b0:	d101      	bne.n	80144b6 <lv_txt_utf8_size+0x46>
        return 4;
 80144b2:	2304      	movs	r3, #4
 80144b4:	e000      	b.n	80144b8 <lv_txt_utf8_size+0x48>
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 80144b6:	2301      	movs	r3, #1
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr

080144c4 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b085      	sub	sp, #20
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80144d2:	2300      	movs	r3, #0
 80144d4:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d102      	bne.n	80144e2 <lv_txt_utf8_next+0x1e>
 80144dc:	f107 0308 	add.w	r3, r7, #8
 80144e0:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	4413      	add	r3, r2
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	b25b      	sxtb	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	db0b      	blt.n	801450a <lv_txt_utf8_next+0x46>
        result = txt[*i];
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	4413      	add	r3, r2
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	60fb      	str	r3, [r7, #12]
        (*i)++;
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	1c5a      	adds	r2, r3, #1
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	e0ea      	b.n	80146e0 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	687a      	ldr	r2, [r7, #4]
 8014510:	4413      	add	r3, r2
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014518:	2bc0      	cmp	r3, #192	; 0xc0
 801451a:	d128      	bne.n	801456e <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	4413      	add	r3, r2
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	019b      	lsls	r3, r3, #6
 8014528:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801452c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	4413      	add	r3, r2
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014546:	2b80      	cmp	r3, #128	; 0x80
 8014548:	d001      	beq.n	801454e <lv_txt_utf8_next+0x8a>
 801454a:	2300      	movs	r3, #0
 801454c:	e0c9      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	4413      	add	r3, r2
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801455c:	68fa      	ldr	r2, [r7, #12]
 801455e:	4413      	add	r3, r2
 8014560:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	601a      	str	r2, [r3, #0]
 801456c:	e0b8      	b.n	80146e0 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	4413      	add	r3, r2
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801457c:	2be0      	cmp	r3, #224	; 0xe0
 801457e:	d142      	bne.n	8014606 <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	4413      	add	r3, r2
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	031b      	lsls	r3, r3, #12
 801458c:	b29b      	uxth	r3, r3
 801458e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	1c5a      	adds	r2, r3, #1
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	4413      	add	r3, r2
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80145a8:	2b80      	cmp	r3, #128	; 0x80
 80145aa:	d001      	beq.n	80145b0 <lv_txt_utf8_next+0xec>
 80145ac:	2300      	movs	r3, #0
 80145ae:	e098      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	4413      	add	r3, r2
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	019b      	lsls	r3, r3, #6
 80145bc:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	4413      	add	r3, r2
 80145c4:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	1c5a      	adds	r2, r3, #1
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	4413      	add	r3, r2
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80145de:	2b80      	cmp	r3, #128	; 0x80
 80145e0:	d001      	beq.n	80145e6 <lv_txt_utf8_next+0x122>
 80145e2:	2300      	movs	r3, #0
 80145e4:	e07d      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	4413      	add	r3, r2
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	4413      	add	r3, r2
 80145f8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	e06c      	b.n	80146e0 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	4413      	add	r3, r2
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014614:	2bf0      	cmp	r3, #240	; 0xf0
 8014616:	d15e      	bne.n	80146d6 <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	4413      	add	r3, r2
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	049b      	lsls	r3, r3, #18
 8014624:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8014628:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	4413      	add	r3, r2
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014642:	2b80      	cmp	r3, #128	; 0x80
 8014644:	d001      	beq.n	801464a <lv_txt_utf8_next+0x186>
 8014646:	2300      	movs	r3, #0
 8014648:	e04b      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	4413      	add	r3, r2
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	031b      	lsls	r3, r3, #12
 8014656:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	4413      	add	r3, r2
 801465e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	1c5a      	adds	r2, r3, #1
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	4413      	add	r3, r2
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014678:	2b80      	cmp	r3, #128	; 0x80
 801467a:	d001      	beq.n	8014680 <lv_txt_utf8_next+0x1bc>
 801467c:	2300      	movs	r3, #0
 801467e:	e030      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	4413      	add	r3, r2
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	019b      	lsls	r3, r3, #6
 801468c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8014690:	68fa      	ldr	r2, [r7, #12]
 8014692:	4413      	add	r3, r2
 8014694:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	1c5a      	adds	r2, r3, #1
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	4413      	add	r3, r2
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80146ae:	2b80      	cmp	r3, #128	; 0x80
 80146b0:	d001      	beq.n	80146b6 <lv_txt_utf8_next+0x1f2>
 80146b2:	2300      	movs	r3, #0
 80146b4:	e015      	b.n	80146e2 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	4413      	add	r3, r2
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	4413      	add	r3, r2
 80146c8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	1c5a      	adds	r2, r3, #1
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	601a      	str	r2, [r3, #0]
 80146d4:	e004      	b.n	80146e0 <lv_txt_utf8_next+0x21c>
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	1c5a      	adds	r2, r3, #1
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 80146e0:	68fb      	ldr	r3, [r7, #12]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3714      	adds	r7, #20
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
	...

080146f0 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	1e5a      	subs	r2, r3, #1
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014708:	7dfb      	ldrb	r3, [r7, #23]
 801470a:	2b03      	cmp	r3, #3
 801470c:	d901      	bls.n	8014712 <lv_txt_utf8_prev+0x22>
 801470e:	2300      	movs	r3, #0
 8014710:	e02a      	b.n	8014768 <lv_txt_utf8_prev+0x78>

        c_size = lv_txt_encoded_size(&txt[*i]);
 8014712:	4b17      	ldr	r3, [pc, #92]	; (8014770 <lv_txt_utf8_prev+0x80>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	683a      	ldr	r2, [r7, #0]
 8014718:	6812      	ldr	r2, [r2, #0]
 801471a:	6879      	ldr	r1, [r7, #4]
 801471c:	440a      	add	r2, r1
 801471e:	4610      	mov	r0, r2
 8014720:	4798      	blx	r3
 8014722:	4603      	mov	r3, r0
 8014724:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8014726:	7dbb      	ldrb	r3, [r7, #22]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d10b      	bne.n	8014744 <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d005      	beq.n	8014740 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	1e5a      	subs	r2, r3, #1
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	601a      	str	r2, [r3, #0]
 801473e:	e001      	b.n	8014744 <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8014740:	2300      	movs	r3, #0
 8014742:	e011      	b.n	8014768 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8014744:	7dfb      	ldrb	r3, [r7, #23]
 8014746:	3301      	adds	r3, #1
 8014748:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 801474a:	7dbb      	ldrb	r3, [r7, #22]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d0db      	beq.n	8014708 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	60fb      	str	r3, [r7, #12]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014756:	4b07      	ldr	r3, [pc, #28]	; (8014774 <lv_txt_utf8_prev+0x84>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f107 020c 	add.w	r2, r7, #12
 801475e:	4611      	mov	r1, r2
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	4798      	blx	r3
 8014764:	6138      	str	r0, [r7, #16]

    return letter;
 8014766:	693b      	ldr	r3, [r7, #16]
}
 8014768:	4618      	mov	r0, r3
 801476a:	3718      	adds	r7, #24
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	20002798 	.word	0x20002798
 8014774:	2000279c 	.word	0x2000279c

08014778 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8014782:	2300      	movs	r3, #0
 8014784:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 8014786:	2300      	movs	r3, #0
 8014788:	60fb      	str	r3, [r7, #12]
 801478a:	e00e      	b.n	80147aa <lv_txt_utf8_get_byte_id+0x32>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 801478c:	4b0b      	ldr	r3, [pc, #44]	; (80147bc <lv_txt_utf8_get_byte_id+0x44>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	6879      	ldr	r1, [r7, #4]
 8014792:	68ba      	ldr	r2, [r7, #8]
 8014794:	440a      	add	r2, r1
 8014796:	4610      	mov	r0, r2
 8014798:	4798      	blx	r3
 801479a:	4603      	mov	r3, r0
 801479c:	461a      	mov	r2, r3
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	4413      	add	r3, r2
 80147a2:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	3301      	adds	r3, #1
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d3ec      	bcc.n	801478c <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 80147b2:	68bb      	ldr	r3, [r7, #8]
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3710      	adds	r7, #16
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20002798 	.word	0x20002798

080147c0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 80147ca:	2300      	movs	r3, #0
 80147cc:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 80147d2:	e009      	b.n	80147e8 <lv_txt_utf8_get_char_id+0x28>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80147d4:	4b09      	ldr	r3, [pc, #36]	; (80147fc <lv_txt_utf8_get_char_id+0x3c>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f107 0208 	add.w	r2, r7, #8
 80147dc:	4611      	mov	r1, r2
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	4798      	blx	r3
        char_cnt++;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	3301      	adds	r3, #1
 80147e6:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	683a      	ldr	r2, [r7, #0]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d8f1      	bhi.n	80147d4 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 80147f0:	68fb      	ldr	r3, [r7, #12]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3710      	adds	r7, #16
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	2000279c 	.word	0x2000279c

08014800 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8014808:	2300      	movs	r3, #0
 801480a:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 801480c:	2300      	movs	r3, #0
 801480e:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8014810:	e009      	b.n	8014826 <lv_txt_utf8_get_length+0x26>
        lv_txt_encoded_next(txt, &i);
 8014812:	4b0a      	ldr	r3, [pc, #40]	; (801483c <lv_txt_utf8_get_length+0x3c>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f107 0208 	add.w	r2, r7, #8
 801481a:	4611      	mov	r1, r2
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	4798      	blx	r3
        len++;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	3301      	adds	r3, #1
 8014824:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	4413      	add	r3, r2
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1ef      	bne.n	8014812 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8014832:	68fb      	ldr	r3, [r7, #12]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	2000279c 	.word	0x2000279c

08014840 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 8014840:	b480      	push	{r7}
 8014842:	b085      	sub	sp, #20
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8014848:	2300      	movs	r3, #0
 801484a:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801484c:	2300      	movs	r3, #0
 801484e:	73fb      	strb	r3, [r7, #15]
 8014850:	e00c      	b.n	801486c <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8014852:	7bfb      	ldrb	r3, [r7, #15]
 8014854:	4a0b      	ldr	r2, [pc, #44]	; (8014884 <is_break_char+0x44>)
 8014856:	5cd3      	ldrb	r3, [r2, r3]
 8014858:	461a      	mov	r2, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4293      	cmp	r3, r2
 801485e:	d102      	bne.n	8014866 <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 8014860:	2301      	movs	r3, #1
 8014862:	73bb      	strb	r3, [r7, #14]
            break;
 8014864:	e007      	b.n	8014876 <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8014866:	7bfb      	ldrb	r3, [r7, #15]
 8014868:	3301      	adds	r3, #1
 801486a:	73fb      	strb	r3, [r7, #15]
 801486c:	7bfb      	ldrb	r3, [r7, #15]
 801486e:	4a05      	ldr	r2, [pc, #20]	; (8014884 <is_break_char+0x44>)
 8014870:	5cd3      	ldrb	r3, [r2, r3]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d1ed      	bne.n	8014852 <is_break_char+0x12>
        }
    }

    return ret;
 8014876:	7bbb      	ldrb	r3, [r7, #14]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3714      	adds	r7, #20
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr
 8014884:	08029ce0 	.word	0x08029ce0

08014888 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	607a      	str	r2, [r7, #4]
 8014894:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	617b      	str	r3, [r7, #20]
 801489a:	e02d      	b.n	80148f8 <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	085b      	lsrs	r3, r3, #1
 80148a0:	683a      	ldr	r2, [r7, #0]
 80148a2:	fb02 f303 	mul.w	r3, r2, r3
 80148a6:	697a      	ldr	r2, [r7, #20]
 80148a8:	4413      	add	r3, r2
 80148aa:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 80148ac:	6a3b      	ldr	r3, [r7, #32]
 80148ae:	6979      	ldr	r1, [r7, #20]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	4798      	blx	r3
 80148b4:	6138      	str	r0, [r7, #16]
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	dd12      	ble.n	80148e2 <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	085b      	lsrs	r3, r3, #1
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	f002 0201 	and.w	r2, r2, #1
 80148c6:	2a00      	cmp	r2, #0
 80148c8:	bf0c      	ite	eq
 80148ca:	2201      	moveq	r2, #1
 80148cc:	2200      	movne	r2, #0
 80148ce:	b2d2      	uxtb	r2, r2
 80148d0:	1a9b      	subs	r3, r3, r2
 80148d2:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 80148d4:	697a      	ldr	r2, [r7, #20]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	4413      	add	r3, r2
 80148da:	617b      	str	r3, [r7, #20]
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	60bb      	str	r3, [r7, #8]
 80148e0:	e00a      	b.n	80148f8 <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	da05      	bge.n	80148f4 <lv_utils_bsearch+0x6c>
            n /= 2;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	085b      	lsrs	r3, r3, #1
 80148ec:	607b      	str	r3, [r7, #4]
            middle = base;
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	617b      	str	r3, [r7, #20]
 80148f2:	e001      	b.n	80148f8 <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	e003      	b.n	8014900 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1ce      	bne.n	801489c <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 80148fe:	2300      	movs	r3, #0
}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <lv_arc_create>:
 * @param par pointer to an object, it will be the parent of the new arc
 * @param copy pointer to a arc object, if not NULL then the new object will be copied from it
 * @return pointer to the created arc
 */
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b086      	sub	sp, #24
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("arc create started");

    /*Create the ancestor of arc*/
    lv_obj_t * new_arc = lv_obj_create(par, copy);
 8014912:	6839      	ldr	r1, [r7, #0]
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7f0 ff4d 	bl	80057b4 <lv_obj_create>
 801491a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_arc);
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d100      	bne.n	8014924 <lv_arc_create+0x1c>
 8014922:	e7fe      	b.n	8014922 <lv_arc_create+0x1a>
    if(new_arc == NULL) return NULL;
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d101      	bne.n	801492e <lv_arc_create+0x26>
 801492a:	2300      	movs	r3, #0
 801492c:	e059      	b.n	80149e2 <lv_arc_create+0xda>

    /*Allocate the arc type specific extended data*/
    lv_arc_ext_t * ext = lv_obj_allocate_ext_attr(new_arc, sizeof(lv_arc_ext_t));
 801492e:	2104      	movs	r1, #4
 8014930:	6978      	ldr	r0, [r7, #20]
 8014932:	f7f2 fadb 	bl	8006eec <lv_obj_allocate_ext_attr>
 8014936:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d100      	bne.n	8014940 <lv_arc_create+0x38>
 801493e:	e7fe      	b.n	801493e <lv_arc_create+0x36>
    if(ext == NULL) return NULL;
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d101      	bne.n	801494a <lv_arc_create+0x42>
 8014946:	2300      	movs	r3, #0
 8014948:	e04b      	b.n	80149e2 <lv_arc_create+0xda>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_arc);
 801494a:	4b28      	ldr	r3, [pc, #160]	; (80149ec <lv_arc_create+0xe4>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d105      	bne.n	801495e <lv_arc_create+0x56>
 8014952:	6978      	ldr	r0, [r7, #20]
 8014954:	f7f2 fc7f 	bl	8007256 <lv_obj_get_signal_cb>
 8014958:	4602      	mov	r2, r0
 801495a:	4b24      	ldr	r3, [pc, #144]	; (80149ec <lv_arc_create+0xe4>)
 801495c:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_arc);
 801495e:	4b24      	ldr	r3, [pc, #144]	; (80149f0 <lv_arc_create+0xe8>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d105      	bne.n	8014972 <lv_arc_create+0x6a>
 8014966:	6978      	ldr	r0, [r7, #20]
 8014968:	f7f2 fc81 	bl	800726e <lv_obj_get_design_cb>
 801496c:	4602      	mov	r2, r0
 801496e:	4b20      	ldr	r3, [pc, #128]	; (80149f0 <lv_arc_create+0xe8>)
 8014970:	601a      	str	r2, [r3, #0]

    /*Initialize the allocated 'ext' */
    ext->angle_start = 45;
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	222d      	movs	r2, #45	; 0x2d
 8014976:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = 315;
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	f240 123b 	movw	r2, #315	; 0x13b
 801497e:	805a      	strh	r2, [r3, #2]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_arc, lv_arc_signal);
 8014980:	491c      	ldr	r1, [pc, #112]	; (80149f4 <lv_arc_create+0xec>)
 8014982:	6978      	ldr	r0, [r7, #20]
 8014984:	f7f2 fa96 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_arc, lv_arc_design);
 8014988:	491b      	ldr	r1, [pc, #108]	; (80149f8 <lv_arc_create+0xf0>)
 801498a:	6978      	ldr	r0, [r7, #20]
 801498c:	f7f2 faa0 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new arc arc*/
    if(copy == NULL) {
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d113      	bne.n	80149be <lv_arc_create+0xb6>
        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8014996:	f00a faf9 	bl	801ef8c <lv_theme_get_current>
 801499a:	60b8      	str	r0, [r7, #8]
        if(th) {
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d007      	beq.n	80149b2 <lv_arc_create+0xaa>
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, th->style.arc);
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a6:	461a      	mov	r2, r3
 80149a8:	2100      	movs	r1, #0
 80149aa:	6978      	ldr	r0, [r7, #20]
 80149ac:	f000 f851 	bl	8014a52 <lv_arc_set_style>
 80149b0:	e016      	b.n	80149e0 <lv_arc_create+0xd8>
        } else {
            lv_arc_set_style(new_arc, LV_ARC_STYLE_MAIN, &lv_style_plain_color);
 80149b2:	4a12      	ldr	r2, [pc, #72]	; (80149fc <lv_arc_create+0xf4>)
 80149b4:	2100      	movs	r1, #0
 80149b6:	6978      	ldr	r0, [r7, #20]
 80149b8:	f000 f84b 	bl	8014a52 <lv_arc_set_style>
 80149bc:	e010      	b.n	80149e0 <lv_arc_create+0xd8>
        }

    }
    /*Copy an existing arc*/
    else {
        lv_arc_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80149be:	6838      	ldr	r0, [r7, #0]
 80149c0:	f7f2 fc61 	bl	8007286 <lv_obj_get_ext_attr>
 80149c4:	60f8      	str	r0, [r7, #12]
        ext->angle_start        = copy_ext->angle_start;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	801a      	strh	r2, [r3, #0]
        ext->angle_end          = copy_ext->angle_end;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	805a      	strh	r2, [r3, #2]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_arc);
 80149da:	6978      	ldr	r0, [r7, #20]
 80149dc:	f7f2 f935 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("arc created");

    return new_arc;
 80149e0:	697b      	ldr	r3, [r7, #20]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3718      	adds	r7, #24
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	20002a98 	.word	0x20002a98
 80149f0:	20002a9c 	.word	0x20002a9c
 80149f4:	08014d79 	.word	0x08014d79
 80149f8:	08014aad 	.word	0x08014aad
 80149fc:	20006d64 	.word	0x20006d64

08014a00 <lv_arc_set_angles>:
 * @param arc pointer to an arc object
 * @param start the start angle [0..360]
 * @param end the end angle [0..360]
 */
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	807b      	strh	r3, [r7, #2]
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	803b      	strh	r3, [r7, #0]
    lv_arc_ext_t * ext = lv_obj_get_ext_attr(arc);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7f2 fc38 	bl	8007286 <lv_obj_get_ext_attr>
 8014a16:	60f8      	str	r0, [r7, #12]

    if(start > 360) start = 360;
 8014a18:	887b      	ldrh	r3, [r7, #2]
 8014a1a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014a1e:	d902      	bls.n	8014a26 <lv_arc_set_angles+0x26>
 8014a20:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014a24:	807b      	strh	r3, [r7, #2]
    if(end > 360) end = 360;
 8014a26:	883b      	ldrh	r3, [r7, #0]
 8014a28:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014a2c:	d902      	bls.n	8014a34 <lv_arc_set_angles+0x34>
 8014a2e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014a32:	803b      	strh	r3, [r7, #0]

    ext->angle_start = start;
 8014a34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	801a      	strh	r2, [r3, #0]
    ext->angle_end   = end;
 8014a3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	805a      	strh	r2, [r3, #2]

    lv_obj_invalidate(arc);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7f1 f9f2 	bl	8005e2e <lv_obj_invalidate>
}
 8014a4a:	bf00      	nop
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <lv_arc_set_style>:
 * @param arc pointer to arc object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_arc_set_style(lv_obj_t * arc, lv_arc_style_t type, const lv_style_t * style)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b084      	sub	sp, #16
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	60f8      	str	r0, [r7, #12]
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	607a      	str	r2, [r7, #4]
 8014a5e:	72fb      	strb	r3, [r7, #11]
    switch(type) {
 8014a60:	7afb      	ldrb	r3, [r7, #11]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d000      	beq.n	8014a68 <lv_arc_set_style+0x16>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
    }
}
 8014a66:	e004      	b.n	8014a72 <lv_arc_set_style+0x20>
        case LV_ARC_STYLE_MAIN: lv_obj_set_style(arc, style); break;
 8014a68:	6879      	ldr	r1, [r7, #4]
 8014a6a:	68f8      	ldr	r0, [r7, #12]
 8014a6c:	f7f2 f8db 	bl	8006c26 <lv_obj_set_style>
 8014a70:	bf00      	nop
}
 8014a72:	bf00      	nop
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <lv_arc_get_style>:
 * @param arc pointer to arc object
 * @param type which style should be get
 * @return style pointer to the style
 *  */
const lv_style_t * lv_arc_get_style(const lv_obj_t * arc, lv_arc_style_t type)
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b084      	sub	sp, #16
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
 8014a82:	460b      	mov	r3, r1
 8014a84:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8014a86:	2300      	movs	r3, #0
 8014a88:	60fb      	str	r3, [r7, #12]

    switch(type) {
 8014a8a:	78fb      	ldrb	r3, [r7, #3]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d104      	bne.n	8014a9a <lv_arc_get_style+0x20>
        case LV_ARC_STYLE_MAIN: style = lv_obj_get_style(arc); break;
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7f2 fb3d 	bl	8007110 <lv_obj_get_style>
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	e002      	b.n	8014aa0 <lv_arc_get_style+0x26>
        default: style = NULL; break;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	60fb      	str	r3, [r7, #12]
 8014a9e:	bf00      	nop
    }

    return style;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3710      	adds	r7, #16
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
	...

08014aac <lv_arc_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_arc_design(lv_obj_t * arc, const lv_area_t * mask, lv_design_mode_t mode)
{
 8014aac:	b5b0      	push	{r4, r5, r7, lr}
 8014aae:	b0a0      	sub	sp, #128	; 0x80
 8014ab0:	af04      	add	r7, sp, #16
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 8014aba:	79fb      	ldrb	r3, [r7, #7]
 8014abc:	2b02      	cmp	r3, #2
 8014abe:	d101      	bne.n	8014ac4 <lv_arc_design+0x18>
        return false;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	e152      	b.n	8014d6a <lv_arc_design+0x2be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014ac4:	79fb      	ldrb	r3, [r7, #7]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f040 814e 	bne.w	8014d68 <lv_arc_design+0x2bc>
        lv_arc_ext_t * ext       = lv_obj_get_ext_attr(arc);
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f7f2 fbda 	bl	8007286 <lv_obj_get_ext_attr>
 8014ad2:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * style = lv_arc_get_style(arc, LV_ARC_STYLE_MAIN);
 8014ad4:	2100      	movs	r1, #0
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f7ff ffcf 	bl	8014a7a <lv_arc_get_style>
 8014adc:	66b8      	str	r0, [r7, #104]	; 0x68

        lv_coord_t r       = (LV_MATH_MIN(lv_obj_get_width(arc), lv_obj_get_height(arc))) / 2;
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f7f2 fae6 	bl	80070b0 <lv_obj_get_width>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	461c      	mov	r4, r3
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f7f2 faef 	bl	80070cc <lv_obj_get_height>
 8014aee:	4603      	mov	r3, r0
 8014af0:	429c      	cmp	r4, r3
 8014af2:	da08      	bge.n	8014b06 <lv_arc_design+0x5a>
 8014af4:	68f8      	ldr	r0, [r7, #12]
 8014af6:	f7f2 fadb 	bl	80070b0 <lv_obj_get_width>
 8014afa:	4603      	mov	r3, r0
 8014afc:	0fda      	lsrs	r2, r3, #31
 8014afe:	4413      	add	r3, r2
 8014b00:	105b      	asrs	r3, r3, #1
 8014b02:	b21b      	sxth	r3, r3
 8014b04:	e007      	b.n	8014b16 <lv_arc_design+0x6a>
 8014b06:	68f8      	ldr	r0, [r7, #12]
 8014b08:	f7f2 fae0 	bl	80070cc <lv_obj_get_height>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	0fda      	lsrs	r2, r3, #31
 8014b10:	4413      	add	r3, r2
 8014b12:	105b      	asrs	r3, r3, #1
 8014b14:	b21b      	sxth	r3, r3
 8014b16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_coord_t x       = arc->coords.x1 + lv_obj_get_width(arc) / 2;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014b20:	b29c      	uxth	r4, r3
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	f7f2 fac4 	bl	80070b0 <lv_obj_get_width>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	0fda      	lsrs	r2, r3, #31
 8014b2c:	4413      	add	r3, r2
 8014b2e:	105b      	asrs	r3, r3, #1
 8014b30:	b21b      	sxth	r3, r3
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	4423      	add	r3, r4
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        lv_coord_t y       = arc->coords.y1 + lv_obj_get_height(arc) / 2;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014b42:	b29c      	uxth	r4, r3
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f7f2 fac1 	bl	80070cc <lv_obj_get_height>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	0fda      	lsrs	r2, r3, #31
 8014b4e:	4413      	add	r3, r2
 8014b50:	105b      	asrs	r3, r3, #1
 8014b52:	b21b      	sxth	r3, r3
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	4423      	add	r3, r4
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        lv_opa_t opa_scale = lv_obj_get_opa_scale(arc);
 8014b5e:	68f8      	ldr	r0, [r7, #12]
 8014b60:	f7f2 fb43 	bl	80071ea <lv_obj_get_opa_scale>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        lv_draw_arc(x, y, r, mask, ext->angle_start, ext->angle_end, style, opa_scale);
 8014b6a:	f8b7 5066 	ldrh.w	r5, [r7, #102]	; 0x66
 8014b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014b78:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014b7c:	b292      	uxth	r2, r2
 8014b7e:	f9b7 4062 	ldrsh.w	r4, [r7, #98]	; 0x62
 8014b82:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 8014b86:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
 8014b8a:	9103      	str	r1, [sp, #12]
 8014b8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014b8e:	9102      	str	r1, [sp, #8]
 8014b90:	9201      	str	r2, [sp, #4]
 8014b92:	9300      	str	r3, [sp, #0]
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	462a      	mov	r2, r5
 8014b98:	4621      	mov	r1, r4
 8014b9a:	f7f3 ff0f 	bl	80089bc <lv_draw_arc>

        /*Draw circle on the ends if enabled */
        if(style->line.rounded) {
 8014b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014ba4:	f003 0301 	and.w	r3, r3, #1
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 80dc 	beq.w	8014d68 <lv_arc_design+0x2bc>
            lv_coord_t thick_half = style->line.width / 2;
 8014bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bb2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014bb6:	0fda      	lsrs	r2, r3, #31
 8014bb8:	4413      	add	r3, r2
 8014bba:	105b      	asrs	r3, r3, #1
 8014bbc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t cir_x      = ((r - thick_half) * lv_trigo_sin(ext->angle_start) >> LV_TRIGO_SHIFT);
 8014bc0:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014bc4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014bc8:	1ad4      	subs	r4, r2, r3
 8014bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7fe fe81 	bl	80138d8 <lv_trigo_sin>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	fb03 f304 	mul.w	r3, r3, r4
 8014bdc:	13db      	asrs	r3, r3, #15
 8014bde:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t cir_y      = ((r - thick_half) * lv_trigo_sin(ext->angle_start + 90) >> LV_TRIGO_SHIFT);
 8014be2:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014be6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014bea:	1ad4      	subs	r4, r2, r3
 8014bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	335a      	adds	r3, #90	; 0x5a
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	b21b      	sxth	r3, r3
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fe fe6c 	bl	80138d8 <lv_trigo_sin>
 8014c00:	4603      	mov	r3, r0
 8014c02:	fb03 f304 	mul.w	r3, r3, r4
 8014c06:	13db      	asrs	r3, r3, #15
 8014c08:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_style_t cir_style;
            lv_style_copy(&cir_style, &lv_style_plain);
 8014c0c:	f107 0314 	add.w	r3, r7, #20
 8014c10:	4958      	ldr	r1, [pc, #352]	; (8014d74 <lv_arc_design+0x2c8>)
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7f3 fda6 	bl	8008764 <lv_style_copy>
            cir_style.body.grad_color = style->line.color;
 8014c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c1a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8014c1c:	833b      	strh	r3, [r7, #24]
            cir_style.body.main_color = cir_style.body.grad_color;
 8014c1e:	8b3b      	ldrh	r3, [r7, #24]
 8014c20:	82fb      	strh	r3, [r7, #22]
            cir_style.body.radius     = LV_RADIUS_CIRCLE;
 8014c22:	f647 4318 	movw	r3, #31768	; 0x7c18
 8014c26:	837b      	strh	r3, [r7, #26]
            lv_area_t cir_area;
            cir_area.x1 = cir_x + x - thick_half;
 8014c28:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014c30:	4413      	add	r3, r2
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	b21b      	sxth	r3, r3
 8014c3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 8014c42:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014c46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014c4a:	4413      	add	r3, r2
 8014c4c:	b29a      	uxth	r2, r3
 8014c4e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	b21b      	sxth	r3, r3
 8014c58:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 8014c5c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014c60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014c64:	4413      	add	r3, r2
 8014c66:	b29a      	uxth	r2, r3
 8014c68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	b21b      	sxth	r3, r3
 8014c72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 8014c76:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014c7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014c7e:	4413      	add	r3, r2
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014c86:	4413      	add	r3, r2
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	b21b      	sxth	r3, r3
 8014c8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 8014c90:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014c94:	f107 0214 	add.w	r2, r7, #20
 8014c98:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014c9c:	68b9      	ldr	r1, [r7, #8]
 8014c9e:	f7f7 ffa6 	bl	800cbee <lv_draw_rect>

            cir_x = ((r - thick_half) * lv_trigo_sin(ext->angle_end) >> LV_TRIGO_SHIFT);
 8014ca2:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014ca6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014caa:	1ad4      	subs	r4, r2, r3
 8014cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fe fe10 	bl	80138d8 <lv_trigo_sin>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	fb03 f304 	mul.w	r3, r3, r4
 8014cbe:	13db      	asrs	r3, r3, #15
 8014cc0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            cir_y = ((r - thick_half) * lv_trigo_sin(ext->angle_end + 90) >> LV_TRIGO_SHIFT);
 8014cc4:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8014cc8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014ccc:	1ad4      	subs	r4, r2, r3
 8014cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	335a      	adds	r3, #90	; 0x5a
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	b21b      	sxth	r3, r3
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7fe fdfb 	bl	80138d8 <lv_trigo_sin>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	fb03 f304 	mul.w	r3, r3, r4
 8014ce8:	13db      	asrs	r3, r3, #15
 8014cea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            cir_area.x1 = cir_x + x - thick_half;
 8014cee:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014cf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014cf6:	4413      	add	r3, r2
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	b21b      	sxth	r3, r3
 8014d04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            cir_area.y1 = cir_y + y - thick_half;
 8014d08:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014d0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014d10:	4413      	add	r3, r2
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	b21b      	sxth	r3, r3
 8014d1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cir_area.x2 = cir_x + x + thick_half;
 8014d22:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014d26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014d2a:	4413      	add	r3, r2
 8014d2c:	b29a      	uxth	r2, r3
 8014d2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d32:	4413      	add	r3, r2
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	b21b      	sxth	r3, r3
 8014d38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            cir_area.y2 = cir_y + y + thick_half;
 8014d3c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8014d40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014d44:	4413      	add	r3, r2
 8014d46:	b29a      	uxth	r2, r3
 8014d48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014d4c:	4413      	add	r3, r2
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	b21b      	sxth	r3, r3
 8014d52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_rect(&cir_area, mask, &cir_style, opa_scale);
 8014d56:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014d5a:	f107 0214 	add.w	r2, r7, #20
 8014d5e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014d62:	68b9      	ldr	r1, [r7, #8]
 8014d64:	f7f7 ff43 	bl	800cbee <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 8014d68:	2301      	movs	r3, #1
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3770      	adds	r7, #112	; 0x70
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bdb0      	pop	{r4, r5, r7, pc}
 8014d72:	bf00      	nop
 8014d74:	20006c74 	.word	0x20006c74

08014d78 <lv_arc_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_arc_signal(lv_obj_t * arc, lv_signal_t sign, void * param)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b086      	sub	sp, #24
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	60f8      	str	r0, [r7, #12]
 8014d80:	460b      	mov	r3, r1
 8014d82:	607a      	str	r2, [r7, #4]
 8014d84:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(arc, sign, param);
 8014d86:	4b18      	ldr	r3, [pc, #96]	; (8014de8 <lv_arc_signal+0x70>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	7af9      	ldrb	r1, [r7, #11]
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	4798      	blx	r3
 8014d92:	4603      	mov	r3, r0
 8014d94:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 8014d96:	7dbb      	ldrb	r3, [r7, #22]
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d001      	beq.n	8014da0 <lv_arc_signal+0x28>
 8014d9c:	7dbb      	ldrb	r3, [r7, #22]
 8014d9e:	e01e      	b.n	8014dde <lv_arc_signal+0x66>

    if(sign == LV_SIGNAL_CLEANUP) {
 8014da0:	7afb      	ldrb	r3, [r7, #11]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d01a      	beq.n	8014ddc <lv_arc_signal+0x64>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014da6:	7afb      	ldrb	r3, [r7, #11]
 8014da8:	2b06      	cmp	r3, #6
 8014daa:	d117      	bne.n	8014ddc <lv_arc_signal+0x64>
        lv_obj_type_t * buf = param;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014db0:	2300      	movs	r3, #0
 8014db2:	75fb      	strb	r3, [r7, #23]
 8014db4:	e008      	b.n	8014dc8 <lv_arc_signal+0x50>
            if(buf->type[i] == NULL) break;
 8014db6:	7dfa      	ldrb	r2, [r7, #23]
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d006      	beq.n	8014dd0 <lv_arc_signal+0x58>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	75fb      	strb	r3, [r7, #23]
 8014dc8:	7dfb      	ldrb	r3, [r7, #23]
 8014dca:	2b06      	cmp	r3, #6
 8014dcc:	d9f3      	bls.n	8014db6 <lv_arc_signal+0x3e>
 8014dce:	e000      	b.n	8014dd2 <lv_arc_signal+0x5a>
            if(buf->type[i] == NULL) break;
 8014dd0:	bf00      	nop
        }
        buf->type[i] = "lv_arc";
 8014dd2:	7dfa      	ldrb	r2, [r7, #23]
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	4905      	ldr	r1, [pc, #20]	; (8014dec <lv_arc_signal+0x74>)
 8014dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8014ddc:	7dbb      	ldrb	r3, [r7, #22]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3718      	adds	r7, #24
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	20002a98 	.word	0x20002a98
 8014dec:	08029ce8 	.word	0x08029ce8

08014df0 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8014dfa:	2208      	movs	r2, #8
 8014dfc:	6839      	ldr	r1, [r7, #0]
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f012 fa10 	bl	8027224 <memcpy>
}
 8014e04:	bf00      	nop
 8014e06:	3708      	adds	r7, #8
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	1ad3      	subs	r3, r2, r3
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	3301      	adds	r3, #1
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	b21b      	sxth	r3, r3
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	370c      	adds	r7, #12
 8014e32:	46bd      	mov	sp, r7
 8014e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e38:	4770      	bx	lr

08014e3a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8014e3a:	b480      	push	{r7}
 8014e3c:	b083      	sub	sp, #12
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	1ad3      	subs	r3, r2, r3
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	3301      	adds	r3, #1
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	b21b      	sxth	r3, r3
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	370c      	adds	r7, #12
 8014e60:	46bd      	mov	sp, r7
 8014e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e66:	4770      	bx	lr

08014e68 <lv_bar_create>:
 * @param par pointer to an object, it will be the parent of the new bar
 * @param copy pointer to a bar object, if not NULL then the new object will be copied from it
 * @return pointer to the created bar
 */
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b086      	sub	sp, #24
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("lv_bar create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f7f0 fc9d 	bl	80057b4 <lv_obj_create>
 8014e7a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_bar);
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d100      	bne.n	8014e84 <lv_bar_create+0x1c>
 8014e82:	e7fe      	b.n	8014e82 <lv_bar_create+0x1a>
    if(new_bar == NULL) return NULL;
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d101      	bne.n	8014e8e <lv_bar_create+0x26>
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	e0a2      	b.n	8014fd4 <lv_bar_create+0x16c>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 8014e8e:	4b53      	ldr	r3, [pc, #332]	; (8014fdc <lv_bar_create+0x174>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d105      	bne.n	8014ea2 <lv_bar_create+0x3a>
 8014e96:	6978      	ldr	r0, [r7, #20]
 8014e98:	f7f2 f9dd 	bl	8007256 <lv_obj_get_signal_cb>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	4b4f      	ldr	r3, [pc, #316]	; (8014fdc <lv_bar_create+0x174>)
 8014ea0:	601a      	str	r2, [r3, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8014ea2:	4b4f      	ldr	r3, [pc, #316]	; (8014fe0 <lv_bar_create+0x178>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d105      	bne.n	8014eb6 <lv_bar_create+0x4e>
 8014eaa:	6978      	ldr	r0, [r7, #20]
 8014eac:	f7f2 f9df 	bl	800726e <lv_obj_get_design_cb>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	4b4b      	ldr	r3, [pc, #300]	; (8014fe0 <lv_bar_create+0x178>)
 8014eb4:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8014eb6:	2114      	movs	r1, #20
 8014eb8:	6978      	ldr	r0, [r7, #20]
 8014eba:	f7f2 f817 	bl	8006eec <lv_obj_allocate_ext_attr>
 8014ebe:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d100      	bne.n	8014ec8 <lv_bar_create+0x60>
 8014ec6:	e7fe      	b.n	8014ec6 <lv_bar_create+0x5e>
    if(ext == NULL) return NULL;
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <lv_bar_create+0x6a>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e080      	b.n	8014fd4 <lv_bar_create+0x16c>

    ext->min_value = 0;
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	805a      	strh	r2, [r3, #2]
    ext->max_value = 100;
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	2264      	movs	r2, #100	; 0x64
 8014edc:	809a      	strh	r2, [r3, #4]
    ext->cur_value = 0;
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	801a      	strh	r2, [r3, #0]
#if LV_USE_ANIMATION
    ext->anim_time  = 200;
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	22c8      	movs	r2, #200	; 0xc8
 8014ee8:	819a      	strh	r2, [r3, #12]
    ext->anim_start = 0;
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	2200      	movs	r2, #0
 8014eee:	80da      	strh	r2, [r3, #6]
    ext->anim_end   = 0;
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	811a      	strh	r2, [r3, #8]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014efc:	815a      	strh	r2, [r3, #10]
#endif
    ext->sym         = 0;
 8014efe:	693a      	ldr	r2, [r7, #16]
 8014f00:	7b93      	ldrb	r3, [r2, #14]
 8014f02:	f36f 0300 	bfc	r3, #0, #1
 8014f06:	7393      	strb	r3, [r2, #14]
    ext->style_indic = &lv_style_pretty_color;
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	4a36      	ldr	r2, [pc, #216]	; (8014fe4 <lv_bar_create+0x17c>)
 8014f0c:	611a      	str	r2, [r3, #16]

    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8014f0e:	4936      	ldr	r1, [pc, #216]	; (8014fe8 <lv_bar_create+0x180>)
 8014f10:	6978      	ldr	r0, [r7, #20]
 8014f12:	f7f1 ffcf 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 8014f16:	4935      	ldr	r1, [pc, #212]	; (8014fec <lv_bar_create+0x184>)
 8014f18:	6978      	ldr	r0, [r7, #20]
 8014f1a:	f7f1 ffd9 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new  bar object*/
    if(copy == NULL) {
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d12a      	bne.n	8014f7a <lv_bar_create+0x112>
        lv_obj_set_click(new_bar, false);
 8014f24:	2100      	movs	r1, #0
 8014f26:	6978      	ldr	r0, [r7, #20]
 8014f28:	f7f1 fea3 	bl	8006c72 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8014f2c:	2221      	movs	r2, #33	; 0x21
 8014f2e:	21c8      	movs	r1, #200	; 0xc8
 8014f30:	6978      	ldr	r0, [r7, #20]
 8014f32:	f7f1 f930 	bl	8006196 <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	4619      	mov	r1, r3
 8014f40:	6978      	ldr	r0, [r7, #20]
 8014f42:	f000 f857 	bl	8014ff4 <lv_bar_set_value>

        lv_theme_t * th = lv_theme_get_current();
 8014f46:	f00a f821 	bl	801ef8c <lv_theme_get_current>
 8014f4a:	60b8      	str	r0, [r7, #8]
        if(th) {
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00e      	beq.n	8014f70 <lv_bar_create+0x108>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f56:	461a      	mov	r2, r3
 8014f58:	2100      	movs	r1, #0
 8014f5a:	6978      	ldr	r0, [r7, #20]
 8014f5c:	f000 f91a 	bl	8015194 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f64:	461a      	mov	r2, r3
 8014f66:	2101      	movs	r1, #1
 8014f68:	6978      	ldr	r0, [r7, #20]
 8014f6a:	f000 f913 	bl	8015194 <lv_bar_set_style>
 8014f6e:	e030      	b.n	8014fd2 <lv_bar_create+0x16a>
        } else {
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8014f70:	491f      	ldr	r1, [pc, #124]	; (8014ff0 <lv_bar_create+0x188>)
 8014f72:	6978      	ldr	r0, [r7, #20]
 8014f74:	f7f1 fe57 	bl	8006c26 <lv_obj_set_style>
 8014f78:	e02b      	b.n	8014fd2 <lv_bar_create+0x16a>
        }
    } else {
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8014f7a:	6838      	ldr	r0, [r7, #0]
 8014f7c:	f7f2 f983 	bl	8007286 <lv_obj_get_ext_attr>
 8014f80:	60f8      	str	r0, [r7, #12]
        ext->min_value          = ext_copy->min_value;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	805a      	strh	r2, [r3, #2]
        ext->max_value          = ext_copy->max_value;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	809a      	strh	r2, [r3, #4]
        ext->cur_value          = ext_copy->cur_value;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	801a      	strh	r2, [r3, #0]
        ext->style_indic        = ext_copy->style_indic;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	691a      	ldr	r2, [r3, #16]
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	611a      	str	r2, [r3, #16]
        ext->sym                = ext_copy->sym;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	7b9b      	ldrb	r3, [r3, #14]
 8014fac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014fb0:	b2d9      	uxtb	r1, r3
 8014fb2:	693a      	ldr	r2, [r7, #16]
 8014fb4:	7b93      	ldrb	r3, [r2, #14]
 8014fb6:	f361 0300 	bfi	r3, r1, #0, #1
 8014fba:	7393      	strb	r3, [r2, #14]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_bar);
 8014fbc:	6978      	ldr	r0, [r7, #20]
 8014fbe:	f7f1 fe44 	bl	8006c4a <lv_obj_refresh_style>

        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	4619      	mov	r1, r3
 8014fcc:	6978      	ldr	r0, [r7, #20]
 8014fce:	f000 f811 	bl	8014ff4 <lv_bar_set_value>
    }

    LV_LOG_INFO("bar created");

    return new_bar;
 8014fd2:	697b      	ldr	r3, [r7, #20]
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3718      	adds	r7, #24
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	20002aa4 	.word	0x20002aa4
 8014fe0:	20002aa0 	.word	0x20002aa0
 8014fe4:	20006a94 	.word	0x20006a94
 8014fe8:	0801571d 	.word	0x0801571d
 8014fec:	0801528d 	.word	0x0801528d
 8014ff0:	20006b84 	.word	0x20006b84

08014ff4 <lv_bar_set_value>:
 * @param bar pointer to a bar object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediatelly
 */
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b08e      	sub	sp, #56	; 0x38
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	807b      	strh	r3, [r7, #2]
 8015000:	4613      	mov	r3, r2
 8015002:	707b      	strb	r3, [r7, #1]
#if LV_USE_ANIMATION == 0
    anim = false;
#endif
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f7f2 f93e 	bl	8007286 <lv_obj_get_ext_attr>
 801500a:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->cur_value == value) return;
 801500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801500e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015012:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015016:	429a      	cmp	r2, r3
 8015018:	d063      	beq.n	80150e2 <lv_bar_set_value+0xee>

    int16_t new_value;
    new_value = value > ext->max_value ? ext->max_value : value;
 801501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801501c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015020:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015024:	4293      	cmp	r3, r2
 8015026:	bfa8      	it	ge
 8015028:	4613      	movge	r3, r2
 801502a:	867b      	strh	r3, [r7, #50]	; 0x32
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 801502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801502e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015032:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015036:	4293      	cmp	r3, r2
 8015038:	bfb8      	it	lt
 801503a:	4613      	movlt	r3, r2
 801503c:	867b      	strh	r3, [r7, #50]	; 0x32

    if(ext->cur_value == new_value) return;
 801503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015044:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015048:	429a      	cmp	r2, r3
 801504a:	d04c      	beq.n	80150e6 <lv_bar_set_value+0xf2>

    if(anim == LV_ANIM_OFF) {
 801504c:	787b      	ldrb	r3, [r7, #1]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d106      	bne.n	8015060 <lv_bar_set_value+0x6c>
        ext->cur_value = new_value;
 8015052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015054:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015056:	801a      	strh	r2, [r3, #0]
        lv_obj_invalidate(bar);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7f0 fee8 	bl	8005e2e <lv_obj_invalidate>
 801505e:	e043      	b.n	80150e8 <lv_bar_set_value+0xf4>
    } else {
#if LV_USE_ANIMATION
        /*No animation in progress -> simply set the values*/
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8015060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015062:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801506a:	d108      	bne.n	801507e <lv_bar_set_value+0x8a>
            ext->anim_start = ext->cur_value;
 801506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801506e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015074:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 8015076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015078:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801507a:	811a      	strh	r2, [r3, #8]
 801507c:	e007      	b.n	801508e <lv_bar_set_value+0x9a>
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            ext->anim_start = ext->anim_end;
 801507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015080:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8015084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015086:	80da      	strh	r2, [r3, #6]
            ext->anim_end   = new_value;
 8015088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801508a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801508c:	811a      	strh	r2, [r3, #8]
        }

        lv_anim_t a;
        a.var            = bar;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	60bb      	str	r3, [r7, #8]
        a.start          = LV_BAR_ANIM_STATE_START;
 8015092:	2300      	movs	r3, #0
 8015094:	61bb      	str	r3, [r7, #24]
        a.end            = LV_BAR_ANIM_STATE_END;
 8015096:	f44f 7380 	mov.w	r3, #256	; 0x100
 801509a:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 801509c:	4b14      	ldr	r3, [pc, #80]	; (80150f0 <lv_bar_set_value+0xfc>)
 801509e:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 80150a0:	4b14      	ldr	r3, [pc, #80]	; (80150f4 <lv_bar_set_value+0x100>)
 80150a2:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_bar_anim_ready;
 80150a4:	4b14      	ldr	r3, [pc, #80]	; (80150f8 <lv_bar_set_value+0x104>)
 80150a6:	617b      	str	r3, [r7, #20]
        a.act_time       = 0;
 80150a8:	2300      	movs	r3, #0
 80150aa:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = ext->anim_time;
 80150ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 80150b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150ba:	f36f 0300 	bfc	r3, #0, #1
 80150be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 80150c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150ca:	f36f 0341 	bfc	r3, #1, #1
 80150ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	84fb      	strh	r3, [r7, #38]	; 0x26

        lv_anim_create(&a);
 80150d6:	f107 0308 	add.w	r3, r7, #8
 80150da:	4618      	mov	r0, r3
 80150dc:	f7fd fb9e 	bl	801281c <lv_anim_create>
 80150e0:	e002      	b.n	80150e8 <lv_bar_set_value+0xf4>
    if(ext->cur_value == value) return;
 80150e2:	bf00      	nop
 80150e4:	e000      	b.n	80150e8 <lv_bar_set_value+0xf4>
    if(ext->cur_value == new_value) return;
 80150e6:	bf00      	nop
#endif
    }
}
 80150e8:	3738      	adds	r7, #56	; 0x38
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	080157b9 	.word	0x080157b9
 80150f4:	0801296d 	.word	0x0801296d
 80150f8:	080157e1 	.word	0x080157e1

080150fc <lv_bar_set_range>:
 * @param bar pointer to the bar object
 * @param min minimum value
 * @param max maximum value
 */
void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	807b      	strh	r3, [r7, #2]
 8015108:	4613      	mov	r3, r2
 801510a:	803b      	strh	r3, [r7, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f7f2 f8ba 	bl	8007286 <lv_obj_get_ext_attr>
 8015112:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801511a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801511e:	429a      	cmp	r2, r3
 8015120:	d106      	bne.n	8015130 <lv_bar_set_range+0x34>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015128:	f9b7 2000 	ldrsh.w	r2, [r7]
 801512c:	429a      	cmp	r2, r3
 801512e:	d02d      	beq.n	801518c <lv_bar_set_range+0x90>

    ext->max_value = max;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	883a      	ldrh	r2, [r7, #0]
 8015134:	809a      	strh	r2, [r3, #4]
    ext->min_value = min;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	887a      	ldrh	r2, [r7, #2]
 801513a:	805a      	strh	r2, [r3, #2]
    if(ext->cur_value > max) {
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015142:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015146:	429a      	cmp	r2, r3
 8015148:	da0a      	bge.n	8015160 <lv_bar_set_range+0x64>
        ext->cur_value = max;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	883a      	ldrh	r2, [r7, #0]
 801514e:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015156:	2200      	movs	r2, #0
 8015158:	4619      	mov	r1, r3
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7ff ff4a 	bl	8014ff4 <lv_bar_set_value>
    }
    if(ext->cur_value < min) {
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015166:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801516a:	429a      	cmp	r2, r3
 801516c:	dd0a      	ble.n	8015184 <lv_bar_set_range+0x88>
        ext->cur_value = min;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	887a      	ldrh	r2, [r7, #2]
 8015172:	801a      	strh	r2, [r3, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801517a:	2200      	movs	r2, #0
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7ff ff38 	bl	8014ff4 <lv_bar_set_value>
    }
    lv_obj_invalidate(bar);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7f0 fe52 	bl	8005e2e <lv_obj_invalidate>
 801518a:	e000      	b.n	801518e <lv_bar_set_range+0x92>
    if(ext->min_value == min && ext->max_value == max) return;
 801518c:	bf00      	nop
}
 801518e:	3710      	adds	r7, #16
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <lv_bar_set_style>:
 * @param bar pointer to a bar object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_bar_set_style(lv_obj_t * bar, lv_bar_style_t type, const lv_style_t * style)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	460b      	mov	r3, r1
 801519e:	607a      	str	r2, [r7, #4]
 80151a0:	72fb      	strb	r3, [r7, #11]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	f7f2 f86f 	bl	8007286 <lv_obj_get_ext_attr>
 80151a8:	6178      	str	r0, [r7, #20]

    switch(type) {
 80151aa:	7afb      	ldrb	r3, [r7, #11]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <lv_bar_set_style+0x22>
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d005      	beq.n	80151c0 <lv_bar_set_style+0x2c>
        case LV_BAR_STYLE_INDIC:
            ext->style_indic = style;
            lv_obj_refresh_ext_draw_pad(bar);
            break;
    }
}
 80151b4:	e00b      	b.n	80151ce <lv_bar_set_style+0x3a>
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 80151b6:	6879      	ldr	r1, [r7, #4]
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f7f1 fd34 	bl	8006c26 <lv_obj_set_style>
 80151be:	e006      	b.n	80151ce <lv_bar_set_style+0x3a>
            ext->style_indic = style;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	611a      	str	r2, [r3, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7f1 fea6 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
            break;
 80151cc:	bf00      	nop
}
 80151ce:	bf00      	nop
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}

080151d6 <lv_bar_get_value>:
 * Get the value of a bar
 * @param bar pointer to a bar object
 * @return the value of the bar
 */
int16_t lv_bar_get_value(const lv_obj_t * bar)
{
 80151d6:	b580      	push	{r7, lr}
 80151d8:	b084      	sub	sp, #16
 80151da:	af00      	add	r7, sp, #0
 80151dc:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f7f2 f851 	bl	8007286 <lv_obj_get_ext_attr>
 80151e4:	60f8      	str	r0, [r7, #12]
    /*If animated tell that it's already at the end value*/
#if LV_USE_ANIMATION
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80151ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151f0:	d003      	beq.n	80151fa <lv_bar_get_value+0x24>
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80151f8:	e002      	b.n	8015200 <lv_bar_get_value+0x2a>
#endif
    /*No animation, simple return the current value*/
    return ext->cur_value;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8015200:	4618      	mov	r0, r3
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <lv_bar_get_min_value>:
 * Get the minimum value of a bar
 * @param bar pointer to a bar object
 * @return the minimum value of the bar
 */
int16_t lv_bar_get_min_value(const lv_obj_t * bar)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7f2 f838 	bl	8007286 <lv_obj_get_ext_attr>
 8015216:	60f8      	str	r0, [r7, #12]
    return ext->min_value;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3710      	adds	r7, #16
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}

08015226 <lv_bar_get_max_value>:
 * Get the maximum value of a bar
 * @param bar pointer to a bar object
 * @return the maximum value of the bar
 */
int16_t lv_bar_get_max_value(const lv_obj_t * bar)
{
 8015226:	b580      	push	{r7, lr}
 8015228:	b084      	sub	sp, #16
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f7f2 f829 	bl	8007286 <lv_obj_get_ext_attr>
 8015234:	60f8      	str	r0, [r7, #12]
    return ext->max_value;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 801523c:	4618      	mov	r0, r3
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <lv_bar_get_style>:
 * @param bar pointer to a bar object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_bar_get_style(const lv_obj_t * bar, lv_bar_style_t type)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8015250:	2300      	movs	r3, #0
 8015252:	60fb      	str	r3, [r7, #12]
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7f2 f816 	bl	8007286 <lv_obj_get_ext_attr>
 801525a:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801525c:	78fb      	ldrb	r3, [r7, #3]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d002      	beq.n	8015268 <lv_bar_get_style+0x24>
 8015262:	2b01      	cmp	r3, #1
 8015264:	d005      	beq.n	8015272 <lv_bar_get_style+0x2e>
 8015266:	e008      	b.n	801527a <lv_bar_get_style+0x36>
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f7f1 ff51 	bl	8007110 <lv_obj_get_style>
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	e006      	b.n	8015280 <lv_bar_get_style+0x3c>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	691b      	ldr	r3, [r3, #16]
 8015276:	60fb      	str	r3, [r7, #12]
 8015278:	e002      	b.n	8015280 <lv_bar_get_style+0x3c>
        default: style = NULL; break;
 801527a:	2300      	movs	r3, #0
 801527c:	60fb      	str	r3, [r7, #12]
 801527e:	bf00      	nop
    }

    return style;
 8015280:	68fb      	ldr	r3, [r7, #12]
}
 8015282:	4618      	mov	r0, r3
 8015284:	3710      	adds	r7, #16
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
	...

0801528c <lv_bar_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bar_design(lv_obj_t * bar, const lv_area_t * mask, lv_design_mode_t mode)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b0a0      	sub	sp, #128	; 0x80
 8015290:	af00      	add	r7, sp, #0
 8015292:	60f8      	str	r0, [r7, #12]
 8015294:	60b9      	str	r1, [r7, #8]
 8015296:	4613      	mov	r3, r2
 8015298:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801529a:	79fb      	ldrb	r3, [r7, #7]
 801529c:	2b02      	cmp	r3, #2
 801529e:	d107      	bne.n	80152b0 <lv_bar_design+0x24>
        /*Return false if the object is not covers the mask area*/
        return ancestor_design_f(bar, mask, mode);
 80152a0:	4bab      	ldr	r3, [pc, #684]	; (8015550 <lv_bar_design+0x2c4>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	79fa      	ldrb	r2, [r7, #7]
 80152a6:	68b9      	ldr	r1, [r7, #8]
 80152a8:	68f8      	ldr	r0, [r7, #12]
 80152aa:	4798      	blx	r3
 80152ac:	4603      	mov	r3, r0
 80152ae:	e231      	b.n	8015714 <lv_bar_design+0x488>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80152b0:	79fb      	ldrb	r3, [r7, #7]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f040 8205 	bne.w	80156c2 <lv_bar_design+0x436>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f7f1 ff96 	bl	80071ea <lv_obj_get_opa_scale>
 80152be:	4603      	mov	r3, r0
 80152c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        ancestor_design_f(bar, mask, mode);
#else
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(bar)) {
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f7f1 fff6 	bl	80072b6 <lv_obj_is_focused>
 80152ca:	4603      	mov	r3, r0
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d017      	beq.n	8015300 <lv_bar_design+0x74>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80152d0:	2100      	movs	r1, #0
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	f7ff ffb6 	bl	8015244 <lv_bar_get_style>
 80152d8:	6738      	str	r0, [r7, #112]	; 0x70
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80152da:	f107 0314 	add.w	r3, r7, #20
 80152de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f3 fa3f 	bl	8008764 <lv_style_copy>
            style_tmp.body.border.width = 0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f103 0010 	add.w	r0, r3, #16
 80152f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80152f4:	f107 0214 	add.w	r2, r7, #20
 80152f8:	68b9      	ldr	r1, [r7, #8]
 80152fa:	f7f7 fc78 	bl	800cbee <lv_draw_rect>
 80152fe:	e005      	b.n	801530c <lv_bar_design+0x80>
        } else {
            ancestor_design_f(bar, mask, mode);
 8015300:	4b93      	ldr	r3, [pc, #588]	; (8015550 <lv_bar_design+0x2c4>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	79fa      	ldrb	r2, [r7, #7]
 8015306:	68b9      	ldr	r1, [r7, #8]
 8015308:	68f8      	ldr	r0, [r7, #12]
 801530a:	4798      	blx	r3
        }
#endif
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f7f1 ffba 	bl	8007286 <lv_obj_get_ext_attr>
 8015312:	66f8      	str	r0, [r7, #108]	; 0x6c

        if(ext->cur_value != ext->min_value || ext->sym
 8015314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015316:	f9b3 2000 	ldrsh.w	r2, [r3]
 801531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801531c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015320:	429a      	cmp	r2, r3
 8015322:	d10d      	bne.n	8015340 <lv_bar_design+0xb4>
 8015324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015326:	7b9b      	ldrb	r3, [r3, #14]
 8015328:	f003 0301 	and.w	r3, r3, #1
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b00      	cmp	r3, #0
 8015330:	d106      	bne.n	8015340 <lv_bar_design+0xb4>
#if LV_USE_ANIMATION
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8015332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015334:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801533c:	f000 81e9 	beq.w	8015712 <lv_bar_design+0x486>
#endif
        ) {
            const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 8015340:	2101      	movs	r1, #1
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f7ff ff7e 	bl	8015244 <lv_bar_get_style>
 8015348:	66b8      	str	r0, [r7, #104]	; 0x68
            lv_area_t indic_area;
            lv_area_copy(&indic_area, &bar->coords);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f103 0210 	add.w	r2, r3, #16
 8015350:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015354:	4611      	mov	r1, r2
 8015356:	4618      	mov	r0, r3
 8015358:	f7ff fd4a 	bl	8014df0 <lv_area_copy>
            indic_area.x1 += style_indic->body.padding.left;
 801535c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8015360:	b29a      	uxth	r2, r3
 8015362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015364:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015368:	b29b      	uxth	r3, r3
 801536a:	4413      	add	r3, r2
 801536c:	b29b      	uxth	r3, r3
 801536e:	b21b      	sxth	r3, r3
 8015370:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            indic_area.x2 -= style_indic->body.padding.right;
 8015374:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8015378:	b29a      	uxth	r2, r3
 801537a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801537c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015380:	b29b      	uxth	r3, r3
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	b29b      	uxth	r3, r3
 8015386:	b21b      	sxth	r3, r3
 8015388:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            indic_area.y1 += style_indic->body.padding.top;
 801538c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8015390:	b29a      	uxth	r2, r3
 8015392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015394:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8015398:	b29b      	uxth	r3, r3
 801539a:	4413      	add	r3, r2
 801539c:	b29b      	uxth	r3, r3
 801539e:	b21b      	sxth	r3, r3
 80153a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            indic_area.y2 -= style_indic->body.padding.bottom;
 80153a4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	b21b      	sxth	r3, r3
 80153b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_coord_t w = lv_area_get_width(&indic_area);
 80153bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7ff fd23 	bl	8014e0c <lv_area_get_width>
 80153c6:	4603      	mov	r3, r0
 80153c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            lv_coord_t h = lv_area_get_height(&indic_area);
 80153cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff fd32 	bl	8014e3a <lv_area_get_height>
 80153d6:	4603      	mov	r3, r0
 80153d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            if(w >= h) {
 80153dc:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80153e0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80153e4:	429a      	cmp	r2, r3
 80153e6:	f2c0 80b5 	blt.w	8015554 <lv_bar_design+0x2c8>
                /*Horizontal*/
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 80153ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80153f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153f4:	d043      	beq.n	801547e <lv_bar_design+0x1f2>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 80153f6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80153fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80153fc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8015400:	4611      	mov	r1, r2
 8015402:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015404:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015408:	1a8a      	subs	r2, r1, r2
 801540a:	fb02 f203 	mul.w	r2, r2, r3
 801540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015414:	4619      	mov	r1, r3
 8015416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015418:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801541c:	1acb      	subs	r3, r1, r3
 801541e:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 8015422:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015426:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801542a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801542c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8015430:	4611      	mov	r1, r2
 8015432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015434:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015438:	1a8a      	subs	r2, r1, r2
 801543a:	fb02 f203 	mul.w	r2, r2, r3
 801543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015440:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015444:	4619      	mov	r1, r3
 8015446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015448:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801544c:	1acb      	subs	r3, r1, r3
 801544e:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 8015452:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.x2 =
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8015456:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801545a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801545e:	1ad3      	subs	r3, r2, r3
 8015460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015462:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8015466:	fb02 f303 	mul.w	r3, r2, r3
 801546a:	121b      	asrs	r3, r3, #8
 801546c:	b29a      	uxth	r2, r3
 801546e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8015472:	4413      	add	r3, r2
 8015474:	b29b      	uxth	r3, r3
 8015476:	b21b      	sxth	r3, r3
                    indic_area.x2 =
 8015478:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801547c:	e018      	b.n	80154b0 <lv_bar_design+0x224>
                } else
#endif
                {
                    indic_area.x2 =
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 801547e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015482:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015484:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015488:	4611      	mov	r1, r2
 801548a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801548c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015490:	1a8a      	subs	r2, r1, r2
 8015492:	fb02 f203 	mul.w	r2, r2, r3
 8015496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015498:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801549c:	4619      	mov	r1, r3
 801549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80154a4:	1acb      	subs	r3, r1, r3
 80154a6:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.x2 =
 80154aa:	b21b      	sxth	r3, r3
 80154ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                }

                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80154b0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	4413      	add	r3, r2
 80154be:	b29b      	uxth	r3, r3
 80154c0:	3b01      	subs	r3, #1
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	b21b      	sxth	r3, r3
 80154c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80154ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154cc:	7b9b      	ldrb	r3, [r3, #14]
 80154ce:	f003 0301 	and.w	r3, r3, #1
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f000 80eb 	beq.w	80156b0 <lv_bar_design+0x424>
 80154da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f280 80e5 	bge.w	80156b0 <lv_bar_design+0x424>
 80154e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	f340 80df 	ble.w	80156b0 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 80154f2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80154f6:	b29a      	uxth	r2, r3
 80154f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80154fe:	425b      	negs	r3, r3
 8015500:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 8015504:	fb01 f103 	mul.w	r1, r1, r3
 8015508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801550a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801550e:	4618      	mov	r0, r3
 8015510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015516:	1ac3      	subs	r3, r0, r3
 8015518:	fb91 f3f3 	sdiv	r3, r1, r3
 801551c:	b29b      	uxth	r3, r3
 801551e:	4413      	add	r3, r2
 8015520:	b29b      	uxth	r3, r3
 8015522:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    if(indic_area.x2 > zero)
 8015526:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801552a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801552e:	429a      	cmp	r2, r3
 8015530:	da04      	bge.n	801553c <lv_bar_design+0x2b0>
                        indic_area.x1 = zero;
 8015532:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8015536:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801553a:	e0b9      	b.n	80156b0 <lv_bar_design+0x424>
                    else {
                        indic_area.x1 = indic_area.x2;
 801553c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8015540:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                        indic_area.x2 = zero;
 8015544:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8015548:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801554c:	e0b0      	b.n	80156b0 <lv_bar_design+0x424>
 801554e:	bf00      	nop
 8015550:	20002aa0 	.word	0x20002aa0
                    }
                }
            } else {
#if LV_USE_ANIMATION
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8015554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015556:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801555a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801555e:	d043      	beq.n	80155e8 <lv_bar_design+0x35c>
                    /*Calculate the coordinates of anim. start and end*/
                    lv_coord_t anim_start_y =
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015560:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8015564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015566:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801556a:	4611      	mov	r1, r2
 801556c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801556e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015572:	1a8a      	subs	r2, r1, r2
 8015574:	fb02 f203 	mul.w	r2, r2, r3
 8015578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801557a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801557e:	4619      	mov	r1, r3
 8015580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015582:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015586:	1acb      	subs	r3, r1, r3
 8015588:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_y =
 801558c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                    lv_coord_t anim_end_y =
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015590:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8015594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015596:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801559a:	4611      	mov	r1, r2
 801559c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801559e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80155a2:	1a8a      	subs	r2, r1, r2
 80155a4:	fb02 f203 	mul.w	r2, r2, r3
 80155a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80155ae:	4619      	mov	r1, r3
 80155b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80155b6:	1acb      	subs	r3, r1, r3
 80155b8:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_y =
 80155bc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    indic_area.y1 =
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 80155c0:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 80155c4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80155c8:	1ad3      	subs	r3, r2, r3
 80155ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155cc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80155d0:	fb02 f303 	mul.w	r3, r2, r3
 80155d4:	121b      	asrs	r3, r3, #8
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80155dc:	4413      	add	r3, r2
 80155de:	b29b      	uxth	r3, r3
 80155e0:	b21b      	sxth	r3, r3
                    indic_area.y1 =
 80155e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80155e6:	e018      	b.n	801561a <lv_bar_design+0x38e>
                } else
#endif
                {
                    indic_area.y1 =
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80155e8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80155ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155f2:	4611      	mov	r1, r2
 80155f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80155fa:	1a8a      	subs	r2, r1, r2
 80155fc:	fb02 f203 	mul.w	r2, r2, r3
 8015600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015606:	4619      	mov	r1, r3
 8015608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801560a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801560e:	1acb      	subs	r3, r1, r3
 8015610:	fb92 f3f3 	sdiv	r3, r2, r3
                    indic_area.y1 =
 8015614:	b21b      	sxth	r3, r3
 8015616:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                }

                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 801561a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801561e:	b29a      	uxth	r2, r3
 8015620:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8015624:	b29b      	uxth	r3, r3
 8015626:	1ad3      	subs	r3, r2, r3
 8015628:	b29b      	uxth	r3, r3
 801562a:	3301      	adds	r3, #1
 801562c:	b29b      	uxth	r3, r3
 801562e:	b21b      	sxth	r3, r3
 8015630:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8015634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015636:	7b9b      	ldrb	r3, [r3, #14]
 8015638:	f003 0301 	and.w	r3, r3, #1
 801563c:	b2db      	uxtb	r3, r3
 801563e:	2b00      	cmp	r3, #0
 8015640:	d036      	beq.n	80156b0 <lv_bar_design+0x424>
 8015642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015648:	2b00      	cmp	r3, #0
 801564a:	da31      	bge.n	80156b0 <lv_bar_design+0x424>
 801564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801564e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015652:	2b00      	cmp	r3, #0
 8015654:	dd2c      	ble.n	80156b0 <lv_bar_design+0x424>
                    /*Calculate the coordinate of the zero point*/
                    lv_coord_t zero;
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8015656:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801565a:	b29a      	uxth	r2, r3
 801565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801565e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015662:	425b      	negs	r3, r3
 8015664:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8015668:	fb01 f103 	mul.w	r1, r1, r3
 801566c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801566e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801567a:	1ac3      	subs	r3, r0, r3
 801567c:	fb91 f3f3 	sdiv	r3, r1, r3
 8015680:	b29b      	uxth	r3, r3
 8015682:	1ad3      	subs	r3, r2, r3
 8015684:	b29b      	uxth	r3, r3
 8015686:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                    if(indic_area.y1 < zero)
 801568a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801568e:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8015692:	429a      	cmp	r2, r3
 8015694:	dd04      	ble.n	80156a0 <lv_bar_design+0x414>
                        indic_area.y2 = zero;
 8015696:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801569a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801569e:	e007      	b.n	80156b0 <lv_bar_design+0x424>
                    else {
                        indic_area.y2 = indic_area.y1;
 80156a0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80156a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                        indic_area.y1 = zero;
 80156a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80156ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
            }

            /*Draw the indicator*/
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 80156b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80156b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80156b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80156ba:	68b9      	ldr	r1, [r7, #8]
 80156bc:	f7f7 fa97 	bl	800cbee <lv_draw_rect>
 80156c0:	e027      	b.n	8015712 <lv_bar_design+0x486>
        }
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80156c2:	79fb      	ldrb	r3, [r7, #7]
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d124      	bne.n	8015712 <lv_bar_design+0x486>
#if LV_USE_GROUP
        /*Draw the border*/
        if(lv_obj_is_focused(bar)) {
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	f7f1 fdf4 	bl	80072b6 <lv_obj_is_focused>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d01e      	beq.n	8015712 <lv_bar_design+0x486>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f7f1 fd88 	bl	80071ea <lv_obj_get_opa_scale>
 80156da:	4603      	mov	r3, r0
 80156dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80156e0:	2100      	movs	r1, #0
 80156e2:	68f8      	ldr	r0, [r7, #12]
 80156e4:	f7ff fdae 	bl	8015244 <lv_bar_get_style>
 80156e8:	67b8      	str	r0, [r7, #120]	; 0x78
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 80156ea:	f107 0314 	add.w	r3, r7, #20
 80156ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7f3 f837 	bl	8008764 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 80156f6:	2300      	movs	r3, #0
 80156f8:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 80156fa:	2300      	movs	r3, #0
 80156fc:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f103 0010 	add.w	r0, r3, #16
 8015704:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015708:	f107 0214 	add.w	r2, r7, #20
 801570c:	68b9      	ldr	r1, [r7, #8]
 801570e:	f7f7 fa6e 	bl	800cbee <lv_draw_rect>
        }
#endif
    }
    return true;
 8015712:	2301      	movs	r3, #1
}
 8015714:	4618      	mov	r0, r3
 8015716:	3780      	adds	r7, #128	; 0x80
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b088      	sub	sp, #32
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	460b      	mov	r3, r1
 8015726:	607a      	str	r2, [r7, #4]
 8015728:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 801572a:	4b21      	ldr	r3, [pc, #132]	; (80157b0 <lv_bar_signal+0x94>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	7af9      	ldrb	r1, [r7, #11]
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	68f8      	ldr	r0, [r7, #12]
 8015734:	4798      	blx	r3
 8015736:	4603      	mov	r3, r0
 8015738:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801573a:	7fbb      	ldrb	r3, [r7, #30]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d001      	beq.n	8015744 <lv_bar_signal+0x28>
 8015740:	7fbb      	ldrb	r3, [r7, #30]
 8015742:	e031      	b.n	80157a8 <lv_bar_signal+0x8c>

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8015744:	7afb      	ldrb	r3, [r7, #11]
 8015746:	2b05      	cmp	r3, #5
 8015748:	d112      	bne.n	8015770 <lv_bar_signal+0x54>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
 801574a:	2101      	movs	r1, #1
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f7ff fd79 	bl	8015244 <lv_bar_get_style>
 8015752:	6178      	str	r0, [r7, #20]
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8015760:	429a      	cmp	r2, r3
 8015762:	dd20      	ble.n	80157a6 <lv_bar_signal+0x8a>
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	869a      	strh	r2, [r3, #52]	; 0x34
 801576e:	e01a      	b.n	80157a6 <lv_bar_signal+0x8a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015770:	7afb      	ldrb	r3, [r7, #11]
 8015772:	2b06      	cmp	r3, #6
 8015774:	d117      	bne.n	80157a6 <lv_bar_signal+0x8a>
        lv_obj_type_t * buf = param;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801577a:	2300      	movs	r3, #0
 801577c:	77fb      	strb	r3, [r7, #31]
 801577e:	e008      	b.n	8015792 <lv_bar_signal+0x76>
            if(buf->type[i] == NULL) break;
 8015780:	7ffa      	ldrb	r2, [r7, #31]
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d006      	beq.n	801579a <lv_bar_signal+0x7e>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801578c:	7ffb      	ldrb	r3, [r7, #31]
 801578e:	3301      	adds	r3, #1
 8015790:	77fb      	strb	r3, [r7, #31]
 8015792:	7ffb      	ldrb	r3, [r7, #31]
 8015794:	2b06      	cmp	r3, #6
 8015796:	d9f3      	bls.n	8015780 <lv_bar_signal+0x64>
 8015798:	e000      	b.n	801579c <lv_bar_signal+0x80>
            if(buf->type[i] == NULL) break;
 801579a:	bf00      	nop
        }
        buf->type[i] = "lv_bar";
 801579c:	7ffa      	ldrb	r2, [r7, #31]
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	4904      	ldr	r1, [pc, #16]	; (80157b4 <lv_bar_signal+0x98>)
 80157a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80157a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3720      	adds	r7, #32
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	20002aa4 	.word	0x20002aa4
 80157b4:	08029cf0 	.word	0x08029cf0

080157b8 <lv_bar_anim>:

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	460b      	mov	r3, r1
 80157c2:	807b      	strh	r3, [r7, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f7f1 fd5e 	bl	8007286 <lv_obj_get_ext_attr>
 80157ca:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = value;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	887a      	ldrh	r2, [r7, #2]
 80157d0:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(bar);
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f7f0 fb2b 	bl	8005e2e <lv_obj_invalidate>
}
 80157d8:	bf00      	nop
 80157da:	3710      	adds	r7, #16
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7f1 fd4a 	bl	8007286 <lv_obj_get_ext_attr>
 80157f2:	60f8      	str	r0, [r7, #12]
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157fa:	815a      	strh	r2, [r3, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6818      	ldr	r0, [r3, #0]
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015806:	2200      	movs	r2, #0
 8015808:	4619      	mov	r1, r3
 801580a:	f7ff fbf3 	bl	8014ff4 <lv_bar_set_value>
}
 801580e:	bf00      	nop
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <lv_btn_set_layout>:
 * Set the layout on a button
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
 8015816:	b580      	push	{r7, lr}
 8015818:	b082      	sub	sp, #8
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
 801581e:	460b      	mov	r3, r1
 8015820:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 8015822:	78fb      	ldrb	r3, [r7, #3]
 8015824:	4619      	mov	r1, r3
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f002 fb72 	bl	8017f10 <lv_cont_set_layout>
}
 801582c:	bf00      	nop
 801582e:	3708      	adds	r7, #8
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <lv_btn_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b086      	sub	sp, #24
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button create started");

    lv_obj_t * new_btn;

    new_btn = lv_cont_create(par, copy);
 801583e:	6839      	ldr	r1, [r7, #0]
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f002 fabb 	bl	8017dbc <lv_cont_create>
 8015846:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btn);
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d100      	bne.n	8015850 <lv_btn_create+0x1c>
 801584e:	e7fe      	b.n	801584e <lv_btn_create+0x1a>
    if(new_btn == NULL) return NULL;
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d101      	bne.n	801585a <lv_btn_create+0x26>
 8015856:	2300      	movs	r3, #0
 8015858:	e0a5      	b.n	80159a6 <lv_btn_create+0x172>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 801585a:	4b55      	ldr	r3, [pc, #340]	; (80159b0 <lv_btn_create+0x17c>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d105      	bne.n	801586e <lv_btn_create+0x3a>
 8015862:	6978      	ldr	r0, [r7, #20]
 8015864:	f7f1 fcf7 	bl	8007256 <lv_obj_get_signal_cb>
 8015868:	4602      	mov	r2, r0
 801586a:	4b51      	ldr	r3, [pc, #324]	; (80159b0 <lv_btn_create+0x17c>)
 801586c:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 801586e:	4b51      	ldr	r3, [pc, #324]	; (80159b4 <lv_btn_create+0x180>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d105      	bne.n	8015882 <lv_btn_create+0x4e>
 8015876:	6978      	ldr	r0, [r7, #20]
 8015878:	f7f1 fcf9 	bl	800726e <lv_obj_get_design_cb>
 801587c:	4602      	mov	r2, r0
 801587e:	4b4d      	ldr	r3, [pc, #308]	; (80159b4 <lv_btn_create+0x180>)
 8015880:	601a      	str	r2, [r3, #0]

    /*Allocate the extended data*/
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8015882:	211c      	movs	r1, #28
 8015884:	6978      	ldr	r0, [r7, #20]
 8015886:	f7f1 fb31 	bl	8006eec <lv_obj_allocate_ext_attr>
 801588a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d100      	bne.n	8015894 <lv_btn_create+0x60>
 8015892:	e7fe      	b.n	8015892 <lv_btn_create+0x5e>
    if(ext == NULL) return NULL;
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d101      	bne.n	801589e <lv_btn_create+0x6a>
 801589a:	2300      	movs	r3, #0
 801589c:	e083      	b.n	80159a6 <lv_btn_create+0x172>

    ext->state = LV_BTN_STATE_REL;
 801589e:	693a      	ldr	r2, [r7, #16]
 80158a0:	7e13      	ldrb	r3, [r2, #24]
 80158a2:	f36f 0302 	bfc	r3, #0, #3
 80158a6:	7613      	strb	r3, [r2, #24]

    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	4a43      	ldr	r2, [pc, #268]	; (80159b8 <lv_btn_create+0x184>)
 80158ac:	605a      	str	r2, [r3, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	4a42      	ldr	r2, [pc, #264]	; (80159bc <lv_btn_create+0x188>)
 80158b2:	609a      	str	r2, [r3, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	4a42      	ldr	r2, [pc, #264]	; (80159c0 <lv_btn_create+0x18c>)
 80158b8:	60da      	str	r2, [r3, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	4a41      	ldr	r2, [pc, #260]	; (80159c4 <lv_btn_create+0x190>)
 80158be:	611a      	str	r2, [r3, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	4a41      	ldr	r2, [pc, #260]	; (80159c8 <lv_btn_create+0x194>)
 80158c4:	615a      	str	r2, [r3, #20]

    ext->toggle = 0;
 80158c6:	693a      	ldr	r2, [r7, #16]
 80158c8:	7e13      	ldrb	r3, [r2, #24]
 80158ca:	f36f 03c3 	bfc	r3, #3, #1
 80158ce:	7613      	strb	r3, [r2, #24]
    ext->ink_in_time   = 0;
    ext->ink_wait_time = 0;
    ext->ink_out_time  = 0;
#endif

    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 80158d0:	493e      	ldr	r1, [pc, #248]	; (80159cc <lv_btn_create+0x198>)
 80158d2:	6978      	ldr	r0, [r7, #20]
 80158d4:	f7f1 faee 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 80158d8:	493d      	ldr	r1, [pc, #244]	; (80159d0 <lv_btn_create+0x19c>)
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f7f1 faf8 	bl	8006ed0 <lv_obj_set_design_cb>

    /*If no copy do the basic initialization*/
    if(copy == NULL) {
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d13b      	bne.n	801595e <lv_btn_create+0x12a>
        /*Set layout if the button is not a screen*/
        if(par != NULL) {
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d003      	beq.n	80158f4 <lv_btn_create+0xc0>
            lv_btn_set_layout(new_btn, LV_LAYOUT_CENTER);
 80158ec:	2101      	movs	r1, #1
 80158ee:	6978      	ldr	r0, [r7, #20]
 80158f0:	f7ff ff91 	bl	8015816 <lv_btn_set_layout>
        }

        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 80158f4:	2101      	movs	r1, #1
 80158f6:	6978      	ldr	r0, [r7, #20]
 80158f8:	f7f1 f9bb 	bl	8006c72 <lv_obj_set_click>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80158fc:	f009 fb46 	bl	801ef8c <lv_theme_get_current>
 8015900:	60b8      	str	r0, [r7, #8]
        if(th) {
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d023      	beq.n	8015950 <lv_btn_create+0x11c>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	691b      	ldr	r3, [r3, #16]
 801590c:	461a      	mov	r2, r3
 801590e:	2100      	movs	r1, #0
 8015910:	6978      	ldr	r0, [r7, #20]
 8015912:	f000 f89d 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	695b      	ldr	r3, [r3, #20]
 801591a:	461a      	mov	r2, r3
 801591c:	2101      	movs	r1, #1
 801591e:	6978      	ldr	r0, [r7, #20]
 8015920:	f000 f896 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	699b      	ldr	r3, [r3, #24]
 8015928:	461a      	mov	r2, r3
 801592a:	2102      	movs	r1, #2
 801592c:	6978      	ldr	r0, [r7, #20]
 801592e:	f000 f88f 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	69db      	ldr	r3, [r3, #28]
 8015936:	461a      	mov	r2, r3
 8015938:	2103      	movs	r1, #3
 801593a:	6978      	ldr	r0, [r7, #20]
 801593c:	f000 f888 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	6a1b      	ldr	r3, [r3, #32]
 8015944:	461a      	mov	r2, r3
 8015946:	2104      	movs	r1, #4
 8015948:	6978      	ldr	r0, [r7, #20]
 801594a:	f000 f881 	bl	8015a50 <lv_btn_set_style>
 801594e:	e029      	b.n	80159a4 <lv_btn_create+0x170>
        } else {
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	4619      	mov	r1, r3
 8015956:	6978      	ldr	r0, [r7, #20]
 8015958:	f7f1 f965 	bl	8006c26 <lv_obj_set_style>
 801595c:	e022      	b.n	80159a4 <lv_btn_create+0x170>
        }
    }
    /*Copy 'copy'*/
    else {
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801595e:	6838      	ldr	r0, [r7, #0]
 8015960:	f7f1 fc91 	bl	8007286 <lv_obj_get_ext_attr>
 8015964:	60f8      	str	r0, [r7, #12]
        ext->state              = copy_ext->state;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	7e1b      	ldrb	r3, [r3, #24]
 801596a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801596e:	b2d9      	uxtb	r1, r3
 8015970:	693a      	ldr	r2, [r7, #16]
 8015972:	7e13      	ldrb	r3, [r2, #24]
 8015974:	f361 0302 	bfi	r3, r1, #0, #3
 8015978:	7613      	strb	r3, [r2, #24]
        ext->toggle             = copy_ext->toggle;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	7e1b      	ldrb	r3, [r3, #24]
 801597e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015982:	b2d9      	uxtb	r1, r3
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	7e13      	ldrb	r3, [r2, #24]
 8015988:	f361 03c3 	bfi	r3, r1, #3, #1
 801598c:	7613      	strb	r3, [r2, #24]
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
        ext->ink_in_time   = copy_ext->ink_in_time;
        ext->ink_wait_time = copy_ext->ink_wait_time;
        ext->ink_out_time  = copy_ext->ink_out_time;
#endif
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	1d18      	adds	r0, r3, #4
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	3304      	adds	r3, #4
 8015996:	2214      	movs	r2, #20
 8015998:	4619      	mov	r1, r3
 801599a:	f011 fc43 	bl	8027224 <memcpy>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_btn);
 801599e:	6978      	ldr	r0, [r7, #20]
 80159a0:	f7f1 f953 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("button created");

    return new_btn;
 80159a4:	697b      	ldr	r3, [r7, #20]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3718      	adds	r7, #24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	20002aa8 	.word	0x20002aa8
 80159b4:	20002aac 	.word	0x20002aac
 80159b8:	20006b0c 	.word	0x20006b0c
 80159bc:	20006b48 	.word	0x20006b48
 80159c0:	20006cb0 	.word	0x20006cb0
 80159c4:	20006d28 	.word	0x20006d28
 80159c8:	20006bfc 	.word	0x20006bfc
 80159cc:	08015b71 	.word	0x08015b71
 80159d0:	08015b25 	.word	0x08015b25

080159d4 <lv_btn_set_toggle>:
 * Enable the toggled states
 * @param btn pointer to a button object
 * @param tgl true: enable toggled states, false: disable
 */
void lv_btn_set_toggle(lv_obj_t * btn, bool tgl)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	460b      	mov	r3, r1
 80159de:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f7f1 fc50 	bl	8007286 <lv_obj_get_ext_attr>
 80159e6:	60f8      	str	r0, [r7, #12]

    ext->toggle = tgl != false ? 1 : 0;
 80159e8:	78f9      	ldrb	r1, [r7, #3]
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	7e13      	ldrb	r3, [r2, #24]
 80159ee:	f361 03c3 	bfi	r3, r1, #3, #1
 80159f2:	7613      	strb	r3, [r2, #24]
}
 80159f4:	bf00      	nop
 80159f6:	3710      	adds	r7, #16
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <lv_btn_set_state>:
 * Set the state of the button
 * @param btn pointer to a button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b084      	sub	sp, #16
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	460b      	mov	r3, r1
 8015a06:	70fb      	strb	r3, [r7, #3]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7f1 fc3c 	bl	8007286 <lv_obj_get_ext_attr>
 8015a0e:	60f8      	str	r0, [r7, #12]
    if(ext->state != state) {
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	7e1b      	ldrb	r3, [r3, #24]
 8015a14:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	78fb      	ldrb	r3, [r7, #3]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d011      	beq.n	8015a46 <lv_btn_set_state+0x4a>
        ext->state = state;
 8015a22:	78fb      	ldrb	r3, [r7, #3]
 8015a24:	f003 0307 	and.w	r3, r3, #7
 8015a28:	b2d9      	uxtb	r1, r3
 8015a2a:	68fa      	ldr	r2, [r7, #12]
 8015a2c:	7e13      	ldrb	r3, [r2, #24]
 8015a2e:	f361 0302 	bfi	r3, r1, #0, #3
 8015a32:	7613      	strb	r3, [r2, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 8015a34:	78fb      	ldrb	r3, [r7, #3]
 8015a36:	68fa      	ldr	r2, [r7, #12]
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4413      	add	r3, r2
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7f1 f8f0 	bl	8006c26 <lv_obj_set_style>
    }
}
 8015a46:	bf00      	nop
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
	...

08015a50 <lv_btn_set_style>:
 * @param btn pointer to a button object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btn_set_style(lv_obj_t * btn, lv_btn_style_t type, const lv_style_t * style)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b086      	sub	sp, #24
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	72fb      	strb	r3, [r7, #11]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	f7f1 fc11 	bl	8007286 <lv_obj_get_ext_attr>
 8015a64:	6178      	str	r0, [r7, #20]

    switch(type) {
 8015a66:	7afb      	ldrb	r3, [r7, #11]
 8015a68:	2b04      	cmp	r3, #4
 8015a6a:	d821      	bhi.n	8015ab0 <lv_btn_set_style+0x60>
 8015a6c:	a201      	add	r2, pc, #4	; (adr r2, 8015a74 <lv_btn_set_style+0x24>)
 8015a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a72:	bf00      	nop
 8015a74:	08015a89 	.word	0x08015a89
 8015a78:	08015a91 	.word	0x08015a91
 8015a7c:	08015a99 	.word	0x08015a99
 8015a80:	08015aa1 	.word	0x08015aa1
 8015a84:	08015aa9 	.word	0x08015aa9
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8015a88:	697b      	ldr	r3, [r7, #20]
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	605a      	str	r2, [r3, #4]
 8015a8e:	e00f      	b.n	8015ab0 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	609a      	str	r2, [r3, #8]
 8015a96:	e00b      	b.n	8015ab0 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	60da      	str	r2, [r3, #12]
 8015a9e:	e007      	b.n	8015ab0 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	611a      	str	r2, [r3, #16]
 8015aa6:	e003      	b.n	8015ab0 <lv_btn_set_style+0x60>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	615a      	str	r2, [r3, #20]
 8015aae:	bf00      	nop
    }

    /*Refresh the object with the new style*/
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	7e1b      	ldrb	r3, [r3, #24]
 8015ab4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015ab8:	b2db      	uxtb	r3, r3
 8015aba:	697a      	ldr	r2, [r7, #20]
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	4413      	add	r3, r2
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	68f8      	ldr	r0, [r7, #12]
 8015ac6:	f7f1 f8ae 	bl	8006c26 <lv_obj_set_style>
}
 8015aca:	bf00      	nop
 8015acc:	3718      	adds	r7, #24
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	bf00      	nop

08015ad4 <lv_btn_get_state>:
 * Get the current state of the button
 * @param btn pointer to a button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7f1 fbd2 	bl	8007286 <lv_obj_get_ext_attr>
 8015ae2:	60f8      	str	r0, [r7, #12]
    return ext->state;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	7e1b      	ldrb	r3, [r3, #24]
 8015ae8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015aec:	b2db      	uxtb	r3, r3
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3710      	adds	r7, #16
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <lv_btn_get_toggle>:
 * Get the toggle enable attribute of the button
 * @param btn pointer to a button object
 * @return ture: toggle enabled, false: disabled
 */
bool lv_btn_get_toggle(const lv_obj_t * btn)
{
 8015af6:	b580      	push	{r7, lr}
 8015af8:	b084      	sub	sp, #16
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7f1 fbc1 	bl	8007286 <lv_obj_get_ext_attr>
 8015b04:	60f8      	str	r0, [r7, #12]

    return ext->toggle != 0 ? true : false;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	7e1b      	ldrb	r3, [r3, #24]
 8015b0a:	08db      	lsrs	r3, r3, #3
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	f003 0301 	and.w	r3, r3, #1
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	bf14      	ite	ne
 8015b16:	2301      	movne	r3, #1
 8015b18:	2300      	moveq	r3, #0
 8015b1a:	b2db      	uxtb	r3, r3
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3710      	adds	r7, #16
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b084      	sub	sp, #16
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	60b9      	str	r1, [r7, #8]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8015b32:	79fb      	ldrb	r3, [r7, #7]
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d101      	bne.n	8015b3c <lv_btn_design+0x18>
        return false;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	e013      	b.n	8015b64 <lv_btn_design+0x40>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8015b3c:	79fb      	ldrb	r3, [r7, #7]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d106      	bne.n	8015b50 <lv_btn_design+0x2c>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
            }
        }
#else
        ancestor_design(btn, mask, mode);
 8015b42:	4b0a      	ldr	r3, [pc, #40]	; (8015b6c <lv_btn_design+0x48>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	79fa      	ldrb	r2, [r7, #7]
 8015b48:	68b9      	ldr	r1, [r7, #8]
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	4798      	blx	r3
 8015b4e:	e008      	b.n	8015b62 <lv_btn_design+0x3e>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8015b50:	79fb      	ldrb	r3, [r7, #7]
 8015b52:	2b01      	cmp	r3, #1
 8015b54:	d105      	bne.n	8015b62 <lv_btn_design+0x3e>
        ancestor_design(btn, mask, mode);
 8015b56:	4b05      	ldr	r3, [pc, #20]	; (8015b6c <lv_btn_design+0x48>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	79fa      	ldrb	r2, [r7, #7]
 8015b5c:	68b9      	ldr	r1, [r7, #8]
 8015b5e:	68f8      	ldr	r0, [r7, #12]
 8015b60:	4798      	blx	r3
    }

    return true;
 8015b62:	2301      	movs	r3, #1
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3710      	adds	r7, #16
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	20002aac 	.word	0x20002aac

08015b70 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b08c      	sub	sp, #48	; 0x30
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	60f8      	str	r0, [r7, #12]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	607a      	str	r2, [r7, #4]
 8015b7c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8015b7e:	4bb4      	ldr	r3, [pc, #720]	; (8015e50 <lv_btn_signal+0x2e0>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	7af9      	ldrb	r1, [r7, #11]
 8015b84:	687a      	ldr	r2, [r7, #4]
 8015b86:	68f8      	ldr	r0, [r7, #12]
 8015b88:	4798      	blx	r3
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(res != LV_RES_OK) return res;
 8015b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d002      	beq.n	8015b9e <lv_btn_signal+0x2e>
 8015b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b9c:	e165      	b.n	8015e6a <lv_btn_signal+0x2fa>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015b9e:	68f8      	ldr	r0, [r7, #12]
 8015ba0:	f7f1 fb71 	bl	8007286 <lv_obj_get_ext_attr>
 8015ba4:	62b8      	str	r0, [r7, #40]	; 0x28
    bool tgl           = lv_btn_get_toggle(btn);
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f7ff ffa5 	bl	8015af6 <lv_btn_get_toggle>
 8015bac:	4603      	mov	r3, r0
 8015bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(sign == LV_SIGNAL_PRESSED) {
 8015bb2:	7afb      	ldrb	r3, [r7, #11]
 8015bb4:	2b07      	cmp	r3, #7
 8015bb6:	d118      	bne.n	8015bea <lv_btn_signal+0x7a>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 8015bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bba:	7e1b      	ldrb	r3, [r3, #24]
 8015bbc:	f003 0307 	and.w	r3, r3, #7
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d104      	bne.n	8015bd0 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 8015bc6:	2101      	movs	r1, #1
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f7ff ff17 	bl	80159fc <lv_btn_set_state>
 8015bce:	e14a      	b.n	8015e66 <lv_btn_signal+0x2f6>
#if LV_USE_ANIMATION && LV_BTN_INK_EFFECT
            ink_bg_state  = LV_BTN_STATE_REL;
            ink_top_state = LV_BTN_STATE_PR;
#endif
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8015bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bd2:	7e1b      	ldrb	r3, [r3, #24]
 8015bd4:	f003 0307 	and.w	r3, r3, #7
 8015bd8:	b2db      	uxtb	r3, r3
 8015bda:	2b02      	cmp	r3, #2
 8015bdc:	f040 8143 	bne.w	8015e66 <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 8015be0:	2103      	movs	r1, #3
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f7ff ff0a 	bl	80159fc <lv_btn_set_state>
 8015be8:	e13d      	b.n	8015e66 <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 8015bea:	7afb      	ldrb	r3, [r7, #11]
 8015bec:	2b09      	cmp	r3, #9
 8015bee:	d118      	bne.n	8015c22 <lv_btn_signal+0xb2>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
 8015bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf2:	7e1b      	ldrb	r3, [r3, #24]
 8015bf4:	f003 0307 	and.w	r3, r3, #7
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	d104      	bne.n	8015c08 <lv_btn_signal+0x98>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015bfe:	2100      	movs	r1, #0
 8015c00:	68f8      	ldr	r0, [r7, #12]
 8015c02:	f7ff fefb 	bl	80159fc <lv_btn_set_state>
 8015c06:	e12e      	b.n	8015e66 <lv_btn_signal+0x2f6>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 8015c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c0a:	7e1b      	ldrb	r3, [r3, #24]
 8015c0c:	f003 0307 	and.w	r3, r3, #7
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b03      	cmp	r3, #3
 8015c14:	f040 8127 	bne.w	8015e66 <lv_btn_signal+0x2f6>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015c18:	2102      	movs	r1, #2
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	f7ff feee 	bl	80159fc <lv_btn_set_state>
 8015c20:	e121      	b.n	8015e66 <lv_btn_signal+0x2f6>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8015c22:	7afb      	ldrb	r3, [r7, #11]
 8015c24:	2b08      	cmp	r3, #8
 8015c26:	d11f      	bne.n	8015c68 <lv_btn_signal+0xf8>
        /*When the button begins to drag revert pressed states to released*/
        if(lv_indev_is_dragging(param) != false) {
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f7ef fcf9 	bl	8005620 <lv_indev_is_dragging>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f000 8118 	beq.w	8015e66 <lv_btn_signal+0x2f6>
            if(ext->state == LV_BTN_STATE_PR)
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	7e1b      	ldrb	r3, [r3, #24]
 8015c3a:	f003 0307 	and.w	r3, r3, #7
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	2b01      	cmp	r3, #1
 8015c42:	d104      	bne.n	8015c4e <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015c44:	2100      	movs	r1, #0
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f7ff fed8 	bl	80159fc <lv_btn_set_state>
 8015c4c:	e10b      	b.n	8015e66 <lv_btn_signal+0x2f6>
            else if(ext->state == LV_BTN_STATE_TGL_PR)
 8015c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c50:	7e1b      	ldrb	r3, [r3, #24]
 8015c52:	f003 0307 	and.w	r3, r3, #7
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	2b03      	cmp	r3, #3
 8015c5a:	f040 8104 	bne.w	8015e66 <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015c5e:	2102      	movs	r1, #2
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff fecb 	bl	80159fc <lv_btn_set_state>
 8015c66:	e0fe      	b.n	8015e66 <lv_btn_signal+0x2f6>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 8015c68:	7afb      	ldrb	r3, [r7, #11]
 8015c6a:	2b0a      	cmp	r3, #10
 8015c6c:	f040 8087 	bne.w	8015d7e <lv_btn_signal+0x20e>
        /*If not dragged and it was not long press action then
         *change state and run the action*/
        if(lv_indev_is_dragging(param) == false) {
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7ef fcd5 	bl	8005620 <lv_indev_is_dragging>
 8015c76:	4603      	mov	r3, r0
 8015c78:	f083 0301 	eor.w	r3, r3, #1
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d065      	beq.n	8015d4e <lv_btn_signal+0x1de>
            uint32_t toggled = 0;
 8015c82:	2300      	movs	r3, #0
 8015c84:	61bb      	str	r3, [r7, #24]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8015c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c88:	7e1b      	ldrb	r3, [r3, #24]
 8015c8a:	f003 0307 	and.w	r3, r3, #7
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d10d      	bne.n	8015cb0 <lv_btn_signal+0x140>
 8015c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c98:	f083 0301 	eor.w	r3, r3, #1
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d006      	beq.n	8015cb0 <lv_btn_signal+0x140>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f7ff fea9 	bl	80159fc <lv_btn_set_state>
                toggled = 0;
 8015caa:	2300      	movs	r3, #0
 8015cac:	61bb      	str	r3, [r7, #24]
 8015cae:	e037      	b.n	8015d20 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8015cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb2:	7e1b      	ldrb	r3, [r3, #24]
 8015cb4:	f003 0307 	and.w	r3, r3, #7
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	2b03      	cmp	r3, #3
 8015cbc:	d10d      	bne.n	8015cda <lv_btn_signal+0x16a>
 8015cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cc2:	f083 0301 	eor.w	r3, r3, #1
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d006      	beq.n	8015cda <lv_btn_signal+0x16a>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015ccc:	2102      	movs	r1, #2
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	f7ff fe94 	bl	80159fc <lv_btn_set_state>
                toggled = 1;
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	61bb      	str	r3, [r7, #24]
 8015cd8:	e022      	b.n	8015d20 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_PR && tgl == true) {
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	7e1b      	ldrb	r3, [r3, #24]
 8015cde:	f003 0307 	and.w	r3, r3, #7
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d10a      	bne.n	8015cfe <lv_btn_signal+0x18e>
 8015ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d006      	beq.n	8015cfe <lv_btn_signal+0x18e>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015cf0:	2102      	movs	r1, #2
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7ff fe82 	bl	80159fc <lv_btn_set_state>
                toggled = 1;
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	61bb      	str	r3, [r7, #24]
 8015cfc:	e010      	b.n	8015d20 <lv_btn_signal+0x1b0>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == true) {
 8015cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d00:	7e1b      	ldrb	r3, [r3, #24]
 8015d02:	f003 0307 	and.w	r3, r3, #7
 8015d06:	b2db      	uxtb	r3, r3
 8015d08:	2b03      	cmp	r3, #3
 8015d0a:	d109      	bne.n	8015d20 <lv_btn_signal+0x1b0>
 8015d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d005      	beq.n	8015d20 <lv_btn_signal+0x1b0>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015d14:	2100      	movs	r1, #0
 8015d16:	68f8      	ldr	r0, [r7, #12]
 8015d18:	f7ff fe70 	bl	80159fc <lv_btn_set_state>
                toggled = 0;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	61bb      	str	r3, [r7, #24]
            }

            if(tgl) {
 8015d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	f000 809e 	beq.w	8015e66 <lv_btn_signal+0x2f6>
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8015d2a:	f107 0318 	add.w	r3, r7, #24
 8015d2e:	461a      	mov	r2, r3
 8015d30:	210e      	movs	r1, #14
 8015d32:	68f8      	ldr	r0, [r7, #12]
 8015d34:	f7f1 f82d 	bl	8006d92 <lv_event_send>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d42:	2b01      	cmp	r3, #1
 8015d44:	f000 808f 	beq.w	8015e66 <lv_btn_signal+0x2f6>
 8015d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d4c:	e08d      	b.n	8015e6a <lv_btn_signal+0x2fa>
            }

        } else { /*If dragged change back the state*/
            if(ext->state == LV_BTN_STATE_PR) {
 8015d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d50:	7e1b      	ldrb	r3, [r3, #24]
 8015d52:	f003 0307 	and.w	r3, r3, #7
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	2b01      	cmp	r3, #1
 8015d5a:	d104      	bne.n	8015d66 <lv_btn_signal+0x1f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f7ff fe4c 	bl	80159fc <lv_btn_set_state>
 8015d64:	e07f      	b.n	8015e66 <lv_btn_signal+0x2f6>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 8015d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d68:	7e1b      	ldrb	r3, [r3, #24]
 8015d6a:	f003 0307 	and.w	r3, r3, #7
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	2b03      	cmp	r3, #3
 8015d72:	d178      	bne.n	8015e66 <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015d74:	2102      	movs	r1, #2
 8015d76:	68f8      	ldr	r0, [r7, #12]
 8015d78:	f7ff fe40 	bl	80159fc <lv_btn_set_state>
 8015d7c:	e073      	b.n	8015e66 <lv_btn_signal+0x2f6>
            a.repeat         = 0;
            a.repeat_pause   = 0;
            lv_anim_create(&a);
        }
#endif
    } else if(sign == LV_SIGNAL_CONTROL) {
 8015d7e:	7afb      	ldrb	r3, [r7, #11]
 8015d80:	2b11      	cmp	r3, #17
 8015d82:	d148      	bne.n	8015e16 <lv_btn_signal+0x2a6>
        char c = *((char *)param);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	77fb      	strb	r3, [r7, #31]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8015d8a:	7ffb      	ldrb	r3, [r7, #31]
 8015d8c:	2b13      	cmp	r3, #19
 8015d8e:	d002      	beq.n	8015d96 <lv_btn_signal+0x226>
 8015d90:	7ffb      	ldrb	r3, [r7, #31]
 8015d92:	2b11      	cmp	r3, #17
 8015d94:	d11c      	bne.n	8015dd0 <lv_btn_signal+0x260>
            if(lv_btn_get_toggle(btn)) {
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f7ff fead 	bl	8015af6 <lv_btn_get_toggle>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d060      	beq.n	8015e64 <lv_btn_signal+0x2f4>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015da2:	2102      	movs	r1, #2
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f7ff fe29 	bl	80159fc <lv_btn_set_state>

                uint32_t state = 1;
 8015daa:	2301      	movs	r3, #1
 8015dac:	617b      	str	r3, [r7, #20]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8015dae:	f107 0314 	add.w	r3, r7, #20
 8015db2:	461a      	mov	r2, r3
 8015db4:	210e      	movs	r1, #14
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f7f0 ffeb 	bl	8006d92 <lv_event_send>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dc6:	2b01      	cmp	r3, #1
 8015dc8:	d04c      	beq.n	8015e64 <lv_btn_signal+0x2f4>
 8015dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dce:	e04c      	b.n	8015e6a <lv_btn_signal+0x2fa>
            }

        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8015dd0:	7ffb      	ldrb	r3, [r7, #31]
 8015dd2:	2b14      	cmp	r3, #20
 8015dd4:	d002      	beq.n	8015ddc <lv_btn_signal+0x26c>
 8015dd6:	7ffb      	ldrb	r3, [r7, #31]
 8015dd8:	2b12      	cmp	r3, #18
 8015dda:	d144      	bne.n	8015e66 <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f7ff fe8a 	bl	8015af6 <lv_btn_get_toggle>
 8015de2:	4603      	mov	r3, r0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d03e      	beq.n	8015e66 <lv_btn_signal+0x2f6>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015de8:	2100      	movs	r1, #0
 8015dea:	68f8      	ldr	r0, [r7, #12]
 8015dec:	f7ff fe06 	bl	80159fc <lv_btn_set_state>

                uint32_t state = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	613b      	str	r3, [r7, #16]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8015df4:	f107 0310 	add.w	r3, r7, #16
 8015df8:	461a      	mov	r2, r3
 8015dfa:	210e      	movs	r1, #14
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f7f0 ffc8 	bl	8006d92 <lv_event_send>
 8015e02:	4603      	mov	r3, r0
 8015e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(res != LV_RES_OK) return res;
 8015e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d02a      	beq.n	8015e66 <lv_btn_signal+0x2f6>
 8015e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e14:	e029      	b.n	8015e6a <lv_btn_signal+0x2fa>
            }
        }
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8015e16:	7afb      	ldrb	r3, [r7, #11]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d024      	beq.n	8015e66 <lv_btn_signal+0x2f6>
        if(btn == ink_obj) {
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
            ink_obj = NULL;
        }
#endif
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015e1c:	7afb      	ldrb	r3, [r7, #11]
 8015e1e:	2b06      	cmp	r3, #6
 8015e20:	d121      	bne.n	8015e66 <lv_btn_signal+0x2f6>
        lv_obj_type_t * buf = param;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	623b      	str	r3, [r7, #32]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015e26:	2300      	movs	r3, #0
 8015e28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8015e2c:	e00b      	b.n	8015e46 <lv_btn_signal+0x2d6>
            if(buf->type[i] == NULL) break;
 8015e2e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015e32:	6a3b      	ldr	r3, [r7, #32]
 8015e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00b      	beq.n	8015e54 <lv_btn_signal+0x2e4>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015e3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015e40:	3301      	adds	r3, #1
 8015e42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8015e46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015e4a:	2b06      	cmp	r3, #6
 8015e4c:	d9ef      	bls.n	8015e2e <lv_btn_signal+0x2be>
 8015e4e:	e002      	b.n	8015e56 <lv_btn_signal+0x2e6>
 8015e50:	20002aa8 	.word	0x20002aa8
            if(buf->type[i] == NULL) break;
 8015e54:	bf00      	nop
        }
        buf->type[i] = "lv_btn";
 8015e56:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015e5a:	6a3b      	ldr	r3, [r7, #32]
 8015e5c:	4905      	ldr	r1, [pc, #20]	; (8015e74 <lv_btn_signal+0x304>)
 8015e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015e62:	e000      	b.n	8015e66 <lv_btn_signal+0x2f6>
            if(lv_btn_get_toggle(btn)) {
 8015e64:	bf00      	nop
    }

    return res;
 8015e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3730      	adds	r7, #48	; 0x30
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	08029cf8 	.word	0x08029cf8

08015e78 <lv_area_copy>:
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8015e82:	2208      	movs	r2, #8
 8015e84:	6839      	ldr	r1, [r7, #0]
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f011 f9cc 	bl	8027224 <memcpy>
}
 8015e8c:	bf00      	nop
 8015e8e:	3708      	adds	r7, #8
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <lv_area_get_width>:
{
 8015e94:	b480      	push	{r7}
 8015e96:	b083      	sub	sp, #12
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	b21b      	sxth	r3, r3
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	370c      	adds	r7, #12
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <lv_area_get_height>:
{
 8015ec2:	b480      	push	{r7}
 8015ec4:	b083      	sub	sp, #12
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015ed0:	b29a      	uxth	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	b29b      	uxth	r3, r3
 8015ede:	3301      	adds	r3, #1
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	b21b      	sxth	r3, r3
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	370c      	adds	r7, #12
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <lv_btnm_create>:
 * @param copy pointer to a button matrix object, if not NULL then the new object will be copied
 * from it
 * @return pointer to the created button matrix
 */
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b086      	sub	sp, #24
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button matrix create started");

    /*Create the ancestor object*/
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7ef fc59 	bl	80057b4 <lv_obj_create>
 8015f02:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btnm);
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d100      	bne.n	8015f0c <lv_btnm_create+0x1c>
 8015f0a:	e7fe      	b.n	8015f0a <lv_btnm_create+0x1a>
    if(new_btnm == NULL) return NULL;
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d101      	bne.n	8015f16 <lv_btnm_create+0x26>
 8015f12:	2300      	movs	r3, #0
 8015f14:	e0b9      	b.n	801608a <lv_btnm_create+0x19a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 8015f16:	4b5f      	ldr	r3, [pc, #380]	; (8016094 <lv_btnm_create+0x1a4>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d105      	bne.n	8015f2a <lv_btnm_create+0x3a>
 8015f1e:	6978      	ldr	r0, [r7, #20]
 8015f20:	f7f1 f999 	bl	8007256 <lv_obj_get_signal_cb>
 8015f24:	4602      	mov	r2, r0
 8015f26:	4b5b      	ldr	r3, [pc, #364]	; (8016094 <lv_btnm_create+0x1a4>)
 8015f28:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8015f2a:	2128      	movs	r1, #40	; 0x28
 8015f2c:	6978      	ldr	r0, [r7, #20]
 8015f2e:	f7f0 ffdd 	bl	8006eec <lv_obj_allocate_ext_attr>
 8015f32:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d100      	bne.n	8015f3c <lv_btnm_create+0x4c>
 8015f3a:	e7fe      	b.n	8015f3a <lv_btnm_create+0x4a>
    if(ext == NULL) return NULL;
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d101      	bne.n	8015f46 <lv_btnm_create+0x56>
 8015f42:	2300      	movs	r3, #0
 8015f44:	e0a1      	b.n	801608a <lv_btnm_create+0x19a>

    ext->btn_cnt                          = 0;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	841a      	strh	r2, [r3, #32]
    ext->btn_id_pr                        = LV_BTNM_BTN_NONE;
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f52:	845a      	strh	r2, [r3, #34]	; 0x22
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f5a:	849a      	strh	r2, [r3, #36]	; 0x24
    ext->button_areas                     = NULL;
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	605a      	str	r2, [r3, #4]
    ext->ctrl_bits                        = NULL;
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	2200      	movs	r2, #0
 8015f66:	609a      	str	r2, [r3, #8]
    ext->map_p                            = NULL;
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	601a      	str	r2, [r3, #0]
    ext->recolor                          = 0;
 8015f6e:	693a      	ldr	r2, [r7, #16]
 8015f70:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015f74:	f36f 0300 	bfc	r3, #0, #1
 8015f78:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->one_toggle                       = 0;
 8015f7c:	693a      	ldr	r2, [r7, #16]
 8015f7e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015f82:	f36f 0341 	bfc	r3, #1, #1
 8015f86:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	4a42      	ldr	r2, [pc, #264]	; (8016098 <lv_btnm_create+0x1a8>)
 8015f8e:	60da      	str	r2, [r3, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	4a42      	ldr	r2, [pc, #264]	; (801609c <lv_btnm_create+0x1ac>)
 8015f94:	611a      	str	r2, [r3, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	4a41      	ldr	r2, [pc, #260]	; (80160a0 <lv_btnm_create+0x1b0>)
 8015f9a:	615a      	str	r2, [r3, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	4a41      	ldr	r2, [pc, #260]	; (80160a4 <lv_btnm_create+0x1b4>)
 8015fa0:	619a      	str	r2, [r3, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	4a40      	ldr	r2, [pc, #256]	; (80160a8 <lv_btnm_create+0x1b8>)
 8015fa6:	61da      	str	r2, [r3, #28]

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 8015fa8:	4b40      	ldr	r3, [pc, #256]	; (80160ac <lv_btnm_create+0x1bc>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d105      	bne.n	8015fbc <lv_btnm_create+0xcc>
 8015fb0:	6978      	ldr	r0, [r7, #20]
 8015fb2:	f7f1 f95c 	bl	800726e <lv_obj_get_design_cb>
 8015fb6:	4602      	mov	r2, r0
 8015fb8:	4b3c      	ldr	r3, [pc, #240]	; (80160ac <lv_btnm_create+0x1bc>)
 8015fba:	601a      	str	r2, [r3, #0]

    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 8015fbc:	493c      	ldr	r1, [pc, #240]	; (80160b0 <lv_btnm_create+0x1c0>)
 8015fbe:	6978      	ldr	r0, [r7, #20]
 8015fc0:	f7f0 ff78 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 8015fc4:	493b      	ldr	r1, [pc, #236]	; (80160b4 <lv_btnm_create+0x1c4>)
 8015fc6:	6978      	ldr	r0, [r7, #20]
 8015fc8:	f7f0 ff82 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new button matrix object*/
    if(copy == NULL) {
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d145      	bne.n	801605e <lv_btnm_create+0x16e>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 8015fd2:	22c8      	movs	r2, #200	; 0xc8
 8015fd4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8015fd8:	6978      	ldr	r0, [r7, #20]
 8015fda:	f7f0 f8dc 	bl	8006196 <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 8015fde:	4936      	ldr	r1, [pc, #216]	; (80160b8 <lv_btnm_create+0x1c8>)
 8015fe0:	6978      	ldr	r0, [r7, #20]
 8015fe2:	f000 f86d 	bl	80160c0 <lv_btnm_set_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8015fe6:	f008 ffd1 	bl	801ef8c <lv_theme_get_current>
 8015fea:	60b8      	str	r0, [r7, #8]
        if(th) {
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d030      	beq.n	8016054 <lv_btnm_create+0x164>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	6978      	ldr	r0, [r7, #20]
 8015ffe:	f000 fa09 	bl	8016414 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016008:	461a      	mov	r2, r3
 801600a:	2101      	movs	r1, #1
 801600c:	6978      	ldr	r0, [r7, #20]
 801600e:	f000 fa01 	bl	8016414 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016018:	461a      	mov	r2, r3
 801601a:	2102      	movs	r1, #2
 801601c:	6978      	ldr	r0, [r7, #20]
 801601e:	f000 f9f9 	bl	8016414 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016028:	461a      	mov	r2, r3
 801602a:	2103      	movs	r1, #3
 801602c:	6978      	ldr	r0, [r7, #20]
 801602e:	f000 f9f1 	bl	8016414 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8016038:	461a      	mov	r2, r3
 801603a:	2104      	movs	r1, #4
 801603c:	6978      	ldr	r0, [r7, #20]
 801603e:	f000 f9e9 	bl	8016414 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8016048:	461a      	mov	r2, r3
 801604a:	2105      	movs	r1, #5
 801604c:	6978      	ldr	r0, [r7, #20]
 801604e:	f000 f9e1 	bl	8016414 <lv_btnm_set_style>
 8016052:	e019      	b.n	8016088 <lv_btnm_create+0x198>
        } else {
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8016054:	4919      	ldr	r1, [pc, #100]	; (80160bc <lv_btnm_create+0x1cc>)
 8016056:	6978      	ldr	r0, [r7, #20]
 8016058:	f7f0 fde5 	bl	8006c26 <lv_obj_set_style>
 801605c:	e014      	b.n	8016088 <lv_btnm_create+0x198>
        }
    }
    /*Copy an existing object*/
    else {
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801605e:	6838      	ldr	r0, [r7, #0]
 8016060:	f7f1 f911 	bl	8007286 <lv_obj_get_ext_attr>
 8016064:	60f8      	str	r0, [r7, #12]
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	f103 000c 	add.w	r0, r3, #12
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	330c      	adds	r3, #12
 8016070:	2214      	movs	r2, #20
 8016072:	4619      	mov	r1, r3
 8016074:	f011 f8d6 	bl	8027224 <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 8016078:	6838      	ldr	r0, [r7, #0]
 801607a:	f000 faac 	bl	80165d6 <lv_btnm_get_map_array>
 801607e:	4603      	mov	r3, r0
 8016080:	4619      	mov	r1, r3
 8016082:	6978      	ldr	r0, [r7, #20]
 8016084:	f000 f81c 	bl	80160c0 <lv_btnm_set_map>
    }

    LV_LOG_INFO("button matrix created");

    return new_btnm;
 8016088:	697b      	ldr	r3, [r7, #20]
}
 801608a:	4618      	mov	r0, r3
 801608c:	3718      	adds	r7, #24
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	20002ab4 	.word	0x20002ab4
 8016098:	20006b0c 	.word	0x20006b0c
 801609c:	20006b48 	.word	0x20006b48
 80160a0:	20006cb0 	.word	0x20006cb0
 80160a4:	20006d28 	.word	0x20006d28
 80160a8:	20006bfc 	.word	0x20006bfc
 80160ac:	20002ab0 	.word	0x20002ab0
 80160b0:	08016b41 	.word	0x08016b41
 80160b4:	080166d9 	.word	0x080166d9
 80160b8:	200027b0 	.word	0x200027b0
 80160bc:	20006b84 	.word	0x20006b84

080160c0 <lv_btnm_set_map>:
 * be deallocated during the life of the matrix.
 * @param btnm pointer to a button matrix object
 * @param map pointer a string array. The last string has to be: "". Use "\n" to make a line break.
 */
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
{
 80160c0:	b590      	push	{r4, r7, lr}
 80160c2:	b091      	sub	sp, #68	; 0x44
 80160c4:	af02      	add	r7, sp, #8
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
    if(map == NULL) return;
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	f000 819a 	beq.w	8016406 <lv_btnm_set_map+0x346>
     * to hidden/longpress/disabled states after the map was originally set.
     *
     * TODO: separate all map set/allocation from layout code below and skip
     * set/allocation when map hasn't changed.
     */
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f7f1 f8d7 	bl	8007286 <lv_obj_get_ext_attr>
 80160d8:	61f8      	str	r0, [r7, #28]
    if(!maps_are_identical(ext->map_p, map)) {
 80160da:	69fb      	ldr	r3, [r7, #28]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	6839      	ldr	r1, [r7, #0]
 80160e0:	4618      	mov	r0, r3
 80160e2:	f001 fab3 	bl	801764c <maps_are_identical>
 80160e6:	4603      	mov	r3, r0
 80160e8:	f083 0301 	eor.w	r3, r3, #1
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d003      	beq.n	80160fa <lv_btnm_set_map+0x3a>

        /*Analyze the map and create the required number of buttons*/
        allocate_btn_areas_and_controls(btnm, map);
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f001 f8e9 	bl	80172cc <allocate_btn_areas_and_controls>
    }
    ext->map_p = map;
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	683a      	ldr	r2, [r7, #0]
 80160fe:	601a      	str	r2, [r3, #0]

    /*Set size and positions of the buttons*/
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8016100:	2100      	movs	r1, #0
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 faa8 	bl	8016658 <lv_btnm_get_style>
 8016108:	61b8      	str	r0, [r7, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7f0 ffd0 	bl	80070b0 <lv_obj_get_width>
 8016110:	4603      	mov	r3, r0
 8016112:	b29a      	uxth	r2, r3
 8016114:	69bb      	ldr	r3, [r7, #24]
 8016116:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801611a:	b29b      	uxth	r3, r3
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	b29a      	uxth	r2, r3
 8016120:	69bb      	ldr	r3, [r7, #24]
 8016122:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016126:	b29b      	uxth	r3, r3
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	b29b      	uxth	r3, r3
 801612c:	82fb      	strh	r3, [r7, #22]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7f0 ffcc 	bl	80070cc <lv_obj_get_height>
 8016134:	4603      	mov	r3, r0
 8016136:	b29a      	uxth	r2, r3
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801613e:	b29b      	uxth	r3, r3
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	b29a      	uxth	r2, r3
 8016144:	69bb      	ldr	r3, [r7, #24]
 8016146:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801614a:	b29b      	uxth	r3, r3
 801614c:	1ad3      	subs	r3, r2, r3
 801614e:	b29b      	uxth	r3, r3
 8016150:	82bb      	strh	r3, [r7, #20]
    lv_coord_t act_y            = style_bg->body.padding.top;
 8016152:	69bb      	ldr	r3, [r7, #24]
 8016154:	8adb      	ldrh	r3, [r3, #22]
 8016156:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*Count the lines to calculate button height*/
    uint8_t line_cnt = 1;
 8016158:	2301      	movs	r3, #1
 801615a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t li;
    for(li = 0; strlen(map[li]) != 0; li++) {
 801615e:	2300      	movs	r3, #0
 8016160:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8016164:	e016      	b.n	8016194 <lv_btnm_set_map+0xd4>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 8016166:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801616a:	009b      	lsls	r3, r3, #2
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	4413      	add	r3, r2
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	49a7      	ldr	r1, [pc, #668]	; (8016410 <lv_btnm_set_map+0x350>)
 8016174:	4618      	mov	r0, r3
 8016176:	f7ea f82b 	bl	80001d0 <strcmp>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	d104      	bne.n	801618a <lv_btnm_set_map+0xca>
 8016180:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016184:	3301      	adds	r3, #1
 8016186:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    for(li = 0; strlen(map[li]) != 0; li++) {
 801618a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801618e:	3301      	adds	r3, #1
 8016190:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8016194:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016198:	009b      	lsls	r3, r3, #2
 801619a:	683a      	ldr	r2, [r7, #0]
 801619c:	4413      	add	r3, r2
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d1df      	bne.n	8016166 <lv_btnm_set_map+0xa6>
    }

    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 80161a6:	8aba      	ldrh	r2, [r7, #20]
 80161a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80161ac:	3b01      	subs	r3, #1
 80161ae:	b299      	uxth	r1, r3
 80161b0:	69bb      	ldr	r3, [r7, #24]
 80161b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80161b6:	b29b      	uxth	r3, r3
 80161b8:	fb11 f303 	smulbb	r3, r1, r3
 80161bc:	b29b      	uxth	r3, r3
 80161be:	1ad3      	subs	r3, r2, r3
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h            = btn_h / line_cnt;
 80161c4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80161c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80161cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80161d0:	867b      	strh	r3, [r7, #50]	; 0x32
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 80161d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	3b01      	subs	r3, #1
 80161da:	b29b      	uxth	r3, r3
 80161dc:	867b      	strh	r3, [r7, #50]	; 0x32
    /* Count the units and the buttons in a line
     * (A button can be 1,2,3... unit wide)*/
    uint16_t unit_cnt;           /*Number of units in a row*/
    uint16_t unit_act_cnt;       /*Number of units currently put in a row*/
    uint16_t btn_cnt;            /*Number of buttons in a row*/
    uint16_t i_tot          = 0; /*Act. index in the str map*/
 80161de:	2300      	movs	r3, #0
 80161e0:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 80161e2:	2300      	movs	r3, #0
 80161e4:	853b      	strh	r3, [r7, #40]	; 0x28
    const char ** map_p_tmp = map;
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	627b      	str	r3, [r7, #36]	; 0x24

    /*Count the units and the buttons in a line*/
    while(1) {
        unit_cnt = 0;
 80161ea:	2300      	movs	r3, #0
 80161ec:	863b      	strh	r3, [r7, #48]	; 0x30
        btn_cnt  = 0;
 80161ee:	2300      	movs	r3, #0
 80161f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        /*Count the buttons in a line*/
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 80161f2:	e012      	b.n	801621a <lv_btnm_set_map+0x15a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	689a      	ldr	r2, [r3, #8]
 80161f8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80161fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161fc:	440b      	add	r3, r1
 80161fe:	005b      	lsls	r3, r3, #1
 8016200:	4413      	add	r3, r2
 8016202:	881b      	ldrh	r3, [r3, #0]
 8016204:	4618      	mov	r0, r3
 8016206:	f001 f8d7 	bl	80173b8 <get_button_width>
 801620a:	4603      	mov	r3, r0
 801620c:	b29a      	uxth	r2, r3
 801620e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016210:	4413      	add	r3, r2
 8016212:	863b      	strh	r3, [r7, #48]	; 0x30
            btn_cnt++;
 8016214:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016216:	3301      	adds	r3, #1
 8016218:	85bb      	strh	r3, [r7, #44]	; 0x2c
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 801621a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016220:	4413      	add	r3, r2
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	497a      	ldr	r1, [pc, #488]	; (8016410 <lv_btnm_set_map+0x350>)
 8016226:	4618      	mov	r0, r3
 8016228:	f7e9 ffd2 	bl	80001d0 <strcmp>
 801622c:	4603      	mov	r3, r0
 801622e:	2b00      	cmp	r3, #0
 8016230:	d007      	beq.n	8016242 <lv_btnm_set_map+0x182>
 8016232:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016234:	009b      	lsls	r3, r3, #2
 8016236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016238:	4413      	add	r3, r2
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1d8      	bne.n	80161f4 <lv_btnm_set_map+0x134>
        }

        /*Make sure the last row is at the bottom of 'btnm'*/
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 8016242:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016244:	009b      	lsls	r3, r3, #2
 8016246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016248:	4413      	add	r3, r2
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d10c      	bne.n	801626c <lv_btnm_set_map+0x1ac>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 8016252:	8aba      	ldrh	r2, [r7, #20]
 8016254:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016256:	1ad3      	subs	r3, r2, r3
 8016258:	b29a      	uxth	r2, r3
 801625a:	69bb      	ldr	r3, [r7, #24]
 801625c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016260:	b29b      	uxth	r3, r3
 8016262:	4413      	add	r3, r2
 8016264:	b29b      	uxth	r3, r3
 8016266:	3b01      	subs	r3, #1
 8016268:	b29b      	uxth	r3, r3
 801626a:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        /*Only deal with the non empty lines*/
        if(btn_cnt != 0) {
 801626c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 80a7 	beq.w	80163c2 <lv_btnm_set_map+0x302>
            /*Calculate the width of all units*/
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8016274:	8afa      	ldrh	r2, [r7, #22]
 8016276:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016278:	3b01      	subs	r3, #1
 801627a:	b299      	uxth	r1, r3
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8016282:	b29b      	uxth	r3, r3
 8016284:	fb11 f303 	smulbb	r3, r1, r3
 8016288:	b29b      	uxth	r3, r3
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	b29b      	uxth	r3, r3
 801628e:	827b      	strh	r3, [r7, #18]

            /*Set the button size and positions and set the texts*/
            uint16_t i;
            lv_coord_t act_x = style_bg->body.padding.left;
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	8b5b      	ldrh	r3, [r3, #26]
 8016294:	823b      	strh	r3, [r7, #16]
            lv_coord_t act_unit_w;
            unit_act_cnt = 0;
 8016296:	2300      	movs	r3, #0
 8016298:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(i = 0; i < btn_cnt; i++) {
 801629a:	2300      	movs	r3, #0
 801629c:	847b      	strh	r3, [r7, #34]	; 0x22
 801629e:	e08b      	b.n	80163b8 <lv_btnm_set_map+0x2f8>
                /* one_unit_w = all_unit_w / unit_cnt
                 * act_unit_w = one_unit_w * button_width
                 * do this two operations but the multiply first to divide a greater number */
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 80162a0:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	689a      	ldr	r2, [r3, #8]
 80162a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80162aa:	005b      	lsls	r3, r3, #1
 80162ac:	4413      	add	r3, r2
 80162ae:	881b      	ldrh	r3, [r3, #0]
 80162b0:	4618      	mov	r0, r3
 80162b2:	f001 f881 	bl	80173b8 <get_button_width>
 80162b6:	4603      	mov	r3, r0
 80162b8:	fb03 f204 	mul.w	r2, r3, r4
 80162bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80162be:	fb92 f3f3 	sdiv	r3, r2, r3
 80162c2:	81fb      	strh	r3, [r7, #14]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 80162c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	3b01      	subs	r3, #1
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	81fb      	strh	r3, [r7, #14]

                /*Always recalculate act_x because of rounding errors */
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 80162d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80162d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80162d6:	fb02 f203 	mul.w	r2, r2, r3
 80162da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80162dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80162ec:	fb11 f303 	smulbb	r3, r1, r3
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	4413      	add	r3, r2
 80162f4:	b29a      	uxth	r2, r3
                        style_bg->body.padding.left;
 80162f6:	69bb      	ldr	r3, [r7, #24]
 80162f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80162fc:	b29b      	uxth	r3, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 80162fe:	4413      	add	r3, r2
 8016300:	b29b      	uxth	r3, r3
 8016302:	823b      	strh	r3, [r7, #16]

                /* Set the button's area.
                 * If inner padding is zero then use the prev. button x2 as x1 to avoid rounding
                 * errors*/
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8016304:	69bb      	ldr	r3, [r7, #24]
 8016306:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d126      	bne.n	801635c <lv_btnm_set_map+0x29c>
 801630e:	69bb      	ldr	r3, [r7, #24]
 8016310:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8016314:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016318:	429a      	cmp	r2, r3
 801631a:	d01f      	beq.n	801635c <lv_btnm_set_map+0x29c>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 801631c:	69fb      	ldr	r3, [r7, #28]
 801631e:	685a      	ldr	r2, [r3, #4]
 8016320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016322:	00db      	lsls	r3, r3, #3
 8016324:	18d0      	adds	r0, r2, r3
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	685a      	ldr	r2, [r3, #4]
 801632a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801632c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8016330:	3b01      	subs	r3, #1
 8016332:	00db      	lsls	r3, r3, #3
 8016334:	4413      	add	r3, r2
 8016336:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801633a:	8a3a      	ldrh	r2, [r7, #16]
 801633c:	89fb      	ldrh	r3, [r7, #14]
 801633e:	4413      	add	r3, r2
 8016340:	b29b      	uxth	r3, r3
 8016342:	b21c      	sxth	r4, r3
                                act_y + btn_h);
 8016344:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016346:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016348:	4413      	add	r3, r2
 801634a:	b29b      	uxth	r3, r3
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 801634c:	b21b      	sxth	r3, r3
 801634e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8016352:	9300      	str	r3, [sp, #0]
 8016354:	4623      	mov	r3, r4
 8016356:	f7fc fc85 	bl	8012c64 <lv_area_set>
 801635a:	e016      	b.n	801638a <lv_btnm_set_map+0x2ca>
                } else {
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	685a      	ldr	r2, [r3, #4]
 8016360:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016362:	00db      	lsls	r3, r3, #3
 8016364:	18d0      	adds	r0, r2, r3
 8016366:	8a3a      	ldrh	r2, [r7, #16]
 8016368:	89fb      	ldrh	r3, [r7, #14]
 801636a:	4413      	add	r3, r2
 801636c:	b29b      	uxth	r3, r3
 801636e:	b21c      	sxth	r4, r3
 8016370:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016372:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016374:	4413      	add	r3, r2
 8016376:	b29b      	uxth	r3, r3
 8016378:	b21b      	sxth	r3, r3
 801637a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801637e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4623      	mov	r3, r4
 8016386:	f7fc fc6d 	bl	8012c64 <lv_area_set>
                }

                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	689a      	ldr	r2, [r3, #8]
 801638e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016390:	005b      	lsls	r3, r3, #1
 8016392:	4413      	add	r3, r2
 8016394:	881b      	ldrh	r3, [r3, #0]
 8016396:	4618      	mov	r0, r3
 8016398:	f001 f80e 	bl	80173b8 <get_button_width>
 801639c:	4603      	mov	r3, r0
 801639e:	b29a      	uxth	r2, r3
 80163a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80163a2:	4413      	add	r3, r2
 80163a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

                i_tot++;
 80163a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163a8:	3301      	adds	r3, #1
 80163aa:	857b      	strh	r3, [r7, #42]	; 0x2a
                btn_i++;
 80163ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80163ae:	3301      	adds	r3, #1
 80163b0:	853b      	strh	r3, [r7, #40]	; 0x28
            for(i = 0; i < btn_cnt; i++) {
 80163b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163b4:	3301      	adds	r3, #1
 80163b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80163b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80163ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163bc:	429a      	cmp	r2, r3
 80163be:	f4ff af6f 	bcc.w	80162a0 <lv_btnm_set_map+0x1e0>
            }
        }
        act_y += btn_h + style_bg->body.padding.inner;
 80163c2:	69bb      	ldr	r3, [r7, #24]
 80163c4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80163c8:	b29a      	uxth	r2, r3
 80163ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80163cc:	4413      	add	r3, r2
 80163ce:	b29a      	uxth	r2, r3
 80163d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80163d2:	4413      	add	r3, r2
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	86fb      	strh	r3, [r7, #54]	; 0x36

        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80163d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163de:	4413      	add	r3, r2
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d009      	beq.n	80163fc <lv_btnm_set_map+0x33c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 80163e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163ea:	3301      	adds	r3, #1
 80163ec:	009b      	lsls	r3, r3, #2
 80163ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163f0:	4413      	add	r3, r2
 80163f2:	627b      	str	r3, [r7, #36]	; 0x24
        i_tot++;                                   /*Skip the '\n'*/
 80163f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163f6:	3301      	adds	r3, #1
 80163f8:	857b      	strh	r3, [r7, #42]	; 0x2a
        unit_cnt = 0;
 80163fa:	e6f6      	b.n	80161ea <lv_btnm_set_map+0x12a>
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80163fc:	bf00      	nop
    }

    lv_obj_invalidate(btnm);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f7ef fd15 	bl	8005e2e <lv_obj_invalidate>
 8016404:	e000      	b.n	8016408 <lv_btnm_set_map+0x348>
    if(map == NULL) return;
 8016406:	bf00      	nop
}
 8016408:	373c      	adds	r7, #60	; 0x3c
 801640a:	46bd      	mov	sp, r7
 801640c:	bd90      	pop	{r4, r7, pc}
 801640e:	bf00      	nop
 8016410:	08029d18 	.word	0x08029d18

08016414 <lv_btnm_set_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b086      	sub	sp, #24
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	460b      	mov	r3, r1
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	72fb      	strb	r3, [r7, #11]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f7f0 ff2f 	bl	8007286 <lv_obj_get_ext_attr>
 8016428:	6178      	str	r0, [r7, #20]

    switch(type) {
 801642a:	7afb      	ldrb	r3, [r7, #11]
 801642c:	2b05      	cmp	r3, #5
 801642e:	d837      	bhi.n	80164a0 <lv_btnm_set_style+0x8c>
 8016430:	a201      	add	r2, pc, #4	; (adr r2, 8016438 <lv_btnm_set_style+0x24>)
 8016432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016436:	bf00      	nop
 8016438:	08016451 	.word	0x08016451
 801643c:	0801645b 	.word	0x0801645b
 8016440:	08016469 	.word	0x08016469
 8016444:	08016477 	.word	0x08016477
 8016448:	08016485 	.word	0x08016485
 801644c:	08016493 	.word	0x08016493
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 8016450:	6879      	ldr	r1, [r7, #4]
 8016452:	68f8      	ldr	r0, [r7, #12]
 8016454:	f7f0 fbe7 	bl	8006c26 <lv_obj_set_style>
 8016458:	e022      	b.n	80164a0 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_REL:
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	687a      	ldr	r2, [r7, #4]
 801645e:	60da      	str	r2, [r3, #12]
            lv_obj_invalidate(btnm);
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	f7ef fce4 	bl	8005e2e <lv_obj_invalidate>
            break;
 8016466:	e01b      	b.n	80164a0 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_PR:
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	611a      	str	r2, [r3, #16]
            lv_obj_invalidate(btnm);
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f7ef fcdd 	bl	8005e2e <lv_obj_invalidate>
            break;
 8016474:	e014      	b.n	80164a0 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_REL:
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	615a      	str	r2, [r3, #20]
            lv_obj_invalidate(btnm);
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f7ef fcd6 	bl	8005e2e <lv_obj_invalidate>
            break;
 8016482:	e00d      	b.n	80164a0 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_PR:
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	619a      	str	r2, [r3, #24]
            lv_obj_invalidate(btnm);
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f7ef fccf 	bl	8005e2e <lv_obj_invalidate>
            break;
 8016490:	e006      	b.n	80164a0 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_INA:
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	61da      	str	r2, [r3, #28]
            lv_obj_invalidate(btnm);
 8016498:	68f8      	ldr	r0, [r7, #12]
 801649a:	f7ef fcc8 	bl	8005e2e <lv_obj_invalidate>
            break;
 801649e:	bf00      	nop
    }
}
 80164a0:	bf00      	nop
 80164a2:	3718      	adds	r7, #24
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <lv_btnm_set_btn_ctrl>:
 * Set the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	460b      	mov	r3, r1
 80164b2:	807b      	strh	r3, [r7, #2]
 80164b4:	4613      	mov	r3, r2
 80164b6:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f7f0 fee4 	bl	8007286 <lv_obj_get_ext_attr>
 80164be:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	8c1b      	ldrh	r3, [r3, #32]
 80164c4:	887a      	ldrh	r2, [r7, #2]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d214      	bcs.n	80164f4 <lv_btnm_set_btn_ctrl+0x4c>

    ext->ctrl_bits[btn_id] |= ctrl;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	689a      	ldr	r2, [r3, #8]
 80164ce:	887b      	ldrh	r3, [r7, #2]
 80164d0:	005b      	lsls	r3, r3, #1
 80164d2:	4413      	add	r3, r2
 80164d4:	8819      	ldrh	r1, [r3, #0]
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	689a      	ldr	r2, [r3, #8]
 80164da:	887b      	ldrh	r3, [r7, #2]
 80164dc:	005b      	lsls	r3, r3, #1
 80164de:	4413      	add	r3, r2
 80164e0:	883a      	ldrh	r2, [r7, #0]
 80164e2:	430a      	orrs	r2, r1
 80164e4:	b292      	uxth	r2, r2
 80164e6:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 80164e8:	887b      	ldrh	r3, [r7, #2]
 80164ea:	4619      	mov	r1, r3
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f001 f856 	bl	801759e <invalidate_button_area>
 80164f2:	e000      	b.n	80164f6 <lv_btnm_set_btn_ctrl+0x4e>
    if(btn_id >= ext->btn_cnt) return;
 80164f4:	bf00      	nop
}
 80164f6:	3710      	adds	r7, #16
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <lv_btnm_clear_btn_ctrl>:
 * Clear the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b084      	sub	sp, #16
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	460b      	mov	r3, r1
 8016506:	807b      	strh	r3, [r7, #2]
 8016508:	4613      	mov	r3, r2
 801650a:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f7f0 feba 	bl	8007286 <lv_obj_get_ext_attr>
 8016512:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	8c1b      	ldrh	r3, [r3, #32]
 8016518:	887a      	ldrh	r2, [r7, #2]
 801651a:	429a      	cmp	r2, r3
 801651c:	d219      	bcs.n	8016552 <lv_btnm_clear_btn_ctrl+0x56>

    ext->ctrl_bits[btn_id] &= (~ctrl);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	689a      	ldr	r2, [r3, #8]
 8016522:	887b      	ldrh	r3, [r7, #2]
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	881b      	ldrh	r3, [r3, #0]
 801652a:	b21a      	sxth	r2, r3
 801652c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016530:	43db      	mvns	r3, r3
 8016532:	b21b      	sxth	r3, r3
 8016534:	4013      	ands	r3, r2
 8016536:	b219      	sxth	r1, r3
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	689a      	ldr	r2, [r3, #8]
 801653c:	887b      	ldrh	r3, [r7, #2]
 801653e:	005b      	lsls	r3, r3, #1
 8016540:	4413      	add	r3, r2
 8016542:	b28a      	uxth	r2, r1
 8016544:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 8016546:	887b      	ldrh	r3, [r7, #2]
 8016548:	4619      	mov	r1, r3
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f001 f827 	bl	801759e <invalidate_button_area>
 8016550:	e000      	b.n	8016554 <lv_btnm_clear_btn_ctrl+0x58>
    if(btn_id >= ext->btn_cnt) return;
 8016552:	bf00      	nop
}
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <lv_btnm_set_btn_ctrl_all>:
 * Set the attributes of all buttons of a button matrix
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 */
void lv_btnm_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b084      	sub	sp, #16
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
 8016562:	460b      	mov	r3, r1
 8016564:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f7f0 fe8d 	bl	8007286 <lv_obj_get_ext_attr>
 801656c:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 801656e:	2300      	movs	r3, #0
 8016570:	81fb      	strh	r3, [r7, #14]
 8016572:	e008      	b.n	8016586 <lv_btnm_set_btn_ctrl_all+0x2c>
        lv_btnm_set_btn_ctrl(btnm, i, ctrl);
 8016574:	887a      	ldrh	r2, [r7, #2]
 8016576:	89fb      	ldrh	r3, [r7, #14]
 8016578:	4619      	mov	r1, r3
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f7ff ff94 	bl	80164a8 <lv_btnm_set_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8016580:	89fb      	ldrh	r3, [r7, #14]
 8016582:	3301      	adds	r3, #1
 8016584:	81fb      	strh	r3, [r7, #14]
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	8c1b      	ldrh	r3, [r3, #32]
 801658a:	89fa      	ldrh	r2, [r7, #14]
 801658c:	429a      	cmp	r2, r3
 801658e:	d3f1      	bcc.n	8016574 <lv_btnm_set_btn_ctrl_all+0x1a>
    }
}
 8016590:	bf00      	nop
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}

08016598 <lv_btnm_clear_btn_ctrl_all>:
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 * @param en true: set the attributes; false: clear the attributes
 */
void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	460b      	mov	r3, r1
 80165a2:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7f0 fe6e 	bl	8007286 <lv_obj_get_ext_attr>
 80165aa:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 80165ac:	2300      	movs	r3, #0
 80165ae:	81fb      	strh	r3, [r7, #14]
 80165b0:	e008      	b.n	80165c4 <lv_btnm_clear_btn_ctrl_all+0x2c>
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 80165b2:	887a      	ldrh	r2, [r7, #2]
 80165b4:	89fb      	ldrh	r3, [r7, #14]
 80165b6:	4619      	mov	r1, r3
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f7ff ff9f 	bl	80164fc <lv_btnm_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 80165be:	89fb      	ldrh	r3, [r7, #14]
 80165c0:	3301      	adds	r3, #1
 80165c2:	81fb      	strh	r3, [r7, #14]
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	8c1b      	ldrh	r3, [r3, #32]
 80165c8:	89fa      	ldrh	r2, [r7, #14]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d3f1      	bcc.n	80165b2 <lv_btnm_clear_btn_ctrl_all+0x1a>
    }
}
 80165ce:	bf00      	nop
 80165d0:	3710      	adds	r7, #16
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}

080165d6 <lv_btnm_get_map_array>:
 * Get the current map of a button matrix
 * @param btnm pointer to a button matrix object
 * @return the current map
 */
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm)
{
 80165d6:	b580      	push	{r7, lr}
 80165d8:	b084      	sub	sp, #16
 80165da:	af00      	add	r7, sp, #0
 80165dc:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f7f0 fe51 	bl	8007286 <lv_obj_get_ext_attr>
 80165e4:	60f8      	str	r0, [r7, #12]
    return ext->map_p;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	681b      	ldr	r3, [r3, #0]
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3710      	adds	r7, #16
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <lv_btnm_get_active_btn>:
 * Useful in the the `event_cb` to get the text of the button, check if hidden etc.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b084      	sub	sp, #16
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7f0 fe43 	bl	8007286 <lv_obj_get_ext_attr>
 8016600:	60f8      	str	r0, [r7, #12]
    return ext->btn_id_act;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
 8016606:	4618      	mov	r0, r3
 8016608:	3710      	adds	r7, #16
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}

0801660e <lv_btnm_get_btn_ctrl>:
 * lv_btnm_get_pressed/released)
 * @param ctrl control values to check (ORed value can be used)
 * @return true: long press repeat is disabled; false: long press repeat enabled
 */
bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 801660e:	b580      	push	{r7, lr}
 8016610:	b084      	sub	sp, #16
 8016612:	af00      	add	r7, sp, #0
 8016614:	6078      	str	r0, [r7, #4]
 8016616:	460b      	mov	r3, r1
 8016618:	807b      	strh	r3, [r7, #2]
 801661a:	4613      	mov	r3, r2
 801661c:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7f0 fe31 	bl	8007286 <lv_obj_get_ext_attr>
 8016624:	60f8      	str	r0, [r7, #12]
    if(btn_id >= ext->btn_cnt) return false;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	8c1b      	ldrh	r3, [r3, #32]
 801662a:	887a      	ldrh	r2, [r7, #2]
 801662c:	429a      	cmp	r2, r3
 801662e:	d301      	bcc.n	8016634 <lv_btnm_get_btn_ctrl+0x26>
 8016630:	2300      	movs	r3, #0
 8016632:	e00d      	b.n	8016650 <lv_btnm_get_btn_ctrl+0x42>

    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	689a      	ldr	r2, [r3, #8]
 8016638:	887b      	ldrh	r3, [r7, #2]
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	4413      	add	r3, r2
 801663e:	881a      	ldrh	r2, [r3, #0]
 8016640:	883b      	ldrh	r3, [r7, #0]
 8016642:	4013      	ands	r3, r2
 8016644:	b29b      	uxth	r3, r3
 8016646:	2b00      	cmp	r3, #0
 8016648:	bf14      	ite	ne
 801664a:	2301      	movne	r3, #1
 801664c:	2300      	moveq	r3, #0
 801664e:	b2db      	uxtb	r3, r3
}
 8016650:	4618      	mov	r0, r3
 8016652:	3710      	adds	r7, #16
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}

08016658 <lv_btnm_get_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b084      	sub	sp, #16
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8016664:	2300      	movs	r3, #0
 8016666:	60fb      	str	r3, [r7, #12]
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f7f0 fe0c 	bl	8007286 <lv_obj_get_ext_attr>
 801666e:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8016670:	78fb      	ldrb	r3, [r7, #3]
 8016672:	2b05      	cmp	r3, #5
 8016674:	d827      	bhi.n	80166c6 <lv_btnm_get_style+0x6e>
 8016676:	a201      	add	r2, pc, #4	; (adr r2, 801667c <lv_btnm_get_style+0x24>)
 8016678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801667c:	08016695 	.word	0x08016695
 8016680:	0801669f 	.word	0x0801669f
 8016684:	080166a7 	.word	0x080166a7
 8016688:	080166af 	.word	0x080166af
 801668c:	080166b7 	.word	0x080166b7
 8016690:	080166bf 	.word	0x080166bf
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f7f0 fd3b 	bl	8007110 <lv_obj_get_style>
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	e016      	b.n	80166cc <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	68db      	ldr	r3, [r3, #12]
 80166a2:	60fb      	str	r3, [r7, #12]
 80166a4:	e012      	b.n	80166cc <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	691b      	ldr	r3, [r3, #16]
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	e00e      	b.n	80166cc <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	695b      	ldr	r3, [r3, #20]
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	e00a      	b.n	80166cc <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	699b      	ldr	r3, [r3, #24]
 80166ba:	60fb      	str	r3, [r7, #12]
 80166bc:	e006      	b.n	80166cc <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	69db      	ldr	r3, [r3, #28]
 80166c2:	60fb      	str	r3, [r7, #12]
 80166c4:	e002      	b.n	80166cc <lv_btnm_get_style+0x74>
        default: style = NULL; break;
 80166c6:	2300      	movs	r3, #0
 80166c8:	60fb      	str	r3, [r7, #12]
 80166ca:	bf00      	nop
    }

    return style;
 80166cc:	68fb      	ldr	r3, [r7, #12]
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop

080166d8 <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 80166d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166da:	b0a7      	sub	sp, #156	; 0x9c
 80166dc:	af06      	add	r7, sp, #24
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	4613      	mov	r3, r2
 80166e4:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80166e6:	79fb      	ldrb	r3, [r7, #7]
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d107      	bne.n	80166fc <lv_btnm_design+0x24>
        return ancestor_design_f(btnm, mask, mode);
 80166ec:	4ba5      	ldr	r3, [pc, #660]	; (8016984 <lv_btnm_design+0x2ac>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	79fa      	ldrb	r2, [r7, #7]
 80166f2:	68b9      	ldr	r1, [r7, #8]
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	4798      	blx	r3
 80166f8:	4603      	mov	r3, r0
 80166fa:	e21b      	b.n	8016b34 <lv_btnm_design+0x45c>
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80166fc:	79fb      	ldrb	r3, [r7, #7]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f040 8217 	bne.w	8016b32 <lv_btnm_design+0x45a>

        ancestor_design_f(btnm, mask, mode);
 8016704:	4b9f      	ldr	r3, [pc, #636]	; (8016984 <lv_btnm_design+0x2ac>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	79fa      	ldrb	r2, [r7, #7]
 801670a:	68b9      	ldr	r1, [r7, #8]
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	4798      	blx	r3

        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f7f0 fdb8 	bl	8007286 <lv_obj_get_ext_attr>
 8016716:	6738      	str	r0, [r7, #112]	; 0x70
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f7f0 fcf9 	bl	8007110 <lv_obj_get_style>
 801671e:	66f8      	str	r0, [r7, #108]	; 0x6c
        const lv_style_t * btn_style;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f7f0 fd62 	bl	80071ea <lv_obj_get_opa_scale>
 8016726:	4603      	mov	r3, r0
 8016728:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);
 801672c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016730:	4619      	mov	r1, r3
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f7f0 fc7b 	bl	800702e <lv_obj_get_coords>

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
 8016738:	2300      	movs	r3, #0
 801673a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        uint16_t txt_i = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        lv_style_t style_tmp;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 8016744:	2300      	movs	r3, #0
 8016746:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 801674a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801674c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016750:	f003 0301 	and.w	r3, r3, #1
 8016754:	b2db      	uxtb	r3, r3
 8016756:	2b00      	cmp	r3, #0
 8016758:	d002      	beq.n	8016760 <lv_btnm_design+0x88>
 801675a:	2301      	movs	r3, #1
 801675c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8016760:	2300      	movs	r3, #0
 8016762:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8016766:	e1dd      	b.n	8016b24 <lv_btnm_design+0x44c>
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
 8016768:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801676c:	3301      	adds	r3, #1
 801676e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8016772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801677a:	009b      	lsls	r3, r3, #2
 801677c:	4413      	add	r3, r2
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4981      	ldr	r1, [pc, #516]	; (8016988 <lv_btnm_design+0x2b0>)
 8016782:	4618      	mov	r0, r3
 8016784:	f7e9 fd24 	bl	80001d0 <strcmp>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d0ec      	beq.n	8016768 <lv_btnm_design+0x90>
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 801678e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016790:	689a      	ldr	r2, [r3, #8]
 8016792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016796:	005b      	lsls	r3, r3, #1
 8016798:	4413      	add	r3, r2
 801679a:	881b      	ldrh	r3, [r3, #0]
 801679c:	4618      	mov	r0, r3
 801679e:	f000 fe21 	bl	80173e4 <button_is_hidden>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f040 81b2 	bne.w	8016b0e <lv_btnm_design+0x436>

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 80167aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167ac:	685a      	ldr	r2, [r3, #4]
 80167ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80167b2:	00db      	lsls	r3, r3, #3
 80167b4:	441a      	add	r2, r3
 80167b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80167ba:	4611      	mov	r1, r2
 80167bc:	4618      	mov	r0, r3
 80167be:	f7ff fb5b 	bl	8015e78 <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
 80167c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	4413      	add	r3, r2
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	b21b      	sxth	r3, r3
 80167d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += area_btnm.y1;
 80167d8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80167dc:	b29a      	uxth	r2, r3
 80167de:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	4413      	add	r3, r2
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	b21b      	sxth	r3, r3
 80167ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 += area_btnm.x1;
 80167ee:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80167f8:	b29b      	uxth	r3, r3
 80167fa:	4413      	add	r3, r2
 80167fc:	b29b      	uxth	r3, r3
 80167fe:	b21b      	sxth	r3, r3
 8016800:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 += area_btnm.y1;
 8016804:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8016808:	b29a      	uxth	r2, r3
 801680a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801680e:	b29b      	uxth	r3, r3
 8016810:	4413      	add	r3, r2
 8016812:	b29b      	uxth	r3, r3
 8016814:	b21b      	sxth	r3, r3
 8016816:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            btn_w = lv_area_get_width(&area_tmp);
 801681a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801681e:	4618      	mov	r0, r3
 8016820:	f7ff fb38 	bl	8015e94 <lv_area_get_width>
 8016824:	4603      	mov	r3, r0
 8016826:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
            btn_h = lv_area_get_height(&area_tmp);
 801682a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801682e:	4618      	mov	r0, r3
 8016830:	f7ff fb47 	bl	8015ec2 <lv_area_get_height>
 8016834:	4603      	mov	r3, r0
 8016836:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

            /*Load the style*/
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 801683a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801683c:	689a      	ldr	r2, [r3, #8]
 801683e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	4413      	add	r3, r2
 8016846:	881b      	ldrh	r3, [r3, #0]
 8016848:	4618      	mov	r0, r3
 801684a:	f000 fe2f 	bl	80174ac <button_get_tgl_state>
 801684e:	4603      	mov	r3, r0
 8016850:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 8016854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016856:	689a      	ldr	r2, [r3, #8]
 8016858:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	4413      	add	r3, r2
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	4618      	mov	r0, r3
 8016864:	f000 fde6 	bl	8017434 <button_is_inactive>
 8016868:	4603      	mov	r3, r0
 801686a:	2b00      	cmp	r3, #0
 801686c:	d005      	beq.n	801687a <lv_btnm_design+0x1a2>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 801686e:	2105      	movs	r1, #5
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	f7ff fef1 	bl	8016658 <lv_btnm_get_style>
 8016876:	67f8      	str	r0, [r7, #124]	; 0x7c
 8016878:	e04a      	b.n	8016910 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 801687a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801687c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801687e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016882:	429a      	cmp	r2, r3
 8016884:	d00c      	beq.n	80168a0 <lv_btnm_design+0x1c8>
 8016886:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801688a:	f083 0301 	eor.w	r3, r3, #1
 801688e:	b2db      	uxtb	r3, r3
 8016890:	2b00      	cmp	r3, #0
 8016892:	d005      	beq.n	80168a0 <lv_btnm_design+0x1c8>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8016894:	2101      	movs	r1, #1
 8016896:	68f8      	ldr	r0, [r7, #12]
 8016898:	f7ff fede 	bl	8016658 <lv_btnm_get_style>
 801689c:	67f8      	str	r0, [r7, #124]	; 0x7c
 801689e:	e037      	b.n	8016910 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 80168a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d10c      	bne.n	80168c6 <lv_btnm_design+0x1ee>
 80168ac:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168b0:	f083 0301 	eor.w	r3, r3, #1
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d005      	beq.n	80168c6 <lv_btnm_design+0x1ee>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 80168ba:	2102      	movs	r1, #2
 80168bc:	68f8      	ldr	r0, [r7, #12]
 80168be:	f7ff fecb 	bl	8016658 <lv_btnm_get_style>
 80168c2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80168c4:	e024      	b.n	8016910 <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == true)
 80168c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168ca:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d009      	beq.n	80168e6 <lv_btnm_design+0x20e>
 80168d2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d005      	beq.n	80168e6 <lv_btnm_design+0x20e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 80168da:	2103      	movs	r1, #3
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	f7ff febb 	bl	8016658 <lv_btnm_get_style>
 80168e2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80168e4:	e014      	b.n	8016910 <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == true)
 80168e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80168ea:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d109      	bne.n	8016906 <lv_btnm_design+0x22e>
 80168f2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d005      	beq.n	8016906 <lv_btnm_design+0x22e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 80168fa:	2104      	movs	r1, #4
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f7ff feab 	bl	8016658 <lv_btnm_get_style>
 8016902:	67f8      	str	r0, [r7, #124]	; 0x7c
 8016904:	e004      	b.n	8016910 <lv_btnm_design+0x238>
            else
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL); /*Not possible option, just to be sure*/
 8016906:	2101      	movs	r1, #1
 8016908:	68f8      	ldr	r0, [r7, #12]
 801690a:	f7ff fea5 	bl	8016658 <lv_btnm_get_style>
 801690e:	67f8      	str	r0, [r7, #124]	; 0x7c

            lv_style_copy(&style_tmp, btn_style);
 8016910:	f107 0310 	add.w	r3, r7, #16
 8016914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016916:	4618      	mov	r0, r3
 8016918:	f7f1 ff24 	bl	8008764 <lv_style_copy>

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 801691c:	7fbb      	ldrb	r3, [r7, #30]
 801691e:	f003 0310 	and.w	r3, r3, #16
 8016922:	2b00      	cmp	r3, #0
 8016924:	d067      	beq.n	80169f6 <lv_btnm_design+0x31e>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 8016926:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801692a:	461a      	mov	r2, r3
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016932:	4619      	mov	r1, r3
 8016934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016936:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801693a:	440b      	add	r3, r1
 801693c:	429a      	cmp	r2, r3
 801693e:	d104      	bne.n	801694a <lv_btnm_design+0x272>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8016940:	7fbb      	ldrb	r3, [r7, #30]
 8016942:	f023 0302 	bic.w	r3, r3, #2
 8016946:	b2db      	uxtb	r3, r3
 8016948:	77bb      	strb	r3, [r7, #30]
                }
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 801694a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801694e:	461a      	mov	r2, r3
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016956:	4619      	mov	r1, r3
 8016958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801695a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801695e:	1acb      	subs	r3, r1, r3
 8016960:	429a      	cmp	r2, r3
 8016962:	d104      	bne.n	801696e <lv_btnm_design+0x296>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 8016964:	7fbb      	ldrb	r3, [r7, #30]
 8016966:	f023 0301 	bic.w	r3, r3, #1
 801696a:	b2db      	uxtb	r3, r3
 801696c:	77bb      	strb	r3, [r7, #30]
                }

                if(txt_i == 0) {
 801696e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016972:	2b00      	cmp	r3, #0
 8016974:	d10a      	bne.n	801698c <lv_btnm_design+0x2b4>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8016976:	7fbb      	ldrb	r3, [r7, #30]
 8016978:	f023 0304 	bic.w	r3, r3, #4
 801697c:	b2db      	uxtb	r3, r3
 801697e:	77bb      	strb	r3, [r7, #30]
 8016980:	e01a      	b.n	80169b8 <lv_btnm_design+0x2e0>
 8016982:	bf00      	nop
 8016984:	20002ab0 	.word	0x20002ab0
 8016988:	08029d18 	.word	0x08029d18
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 801698c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016998:	3b01      	subs	r3, #1
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	4413      	add	r3, r2
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	4966      	ldr	r1, [pc, #408]	; (8016b3c <lv_btnm_design+0x464>)
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7e9 fc14 	bl	80001d0 <strcmp>
 80169a8:	4603      	mov	r3, r0
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d104      	bne.n	80169b8 <lv_btnm_design+0x2e0>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 80169ae:	7fbb      	ldrb	r3, [r7, #30]
 80169b0:	f023 0304 	bic.w	r3, r3, #4
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	77bb      	strb	r3, [r7, #30]
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 80169b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80169c0:	3301      	adds	r3, #1
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	4413      	add	r3, r2
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d00e      	beq.n	80169ec <lv_btnm_design+0x314>
 80169ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169d0:	681a      	ldr	r2, [r3, #0]
 80169d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80169d6:	3301      	adds	r3, #1
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	4413      	add	r3, r2
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	4957      	ldr	r1, [pc, #348]	; (8016b3c <lv_btnm_design+0x464>)
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7e9 fbf5 	bl	80001d0 <strcmp>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d104      	bne.n	80169f6 <lv_btnm_design+0x31e>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 80169ec:	7fbb      	ldrb	r3, [r7, #30]
 80169ee:	f023 0308 	bic.w	r3, r3, #8
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	77bb      	strb	r3, [r7, #30]
                }
            }
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 80169f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80169fa:	f107 0210 	add.w	r2, r7, #16
 80169fe:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8016a02:	68b9      	ldr	r1, [r7, #8]
 8016a04:	f7f6 f8f3 	bl	800cbee <lv_draw_rect>

            /*Calculate the size of the text*/
            if(btn_style->glass) btn_style = bg_style;
 8016a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	f003 0301 	and.w	r3, r3, #1
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d001      	beq.n	8016a1a <lv_btnm_design+0x342>
 8016a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a18:	67fb      	str	r3, [r7, #124]	; 0x7c
            const lv_font_t * font = btn_style->text.font;
 8016a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a1e:	663b      	str	r3, [r7, #96]	; 0x60
            lv_point_t txt_size;
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 8016a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a22:	681a      	ldr	r2, [r3, #0]
 8016a24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	4413      	add	r3, r2
 8016a2c:	681d      	ldr	r5, [r3, #0]
 8016a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a30:	f9b3 6028 	ldrsh.w	r6, [r3, #40]	; 0x28
 8016a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016a36:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8016a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7ff fa28 	bl	8015e94 <lv_area_get_width>
 8016a44:	4603      	mov	r3, r0
 8016a46:	461a      	mov	r2, r3
 8016a48:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8016a4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8016a50:	9302      	str	r3, [sp, #8]
 8016a52:	9201      	str	r2, [sp, #4]
 8016a54:	9400      	str	r4, [sp, #0]
 8016a56:	4633      	mov	r3, r6
 8016a58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a5a:	4629      	mov	r1, r5
 8016a5c:	f7fd fb00 	bl	8014060 <lv_txt_get_size>
                            btn_style->text.line_space, lv_area_get_width(&area_btnm), txt_flag);

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8016a60:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8016a64:	b29a      	uxth	r2, r3
 8016a66:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8016a6a:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8016a6e:	1a5b      	subs	r3, r3, r1
 8016a70:	0fd9      	lsrs	r1, r3, #31
 8016a72:	440b      	add	r3, r1
 8016a74:	105b      	asrs	r3, r3, #1
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	4413      	add	r3, r2
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	b21b      	sxth	r3, r3
 8016a7e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8016a82:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016a86:	b29a      	uxth	r2, r3
 8016a88:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016a8c:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8016a90:	1a5b      	subs	r3, r3, r1
 8016a92:	0fd9      	lsrs	r1, r3, #31
 8016a94:	440b      	add	r3, r1
 8016a96:	105b      	asrs	r3, r3, #1
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b21b      	sxth	r3, r3
 8016aa0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8016aa4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8016aa8:	b29a      	uxth	r2, r3
 8016aaa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	4413      	add	r3, r2
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	b21b      	sxth	r3, r3
 8016ab6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8016aba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	4413      	add	r3, r2
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	b21b      	sxth	r3, r3
 8016acc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8016ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	4413      	add	r3, r2
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8016ae2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	9205      	str	r2, [sp, #20]
 8016aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aee:	9204      	str	r2, [sp, #16]
 8016af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016af4:	9203      	str	r2, [sp, #12]
 8016af6:	2200      	movs	r2, #0
 8016af8:	9202      	str	r2, [sp, #8]
 8016afa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8016afe:	9201      	str	r2, [sp, #4]
 8016b00:	9300      	str	r3, [sp, #0]
 8016b02:	460b      	mov	r3, r1
 8016b04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b06:	68b9      	ldr	r1, [r7, #8]
 8016b08:	f7f3 fdd8 	bl	800a6bc <lv_draw_label>
 8016b0c:	e000      	b.n	8016b10 <lv_btnm_design+0x438>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8016b0e:	bf00      	nop
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8016b10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016b14:	3301      	adds	r3, #1
 8016b16:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8016b1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016b1e:	3301      	adds	r3, #1
 8016b20:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b26:	8c1b      	ldrh	r3, [r3, #32]
 8016b28:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	f4ff ae20 	bcc.w	8016772 <lv_btnm_design+0x9a>
        }
    }
    return true;
 8016b32:	2301      	movs	r3, #1
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3784      	adds	r7, #132	; 0x84
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b3c:	08029d18 	.word	0x08029d18

08016b40 <lv_btnm_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btnm_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)
{
 8016b40:	b590      	push	{r4, r7, lr}
 8016b42:	b09b      	sub	sp, #108	; 0x6c
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	60f8      	str	r0, [r7, #12]
 8016b48:	460b      	mov	r3, r1
 8016b4a:	607a      	str	r2, [r7, #4]
 8016b4c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btnm, sign, param);
 8016b4e:	4b93      	ldr	r3, [pc, #588]	; (8016d9c <lv_btnm_signal+0x25c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	7af9      	ldrb	r1, [r7, #11]
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	4798      	blx	r3
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(res != LV_RES_OK) return res;
 8016b60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d002      	beq.n	8016b6e <lv_btnm_signal+0x2e>
 8016b68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016b6c:	e3a7      	b.n	80172be <lv_btnm_signal+0x77e>

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8016b6e:	68f8      	ldr	r0, [r7, #12]
 8016b70:	f7f0 fb89 	bl	8007286 <lv_obj_get_ext_attr>
 8016b74:	65f8      	str	r0, [r7, #92]	; 0x5c
    lv_point_t p;
    if(sign == LV_SIGNAL_CLEANUP) {
 8016b76:	7afb      	ldrb	r3, [r7, #11]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10a      	bne.n	8016b92 <lv_btnm_signal+0x52>
        lv_mem_free(ext->button_areas);
 8016b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7fc ff61 	bl	8013a48 <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 8016b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b88:	689b      	ldr	r3, [r3, #8]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7fc ff5c 	bl	8013a48 <lv_mem_free>
 8016b90:	e393      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 8016b92:	7afb      	ldrb	r3, [r7, #11]
 8016b94:	2b04      	cmp	r3, #4
 8016b96:	d002      	beq.n	8016b9e <lv_btnm_signal+0x5e>
 8016b98:	7afb      	ldrb	r3, [r7, #11]
 8016b9a:	2b02      	cmp	r3, #2
 8016b9c:	d106      	bne.n	8016bac <lv_btnm_signal+0x6c>
        lv_btnm_set_map(btnm, ext->map_p);
 8016b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	68f8      	ldr	r0, [r7, #12]
 8016ba6:	f7ff fa8b 	bl	80160c0 <lv_btnm_set_map>
 8016baa:	e386      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8016bac:	7afb      	ldrb	r3, [r7, #11]
 8016bae:	2b07      	cmp	r3, #7
 8016bb0:	d176      	bne.n	8016ca0 <lv_btnm_signal+0x160>
        lv_indev_t * indev = lv_indev_get_act();
 8016bb2:	f7ee fcb3 	bl	800551c <lv_indev_get_act>
 8016bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bba:	f7ee fcbb 	bl	8005534 <lv_indev_get_type>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	2b01      	cmp	r3, #1
 8016bc2:	d005      	beq.n	8016bd0 <lv_btnm_signal+0x90>
 8016bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bc6:	f7ee fcb5 	bl	8005534 <lv_indev_get_type>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2b03      	cmp	r3, #3
 8016bce:	d11f      	bne.n	8016c10 <lv_btnm_signal+0xd0>
            uint16_t btn_pr;
            /*Search the pressed area*/
            lv_indev_get_point(param, &p);
 8016bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f7ee fcfc 	bl	80055d4 <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 8016bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016be0:	4619      	mov	r1, r3
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	f000 fc76 	bl	80174d4 <get_button_from_point>
 8016be8:	4603      	mov	r3, r0
 8016bea:	857b      	strh	r3, [r7, #42]	; 0x2a

            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 8016bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	68f8      	ldr	r0, [r7, #12]
 8016bf4:	f000 fcd3 	bl	801759e <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 8016bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bfa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016bfc:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = btn_pr;
 8016bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c00:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016c02:	849a      	strh	r2, [r3, #36]	; 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 8016c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016c08:	4619      	mov	r1, r3
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f000 fcc7 	bl	801759e <invalidate_button_area>
        }
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8016c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	f000 834e 	beq.w	80172ba <lv_btnm_signal+0x77a>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c20:	689a      	ldr	r2, [r3, #8]
 8016c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c26:	005b      	lsls	r3, r3, #1
 8016c28:	4413      	add	r3, r2
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f000 fc15 	bl	801745c <button_is_click_trig>
 8016c32:	4603      	mov	r3, r0
 8016c34:	f083 0301 	eor.w	r3, r3, #1
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	f000 833d 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c42:	689a      	ldr	r2, [r3, #8]
 8016c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c48:	005b      	lsls	r3, r3, #1
 8016c4a:	4413      	add	r3, r2
 8016c4c:	881b      	ldrh	r3, [r3, #0]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 fbf0 	bl	8017434 <button_is_inactive>
 8016c54:	4603      	mov	r3, r0
 8016c56:	f083 0301 	eor.w	r3, r3, #1
 8016c5a:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f000 832c 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c64:	689a      	ldr	r2, [r3, #8]
 8016c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c6a:	005b      	lsls	r3, r3, #1
 8016c6c:	4413      	add	r3, r2
 8016c6e:	881b      	ldrh	r3, [r3, #0]
 8016c70:	4618      	mov	r0, r3
 8016c72:	f000 fbb7 	bl	80173e4 <button_is_hidden>
 8016c76:	4603      	mov	r3, r0
 8016c78:	f083 0301 	eor.w	r3, r3, #1
 8016c7c:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	f000 831b 	beq.w	80172ba <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c88:	623b      	str	r3, [r7, #32]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016c8a:	f107 0320 	add.w	r3, r7, #32
 8016c8e:	461a      	mov	r2, r3
 8016c90:	210e      	movs	r1, #14
 8016c92:	68f8      	ldr	r0, [r7, #12]
 8016c94:	f7f0 f87d 	bl	8006d92 <lv_event_send>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016c9e:	e30c      	b.n	80172ba <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING) {
 8016ca0:	7afb      	ldrb	r3, [r7, #11]
 8016ca2:	2b08      	cmp	r3, #8
 8016ca4:	d143      	bne.n	8016d2e <lv_btnm_signal+0x1ee>
        uint16_t btn_pr;
        /*Search the pressed area*/
        lv_indev_get_point(param, &p);
 8016ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016caa:	4619      	mov	r1, r3
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7ee fc91 	bl	80055d4 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 8016cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f000 fc0b 	bl	80174d4 <get_button_from_point>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	867b      	strh	r3, [r7, #50]	; 0x32
        /*Invalidate to old and the new areas*/;
        if(btn_pr != ext->btn_id_pr) {
 8016cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cc4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016cc6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d029      	beq.n	8016d20 <lv_btnm_signal+0x1e0>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f7ee fc68 	bl	80055a2 <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8016cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cd4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d005      	beq.n	8016cea <lv_btnm_signal+0x1aa>
                invalidate_button_area(btnm, ext->btn_id_pr);
 8016cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ce0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f000 fc5a 	bl	801759e <invalidate_button_area>
            }
            if(btn_pr != LV_BTNM_BTN_NONE) {
 8016cea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	d015      	beq.n	8016d20 <lv_btnm_signal+0x1e0>
                uint32_t b = ext->btn_id_act;
 8016cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016cf8:	61fb      	str	r3, [r7, #28]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016cfa:	f107 031c 	add.w	r3, r7, #28
 8016cfe:	461a      	mov	r2, r3
 8016d00:	210e      	movs	r1, #14
 8016d02:	68f8      	ldr	r0, [r7, #12]
 8016d04:	f7f0 f845 	bl	8006d92 <lv_event_send>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                if(res == LV_RES_OK) {
 8016d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d104      	bne.n	8016d20 <lv_btnm_signal+0x1e0>
                    invalidate_button_area(btnm, btn_pr);
 8016d16:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016d18:	4619      	mov	r1, r3
 8016d1a:	68f8      	ldr	r0, [r7, #12]
 8016d1c:	f000 fc3f 	bl	801759e <invalidate_button_area>
                }
            }
        }

        ext->btn_id_pr  = btn_pr;
 8016d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016d24:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = btn_pr;
 8016d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d28:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016d2a:	849a      	strh	r2, [r3, #36]	; 0x24
 8016d2c:	e2c5      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8016d2e:	7afb      	ldrb	r3, [r7, #11]
 8016d30:	2b0a      	cmp	r3, #10
 8016d32:	f040 80a7 	bne.w	8016e84 <lv_btnm_signal+0x344>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8016d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d38:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	f000 82bb 	beq.w	80172ba <lv_btnm_signal+0x77a>
            /*Toggle the button if enabled*/
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 8016d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d46:	689a      	ldr	r2, [r3, #8]
 8016d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d4a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	4413      	add	r3, r2
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	4618      	mov	r0, r3
 8016d54:	f000 fb96 	bl	8017484 <button_is_tgl_enabled>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d03f      	beq.n	8016dde <lv_btnm_signal+0x29e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 8016d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d60:	689a      	ldr	r2, [r3, #8]
 8016d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d66:	005b      	lsls	r3, r3, #1
 8016d68:	4413      	add	r3, r2
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f000 fb9d 	bl	80174ac <button_get_tgl_state>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d013      	beq.n	8016da0 <lv_btnm_signal+0x260>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 8016d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d7a:	689a      	ldr	r2, [r3, #8]
 8016d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4413      	add	r3, r2
 8016d84:	881a      	ldrh	r2, [r3, #0]
 8016d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d88:	6899      	ldr	r1, [r3, #8]
 8016d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d8c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d8e:	005b      	lsls	r3, r3, #1
 8016d90:	440b      	add	r3, r1
 8016d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d96:	b292      	uxth	r2, r2
 8016d98:	801a      	strh	r2, [r3, #0]
 8016d9a:	e012      	b.n	8016dc2 <lv_btnm_signal+0x282>
 8016d9c:	20002ab4 	.word	0x20002ab4
                } else {
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 8016da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016da2:	689a      	ldr	r2, [r3, #8]
 8016da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016da6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016da8:	005b      	lsls	r3, r3, #1
 8016daa:	4413      	add	r3, r2
 8016dac:	881a      	ldrh	r2, [r3, #0]
 8016dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016db0:	6899      	ldr	r1, [r3, #8]
 8016db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016db4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	440b      	add	r3, r1
 8016dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016dbe:	b292      	uxth	r2, r2
 8016dc0:	801a      	strh	r2, [r3, #0]
                }
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 8016dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016dc4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016dc8:	f003 0302 	and.w	r3, r3, #2
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d005      	beq.n	8016dde <lv_btnm_signal+0x29e>
 8016dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016dd4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016dd6:	4619      	mov	r1, r3
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f000 fc92 	bl	8017702 <make_one_button_toggled>
            }

            /*Invalidate to old pressed area*/;
            invalidate_button_area(btnm, ext->btn_id_pr);
 8016dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016de0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016de2:	4619      	mov	r1, r3
 8016de4:	68f8      	ldr	r0, [r7, #12]
 8016de6:	f000 fbda 	bl	801759e <invalidate_button_area>

#if LV_USE_GROUP
            /*Leave the clicked button when releases if this not the focused object in a group*/
            lv_group_t * g = lv_obj_get_group(btnm);
 8016dea:	68f8      	ldr	r0, [r7, #12]
 8016dec:	f7f0 fa57 	bl	800729e <lv_obj_get_group>
 8016df0:	6378      	str	r0, [r7, #52]	; 0x34
            if(lv_group_get_focused(g) != btnm) {
 8016df2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016df4:	f7ee fa35 	bl	8005262 <lv_group_get_focused>
 8016df8:	4602      	mov	r2, r0
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	4293      	cmp	r3, r2
 8016dfe:	d003      	beq.n	8016e08 <lv_btnm_signal+0x2c8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8016e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e06:	845a      	strh	r2, [r3, #34]	; 0x22
            }
#else
            ext->btn_id_pr = LV_BTNM_BTN_NONE;
#endif

            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8016e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e0a:	689a      	ldr	r2, [r3, #8]
 8016e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	4413      	add	r3, r2
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f000 fb20 	bl	801745c <button_is_click_trig>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	f000 824b 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e26:	689a      	ldr	r2, [r3, #8]
 8016e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e2c:	005b      	lsls	r3, r3, #1
 8016e2e:	4413      	add	r3, r2
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	4618      	mov	r0, r3
 8016e34:	f000 fafe 	bl	8017434 <button_is_inactive>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	f083 0301 	eor.w	r3, r3, #1
 8016e3e:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	f000 823a 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e48:	689a      	ldr	r2, [r3, #8]
 8016e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	4413      	add	r3, r2
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f000 fac5 	bl	80173e4 <button_is_hidden>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	f083 0301 	eor.w	r3, r3, #1
 8016e60:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f000 8229 	beq.w	80172ba <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e6c:	61bb      	str	r3, [r7, #24]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016e6e:	f107 0318 	add.w	r3, r7, #24
 8016e72:	461a      	mov	r2, r3
 8016e74:	210e      	movs	r1, #14
 8016e76:	68f8      	ldr	r0, [r7, #12]
 8016e78:	f7ef ff8b 	bl	8006d92 <lv_event_send>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016e82:	e21a      	b.n	80172ba <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8016e84:	7afb      	ldrb	r3, [r7, #11]
 8016e86:	2b0c      	cmp	r3, #12
 8016e88:	d147      	bne.n	8016f1a <lv_btnm_signal+0x3da>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8016e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e92:	4293      	cmp	r3, r2
 8016e94:	f000 8211 	beq.w	80172ba <lv_btnm_signal+0x77a>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e9a:	689a      	ldr	r2, [r3, #8]
 8016e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ea0:	005b      	lsls	r3, r3, #1
 8016ea2:	4413      	add	r3, r2
 8016ea4:	881b      	ldrh	r3, [r3, #0]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f000 fab0 	bl	801740c <button_is_repeat_disabled>
 8016eac:	4603      	mov	r3, r0
 8016eae:	f083 0301 	eor.w	r3, r3, #1
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f000 8200 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ebc:	689a      	ldr	r2, [r3, #8]
 8016ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	4413      	add	r3, r2
 8016ec6:	881b      	ldrh	r3, [r3, #0]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f000 fab3 	bl	8017434 <button_is_inactive>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	f083 0301 	eor.w	r3, r3, #1
 8016ed4:	b2db      	uxtb	r3, r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 81ef 	beq.w	80172ba <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8016edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ede:	689a      	ldr	r2, [r3, #8]
 8016ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ee2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	4413      	add	r3, r2
 8016ee8:	881b      	ldrh	r3, [r3, #0]
 8016eea:	4618      	mov	r0, r3
 8016eec:	f000 fa7a 	bl	80173e4 <button_is_hidden>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	f083 0301 	eor.w	r3, r3, #1
 8016ef6:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f000 81de 	beq.w	80172ba <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8016efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f02:	617b      	str	r3, [r7, #20]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8016f04:	f107 0314 	add.w	r3, r7, #20
 8016f08:	461a      	mov	r2, r3
 8016f0a:	210e      	movs	r1, #14
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f7ef ff40 	bl	8006d92 <lv_event_send>
 8016f12:	4603      	mov	r3, r0
 8016f14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016f18:	e1cf      	b.n	80172ba <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8016f1a:	7afb      	ldrb	r3, [r7, #11]
 8016f1c:	2b09      	cmp	r3, #9
 8016f1e:	d002      	beq.n	8016f26 <lv_btnm_signal+0x3e6>
 8016f20:	7afb      	ldrb	r3, [r7, #11]
 8016f22:	2b10      	cmp	r3, #16
 8016f24:	d10b      	bne.n	8016f3e <lv_btnm_signal+0x3fe>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 8016f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f2c:	845a      	strh	r2, [r3, #34]	; 0x22
        ext->btn_id_act = LV_BTNM_BTN_NONE;
 8016f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f34:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8016f36:	68f8      	ldr	r0, [r7, #12]
 8016f38:	f7ee ff79 	bl	8005e2e <lv_obj_invalidate>
 8016f3c:	e1bd      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8016f3e:	7afb      	ldrb	r3, [r7, #11]
 8016f40:	2b0f      	cmp	r3, #15
 8016f42:	d140      	bne.n	8016fc6 <lv_btnm_signal+0x486>
#if LV_USE_GROUP
        lv_indev_t * indev         = lv_indev_get_act();
 8016f44:	f7ee faea 	bl	800551c <lv_indev_get_act>
 8016f48:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8016f4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f4c:	f7ee faf2 	bl	8005534 <lv_indev_get_type>
 8016f50:	4603      	mov	r3, r0
 8016f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8016f56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016f5a:	2b01      	cmp	r3, #1
 8016f5c:	d111      	bne.n	8016f82 <lv_btnm_signal+0x442>
            /*Select the clicked button*/
            lv_point_t p1;
            lv_indev_get_point(indev, &p1);
 8016f5e:	f107 0310 	add.w	r3, r7, #16
 8016f62:	4619      	mov	r1, r3
 8016f64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f66:	f7ee fb35 	bl	80055d4 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 8016f6a:	f107 0310 	add.w	r3, r7, #16
 8016f6e:	4619      	mov	r1, r3
 8016f70:	68f8      	ldr	r0, [r7, #12]
 8016f72:	f000 faaf 	bl	80174d4 <get_button_from_point>
 8016f76:	4603      	mov	r3, r0
 8016f78:	873b      	strh	r3, [r7, #56]	; 0x38
            ext->btn_id_pr = btn_i;
 8016f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f7c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f7e:	845a      	strh	r2, [r3, #34]	; 0x22
 8016f80:	e019      	b.n	8016fb6 <lv_btnm_signal+0x476>

        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016f82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016f86:	2b04      	cmp	r3, #4
 8016f88:	d112      	bne.n	8016fb0 <lv_btnm_signal+0x470>
            /*In navigation mode don't select any button but in edit mode select the fist*/
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 8016f8a:	68f8      	ldr	r0, [r7, #12]
 8016f8c:	f7f0 f987 	bl	800729e <lv_obj_get_group>
 8016f90:	4603      	mov	r3, r0
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ee f97d 	bl	8005292 <lv_group_get_editing>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d003      	beq.n	8016fa6 <lv_btnm_signal+0x466>
                ext->btn_id_pr = 0;
 8016f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	845a      	strh	r2, [r3, #34]	; 0x22
 8016fa4:	e007      	b.n	8016fb6 <lv_btnm_signal+0x476>
            else
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8016fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fac:	845a      	strh	r2, [r3, #34]	; 0x22
 8016fae:	e002      	b.n	8016fb6 <lv_btnm_signal+0x476>
        } else {
            ext->btn_id_pr = 0;
 8016fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	845a      	strh	r2, [r3, #34]	; 0x22
        }
#else
        ext->btn_id_pr = 0;
#endif

        ext->btn_id_act = ext->btn_id_pr;
 8016fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fb8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8016fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fbc:	849a      	strh	r2, [r3, #36]	; 0x24
        lv_obj_invalidate(btnm);
 8016fbe:	68f8      	ldr	r0, [r7, #12]
 8016fc0:	f7ee ff35 	bl	8005e2e <lv_obj_invalidate>
 8016fc4:	e179      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8016fc6:	7afb      	ldrb	r3, [r7, #11]
 8016fc8:	2b11      	cmp	r3, #17
 8016fca:	f040 814c 	bne.w	8017266 <lv_btnm_signal+0x726>
        char c = *((char *)param);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if(c == LV_KEY_RIGHT) {
 8016fd6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016fda:	2b13      	cmp	r3, #19
 8016fdc:	d125      	bne.n	801702a <lv_btnm_signal+0x4ea>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 8016fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fe0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d103      	bne.n	8016ff2 <lv_btnm_signal+0x4b2>
                ext->btn_id_pr = 0;
 8016fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fec:	2200      	movs	r2, #0
 8016fee:	845a      	strh	r2, [r3, #34]	; 0x22
 8016ff0:	e005      	b.n	8016ffe <lv_btnm_signal+0x4be>
            else
                ext->btn_id_pr++;
 8016ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ff4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ffc:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 8016ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017000:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017002:	461a      	mov	r2, r3
 8017004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017006:	8c1b      	ldrh	r3, [r3, #32]
 8017008:	3b01      	subs	r3, #1
 801700a:	429a      	cmp	r2, r3
 801700c:	db05      	blt.n	801701a <lv_btnm_signal+0x4da>
 801700e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017010:	8c1b      	ldrh	r3, [r3, #32]
 8017012:	3b01      	subs	r3, #1
 8017014:	b29a      	uxth	r2, r3
 8017016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017018:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 801701a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801701c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801701e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017020:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f7ee ff03 	bl	8005e2e <lv_obj_invalidate>
 8017028:	e147      	b.n	80172ba <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_LEFT) {
 801702a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801702e:	2b14      	cmp	r3, #20
 8017030:	d11a      	bne.n	8017068 <lv_btnm_signal+0x528>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 8017032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017034:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801703a:	4293      	cmp	r3, r2
 801703c:	d102      	bne.n	8017044 <lv_btnm_signal+0x504>
 801703e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017040:	2200      	movs	r2, #0
 8017042:	845a      	strh	r2, [r3, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8017044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017046:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017048:	2b00      	cmp	r3, #0
 801704a:	d005      	beq.n	8017058 <lv_btnm_signal+0x518>
 801704c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801704e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017050:	3b01      	subs	r3, #1
 8017052:	b29a      	uxth	r2, r3
 8017054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017056:	845a      	strh	r2, [r3, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8017058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801705a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801705c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801705e:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017060:	68f8      	ldr	r0, [r7, #12]
 8017062:	f7ee fee4 	bl	8005e2e <lv_obj_invalidate>
 8017066:	e128      	b.n	80172ba <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_DOWN) {
 8017068:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801706c:	2b12      	cmp	r3, #18
 801706e:	d17b      	bne.n	8017168 <lv_btnm_signal+0x628>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8017070:	2100      	movs	r1, #0
 8017072:	68f8      	ldr	r0, [r7, #12]
 8017074:	f7ff faf0 	bl	8016658 <lv_btnm_get_style>
 8017078:	6478      	str	r0, [r7, #68]	; 0x44
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 801707a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801707c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801707e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017082:	4293      	cmp	r3, r2
 8017084:	d103      	bne.n	801708e <lv_btnm_signal+0x54e>
                ext->btn_id_pr = 0;
 8017086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017088:	2200      	movs	r2, #0
 801708a:	845a      	strh	r2, [r3, #34]	; 0x22
 801708c:	e064      	b.n	8017158 <lv_btnm_signal+0x618>
            } else {
                uint16_t area_below;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801708e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017090:	685a      	ldr	r2, [r3, #4]
 8017092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017094:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017096:	00db      	lsls	r3, r3, #3
 8017098:	4413      	add	r3, r2
 801709a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801709e:	b29c      	uxth	r4, r3
 80170a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170a2:	685a      	ldr	r2, [r3, #4]
 80170a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	4413      	add	r3, r2
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7fe fef1 	bl	8015e94 <lv_area_get_width>
 80170b2:	4603      	mov	r3, r0
 80170b4:	105b      	asrs	r3, r3, #1
 80170b6:	b21b      	sxth	r3, r3
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	4423      	add	r3, r4
 80170bc:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 80170be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 80170c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80170ca:	e033      	b.n	8017134 <lv_btnm_signal+0x5f4>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 80170cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170ce:	685a      	ldr	r2, [r3, #4]
 80170d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80170d4:	00db      	lsls	r3, r3, #3
 80170d6:	4413      	add	r3, r2
 80170d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80170dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170de:	6859      	ldr	r1, [r3, #4]
 80170e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	dd1c      	ble.n	801712a <lv_btnm_signal+0x5ea>
                       pr_center >= ext->button_areas[area_below].x1 &&
 80170f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170f2:	685a      	ldr	r2, [r3, #4]
 80170f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80170f8:	00db      	lsls	r3, r3, #3
 80170fa:	4413      	add	r3, r2
 80170fc:	f9b3 3000 	ldrsh.w	r3, [r3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8017100:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017104:	429a      	cmp	r2, r3
 8017106:	db10      	blt.n	801712a <lv_btnm_signal+0x5ea>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 8017108:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801710e:	6859      	ldr	r1, [r3, #4]
 8017110:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017114:	00db      	lsls	r3, r3, #3
 8017116:	440b      	add	r3, r1
 8017118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801711c:	4619      	mov	r1, r3
 801711e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017120:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017124:	440b      	add	r3, r1
                       pr_center >= ext->button_areas[area_below].x1 &&
 8017126:	429a      	cmp	r2, r3
 8017128:	dd0b      	ble.n	8017142 <lv_btnm_signal+0x602>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 801712a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801712e:	3301      	adds	r3, #1
 8017130:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8017134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017136:	8c1b      	ldrh	r3, [r3, #32]
 8017138:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801713c:	429a      	cmp	r2, r3
 801713e:	d3c5      	bcc.n	80170cc <lv_btnm_signal+0x58c>
 8017140:	e000      	b.n	8017144 <lv_btnm_signal+0x604>
                        break;
 8017142:	bf00      	nop
                    }
                }

                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 8017144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017146:	8c1b      	ldrh	r3, [r3, #32]
 8017148:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801714c:	429a      	cmp	r2, r3
 801714e:	d203      	bcs.n	8017158 <lv_btnm_signal+0x618>
 8017150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017152:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8017156:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8017158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801715a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801715c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801715e:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8017160:	68f8      	ldr	r0, [r7, #12]
 8017162:	f7ee fe64 	bl	8005e2e <lv_obj_invalidate>
 8017166:	e0a8      	b.n	80172ba <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_UP) {
 8017168:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801716c:	2b11      	cmp	r3, #17
 801716e:	f040 80a4 	bne.w	80172ba <lv_btnm_signal+0x77a>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8017172:	2100      	movs	r1, #0
 8017174:	68f8      	ldr	r0, [r7, #12]
 8017176:	f7ff fa6f 	bl	8016658 <lv_btnm_get_style>
 801717a:	64f8      	str	r0, [r7, #76]	; 0x4c
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 801717c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801717e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017184:	4293      	cmp	r3, r2
 8017186:	d103      	bne.n	8017190 <lv_btnm_signal+0x650>
                ext->btn_id_pr = 0;
 8017188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801718a:	2200      	movs	r2, #0
 801718c:	845a      	strh	r2, [r3, #34]	; 0x22
 801718e:	e062      	b.n	8017256 <lv_btnm_signal+0x716>
            } else {
                int16_t area_above;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8017190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017192:	685a      	ldr	r2, [r3, #4]
 8017194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017196:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017198:	00db      	lsls	r3, r3, #3
 801719a:	4413      	add	r3, r2
 801719c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171a0:	b29c      	uxth	r4, r3
 80171a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171a4:	685a      	ldr	r2, [r3, #4]
 80171a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171aa:	00db      	lsls	r3, r3, #3
 80171ac:	4413      	add	r3, r2
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7fe fe70 	bl	8015e94 <lv_area_get_width>
 80171b4:	4603      	mov	r3, r0
 80171b6:	105b      	asrs	r3, r3, #1
 80171b8:	b21b      	sxth	r3, r3
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	4423      	add	r3, r4
 80171be:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 80171c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80171c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80171cc:	e035      	b.n	801723a <lv_btnm_signal+0x6fa>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 80171ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171d0:	685a      	ldr	r2, [r3, #4]
 80171d2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	4413      	add	r3, r2
 80171da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80171de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171e0:	6859      	ldr	r1, [r3, #4]
 80171e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171e6:	00db      	lsls	r3, r3, #3
 80171e8:	440b      	add	r3, r1
 80171ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	da1c      	bge.n	801722c <lv_btnm_signal+0x6ec>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80171f2:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80171f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171f8:	6859      	ldr	r1, [r3, #4]
 80171fa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80171fe:	00db      	lsls	r3, r3, #3
 8017200:	440b      	add	r3, r1
 8017202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017206:	4619      	mov	r1, r3
 8017208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801720a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801720e:	1acb      	subs	r3, r1, r3
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 8017210:	429a      	cmp	r2, r3
 8017212:	db0b      	blt.n	801722c <lv_btnm_signal+0x6ec>
                       pr_center <= ext->button_areas[area_above].x2) {
 8017214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017216:	685a      	ldr	r2, [r3, #4]
 8017218:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801721c:	00db      	lsls	r3, r3, #3
 801721e:	4413      	add	r3, r2
 8017220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 8017224:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8017228:	429a      	cmp	r2, r3
 801722a:	dd0b      	ble.n	8017244 <lv_btnm_signal+0x704>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 801722c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8017230:	b29b      	uxth	r3, r3
 8017232:	3b01      	subs	r3, #1
 8017234:	b29b      	uxth	r3, r3
 8017236:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801723a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801723e:	2b00      	cmp	r3, #0
 8017240:	dac5      	bge.n	80171ce <lv_btnm_signal+0x68e>
 8017242:	e000      	b.n	8017246 <lv_btnm_signal+0x706>
                        break;
 8017244:	bf00      	nop
                    }
                }
                if(area_above >= 0) ext->btn_id_pr = area_above;
 8017246:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801724a:	2b00      	cmp	r3, #0
 801724c:	db03      	blt.n	8017256 <lv_btnm_signal+0x716>
 801724e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8017252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017254:	845a      	strh	r2, [r3, #34]	; 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8017256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017258:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801725a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801725c:	849a      	strh	r2, [r3, #36]	; 0x24
            lv_obj_invalidate(btnm);
 801725e:	68f8      	ldr	r0, [r7, #12]
 8017260:	f7ee fde5 	bl	8005e2e <lv_obj_invalidate>
 8017264:	e029      	b.n	80172ba <lv_btnm_signal+0x77a>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8017266:	7afb      	ldrb	r3, [r7, #11]
 8017268:	2b12      	cmp	r3, #18
 801726a:	d105      	bne.n	8017278 <lv_btnm_signal+0x738>
        bool * editable = (bool *)param;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	657b      	str	r3, [r7, #84]	; 0x54
        *editable       = true;
 8017270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017272:	2201      	movs	r2, #1
 8017274:	701a      	strb	r2, [r3, #0]
 8017276:	e020      	b.n	80172ba <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8017278:	7afb      	ldrb	r3, [r7, #11]
 801727a:	2b06      	cmp	r3, #6
 801727c:	d11d      	bne.n	80172ba <lv_btnm_signal+0x77a>
        lv_obj_type_t * buf = param;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	65bb      	str	r3, [r7, #88]	; 0x58
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017282:	2300      	movs	r3, #0
 8017284:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8017288:	e00b      	b.n	80172a2 <lv_btnm_signal+0x762>
            if(buf->type[i] == NULL) break;
 801728a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 801728e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d009      	beq.n	80172ac <lv_btnm_signal+0x76c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017298:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801729c:	3301      	adds	r3, #1
 801729e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80172a2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80172a6:	2b06      	cmp	r3, #6
 80172a8:	d9ef      	bls.n	801728a <lv_btnm_signal+0x74a>
 80172aa:	e000      	b.n	80172ae <lv_btnm_signal+0x76e>
            if(buf->type[i] == NULL) break;
 80172ac:	bf00      	nop
        }
        buf->type[i] = "lv_btnm";
 80172ae:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80172b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172b4:	4904      	ldr	r1, [pc, #16]	; (80172c8 <lv_btnm_signal+0x788>)
 80172b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80172ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80172be:	4618      	mov	r0, r3
 80172c0:	376c      	adds	r7, #108	; 0x6c
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd90      	pop	{r4, r7, pc}
 80172c6:	bf00      	nop
 80172c8:	08029d30 	.word	0x08029d30

080172cc <allocate_btn_areas_and_controls>:
 * Create the required number of buttons and control bytes according to a map
 * @param btnm pointer to button matrix object
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b084      	sub	sp, #16
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	6039      	str	r1, [r7, #0]
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
 80172d6:	2300      	movs	r3, #0
 80172d8:	81fb      	strh	r3, [r7, #14]
    uint16_t i       = 0;
 80172da:	2300      	movs	r3, #0
 80172dc:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 80172de:	e011      	b.n	8017304 <allocate_btn_areas_and_controls+0x38>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80172e0:	89bb      	ldrh	r3, [r7, #12]
 80172e2:	009b      	lsls	r3, r3, #2
 80172e4:	683a      	ldr	r2, [r7, #0]
 80172e6:	4413      	add	r3, r2
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	4932      	ldr	r1, [pc, #200]	; (80173b4 <allocate_btn_areas_and_controls+0xe8>)
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7e8 ff6f 	bl	80001d0 <strcmp>
 80172f2:	4603      	mov	r3, r0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d002      	beq.n	80172fe <allocate_btn_areas_and_controls+0x32>
            btn_cnt++;
 80172f8:	89fb      	ldrh	r3, [r7, #14]
 80172fa:	3301      	adds	r3, #1
 80172fc:	81fb      	strh	r3, [r7, #14]
        }
        i++;
 80172fe:	89bb      	ldrh	r3, [r7, #12]
 8017300:	3301      	adds	r3, #1
 8017302:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 8017304:	89bb      	ldrh	r3, [r7, #12]
 8017306:	009b      	lsls	r3, r3, #2
 8017308:	683a      	ldr	r2, [r7, #0]
 801730a:	4413      	add	r3, r2
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	781b      	ldrb	r3, [r3, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d1e5      	bne.n	80172e0 <allocate_btn_areas_and_controls+0x14>
    }

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	f7ef ffb6 	bl	8007286 <lv_obj_get_ext_attr>
 801731a:	60b8      	str	r0, [r7, #8]

    if(ext->button_areas != NULL) {
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d007      	beq.n	8017334 <allocate_btn_areas_and_controls+0x68>
        lv_mem_free(ext->button_areas);
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	f7fc fb8d 	bl	8013a48 <lv_mem_free>
        ext->button_areas = NULL;
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	2200      	movs	r2, #0
 8017332:	605a      	str	r2, [r3, #4]
    }
    if(ext->ctrl_bits != NULL) {
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d007      	beq.n	801734c <allocate_btn_areas_and_controls+0x80>
        lv_mem_free(ext->ctrl_bits);
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	689b      	ldr	r3, [r3, #8]
 8017340:	4618      	mov	r0, r3
 8017342:	f7fc fb81 	bl	8013a48 <lv_mem_free>
        ext->ctrl_bits = NULL;
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	2200      	movs	r2, #0
 801734a:	609a      	str	r2, [r3, #8]
    }

    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801734c:	89fb      	ldrh	r3, [r7, #14]
 801734e:	00db      	lsls	r3, r3, #3
 8017350:	4618      	mov	r0, r3
 8017352:	f7fc fb39 	bl	80139c8 <lv_mem_alloc>
 8017356:	4602      	mov	r2, r0
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	605a      	str	r2, [r3, #4]
    lv_mem_assert(ext->button_areas);
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d100      	bne.n	8017366 <allocate_btn_areas_and_controls+0x9a>
 8017364:	e7fe      	b.n	8017364 <allocate_btn_areas_and_controls+0x98>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8017366:	89fb      	ldrh	r3, [r7, #14]
 8017368:	005b      	lsls	r3, r3, #1
 801736a:	4618      	mov	r0, r3
 801736c:	f7fc fb2c 	bl	80139c8 <lv_mem_alloc>
 8017370:	4602      	mov	r2, r0
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	609a      	str	r2, [r3, #8]
    lv_mem_assert(ext->ctrl_bits);
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	689b      	ldr	r3, [r3, #8]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d100      	bne.n	8017380 <allocate_btn_areas_and_controls+0xb4>
 801737e:	e7fe      	b.n	801737e <allocate_btn_areas_and_controls+0xb2>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	685b      	ldr	r3, [r3, #4]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d003      	beq.n	8017390 <allocate_btn_areas_and_controls+0xc4>
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	689b      	ldr	r3, [r3, #8]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d101      	bne.n	8017394 <allocate_btn_areas_and_controls+0xc8>
 8017390:	2300      	movs	r3, #0
 8017392:	81fb      	strh	r3, [r7, #14]

    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	6898      	ldr	r0, [r3, #8]
 8017398:	89fb      	ldrh	r3, [r7, #14]
 801739a:	005b      	lsls	r3, r3, #1
 801739c:	461a      	mov	r2, r3
 801739e:	2100      	movs	r1, #0
 80173a0:	f00f ff4b 	bl	802723a <memset>

    ext->btn_cnt = btn_cnt;
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	89fa      	ldrh	r2, [r7, #14]
 80173a8:	841a      	strh	r2, [r3, #32]
}
 80173aa:	bf00      	nop
 80173ac:	3710      	adds	r7, #16
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
 80173b2:	bf00      	nop
 80173b4:	08029d18 	.word	0x08029d18

080173b8 <get_button_width>:
 * Get the width of a button in units (default is 1).
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnm_ctrl_t ctrl_bits)
{
 80173b8:	b480      	push	{r7}
 80173ba:	b085      	sub	sp, #20
 80173bc:	af00      	add	r7, sp, #0
 80173be:	4603      	mov	r3, r0
 80173c0:	80fb      	strh	r3, [r7, #6]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 80173c2:	88fb      	ldrh	r3, [r7, #6]
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	f003 0307 	and.w	r3, r3, #7
 80173ca:	73fb      	strb	r3, [r7, #15]
    return w != 0 ? w : 1;
 80173cc:	7bfb      	ldrb	r3, [r7, #15]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d001      	beq.n	80173d6 <get_button_width+0x1e>
 80173d2:	7bfb      	ldrb	r3, [r7, #15]
 80173d4:	e000      	b.n	80173d8 <get_button_width+0x20>
 80173d6:	2301      	movs	r3, #1
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3714      	adds	r7, #20
 80173dc:	46bd      	mov	sp, r7
 80173de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e2:	4770      	bx	lr

080173e4 <button_is_hidden>:

static bool button_is_hidden(lv_btnm_ctrl_t ctrl_bits)
{
 80173e4:	b480      	push	{r7}
 80173e6:	b083      	sub	sp, #12
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 80173ee:	88fb      	ldrh	r3, [r7, #6]
 80173f0:	10db      	asrs	r3, r3, #3
 80173f2:	f003 0301 	and.w	r3, r3, #1
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	bf14      	ite	ne
 80173fa:	2301      	movne	r3, #1
 80173fc:	2300      	moveq	r3, #0
 80173fe:	b2db      	uxtb	r3, r3
}
 8017400:	4618      	mov	r0, r3
 8017402:	370c      	adds	r7, #12
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnm_ctrl_t ctrl_bits)
{
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
 8017412:	4603      	mov	r3, r0
 8017414:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 8017416:	88fb      	ldrh	r3, [r7, #6]
 8017418:	111b      	asrs	r3, r3, #4
 801741a:	f003 0301 	and.w	r3, r3, #1
 801741e:	2b00      	cmp	r3, #0
 8017420:	bf14      	ite	ne
 8017422:	2301      	movne	r3, #1
 8017424:	2300      	moveq	r3, #0
 8017426:	b2db      	uxtb	r3, r3
}
 8017428:	4618      	mov	r0, r3
 801742a:	370c      	adds	r7, #12
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <button_is_inactive>:

static bool button_is_inactive(lv_btnm_ctrl_t ctrl_bits)
{
 8017434:	b480      	push	{r7}
 8017436:	b083      	sub	sp, #12
 8017438:	af00      	add	r7, sp, #0
 801743a:	4603      	mov	r3, r0
 801743c:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_INACTIVE ? true : false;
 801743e:	88fb      	ldrh	r3, [r7, #6]
 8017440:	115b      	asrs	r3, r3, #5
 8017442:	f003 0301 	and.w	r3, r3, #1
 8017446:	2b00      	cmp	r3, #0
 8017448:	bf14      	ite	ne
 801744a:	2301      	movne	r3, #1
 801744c:	2300      	moveq	r3, #0
 801744e:	b2db      	uxtb	r3, r3
}
 8017450:	4618      	mov	r0, r3
 8017452:	370c      	adds	r7, #12
 8017454:	46bd      	mov	sp, r7
 8017456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745a:	4770      	bx	lr

0801745c <button_is_click_trig>:

static bool button_is_click_trig(lv_btnm_ctrl_t ctrl_bits)
{
 801745c:	b480      	push	{r7}
 801745e:	b083      	sub	sp, #12
 8017460:	af00      	add	r7, sp, #0
 8017462:	4603      	mov	r3, r0
 8017464:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 8017466:	88fb      	ldrh	r3, [r7, #6]
 8017468:	121b      	asrs	r3, r3, #8
 801746a:	f003 0301 	and.w	r3, r3, #1
 801746e:	2b00      	cmp	r3, #0
 8017470:	bf14      	ite	ne
 8017472:	2301      	movne	r3, #1
 8017474:	2300      	moveq	r3, #0
 8017476:	b2db      	uxtb	r3, r3
}
 8017478:	4618      	mov	r0, r3
 801747a:	370c      	adds	r7, #12
 801747c:	46bd      	mov	sp, r7
 801747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017482:	4770      	bx	lr

08017484 <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnm_ctrl_t ctrl_bits)
{
 8017484:	b480      	push	{r7}
 8017486:	b083      	sub	sp, #12
 8017488:	af00      	add	r7, sp, #0
 801748a:	4603      	mov	r3, r0
 801748c:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
 801748e:	88fb      	ldrh	r3, [r7, #6]
 8017490:	119b      	asrs	r3, r3, #6
 8017492:	f003 0301 	and.w	r3, r3, #1
 8017496:	2b00      	cmp	r3, #0
 8017498:	bf14      	ite	ne
 801749a:	2301      	movne	r3, #1
 801749c:	2300      	moveq	r3, #0
 801749e:	b2db      	uxtb	r3, r3
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	370c      	adds	r7, #12
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b083      	sub	sp, #12
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	4603      	mov	r3, r0
 80174b4:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 80174b6:	88fb      	ldrh	r3, [r7, #6]
 80174b8:	11db      	asrs	r3, r3, #7
 80174ba:	f003 0301 	and.w	r3, r3, #1
 80174be:	2b00      	cmp	r3, #0
 80174c0:	bf14      	ite	ne
 80174c2:	2301      	movne	r3, #1
 80174c4:	2300      	moveq	r3, #0
 80174c6:	b2db      	uxtb	r3, r3
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	370c      	adds	r7, #12
 80174cc:	46bd      	mov	sp, r7
 80174ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d2:	4770      	bx	lr

080174d4 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNM_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b088      	sub	sp, #32
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f7ef fed1 	bl	8007286 <lv_obj_get_ext_attr>
 80174e4:	61b8      	str	r0, [r7, #24]
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 80174e6:	f107 0310 	add.w	r3, r7, #16
 80174ea:	4619      	mov	r1, r3
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f7ef fd9e 	bl	800702e <lv_obj_get_coords>

    for(i = 0; i < ext->btn_cnt; i++) {
 80174f2:	2300      	movs	r3, #0
 80174f4:	83fb      	strh	r3, [r7, #30]
 80174f6:	e03e      	b.n	8017576 <get_button_from_point+0xa2>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	685a      	ldr	r2, [r3, #4]
 80174fc:	8bfb      	ldrh	r3, [r7, #30]
 80174fe:	00db      	lsls	r3, r3, #3
 8017500:	441a      	add	r2, r3
 8017502:	f107 0308 	add.w	r3, r7, #8
 8017506:	4611      	mov	r1, r2
 8017508:	4618      	mov	r0, r3
 801750a:	f7fe fcb5 	bl	8015e78 <lv_area_copy>
        btn_area.x1 += btnm_cords.x1;
 801750e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017512:	b29a      	uxth	r2, r3
 8017514:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017518:	b29b      	uxth	r3, r3
 801751a:	4413      	add	r3, r2
 801751c:	b29b      	uxth	r3, r3
 801751e:	b21b      	sxth	r3, r3
 8017520:	813b      	strh	r3, [r7, #8]
        btn_area.y1 += btnm_cords.y1;
 8017522:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017526:	b29a      	uxth	r2, r3
 8017528:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801752c:	b29b      	uxth	r3, r3
 801752e:	4413      	add	r3, r2
 8017530:	b29b      	uxth	r3, r3
 8017532:	b21b      	sxth	r3, r3
 8017534:	817b      	strh	r3, [r7, #10]
        btn_area.x2 += btnm_cords.x1;
 8017536:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801753a:	b29a      	uxth	r2, r3
 801753c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017540:	b29b      	uxth	r3, r3
 8017542:	4413      	add	r3, r2
 8017544:	b29b      	uxth	r3, r3
 8017546:	b21b      	sxth	r3, r3
 8017548:	81bb      	strh	r3, [r7, #12]
        btn_area.y2 += btnm_cords.y1;
 801754a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801754e:	b29a      	uxth	r2, r3
 8017550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017554:	b29b      	uxth	r3, r3
 8017556:	4413      	add	r3, r2
 8017558:	b29b      	uxth	r3, r3
 801755a:	b21b      	sxth	r3, r3
 801755c:	81fb      	strh	r3, [r7, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 801755e:	f107 0308 	add.w	r3, r7, #8
 8017562:	6839      	ldr	r1, [r7, #0]
 8017564:	4618      	mov	r0, r3
 8017566:	f7fb fca2 	bl	8012eae <lv_area_is_point_on>
 801756a:	4603      	mov	r3, r0
 801756c:	2b00      	cmp	r3, #0
 801756e:	d108      	bne.n	8017582 <get_button_from_point+0xae>
    for(i = 0; i < ext->btn_cnt; i++) {
 8017570:	8bfb      	ldrh	r3, [r7, #30]
 8017572:	3301      	adds	r3, #1
 8017574:	83fb      	strh	r3, [r7, #30]
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	8c1b      	ldrh	r3, [r3, #32]
 801757a:	8bfa      	ldrh	r2, [r7, #30]
 801757c:	429a      	cmp	r2, r3
 801757e:	d3bb      	bcc.n	80174f8 <get_button_from_point+0x24>
 8017580:	e000      	b.n	8017584 <get_button_from_point+0xb0>
            break;
 8017582:	bf00      	nop
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 8017584:	69bb      	ldr	r3, [r7, #24]
 8017586:	8c1b      	ldrh	r3, [r3, #32]
 8017588:	8bfa      	ldrh	r2, [r7, #30]
 801758a:	429a      	cmp	r2, r3
 801758c:	d102      	bne.n	8017594 <get_button_from_point+0xc0>
 801758e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017592:	83fb      	strh	r3, [r7, #30]

    return i;
 8017594:	8bfb      	ldrh	r3, [r7, #30]
}
 8017596:	4618      	mov	r0, r3
 8017598:	3720      	adds	r7, #32
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}

0801759e <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
 801759e:	b580      	push	{r7, lr}
 80175a0:	b088      	sub	sp, #32
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	6078      	str	r0, [r7, #4]
 80175a6:	460b      	mov	r3, r1
 80175a8:	807b      	strh	r3, [r7, #2]
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 80175aa:	887b      	ldrh	r3, [r7, #2]
 80175ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d047      	beq.n	8017644 <invalidate_button_area+0xa6>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f7ef fe66 	bl	8007286 <lv_obj_get_ext_attr>
 80175ba:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	685a      	ldr	r2, [r3, #4]
 80175c0:	887b      	ldrh	r3, [r7, #2]
 80175c2:	00db      	lsls	r3, r3, #3
 80175c4:	441a      	add	r2, r3
 80175c6:	f107 0314 	add.w	r3, r7, #20
 80175ca:	4611      	mov	r1, r2
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7fe fc53 	bl	8015e78 <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
 80175d2:	f107 030c 	add.w	r3, r7, #12
 80175d6:	4619      	mov	r1, r3
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7ef fd28 	bl	800702e <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 80175de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80175e2:	b29a      	uxth	r2, r3
 80175e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	4413      	add	r3, r2
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	b21b      	sxth	r3, r3
 80175f0:	82bb      	strh	r3, [r7, #20]
    btn_area.y1 += btnm_area.y1;
 80175f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	4413      	add	r3, r2
 8017600:	b29b      	uxth	r3, r3
 8017602:	b21b      	sxth	r3, r3
 8017604:	82fb      	strh	r3, [r7, #22]
    btn_area.x2 += btnm_area.x1;
 8017606:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801760a:	b29a      	uxth	r2, r3
 801760c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017610:	b29b      	uxth	r3, r3
 8017612:	4413      	add	r3, r2
 8017614:	b29b      	uxth	r3, r3
 8017616:	b21b      	sxth	r3, r3
 8017618:	833b      	strh	r3, [r7, #24]
    btn_area.y2 += btnm_area.y1;
 801761a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801761e:	b29a      	uxth	r2, r3
 8017620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017624:	b29b      	uxth	r3, r3
 8017626:	4413      	add	r3, r2
 8017628:	b29b      	uxth	r3, r3
 801762a:	b21b      	sxth	r3, r3
 801762c:	837b      	strh	r3, [r7, #26]

    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f7ef fc9a 	bl	8006f68 <lv_obj_get_disp>
 8017634:	4602      	mov	r2, r0
 8017636:	f107 0314 	add.w	r3, r7, #20
 801763a:	4619      	mov	r1, r3
 801763c:	4610      	mov	r0, r2
 801763e:	f7f0 f87b 	bl	8007738 <lv_inv_area>
 8017642:	e000      	b.n	8017646 <invalidate_button_area+0xa8>
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 8017644:	bf00      	nop
}
 8017646:	3720      	adds	r7, #32
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <maps_are_identical>:
 * @param map1 map to compare
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b084      	sub	sp, #16
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
 8017654:	6039      	str	r1, [r7, #0]
    if(map1 == map2) return true;
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	429a      	cmp	r2, r3
 801765c:	d101      	bne.n	8017662 <maps_are_identical+0x16>
 801765e:	2301      	movs	r3, #1
 8017660:	e04b      	b.n	80176fa <maps_are_identical+0xae>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <maps_are_identical+0x22>
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d107      	bne.n	801767e <maps_are_identical+0x32>
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	429a      	cmp	r2, r3
 8017674:	bf0c      	ite	eq
 8017676:	2301      	moveq	r3, #1
 8017678:	2300      	movne	r3, #0
 801767a:	b2db      	uxtb	r3, r3
 801767c:	e03d      	b.n	80176fa <maps_are_identical+0xae>

    uint16_t i = 0;
 801767e:	2300      	movs	r3, #0
 8017680:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 8017682:	e014      	b.n	80176ae <maps_are_identical+0x62>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 8017684:	89fb      	ldrh	r3, [r7, #14]
 8017686:	009b      	lsls	r3, r3, #2
 8017688:	687a      	ldr	r2, [r7, #4]
 801768a:	4413      	add	r3, r2
 801768c:	6818      	ldr	r0, [r3, #0]
 801768e:	89fb      	ldrh	r3, [r7, #14]
 8017690:	009b      	lsls	r3, r3, #2
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	4413      	add	r3, r2
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	4619      	mov	r1, r3
 801769a:	f7e8 fd99 	bl	80001d0 <strcmp>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <maps_are_identical+0x5c>
 80176a4:	2300      	movs	r3, #0
 80176a6:	e028      	b.n	80176fa <maps_are_identical+0xae>
        i++;
 80176a8:	89fb      	ldrh	r3, [r7, #14]
 80176aa:	3301      	adds	r3, #1
 80176ac:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 80176ae:	89fb      	ldrh	r3, [r7, #14]
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	687a      	ldr	r2, [r7, #4]
 80176b4:	4413      	add	r3, r2
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d007      	beq.n	80176ce <maps_are_identical+0x82>
 80176be:	89fb      	ldrh	r3, [r7, #14]
 80176c0:	009b      	lsls	r3, r3, #2
 80176c2:	683a      	ldr	r2, [r7, #0]
 80176c4:	4413      	add	r3, r2
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1da      	bne.n	8017684 <maps_are_identical+0x38>
    }
    return map1[i][0] == '\0' && map2[i][0] == '\0';
 80176ce:	89fb      	ldrh	r3, [r7, #14]
 80176d0:	009b      	lsls	r3, r3, #2
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	4413      	add	r3, r2
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d109      	bne.n	80176f2 <maps_are_identical+0xa6>
 80176de:	89fb      	ldrh	r3, [r7, #14]
 80176e0:	009b      	lsls	r3, r3, #2
 80176e2:	683a      	ldr	r2, [r7, #0]
 80176e4:	4413      	add	r3, r2
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d101      	bne.n	80176f2 <maps_are_identical+0xa6>
 80176ee:	2301      	movs	r3, #1
 80176f0:	e000      	b.n	80176f4 <maps_are_identical+0xa8>
 80176f2:	2300      	movs	r3, #0
 80176f4:	f003 0301 	and.w	r3, r3, #1
 80176f8:	b2db      	uxtb	r3, r3
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3710      	adds	r7, #16
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}

08017702 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 8017702:	b580      	push	{r7, lr}
 8017704:	b084      	sub	sp, #16
 8017706:	af00      	add	r7, sp, #0
 8017708:	6078      	str	r0, [r7, #4]
 801770a:	460b      	mov	r3, r1
 801770c:	807b      	strh	r3, [r7, #2]
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 801770e:	887b      	ldrh	r3, [r7, #2]
 8017710:	2280      	movs	r2, #128	; 0x80
 8017712:	4619      	mov	r1, r3
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f7fe ff7a 	bl	801660e <lv_btnm_get_btn_ctrl>
 801771a:	4603      	mov	r3, r0
 801771c:	73fb      	strb	r3, [r7, #15]

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 801771e:	2180      	movs	r1, #128	; 0x80
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f7fe ff39 	bl	8016598 <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8017726:	7bfb      	ldrb	r3, [r7, #15]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d005      	beq.n	8017738 <make_one_button_toggled+0x36>
 801772c:	887b      	ldrh	r3, [r7, #2]
 801772e:	2280      	movs	r2, #128	; 0x80
 8017730:	4619      	mov	r1, r3
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f7fe feb8 	bl	80164a8 <lv_btnm_set_btn_ctrl>
}
 8017738:	bf00      	nop
 801773a:	3710      	adds	r7, #16
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}

08017740 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8017740:	b480      	push	{r7}
 8017742:	b083      	sub	sp, #12
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	7a1b      	ldrb	r3, [r3, #8]
}
 801774c:	4618      	mov	r0, r3
 801774e:	370c      	adds	r7, #12
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr

08017758 <lv_cont_set_fit>:
 * It tell how to change the container's size automatically.
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b084      	sub	sp, #16
 801775c:	af02      	add	r7, sp, #8
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	460b      	mov	r3, r1
 8017762:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 8017764:	78f8      	ldrb	r0, [r7, #3]
 8017766:	78fa      	ldrb	r2, [r7, #3]
 8017768:	78f9      	ldrb	r1, [r7, #3]
 801776a:	78fb      	ldrb	r3, [r7, #3]
 801776c:	9300      	str	r3, [sp, #0]
 801776e:	4603      	mov	r3, r0
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f000 fbf4 	bl	8017f5e <lv_cont_set_fit4>
}
 8017776:	bf00      	nop
 8017778:	3708      	adds	r7, #8
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}

0801777e <lv_btn_set_layout>:
{
 801777e:	b580      	push	{r7, lr}
 8017780:	b082      	sub	sp, #8
 8017782:	af00      	add	r7, sp, #0
 8017784:	6078      	str	r0, [r7, #4]
 8017786:	460b      	mov	r3, r1
 8017788:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_layout(btn, layout);
 801778a:	78fb      	ldrb	r3, [r7, #3]
 801778c:	4619      	mov	r1, r3
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fbbe 	bl	8017f10 <lv_cont_set_layout>
}
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}

0801779c <lv_btn_set_fit>:
 * It tell how to change the button size automatically.
 * @param btn pointer to a button object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_btn_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b082      	sub	sp, #8
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	460b      	mov	r3, r1
 80177a6:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit(cont, fit);
 80177a8:	78fb      	ldrb	r3, [r7, #3]
 80177aa:	4619      	mov	r1, r3
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f7ff ffd3 	bl	8017758 <lv_cont_set_fit>
}
 80177b2:	bf00      	nop
 80177b4:	3708      	adds	r7, #8
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}

080177ba <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 80177ba:	b580      	push	{r7, lr}
 80177bc:	b082      	sub	sp, #8
 80177be:	af00      	add	r7, sp, #0
 80177c0:	6078      	str	r0, [r7, #4]
 80177c2:	460b      	mov	r3, r1
 80177c4:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f7ef fca2 	bl	8007110 <lv_obj_get_style>
 80177cc:	4603      	mov	r3, r0
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3708      	adds	r7, #8
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}
	...

080177d8 <lv_cb_create>:
 * @param par pointer to an object, it will be the parent of the new check box
 * @param copy pointer to a check box object, if not NULL then the new object will be copied from it
 * @return pointer to the created check box
 */
lv_obj_t * lv_cb_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b086      	sub	sp, #24
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("check box create started");

    /*Create the ancestor basic object*/
    lv_obj_t * new_cb = lv_btn_create(par, copy);
 80177e2:	6839      	ldr	r1, [r7, #0]
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f7fe f825 	bl	8015834 <lv_btn_create>
 80177ea:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cb);
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d100      	bne.n	80177f4 <lv_cb_create+0x1c>
 80177f2:	e7fe      	b.n	80177f2 <lv_cb_create+0x1a>
    if(new_cb == NULL) return NULL;
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d101      	bne.n	80177fe <lv_cb_create+0x26>
 80177fa:	2300      	movs	r3, #0
 80177fc:	e0c8      	b.n	8017990 <lv_cb_create+0x1b8>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cb);
 80177fe:	4b66      	ldr	r3, [pc, #408]	; (8017998 <lv_cb_create+0x1c0>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d105      	bne.n	8017812 <lv_cb_create+0x3a>
 8017806:	6978      	ldr	r0, [r7, #20]
 8017808:	f7ef fd25 	bl	8007256 <lv_obj_get_signal_cb>
 801780c:	4602      	mov	r2, r0
 801780e:	4b62      	ldr	r3, [pc, #392]	; (8017998 <lv_cb_create+0x1c0>)
 8017810:	601a      	str	r2, [r3, #0]
    if(ancestor_bg_design == NULL) ancestor_bg_design = lv_obj_get_design_cb(new_cb);
 8017812:	4b62      	ldr	r3, [pc, #392]	; (801799c <lv_cb_create+0x1c4>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d105      	bne.n	8017826 <lv_cb_create+0x4e>
 801781a:	6978      	ldr	r0, [r7, #20]
 801781c:	f7ef fd27 	bl	800726e <lv_obj_get_design_cb>
 8017820:	4602      	mov	r2, r0
 8017822:	4b5e      	ldr	r3, [pc, #376]	; (801799c <lv_cb_create+0x1c4>)
 8017824:	601a      	str	r2, [r3, #0]

    lv_cb_ext_t * ext = lv_obj_allocate_ext_attr(new_cb, sizeof(lv_cb_ext_t));
 8017826:	2124      	movs	r1, #36	; 0x24
 8017828:	6978      	ldr	r0, [r7, #20]
 801782a:	f7ef fb5f 	bl	8006eec <lv_obj_allocate_ext_attr>
 801782e:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d100      	bne.n	8017838 <lv_cb_create+0x60>
 8017836:	e7fe      	b.n	8017836 <lv_cb_create+0x5e>
    if(ext == NULL) return NULL;
 8017838:	693b      	ldr	r3, [r7, #16]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d101      	bne.n	8017842 <lv_cb_create+0x6a>
 801783e:	2300      	movs	r3, #0
 8017840:	e0a6      	b.n	8017990 <lv_cb_create+0x1b8>

    ext->bullet = NULL;
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	2200      	movs	r2, #0
 8017846:	61da      	str	r2, [r3, #28]
    ext->label  = NULL;
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	2200      	movs	r2, #0
 801784c:	621a      	str	r2, [r3, #32]

    lv_obj_set_signal_cb(new_cb, lv_cb_signal);
 801784e:	4954      	ldr	r1, [pc, #336]	; (80179a0 <lv_cb_create+0x1c8>)
 8017850:	6978      	ldr	r0, [r7, #20]
 8017852:	f7ef fb2f 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_cb, lv_cb_design);
 8017856:	4953      	ldr	r1, [pc, #332]	; (80179a4 <lv_cb_create+0x1cc>)
 8017858:	6978      	ldr	r0, [r7, #20]
 801785a:	f7ef fb39 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new checkbox object*/
    if(copy == NULL) {
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d175      	bne.n	8017950 <lv_cb_create+0x178>
        ext->bullet = lv_btn_create(new_cb, NULL);
 8017864:	2100      	movs	r1, #0
 8017866:	6978      	ldr	r0, [r7, #20]
 8017868:	f7fd ffe4 	bl	8015834 <lv_btn_create>
 801786c:	4602      	mov	r2, r0
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	61da      	str	r2, [r3, #28]
        if(ancestor_bullet_design == NULL) ancestor_bullet_design = lv_obj_get_design_cb(ext->bullet);
 8017872:	4b4d      	ldr	r3, [pc, #308]	; (80179a8 <lv_cb_create+0x1d0>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d107      	bne.n	801788a <lv_cb_create+0xb2>
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	69db      	ldr	r3, [r3, #28]
 801787e:	4618      	mov	r0, r3
 8017880:	f7ef fcf5 	bl	800726e <lv_obj_get_design_cb>
 8017884:	4602      	mov	r2, r0
 8017886:	4b48      	ldr	r3, [pc, #288]	; (80179a8 <lv_cb_create+0x1d0>)
 8017888:	601a      	str	r2, [r3, #0]
        lv_obj_set_click(ext->bullet, false);
 801788a:	693b      	ldr	r3, [r7, #16]
 801788c:	69db      	ldr	r3, [r3, #28]
 801788e:	2100      	movs	r1, #0
 8017890:	4618      	mov	r0, r3
 8017892:	f7ef f9ee 	bl	8006c72 <lv_obj_set_click>

        ext->label = lv_label_create(new_cb, NULL);
 8017896:	2100      	movs	r1, #0
 8017898:	6978      	ldr	r0, [r7, #20]
 801789a:	f001 fe37 	bl	801950c <lv_label_create>
 801789e:	4602      	mov	r2, r0
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	621a      	str	r2, [r3, #32]

        lv_cb_set_text(new_cb, "Check box");
 80178a4:	4941      	ldr	r1, [pc, #260]	; (80179ac <lv_cb_create+0x1d4>)
 80178a6:	6978      	ldr	r0, [r7, #20]
 80178a8:	f000 f888 	bl	80179bc <lv_cb_set_text>
        lv_btn_set_layout(new_cb, LV_LAYOUT_ROW_M);
 80178ac:	2106      	movs	r1, #6
 80178ae:	6978      	ldr	r0, [r7, #20]
 80178b0:	f7ff ff65 	bl	801777e <lv_btn_set_layout>
        lv_btn_set_fit(new_cb, LV_FIT_TIGHT);
 80178b4:	2101      	movs	r1, #1
 80178b6:	6978      	ldr	r0, [r7, #20]
 80178b8:	f7ff ff70 	bl	801779c <lv_btn_set_fit>
        lv_btn_set_toggle(new_cb, true);
 80178bc:	2101      	movs	r1, #1
 80178be:	6978      	ldr	r0, [r7, #20]
 80178c0:	f7fe f888 	bl	80159d4 <lv_btn_set_toggle>
        lv_obj_set_protect(new_cb, LV_PROTECT_PRESS_LOST);
 80178c4:	2110      	movs	r1, #16
 80178c6:	6978      	ldr	r0, [r7, #20]
 80178c8:	f7ef fa28 	bl	8006d1c <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80178cc:	f007 fb5e 	bl	801ef8c <lv_theme_get_current>
 80178d0:	60b8      	str	r0, [r7, #8]
        if(th) {
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d030      	beq.n	801793a <lv_cb_create+0x162>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, th->style.cb.bg);
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80178de:	461a      	mov	r2, r3
 80178e0:	2100      	movs	r1, #0
 80178e2:	6978      	ldr	r0, [r7, #20]
 80178e4:	f000 f87e 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, th->style.cb.box.rel);
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80178ee:	461a      	mov	r2, r3
 80178f0:	2101      	movs	r1, #1
 80178f2:	6978      	ldr	r0, [r7, #20]
 80178f4:	f000 f876 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_PR, th->style.cb.box.pr);
 80178f8:	68bb      	ldr	r3, [r7, #8]
 80178fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80178fe:	461a      	mov	r2, r3
 8017900:	2102      	movs	r1, #2
 8017902:	6978      	ldr	r0, [r7, #20]
 8017904:	f000 f86e 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_REL, th->style.cb.box.tgl_rel);
 8017908:	68bb      	ldr	r3, [r7, #8]
 801790a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801790e:	461a      	mov	r2, r3
 8017910:	2103      	movs	r1, #3
 8017912:	6978      	ldr	r0, [r7, #20]
 8017914:	f000 f866 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_TGL_PR, th->style.cb.box.tgl_pr);
 8017918:	68bb      	ldr	r3, [r7, #8]
 801791a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801791e:	461a      	mov	r2, r3
 8017920:	2104      	movs	r1, #4
 8017922:	6978      	ldr	r0, [r7, #20]
 8017924:	f000 f85e 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_INA, th->style.cb.box.ina);
 8017928:	68bb      	ldr	r3, [r7, #8]
 801792a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801792e:	461a      	mov	r2, r3
 8017930:	2105      	movs	r1, #5
 8017932:	6978      	ldr	r0, [r7, #20]
 8017934:	f000 f856 	bl	80179e4 <lv_cb_set_style>
 8017938:	e023      	b.n	8017982 <lv_cb_create+0x1aa>
        } else {
            lv_cb_set_style(new_cb, LV_CB_STYLE_BG, &lv_style_transp);
 801793a:	4a1d      	ldr	r2, [pc, #116]	; (80179b0 <lv_cb_create+0x1d8>)
 801793c:	2100      	movs	r1, #0
 801793e:	6978      	ldr	r0, [r7, #20]
 8017940:	f000 f850 	bl	80179e4 <lv_cb_set_style>
            lv_cb_set_style(new_cb, LV_CB_STYLE_BOX_REL, &lv_style_pretty);
 8017944:	4a1b      	ldr	r2, [pc, #108]	; (80179b4 <lv_cb_create+0x1dc>)
 8017946:	2101      	movs	r1, #1
 8017948:	6978      	ldr	r0, [r7, #20]
 801794a:	f000 f84b 	bl	80179e4 <lv_cb_set_style>
 801794e:	e018      	b.n	8017982 <lv_cb_create+0x1aa>
        }
    } else {
        lv_cb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017950:	6838      	ldr	r0, [r7, #0]
 8017952:	f7ef fc98 	bl	8007286 <lv_obj_get_ext_attr>
 8017956:	60f8      	str	r0, [r7, #12]
        ext->bullet            = lv_btn_create(new_cb, copy_ext->bullet);
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	69db      	ldr	r3, [r3, #28]
 801795c:	4619      	mov	r1, r3
 801795e:	6978      	ldr	r0, [r7, #20]
 8017960:	f7fd ff68 	bl	8015834 <lv_btn_create>
 8017964:	4602      	mov	r2, r0
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	61da      	str	r2, [r3, #28]
        ext->label             = lv_label_create(new_cb, copy_ext->label);
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	6a1b      	ldr	r3, [r3, #32]
 801796e:	4619      	mov	r1, r3
 8017970:	6978      	ldr	r0, [r7, #20]
 8017972:	f001 fdcb 	bl	801950c <lv_label_create>
 8017976:	4602      	mov	r2, r0
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	621a      	str	r2, [r3, #32]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cb);
 801797c:	6978      	ldr	r0, [r7, #20]
 801797e:	f7ef f964 	bl	8006c4a <lv_obj_refresh_style>
    }

    lv_obj_set_design_cb(ext->bullet, lv_bullet_design);
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	69db      	ldr	r3, [r3, #28]
 8017986:	490c      	ldr	r1, [pc, #48]	; (80179b8 <lv_cb_create+0x1e0>)
 8017988:	4618      	mov	r0, r3
 801798a:	f7ef faa1 	bl	8006ed0 <lv_obj_set_design_cb>

    LV_LOG_INFO("check box created");

    return new_cb;
 801798e:	697b      	ldr	r3, [r7, #20]
}
 8017990:	4618      	mov	r0, r3
 8017992:	3718      	adds	r7, #24
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}
 8017998:	20002ac0 	.word	0x20002ac0
 801799c:	20002ab8 	.word	0x20002ab8
 80179a0:	08017be1 	.word	0x08017be1
 80179a4:	08017aad 	.word	0x08017aad
 80179a8:	20002abc 	.word	0x20002abc
 80179ac:	08029d38 	.word	0x08029d38
 80179b0:	20006ad0 	.word	0x20006ad0
 80179b4:	20006b84 	.word	0x20006b84
 80179b8:	08017b3d 	.word	0x08017b3d

080179bc <lv_cb_set_text>:
 * after this function returns.
 * @param cb pointer to a check box
 * @param txt the text of the check box. NULL to refresh with the current text.
 */
void lv_cb_set_text(lv_obj_t * cb, const char * txt)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	6039      	str	r1, [r7, #0]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f7ef fc5d 	bl	8007286 <lv_obj_get_ext_attr>
 80179cc:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->label, txt);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	6a1b      	ldr	r3, [r3, #32]
 80179d2:	6839      	ldr	r1, [r7, #0]
 80179d4:	4618      	mov	r0, r3
 80179d6:	f001 fecb 	bl	8019770 <lv_label_set_text>
}
 80179da:	bf00      	nop
 80179dc:	3710      	adds	r7, #16
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
	...

080179e4 <lv_cb_set_style>:
 * @param cb pointer to check box object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_cb_set_style(lv_obj_t * cb, lv_cb_style_t type, const lv_style_t * style)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b086      	sub	sp, #24
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	460b      	mov	r3, r1
 80179ee:	607a      	str	r2, [r7, #4]
 80179f0:	72fb      	strb	r3, [r7, #11]
    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 80179f2:	68f8      	ldr	r0, [r7, #12]
 80179f4:	f7ef fc47 	bl	8007286 <lv_obj_get_ext_attr>
 80179f8:	6178      	str	r0, [r7, #20]

    switch(type) {
 80179fa:	7afb      	ldrb	r3, [r7, #11]
 80179fc:	2b05      	cmp	r3, #5
 80179fe:	d851      	bhi.n	8017aa4 <lv_cb_set_style+0xc0>
 8017a00:	a201      	add	r2, pc, #4	; (adr r2, 8017a08 <lv_cb_set_style+0x24>)
 8017a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a06:	bf00      	nop
 8017a08:	08017a21 	.word	0x08017a21
 8017a0c:	08017a55 	.word	0x08017a55
 8017a10:	08017a65 	.word	0x08017a65
 8017a14:	08017a75 	.word	0x08017a75
 8017a18:	08017a85 	.word	0x08017a85
 8017a1c:	08017a95 	.word	0x08017a95
        case LV_CB_STYLE_BG:
            lv_btn_set_style(cb, LV_BTN_STYLE_REL, style);
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	2100      	movs	r1, #0
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f7fe f813 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_PR, style);
 8017a2a:	687a      	ldr	r2, [r7, #4]
 8017a2c:	2101      	movs	r1, #1
 8017a2e:	68f8      	ldr	r0, [r7, #12]
 8017a30:	f7fe f80e 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_REL, style);
 8017a34:	687a      	ldr	r2, [r7, #4]
 8017a36:	2102      	movs	r1, #2
 8017a38:	68f8      	ldr	r0, [r7, #12]
 8017a3a:	f7fe f809 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_TGL_PR, style);
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	2103      	movs	r1, #3
 8017a42:	68f8      	ldr	r0, [r7, #12]
 8017a44:	f7fe f804 	bl	8015a50 <lv_btn_set_style>
            lv_btn_set_style(cb, LV_BTN_STYLE_INA, style);
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	2104      	movs	r1, #4
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f7fd ffff 	bl	8015a50 <lv_btn_set_style>
            break;
 8017a52:	e027      	b.n	8017aa4 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_REL, style); break;
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	69db      	ldr	r3, [r3, #28]
 8017a58:	687a      	ldr	r2, [r7, #4]
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7fd fff7 	bl	8015a50 <lv_btn_set_style>
 8017a62:	e01f      	b.n	8017aa4 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_PR, style); break;
 8017a64:	697b      	ldr	r3, [r7, #20]
 8017a66:	69db      	ldr	r3, [r3, #28]
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	2101      	movs	r1, #1
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7fd ffef 	bl	8015a50 <lv_btn_set_style>
 8017a72:	e017      	b.n	8017aa4 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_REL: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_REL, style); break;
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	69db      	ldr	r3, [r3, #28]
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	2102      	movs	r1, #2
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7fd ffe7 	bl	8015a50 <lv_btn_set_style>
 8017a82:	e00f      	b.n	8017aa4 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_TGL_PR: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_TGL_PR, style); break;
 8017a84:	697b      	ldr	r3, [r7, #20]
 8017a86:	69db      	ldr	r3, [r3, #28]
 8017a88:	687a      	ldr	r2, [r7, #4]
 8017a8a:	2103      	movs	r1, #3
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7fd ffdf 	bl	8015a50 <lv_btn_set_style>
 8017a92:	e007      	b.n	8017aa4 <lv_cb_set_style+0xc0>
        case LV_CB_STYLE_BOX_INA: lv_btn_set_style(ext->bullet, LV_BTN_STYLE_INA, style); break;
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	69db      	ldr	r3, [r3, #28]
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	2104      	movs	r1, #4
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7fd ffd7 	bl	8015a50 <lv_btn_set_style>
 8017aa2:	bf00      	nop
    }
}
 8017aa4:	bf00      	nop
 8017aa6:	3718      	adds	r7, #24
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <lv_cb_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_cb_design(lv_obj_t * cb, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b088      	sub	sp, #32
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	4613      	mov	r3, r2
 8017ab8:	71fb      	strb	r3, [r7, #7]
    bool result = true;
 8017aba:	2301      	movs	r3, #1
 8017abc:	77fb      	strb	r3, [r7, #31]

    if(mode == LV_DESIGN_COVER_CHK) {
 8017abe:	79fb      	ldrb	r3, [r7, #7]
 8017ac0:	2b02      	cmp	r3, #2
 8017ac2:	d108      	bne.n	8017ad6 <lv_cb_design+0x2a>
        /*Return false if the object is not covers the mask_p area*/
        result = ancestor_bg_design(cb, mask, mode);
 8017ac4:	4b1c      	ldr	r3, [pc, #112]	; (8017b38 <lv_cb_design+0x8c>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	79fa      	ldrb	r2, [r7, #7]
 8017aca:	68b9      	ldr	r1, [r7, #8]
 8017acc:	68f8      	ldr	r0, [r7, #12]
 8017ace:	4798      	blx	r3
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	77fb      	strb	r3, [r7, #31]
 8017ad4:	e02a      	b.n	8017b2c <lv_cb_design+0x80>
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 8017ad6:	79fb      	ldrb	r3, [r7, #7]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d002      	beq.n	8017ae2 <lv_cb_design+0x36>
 8017adc:	79fb      	ldrb	r3, [r7, #7]
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d11c      	bne.n	8017b1c <lv_cb_design+0x70>
        lv_cb_ext_t * cb_ext      = lv_obj_get_ext_attr(cb);
 8017ae2:	68f8      	ldr	r0, [r7, #12]
 8017ae4:	f7ef fbcf 	bl	8007286 <lv_obj_get_ext_attr>
 8017ae8:	61b8      	str	r0, [r7, #24]
        lv_btn_ext_t * bullet_ext = lv_obj_get_ext_attr(cb_ext->bullet);
 8017aea:	69bb      	ldr	r3, [r7, #24]
 8017aec:	69db      	ldr	r3, [r3, #28]
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7ef fbc9 	bl	8007286 <lv_obj_get_ext_attr>
 8017af4:	6178      	str	r0, [r7, #20]

        /*Be sure the state of the bullet is the same as the parent button*/
        bullet_ext->state = cb_ext->bg_btn.state;
 8017af6:	69bb      	ldr	r3, [r7, #24]
 8017af8:	7e1b      	ldrb	r3, [r3, #24]
 8017afa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017afe:	b2d9      	uxtb	r1, r3
 8017b00:	697a      	ldr	r2, [r7, #20]
 8017b02:	7e13      	ldrb	r3, [r2, #24]
 8017b04:	f361 0302 	bfi	r3, r1, #0, #3
 8017b08:	7613      	strb	r3, [r2, #24]

        result = ancestor_bg_design(cb, mask, mode);
 8017b0a:	4b0b      	ldr	r3, [pc, #44]	; (8017b38 <lv_cb_design+0x8c>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	79fa      	ldrb	r2, [r7, #7]
 8017b10:	68b9      	ldr	r1, [r7, #8]
 8017b12:	68f8      	ldr	r0, [r7, #12]
 8017b14:	4798      	blx	r3
 8017b16:	4603      	mov	r3, r0
 8017b18:	77fb      	strb	r3, [r7, #31]
    } else if(mode == LV_DESIGN_DRAW_MAIN || mode == LV_DESIGN_DRAW_POST) {
 8017b1a:	e007      	b.n	8017b2c <lv_cb_design+0x80>

    } else {
        result = ancestor_bg_design(cb, mask, mode);
 8017b1c:	4b06      	ldr	r3, [pc, #24]	; (8017b38 <lv_cb_design+0x8c>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	79fa      	ldrb	r2, [r7, #7]
 8017b22:	68b9      	ldr	r1, [r7, #8]
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	4798      	blx	r3
 8017b28:	4603      	mov	r3, r0
 8017b2a:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8017b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8017b2e:	4618      	mov	r0, r3
 8017b30:	3720      	adds	r7, #32
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}
 8017b36:	bf00      	nop
 8017b38:	20002ab8 	.word	0x20002ab8

08017b3c <lv_bullet_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_bullet_design(lv_obj_t * bullet, const lv_area_t * mask, lv_design_mode_t mode)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b08a      	sub	sp, #40	; 0x28
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	60b9      	str	r1, [r7, #8]
 8017b46:	4613      	mov	r3, r2
 8017b48:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8017b4a:	79fb      	ldrb	r3, [r7, #7]
 8017b4c:	2b02      	cmp	r3, #2
 8017b4e:	d107      	bne.n	8017b60 <lv_bullet_design+0x24>
        return ancestor_bullet_design(bullet, mask, mode);
 8017b50:	4b22      	ldr	r3, [pc, #136]	; (8017bdc <lv_bullet_design+0xa0>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	79fa      	ldrb	r2, [r7, #7]
 8017b56:	68b9      	ldr	r1, [r7, #8]
 8017b58:	68f8      	ldr	r0, [r7, #12]
 8017b5a:	4798      	blx	r3
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	e039      	b.n	8017bd4 <lv_bullet_design+0x98>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017b60:	79fb      	ldrb	r3, [r7, #7]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d12c      	bne.n	8017bc0 <lv_bullet_design+0x84>
#if LV_USE_GROUP
        /* If the check box is the active in a group and
         * the background is not visible (transparent)
         * then activate the style of the bullet*/
        const lv_style_t * style_ori  = lv_obj_get_style(bullet);
 8017b66:	68f8      	ldr	r0, [r7, #12]
 8017b68:	f7ef fad2 	bl	8007110 <lv_obj_get_style>
 8017b6c:	6278      	str	r0, [r7, #36]	; 0x24
        lv_obj_t * bg                 = lv_obj_get_parent(bullet);
 8017b6e:	68f8      	ldr	r0, [r7, #12]
 8017b70:	f7ef fa34 	bl	8006fdc <lv_obj_get_parent>
 8017b74:	6238      	str	r0, [r7, #32]
        const lv_style_t * style_page = lv_obj_get_style(bg);
 8017b76:	6a38      	ldr	r0, [r7, #32]
 8017b78:	f7ef faca 	bl	8007110 <lv_obj_get_style>
 8017b7c:	61f8      	str	r0, [r7, #28]
        lv_group_t * g                = lv_obj_get_group(bg);
 8017b7e:	6a38      	ldr	r0, [r7, #32]
 8017b80:	f7ef fb8d 	bl	800729e <lv_obj_get_group>
 8017b84:	61b8      	str	r0, [r7, #24]
        if(style_page->body.opa == LV_OPA_TRANSP) { /*Is the Background visible?*/
 8017b86:	69fb      	ldr	r3, [r7, #28]
 8017b88:	7a1b      	ldrb	r3, [r3, #8]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d10e      	bne.n	8017bac <lv_bullet_design+0x70>
            if(lv_group_get_focused(g) == bg) {
 8017b8e:	69b8      	ldr	r0, [r7, #24]
 8017b90:	f7ed fb67 	bl	8005262 <lv_group_get_focused>
 8017b94:	4602      	mov	r2, r0
 8017b96:	6a3b      	ldr	r3, [r7, #32]
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d107      	bne.n	8017bac <lv_bullet_design+0x70>
                lv_style_t * style_mod;
                style_mod       = lv_group_mod_style(g, style_ori);
 8017b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b9e:	69b8      	ldr	r0, [r7, #24]
 8017ba0:	f7ed fb2f 	bl	8005202 <lv_group_mod_style>
 8017ba4:	6178      	str	r0, [r7, #20]
                bullet->style_p = style_mod; /*Temporally change the style to the activated */
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	697a      	ldr	r2, [r7, #20]
 8017baa:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_bullet_design(bullet, mask, mode);
 8017bac:	4b0b      	ldr	r3, [pc, #44]	; (8017bdc <lv_bullet_design+0xa0>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	79fa      	ldrb	r2, [r7, #7]
 8017bb2:	68b9      	ldr	r1, [r7, #8]
 8017bb4:	68f8      	ldr	r0, [r7, #12]
 8017bb6:	4798      	blx	r3

#if LV_USE_GROUP
        bullet->style_p = style_ori; /*Revert the style*/
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8017bbe:	e008      	b.n	8017bd2 <lv_bullet_design+0x96>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017bc0:	79fb      	ldrb	r3, [r7, #7]
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d105      	bne.n	8017bd2 <lv_bullet_design+0x96>
        ancestor_bullet_design(bullet, mask, mode);
 8017bc6:	4b05      	ldr	r3, [pc, #20]	; (8017bdc <lv_bullet_design+0xa0>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	79fa      	ldrb	r2, [r7, #7]
 8017bcc:	68b9      	ldr	r1, [r7, #8]
 8017bce:	68f8      	ldr	r0, [r7, #12]
 8017bd0:	4798      	blx	r3
    }

    return true;
 8017bd2:	2301      	movs	r3, #1
}
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	3728      	adds	r7, #40	; 0x28
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	20002abc 	.word	0x20002abc

08017be0 <lv_cb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cb_signal(lv_obj_t * cb, lv_signal_t sign, void * param)
{
 8017be0:	b5b0      	push	{r4, r5, r7, lr}
 8017be2:	b08a      	sub	sp, #40	; 0x28
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	460b      	mov	r3, r1
 8017bea:	607a      	str	r2, [r7, #4]
 8017bec:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cb, sign, param);
 8017bee:	4b4b      	ldr	r3, [pc, #300]	; (8017d1c <lv_cb_signal+0x13c>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	7af9      	ldrb	r1, [r7, #11]
 8017bf4:	687a      	ldr	r2, [r7, #4]
 8017bf6:	68f8      	ldr	r0, [r7, #12]
 8017bf8:	4798      	blx	r3
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(res != LV_RES_OK) return res;
 8017c00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c04:	2b01      	cmp	r3, #1
 8017c06:	d002      	beq.n	8017c0e <lv_cb_signal+0x2e>
 8017c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c0c:	e081      	b.n	8017d12 <lv_cb_signal+0x132>

    lv_cb_ext_t * ext = lv_obj_get_ext_attr(cb);
 8017c0e:	68f8      	ldr	r0, [r7, #12]
 8017c10:	f7ef fb39 	bl	8007286 <lv_obj_get_ext_attr>
 8017c14:	6238      	str	r0, [r7, #32]

    if(sign == LV_SIGNAL_STYLE_CHG) {
 8017c16:	7afb      	ldrb	r3, [r7, #11]
 8017c18:	2b04      	cmp	r3, #4
 8017c1a:	d126      	bne.n	8017c6a <lv_cb_signal+0x8a>
        const lv_style_t * label_style = lv_label_get_style(ext->label, LV_LABEL_STYLE_MAIN);
 8017c1c:	6a3b      	ldr	r3, [r7, #32]
 8017c1e:	6a1b      	ldr	r3, [r3, #32]
 8017c20:	2100      	movs	r1, #0
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7ff fdc9 	bl	80177ba <lv_label_get_style>
 8017c28:	6178      	str	r0, [r7, #20]
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 8017c2a:	6a3b      	ldr	r3, [r7, #32]
 8017c2c:	69dc      	ldr	r4, [r3, #28]
 8017c2e:	697b      	ldr	r3, [r7, #20]
 8017c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c32:	4618      	mov	r0, r3
 8017c34:	f7ff fd84 	bl	8017740 <lv_font_get_line_height>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	b21d      	sxth	r5, r3
                        lv_font_get_line_height(label_style->text.font));
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c40:	4618      	mov	r0, r3
 8017c42:	f7ff fd7d 	bl	8017740 <lv_font_get_line_height>
 8017c46:	4603      	mov	r3, r0
        lv_obj_set_size(ext->bullet, lv_font_get_line_height(label_style->text.font),
 8017c48:	b21b      	sxth	r3, r3
 8017c4a:	461a      	mov	r2, r3
 8017c4c:	4629      	mov	r1, r5
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7ee faa1 	bl	8006196 <lv_obj_set_size>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017c54:	6a3b      	ldr	r3, [r7, #32]
 8017c56:	69dc      	ldr	r4, [r3, #28]
 8017c58:	68f8      	ldr	r0, [r7, #12]
 8017c5a:	f7fd ff3b 	bl	8015ad4 <lv_btn_get_state>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	4619      	mov	r1, r3
 8017c62:	4620      	mov	r0, r4
 8017c64:	f7fd feca 	bl	80159fc <lv_btn_set_state>
 8017c68:	e051      	b.n	8017d0e <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8017c6a:	7afb      	ldrb	r3, [r7, #11]
 8017c6c:	2b07      	cmp	r3, #7
 8017c6e:	d005      	beq.n	8017c7c <lv_cb_signal+0x9c>
 8017c70:	7afb      	ldrb	r3, [r7, #11]
 8017c72:	2b0a      	cmp	r3, #10
 8017c74:	d002      	beq.n	8017c7c <lv_cb_signal+0x9c>
 8017c76:	7afb      	ldrb	r3, [r7, #11]
 8017c78:	2b09      	cmp	r3, #9
 8017c7a:	d10a      	bne.n	8017c92 <lv_cb_signal+0xb2>
        lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017c7c:	6a3b      	ldr	r3, [r7, #32]
 8017c7e:	69dc      	ldr	r4, [r3, #28]
 8017c80:	68f8      	ldr	r0, [r7, #12]
 8017c82:	f7fd ff27 	bl	8015ad4 <lv_btn_get_state>
 8017c86:	4603      	mov	r3, r0
 8017c88:	4619      	mov	r1, r3
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f7fd feb6 	bl	80159fc <lv_btn_set_state>
 8017c90:	e03d      	b.n	8017d0e <lv_cb_signal+0x12e>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8017c92:	7afb      	ldrb	r3, [r7, #11]
 8017c94:	2b11      	cmp	r3, #17
 8017c96:	d119      	bne.n	8017ccc <lv_cb_signal+0xec>
        char c = *((char *)param);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	76fb      	strb	r3, [r7, #27]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN || c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8017c9e:	7efb      	ldrb	r3, [r7, #27]
 8017ca0:	2b13      	cmp	r3, #19
 8017ca2:	d008      	beq.n	8017cb6 <lv_cb_signal+0xd6>
 8017ca4:	7efb      	ldrb	r3, [r7, #27]
 8017ca6:	2b12      	cmp	r3, #18
 8017ca8:	d005      	beq.n	8017cb6 <lv_cb_signal+0xd6>
 8017caa:	7efb      	ldrb	r3, [r7, #27]
 8017cac:	2b14      	cmp	r3, #20
 8017cae:	d002      	beq.n	8017cb6 <lv_cb_signal+0xd6>
 8017cb0:	7efb      	ldrb	r3, [r7, #27]
 8017cb2:	2b11      	cmp	r3, #17
 8017cb4:	d12b      	bne.n	8017d0e <lv_cb_signal+0x12e>
            /*Follow the backgrounds state with the bullet*/
            lv_btn_set_state(ext->bullet, lv_btn_get_state(cb));
 8017cb6:	6a3b      	ldr	r3, [r7, #32]
 8017cb8:	69dc      	ldr	r4, [r3, #28]
 8017cba:	68f8      	ldr	r0, [r7, #12]
 8017cbc:	f7fd ff0a 	bl	8015ad4 <lv_btn_get_state>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f7fd fe99 	bl	80159fc <lv_btn_set_state>
 8017cca:	e020      	b.n	8017d0e <lv_cb_signal+0x12e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8017ccc:	7afb      	ldrb	r3, [r7, #11]
 8017cce:	2b06      	cmp	r3, #6
 8017cd0:	d11d      	bne.n	8017d0e <lv_cb_signal+0x12e>
        lv_obj_type_t * buf = param;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	61fb      	str	r3, [r7, #28]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017cdc:	e00b      	b.n	8017cf6 <lv_cb_signal+0x116>
            if(buf->type[i] == NULL) break;
 8017cde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d009      	beq.n	8017d00 <lv_cb_signal+0x120>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cfa:	2b06      	cmp	r3, #6
 8017cfc:	d9ef      	bls.n	8017cde <lv_cb_signal+0xfe>
 8017cfe:	e000      	b.n	8017d02 <lv_cb_signal+0x122>
            if(buf->type[i] == NULL) break;
 8017d00:	bf00      	nop
        }
        buf->type[i] = "lv_cb";
 8017d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	4905      	ldr	r1, [pc, #20]	; (8017d20 <lv_cb_signal+0x140>)
 8017d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8017d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3728      	adds	r7, #40	; 0x28
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bdb0      	pop	{r4, r5, r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	20002ac0 	.word	0x20002ac0
 8017d20:	08029d44 	.word	0x08029d44

08017d24 <lv_area_copy>:
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8017d2e:	2208      	movs	r2, #8
 8017d30:	6839      	ldr	r1, [r7, #0]
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f00f fa76 	bl	8027224 <memcpy>
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <lv_area_get_width>:
{
 8017d40:	b480      	push	{r7}
 8017d42:	b083      	sub	sp, #12
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	1ad3      	subs	r3, r2, r3
 8017d5a:	b29b      	uxth	r3, r3
 8017d5c:	3301      	adds	r3, #1
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	b21b      	sxth	r3, r3
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	370c      	adds	r7, #12
 8017d66:	46bd      	mov	sp, r7
 8017d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6c:	4770      	bx	lr

08017d6e <lv_area_get_height>:
{
 8017d6e:	b480      	push	{r7}
 8017d70:	b083      	sub	sp, #12
 8017d72:	af00      	add	r7, sp, #0
 8017d74:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017d7c:	b29a      	uxth	r2, r3
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	1ad3      	subs	r3, r2, r3
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	b21b      	sxth	r3, r3
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	370c      	adds	r7, #12
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr

08017d9c <lv_cont_set_style>:
 * @param cont pointer to a container object
 * @param type which style should be set (can be only `LV_CONT_STYLE_MAIN`)
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	460b      	mov	r3, r1
 8017da6:	607a      	str	r2, [r7, #4]
 8017da8:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 8017daa:	6879      	ldr	r1, [r7, #4]
 8017dac:	68f8      	ldr	r0, [r7, #12]
 8017dae:	f7ee ff3a 	bl	8006c26 <lv_obj_set_style>
}
 8017db2:	bf00      	nop
 8017db4:	3710      	adds	r7, #16
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
	...

08017dbc <lv_cont_create>:
 * @param par pointer to an object, it will be the parent of the new container
 * @param copy pointer to a container object, if not NULL then the new object will be copied from it
 * @return pointer to the created container
 */
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b086      	sub	sp, #24
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("container create started");

    /*Create a basic object*/
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8017dc6:	6839      	ldr	r1, [r7, #0]
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f7ed fcf3 	bl	80057b4 <lv_obj_create>
 8017dce:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cont);
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d100      	bne.n	8017dd8 <lv_cont_create+0x1c>
 8017dd6:	e7fe      	b.n	8017dd6 <lv_cont_create+0x1a>
    if(new_cont == NULL) return NULL;
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d101      	bne.n	8017de2 <lv_cont_create+0x26>
 8017dde:	2300      	movs	r3, #0
 8017de0:	e08b      	b.n	8017efa <lv_cont_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8017de2:	4b48      	ldr	r3, [pc, #288]	; (8017f04 <lv_cont_create+0x148>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d105      	bne.n	8017df6 <lv_cont_create+0x3a>
 8017dea:	6978      	ldr	r0, [r7, #20]
 8017dec:	f7ef fa33 	bl	8007256 <lv_obj_get_signal_cb>
 8017df0:	4602      	mov	r2, r0
 8017df2:	4b44      	ldr	r3, [pc, #272]	; (8017f04 <lv_cont_create+0x148>)
 8017df4:	601a      	str	r2, [r3, #0]

    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8017df6:	2102      	movs	r1, #2
 8017df8:	6978      	ldr	r0, [r7, #20]
 8017dfa:	f7ef f877 	bl	8006eec <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8017dfe:	6978      	ldr	r0, [r7, #20]
 8017e00:	f7ef fa41 	bl	8007286 <lv_obj_get_ext_attr>
 8017e04:	6138      	str	r0, [r7, #16]
    if(ext == NULL) return NULL;
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d101      	bne.n	8017e10 <lv_cont_create+0x54>
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	e074      	b.n	8017efa <lv_cont_create+0x13e>

    lv_mem_assert(ext);
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d100      	bne.n	8017e18 <lv_cont_create+0x5c>
 8017e16:	e7fe      	b.n	8017e16 <lv_cont_create+0x5a>
    ext->fit_left   = LV_FIT_NONE;
 8017e18:	693a      	ldr	r2, [r7, #16]
 8017e1a:	7813      	ldrb	r3, [r2, #0]
 8017e1c:	f36f 1305 	bfc	r3, #4, #2
 8017e20:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = LV_FIT_NONE;
 8017e22:	693a      	ldr	r2, [r7, #16]
 8017e24:	7813      	ldrb	r3, [r2, #0]
 8017e26:	f36f 1387 	bfc	r3, #6, #2
 8017e2a:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = LV_FIT_NONE;
 8017e2c:	693a      	ldr	r2, [r7, #16]
 8017e2e:	7853      	ldrb	r3, [r2, #1]
 8017e30:	f36f 0301 	bfc	r3, #0, #2
 8017e34:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = LV_FIT_NONE;
 8017e36:	693a      	ldr	r2, [r7, #16]
 8017e38:	7853      	ldrb	r3, [r2, #1]
 8017e3a:	f36f 0383 	bfc	r3, #2, #2
 8017e3e:	7053      	strb	r3, [r2, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8017e40:	693a      	ldr	r2, [r7, #16]
 8017e42:	7813      	ldrb	r3, [r2, #0]
 8017e44:	f36f 0303 	bfc	r3, #0, #4
 8017e48:	7013      	strb	r3, [r2, #0]

    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8017e4a:	492f      	ldr	r1, [pc, #188]	; (8017f08 <lv_cont_create+0x14c>)
 8017e4c:	6978      	ldr	r0, [r7, #20]
 8017e4e:	f7ef f831 	bl	8006eb4 <lv_obj_set_signal_cb>

    /*Init the new container*/
    if(copy == NULL) {
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d116      	bne.n	8017e86 <lv_cont_create+0xca>
        /*Set the default styles if it's not screen*/
        if(par != NULL) {
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d04c      	beq.n	8017ef8 <lv_cont_create+0x13c>
            lv_theme_t * th = lv_theme_get_current();
 8017e5e:	f007 f895 	bl	801ef8c <lv_theme_get_current>
 8017e62:	60b8      	str	r0, [r7, #8]
            if(th) {
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d007      	beq.n	8017e7a <lv_cont_create+0xbe>
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, th->style.cont);
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	68db      	ldr	r3, [r3, #12]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	2100      	movs	r1, #0
 8017e72:	6978      	ldr	r0, [r7, #20]
 8017e74:	f7ff ff92 	bl	8017d9c <lv_cont_set_style>
 8017e78:	e03e      	b.n	8017ef8 <lv_cont_create+0x13c>
            } else {
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, &lv_style_pretty);
 8017e7a:	4a24      	ldr	r2, [pc, #144]	; (8017f0c <lv_cont_create+0x150>)
 8017e7c:	2100      	movs	r1, #0
 8017e7e:	6978      	ldr	r0, [r7, #20]
 8017e80:	f7ff ff8c 	bl	8017d9c <lv_cont_set_style>
 8017e84:	e038      	b.n	8017ef8 <lv_cont_create+0x13c>
            }
        }
    }
    /*Copy an existing object*/
    else {
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017e86:	6838      	ldr	r0, [r7, #0]
 8017e88:	f7ef f9fd 	bl	8007286 <lv_obj_get_ext_attr>
 8017e8c:	60f8      	str	r0, [r7, #12]
        ext->fit_left            = copy_ext->fit_left;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8017e96:	b2d9      	uxtb	r1, r3
 8017e98:	693a      	ldr	r2, [r7, #16]
 8017e9a:	7813      	ldrb	r3, [r2, #0]
 8017e9c:	f361 1305 	bfi	r3, r1, #4, #2
 8017ea0:	7013      	strb	r3, [r2, #0]
        ext->fit_right           = copy_ext->fit_right;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	781b      	ldrb	r3, [r3, #0]
 8017ea6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017eaa:	b2d9      	uxtb	r1, r3
 8017eac:	693a      	ldr	r2, [r7, #16]
 8017eae:	7813      	ldrb	r3, [r2, #0]
 8017eb0:	f361 1387 	bfi	r3, r1, #6, #2
 8017eb4:	7013      	strb	r3, [r2, #0]
        ext->fit_top             = copy_ext->fit_top;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	785b      	ldrb	r3, [r3, #1]
 8017eba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017ebe:	b2d9      	uxtb	r1, r3
 8017ec0:	693a      	ldr	r2, [r7, #16]
 8017ec2:	7853      	ldrb	r3, [r2, #1]
 8017ec4:	f361 0301 	bfi	r3, r1, #0, #2
 8017ec8:	7053      	strb	r3, [r2, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	785b      	ldrb	r3, [r3, #1]
 8017ece:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017ed2:	b2d9      	uxtb	r1, r3
 8017ed4:	693a      	ldr	r2, [r7, #16]
 8017ed6:	7853      	ldrb	r3, [r2, #1]
 8017ed8:	f361 0383 	bfi	r3, r1, #2, #2
 8017edc:	7053      	strb	r3, [r2, #1]
        ext->layout              = copy_ext->layout;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017ee6:	b2d9      	uxtb	r1, r3
 8017ee8:	693a      	ldr	r2, [r7, #16]
 8017eea:	7813      	ldrb	r3, [r2, #0]
 8017eec:	f361 0303 	bfi	r3, r1, #0, #4
 8017ef0:	7013      	strb	r3, [r2, #0]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cont);
 8017ef2:	6978      	ldr	r0, [r7, #20]
 8017ef4:	f7ee fea9 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("container created");

    return new_cont;
 8017ef8:	697b      	ldr	r3, [r7, #20]
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	3718      	adds	r7, #24
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	20002ac4 	.word	0x20002ac4
 8017f08:	08018095 	.word	0x08018095
 8017f0c:	20006b84 	.word	0x20006b84

08017f10 <lv_cont_set_layout>:
 * Set a layout on a container
 * @param cont pointer to a container object
 * @param layout a layout from 'lv_cont_layout_t'
 */
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b084      	sub	sp, #16
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	460b      	mov	r3, r1
 8017f1a:	70fb      	strb	r3, [r7, #3]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017f1c:	6878      	ldr	r0, [r7, #4]
 8017f1e:	f7ef f9b2 	bl	8007286 <lv_obj_get_ext_attr>
 8017f22:	60f8      	str	r0, [r7, #12]
    if(ext->layout == layout) return;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	461a      	mov	r2, r3
 8017f30:	78fb      	ldrb	r3, [r7, #3]
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d00f      	beq.n	8017f56 <lv_cont_set_layout+0x46>

    ext->layout = layout;
 8017f36:	78fb      	ldrb	r3, [r7, #3]
 8017f38:	f003 030f 	and.w	r3, r3, #15
 8017f3c:	b2d9      	uxtb	r1, r3
 8017f3e:	68fa      	ldr	r2, [r7, #12]
 8017f40:	7813      	ldrb	r3, [r2, #0]
 8017f42:	f361 0303 	bfi	r3, r1, #0, #4
 8017f46:	7013      	strb	r3, [r2, #0]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	69db      	ldr	r3, [r3, #28]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	2101      	movs	r1, #1
 8017f50:	6878      	ldr	r0, [r7, #4]
 8017f52:	4798      	blx	r3
 8017f54:	e000      	b.n	8017f58 <lv_cont_set_layout+0x48>
    if(ext->layout == layout) return;
 8017f56:	bf00      	nop
}
 8017f58:	3710      	adds	r7, #16
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <lv_cont_set_fit4>:
 * @param right right fit policy from `lv_fit_t`
 * @param top bottom fit policy from `lv_fit_t`
 * @param bottom bottom fit policy from `lv_fit_t`
 */
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b084      	sub	sp, #16
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	6078      	str	r0, [r7, #4]
 8017f66:	4608      	mov	r0, r1
 8017f68:	4611      	mov	r1, r2
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	70fb      	strb	r3, [r7, #3]
 8017f70:	460b      	mov	r3, r1
 8017f72:	70bb      	strb	r3, [r7, #2]
 8017f74:	4613      	mov	r3, r2
 8017f76:	707b      	strb	r3, [r7, #1]
    lv_obj_invalidate(cont);
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f7ed ff58 	bl	8005e2e <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8017f7e:	6878      	ldr	r0, [r7, #4]
 8017f80:	f7ef f981 	bl	8007286 <lv_obj_get_ext_attr>
 8017f84:	60f8      	str	r0, [r7, #12]
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	461a      	mov	r2, r3
 8017f92:	78fb      	ldrb	r3, [r7, #3]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d11a      	bne.n	8017fce <lv_cont_set_fit4+0x70>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017fa0:	b2db      	uxtb	r3, r3
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	78bb      	ldrb	r3, [r7, #2]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d111      	bne.n	8017fce <lv_cont_set_fit4+0x70>
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	785b      	ldrb	r3, [r3, #1]
 8017fae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	461a      	mov	r2, r3
 8017fb6:	787b      	ldrb	r3, [r7, #1]
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d108      	bne.n	8017fce <lv_cont_set_fit4+0x70>
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	785b      	ldrb	r3, [r3, #1]
 8017fc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	461a      	mov	r2, r3
 8017fc8:	7e3b      	ldrb	r3, [r7, #24]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d02a      	beq.n	8018024 <lv_cont_set_fit4+0xc6>
        return;
    }

    ext->fit_left   = left;
 8017fce:	78fb      	ldrb	r3, [r7, #3]
 8017fd0:	f003 0303 	and.w	r3, r3, #3
 8017fd4:	b2d9      	uxtb	r1, r3
 8017fd6:	68fa      	ldr	r2, [r7, #12]
 8017fd8:	7813      	ldrb	r3, [r2, #0]
 8017fda:	f361 1305 	bfi	r3, r1, #4, #2
 8017fde:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = right;
 8017fe0:	78bb      	ldrb	r3, [r7, #2]
 8017fe2:	f003 0303 	and.w	r3, r3, #3
 8017fe6:	b2d9      	uxtb	r1, r3
 8017fe8:	68fa      	ldr	r2, [r7, #12]
 8017fea:	7813      	ldrb	r3, [r2, #0]
 8017fec:	f361 1387 	bfi	r3, r1, #6, #2
 8017ff0:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = top;
 8017ff2:	787b      	ldrb	r3, [r7, #1]
 8017ff4:	f003 0303 	and.w	r3, r3, #3
 8017ff8:	b2d9      	uxtb	r1, r3
 8017ffa:	68fa      	ldr	r2, [r7, #12]
 8017ffc:	7853      	ldrb	r3, [r2, #1]
 8017ffe:	f361 0301 	bfi	r3, r1, #0, #2
 8018002:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = bottom;
 8018004:	7e3b      	ldrb	r3, [r7, #24]
 8018006:	f003 0303 	and.w	r3, r3, #3
 801800a:	b2d9      	uxtb	r1, r3
 801800c:	68fa      	ldr	r2, [r7, #12]
 801800e:	7853      	ldrb	r3, [r2, #1]
 8018010:	f361 0383 	bfi	r3, r1, #2, #2
 8018014:	7053      	strb	r3, [r2, #1]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	69db      	ldr	r3, [r3, #28]
 801801a:	2200      	movs	r2, #0
 801801c:	2101      	movs	r1, #1
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	4798      	blx	r3
 8018022:	e000      	b.n	8018026 <lv_cont_set_fit4+0xc8>
        return;
 8018024:	bf00      	nop
}
 8018026:	3710      	adds	r7, #16
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}

0801802c <lv_cont_get_layout>:
 * Get the layout of a container
 * @param cont pointer to container object
 * @return the layout from 'lv_cont_layout_t'
 */
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b084      	sub	sp, #16
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8018034:	6878      	ldr	r0, [r7, #4]
 8018036:	f7ef f926 	bl	8007286 <lv_obj_get_ext_attr>
 801803a:	60f8      	str	r0, [r7, #12]
    return ext->layout;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018044:	b2db      	uxtb	r3, r3
}
 8018046:	4618      	mov	r0, r3
 8018048:	3710      	adds	r7, #16
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}

0801804e <lv_cont_get_fit_left>:
 * Get left fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)
{
 801804e:	b580      	push	{r7, lr}
 8018050:	b084      	sub	sp, #16
 8018052:	af00      	add	r7, sp, #0
 8018054:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	f7ef f915 	bl	8007286 <lv_obj_get_ext_attr>
 801805c:	60f8      	str	r0, [r7, #12]
    return ext->fit_left;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018066:	b2db      	uxtb	r3, r3
}
 8018068:	4618      	mov	r0, r3
 801806a:	3710      	adds	r7, #16
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <lv_cont_get_fit_top>:
 * Get top fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f7ef f904 	bl	8007286 <lv_obj_get_ext_attr>
 801807e:	60f8      	str	r0, [r7, #12]
    return ext->fit_top;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	785b      	ldrb	r3, [r3, #1]
 8018084:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018088:	b2db      	uxtb	r3, r3
}
 801808a:	4618      	mov	r0, r3
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
	...

08018094 <lv_cont_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)
{
 8018094:	b590      	push	{r4, r7, lr}
 8018096:	b087      	sub	sp, #28
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	460b      	mov	r3, r1
 801809e:	607a      	str	r2, [r7, #4]
 80180a0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cont, sign, param);
 80180a2:	4b34      	ldr	r3, [pc, #208]	; (8018174 <lv_cont_signal+0xe0>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	7af9      	ldrb	r1, [r7, #11]
 80180a8:	687a      	ldr	r2, [r7, #4]
 80180aa:	68f8      	ldr	r0, [r7, #12]
 80180ac:	4798      	blx	r3
 80180ae:	4603      	mov	r3, r0
 80180b0:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 80180b2:	7dbb      	ldrb	r3, [r7, #22]
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d001      	beq.n	80180bc <lv_cont_signal+0x28>
 80180b8:	7dbb      	ldrb	r3, [r7, #22]
 80180ba:	e056      	b.n	801816a <lv_cont_signal+0xd6>

    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 80180bc:	7afb      	ldrb	r3, [r7, #11]
 80180be:	2b04      	cmp	r3, #4
 80180c0:	d106      	bne.n	80180d0 <lv_cont_signal+0x3c>
        lv_cont_refr_layout(cont);
 80180c2:	68f8      	ldr	r0, [r7, #12]
 80180c4:	f000 f85a 	bl	801817c <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f000 fc94 	bl	80189f6 <lv_cont_refr_autofit>
 80180ce:	e04b      	b.n	8018168 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80180d0:	7afb      	ldrb	r3, [r7, #11]
 80180d2:	2b01      	cmp	r3, #1
 80180d4:	d106      	bne.n	80180e4 <lv_cont_signal+0x50>
        lv_cont_refr_layout(cont);
 80180d6:	68f8      	ldr	r0, [r7, #12]
 80180d8:	f000 f850 	bl	801817c <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80180dc:	68f8      	ldr	r0, [r7, #12]
 80180de:	f000 fc8a 	bl	80189f6 <lv_cont_refr_autofit>
 80180e2:	e041      	b.n	8018168 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80180e4:	7afb      	ldrb	r3, [r7, #11]
 80180e6:	2b02      	cmp	r3, #2
 80180e8:	d11c      	bne.n	8018124 <lv_cont_signal+0x90>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 80180ea:	68f8      	ldr	r0, [r7, #12]
 80180ec:	f7ee ffe0 	bl	80070b0 <lv_obj_get_width>
 80180f0:	4603      	mov	r3, r0
 80180f2:	461c      	mov	r4, r3
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f7ff fe23 	bl	8017d40 <lv_area_get_width>
 80180fa:	4603      	mov	r3, r0
 80180fc:	429c      	cmp	r4, r3
 80180fe:	d10a      	bne.n	8018116 <lv_cont_signal+0x82>
 8018100:	68f8      	ldr	r0, [r7, #12]
 8018102:	f7ee ffe3 	bl	80070cc <lv_obj_get_height>
 8018106:	4603      	mov	r3, r0
 8018108:	461c      	mov	r4, r3
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f7ff fe2f 	bl	8017d6e <lv_area_get_height>
 8018110:	4603      	mov	r3, r0
 8018112:	429c      	cmp	r4, r3
 8018114:	d028      	beq.n	8018168 <lv_cont_signal+0xd4>
            lv_cont_refr_layout(cont);
 8018116:	68f8      	ldr	r0, [r7, #12]
 8018118:	f000 f830 	bl	801817c <lv_cont_refr_layout>
            lv_cont_refr_autofit(cont);
 801811c:	68f8      	ldr	r0, [r7, #12]
 801811e:	f000 fc6a 	bl	80189f6 <lv_cont_refr_autofit>
 8018122:	e021      	b.n	8018168 <lv_cont_signal+0xd4>
        }
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8018124:	7afb      	ldrb	r3, [r7, #11]
 8018126:	2b03      	cmp	r3, #3
 8018128:	d103      	bne.n	8018132 <lv_cont_signal+0x9e>
        /*FLOOD and FILL fit needs to be refreshed if the parent size has changed*/
        lv_cont_refr_autofit(cont);
 801812a:	68f8      	ldr	r0, [r7, #12]
 801812c:	f000 fc63 	bl	80189f6 <lv_cont_refr_autofit>
 8018130:	e01a      	b.n	8018168 <lv_cont_signal+0xd4>

    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018132:	7afb      	ldrb	r3, [r7, #11]
 8018134:	2b06      	cmp	r3, #6
 8018136:	d117      	bne.n	8018168 <lv_cont_signal+0xd4>
        lv_obj_type_t * buf = param;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801813c:	2300      	movs	r3, #0
 801813e:	75fb      	strb	r3, [r7, #23]
 8018140:	e008      	b.n	8018154 <lv_cont_signal+0xc0>
            if(buf->type[i] == NULL) break;
 8018142:	7dfa      	ldrb	r2, [r7, #23]
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d006      	beq.n	801815c <lv_cont_signal+0xc8>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801814e:	7dfb      	ldrb	r3, [r7, #23]
 8018150:	3301      	adds	r3, #1
 8018152:	75fb      	strb	r3, [r7, #23]
 8018154:	7dfb      	ldrb	r3, [r7, #23]
 8018156:	2b06      	cmp	r3, #6
 8018158:	d9f3      	bls.n	8018142 <lv_cont_signal+0xae>
 801815a:	e000      	b.n	801815e <lv_cont_signal+0xca>
            if(buf->type[i] == NULL) break;
 801815c:	bf00      	nop
        }
        buf->type[i] = "lv_cont";
 801815e:	7dfa      	ldrb	r2, [r7, #23]
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	4905      	ldr	r1, [pc, #20]	; (8018178 <lv_cont_signal+0xe4>)
 8018164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8018168:	7dbb      	ldrb	r3, [r7, #22]
}
 801816a:	4618      	mov	r0, r3
 801816c:	371c      	adds	r7, #28
 801816e:	46bd      	mov	sp, r7
 8018170:	bd90      	pop	{r4, r7, pc}
 8018172:	bf00      	nop
 8018174:	20002ac4 	.word	0x20002ac4
 8018178:	08029d4c 	.word	0x08029d4c

0801817c <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b084      	sub	sp, #16
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	f7ff ff51 	bl	801802c <lv_cont_get_layout>
 801818a:	4603      	mov	r3, r0
 801818c:	73fb      	strb	r3, [r7, #15]

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801818e:	2100      	movs	r1, #0
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f7ee ff2f 	bl	8006ff4 <lv_obj_get_child>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d031      	beq.n	8018200 <lv_cont_refr_layout+0x84>

    if(type == LV_LAYOUT_OFF) return;
 801819c:	7bfb      	ldrb	r3, [r7, #15]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d030      	beq.n	8018204 <lv_cont_refr_layout+0x88>

    if(type == LV_LAYOUT_CENTER) {
 80181a2:	7bfb      	ldrb	r3, [r7, #15]
 80181a4:	2b01      	cmp	r3, #1
 80181a6:	d103      	bne.n	80181b0 <lv_cont_refr_layout+0x34>
        lv_cont_layout_center(cont);
 80181a8:	6878      	ldr	r0, [r7, #4]
 80181aa:	f000 f91b 	bl	80183e4 <lv_cont_layout_center>
 80181ae:	e02a      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 80181b0:	7bfb      	ldrb	r3, [r7, #15]
 80181b2:	2b02      	cmp	r3, #2
 80181b4:	d005      	beq.n	80181c2 <lv_cont_refr_layout+0x46>
 80181b6:	7bfb      	ldrb	r3, [r7, #15]
 80181b8:	2b03      	cmp	r3, #3
 80181ba:	d002      	beq.n	80181c2 <lv_cont_refr_layout+0x46>
 80181bc:	7bfb      	ldrb	r3, [r7, #15]
 80181be:	2b04      	cmp	r3, #4
 80181c0:	d103      	bne.n	80181ca <lv_cont_refr_layout+0x4e>
        lv_cont_layout_col(cont);
 80181c2:	6878      	ldr	r0, [r7, #4]
 80181c4:	f000 f822 	bl	801820c <lv_cont_layout_col>
 80181c8:	e01d      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 80181ca:	7bfb      	ldrb	r3, [r7, #15]
 80181cc:	2b05      	cmp	r3, #5
 80181ce:	d005      	beq.n	80181dc <lv_cont_refr_layout+0x60>
 80181d0:	7bfb      	ldrb	r3, [r7, #15]
 80181d2:	2b06      	cmp	r3, #6
 80181d4:	d002      	beq.n	80181dc <lv_cont_refr_layout+0x60>
 80181d6:	7bfb      	ldrb	r3, [r7, #15]
 80181d8:	2b07      	cmp	r3, #7
 80181da:	d103      	bne.n	80181e4 <lv_cont_refr_layout+0x68>
        lv_cont_layout_row(cont);
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f000 f88b 	bl	80182f8 <lv_cont_layout_row>
 80181e2:	e010      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_PRETTY) {
 80181e4:	7bfb      	ldrb	r3, [r7, #15]
 80181e6:	2b08      	cmp	r3, #8
 80181e8:	d103      	bne.n	80181f2 <lv_cont_refr_layout+0x76>
        lv_cont_layout_pretty(cont);
 80181ea:	6878      	ldr	r0, [r7, #4]
 80181ec:	f000 f99c 	bl	8018528 <lv_cont_layout_pretty>
 80181f0:	e009      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_GRID) {
 80181f2:	7bfb      	ldrb	r3, [r7, #15]
 80181f4:	2b09      	cmp	r3, #9
 80181f6:	d106      	bne.n	8018206 <lv_cont_refr_layout+0x8a>
        lv_cont_layout_grid(cont);
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f000 fb35 	bl	8018868 <lv_cont_layout_grid>
 80181fe:	e002      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8018200:	bf00      	nop
 8018202:	e000      	b.n	8018206 <lv_cont_refr_layout+0x8a>
    if(type == LV_LAYOUT_OFF) return;
 8018204:	bf00      	nop
    }
}
 8018206:	3710      	adds	r7, #16
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <lv_cont_layout_col>:
/**
 * Handle column type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_col(lv_obj_t * cont)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b088      	sub	sp, #32
 8018210:	af02      	add	r7, sp, #8
 8018212:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f7ff ff09 	bl	801802c <lv_cont_get_layout>
 801821a:	4603      	mov	r3, r0
 801821c:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801821e:	6878      	ldr	r0, [r7, #4]
 8018220:	f7ee ff76 	bl	8007110 <lv_obj_get_style>
 8018224:	60b8      	str	r0, [r7, #8]
    lv_coord_t hpad_corr;

    switch(type) {
 8018226:	7b7b      	ldrb	r3, [r7, #13]
 8018228:	2b03      	cmp	r3, #3
 801822a:	d009      	beq.n	8018240 <lv_cont_layout_col+0x34>
 801822c:	2b04      	cmp	r3, #4
 801822e:	d00c      	beq.n	801824a <lv_cont_layout_col+0x3e>
 8018230:	2b02      	cmp	r3, #2
 8018232:	d114      	bne.n	801825e <lv_cont_layout_col+0x52>
        case LV_LAYOUT_COL_L:
            hpad_corr = style->body.padding.left;
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	8b5b      	ldrh	r3, [r3, #26]
 8018238:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801823a:	2301      	movs	r3, #1
 801823c:	74fb      	strb	r3, [r7, #19]
            break;
 801823e:	e013      	b.n	8018268 <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_M:
            hpad_corr = 0;
 8018240:	2300      	movs	r3, #0
 8018242:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_MID;
 8018244:	2302      	movs	r3, #2
 8018246:	74fb      	strb	r3, [r7, #19]
            break;
 8018248:	e00e      	b.n	8018268 <lv_cont_layout_col+0x5c>
        case LV_LAYOUT_COL_R:
            hpad_corr = -style->body.padding.right;
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018250:	b29b      	uxth	r3, r3
 8018252:	425b      	negs	r3, r3
 8018254:	b29b      	uxth	r3, r3
 8018256:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8018258:	2303      	movs	r3, #3
 801825a:	74fb      	strb	r3, [r7, #19]
            break;
 801825c:	e004      	b.n	8018268 <lv_cont_layout_col+0x5c>
        default:
            hpad_corr = 0;
 801825e:	2300      	movs	r3, #0
 8018260:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8018262:	2301      	movs	r3, #1
 8018264:	74fb      	strb	r3, [r7, #19]
            break;
 8018266:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018268:	2101      	movs	r1, #1
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f7ee fd56 	bl	8006d1c <lv_obj_set_protect>
    /* Align the children */
    lv_coord_t last_cord = style->body.padding.top;
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	8adb      	ldrh	r3, [r3, #22]
 8018274:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	3304      	adds	r3, #4
 801827a:	4618      	mov	r0, r3
 801827c:	f7fb fa37 	bl	80136ee <lv_ll_get_tail>
 8018280:	6178      	str	r0, [r7, #20]
 8018282:	e02e      	b.n	80182e2 <lv_cont_layout_col+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018284:	6978      	ldr	r0, [r7, #20]
 8018286:	f7ee ff9b 	bl	80071c0 <lv_obj_get_hidden>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d120      	bne.n	80182d2 <lv_cont_layout_col+0xc6>
 8018290:	2104      	movs	r1, #4
 8018292:	6978      	ldr	r0, [r7, #20]
 8018294:	f7ee ffc8 	bl	8007228 <lv_obj_is_protected>
 8018298:	4603      	mov	r3, r0
 801829a:	2b00      	cmp	r3, #0
 801829c:	d119      	bne.n	80182d2 <lv_cont_layout_col+0xc6>

        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 801829e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80182a2:	7cfa      	ldrb	r2, [r7, #19]
 80182a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80182a8:	9300      	str	r3, [sp, #0]
 80182aa:	460b      	mov	r3, r1
 80182ac:	6879      	ldr	r1, [r7, #4]
 80182ae:	6978      	ldr	r0, [r7, #20]
 80182b0:	f7ee f814 	bl	80062dc <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80182b4:	6978      	ldr	r0, [r7, #20]
 80182b6:	f7ee ff09 	bl	80070cc <lv_obj_get_height>
 80182ba:	4603      	mov	r3, r0
 80182bc:	461a      	mov	r2, r3
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80182c4:	4413      	add	r3, r2
 80182c6:	b29a      	uxth	r2, r3
 80182c8:	89fb      	ldrh	r3, [r7, #14]
 80182ca:	4413      	add	r3, r2
 80182cc:	b29b      	uxth	r3, r3
 80182ce:	81fb      	strh	r3, [r7, #14]
 80182d0:	e000      	b.n	80182d4 <lv_cont_layout_col+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80182d2:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	3304      	adds	r3, #4
 80182d8:	6979      	ldr	r1, [r7, #20]
 80182da:	4618      	mov	r0, r3
 80182dc:	f7fb fa34 	bl	8013748 <lv_ll_get_prev>
 80182e0:	6178      	str	r0, [r7, #20]
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d1cd      	bne.n	8018284 <lv_cont_layout_col+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80182e8:	2101      	movs	r1, #1
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f7ee fd2b 	bl	8006d46 <lv_obj_clear_protect>
}
 80182f0:	bf00      	nop
 80182f2:	3718      	adds	r7, #24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}

080182f8 <lv_cont_layout_row>:
/**
 * Handle row type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_row(lv_obj_t * cont)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b088      	sub	sp, #32
 80182fc:	af02      	add	r7, sp, #8
 80182fe:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8018300:	6878      	ldr	r0, [r7, #4]
 8018302:	f7ff fe93 	bl	801802c <lv_cont_get_layout>
 8018306:	4603      	mov	r3, r0
 8018308:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801830a:	6878      	ldr	r0, [r7, #4]
 801830c:	f7ee ff00 	bl	8007110 <lv_obj_get_style>
 8018310:	60b8      	str	r0, [r7, #8]
    lv_coord_t vpad_corr;

    switch(type) {
 8018312:	7b7b      	ldrb	r3, [r7, #13]
 8018314:	2b06      	cmp	r3, #6
 8018316:	d009      	beq.n	801832c <lv_cont_layout_row+0x34>
 8018318:	2b07      	cmp	r3, #7
 801831a:	d00c      	beq.n	8018336 <lv_cont_layout_row+0x3e>
 801831c:	2b05      	cmp	r3, #5
 801831e:	d114      	bne.n	801834a <lv_cont_layout_row+0x52>
        case LV_LAYOUT_ROW_T:
            vpad_corr = style->body.padding.top;
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	8adb      	ldrh	r3, [r3, #22]
 8018324:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8018326:	2301      	movs	r3, #1
 8018328:	74fb      	strb	r3, [r7, #19]
            break;
 801832a:	e013      	b.n	8018354 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_M:
            vpad_corr = 0;
 801832c:	2300      	movs	r3, #0
 801832e:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_LEFT_MID;
 8018330:	2307      	movs	r3, #7
 8018332:	74fb      	strb	r3, [r7, #19]
            break;
 8018334:	e00e      	b.n	8018354 <lv_cont_layout_row+0x5c>
        case LV_LAYOUT_ROW_B:
            vpad_corr = -style->body.padding.bottom;
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801833c:	b29b      	uxth	r3, r3
 801833e:	425b      	negs	r3, r3
 8018340:	b29b      	uxth	r3, r3
 8018342:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 8018344:	2304      	movs	r3, #4
 8018346:	74fb      	strb	r3, [r7, #19]
            break;
 8018348:	e004      	b.n	8018354 <lv_cont_layout_row+0x5c>
        default:
            vpad_corr = 0;
 801834a:	2300      	movs	r3, #0
 801834c:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 801834e:	2301      	movs	r3, #1
 8018350:	74fb      	strb	r3, [r7, #19]
            break;
 8018352:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018354:	2101      	movs	r1, #1
 8018356:	6878      	ldr	r0, [r7, #4]
 8018358:	f7ee fce0 	bl	8006d1c <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = style->body.padding.left;
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	8b5b      	ldrh	r3, [r3, #26]
 8018360:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	3304      	adds	r3, #4
 8018366:	4618      	mov	r0, r3
 8018368:	f7fb f9c1 	bl	80136ee <lv_ll_get_tail>
 801836c:	6178      	str	r0, [r7, #20]
 801836e:	e02e      	b.n	80183ce <lv_cont_layout_row+0xd6>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018370:	6978      	ldr	r0, [r7, #20]
 8018372:	f7ee ff25 	bl	80071c0 <lv_obj_get_hidden>
 8018376:	4603      	mov	r3, r0
 8018378:	2b00      	cmp	r3, #0
 801837a:	d120      	bne.n	80183be <lv_cont_layout_row+0xc6>
 801837c:	2104      	movs	r1, #4
 801837e:	6978      	ldr	r0, [r7, #20]
 8018380:	f7ee ff52 	bl	8007228 <lv_obj_is_protected>
 8018384:	4603      	mov	r3, r0
 8018386:	2b00      	cmp	r3, #0
 8018388:	d119      	bne.n	80183be <lv_cont_layout_row+0xc6>

        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801838a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801838e:	7cfa      	ldrb	r2, [r7, #19]
 8018390:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	460b      	mov	r3, r1
 8018398:	6879      	ldr	r1, [r7, #4]
 801839a:	6978      	ldr	r0, [r7, #20]
 801839c:	f7ed ff9e 	bl	80062dc <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 80183a0:	6978      	ldr	r0, [r7, #20]
 80183a2:	f7ee fe85 	bl	80070b0 <lv_obj_get_width>
 80183a6:	4603      	mov	r3, r0
 80183a8:	461a      	mov	r2, r3
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80183b0:	4413      	add	r3, r2
 80183b2:	b29a      	uxth	r2, r3
 80183b4:	89fb      	ldrh	r3, [r7, #14]
 80183b6:	4413      	add	r3, r2
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	81fb      	strh	r3, [r7, #14]
 80183bc:	e000      	b.n	80183c0 <lv_cont_layout_row+0xc8>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80183be:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	3304      	adds	r3, #4
 80183c4:	6979      	ldr	r1, [r7, #20]
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7fb f9be 	bl	8013748 <lv_ll_get_prev>
 80183cc:	6178      	str	r0, [r7, #20]
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d1cd      	bne.n	8018370 <lv_cont_layout_row+0x78>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80183d4:	2101      	movs	r1, #1
 80183d6:	6878      	ldr	r0, [r7, #4]
 80183d8:	f7ee fcb5 	bl	8006d46 <lv_obj_clear_protect>
}
 80183dc:	bf00      	nop
 80183de:	3718      	adds	r7, #24
 80183e0:	46bd      	mov	sp, r7
 80183e2:	bd80      	pop	{r7, pc}

080183e4 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b088      	sub	sp, #32
 80183e8:	af02      	add	r7, sp, #8
 80183ea:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f7ee fe8f 	bl	8007110 <lv_obj_get_style>
 80183f2:	60b8      	str	r0, [r7, #8]
    uint32_t obj_num         = 0;
 80183f4:	2300      	movs	r3, #0
 80183f6:	613b      	str	r3, [r7, #16]
    lv_coord_t h_tot         = 0;
 80183f8:	2300      	movs	r3, #0
 80183fa:	81fb      	strh	r3, [r7, #14]

    LV_LL_READ(cont->child_ll, child)
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	3304      	adds	r3, #4
 8018400:	4618      	mov	r0, r3
 8018402:	f7fb f961 	bl	80136c8 <lv_ll_get_head>
 8018406:	6178      	str	r0, [r7, #20]
 8018408:	e026      	b.n	8018458 <lv_cont_layout_center+0x74>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801840a:	6978      	ldr	r0, [r7, #20]
 801840c:	f7ee fed8 	bl	80071c0 <lv_obj_get_hidden>
 8018410:	4603      	mov	r3, r0
 8018412:	2b00      	cmp	r3, #0
 8018414:	d118      	bne.n	8018448 <lv_cont_layout_center+0x64>
 8018416:	2104      	movs	r1, #4
 8018418:	6978      	ldr	r0, [r7, #20]
 801841a:	f7ee ff05 	bl	8007228 <lv_obj_is_protected>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d111      	bne.n	8018448 <lv_cont_layout_center+0x64>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8018424:	6978      	ldr	r0, [r7, #20]
 8018426:	f7ee fe51 	bl	80070cc <lv_obj_get_height>
 801842a:	4603      	mov	r3, r0
 801842c:	461a      	mov	r2, r3
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018434:	4413      	add	r3, r2
 8018436:	b29a      	uxth	r2, r3
 8018438:	89fb      	ldrh	r3, [r7, #14]
 801843a:	4413      	add	r3, r2
 801843c:	b29b      	uxth	r3, r3
 801843e:	81fb      	strh	r3, [r7, #14]
        obj_num++;
 8018440:	693b      	ldr	r3, [r7, #16]
 8018442:	3301      	adds	r3, #1
 8018444:	613b      	str	r3, [r7, #16]
 8018446:	e000      	b.n	801844a <lv_cont_layout_center+0x66>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018448:	bf00      	nop
    LV_LL_READ(cont->child_ll, child)
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	3304      	adds	r3, #4
 801844e:	6979      	ldr	r1, [r7, #20]
 8018450:	4618      	mov	r0, r3
 8018452:	f7fb f95f 	bl	8013714 <lv_ll_get_next>
 8018456:	6178      	str	r0, [r7, #20]
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d1d5      	bne.n	801840a <lv_cont_layout_center+0x26>
    }

    if(obj_num == 0) return;
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d05c      	beq.n	801851e <lv_cont_layout_center+0x13a>

    h_tot -= style->body.padding.inner;
 8018464:	89fa      	ldrh	r2, [r7, #14]
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801846c:	b29b      	uxth	r3, r3
 801846e:	1ad3      	subs	r3, r2, r3
 8018470:	b29b      	uxth	r3, r3
 8018472:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8018474:	2101      	movs	r1, #1
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7ee fc50 	bl	8006d1c <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = -(h_tot / 2);
 801847c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018480:	0fda      	lsrs	r2, r3, #31
 8018482:	4413      	add	r3, r2
 8018484:	105b      	asrs	r3, r3, #1
 8018486:	b21b      	sxth	r3, r3
 8018488:	b29b      	uxth	r3, r3
 801848a:	425b      	negs	r3, r3
 801848c:	b29b      	uxth	r3, r3
 801848e:	81bb      	strh	r3, [r7, #12]
    LV_LL_READ_BACK(cont->child_ll, child)
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	3304      	adds	r3, #4
 8018494:	4618      	mov	r0, r3
 8018496:	f7fb f92a 	bl	80136ee <lv_ll_get_tail>
 801849a:	6178      	str	r0, [r7, #20]
 801849c:	e037      	b.n	801850e <lv_cont_layout_center+0x12a>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801849e:	6978      	ldr	r0, [r7, #20]
 80184a0:	f7ee fe8e 	bl	80071c0 <lv_obj_get_hidden>
 80184a4:	4603      	mov	r3, r0
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d129      	bne.n	80184fe <lv_cont_layout_center+0x11a>
 80184aa:	2104      	movs	r1, #4
 80184ac:	6978      	ldr	r0, [r7, #20]
 80184ae:	f7ee febb 	bl	8007228 <lv_obj_is_protected>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d122      	bne.n	80184fe <lv_cont_layout_center+0x11a>

        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 80184b8:	6978      	ldr	r0, [r7, #20]
 80184ba:	f7ee fe07 	bl	80070cc <lv_obj_get_height>
 80184be:	4603      	mov	r3, r0
 80184c0:	0fda      	lsrs	r2, r3, #31
 80184c2:	4413      	add	r3, r2
 80184c4:	105b      	asrs	r3, r3, #1
 80184c6:	b21b      	sxth	r3, r3
 80184c8:	b29a      	uxth	r2, r3
 80184ca:	89bb      	ldrh	r3, [r7, #12]
 80184cc:	4413      	add	r3, r2
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	b21b      	sxth	r3, r3
 80184d2:	9300      	str	r3, [sp, #0]
 80184d4:	2300      	movs	r3, #0
 80184d6:	2200      	movs	r2, #0
 80184d8:	6879      	ldr	r1, [r7, #4]
 80184da:	6978      	ldr	r0, [r7, #20]
 80184dc:	f7ed fefe 	bl	80062dc <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80184e0:	6978      	ldr	r0, [r7, #20]
 80184e2:	f7ee fdf3 	bl	80070cc <lv_obj_get_height>
 80184e6:	4603      	mov	r3, r0
 80184e8:	461a      	mov	r2, r3
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80184f0:	4413      	add	r3, r2
 80184f2:	b29a      	uxth	r2, r3
 80184f4:	89bb      	ldrh	r3, [r7, #12]
 80184f6:	4413      	add	r3, r2
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	81bb      	strh	r3, [r7, #12]
 80184fc:	e000      	b.n	8018500 <lv_cont_layout_center+0x11c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80184fe:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	3304      	adds	r3, #4
 8018504:	6979      	ldr	r1, [r7, #20]
 8018506:	4618      	mov	r0, r3
 8018508:	f7fb f91e 	bl	8013748 <lv_ll_get_prev>
 801850c:	6178      	str	r0, [r7, #20]
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d1c4      	bne.n	801849e <lv_cont_layout_center+0xba>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8018514:	2101      	movs	r1, #1
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f7ee fc15 	bl	8006d46 <lv_obj_clear_protect>
 801851c:	e000      	b.n	8018520 <lv_cont_layout_center+0x13c>
    if(obj_num == 0) return;
 801851e:	bf00      	nop
}
 8018520:	3718      	adds	r7, #24
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
	...

08018528 <lv_cont_layout_pretty>:
 * Handle the pretty layout. Put as many object as possible in row
 * then begin a new row
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_pretty(lv_obj_t * cont)
{
 8018528:	b5b0      	push	{r4, r5, r7, lr}
 801852a:	b090      	sub	sp, #64	; 0x40
 801852c:	af02      	add	r7, sp, #8
 801852e:	6078      	str	r0, [r7, #4]
    lv_obj_t * child_rs;  /* Row starter child */
    lv_obj_t * child_rc;  /* Row closer child */
    lv_obj_t * child_tmp; /* Temporary child */
    const lv_style_t * style = lv_obj_get_style(cont);
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	f7ee fded 	bl	8007110 <lv_obj_get_style>
 8018536:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ee fdb9 	bl	80070b0 <lv_obj_get_width>
 801853e:	4603      	mov	r3, r0
 8018540:	82fb      	strh	r3, [r7, #22]
    lv_coord_t act_y         = style->body.padding.top;
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	8adb      	ldrh	r3, [r3, #22]
 8018546:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/

    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	3304      	adds	r3, #4
 801854c:	4618      	mov	r0, r3
 801854e:	f7fb f8ce 	bl	80136ee <lv_ll_get_tail>
 8018552:	6378      	str	r0, [r7, #52]	; 0x34
    if(child_rs == NULL) return;                /*Return if no child*/
 8018554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018556:	2b00      	cmp	r3, #0
 8018558:	f000 8180 	beq.w	801885c <lv_cont_layout_pretty+0x334>

    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801855c:	2101      	movs	r1, #1
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f7ee fbdc 	bl	8006d1c <lv_obj_set_protect>

    child_rc = child_rs; /*Initially the the row starter and closer is the same*/
 8018564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018566:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 8018568:	e16d      	b.n	8018846 <lv_cont_layout_pretty+0x31e>
        lv_coord_t h_row = 0;
 801856a:	2300      	movs	r3, #0
 801856c:	853b      	strh	r3, [r7, #40]	; 0x28
        lv_coord_t w_row =
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 801856e:	69bb      	ldr	r3, [r7, #24]
 8018570:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018574:	b29a      	uxth	r2, r3
 8018576:	69bb      	ldr	r3, [r7, #24]
 8018578:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801857c:	b29b      	uxth	r3, r3
 801857e:	4413      	add	r3, r2
 8018580:	b29b      	uxth	r3, r3
        lv_coord_t w_row =
 8018582:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint32_t obj_num = 0;
 8018584:	2300      	movs	r3, #0
 8018586:	623b      	str	r3, [r7, #32]

        /*Find the row closer object and collect some data*/
        do {
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8018588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801858a:	f7ee fe19 	bl	80071c0 <lv_obj_get_hidden>
 801858e:	4603      	mov	r3, r0
 8018590:	f083 0301 	eor.w	r3, r3, #1
 8018594:	b2db      	uxtb	r3, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	d04b      	beq.n	8018632 <lv_cont_layout_pretty+0x10a>
 801859a:	2104      	movs	r1, #4
 801859c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801859e:	f7ee fe43 	bl	8007228 <lv_obj_is_protected>
 80185a2:	4603      	mov	r3, r0
 80185a4:	f083 0301 	eor.w	r3, r3, #1
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d041      	beq.n	8018632 <lv_cont_layout_pretty+0x10a>
                /*If this object is already not fit then break*/
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 80185ae:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 80185b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185b4:	f7ee fd7c 	bl	80070b0 <lv_obj_get_width>
 80185b8:	4603      	mov	r3, r0
 80185ba:	18e2      	adds	r2, r4, r3
 80185bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185c0:	429a      	cmp	r2, r3
 80185c2:	dd0d      	ble.n	80185e0 <lv_cont_layout_pretty+0xb8>
                    /*Step back one child because the last already not fit, so the previous is the
                     * closer*/
                    if(child_rc != NULL && obj_num != 0) {
 80185c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d043      	beq.n	8018652 <lv_cont_layout_pretty+0x12a>
 80185ca:	6a3b      	ldr	r3, [r7, #32]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d040      	beq.n	8018652 <lv_cont_layout_pretty+0x12a>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	3304      	adds	r3, #4
 80185d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7fb f89c 	bl	8013714 <lv_ll_get_next>
 80185dc:	6338      	str	r0, [r7, #48]	; 0x30
                    }
                    break;
 80185de:	e038      	b.n	8018652 <lv_cont_layout_pretty+0x12a>
                }
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80185e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185e2:	f7ee fd65 	bl	80070b0 <lv_obj_get_width>
 80185e6:	4603      	mov	r3, r0
 80185e8:	461a      	mov	r2, r3
 80185ea:	69bb      	ldr	r3, [r7, #24]
 80185ec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80185f0:	4413      	add	r3, r2
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80185f6:	4413      	add	r3, r2
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	84fb      	strh	r3, [r7, #38]	; 0x26
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 80185fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185fe:	f7ee fd65 	bl	80070cc <lv_obj_get_height>
 8018602:	4603      	mov	r3, r0
 8018604:	461a      	mov	r2, r3
 8018606:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801860a:	4293      	cmp	r3, r2
 801860c:	dc04      	bgt.n	8018618 <lv_cont_layout_pretty+0xf0>
 801860e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018610:	f7ee fd5c 	bl	80070cc <lv_obj_get_height>
 8018614:	4603      	mov	r3, r0
 8018616:	e001      	b.n	801861c <lv_cont_layout_pretty+0xf4>
 8018618:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801861c:	853b      	strh	r3, [r7, #40]	; 0x28
                obj_num++;
 801861e:	6a3b      	ldr	r3, [r7, #32]
 8018620:	3301      	adds	r3, #1
 8018622:	623b      	str	r3, [r7, #32]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8018624:	2108      	movs	r1, #8
 8018626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018628:	f7ee fdfe 	bl	8007228 <lv_obj_is_protected>
 801862c:	4603      	mov	r3, r0
 801862e:	2b00      	cmp	r3, #0
 8018630:	d111      	bne.n	8018656 <lv_cont_layout_pretty+0x12e>
                    break; /*If can not be followed by an other object then break here*/
            }
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	3304      	adds	r3, #4
 8018636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018638:	4618      	mov	r0, r3
 801863a:	f7fb f885 	bl	8013748 <lv_ll_get_prev>
 801863e:	6338      	str	r0, [r7, #48]	; 0x30
            if(obj_num == 0)
 8018640:	6a3b      	ldr	r3, [r7, #32]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d101      	bne.n	801864a <lv_cont_layout_pretty+0x122>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
 8018646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018648:	637b      	str	r3, [r7, #52]	; 0x34
                                        next as first */
        } while(child_rc != NULL);
 801864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801864c:	2b00      	cmp	r3, #0
 801864e:	d19b      	bne.n	8018588 <lv_cont_layout_pretty+0x60>
 8018650:	e002      	b.n	8018658 <lv_cont_layout_pretty+0x130>
                    break;
 8018652:	bf00      	nop
 8018654:	e000      	b.n	8018658 <lv_cont_layout_pretty+0x130>
                    break; /*If can not be followed by an other object then break here*/
 8018656:	bf00      	nop

        /*If the object is too long  then align it to the middle*/
        if(obj_num == 0) {
 8018658:	6a3b      	ldr	r3, [r7, #32]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d112      	bne.n	8018684 <lv_cont_layout_pretty+0x15c>
            if(child_rc != NULL) {
 801865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018660:	2b00      	cmp	r3, #0
 8018662:	f000 80d9 	beq.w	8018818 <lv_cont_layout_pretty+0x2f0>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8018666:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801866a:	9300      	str	r3, [sp, #0]
 801866c:	2300      	movs	r3, #0
 801866e:	2202      	movs	r2, #2
 8018670:	6879      	ldr	r1, [r7, #4]
 8018672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018674:	f7ed fe32 	bl	80062dc <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8018678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801867a:	f7ee fd27 	bl	80070cc <lv_obj_get_height>
 801867e:	4603      	mov	r3, r0
 8018680:	853b      	strh	r3, [r7, #40]	; 0x28
 8018682:	e0c9      	b.n	8018818 <lv_cont_layout_pretty+0x2f0>
            }
        }
        /*If there is only one object in the row then align it to the middle*/
        else if(obj_num == 1) {
 8018684:	6a3b      	ldr	r3, [r7, #32]
 8018686:	2b01      	cmp	r3, #1
 8018688:	d109      	bne.n	801869e <lv_cont_layout_pretty+0x176>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801868a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	2300      	movs	r3, #0
 8018692:	2202      	movs	r2, #2
 8018694:	6879      	ldr	r1, [r7, #4]
 8018696:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018698:	f7ed fe20 	bl	80062dc <lv_obj_align>
 801869c:	e0bc      	b.n	8018818 <lv_cont_layout_pretty+0x2f0>
        }
        /*If there are two object in the row then align them proportionally*/
        else if(obj_num == 2) {
 801869e:	6a3b      	ldr	r3, [r7, #32]
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	d153      	bne.n	801874c <lv_cont_layout_pretty+0x224>
            lv_obj_t * obj1 = child_rs;
 80186a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a6:	613b      	str	r3, [r7, #16]
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	3304      	adds	r3, #4
 80186ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7fb f84a 	bl	8013748 <lv_ll_get_prev>
 80186b4:	60f8      	str	r0, [r7, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 80186b6:	6938      	ldr	r0, [r7, #16]
 80186b8:	f7ee fcfa 	bl	80070b0 <lv_obj_get_width>
 80186bc:	4603      	mov	r3, r0
 80186be:	b29c      	uxth	r4, r3
 80186c0:	68f8      	ldr	r0, [r7, #12]
 80186c2:	f7ee fcf5 	bl	80070b0 <lv_obj_get_width>
 80186c6:	4603      	mov	r3, r0
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	4423      	add	r3, r4
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t pad  = (w_obj - w_row) / 3;
 80186d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80186d8:	1ad3      	subs	r3, r2, r3
 80186da:	4a62      	ldr	r2, [pc, #392]	; (8018864 <lv_cont_layout_pretty+0x33c>)
 80186dc:	fb82 1203 	smull	r1, r2, r2, r3
 80186e0:	17db      	asrs	r3, r3, #31
 80186e2:	1ad3      	subs	r3, r2, r3
 80186e4:	817b      	strh	r3, [r7, #10]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 80186e6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80186ea:	6938      	ldr	r0, [r7, #16]
 80186ec:	f7ee fcee 	bl	80070cc <lv_obj_get_height>
 80186f0:	4603      	mov	r3, r0
 80186f2:	1ae3      	subs	r3, r4, r3
 80186f4:	0fda      	lsrs	r2, r3, #31
 80186f6:	4413      	add	r3, r2
 80186f8:	105b      	asrs	r3, r3, #1
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186fe:	4413      	add	r3, r2
 8018700:	b29b      	uxth	r3, r3
 8018702:	b21b      	sxth	r3, r3
 8018704:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018708:	9300      	str	r3, [sp, #0]
 801870a:	4613      	mov	r3, r2
 801870c:	2201      	movs	r2, #1
 801870e:	6879      	ldr	r1, [r7, #4]
 8018710:	6938      	ldr	r0, [r7, #16]
 8018712:	f7ed fde3 	bl	80062dc <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8018716:	897b      	ldrh	r3, [r7, #10]
 8018718:	425b      	negs	r3, r3
 801871a:	b29b      	uxth	r3, r3
 801871c:	b21d      	sxth	r5, r3
 801871e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8018722:	68f8      	ldr	r0, [r7, #12]
 8018724:	f7ee fcd2 	bl	80070cc <lv_obj_get_height>
 8018728:	4603      	mov	r3, r0
 801872a:	1ae3      	subs	r3, r4, r3
 801872c:	0fda      	lsrs	r2, r3, #31
 801872e:	4413      	add	r3, r2
 8018730:	105b      	asrs	r3, r3, #1
 8018732:	b29a      	uxth	r2, r3
 8018734:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018736:	4413      	add	r3, r2
 8018738:	b29b      	uxth	r3, r3
 801873a:	b21b      	sxth	r3, r3
 801873c:	9300      	str	r3, [sp, #0]
 801873e:	462b      	mov	r3, r5
 8018740:	2203      	movs	r2, #3
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f7ed fdc9 	bl	80062dc <lv_obj_align>
 801874a:	e065      	b.n	8018818 <lv_cont_layout_pretty+0x2f0>
        }
        /* Align the children (from child_rs to child_rc)*/
        else {
            w_row -= style->body.padding.inner * obj_num;
 801874c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801874e:	69bb      	ldr	r3, [r7, #24]
 8018750:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018754:	b299      	uxth	r1, r3
 8018756:	6a3b      	ldr	r3, [r7, #32]
 8018758:	b29b      	uxth	r3, r3
 801875a:	fb11 f303 	smulbb	r3, r1, r3
 801875e:	b29b      	uxth	r3, r3
 8018760:	1ad3      	subs	r3, r2, r3
 8018762:	b29b      	uxth	r3, r3
 8018764:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8018766:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801876a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801876e:	1ad3      	subs	r3, r2, r3
 8018770:	461a      	mov	r2, r3
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	3b01      	subs	r3, #1
 8018776:	fbb2 f3f3 	udiv	r3, r2, r3
 801877a:	82bb      	strh	r3, [r7, #20]
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 801877c:	69bb      	ldr	r3, [r7, #24]
 801877e:	8b5b      	ldrh	r3, [r3, #26]
 8018780:	83fb      	strh	r3, [r7, #30]
            child_tmp           = child_rs;
 8018782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018784:	62fb      	str	r3, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 8018786:	e042      	b.n	801880e <lv_cont_layout_pretty+0x2e6>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8018788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801878a:	f7ee fd19 	bl	80071c0 <lv_obj_get_hidden>
 801878e:	4603      	mov	r3, r0
 8018790:	f083 0301 	eor.w	r3, r3, #1
 8018794:	b2db      	uxtb	r3, r3
 8018796:	2b00      	cmp	r3, #0
 8018798:	d02e      	beq.n	80187f8 <lv_cont_layout_pretty+0x2d0>
 801879a:	2104      	movs	r1, #4
 801879c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801879e:	f7ee fd43 	bl	8007228 <lv_obj_is_protected>
 80187a2:	4603      	mov	r3, r0
 80187a4:	f083 0301 	eor.w	r3, r3, #1
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d024      	beq.n	80187f8 <lv_cont_layout_pretty+0x2d0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 80187ae:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80187b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187b4:	f7ee fc8a 	bl	80070cc <lv_obj_get_height>
 80187b8:	4603      	mov	r3, r0
 80187ba:	1ae3      	subs	r3, r4, r3
 80187bc:	0fda      	lsrs	r2, r3, #31
 80187be:	4413      	add	r3, r2
 80187c0:	105b      	asrs	r3, r3, #1
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80187c6:	4413      	add	r3, r2
 80187c8:	b29b      	uxth	r3, r3
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 80187ca:	b21b      	sxth	r3, r3
 80187cc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80187d0:	9300      	str	r3, [sp, #0]
 80187d2:	4613      	mov	r3, r2
 80187d4:	2201      	movs	r2, #1
 80187d6:	6879      	ldr	r1, [r7, #4]
 80187d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187da:	f7ed fd7f 	bl	80062dc <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 80187de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187e0:	f7ee fc66 	bl	80070b0 <lv_obj_get_width>
 80187e4:	4603      	mov	r3, r0
 80187e6:	461a      	mov	r2, r3
 80187e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80187ec:	4413      	add	r3, r2
 80187ee:	b29a      	uxth	r2, r3
 80187f0:	8bfb      	ldrh	r3, [r7, #30]
 80187f2:	4413      	add	r3, r2
 80187f4:	b29b      	uxth	r3, r3
 80187f6:	83fb      	strh	r3, [r7, #30]
                }
                if(child_tmp == child_rc) break;
 80187f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d00a      	beq.n	8018816 <lv_cont_layout_pretty+0x2ee>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	3304      	adds	r3, #4
 8018804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018806:	4618      	mov	r0, r3
 8018808:	f7fa ff9e 	bl	8013748 <lv_ll_get_prev>
 801880c:	62f8      	str	r0, [r7, #44]	; 0x2c
            while(child_tmp != NULL) {
 801880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018810:	2b00      	cmp	r3, #0
 8018812:	d1b9      	bne.n	8018788 <lv_cont_layout_pretty+0x260>
 8018814:	e000      	b.n	8018818 <lv_cont_layout_pretty+0x2f0>
                if(child_tmp == child_rc) break;
 8018816:	bf00      	nop
            }
        }

        if(child_rc == NULL) break;
 8018818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881a:	2b00      	cmp	r3, #0
 801881c:	d018      	beq.n	8018850 <lv_cont_layout_pretty+0x328>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801881e:	69bb      	ldr	r3, [r7, #24]
 8018820:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018824:	b29a      	uxth	r2, r3
 8018826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018828:	4413      	add	r3, r2
 801882a:	b29a      	uxth	r2, r3
 801882c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801882e:	4413      	add	r3, r2
 8018830:	b29b      	uxth	r3, r3
 8018832:	857b      	strh	r3, [r7, #42]	; 0x2a
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	3304      	adds	r3, #4
 8018838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801883a:	4618      	mov	r0, r3
 801883c:	f7fa ff84 	bl	8013748 <lv_ll_get_prev>
 8018840:	6378      	str	r0, [r7, #52]	; 0x34
        child_rc = child_rs;
 8018842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018844:	633b      	str	r3, [r7, #48]	; 0x30
    while(child_rs != NULL) {
 8018846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018848:	2b00      	cmp	r3, #0
 801884a:	f47f ae8e 	bne.w	801856a <lv_cont_layout_pretty+0x42>
 801884e:	e000      	b.n	8018852 <lv_cont_layout_pretty+0x32a>
        if(child_rc == NULL) break;
 8018850:	bf00      	nop
    }
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8018852:	2101      	movs	r1, #1
 8018854:	6878      	ldr	r0, [r7, #4]
 8018856:	f7ee fa76 	bl	8006d46 <lv_obj_clear_protect>
 801885a:	e000      	b.n	801885e <lv_cont_layout_pretty+0x336>
    if(child_rs == NULL) return;                /*Return if no child*/
 801885c:	bf00      	nop
}
 801885e:	3738      	adds	r7, #56	; 0x38
 8018860:	46bd      	mov	sp, r7
 8018862:	bdb0      	pop	{r4, r5, r7, pc}
 8018864:	55555556 	.word	0x55555556

08018868 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b08a      	sub	sp, #40	; 0x28
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	f7ee fc4d 	bl	8007110 <lv_obj_get_style>
 8018876:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f7ee fc19 	bl	80070b0 <lv_obj_get_width>
 801887e:	4603      	mov	r3, r0
 8018880:	82fb      	strh	r3, [r7, #22]
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8018882:	2100      	movs	r1, #0
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f7ee fbb5 	bl	8006ff4 <lv_obj_get_child>
 801888a:	4603      	mov	r3, r0
 801888c:	4618      	mov	r0, r3
 801888e:	f7ee fc0f 	bl	80070b0 <lv_obj_get_width>
 8018892:	4603      	mov	r3, r0
 8018894:	82bb      	strh	r3, [r7, #20]
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8018896:	2100      	movs	r1, #0
 8018898:	6878      	ldr	r0, [r7, #4]
 801889a:	f7ee fbab 	bl	8006ff4 <lv_obj_get_child>
 801889e:	4603      	mov	r3, r0
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7ee fc13 	bl	80070cc <lv_obj_get_height>
 80188a6:	4603      	mov	r3, r0
 80188a8:	827b      	strh	r3, [r7, #18]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 80188aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80188ae:	69ba      	ldr	r2, [r7, #24]
 80188b0:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80188b4:	1a9b      	subs	r3, r3, r2
 80188b6:	69ba      	ldr	r2, [r7, #24]
 80188b8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80188bc:	1a9a      	subs	r2, r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 80188be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80188c2:	69b9      	ldr	r1, [r7, #24]
 80188c4:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 80188c8:	440b      	add	r3, r1
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 80188ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80188ce:	823b      	strh	r3, [r7, #16]
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 80188d0:	8a3b      	ldrh	r3, [r7, #16]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d918      	bls.n	8018908 <lv_cont_layout_grid+0xa0>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 80188d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80188da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80188de:	69b9      	ldr	r1, [r7, #24]
 80188e0:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80188e4:	1a5b      	subs	r3, r3, r1
 80188e6:	69b9      	ldr	r1, [r7, #24]
 80188e8:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 80188ec:	1a5b      	subs	r3, r3, r1
 80188ee:	441a      	add	r2, r3
 80188f0:	8a3b      	ldrh	r3, [r7, #16]
 80188f2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80188f6:	fb01 f303 	mul.w	r3, r1, r3
 80188fa:	1ad2      	subs	r2, r2, r3
                (obj_row - 1);
 80188fc:	8a3b      	ldrh	r3, [r7, #16]
 80188fe:	3b01      	subs	r3, #1
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 8018900:	fb92 f3f3 	sdiv	r3, r2, r3
 8018904:	847b      	strh	r3, [r7, #34]	; 0x22
 8018906:	e010      	b.n	801892a <lv_cont_layout_grid+0xc2>
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
 8018908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801890c:	0fda      	lsrs	r2, r3, #31
 801890e:	4413      	add	r3, r2
 8018910:	105b      	asrs	r3, r3, #1
 8018912:	b21b      	sxth	r3, r3
 8018914:	b29a      	uxth	r2, r3
 8018916:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801891a:	0fd9      	lsrs	r1, r3, #31
 801891c:	440b      	add	r3, r1
 801891e:	105b      	asrs	r3, r3, #1
 8018920:	b21b      	sxth	r3, r3
 8018922:	b29b      	uxth	r3, r3
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	b29b      	uxth	r3, r3
 8018928:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 801892a:	69bb      	ldr	r3, [r7, #24]
 801892c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8018930:	b29a      	uxth	r2, r3
 8018932:	8a7b      	ldrh	r3, [r7, #18]
 8018934:	4413      	add	r3, r2
 8018936:	b29b      	uxth	r3, r3
 8018938:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801893a:	2101      	movs	r1, #1
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7ee f9ed 	bl	8006d1c <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t act_x = style->body.padding.left;
 8018942:	69bb      	ldr	r3, [r7, #24]
 8018944:	8b5b      	ldrh	r3, [r3, #26]
 8018946:	843b      	strh	r3, [r7, #32]
    lv_coord_t act_y = style->body.padding.top;
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	8adb      	ldrh	r3, [r3, #22]
 801894c:	83fb      	strh	r3, [r7, #30]
    uint16_t obj_cnt = 0;
 801894e:	2300      	movs	r3, #0
 8018950:	83bb      	strh	r3, [r7, #28]
    LV_LL_READ_BACK(cont->child_ll, child)
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	3304      	adds	r3, #4
 8018956:	4618      	mov	r0, r3
 8018958:	f7fa fec9 	bl	80136ee <lv_ll_get_tail>
 801895c:	6278      	str	r0, [r7, #36]	; 0x24
 801895e:	e03f      	b.n	80189e0 <lv_cont_layout_grid+0x178>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8018960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018962:	f7ee fc2d 	bl	80071c0 <lv_obj_get_hidden>
 8018966:	4603      	mov	r3, r0
 8018968:	2b00      	cmp	r3, #0
 801896a:	d131      	bne.n	80189d0 <lv_cont_layout_grid+0x168>
 801896c:	2104      	movs	r1, #4
 801896e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018970:	f7ee fc5a 	bl	8007228 <lv_obj_is_protected>
 8018974:	4603      	mov	r3, r0
 8018976:	2b00      	cmp	r3, #0
 8018978:	d12a      	bne.n	80189d0 <lv_cont_layout_grid+0x168>

        if(obj_row > 1) {
 801897a:	8a3b      	ldrh	r3, [r7, #16]
 801897c:	2b01      	cmp	r3, #1
 801897e:	d90d      	bls.n	801899c <lv_cont_layout_grid+0x134>
            lv_obj_set_pos(child, act_x, act_y);
 8018980:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8018984:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018988:	4619      	mov	r1, r3
 801898a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801898c:	f7ed fb4e 	bl	800602c <lv_obj_set_pos>
            act_x += x_ofs;
 8018990:	8c3a      	ldrh	r2, [r7, #32]
 8018992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018994:	4413      	add	r3, r2
 8018996:	b29b      	uxth	r3, r3
 8018998:	843b      	strh	r3, [r7, #32]
 801899a:	e007      	b.n	80189ac <lv_cont_layout_grid+0x144>
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
 801899c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80189a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80189a4:	4619      	mov	r1, r3
 80189a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189a8:	f7ed fb40 	bl	800602c <lv_obj_set_pos>
        }
        obj_cnt++;
 80189ac:	8bbb      	ldrh	r3, [r7, #28]
 80189ae:	3301      	adds	r3, #1
 80189b0:	83bb      	strh	r3, [r7, #28]

        if(obj_cnt >= obj_row) {
 80189b2:	8bba      	ldrh	r2, [r7, #28]
 80189b4:	8a3b      	ldrh	r3, [r7, #16]
 80189b6:	429a      	cmp	r2, r3
 80189b8:	d30b      	bcc.n	80189d2 <lv_cont_layout_grid+0x16a>
            obj_cnt = 0;
 80189ba:	2300      	movs	r3, #0
 80189bc:	83bb      	strh	r3, [r7, #28]
            act_x   = style->body.padding.left;
 80189be:	69bb      	ldr	r3, [r7, #24]
 80189c0:	8b5b      	ldrh	r3, [r3, #26]
 80189c2:	843b      	strh	r3, [r7, #32]
            act_y += y_ofs;
 80189c4:	8bfa      	ldrh	r2, [r7, #30]
 80189c6:	89fb      	ldrh	r3, [r7, #14]
 80189c8:	4413      	add	r3, r2
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	83fb      	strh	r3, [r7, #30]
 80189ce:	e000      	b.n	80189d2 <lv_cont_layout_grid+0x16a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80189d0:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	3304      	adds	r3, #4
 80189d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80189d8:	4618      	mov	r0, r3
 80189da:	f7fa feb5 	bl	8013748 <lv_ll_get_prev>
 80189de:	6278      	str	r0, [r7, #36]	; 0x24
 80189e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d1bc      	bne.n	8018960 <lv_cont_layout_grid+0xf8>
        }
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80189e6:	2101      	movs	r1, #1
 80189e8:	6878      	ldr	r0, [r7, #4]
 80189ea:	f7ee f9ac 	bl	8006d46 <lv_obj_clear_protect>
}
 80189ee:	bf00      	nop
 80189f0:	3728      	adds	r7, #40	; 0x28
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}

080189f6 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 80189f6:	b580      	push	{r7, lr}
 80189f8:	b090      	sub	sp, #64	; 0x40
 80189fa:	af00      	add	r7, sp, #0
 80189fc:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80189fe:	6878      	ldr	r0, [r7, #4]
 8018a00:	f7ee fc41 	bl	8007286 <lv_obj_get_ext_attr>
 8018a04:	63b8      	str	r0, [r7, #56]	; 0x38

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8018a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a08:	781b      	ldrb	r3, [r3, #0]
 8018a0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d115      	bne.n	8018a40 <lv_cont_refr_autofit+0x4a>
 8018a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d10e      	bne.n	8018a40 <lv_cont_refr_autofit+0x4a>
 8018a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a24:	785b      	ldrb	r3, [r3, #1]
 8018a26:	f003 0303 	and.w	r3, r3, #3
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d107      	bne.n	8018a40 <lv_cont_refr_autofit+0x4a>
       ext->fit_bottom == LV_FIT_NONE) {
 8018a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a32:	785b      	ldrb	r3, [r3, #1]
 8018a34:	f003 030c 	and.w	r3, r3, #12
 8018a38:	b2db      	uxtb	r3, r3
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	f000 81c8 	beq.w	8018dd0 <lv_cont_refr_autofit+0x3da>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7ee fb65 	bl	8007110 <lv_obj_get_style>
 8018a46:	6378      	str	r0, [r7, #52]	; 0x34
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7ee fac7 	bl	8006fdc <lv_obj_get_parent>
 8018a4e:	6338      	str	r0, [r7, #48]	; 0x30
    const lv_style_t * par_style = lv_obj_get_style(par);
 8018a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a52:	f7ee fb5d 	bl	8007110 <lv_obj_get_style>
 8018a56:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
 8018a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a5a:	f103 0210 	add.w	r2, r3, #16
 8018a5e:	f107 0310 	add.w	r3, r7, #16
 8018a62:	4611      	mov	r1, r2
 8018a64:	4618      	mov	r0, r3
 8018a66:	f7ff f95d 	bl	8017d24 <lv_area_copy>
    flood_area.x1 += par_style->body.padding.left;
 8018a6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018a6e:	b29a      	uxth	r2, r3
 8018a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a72:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	4413      	add	r3, r2
 8018a7a:	b29b      	uxth	r3, r3
 8018a7c:	b21b      	sxth	r3, r3
 8018a7e:	823b      	strh	r3, [r7, #16]
    flood_area.x2 -= par_style->body.padding.right;
 8018a80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018a84:	b29a      	uxth	r2, r3
 8018a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a88:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	1ad3      	subs	r3, r2, r3
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	b21b      	sxth	r3, r3
 8018a94:	82bb      	strh	r3, [r7, #20]
    flood_area.y1 += par_style->body.padding.top;
 8018a96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018a9a:	b29a      	uxth	r2, r3
 8018a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a9e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018aa2:	b29b      	uxth	r3, r3
 8018aa4:	4413      	add	r3, r2
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	b21b      	sxth	r3, r3
 8018aaa:	827b      	strh	r3, [r7, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 8018aac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018ab0:	b29a      	uxth	r2, r3
 8018ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ab4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	1ad3      	subs	r3, r2, r3
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	b21b      	sxth	r3, r3
 8018ac0:	82fb      	strh	r3, [r7, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 8018ac2:	f107 0318 	add.w	r3, r7, #24
 8018ac6:	4619      	mov	r1, r3
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7ee fab0 	bl	800702e <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 8018ace:	f107 0320 	add.w	r3, r7, #32
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f7ee faaa 	bl	800702e <lv_obj_get_coords>

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	3304      	adds	r3, #4
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fa fe91 	bl	8013806 <lv_ll_is_empty>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	f083 0301 	eor.w	r3, r3, #1
 8018aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(has_children) {
 8018aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d078      	beq.n	8018be8 <lv_cont_refr_autofit+0x1f2>
        tight_area.x1 = LV_COORD_MAX;
 8018af6:	f647 4318 	movw	r3, #31768	; 0x7c18
 8018afa:	843b      	strh	r3, [r7, #32]
        tight_area.y1 = LV_COORD_MAX;
 8018afc:	f647 4318 	movw	r3, #31768	; 0x7c18
 8018b00:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.x2 = LV_COORD_MIN;
 8018b02:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8018b06:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y2 = LV_COORD_MIN;
 8018b08:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8018b0c:	84fb      	strh	r3, [r7, #38]	; 0x26

        LV_LL_READ(cont->child_ll, child_i)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	3304      	adds	r3, #4
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7fa fdd8 	bl	80136c8 <lv_ll_get_head>
 8018b18:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018b1a:	e036      	b.n	8018b8a <lv_cont_refr_autofit+0x194>
        {
            if(lv_obj_get_hidden(child_i) != false) continue;
 8018b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018b1e:	f7ee fb4f 	bl	80071c0 <lv_obj_get_hidden>
 8018b22:	4603      	mov	r3, r0
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d128      	bne.n	8018b7a <lv_cont_refr_autofit+0x184>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8018b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b2a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8018b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b32:	4293      	cmp	r3, r2
 8018b34:	bfa8      	it	ge
 8018b36:	4613      	movge	r3, r2
 8018b38:	b21b      	sxth	r3, r3
 8018b3a:	843b      	strh	r3, [r7, #32]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8018b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b3e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018b42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b46:	4293      	cmp	r3, r2
 8018b48:	bfa8      	it	ge
 8018b4a:	4613      	movge	r3, r2
 8018b4c:	b21b      	sxth	r3, r3
 8018b4e:	847b      	strh	r3, [r7, #34]	; 0x22
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8018b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b52:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8018b56:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	bfb8      	it	lt
 8018b5e:	4613      	movlt	r3, r2
 8018b60:	b21b      	sxth	r3, r3
 8018b62:	84bb      	strh	r3, [r7, #36]	; 0x24
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8018b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b66:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8018b6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	bfb8      	it	lt
 8018b72:	4613      	movlt	r3, r2
 8018b74:	b21b      	sxth	r3, r3
 8018b76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018b78:	e000      	b.n	8018b7c <lv_cont_refr_autofit+0x186>
            if(lv_obj_get_hidden(child_i) != false) continue;
 8018b7a:	bf00      	nop
        LV_LL_READ(cont->child_ll, child_i)
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	3304      	adds	r3, #4
 8018b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7fa fdc6 	bl	8013714 <lv_ll_get_next>
 8018b88:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d1c5      	bne.n	8018b1c <lv_cont_refr_autofit+0x126>
        }

        tight_area.x1 -= style->body.padding.left;
 8018b90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b94:	b29a      	uxth	r2, r3
 8018b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b98:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	1ad3      	subs	r3, r2, r3
 8018ba0:	b29b      	uxth	r3, r3
 8018ba2:	b21b      	sxth	r3, r3
 8018ba4:	843b      	strh	r3, [r7, #32]
        tight_area.x2 += style->body.padding.right;
 8018ba6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	4413      	add	r3, r2
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	b21b      	sxth	r3, r3
 8018bba:	84bb      	strh	r3, [r7, #36]	; 0x24
        tight_area.y1 -= style->body.padding.top;
 8018bbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018bc0:	b29a      	uxth	r2, r3
 8018bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bc4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	1ad3      	subs	r3, r2, r3
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	b21b      	sxth	r3, r3
 8018bd0:	847b      	strh	r3, [r7, #34]	; 0x22
        tight_area.y2 += style->body.padding.bottom;
 8018bd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018bd6:	b29a      	uxth	r2, r3
 8018bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bda:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	4413      	add	r3, r2
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	b21b      	sxth	r3, r3
 8018be6:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 8018be8:	f107 0218 	add.w	r2, r7, #24
 8018bec:	f107 0308 	add.w	r3, r7, #8
 8018bf0:	4611      	mov	r1, r2
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7ff f896 	bl	8017d24 <lv_area_copy>

    switch(ext->fit_left) {
 8018bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bfa:	781b      	ldrb	r3, [r3, #0]
 8018bfc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	2b02      	cmp	r3, #2
 8018c04:	d008      	beq.n	8018c18 <lv_cont_refr_autofit+0x222>
 8018c06:	2b03      	cmp	r3, #3
 8018c08:	d00a      	beq.n	8018c20 <lv_cont_refr_autofit+0x22a>
 8018c0a:	2b01      	cmp	r3, #1
 8018c0c:	d000      	beq.n	8018c10 <lv_cont_refr_autofit+0x21a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
 8018c0e:	e018      	b.n	8018c42 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 8018c10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c14:	813b      	strh	r3, [r7, #8]
 8018c16:	e014      	b.n	8018c42 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 8018c18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018c1c:	813b      	strh	r3, [r7, #8]
 8018c1e:	e010      	b.n	8018c42 <lv_cont_refr_autofit+0x24c>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 8018c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d008      	beq.n	8018c3a <lv_cont_refr_autofit+0x244>
 8018c28:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8018c2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c30:	4293      	cmp	r3, r2
 8018c32:	bfa8      	it	ge
 8018c34:	4613      	movge	r3, r2
 8018c36:	b21b      	sxth	r3, r3
 8018c38:	e001      	b.n	8018c3e <lv_cont_refr_autofit+0x248>
 8018c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018c3e:	813b      	strh	r3, [r7, #8]
 8018c40:	bf00      	nop
    }

    switch(ext->fit_right) {
 8018c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c44:	781b      	ldrb	r3, [r3, #0]
 8018c46:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	2b02      	cmp	r3, #2
 8018c4e:	d008      	beq.n	8018c62 <lv_cont_refr_autofit+0x26c>
 8018c50:	2b03      	cmp	r3, #3
 8018c52:	d00a      	beq.n	8018c6a <lv_cont_refr_autofit+0x274>
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d000      	beq.n	8018c5a <lv_cont_refr_autofit+0x264>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
 8018c58:	e018      	b.n	8018c8c <lv_cont_refr_autofit+0x296>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 8018c5a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018c5e:	81bb      	strh	r3, [r7, #12]
 8018c60:	e014      	b.n	8018c8c <lv_cont_refr_autofit+0x296>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 8018c62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018c66:	81bb      	strh	r3, [r7, #12]
 8018c68:	e010      	b.n	8018c8c <lv_cont_refr_autofit+0x296>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8018c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d008      	beq.n	8018c84 <lv_cont_refr_autofit+0x28e>
 8018c72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018c76:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	bfb8      	it	lt
 8018c7e:	4613      	movlt	r3, r2
 8018c80:	b21b      	sxth	r3, r3
 8018c82:	e001      	b.n	8018c88 <lv_cont_refr_autofit+0x292>
 8018c84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018c88:	81bb      	strh	r3, [r7, #12]
 8018c8a:	bf00      	nop
    }

    switch(ext->fit_top) {
 8018c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c8e:	785b      	ldrb	r3, [r3, #1]
 8018c90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018c94:	b2db      	uxtb	r3, r3
 8018c96:	2b02      	cmp	r3, #2
 8018c98:	d008      	beq.n	8018cac <lv_cont_refr_autofit+0x2b6>
 8018c9a:	2b03      	cmp	r3, #3
 8018c9c:	d00a      	beq.n	8018cb4 <lv_cont_refr_autofit+0x2be>
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d000      	beq.n	8018ca4 <lv_cont_refr_autofit+0x2ae>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
 8018ca2:	e018      	b.n	8018cd6 <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 8018ca4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018ca8:	817b      	strh	r3, [r7, #10]
 8018caa:	e014      	b.n	8018cd6 <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 8018cac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018cb0:	817b      	strh	r3, [r7, #10]
 8018cb2:	e010      	b.n	8018cd6 <lv_cont_refr_autofit+0x2e0>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8018cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d008      	beq.n	8018cce <lv_cont_refr_autofit+0x2d8>
 8018cbc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8018cc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018cc4:	4293      	cmp	r3, r2
 8018cc6:	bfa8      	it	ge
 8018cc8:	4613      	movge	r3, r2
 8018cca:	b21b      	sxth	r3, r3
 8018ccc:	e001      	b.n	8018cd2 <lv_cont_refr_autofit+0x2dc>
 8018cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018cd2:	817b      	strh	r3, [r7, #10]
 8018cd4:	bf00      	nop
    }

    switch(ext->fit_bottom) {
 8018cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd8:	785b      	ldrb	r3, [r3, #1]
 8018cda:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	2b02      	cmp	r3, #2
 8018ce2:	d008      	beq.n	8018cf6 <lv_cont_refr_autofit+0x300>
 8018ce4:	2b03      	cmp	r3, #3
 8018ce6:	d00a      	beq.n	8018cfe <lv_cont_refr_autofit+0x308>
 8018ce8:	2b01      	cmp	r3, #1
 8018cea:	d000      	beq.n	8018cee <lv_cont_refr_autofit+0x2f8>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
 8018cec:	e018      	b.n	8018d20 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 8018cee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018cf2:	81fb      	strh	r3, [r7, #14]
 8018cf4:	e014      	b.n	8018d20 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 8018cf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018cfa:	81fb      	strh	r3, [r7, #14]
 8018cfc:	e010      	b.n	8018d20 <lv_cont_refr_autofit+0x32a>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 8018cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d008      	beq.n	8018d18 <lv_cont_refr_autofit+0x322>
 8018d06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018d0e:	4293      	cmp	r3, r2
 8018d10:	bfb8      	it	lt
 8018d12:	4613      	movlt	r3, r2
 8018d14:	b21b      	sxth	r3, r3
 8018d16:	e001      	b.n	8018d1c <lv_cont_refr_autofit+0x326>
 8018d18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d1c:	81fb      	strh	r3, [r7, #14]
 8018d1e:	bf00      	nop
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8018d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	d114      	bne.n	8018d58 <lv_cont_refr_autofit+0x362>
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018d34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d10d      	bne.n	8018d58 <lv_cont_refr_autofit+0x362>
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8018d42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d106      	bne.n	8018d58 <lv_cont_refr_autofit+0x362>
       cont->coords.y2 != new_area.y2) {
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8018d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8018d54:	429a      	cmp	r2, r3
 8018d56:	d03c      	beq.n	8018dd2 <lv_cont_refr_autofit+0x3dc>

        lv_obj_invalidate(cont);
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f7ed f868 	bl	8005e2e <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	3310      	adds	r3, #16
 8018d62:	f107 0208 	add.w	r2, r7, #8
 8018d66:	4611      	mov	r1, r2
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7fe ffdb 	bl	8017d24 <lv_area_copy>
        lv_obj_invalidate(cont);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f7ed f85d 	bl	8005e2e <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	69db      	ldr	r3, [r3, #28]
 8018d78:	f107 0218 	add.w	r2, r7, #24
 8018d7c:	2102      	movs	r1, #2
 8018d7e:	6878      	ldr	r0, [r7, #4]
 8018d80:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8018d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d84:	69db      	ldr	r3, [r3, #28]
 8018d86:	687a      	ldr	r2, [r7, #4]
 8018d88:	2101      	movs	r1, #1
 8018d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d8c:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f7ee f9aa 	bl	80070e8 <lv_obj_get_auto_realign>
 8018d94:	4603      	mov	r3, r0
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d002      	beq.n	8018da0 <lv_cont_refr_autofit+0x3aa>
            lv_obj_realign(cont);
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f7ed ff12 	bl	8006bc4 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	3304      	adds	r3, #4
 8018da4:	4618      	mov	r0, r3
 8018da6:	f7fa fc8f 	bl	80136c8 <lv_ll_get_head>
 8018daa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018dac:	e00c      	b.n	8018dc8 <lv_cont_refr_autofit+0x3d2>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8018dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018db0:	69db      	ldr	r3, [r3, #28]
 8018db2:	2200      	movs	r2, #0
 8018db4:	2103      	movs	r1, #3
 8018db6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018db8:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7fa fca7 	bl	8013714 <lv_ll_get_next>
 8018dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8018dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d1ef      	bne.n	8018dae <lv_cont_refr_autofit+0x3b8>
 8018dce:	e000      	b.n	8018dd2 <lv_cont_refr_autofit+0x3dc>
        return;
 8018dd0:	bf00      	nop
        }
    }
}
 8018dd2:	3740      	adds	r7, #64	; 0x40
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}

08018dd8 <lv_img_get_style>:
 * @param img pointer to an image object
 * @param type which style should be get (can be only `LV_IMG_STYLE_MAIN`)
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	460b      	mov	r3, r1
 8018de2:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f7ee f993 	bl	8007110 <lv_obj_get_style>
 8018dea:	4603      	mov	r3, r0
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3708      	adds	r7, #8
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <lv_img_create>:
 * @param par pointer to an object, it will be the parent of the new button
 * @param copy pointer to a image object, if not NULL then the new object will be copied from it
 * @return pointer to the created image
 */
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b086      	sub	sp, #24
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("image create started");

    lv_obj_t * new_img = NULL;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	617b      	str	r3, [r7, #20]

    /*Create a basic object*/
    new_img = lv_obj_create(par, copy);
 8018e02:	6839      	ldr	r1, [r7, #0]
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f7ec fcd5 	bl	80057b4 <lv_obj_create>
 8018e0a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_img);
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d100      	bne.n	8018e14 <lv_img_create+0x20>
 8018e12:	e7fe      	b.n	8018e12 <lv_img_create+0x1e>
    if(new_img == NULL) return NULL;
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d101      	bne.n	8018e1e <lv_img_create+0x2a>
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	e07b      	b.n	8018f16 <lv_img_create+0x122>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 8018e1e:	4b40      	ldr	r3, [pc, #256]	; (8018f20 <lv_img_create+0x12c>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d105      	bne.n	8018e32 <lv_img_create+0x3e>
 8018e26:	6978      	ldr	r0, [r7, #20]
 8018e28:	f7ee fa15 	bl	8007256 <lv_obj_get_signal_cb>
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	4b3c      	ldr	r3, [pc, #240]	; (8018f20 <lv_img_create+0x12c>)
 8018e30:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to image object*/
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8018e32:	2110      	movs	r1, #16
 8018e34:	6978      	ldr	r0, [r7, #20]
 8018e36:	f7ee f859 	bl	8006eec <lv_obj_allocate_ext_attr>
 8018e3a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8018e3c:	693b      	ldr	r3, [r7, #16]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d100      	bne.n	8018e44 <lv_img_create+0x50>
 8018e42:	e7fe      	b.n	8018e42 <lv_img_create+0x4e>
    if(ext == NULL) return NULL;
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d101      	bne.n	8018e4e <lv_img_create+0x5a>
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	e063      	b.n	8018f16 <lv_img_create+0x122>

    ext->src       = NULL;
 8018e4e:	693b      	ldr	r3, [r7, #16]
 8018e50:	2200      	movs	r2, #0
 8018e52:	601a      	str	r2, [r3, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 8018e54:	693a      	ldr	r2, [r7, #16]
 8018e56:	7b13      	ldrb	r3, [r2, #12]
 8018e58:	f043 0303 	orr.w	r3, r3, #3
 8018e5c:	7313      	strb	r3, [r2, #12]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 8018e5e:	693a      	ldr	r2, [r7, #16]
 8018e60:	7b13      	ldrb	r3, [r2, #12]
 8018e62:	f36f 03c7 	bfc	r3, #3, #5
 8018e66:	7313      	strb	r3, [r2, #12]
    ext->w         = lv_obj_get_width(new_img);
 8018e68:	6978      	ldr	r0, [r7, #20]
 8018e6a:	f7ee f921 	bl	80070b0 <lv_obj_get_width>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	461a      	mov	r2, r3
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	811a      	strh	r2, [r3, #8]
    ext->h         = lv_obj_get_height(new_img);
 8018e76:	6978      	ldr	r0, [r7, #20]
 8018e78:	f7ee f928 	bl	80070cc <lv_obj_get_height>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	461a      	mov	r2, r3
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	815a      	strh	r2, [r3, #10]
    ext->auto_size = 1;
 8018e84:	693a      	ldr	r2, [r7, #16]
 8018e86:	7b13      	ldrb	r3, [r2, #12]
 8018e88:	f043 0304 	orr.w	r3, r3, #4
 8018e8c:	7313      	strb	r3, [r2, #12]
    ext->offset.x  = 0;
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	2200      	movs	r2, #0
 8018e92:	809a      	strh	r2, [r3, #4]
    ext->offset.y  = 0;
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	2200      	movs	r2, #0
 8018e98:	80da      	strh	r2, [r3, #6]

    /*Init the new object*/
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8018e9a:	4922      	ldr	r1, [pc, #136]	; (8018f24 <lv_img_create+0x130>)
 8018e9c:	6978      	ldr	r0, [r7, #20]
 8018e9e:	f7ee f809 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8018ea2:	4921      	ldr	r1, [pc, #132]	; (8018f28 <lv_img_create+0x134>)
 8018ea4:	6978      	ldr	r0, [r7, #20]
 8018ea6:	f7ee f813 	bl	8006ed0 <lv_obj_set_design_cb>

    if(copy == NULL) {
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d11a      	bne.n	8018ee6 <lv_img_create+0xf2>
        lv_obj_set_click(new_img, false);
 8018eb0:	2100      	movs	r1, #0
 8018eb2:	6978      	ldr	r0, [r7, #20]
 8018eb4:	f7ed fedd 	bl	8006c72 <lv_obj_set_click>
        /* Enable auto size for non screens
         * because image screens are wallpapers
         * and must be screen sized*/
        if(par != NULL) {
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d009      	beq.n	8018ed2 <lv_img_create+0xde>
            ext->auto_size = 1;
 8018ebe:	693a      	ldr	r2, [r7, #16]
 8018ec0:	7b13      	ldrb	r3, [r2, #12]
 8018ec2:	f043 0304 	orr.w	r3, r3, #4
 8018ec6:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 8018ec8:	2100      	movs	r1, #0
 8018eca:	6978      	ldr	r0, [r7, #20]
 8018ecc:	f7ed feab 	bl	8006c26 <lv_obj_set_style>
 8018ed0:	e020      	b.n	8018f14 <lv_img_create+0x120>
        } else {
            ext->auto_size = 0;
 8018ed2:	693a      	ldr	r2, [r7, #16]
 8018ed4:	7b13      	ldrb	r3, [r2, #12]
 8018ed6:	f36f 0382 	bfc	r3, #2, #1
 8018eda:	7313      	strb	r3, [r2, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8018edc:	4913      	ldr	r1, [pc, #76]	; (8018f2c <lv_img_create+0x138>)
 8018ede:	6978      	ldr	r0, [r7, #20]
 8018ee0:	f7ed fea1 	bl	8006c26 <lv_obj_set_style>
 8018ee4:	e016      	b.n	8018f14 <lv_img_create+0x120>
        }
    } else {
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018ee6:	6838      	ldr	r0, [r7, #0]
 8018ee8:	f7ee f9cd 	bl	8007286 <lv_obj_get_ext_attr>
 8018eec:	60f8      	str	r0, [r7, #12]
        ext->auto_size          = copy_ext->auto_size;
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	7b1b      	ldrb	r3, [r3, #12]
 8018ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018ef6:	b2d9      	uxtb	r1, r3
 8018ef8:	693a      	ldr	r2, [r7, #16]
 8018efa:	7b13      	ldrb	r3, [r2, #12]
 8018efc:	f361 0382 	bfi	r3, r1, #2, #1
 8018f00:	7313      	strb	r3, [r2, #12]
        lv_img_set_src(new_img, copy_ext->src);
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	4619      	mov	r1, r3
 8018f08:	6978      	ldr	r0, [r7, #20]
 8018f0a:	f000 f811 	bl	8018f30 <lv_img_set_src>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_img);
 8018f0e:	6978      	ldr	r0, [r7, #20]
 8018f10:	f7ed fe9b 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("image created");

    return new_img;
 8018f14:	697b      	ldr	r3, [r7, #20]
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3718      	adds	r7, #24
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}
 8018f1e:	bf00      	nop
 8018f20:	20002ac8 	.word	0x20002ac8
 8018f24:	08019385 	.word	0x08019385
 8018f28:	0801912f 	.word	0x0801912f
 8018f2c:	20006c74 	.word	0x20006c74

08018f30 <lv_img_set_src>:
 * Set the pixel map to display by the image
 * @param img pointer to an image object
 * @param data the image data
 */
void lv_img_set_src(lv_obj_t * img, const void * src_img)
{
 8018f30:	b590      	push	{r4, r7, lr}
 8018f32:	b08d      	sub	sp, #52	; 0x34
 8018f34:	af04      	add	r7, sp, #16
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	6039      	str	r1, [r7, #0]
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8018f3a:	6838      	ldr	r0, [r7, #0]
 8018f3c:	f7f1 fa1a 	bl	800a374 <lv_img_src_get_type>
 8018f40:	4603      	mov	r3, r0
 8018f42:	77fb      	strb	r3, [r7, #31]
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8018f44:	6878      	ldr	r0, [r7, #4]
 8018f46:	f7ee f99e 	bl	8007286 <lv_obj_get_ext_attr>
 8018f4a:	61b8      	str	r0, [r7, #24]
        default: LV_LOG_WARN("lv_img_set_src: unknown type");
    }
#endif

    /*If the new source type is unknown free the memories of the old source*/
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8018f4c:	7ffb      	ldrb	r3, [r7, #31]
 8018f4e:	2b03      	cmp	r3, #3
 8018f50:	d11b      	bne.n	8018f8a <lv_img_set_src+0x5a>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	7b1b      	ldrb	r3, [r3, #12]
 8018f56:	f003 0303 	and.w	r3, r3, #3
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	2b02      	cmp	r3, #2
 8018f5e:	d006      	beq.n	8018f6e <lv_img_set_src+0x3e>
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	7b1b      	ldrb	r3, [r3, #12]
 8018f64:	f003 0303 	and.w	r3, r3, #3
 8018f68:	b2db      	uxtb	r3, r3
 8018f6a:	2b01      	cmp	r3, #1
 8018f6c:	d104      	bne.n	8018f78 <lv_img_set_src+0x48>
            lv_mem_free(ext->src);
 8018f6e:	69bb      	ldr	r3, [r7, #24]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7fa fd68 	bl	8013a48 <lv_mem_free>
        }
        ext->src      = NULL;
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	601a      	str	r2, [r3, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8018f7e:	69ba      	ldr	r2, [r7, #24]
 8018f80:	7b13      	ldrb	r3, [r2, #12]
 8018f82:	f043 0303 	orr.w	r3, r3, #3
 8018f86:	7313      	strb	r3, [r2, #12]
        return;
 8018f88:	e0b8      	b.n	80190fc <lv_img_set_src+0x1cc>
    }

    lv_img_header_t header;
    lv_img_decoder_get_info(src_img, &header);
 8018f8a:	f107 030c 	add.w	r3, r7, #12
 8018f8e:	4619      	mov	r1, r3
 8018f90:	6838      	ldr	r0, [r7, #0]
 8018f92:	f7f7 ff3b 	bl	8010e0c <lv_img_decoder_get_info>

    /*Save the source*/
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8018f96:	7ffb      	ldrb	r3, [r7, #31]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d116      	bne.n	8018fca <lv_img_set_src+0x9a>
        LV_LOG_INFO("lv_img_set_src:  `LV_IMG_SRC_VARIABLE` type found");

        /*If memory was allocated because of the previous `src_type` then free it*/
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8018f9c:	69bb      	ldr	r3, [r7, #24]
 8018f9e:	7b1b      	ldrb	r3, [r3, #12]
 8018fa0:	f003 0303 	and.w	r3, r3, #3
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	d006      	beq.n	8018fb8 <lv_img_set_src+0x88>
 8018faa:	69bb      	ldr	r3, [r7, #24]
 8018fac:	7b1b      	ldrb	r3, [r3, #12]
 8018fae:	f003 0303 	and.w	r3, r3, #3
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	2b02      	cmp	r3, #2
 8018fb6:	d104      	bne.n	8018fc2 <lv_img_set_src+0x92>
            lv_mem_free(ext->src);
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7fa fd43 	bl	8013a48 <lv_mem_free>
        }
        ext->src = src_img;
 8018fc2:	69bb      	ldr	r3, [r7, #24]
 8018fc4:	683a      	ldr	r2, [r7, #0]
 8018fc6:	601a      	str	r2, [r3, #0]
 8018fc8:	e034      	b.n	8019034 <lv_img_set_src+0x104>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8018fca:	7ffb      	ldrb	r3, [r7, #31]
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d002      	beq.n	8018fd6 <lv_img_set_src+0xa6>
 8018fd0:	7ffb      	ldrb	r3, [r7, #31]
 8018fd2:	2b02      	cmp	r3, #2
 8018fd4:	d12e      	bne.n	8019034 <lv_img_set_src+0x104>
        /* If the new and the old src are the same then it was only a refresh.*/
        if(ext->src != src_img) {
 8018fd6:	69bb      	ldr	r3, [r7, #24]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	683a      	ldr	r2, [r7, #0]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	d029      	beq.n	8019034 <lv_img_set_src+0x104>
            /*If memory was allocated because of the previous `src_type` then free it*/
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8018fe0:	69bb      	ldr	r3, [r7, #24]
 8018fe2:	7b1b      	ldrb	r3, [r3, #12]
 8018fe4:	f003 0303 	and.w	r3, r3, #3
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d006      	beq.n	8018ffc <lv_img_set_src+0xcc>
 8018fee:	69bb      	ldr	r3, [r7, #24]
 8018ff0:	7b1b      	ldrb	r3, [r3, #12]
 8018ff2:	f003 0303 	and.w	r3, r3, #3
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	2b02      	cmp	r3, #2
 8018ffa:	d104      	bne.n	8019006 <lv_img_set_src+0xd6>
                lv_mem_free(ext->src);
 8018ffc:	69bb      	ldr	r3, [r7, #24]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	4618      	mov	r0, r3
 8019002:	f7fa fd21 	bl	8013a48 <lv_mem_free>
            }
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8019006:	6838      	ldr	r0, [r7, #0]
 8019008:	f7e7 f8ec 	bl	80001e4 <strlen>
 801900c:	4603      	mov	r3, r0
 801900e:	3301      	adds	r3, #1
 8019010:	4618      	mov	r0, r3
 8019012:	f7fa fcd9 	bl	80139c8 <lv_mem_alloc>
 8019016:	6178      	str	r0, [r7, #20]
            lv_mem_assert(new_str);
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d100      	bne.n	8019020 <lv_img_set_src+0xf0>
 801901e:	e7fe      	b.n	801901e <lv_img_set_src+0xee>
            if(new_str == NULL) return;
 8019020:	697b      	ldr	r3, [r7, #20]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d069      	beq.n	80190fa <lv_img_set_src+0x1ca>
            strcpy(new_str, src_img);
 8019026:	6839      	ldr	r1, [r7, #0]
 8019028:	6978      	ldr	r0, [r7, #20]
 801902a:	f00e fe83 	bl	8027d34 <strcpy>
            ext->src = new_str;
 801902e:	69bb      	ldr	r3, [r7, #24]
 8019030:	697a      	ldr	r2, [r7, #20]
 8019032:	601a      	str	r2, [r3, #0]
        }
    }

    if(src_type == LV_IMG_SRC_SYMBOL) {
 8019034:	7ffb      	ldrb	r3, [r7, #31]
 8019036:	2b02      	cmp	r3, #2
 8019038:	d12b      	bne.n	8019092 <lv_img_set_src+0x162>
        /*`lv_img_dsc_get_info` couldn't set the with and height of a font so set it here*/
        const lv_style_t * style = lv_img_get_style(img, LV_IMG_STYLE_MAIN);
 801903a:	2100      	movs	r1, #0
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f7ff fecb 	bl	8018dd8 <lv_img_get_style>
 8019042:	6138      	str	r0, [r7, #16]
        lv_point_t size;
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 8019044:	693b      	ldr	r3, [r7, #16]
 8019046:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019048:	693b      	ldr	r3, [r7, #16]
 801904a:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801904e:	693b      	ldr	r3, [r7, #16]
 8019050:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019054:	f107 0008 	add.w	r0, r7, #8
 8019058:	2200      	movs	r2, #0
 801905a:	9202      	str	r2, [sp, #8]
 801905c:	f647 4218 	movw	r2, #31768	; 0x7c18
 8019060:	9201      	str	r2, [sp, #4]
 8019062:	9300      	str	r3, [sp, #0]
 8019064:	4623      	mov	r3, r4
 8019066:	460a      	mov	r2, r1
 8019068:	6839      	ldr	r1, [r7, #0]
 801906a:	f7fa fff9 	bl	8014060 <lv_txt_get_size>
                        LV_COORD_MAX, LV_TXT_FLAG_NONE);
        header.w = size.x;
 801906e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019076:	b29a      	uxth	r2, r3
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	f362 2394 	bfi	r3, r2, #10, #11
 801907e:	60fb      	str	r3, [r7, #12]
        header.h = size.y;
 8019080:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019088:	b29a      	uxth	r2, r3
 801908a:	89fb      	ldrh	r3, [r7, #14]
 801908c:	f362 134f 	bfi	r3, r2, #5, #11
 8019090:	81fb      	strh	r3, [r7, #14]
    }

    ext->src_type = src_type;
 8019092:	7ffb      	ldrb	r3, [r7, #31]
 8019094:	f003 0303 	and.w	r3, r3, #3
 8019098:	b2d9      	uxtb	r1, r3
 801909a:	69ba      	ldr	r2, [r7, #24]
 801909c:	7b13      	ldrb	r3, [r2, #12]
 801909e:	f361 0301 	bfi	r3, r1, #0, #2
 80190a2:	7313      	strb	r3, [r2, #12]
    ext->w        = header.w;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	b21a      	sxth	r2, r3
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	811a      	strh	r2, [r3, #8]
    ext->h        = header.h;
 80190b2:	89fb      	ldrh	r3, [r7, #14]
 80190b4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80190b8:	b29b      	uxth	r3, r3
 80190ba:	b21a      	sxth	r2, r3
 80190bc:	69bb      	ldr	r3, [r7, #24]
 80190be:	815a      	strh	r2, [r3, #10]
    ext->cf       = header.cf;
 80190c0:	7b3b      	ldrb	r3, [r7, #12]
 80190c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80190c6:	b2d9      	uxtb	r1, r3
 80190c8:	69ba      	ldr	r2, [r7, #24]
 80190ca:	7b13      	ldrb	r3, [r2, #12]
 80190cc:	f361 03c7 	bfi	r3, r1, #3, #5
 80190d0:	7313      	strb	r3, [r2, #12]

    if(lv_img_get_auto_size(img) != false) {
 80190d2:	6878      	ldr	r0, [r7, #4]
 80190d4:	f000 f815 	bl	8019102 <lv_img_get_auto_size>
 80190d8:	4603      	mov	r3, r0
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d009      	beq.n	80190f2 <lv_img_set_src+0x1c2>
        lv_obj_set_size(img, ext->w, ext->h);
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80190e4:	69bb      	ldr	r3, [r7, #24]
 80190e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80190ea:	461a      	mov	r2, r3
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f7ed f852 	bl	8006196 <lv_obj_set_size>
    }

    lv_obj_invalidate(img);
 80190f2:	6878      	ldr	r0, [r7, #4]
 80190f4:	f7ec fe9b 	bl	8005e2e <lv_obj_invalidate>
 80190f8:	e000      	b.n	80190fc <lv_img_set_src+0x1cc>
            if(new_str == NULL) return;
 80190fa:	bf00      	nop
}
 80190fc:	3724      	adds	r7, #36	; 0x24
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd90      	pop	{r4, r7, pc}

08019102 <lv_img_get_auto_size>:
 * Get the auto size enable attribute
 * @param img pointer to an image
 * @return true: auto size is enabled, false: auto size is disabled
 */
bool lv_img_get_auto_size(const lv_obj_t * img)
{
 8019102:	b580      	push	{r7, lr}
 8019104:	b084      	sub	sp, #16
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	f7ee f8bb 	bl	8007286 <lv_obj_get_ext_attr>
 8019110:	60f8      	str	r0, [r7, #12]

    return ext->auto_size == 0 ? false : true;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	7b1b      	ldrb	r3, [r3, #12]
 8019116:	f003 0304 	and.w	r3, r3, #4
 801911a:	b2db      	uxtb	r3, r3
 801911c:	2b00      	cmp	r3, #0
 801911e:	bf14      	ite	ne
 8019120:	2301      	movne	r3, #1
 8019122:	2300      	moveq	r3, #0
 8019124:	b2db      	uxtb	r3, r3
}
 8019126:	4618      	mov	r0, r3
 8019128:	3710      	adds	r7, #16
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}

0801912e <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 801912e:	b590      	push	{r4, r7, lr}
 8019130:	b0a3      	sub	sp, #140	; 0x8c
 8019132:	af06      	add	r7, sp, #24
 8019134:	60f8      	str	r0, [r7, #12]
 8019136:	60b9      	str	r1, [r7, #8]
 8019138:	4613      	mov	r3, r2
 801913a:	71fb      	strb	r3, [r7, #7]
    const lv_style_t * style = lv_obj_get_style(img);
 801913c:	68f8      	ldr	r0, [r7, #12]
 801913e:	f7ed ffe7 	bl	8007110 <lv_obj_get_style>
 8019142:	66b8      	str	r0, [r7, #104]	; 0x68
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7ee f89e 	bl	8007286 <lv_obj_get_ext_attr>
 801914a:	6678      	str	r0, [r7, #100]	; 0x64

    if(mode == LV_DESIGN_COVER_CHK) {
 801914c:	79fb      	ldrb	r3, [r7, #7]
 801914e:	2b02      	cmp	r3, #2
 8019150:	d12c      	bne.n	80191ac <lv_img_design+0x7e>
        bool cover = false;
 8019152:	2300      	movs	r3, #0
 8019154:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8019158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801915a:	7b1b      	ldrb	r3, [r3, #12]
 801915c:	f003 0303 	and.w	r3, r3, #3
 8019160:	b2db      	uxtb	r3, r3
 8019162:	2b03      	cmp	r3, #3
 8019164:	d006      	beq.n	8019174 <lv_img_design+0x46>
 8019166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019168:	7b1b      	ldrb	r3, [r3, #12]
 801916a:	f003 0303 	and.w	r3, r3, #3
 801916e:	b2db      	uxtb	r3, r3
 8019170:	2b02      	cmp	r3, #2
 8019172:	d101      	bne.n	8019178 <lv_img_design+0x4a>
 8019174:	2300      	movs	r3, #0
 8019176:	e101      	b.n	801937c <lv_img_design+0x24e>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8019178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801917a:	7b1b      	ldrb	r3, [r3, #12]
 801917c:	f023 0307 	bic.w	r3, r3, #7
 8019180:	b2db      	uxtb	r3, r3
 8019182:	2b20      	cmp	r3, #32
 8019184:	d006      	beq.n	8019194 <lv_img_design+0x66>
 8019186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019188:	7b1b      	ldrb	r3, [r3, #12]
 801918a:	f023 0307 	bic.w	r3, r3, #7
 801918e:	b2db      	uxtb	r3, r3
 8019190:	2b08      	cmp	r3, #8
 8019192:	d108      	bne.n	80191a6 <lv_img_design+0x78>
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	3310      	adds	r3, #16
 8019198:	4619      	mov	r1, r3
 801919a:	68b8      	ldr	r0, [r7, #8]
 801919c:	f7f9 fee5 	bl	8012f6a <lv_area_is_in>
 80191a0:	4603      	mov	r3, r0
 80191a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        return cover;
 80191a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80191aa:	e0e7      	b.n	801937c <lv_img_design+0x24e>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80191ac:	79fb      	ldrb	r3, [r7, #7]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f040 80e3 	bne.w	801937a <lv_img_design+0x24c>
        if(ext->h == 0 || ext->w == 0) return true;
 80191b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d004      	beq.n	80191c8 <lv_img_design+0x9a>
 80191be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d101      	bne.n	80191cc <lv_img_design+0x9e>
 80191c8:	2301      	movs	r3, #1
 80191ca:	e0d7      	b.n	801937c <lv_img_design+0x24e>
        lv_area_t coords;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	f7ee f80c 	bl	80071ea <lv_obj_get_opa_scale>
 80191d2:	4603      	mov	r3, r0
 80191d4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        lv_obj_get_coords(img, &coords);
 80191d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80191dc:	4619      	mov	r1, r3
 80191de:	68f8      	ldr	r0, [r7, #12]
 80191e0:	f7ed ff25 	bl	800702e <lv_obj_get_coords>

        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 80191e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191e6:	7b1b      	ldrb	r3, [r3, #12]
 80191e8:	f003 0303 	and.w	r3, r3, #3
 80191ec:	b2db      	uxtb	r3, r3
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d007      	beq.n	8019202 <lv_img_design+0xd4>
 80191f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191f4:	7b1b      	ldrb	r3, [r3, #12]
 80191f6:	f003 0303 	and.w	r3, r3, #3
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	f040 8086 	bne.w	801930e <lv_img_design+0x1e0>
            coords.x1 -= ext->offset.x;
 8019202:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019206:	b29a      	uxth	r2, r3
 8019208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801920a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801920e:	b29b      	uxth	r3, r3
 8019210:	1ad3      	subs	r3, r2, r3
 8019212:	b29b      	uxth	r3, r3
 8019214:	b21b      	sxth	r3, r3
 8019216:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            coords.y1 -= ext->offset.y;
 801921a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801921e:	b29a      	uxth	r2, r3
 8019220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019222:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019226:	b29b      	uxth	r3, r3
 8019228:	1ad3      	subs	r3, r2, r3
 801922a:	b29b      	uxth	r3, r3
 801922c:	b21b      	sxth	r3, r3
 801922e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            LV_LOG_TRACE("lv_img_design: start to draw image");
            lv_area_t cords_tmp;
            cords_tmp.y1 = coords.y1;
 8019232:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019236:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801923a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801923e:	b29a      	uxth	r2, r3
 8019240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019242:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019246:	b29b      	uxth	r3, r3
 8019248:	4413      	add	r3, r2
 801924a:	b29b      	uxth	r3, r3
 801924c:	3b01      	subs	r3, #1
 801924e:	b29b      	uxth	r3, r3
 8019250:	b21b      	sxth	r3, r3
 8019252:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8019256:	e053      	b.n	8019300 <lv_img_design+0x1d2>
                cords_tmp.x1 = coords.x1;
 8019258:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801925c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8019260:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019264:	b29a      	uxth	r2, r3
 8019266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019268:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801926c:	b29b      	uxth	r3, r3
 801926e:	4413      	add	r3, r2
 8019270:	b29b      	uxth	r3, r3
 8019272:	3b01      	subs	r3, #1
 8019274:	b29b      	uxth	r3, r3
 8019276:	b21b      	sxth	r3, r3
 8019278:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 801927c:	e022      	b.n	80192c4 <lv_img_design+0x196>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 801927e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019280:	681a      	ldr	r2, [r3, #0]
 8019282:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8019286:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801928a:	9300      	str	r3, [sp, #0]
 801928c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801928e:	68b9      	ldr	r1, [r7, #8]
 8019290:	f7f0 ff7c 	bl	800a18c <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8019294:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8019298:	b29a      	uxth	r2, r3
 801929a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801929c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80192a0:	b29b      	uxth	r3, r3
 80192a2:	4413      	add	r3, r2
 80192a4:	b29b      	uxth	r3, r3
 80192a6:	b21b      	sxth	r3, r3
 80192a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80192ac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80192b0:	b29a      	uxth	r2, r3
 80192b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80192b8:	b29b      	uxth	r3, r3
 80192ba:	4413      	add	r3, r2
 80192bc:	b29b      	uxth	r3, r3
 80192be:	b21b      	sxth	r3, r3
 80192c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80192c4:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 80192c8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80192cc:	429a      	cmp	r2, r3
 80192ce:	dbd6      	blt.n	801927e <lv_img_design+0x150>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 80192d0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80192d4:	b29a      	uxth	r2, r3
 80192d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	4413      	add	r3, r2
 80192e0:	b29b      	uxth	r3, r3
 80192e2:	b21b      	sxth	r3, r3
 80192e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80192e8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80192ec:	b29a      	uxth	r2, r3
 80192ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	4413      	add	r3, r2
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	b21b      	sxth	r3, r3
 80192fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8019300:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8019304:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8019308:	429a      	cmp	r2, r3
 801930a:	dba5      	blt.n	8019258 <lv_img_design+0x12a>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801930c:	e035      	b.n	801937a <lv_img_design+0x24c>
                }
            }
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801930e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019310:	7b1b      	ldrb	r3, [r3, #12]
 8019312:	f003 0303 	and.w	r3, r3, #3
 8019316:	b2db      	uxtb	r3, r3
 8019318:	2b02      	cmp	r3, #2
 801931a:	d123      	bne.n	8019364 <lv_img_design+0x236>
            LV_LOG_TRACE("lv_img_design: start to draw symbol");
            lv_style_t style_mod;
            lv_style_copy(&style_mod, style);
 801931c:	f107 0314 	add.w	r3, r7, #20
 8019320:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8019322:	4618      	mov	r0, r3
 8019324:	f7ef fa1e 	bl	8008764 <lv_style_copy>
            style_mod.text.color = style->image.color;
 8019328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801932a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801932c:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 801932e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	f897 4063 	ldrb.w	r4, [r7, #99]	; 0x63
 8019336:	f107 0114 	add.w	r1, r7, #20
 801933a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801933e:	2200      	movs	r2, #0
 8019340:	9205      	str	r2, [sp, #20]
 8019342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019346:	9204      	str	r2, [sp, #16]
 8019348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801934c:	9203      	str	r2, [sp, #12]
 801934e:	2200      	movs	r2, #0
 8019350:	9202      	str	r2, [sp, #8]
 8019352:	2200      	movs	r2, #0
 8019354:	9201      	str	r2, [sp, #4]
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	4623      	mov	r3, r4
 801935a:	460a      	mov	r2, r1
 801935c:	68b9      	ldr	r1, [r7, #8]
 801935e:	f7f1 f9ad 	bl	800a6bc <lv_draw_label>
 8019362:	e00a      	b.n	801937a <lv_img_design+0x24c>
        } else {
            /*Trigger the error handler of image drawer*/
            LV_LOG_WARN("lv_img_design: image source type is unknown");
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	f103 0010 	add.w	r0, r3, #16
 801936a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801936e:	9300      	str	r3, [sp, #0]
 8019370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019372:	2200      	movs	r2, #0
 8019374:	68b9      	ldr	r1, [r7, #8]
 8019376:	f7f0 ff09 	bl	800a18c <lv_draw_img>
        }
    }

    return true;
 801937a:	2301      	movs	r3, #1
}
 801937c:	4618      	mov	r0, r3
 801937e:	3774      	adds	r7, #116	; 0x74
 8019380:	46bd      	mov	sp, r7
 8019382:	bd90      	pop	{r4, r7, pc}

08019384 <lv_img_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b088      	sub	sp, #32
 8019388:	af00      	add	r7, sp, #0
 801938a:	60f8      	str	r0, [r7, #12]
 801938c:	460b      	mov	r3, r1
 801938e:	607a      	str	r2, [r7, #4]
 8019390:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8019392:	4b30      	ldr	r3, [pc, #192]	; (8019454 <lv_img_signal+0xd0>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	7af9      	ldrb	r1, [r7, #11]
 8019398:	687a      	ldr	r2, [r7, #4]
 801939a:	68f8      	ldr	r0, [r7, #12]
 801939c:	4798      	blx	r3
 801939e:	4603      	mov	r3, r0
 80193a0:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 80193a2:	7fbb      	ldrb	r3, [r7, #30]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	d001      	beq.n	80193ac <lv_img_signal+0x28>
 80193a8:	7fbb      	ldrb	r3, [r7, #30]
 80193aa:	e04f      	b.n	801944c <lv_img_signal+0xc8>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80193ac:	68f8      	ldr	r0, [r7, #12]
 80193ae:	f7ed ff6a 	bl	8007286 <lv_obj_get_ext_attr>
 80193b2:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 80193b4:	7afb      	ldrb	r3, [r7, #11]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d11b      	bne.n	80193f2 <lv_img_signal+0x6e>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80193ba:	69bb      	ldr	r3, [r7, #24]
 80193bc:	7b1b      	ldrb	r3, [r3, #12]
 80193be:	f003 0303 	and.w	r3, r3, #3
 80193c2:	b2db      	uxtb	r3, r3
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	d006      	beq.n	80193d6 <lv_img_signal+0x52>
 80193c8:	69bb      	ldr	r3, [r7, #24]
 80193ca:	7b1b      	ldrb	r3, [r3, #12]
 80193cc:	f003 0303 	and.w	r3, r3, #3
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	2b02      	cmp	r3, #2
 80193d4:	d139      	bne.n	801944a <lv_img_signal+0xc6>
            lv_mem_free(ext->src);
 80193d6:	69bb      	ldr	r3, [r7, #24]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4618      	mov	r0, r3
 80193dc:	f7fa fb34 	bl	8013a48 <lv_mem_free>
            ext->src      = NULL;
 80193e0:	69bb      	ldr	r3, [r7, #24]
 80193e2:	2200      	movs	r2, #0
 80193e4:	601a      	str	r2, [r3, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80193e6:	69ba      	ldr	r2, [r7, #24]
 80193e8:	7b13      	ldrb	r3, [r2, #12]
 80193ea:	f043 0303 	orr.w	r3, r3, #3
 80193ee:	7313      	strb	r3, [r2, #12]
 80193f0:	e02b      	b.n	801944a <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80193f2:	7afb      	ldrb	r3, [r7, #11]
 80193f4:	2b04      	cmp	r3, #4
 80193f6:	d10d      	bne.n	8019414 <lv_img_signal+0x90>
        /*Refresh the file name to refresh the symbol text size*/
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 80193f8:	69bb      	ldr	r3, [r7, #24]
 80193fa:	7b1b      	ldrb	r3, [r3, #12]
 80193fc:	f003 0303 	and.w	r3, r3, #3
 8019400:	b2db      	uxtb	r3, r3
 8019402:	2b02      	cmp	r3, #2
 8019404:	d121      	bne.n	801944a <lv_img_signal+0xc6>
            lv_img_set_src(img, ext->src);
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4619      	mov	r1, r3
 801940c:	68f8      	ldr	r0, [r7, #12]
 801940e:	f7ff fd8f 	bl	8018f30 <lv_img_set_src>
 8019412:	e01a      	b.n	801944a <lv_img_signal+0xc6>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8019414:	7afb      	ldrb	r3, [r7, #11]
 8019416:	2b06      	cmp	r3, #6
 8019418:	d117      	bne.n	801944a <lv_img_signal+0xc6>
        lv_obj_type_t * buf = param;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801941e:	2300      	movs	r3, #0
 8019420:	77fb      	strb	r3, [r7, #31]
 8019422:	e008      	b.n	8019436 <lv_img_signal+0xb2>
            if(buf->type[i] == NULL) break;
 8019424:	7ffa      	ldrb	r2, [r7, #31]
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d006      	beq.n	801943e <lv_img_signal+0xba>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019430:	7ffb      	ldrb	r3, [r7, #31]
 8019432:	3301      	adds	r3, #1
 8019434:	77fb      	strb	r3, [r7, #31]
 8019436:	7ffb      	ldrb	r3, [r7, #31]
 8019438:	2b06      	cmp	r3, #6
 801943a:	d9f3      	bls.n	8019424 <lv_img_signal+0xa0>
 801943c:	e000      	b.n	8019440 <lv_img_signal+0xbc>
            if(buf->type[i] == NULL) break;
 801943e:	bf00      	nop
        }
        buf->type[i] = "lv_img";
 8019440:	7ffa      	ldrb	r2, [r7, #31]
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	4904      	ldr	r1, [pc, #16]	; (8019458 <lv_img_signal+0xd4>)
 8019446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801944a:	7fbb      	ldrb	r3, [r7, #30]
}
 801944c:	4618      	mov	r0, r3
 801944e:	3720      	adds	r7, #32
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	20002ac8 	.word	0x20002ac8
 8019458:	08029d58 	.word	0x08029d58

0801945c <lv_font_get_line_height>:
{
 801945c:	b480      	push	{r7}
 801945e:	b083      	sub	sp, #12
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	7a1b      	ldrb	r3, [r3, #8]
}
 8019468:	4618      	mov	r0, r3
 801946a:	370c      	adds	r7, #12
 801946c:	46bd      	mov	sp, r7
 801946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019472:	4770      	bx	lr

08019474 <lv_area_get_width>:
{
 8019474:	b480      	push	{r7}
 8019476:	b083      	sub	sp, #12
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019482:	b29a      	uxth	r2, r3
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801948a:	b29b      	uxth	r3, r3
 801948c:	1ad3      	subs	r3, r2, r3
 801948e:	b29b      	uxth	r3, r3
 8019490:	3301      	adds	r3, #1
 8019492:	b29b      	uxth	r3, r3
 8019494:	b21b      	sxth	r3, r3
}
 8019496:	4618      	mov	r0, r3
 8019498:	370c      	adds	r7, #12
 801949a:	46bd      	mov	sp, r7
 801949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a0:	4770      	bx	lr

080194a2 <lv_area_get_height>:
{
 80194a2:	b480      	push	{r7}
 80194a4:	b083      	sub	sp, #12
 80194a6:	af00      	add	r7, sp, #0
 80194a8:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80194b0:	b29a      	uxth	r2, r3
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	1ad3      	subs	r3, r2, r3
 80194bc:	b29b      	uxth	r3, r3
 80194be:	3301      	adds	r3, #1
 80194c0:	b29b      	uxth	r3, r3
 80194c2:	b21b      	sxth	r3, r3
}
 80194c4:	4618      	mov	r0, r3
 80194c6:	370c      	adds	r7, #12
 80194c8:	46bd      	mov	sp, r7
 80194ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ce:	4770      	bx	lr

080194d0 <lv_label_set_style>:
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b084      	sub	sp, #16
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	460b      	mov	r3, r1
 80194da:	607a      	str	r2, [r7, #4]
 80194dc:	72fb      	strb	r3, [r7, #11]
    lv_obj_set_style(label, style);
 80194de:	6879      	ldr	r1, [r7, #4]
 80194e0:	68f8      	ldr	r0, [r7, #12]
 80194e2:	f7ed fba0 	bl	8006c26 <lv_obj_set_style>
}
 80194e6:	bf00      	nop
 80194e8:	3710      	adds	r7, #16
 80194ea:	46bd      	mov	sp, r7
 80194ec:	bd80      	pop	{r7, pc}

080194ee <lv_label_get_style>:
{
 80194ee:	b580      	push	{r7, lr}
 80194f0:	b082      	sub	sp, #8
 80194f2:	af00      	add	r7, sp, #0
 80194f4:	6078      	str	r0, [r7, #4]
 80194f6:	460b      	mov	r3, r1
 80194f8:	70fb      	strb	r3, [r7, #3]
    return lv_obj_get_style(label);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7ed fe08 	bl	8007110 <lv_obj_get_style>
 8019500:	4603      	mov	r3, r0
}
 8019502:	4618      	mov	r0, r3
 8019504:	3708      	adds	r7, #8
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
	...

0801950c <lv_label_create>:
 * @param par pointer to an object, it will be the parent of the new label
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801950c:	b5b0      	push	{r4, r5, r7, lr}
 801950e:	b086      	sub	sp, #24
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("label create started");

    /*Create a basic object*/
    lv_obj_t * new_label = lv_obj_create(par, copy);
 8019516:	6839      	ldr	r1, [r7, #0]
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f7ec f94b 	bl	80057b4 <lv_obj_create>
 801951e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_label);
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d100      	bne.n	8019528 <lv_label_create+0x1c>
 8019526:	e7fe      	b.n	8019526 <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d101      	bne.n	8019532 <lv_label_create+0x26>
 801952e:	2300      	movs	r3, #0
 8019530:	e111      	b.n	8019756 <lv_label_create+0x24a>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 8019532:	4b8b      	ldr	r3, [pc, #556]	; (8019760 <lv_label_create+0x254>)
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d105      	bne.n	8019546 <lv_label_create+0x3a>
 801953a:	6978      	ldr	r0, [r7, #20]
 801953c:	f7ed fe8b 	bl	8007256 <lv_obj_get_signal_cb>
 8019540:	4602      	mov	r2, r0
 8019542:	4b87      	ldr	r3, [pc, #540]	; (8019760 <lv_label_create+0x254>)
 8019544:	601a      	str	r2, [r3, #0]

    /*Extend the basic object to a label object*/
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8019546:	2120      	movs	r1, #32
 8019548:	6978      	ldr	r0, [r7, #20]
 801954a:	f7ed fccf 	bl	8006eec <lv_obj_allocate_ext_attr>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 801954e:	6978      	ldr	r0, [r7, #20]
 8019550:	f7ed fe99 	bl	8007286 <lv_obj_get_ext_attr>
 8019554:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8019556:	693b      	ldr	r3, [r7, #16]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d100      	bne.n	801955e <lv_label_create+0x52>
 801955c:	e7fe      	b.n	801955c <lv_label_create+0x50>
    if(ext == NULL) return NULL;
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d101      	bne.n	8019568 <lv_label_create+0x5c>
 8019564:	2300      	movs	r3, #0
 8019566:	e0f6      	b.n	8019756 <lv_label_create+0x24a>

    ext->text       = NULL;
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	2200      	movs	r2, #0
 801956c:	601a      	str	r2, [r3, #0]
    ext->static_txt = 0;
 801956e:	693a      	ldr	r2, [r7, #16]
 8019570:	7f93      	ldrb	r3, [r2, #30]
 8019572:	f36f 03c3 	bfc	r3, #3, #1
 8019576:	7793      	strb	r3, [r2, #30]
    ext->recolor    = 0;
 8019578:	693a      	ldr	r2, [r7, #16]
 801957a:	7f93      	ldrb	r3, [r2, #30]
 801957c:	f36f 1386 	bfc	r3, #6, #1
 8019580:	7793      	strb	r3, [r2, #30]
    ext->body_draw  = 0;
 8019582:	693a      	ldr	r2, [r7, #16]
 8019584:	7fd3      	ldrb	r3, [r2, #31]
 8019586:	f36f 0300 	bfc	r3, #0, #1
 801958a:	77d3      	strb	r3, [r2, #31]
    ext->align      = LV_LABEL_ALIGN_LEFT;
 801958c:	693a      	ldr	r2, [r7, #16]
 801958e:	7f93      	ldrb	r3, [r2, #30]
 8019590:	f36f 1305 	bfc	r3, #4, #2
 8019594:	7793      	strb	r3, [r2, #30]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801959c:	811a      	strh	r2, [r3, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801959e:	693a      	ldr	r2, [r7, #16]
 80195a0:	7f93      	ldrb	r3, [r2, #30]
 80195a2:	f36f 0302 	bfc	r3, #0, #3
 80195a6:	7793      	strb	r3, [r2, #30]
#if LV_USE_ANIMATION
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	2219      	movs	r2, #25
 80195ac:	839a      	strh	r2, [r3, #28]
#endif
    ext->offset.x = 0;
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	2200      	movs	r2, #0
 80195b2:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	2200      	movs	r2, #0
 80195b8:	819a      	strh	r2, [r3, #12]

    ext->hint.line_start = -1;
 80195ba:	693b      	ldr	r3, [r7, #16]
 80195bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195c0:	611a      	str	r2, [r3, #16]
    ext->hint.coord_y    = 0;
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	2200      	movs	r2, #0
 80195c6:	619a      	str	r2, [r3, #24]
    ext->hint.y          = 0;
 80195c8:	693b      	ldr	r3, [r7, #16]
 80195ca:	2200      	movs	r2, #0
 80195cc:	615a      	str	r2, [r3, #20]

#if LV_LABEL_TEXT_SEL
    ext->txt_sel_start = LV_LABEL_TEXT_SEL_OFF;
    ext->txt_sel_end   = LV_LABEL_TEXT_SEL_OFF;
#endif
    ext->dot.tmp_ptr   = NULL;
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	2200      	movs	r2, #0
 80195d2:	605a      	str	r2, [r3, #4]
    ext->dot_tmp_alloc = 0;
 80195d4:	693a      	ldr	r2, [r7, #16]
 80195d6:	7fd3      	ldrb	r3, [r2, #31]
 80195d8:	f36f 0341 	bfc	r3, #1, #1
 80195dc:	77d3      	strb	r3, [r2, #31]

    lv_obj_set_design_cb(new_label, lv_label_design);
 80195de:	4961      	ldr	r1, [pc, #388]	; (8019764 <lv_label_create+0x258>)
 80195e0:	6978      	ldr	r0, [r7, #20]
 80195e2:	f7ed fc75 	bl	8006ed0 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 80195e6:	4960      	ldr	r1, [pc, #384]	; (8019768 <lv_label_create+0x25c>)
 80195e8:	6978      	ldr	r0, [r7, #20]
 80195ea:	f7ed fc63 	bl	8006eb4 <lv_obj_set_signal_cb>

    /*Init the new label*/
    if(copy == NULL) {
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d111      	bne.n	8019618 <lv_label_create+0x10c>
        lv_obj_set_click(new_label, false);
 80195f4:	2100      	movs	r1, #0
 80195f6:	6978      	ldr	r0, [r7, #20]
 80195f8:	f7ed fb3b 	bl	8006c72 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 80195fc:	2100      	movs	r1, #0
 80195fe:	6978      	ldr	r0, [r7, #20]
 8019600:	f000 f952 	bl	80198a8 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8019604:	4959      	ldr	r1, [pc, #356]	; (801976c <lv_label_create+0x260>)
 8019606:	6978      	ldr	r0, [r7, #20]
 8019608:	f000 f8b2 	bl	8019770 <lv_label_set_text>
        lv_label_set_style(new_label, LV_LABEL_STYLE_MAIN, NULL); /*Inherit parent's style*/
 801960c:	2200      	movs	r2, #0
 801960e:	2100      	movs	r1, #0
 8019610:	6978      	ldr	r0, [r7, #20]
 8019612:	f7ff ff5d 	bl	80194d0 <lv_label_set_style>
 8019616:	e09d      	b.n	8019754 <lv_label_create+0x248>
    }
    /*Copy 'copy' if not NULL*/
    else {
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8019618:	6838      	ldr	r0, [r7, #0]
 801961a:	f7ed fe34 	bl	8007286 <lv_obj_get_ext_attr>
 801961e:	60f8      	str	r0, [r7, #12]
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8019620:	6838      	ldr	r0, [r7, #0]
 8019622:	f000 fa22 	bl	8019a6a <lv_label_get_long_mode>
 8019626:	4603      	mov	r3, r0
 8019628:	4619      	mov	r1, r3
 801962a:	6978      	ldr	r0, [r7, #20]
 801962c:	f000 f93c 	bl	80198a8 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8019630:	6838      	ldr	r0, [r7, #0]
 8019632:	f000 fa3c 	bl	8019aae <lv_label_get_recolor>
 8019636:	4603      	mov	r3, r0
 8019638:	4619      	mov	r1, r3
 801963a:	6978      	ldr	r0, [r7, #20]
 801963c:	f000 f9b4 	bl	80199a8 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8019640:	6838      	ldr	r0, [r7, #0]
 8019642:	f000 fa4a 	bl	8019ada <lv_label_get_body_draw>
 8019646:	4603      	mov	r3, r0
 8019648:	4619      	mov	r1, r3
 801964a:	6978      	ldr	r0, [r7, #20]
 801964c:	f000 f9d4 	bl	80199f8 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8019650:	6838      	ldr	r0, [r7, #0]
 8019652:	f000 fa1b 	bl	8019a8c <lv_label_get_align>
 8019656:	4603      	mov	r3, r0
 8019658:	4619      	mov	r1, r3
 801965a:	6978      	ldr	r0, [r7, #20]
 801965c:	f000 f980 	bl	8019960 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	7f9b      	ldrb	r3, [r3, #30]
 8019664:	f003 0308 	and.w	r3, r3, #8
 8019668:	b2db      	uxtb	r3, r3
 801966a:	2b00      	cmp	r3, #0
 801966c:	d108      	bne.n	8019680 <lv_label_create+0x174>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801966e:	6838      	ldr	r0, [r7, #0]
 8019670:	f000 f9ed 	bl	8019a4e <lv_label_get_text>
 8019674:	4603      	mov	r3, r0
 8019676:	4619      	mov	r1, r3
 8019678:	6978      	ldr	r0, [r7, #20]
 801967a:	f000 f879 	bl	8019770 <lv_label_set_text>
 801967e:	e007      	b.n	8019690 <lv_label_create+0x184>
        else
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8019680:	6838      	ldr	r0, [r7, #0]
 8019682:	f000 f9e4 	bl	8019a4e <lv_label_get_text>
 8019686:	4603      	mov	r3, r0
 8019688:	4619      	mov	r1, r3
 801968a:	6978      	ldr	r0, [r7, #20]
 801968c:	f000 f8dd 	bl	801984a <lv_label_set_static_text>

        /*In DOT mode save the text byte-to-byte because a '\0' can be in the middle*/
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	7f9b      	ldrb	r3, [r3, #30]
 8019694:	f003 0307 	and.w	r3, r3, #7
 8019698:	b2db      	uxtb	r3, r3
 801969a:	2b02      	cmp	r3, #2
 801969c:	d128      	bne.n	80196f0 <lv_label_create+0x1e4>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	681c      	ldr	r4, [r3, #0]
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7fa fa34 	bl	8013b14 <lv_mem_get_size>
 80196ac:	4603      	mov	r3, r0
 80196ae:	4619      	mov	r1, r3
 80196b0:	4620      	mov	r0, r4
 80196b2:	f7fa f9f1 	bl	8013a98 <lv_mem_realloc>
 80196b6:	4602      	mov	r2, r0
 80196b8:	693b      	ldr	r3, [r7, #16]
 80196ba:	601a      	str	r2, [r3, #0]
            lv_mem_assert(ext->text);
 80196bc:	693b      	ldr	r3, [r7, #16]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d100      	bne.n	80196c6 <lv_label_create+0x1ba>
 80196c4:	e7fe      	b.n	80196c4 <lv_label_create+0x1b8>
            if(ext->text == NULL) return NULL;
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d101      	bne.n	80196d2 <lv_label_create+0x1c6>
 80196ce:	2300      	movs	r3, #0
 80196d0:	e041      	b.n	8019756 <lv_label_create+0x24a>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	681c      	ldr	r4, [r3, #0]
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	681d      	ldr	r5, [r3, #0]
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	4618      	mov	r0, r3
 80196e0:	f7fa fa18 	bl	8013b14 <lv_mem_get_size>
 80196e4:	4603      	mov	r3, r0
 80196e6:	461a      	mov	r2, r3
 80196e8:	4629      	mov	r1, r5
 80196ea:	4620      	mov	r0, r4
 80196ec:	f00d fd9a 	bl	8027224 <memcpy>
        }

        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	7fdb      	ldrb	r3, [r3, #31]
 80196f4:	f003 0302 	and.w	r3, r3, #2
 80196f8:	b2db      	uxtb	r3, r3
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d013      	beq.n	8019726 <lv_label_create+0x21a>
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	685b      	ldr	r3, [r3, #4]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d00f      	beq.n	8019726 <lv_label_create+0x21a>
            int len = strlen(copy_ext->dot.tmp_ptr);
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	4618      	mov	r0, r3
 801970c:	f7e6 fd6a 	bl	80001e4 <strlen>
 8019710:	4603      	mov	r3, r0
 8019712:	60bb      	str	r3, [r7, #8]
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	68ba      	ldr	r2, [r7, #8]
 801971a:	b292      	uxth	r2, r2
 801971c:	4619      	mov	r1, r3
 801971e:	6978      	ldr	r0, [r7, #20]
 8019720:	f001 f8ec 	bl	801a8fc <lv_label_set_dot_tmp>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 8019724:	e005      	b.n	8019732 <lv_label_create+0x226>
        } else {
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 8019726:	693b      	ldr	r3, [r7, #16]
 8019728:	3304      	adds	r3, #4
 801972a:	68fa      	ldr	r2, [r7, #12]
 801972c:	3204      	adds	r2, #4
 801972e:	6812      	ldr	r2, [r2, #0]
 8019730:	601a      	str	r2, [r3, #0]
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	7fdb      	ldrb	r3, [r3, #31]
 8019736:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801973a:	b2d9      	uxtb	r1, r3
 801973c:	693a      	ldr	r2, [r7, #16]
 801973e:	7fd3      	ldrb	r3, [r2, #31]
 8019740:	f361 0341 	bfi	r3, r1, #1, #1
 8019744:	77d3      	strb	r3, [r2, #31]
        ext->dot_end       = copy_ext->dot_end;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	891a      	ldrh	r2, [r3, #8]
 801974a:	693b      	ldr	r3, [r7, #16]
 801974c:	811a      	strh	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_label);
 801974e:	6978      	ldr	r0, [r7, #20]
 8019750:	f7ed fa7b 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("label created");

    return new_label;
 8019754:	697b      	ldr	r3, [r7, #20]
}
 8019756:	4618      	mov	r0, r3
 8019758:	3718      	adds	r7, #24
 801975a:	46bd      	mov	sp, r7
 801975c:	bdb0      	pop	{r4, r5, r7, pc}
 801975e:	bf00      	nop
 8019760:	20002acc 	.word	0x20002acc
 8019764:	08019d81 	.word	0x08019d81
 8019768:	0801a12d 	.word	0x0801a12d
 801976c:	08029d60 	.word	0x08029d60

08019770 <lv_label_set_text>:
 * Set a new text for a label. Memory will be allocated to store the text by the label.
 * @param label pointer to a label object
 * @param text '\0' terminated character string. NULL to refresh with the current text.
 */
void lv_label_set_text(lv_obj_t * label, const char * text)
{
 8019770:	b590      	push	{r4, r7, lr}
 8019772:	b085      	sub	sp, #20
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
    lv_obj_invalidate(label);
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7ec fb57 	bl	8005e2e <lv_obj_invalidate>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f7ed fd80 	bl	8007286 <lv_obj_get_ext_attr>
 8019786:	60f8      	str	r0, [r7, #12]

    /*If text is NULL then refresh */
    if(text == NULL) {
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d103      	bne.n	8019796 <lv_label_set_text+0x26>
        lv_label_refr_text(label);
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f000 fd8c 	bl	801a2ac <lv_label_refr_text>
        return;
 8019794:	e056      	b.n	8019844 <lv_label_set_text+0xd4>
    }

    if(ext->text == text) {
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	683a      	ldr	r2, [r7, #0]
 801979c:	429a      	cmp	r2, r3
 801979e:	d119      	bne.n	80197d4 <lv_label_set_text+0x64>
        /*If set its own text then reallocate it (maybe its size changed)*/
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681c      	ldr	r4, [r3, #0]
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7e6 fd1b 	bl	80001e4 <strlen>
 80197ae:	4603      	mov	r3, r0
 80197b0:	3301      	adds	r3, #1
 80197b2:	4619      	mov	r1, r3
 80197b4:	4620      	mov	r0, r4
 80197b6:	f7fa f96f 	bl	8013a98 <lv_mem_realloc>
 80197ba:	4602      	mov	r2, r0
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d100      	bne.n	80197ca <lv_label_set_text+0x5a>
 80197c8:	e7fe      	b.n	80197c8 <lv_label_set_text+0x58>
        if(ext->text == NULL) return;
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d133      	bne.n	801983a <lv_label_set_text+0xca>
 80197d2:	e037      	b.n	8019844 <lv_label_set_text+0xd4>
    } else {
        /*Allocate space for the new text*/
        uint32_t len = strlen(text) + 1;
 80197d4:	6838      	ldr	r0, [r7, #0]
 80197d6:	f7e6 fd05 	bl	80001e4 <strlen>
 80197da:	4603      	mov	r3, r0
 80197dc:	3301      	adds	r3, #1
 80197de:	60bb      	str	r3, [r7, #8]
        if(ext->text != NULL && ext->static_txt == 0) {
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d00e      	beq.n	8019806 <lv_label_set_text+0x96>
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	7f9b      	ldrb	r3, [r3, #30]
 80197ec:	f003 0308 	and.w	r3, r3, #8
 80197f0:	b2db      	uxtb	r3, r3
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d107      	bne.n	8019806 <lv_label_set_text+0x96>
            lv_mem_free(ext->text);
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7fa f924 	bl	8013a48 <lv_mem_free>
            ext->text = NULL;
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	2200      	movs	r2, #0
 8019804:	601a      	str	r2, [r3, #0]
        }

        ext->text = lv_mem_alloc(len);
 8019806:	68b8      	ldr	r0, [r7, #8]
 8019808:	f7fa f8de 	bl	80139c8 <lv_mem_alloc>
 801980c:	4602      	mov	r2, r0
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d100      	bne.n	801981c <lv_label_set_text+0xac>
 801981a:	e7fe      	b.n	801981a <lv_label_set_text+0xaa>
        if(ext->text == NULL) return;
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d00e      	beq.n	8019842 <lv_label_set_text+0xd2>

        strcpy(ext->text, text);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	6839      	ldr	r1, [r7, #0]
 801982a:	4618      	mov	r0, r3
 801982c:	f00e fa82 	bl	8027d34 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 8019830:	68fa      	ldr	r2, [r7, #12]
 8019832:	7f93      	ldrb	r3, [r2, #30]
 8019834:	f36f 03c3 	bfc	r3, #3, #1
 8019838:	7793      	strb	r3, [r2, #30]
    }

    lv_label_refr_text(label);
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f000 fd36 	bl	801a2ac <lv_label_refr_text>
 8019840:	e000      	b.n	8019844 <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
 8019842:	bf00      	nop
}
 8019844:	3714      	adds	r7, #20
 8019846:	46bd      	mov	sp, r7
 8019848:	bd90      	pop	{r4, r7, pc}

0801984a <lv_label_set_static_text>:
 * has to be 'alive' while the label exist.
 * @param label pointer to a label object
 * @param text pointer to a text. NULL to refresh with the current text.
 */
void lv_label_set_static_text(lv_obj_t * label, const char * text)
{
 801984a:	b580      	push	{r7, lr}
 801984c:	b084      	sub	sp, #16
 801984e:	af00      	add	r7, sp, #0
 8019850:	6078      	str	r0, [r7, #4]
 8019852:	6039      	str	r1, [r7, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019854:	6878      	ldr	r0, [r7, #4]
 8019856:	f7ed fd16 	bl	8007286 <lv_obj_get_ext_attr>
 801985a:	60f8      	str	r0, [r7, #12]
    if(ext->static_txt == 0 && ext->text != NULL) {
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	7f9b      	ldrb	r3, [r3, #30]
 8019860:	f003 0308 	and.w	r3, r3, #8
 8019864:	b2db      	uxtb	r3, r3
 8019866:	2b00      	cmp	r3, #0
 8019868:	d10b      	bne.n	8019882 <lv_label_set_static_text+0x38>
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d007      	beq.n	8019882 <lv_label_set_static_text+0x38>
        lv_mem_free(ext->text);
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	4618      	mov	r0, r3
 8019878:	f7fa f8e6 	bl	8013a48 <lv_mem_free>
        ext->text = NULL;
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2200      	movs	r2, #0
 8019880:	601a      	str	r2, [r3, #0]
    }

    if(text != NULL) {
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d007      	beq.n	8019898 <lv_label_set_static_text+0x4e>
        ext->static_txt = 1;
 8019888:	68fa      	ldr	r2, [r7, #12]
 801988a:	7f93      	ldrb	r3, [r2, #30]
 801988c:	f043 0308 	orr.w	r3, r3, #8
 8019890:	7793      	strb	r3, [r2, #30]
        ext->text       = (char *)text;
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	683a      	ldr	r2, [r7, #0]
 8019896:	601a      	str	r2, [r3, #0]
    }

    lv_label_refr_text(label);
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f000 fd07 	bl	801a2ac <lv_label_refr_text>
}
 801989e:	bf00      	nop
 80198a0:	3710      	adds	r7, #16
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
	...

080198a8 <lv_label_set_long_mode>:
 * @param long_mode the new mode from 'lv_label_long_mode' enum.
 *                  In LV_LONG_BREAK/LONG/ROLL the size of the label should be set AFTER this
 * function
 */
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b084      	sub	sp, #16
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	460b      	mov	r3, r1
 80198b2:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7ed fce6 	bl	8007286 <lv_obj_get_ext_attr>
 80198ba:	60f8      	str	r0, [r7, #12]

#if LV_USE_ANIMATION
    /*Delete the old animation (if exists)*/
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80198bc:	4924      	ldr	r1, [pc, #144]	; (8019950 <lv_label_set_long_mode+0xa8>)
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f7f8 ffec 	bl	801289c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 80198c4:	4923      	ldr	r1, [pc, #140]	; (8019954 <lv_label_set_long_mode+0xac>)
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f7f8 ffe8 	bl	801289c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80198cc:	4922      	ldr	r1, [pc, #136]	; (8019958 <lv_label_set_long_mode+0xb0>)
 80198ce:	6878      	ldr	r0, [r7, #4]
 80198d0:	f7f8 ffe4 	bl	801289c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80198d4:	4921      	ldr	r1, [pc, #132]	; (801995c <lv_label_set_long_mode+0xb4>)
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	f7f8 ffe0 	bl	801289c <lv_anim_del>
#endif
    ext->offset.x = 0;
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	2200      	movs	r2, #0
 80198e0:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2200      	movs	r2, #0
 80198e6:	819a      	strh	r2, [r3, #12]

    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 80198e8:	78fb      	ldrb	r3, [r7, #3]
 80198ea:	2b03      	cmp	r3, #3
 80198ec:	d005      	beq.n	80198fa <lv_label_set_long_mode+0x52>
 80198ee:	78fb      	ldrb	r3, [r7, #3]
 80198f0:	2b04      	cmp	r3, #4
 80198f2:	d002      	beq.n	80198fa <lv_label_set_long_mode+0x52>
 80198f4:	78fb      	ldrb	r3, [r7, #3]
 80198f6:	2b05      	cmp	r3, #5
 80198f8:	d105      	bne.n	8019906 <lv_label_set_long_mode+0x5e>
        ext->expand = 1;
 80198fa:	68fa      	ldr	r2, [r7, #12]
 80198fc:	7f93      	ldrb	r3, [r2, #30]
 80198fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019902:	7793      	strb	r3, [r2, #30]
 8019904:	e004      	b.n	8019910 <lv_label_set_long_mode+0x68>
    else
        ext->expand = 0;
 8019906:	68fa      	ldr	r2, [r7, #12]
 8019908:	7f93      	ldrb	r3, [r2, #30]
 801990a:	f36f 13c7 	bfc	r3, #7, #1
 801990e:	7793      	strb	r3, [r2, #30]

    /*Restore the character under the dots*/
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	7f9b      	ldrb	r3, [r3, #30]
 8019914:	f003 0307 	and.w	r3, r3, #7
 8019918:	b2db      	uxtb	r3, r3
 801991a:	2b02      	cmp	r3, #2
 801991c:	d108      	bne.n	8019930 <lv_label_set_long_mode+0x88>
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	891b      	ldrh	r3, [r3, #8]
 8019922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019926:	4293      	cmp	r3, r2
 8019928:	d002      	beq.n	8019930 <lv_label_set_long_mode+0x88>
        lv_label_revert_dots(label);
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f000 ff64 	bl	801a7f8 <lv_label_revert_dots>
    }

    ext->long_mode = long_mode;
 8019930:	78fb      	ldrb	r3, [r7, #3]
 8019932:	f003 0307 	and.w	r3, r3, #7
 8019936:	b2d9      	uxtb	r1, r3
 8019938:	68fa      	ldr	r2, [r7, #12]
 801993a:	7f93      	ldrb	r3, [r2, #30]
 801993c:	f361 0302 	bfi	r3, r1, #0, #3
 8019940:	7793      	strb	r3, [r2, #30]
    lv_label_refr_text(label);
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	f000 fcb2 	bl	801a2ac <lv_label_refr_text>
}
 8019948:	bf00      	nop
 801994a:	3710      	adds	r7, #16
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}
 8019950:	08006143 	.word	0x08006143
 8019954:	0800616d 	.word	0x0800616d
 8019958:	0801a8ad 	.word	0x0801a8ad
 801995c:	0801a8d5 	.word	0x0801a8d5

08019960 <lv_label_set_align>:
 * Set the align of the label (left or center)
 * @param label pointer to a label object
 * @param align 'LV_LABEL_ALIGN_LEFT' or 'LV_LABEL_ALIGN_LEFT'
 */
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b084      	sub	sp, #16
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]
 8019968:	460b      	mov	r3, r1
 801996a:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801996c:	6878      	ldr	r0, [r7, #4]
 801996e:	f7ed fc8a 	bl	8007286 <lv_obj_get_ext_attr>
 8019972:	60f8      	str	r0, [r7, #12]
    if(ext->align == align) return;
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	7f9b      	ldrb	r3, [r3, #30]
 8019978:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801997c:	b2db      	uxtb	r3, r3
 801997e:	461a      	mov	r2, r3
 8019980:	78fb      	ldrb	r3, [r7, #3]
 8019982:	429a      	cmp	r2, r3
 8019984:	d00c      	beq.n	80199a0 <lv_label_set_align+0x40>

    ext->align = align;
 8019986:	78fb      	ldrb	r3, [r7, #3]
 8019988:	f003 0303 	and.w	r3, r3, #3
 801998c:	b2d9      	uxtb	r1, r3
 801998e:	68fa      	ldr	r2, [r7, #12]
 8019990:	7f93      	ldrb	r3, [r2, #30]
 8019992:	f361 1305 	bfi	r3, r1, #4, #2
 8019996:	7793      	strb	r3, [r2, #30]

    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f7ec fa48 	bl	8005e2e <lv_obj_invalidate>
 801999e:	e000      	b.n	80199a2 <lv_label_set_align+0x42>
    if(ext->align == align) return;
 80199a0:	bf00      	nop
                                 (lv_refr_label_text() not required)*/
}
 80199a2:	3710      	adds	r7, #16
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <lv_label_set_recolor>:
 * Enable the recoloring by in-line commands
 * @param label pointer to a label object
 * @param en true: enable recoloring, false: disable
 */
void lv_label_set_recolor(lv_obj_t * label, bool en)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
 80199b0:	460b      	mov	r3, r1
 80199b2:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7ed fc66 	bl	8007286 <lv_obj_get_ext_attr>
 80199ba:	60f8      	str	r0, [r7, #12]
    if(ext->recolor == en) return;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	7f9b      	ldrb	r3, [r3, #30]
 80199c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	78fa      	ldrb	r2, [r7, #3]
 80199c8:	429a      	cmp	r2, r3
 80199ca:	d011      	beq.n	80199f0 <lv_label_set_recolor+0x48>

    ext->recolor = en == false ? 0 : 1;
 80199cc:	78fb      	ldrb	r3, [r7, #3]
 80199ce:	f083 0301 	eor.w	r3, r3, #1
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d001      	beq.n	80199dc <lv_label_set_recolor+0x34>
 80199d8:	2100      	movs	r1, #0
 80199da:	e000      	b.n	80199de <lv_label_set_recolor+0x36>
 80199dc:	2101      	movs	r1, #1
 80199de:	68fa      	ldr	r2, [r7, #12]
 80199e0:	7f93      	ldrb	r3, [r2, #30]
 80199e2:	f361 1386 	bfi	r3, r1, #6, #1
 80199e6:	7793      	strb	r3, [r2, #30]

    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f000 fc5f 	bl	801a2ac <lv_label_refr_text>
 80199ee:	e000      	b.n	80199f2 <lv_label_set_recolor+0x4a>
    if(ext->recolor == en) return;
 80199f0:	bf00      	nop
                                  be hided or revealed*/
}
 80199f2:	3710      	adds	r7, #16
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <lv_label_set_body_draw>:
 * Set the label to draw (or not draw) background specified in its style's body
 * @param label pointer to a label object
 * @param en true: draw body; false: don't draw body
 */
void lv_label_set_body_draw(lv_obj_t * label, bool en)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b084      	sub	sp, #16
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	460b      	mov	r3, r1
 8019a02:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f7ed fc3e 	bl	8007286 <lv_obj_get_ext_attr>
 8019a0a:	60f8      	str	r0, [r7, #12]
    if(ext->body_draw == en) return;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	7fdb      	ldrb	r3, [r3, #31]
 8019a10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019a14:	b2db      	uxtb	r3, r3
 8019a16:	78fa      	ldrb	r2, [r7, #3]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d014      	beq.n	8019a46 <lv_label_set_body_draw+0x4e>

    ext->body_draw = en == false ? 0 : 1;
 8019a1c:	78fb      	ldrb	r3, [r7, #3]
 8019a1e:	f083 0301 	eor.w	r3, r3, #1
 8019a22:	b2db      	uxtb	r3, r3
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d001      	beq.n	8019a2c <lv_label_set_body_draw+0x34>
 8019a28:	2100      	movs	r1, #0
 8019a2a:	e000      	b.n	8019a2e <lv_label_set_body_draw+0x36>
 8019a2c:	2101      	movs	r1, #1
 8019a2e:	68fa      	ldr	r2, [r7, #12]
 8019a30:	7fd3      	ldrb	r3, [r2, #31]
 8019a32:	f361 0300 	bfi	r3, r1, #0, #1
 8019a36:	77d3      	strb	r3, [r2, #31]

    lv_obj_refresh_ext_draw_pad(label);
 8019a38:	6878      	ldr	r0, [r7, #4]
 8019a3a:	f7ed fa6d 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>

    lv_obj_invalidate(label);
 8019a3e:	6878      	ldr	r0, [r7, #4]
 8019a40:	f7ec f9f5 	bl	8005e2e <lv_obj_invalidate>
 8019a44:	e000      	b.n	8019a48 <lv_label_set_body_draw+0x50>
    if(ext->body_draw == en) return;
 8019a46:	bf00      	nop
}
 8019a48:	3710      	adds	r7, #16
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}

08019a4e <lv_label_get_text>:
 * Get the text of a label
 * @param label pointer to a label object
 * @return the text of the label
 */
char * lv_label_get_text(const lv_obj_t * label)
{
 8019a4e:	b580      	push	{r7, lr}
 8019a50:	b084      	sub	sp, #16
 8019a52:	af00      	add	r7, sp, #0
 8019a54:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a56:	6878      	ldr	r0, [r7, #4]
 8019a58:	f7ed fc15 	bl	8007286 <lv_obj_get_ext_attr>
 8019a5c:	60f8      	str	r0, [r7, #12]

    return ext->text;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3710      	adds	r7, #16
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}

08019a6a <lv_label_get_long_mode>:
 * Get the long mode of a label
 * @param label pointer to a label object
 * @return the long mode
 */
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)
{
 8019a6a:	b580      	push	{r7, lr}
 8019a6c:	b084      	sub	sp, #16
 8019a6e:	af00      	add	r7, sp, #0
 8019a70:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f7ed fc07 	bl	8007286 <lv_obj_get_ext_attr>
 8019a78:	60f8      	str	r0, [r7, #12]
    return ext->long_mode;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	7f9b      	ldrb	r3, [r3, #30]
 8019a7e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8019a82:	b2db      	uxtb	r3, r3
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3710      	adds	r7, #16
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <lv_label_get_align>:
 * Get the align attribute
 * @param label pointer to a label object
 * @return LV_LABEL_ALIGN_LEFT or LV_LABEL_ALIGN_CENTER
 */
lv_label_align_t lv_label_get_align(const lv_obj_t * label)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019a94:	6878      	ldr	r0, [r7, #4]
 8019a96:	f7ed fbf6 	bl	8007286 <lv_obj_get_ext_attr>
 8019a9a:	60f8      	str	r0, [r7, #12]
    return ext->align;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	7f9b      	ldrb	r3, [r3, #30]
 8019aa0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019aa4:	b2db      	uxtb	r3, r3
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3710      	adds	r7, #16
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}

08019aae <lv_label_get_recolor>:
 * Get the recoloring attribute
 * @param label pointer to a label object
 * @return true: recoloring is enabled, false: disable
 */
bool lv_label_get_recolor(const lv_obj_t * label)
{
 8019aae:	b580      	push	{r7, lr}
 8019ab0:	b084      	sub	sp, #16
 8019ab2:	af00      	add	r7, sp, #0
 8019ab4:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019ab6:	6878      	ldr	r0, [r7, #4]
 8019ab8:	f7ed fbe5 	bl	8007286 <lv_obj_get_ext_attr>
 8019abc:	60f8      	str	r0, [r7, #12]
    return ext->recolor == 0 ? false : true;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	7f9b      	ldrb	r3, [r3, #30]
 8019ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ac6:	b2db      	uxtb	r3, r3
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	bf14      	ite	ne
 8019acc:	2301      	movne	r3, #1
 8019ace:	2300      	moveq	r3, #0
 8019ad0:	b2db      	uxtb	r3, r3
}
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	3710      	adds	r7, #16
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}

08019ada <lv_label_get_body_draw>:
 * Get the body draw attribute
 * @param label pointer to a label object
 * @return true: draw body; false: don't draw body
 */
bool lv_label_get_body_draw(const lv_obj_t * label)
{
 8019ada:	b580      	push	{r7, lr}
 8019adc:	b084      	sub	sp, #16
 8019ade:	af00      	add	r7, sp, #0
 8019ae0:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019ae2:	6878      	ldr	r0, [r7, #4]
 8019ae4:	f7ed fbcf 	bl	8007286 <lv_obj_get_ext_attr>
 8019ae8:	60f8      	str	r0, [r7, #12]
    return ext->body_draw == 0 ? false : true;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	7fdb      	ldrb	r3, [r3, #31]
 8019aee:	f003 0301 	and.w	r3, r3, #1
 8019af2:	b2db      	uxtb	r3, r3
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	bf14      	ite	ne
 8019af8:	2301      	movne	r3, #1
 8019afa:	2300      	moveq	r3, #0
 8019afc:	b2db      	uxtb	r3, r3
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3710      	adds	r7, #16
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}
	...

08019b08 <lv_label_get_letter_on>:
 * @param pos pointer to point with coordinates on a the label
 * @return the index of the letter on the 'pos_p' point (E.g. on 0;0 is the 0. letter)
 * Expressed in character index and not byte index (different in UTF-8)
 */
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b092      	sub	sp, #72	; 0x48
 8019b0c:	af02      	add	r7, sp, #8
 8019b0e:	6078      	str	r0, [r7, #4]
 8019b10:	6039      	str	r1, [r7, #0]
    const char * txt         = lv_label_get_text(label);
 8019b12:	6878      	ldr	r0, [r7, #4]
 8019b14:	f7ff ff9b 	bl	8019a4e <lv_label_get_text>
 8019b18:	62b8      	str	r0, [r7, #40]	; 0x28
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f7ed fbb3 	bl	8007286 <lv_obj_get_ext_attr>
 8019b20:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t line_start      = 0;
 8019b22:	2300      	movs	r3, #0
 8019b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t new_line_start  = 0;
 8019b26:	2300      	movs	r3, #0
 8019b28:	63bb      	str	r3, [r7, #56]	; 0x38
    lv_coord_t max_w         = lv_obj_get_width(label);
 8019b2a:	6878      	ldr	r0, [r7, #4]
 8019b2c:	f7ed fac0 	bl	80070b0 <lv_obj_get_width>
 8019b30:	4603      	mov	r3, r0
 8019b32:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_style_t * style = lv_obj_get_style(label);
 8019b34:	6878      	ldr	r0, [r7, #4]
 8019b36:	f7ed faeb 	bl	8007110 <lv_obj_get_style>
 8019b3a:	6238      	str	r0, [r7, #32]
    const lv_font_t * font   = style->text.font;
 8019b3c:	6a3b      	ldr	r3, [r7, #32]
 8019b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b40:	61fb      	str	r3, [r7, #28]
    uint8_t letter_height    = lv_font_get_line_height(font);
 8019b42:	69f8      	ldr	r0, [r7, #28]
 8019b44:	f7ff fc8a 	bl	801945c <lv_font_get_line_height>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	76fb      	strb	r3, [r7, #27]
    lv_coord_t y             = 0;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 8019b50:	2300      	movs	r3, #0
 8019b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8019b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b58:	7f9b      	ldrb	r3, [r3, #30]
 8019b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d005      	beq.n	8019b70 <lv_label_get_letter_on+0x68>
 8019b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b68:	f043 0301 	orr.w	r3, r3, #1
 8019b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8019b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b72:	7f9b      	ldrb	r3, [r3, #30]
 8019b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d005      	beq.n	8019b8a <lv_label_get_letter_on+0x82>
 8019b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b82:	f043 0302 	orr.w	r3, r3, #2
 8019b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8019b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8c:	7f9b      	ldrb	r3, [r3, #30]
 8019b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019b92:	b2db      	uxtb	r3, r3
 8019b94:	2b10      	cmp	r3, #16
 8019b96:	d105      	bne.n	8019ba4 <lv_label_get_letter_on+0x9c>
 8019b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b9c:	f043 0304 	orr.w	r3, r3, #4
 8019ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8019ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba6:	7f9b      	ldrb	r3, [r3, #30]
 8019ba8:	f003 0307 	and.w	r3, r3, #7
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d12f      	bne.n	8019c12 <lv_label_get_letter_on+0x10a>
        max_w = LV_COORD_MAX;
 8019bb2:	f647 4318 	movw	r3, #31768	; 0x7c18
 8019bb6:	86fb      	strh	r3, [r7, #54]	; 0x36
    }

    /*Search the line of the index letter */;
    while(txt[line_start] != '\0') {
 8019bb8:	e02b      	b.n	8019c12 <lv_label_get_letter_on+0x10a>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8019bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019bbe:	18d0      	adds	r0, r2, r3
 8019bc0:	6a3b      	ldr	r3, [r7, #32]
 8019bc2:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8019bc6:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8019bca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	69f9      	ldr	r1, [r7, #28]
 8019bd4:	f7fa faf6 	bl	80141c4 <lv_txt_get_next_line>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	461a      	mov	r2, r3
 8019bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bde:	4413      	add	r3, r2
 8019be0:	63bb      	str	r3, [r7, #56]	; 0x38

        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019be8:	4619      	mov	r1, r3
 8019bea:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8019bee:	7efb      	ldrb	r3, [r7, #27]
 8019bf0:	4413      	add	r3, r2
 8019bf2:	4299      	cmp	r1, r3
 8019bf4:	dd14      	ble.n	8019c20 <lv_label_get_letter_on+0x118>
        y += letter_height + style->text.line_space;
 8019bf6:	7efb      	ldrb	r3, [r7, #27]
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	6a3b      	ldr	r3, [r7, #32]
 8019bfc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019c00:	b29b      	uxth	r3, r3
 8019c02:	4413      	add	r3, r2
 8019c04:	b29a      	uxth	r2, r3
 8019c06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c08:	4413      	add	r3, r2
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	86bb      	strh	r3, [r7, #52]	; 0x34

        line_start = new_line_start;
 8019c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(txt[line_start] != '\0') {
 8019c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c16:	4413      	add	r3, r2
 8019c18:	781b      	ldrb	r3, [r3, #0]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d1cd      	bne.n	8019bba <lv_label_get_letter_on+0xb2>
 8019c1e:	e000      	b.n	8019c22 <lv_label_get_letter_on+0x11a>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8019c20:	bf00      	nop
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8019c22:	2300      	movs	r3, #0
 8019c24:	863b      	strh	r3, [r7, #48]	; 0x30
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	7f9b      	ldrb	r3, [r3, #30]
 8019c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019c2e:	b2db      	uxtb	r3, r3
 8019c30:	2b10      	cmp	r3, #16
 8019c32:	d129      	bne.n	8019c88 <lv_label_get_letter_on+0x180>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8019c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c38:	18d0      	adds	r0, r2, r3
 8019c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	1ad3      	subs	r3, r2, r3
 8019c44:	b299      	uxth	r1, r3
 8019c46:	6a3b      	ldr	r3, [r7, #32]
 8019c48:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8019c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019c50:	9300      	str	r3, [sp, #0]
 8019c52:	4613      	mov	r3, r2
 8019c54:	69fa      	ldr	r2, [r7, #28]
 8019c56:	f7fa fb67 	bl	8014328 <lv_txt_get_width>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	833b      	strh	r3, [r7, #24]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8019c5e:	6878      	ldr	r0, [r7, #4]
 8019c60:	f7ed fa26 	bl	80070b0 <lv_obj_get_width>
 8019c64:	4603      	mov	r3, r0
 8019c66:	0fda      	lsrs	r2, r3, #31
 8019c68:	4413      	add	r3, r2
 8019c6a:	105b      	asrs	r3, r3, #1
 8019c6c:	b21b      	sxth	r3, r3
 8019c6e:	4619      	mov	r1, r3
 8019c70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c74:	0fda      	lsrs	r2, r3, #31
 8019c76:	4413      	add	r3, r2
 8019c78:	105b      	asrs	r3, r3, #1
 8019c7a:	b21b      	sxth	r3, r3
 8019c7c:	1acb      	subs	r3, r1, r3
 8019c7e:	b29a      	uxth	r2, r3
 8019c80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019c82:	4413      	add	r3, r2
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8019c88:	2300      	movs	r3, #0
 8019c8a:	73fb      	strb	r3, [r7, #15]

    uint32_t i         = line_start;
 8019c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c8e:	60bb      	str	r3, [r7, #8]
    uint32_t i_current = i;
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t letter;
    uint32_t letter_next;

    if(new_line_start > 0) {
 8019c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d04a      	beq.n	8019d30 <lv_label_get_letter_on+0x228>
        while(i <= new_line_start - 1) {
 8019c9a:	e044      	b.n	8019d26 <lv_label_get_letter_on+0x21e>
            /* Get the current letter.
             * Be careful 'i' already points to the next character*/
            letter = lv_txt_encoded_next(txt, &i);
 8019c9c:	4b2a      	ldr	r3, [pc, #168]	; (8019d48 <lv_label_get_letter_on+0x240>)
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	f107 0208 	add.w	r2, r7, #8
 8019ca4:	4611      	mov	r1, r2
 8019ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ca8:	4798      	blx	r3
 8019caa:	6178      	str	r0, [r7, #20]

            /*Get the next letter too for kerning*/
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8019cac:	4b26      	ldr	r3, [pc, #152]	; (8019d48 <lv_label_get_letter_on+0x240>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	68ba      	ldr	r2, [r7, #8]
 8019cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019cb4:	440a      	add	r2, r1
 8019cb6:	2100      	movs	r1, #0
 8019cb8:	4610      	mov	r0, r2
 8019cba:	4798      	blx	r3
 8019cbc:	6138      	str	r0, [r7, #16]

            /*Handle the recolor command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8019cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019cc2:	f003 0301 	and.w	r3, r3, #1
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d00e      	beq.n	8019ce8 <lv_label_get_letter_on+0x1e0>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8019cca:	68bb      	ldr	r3, [r7, #8]
 8019ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cce:	4413      	add	r3, r2
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	461a      	mov	r2, r3
 8019cd4:	f107 030f 	add.w	r3, r7, #15
 8019cd8:	4611      	mov	r1, r2
 8019cda:	4618      	mov	r0, r3
 8019cdc:	f7fa fb8e 	bl	80143fc <lv_txt_is_cmd>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d000      	beq.n	8019ce8 <lv_label_get_letter_on+0x1e0>
                    continue; /*Skip the letter is it is part of a command*/
 8019ce6:	e01e      	b.n	8019d26 <lv_label_get_letter_on+0x21e>
                }
            }

            x += lv_font_get_glyph_width(font, letter, letter_next);
 8019ce8:	693a      	ldr	r2, [r7, #16]
 8019cea:	6979      	ldr	r1, [r7, #20]
 8019cec:	69f8      	ldr	r0, [r7, #28]
 8019cee:	f7f8 f883 	bl	8011df8 <lv_font_get_glyph_width>
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	461a      	mov	r2, r3
 8019cf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019cf8:	4413      	add	r3, r2
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	863b      	strh	r3, [r7, #48]	; 0x30
            if(pos->x < x) {
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d04:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	dd02      	ble.n	8019d12 <lv_label_get_letter_on+0x20a>
                i = i_current;
 8019d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d0e:	60bb      	str	r3, [r7, #8]
                break;
 8019d10:	e00e      	b.n	8019d30 <lv_label_get_letter_on+0x228>
            }
            x += style->text.letter_space;
 8019d12:	6a3b      	ldr	r3, [r7, #32]
 8019d14:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8019d18:	b29a      	uxth	r2, r3
 8019d1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019d1c:	4413      	add	r3, r2
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	863b      	strh	r3, [r7, #48]	; 0x30
            i_current = i;
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        while(i <= new_line_start - 1) {
 8019d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d28:	1e5a      	subs	r2, r3, #1
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d2b5      	bcs.n	8019c9c <lv_label_get_letter_on+0x194>
        }
    }

    return lv_encoded_get_char_id(txt, i);
 8019d30:	4b06      	ldr	r3, [pc, #24]	; (8019d4c <lv_label_get_letter_on+0x244>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	68ba      	ldr	r2, [r7, #8]
 8019d36:	4611      	mov	r1, r2
 8019d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019d3a:	4798      	blx	r3
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	b29b      	uxth	r3, r3
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3740      	adds	r7, #64	; 0x40
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}
 8019d48:	2000279c 	.word	0x2000279c
 8019d4c:	200027a8 	.word	0x200027a8

08019d50 <lv_label_get_text_sel_start>:
 * @brief Get the selection start index.
 * @param label pointer to a label object.
 * @return selection start index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_start(const lv_obj_t * label)
{
 8019d50:	b480      	push	{r7}
 8019d52:	b083      	sub	sp, #12
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_start;

#else
    (void)label;    /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 8019d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	370c      	adds	r7, #12
 8019d60:	46bd      	mov	sp, r7
 8019d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d66:	4770      	bx	lr

08019d68 <lv_label_get_text_sel_end>:
 * @brief Get the selection end index.
 * @param label pointer to a label object.
 * @return selection end index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_end(const lv_obj_t * label)
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b083      	sub	sp, #12
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
#if LV_LABEL_TEXT_SEL
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_end;
#else
    (void)label; /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 8019d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
#endif
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	370c      	adds	r7, #12
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7e:	4770      	bx	lr

08019d80 <lv_label_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_label_design(lv_obj_t * label, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d82:	b099      	sub	sp, #100	; 0x64
 8019d84:	af06      	add	r7, sp, #24
 8019d86:	60f8      	str	r0, [r7, #12]
 8019d88:	60b9      	str	r1, [r7, #8]
 8019d8a:	4613      	mov	r3, r2
 8019d8c:	71fb      	strb	r3, [r7, #7]
    /* A label never covers an area */
    if(mode == LV_DESIGN_COVER_CHK)
 8019d8e:	79fb      	ldrb	r3, [r7, #7]
 8019d90:	2b02      	cmp	r3, #2
 8019d92:	d101      	bne.n	8019d98 <lv_label_design+0x18>
        return false;
 8019d94:	2300      	movs	r3, #0
 8019d96:	e1c4      	b.n	801a122 <lv_label_design+0x3a2>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019d98:	79fb      	ldrb	r3, [r7, #7]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	f040 81c0 	bne.w	801a120 <lv_label_design+0x3a0>
        lv_area_t coords;
        const lv_style_t * style = lv_obj_get_style(label);
 8019da0:	68f8      	ldr	r0, [r7, #12]
 8019da2:	f7ed f9b5 	bl	8007110 <lv_obj_get_style>
 8019da6:	63f8      	str	r0, [r7, #60]	; 0x3c
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8019da8:	68f8      	ldr	r0, [r7, #12]
 8019daa:	f7ed fa1e 	bl	80071ea <lv_obj_get_opa_scale>
 8019dae:	4603      	mov	r3, r0
 8019db0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        lv_obj_get_coords(label, &coords);
 8019db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019db8:	4619      	mov	r1, r3
 8019dba:	68f8      	ldr	r0, [r7, #12]
 8019dbc:	f7ed f937 	bl	800702e <lv_obj_get_coords>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(label);
 8019dc0:	68f8      	ldr	r0, [r7, #12]
 8019dc2:	f7ed fa6c 	bl	800729e <lv_obj_get_group>
 8019dc6:	6378      	str	r0, [r7, #52]	; 0x34
        if(lv_group_get_focused(g) == label) {
 8019dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019dca:	f7eb fa4a 	bl	8005262 <lv_group_get_focused>
 8019dce:	4602      	mov	r2, r0
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	4293      	cmp	r3, r2
 8019dd4:	d107      	bne.n	8019de6 <lv_label_design+0x66>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8019dd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019dda:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019de0:	68b9      	ldr	r1, [r7, #8]
 8019de2:	f7f2 ff04 	bl	800cbee <lv_draw_rect>
        }
#endif

        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8019de6:	68f8      	ldr	r0, [r7, #12]
 8019de8:	f7ed fa4d 	bl	8007286 <lv_obj_get_ext_attr>
 8019dec:	6338      	str	r0, [r7, #48]	; 0x30

        if(ext->body_draw) {
 8019dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df0:	7fdb      	ldrb	r3, [r3, #31]
 8019df2:	f003 0301 	and.w	r3, r3, #1
 8019df6:	b2db      	uxtb	r3, r3
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d03b      	beq.n	8019e74 <lv_label_design+0xf4>
            lv_area_t bg;
            lv_obj_get_coords(label, &bg);
 8019dfc:	f107 0320 	add.w	r3, r7, #32
 8019e00:	4619      	mov	r1, r3
 8019e02:	68f8      	ldr	r0, [r7, #12]
 8019e04:	f7ed f913 	bl	800702e <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8019e08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019e0c:	b29a      	uxth	r2, r3
 8019e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e10:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	b21b      	sxth	r3, r3
 8019e1c:	843b      	strh	r3, [r7, #32]
            bg.x2 += style->body.padding.right;
 8019e1e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019e22:	b29a      	uxth	r2, r3
 8019e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e26:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	4413      	add	r3, r2
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	b21b      	sxth	r3, r3
 8019e32:	84bb      	strh	r3, [r7, #36]	; 0x24
            bg.y1 -= style->body.padding.top;
 8019e34:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019e38:	b29a      	uxth	r2, r3
 8019e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	1ad3      	subs	r3, r2, r3
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	b21b      	sxth	r3, r3
 8019e48:	847b      	strh	r3, [r7, #34]	; 0x22
            bg.y2 += style->body.padding.bottom;
 8019e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019e4e:	b29a      	uxth	r2, r3
 8019e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	4413      	add	r3, r2
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	b21b      	sxth	r3, r3
 8019e5e:	84fb      	strh	r3, [r7, #38]	; 0x26

            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8019e60:	68f8      	ldr	r0, [r7, #12]
 8019e62:	f7ed f9c2 	bl	80071ea <lv_obj_get_opa_scale>
 8019e66:	4603      	mov	r3, r0
 8019e68:	f107 0020 	add.w	r0, r7, #32
 8019e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019e6e:	68b9      	ldr	r1, [r7, #8]
 8019e70:	f7f2 febd 	bl	800cbee <lv_draw_rect>
        }

        /*TEST: draw a background for the label*/
        // lv_draw_rect(&label->coords, mask, &lv_style_plain_color, LV_OPA_COVER);

        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8019e74:	2300      	movs	r3, #0
 8019e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8019e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e7c:	7f9b      	ldrb	r3, [r3, #30]
 8019e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e82:	b2db      	uxtb	r3, r3
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d005      	beq.n	8019e94 <lv_label_design+0x114>
 8019e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019e8c:	f043 0301 	orr.w	r3, r3, #1
 8019e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8019e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e96:	7f9b      	ldrb	r3, [r3, #30]
 8019e98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d005      	beq.n	8019eae <lv_label_design+0x12e>
 8019ea2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019ea6:	f043 0302 	orr.w	r3, r3, #2
 8019eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8019eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eb0:	7f9b      	ldrb	r3, [r3, #30]
 8019eb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	2b10      	cmp	r3, #16
 8019eba:	d105      	bne.n	8019ec8 <lv_label_design+0x148>
 8019ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019ec0:	f043 0304 	orr.w	r3, r3, #4
 8019ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8019ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eca:	7f9b      	ldrb	r3, [r3, #30]
 8019ecc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	2b20      	cmp	r3, #32
 8019ed4:	d105      	bne.n	8019ee2 <lv_label_design+0x162>
 8019ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019eda:	f043 0308 	orr.w	r3, r3, #8
 8019ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        /* In ROLL mode the CENTER and RIGHT are pointless so remove them.
         * (In addition they will result mis-alignment is this case)*/
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8019ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ee4:	7f9b      	ldrb	r3, [r3, #30]
 8019ee6:	f003 0307 	and.w	r3, r3, #7
 8019eea:	b2db      	uxtb	r3, r3
 8019eec:	2b03      	cmp	r3, #3
 8019eee:	d006      	beq.n	8019efe <lv_label_design+0x17e>
 8019ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef2:	7f9b      	ldrb	r3, [r3, #30]
 8019ef4:	f003 0307 	and.w	r3, r3, #7
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	2b04      	cmp	r3, #4
 8019efc:	d138      	bne.n	8019f70 <lv_label_design+0x1f0>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8019efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f00:	7f9b      	ldrb	r3, [r3, #30]
 8019f02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019f06:	b2db      	uxtb	r3, r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8019f08:	2b10      	cmp	r3, #16
 8019f0a:	d006      	beq.n	8019f1a <lv_label_design+0x19a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8019f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f0e:	7f9b      	ldrb	r3, [r3, #30]
 8019f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	2b20      	cmp	r3, #32
 8019f18:	d12a      	bne.n	8019f70 <lv_label_design+0x1f0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8019f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f1c:	6819      	ldr	r1, [r3, #0]
 8019f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f24:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 8019f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f2a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019f2e:	f107 001c 	add.w	r0, r7, #28
 8019f32:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8019f36:	9202      	str	r2, [sp, #8]
 8019f38:	f647 4218 	movw	r2, #31768	; 0x7c18
 8019f3c:	9201      	str	r2, [sp, #4]
 8019f3e:	9300      	str	r3, [sp, #0]
 8019f40:	462b      	mov	r3, r5
 8019f42:	4622      	mov	r2, r4
 8019f44:	f7fa f88c 	bl	8014060 <lv_txt_get_size>
                            LV_COORD_MAX, flag);
            if(size.x > lv_obj_get_width(label)) {
 8019f48:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8019f4c:	68f8      	ldr	r0, [r7, #12]
 8019f4e:	f7ed f8af 	bl	80070b0 <lv_obj_get_width>
 8019f52:	4603      	mov	r3, r0
 8019f54:	429c      	cmp	r4, r3
 8019f56:	dd0b      	ble.n	8019f70 <lv_label_design+0x1f0>
                flag &= ~LV_TXT_FLAG_RIGHT;
 8019f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019f5c:	f023 0308 	bic.w	r3, r3, #8
 8019f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                flag &= ~LV_TXT_FLAG_CENTER;
 8019f64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019f68:	f023 0304 	bic.w	r3, r3, #4
 8019f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        lv_draw_label_hint_t * hint = &ext->hint;
 8019f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f72:	3310      	adds	r3, #16
 8019f74:	643b      	str	r3, [r7, #64]	; 0x40
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8019f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f78:	7f9b      	ldrb	r3, [r3, #30]
 8019f7a:	f003 0307 	and.w	r3, r3, #7
 8019f7e:	b2db      	uxtb	r3, r3
 8019f80:	2b04      	cmp	r3, #4
 8019f82:	d006      	beq.n	8019f92 <lv_label_design+0x212>
 8019f84:	68f8      	ldr	r0, [r7, #12]
 8019f86:	f7ed f8a1 	bl	80070cc <lv_obj_get_height>
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f90:	da01      	bge.n	8019f96 <lv_label_design+0x216>
            hint = NULL;
 8019f92:	2300      	movs	r3, #0
 8019f94:	643b      	str	r3, [r7, #64]	; 0x40

        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 8019f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f98:	681c      	ldr	r4, [r3, #0]
 8019f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9c:	f103 050a 	add.w	r5, r3, #10
 8019fa0:	68f8      	ldr	r0, [r7, #12]
 8019fa2:	f7ff fed5 	bl	8019d50 <lv_label_get_text_sel_start>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	461e      	mov	r6, r3
 8019faa:	68f8      	ldr	r0, [r7, #12]
 8019fac:	f7ff fedc 	bl	8019d68 <lv_label_get_text_sel_end>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	4619      	mov	r1, r3
 8019fb4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8019fb8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fbe:	9305      	str	r3, [sp, #20]
 8019fc0:	9104      	str	r1, [sp, #16]
 8019fc2:	9603      	str	r6, [sp, #12]
 8019fc4:	9502      	str	r5, [sp, #8]
 8019fc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019fca:	9301      	str	r3, [sp, #4]
 8019fcc:	9400      	str	r4, [sp, #0]
 8019fce:	4613      	mov	r3, r2
 8019fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019fd2:	68b9      	ldr	r1, [r7, #8]
 8019fd4:	f7f0 fb72 	bl	800a6bc <lv_draw_label>
                      lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), hint);

        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8019fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fda:	7f9b      	ldrb	r3, [r3, #30]
 8019fdc:	f003 0307 	and.w	r3, r3, #7
 8019fe0:	b2db      	uxtb	r3, r3
 8019fe2:	2b04      	cmp	r3, #4
 8019fe4:	f040 809c 	bne.w	801a120 <lv_label_design+0x3a0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8019fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fea:	6819      	ldr	r1, [r3, #0]
 8019fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ff2:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	; 0x28
 8019ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ff8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8019ffc:	f107 0018 	add.w	r0, r7, #24
 801a000:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801a004:	9202      	str	r2, [sp, #8]
 801a006:	f647 4218 	movw	r2, #31768	; 0x7c18
 801a00a:	9201      	str	r2, [sp, #4]
 801a00c:	9300      	str	r3, [sp, #0]
 801a00e:	462b      	mov	r3, r5
 801a010:	4622      	mov	r2, r4
 801a012:	f7fa f825 	bl	8014060 <lv_txt_get_size>
                            LV_COORD_MAX, flag);

            lv_point_t ofs;

            /*Draw the text again next to the original to make an circular effect */
            if(size.x > lv_obj_get_width(label)) {
 801a016:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 801a01a:	68f8      	ldr	r0, [r7, #12]
 801a01c:	f7ed f848 	bl	80070b0 <lv_obj_get_width>
 801a020:	4603      	mov	r3, r0
 801a022:	429c      	cmp	r4, r3
 801a024:	dd3c      	ble.n	801a0a0 <lv_label_design+0x320>
                ofs.x = ext->offset.x + size.x +
 801a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a028:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a032:	b29b      	uxth	r3, r3
 801a034:	4413      	add	r3, r2
 801a036:	b29c      	uxth	r4, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801a038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a03c:	2220      	movs	r2, #32
 801a03e:	2120      	movs	r1, #32
 801a040:	4618      	mov	r0, r3
 801a042:	f7f7 fed9 	bl	8011df8 <lv_font_get_glyph_width>
 801a046:	4603      	mov	r3, r0
                ofs.x = ext->offset.x + size.x +
 801a048:	461a      	mov	r2, r3
 801a04a:	0052      	lsls	r2, r2, #1
 801a04c:	4413      	add	r3, r2
 801a04e:	b29b      	uxth	r3, r3
 801a050:	4423      	add	r3, r4
 801a052:	b29b      	uxth	r3, r3
 801a054:	b21b      	sxth	r3, r3
 801a056:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y;
 801a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a05a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801a05e:	82fb      	strh	r3, [r7, #22]

                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a062:	681c      	ldr	r4, [r3, #0]
 801a064:	68f8      	ldr	r0, [r7, #12]
 801a066:	f7ff fe73 	bl	8019d50 <lv_label_get_text_sel_start>
 801a06a:	4603      	mov	r3, r0
 801a06c:	461d      	mov	r5, r3
 801a06e:	68f8      	ldr	r0, [r7, #12]
 801a070:	f7ff fe7a 	bl	8019d68 <lv_label_get_text_sel_end>
 801a074:	4603      	mov	r3, r0
 801a076:	4619      	mov	r1, r3
 801a078:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801a07c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801a080:	2300      	movs	r3, #0
 801a082:	9305      	str	r3, [sp, #20]
 801a084:	9104      	str	r1, [sp, #16]
 801a086:	9503      	str	r5, [sp, #12]
 801a088:	f107 0314 	add.w	r3, r7, #20
 801a08c:	9302      	str	r3, [sp, #8]
 801a08e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a092:	9301      	str	r3, [sp, #4]
 801a094:	9400      	str	r4, [sp, #0]
 801a096:	4613      	mov	r3, r2
 801a098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a09a:	68b9      	ldr	r1, [r7, #8]
 801a09c:	f7f0 fb0e 	bl	800a6bc <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }

            /*Draw the text again below the original to make an circular effect */
            if(size.y > lv_obj_get_height(label)) {
 801a0a0:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 801a0a4:	68f8      	ldr	r0, [r7, #12]
 801a0a6:	f7ed f811 	bl	80070cc <lv_obj_get_height>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	429c      	cmp	r4, r3
 801a0ae:	dd37      	ble.n	801a120 <lv_label_design+0x3a0>
                ofs.x = ext->offset.x;
 801a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801a0b6:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 801a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a0c4:	b29b      	uxth	r3, r3
 801a0c6:	4413      	add	r3, r2
 801a0c8:	b29c      	uxth	r4, r3
 801a0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7ff f9c4 	bl	801945c <lv_font_get_line_height>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	4423      	add	r3, r4
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	b21b      	sxth	r3, r3
 801a0de:	82fb      	strh	r3, [r7, #22]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e2:	681c      	ldr	r4, [r3, #0]
 801a0e4:	68f8      	ldr	r0, [r7, #12]
 801a0e6:	f7ff fe33 	bl	8019d50 <lv_label_get_text_sel_start>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	461d      	mov	r5, r3
 801a0ee:	68f8      	ldr	r0, [r7, #12]
 801a0f0:	f7ff fe3a 	bl	8019d68 <lv_label_get_text_sel_end>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	4619      	mov	r1, r3
 801a0f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801a0fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801a100:	2300      	movs	r3, #0
 801a102:	9305      	str	r3, [sp, #20]
 801a104:	9104      	str	r1, [sp, #16]
 801a106:	9503      	str	r5, [sp, #12]
 801a108:	f107 0314 	add.w	r3, r7, #20
 801a10c:	9302      	str	r3, [sp, #8]
 801a10e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a112:	9301      	str	r3, [sp, #4]
 801a114:	9400      	str	r4, [sp, #0]
 801a116:	4613      	mov	r3, r2
 801a118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a11a:	68b9      	ldr	r1, [r7, #8]
 801a11c:	f7f0 face 	bl	800a6bc <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }
        }
    }
    return true;
 801a120:	2301      	movs	r3, #1
}
 801a122:	4618      	mov	r0, r3
 801a124:	374c      	adds	r7, #76	; 0x4c
 801a126:	46bd      	mov	sp, r7
 801a128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a12c <lv_label_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)
{
 801a12c:	b590      	push	{r4, r7, lr}
 801a12e:	b089      	sub	sp, #36	; 0x24
 801a130:	af00      	add	r7, sp, #0
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	460b      	mov	r3, r1
 801a136:	607a      	str	r2, [r7, #4]
 801a138:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(label, sign, param);
 801a13a:	4b5a      	ldr	r3, [pc, #360]	; (801a2a4 <lv_label_signal+0x178>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	7af9      	ldrb	r1, [r7, #11]
 801a140:	687a      	ldr	r2, [r7, #4]
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	4798      	blx	r3
 801a146:	4603      	mov	r3, r0
 801a148:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801a14a:	7fbb      	ldrb	r3, [r7, #30]
 801a14c:	2b01      	cmp	r3, #1
 801a14e:	d001      	beq.n	801a154 <lv_label_signal+0x28>
 801a150:	7fbb      	ldrb	r3, [r7, #30]
 801a152:	e0a3      	b.n	801a29c <lv_label_signal+0x170>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	f7ed f896 	bl	8007286 <lv_obj_get_ext_attr>
 801a15a:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 801a15c:	7afb      	ldrb	r3, [r7, #11]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d112      	bne.n	801a188 <lv_label_signal+0x5c>
        if(ext->static_txt == 0) {
 801a162:	69bb      	ldr	r3, [r7, #24]
 801a164:	7f9b      	ldrb	r3, [r3, #30]
 801a166:	f003 0308 	and.w	r3, r3, #8
 801a16a:	b2db      	uxtb	r3, r3
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d107      	bne.n	801a180 <lv_label_signal+0x54>
            lv_mem_free(ext->text);
 801a170:	69bb      	ldr	r3, [r7, #24]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	4618      	mov	r0, r3
 801a176:	f7f9 fc67 	bl	8013a48 <lv_mem_free>
            ext->text = NULL;
 801a17a:	69bb      	ldr	r3, [r7, #24]
 801a17c:	2200      	movs	r2, #0
 801a17e:	601a      	str	r2, [r3, #0]
        }
        lv_label_dot_tmp_free(label);
 801a180:	68f8      	ldr	r0, [r7, #12]
 801a182:	f000 fc16 	bl	801a9b2 <lv_label_dot_tmp_free>
 801a186:	e088      	b.n	801a29a <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801a188:	7afb      	ldrb	r3, [r7, #11]
 801a18a:	2b04      	cmp	r3, #4
 801a18c:	d106      	bne.n	801a19c <lv_label_signal+0x70>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(label);
 801a18e:	68f8      	ldr	r0, [r7, #12]
 801a190:	f000 fb32 	bl	801a7f8 <lv_label_revert_dots>

        lv_label_refr_text(label);
 801a194:	68f8      	ldr	r0, [r7, #12]
 801a196:	f000 f889 	bl	801a2ac <lv_label_refr_text>
 801a19a:	e07e      	b.n	801a29a <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801a19c:	7afb      	ldrb	r3, [r7, #11]
 801a19e:	2b02      	cmp	r3, #2
 801a1a0:	d120      	bne.n	801a1e4 <lv_label_signal+0xb8>
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	3310      	adds	r3, #16
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f7ff f964 	bl	8019474 <lv_area_get_width>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	461c      	mov	r4, r3
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f7ff f95f 	bl	8019474 <lv_area_get_width>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	429c      	cmp	r4, r3
 801a1ba:	d10c      	bne.n	801a1d6 <lv_label_signal+0xaa>
           lv_area_get_height(&label->coords) != lv_area_get_height(param)) {
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	3310      	adds	r3, #16
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7ff f96e 	bl	80194a2 <lv_area_get_height>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	461c      	mov	r4, r3
 801a1ca:	6878      	ldr	r0, [r7, #4]
 801a1cc:	f7ff f969 	bl	80194a2 <lv_area_get_height>
 801a1d0:	4603      	mov	r3, r0
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801a1d2:	429c      	cmp	r4, r3
 801a1d4:	d061      	beq.n	801a29a <lv_label_signal+0x16e>
            lv_label_revert_dots(label);
 801a1d6:	68f8      	ldr	r0, [r7, #12]
 801a1d8:	f000 fb0e 	bl	801a7f8 <lv_label_revert_dots>
            lv_label_refr_text(label);
 801a1dc:	68f8      	ldr	r0, [r7, #12]
 801a1de:	f000 f865 	bl	801a2ac <lv_label_refr_text>
 801a1e2:	e05a      	b.n	801a29a <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801a1e4:	7afb      	ldrb	r3, [r7, #11]
 801a1e6:	2b05      	cmp	r3, #5
 801a1e8:	d13c      	bne.n	801a264 <lv_label_signal+0x138>
        if(ext->body_draw) {
 801a1ea:	69bb      	ldr	r3, [r7, #24]
 801a1ec:	7fdb      	ldrb	r3, [r3, #31]
 801a1ee:	f003 0301 	and.w	r3, r3, #1
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d050      	beq.n	801a29a <lv_label_signal+0x16e>
            const lv_style_t * style = lv_label_get_style(label, LV_LABEL_STYLE_MAIN);
 801a1f8:	2100      	movs	r1, #0
 801a1fa:	68f8      	ldr	r0, [r7, #12]
 801a1fc:	f7ff f977 	bl	80194ee <lv_label_get_style>
 801a200:	6138      	str	r0, [r7, #16]

            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.left);
 801a202:	693b      	ldr	r3, [r7, #16]
 801a204:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a20e:	4293      	cmp	r3, r2
 801a210:	bfb8      	it	lt
 801a212:	4613      	movlt	r3, r2
 801a214:	b21a      	sxth	r2, r3
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 801a21a:	693b      	ldr	r3, [r7, #16]
 801a21c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a226:	4293      	cmp	r3, r2
 801a228:	bfb8      	it	lt
 801a22a:	4613      	movlt	r3, r2
 801a22c:	b21a      	sxth	r2, r3
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 801a232:	693b      	ldr	r3, [r7, #16]
 801a234:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a23e:	4293      	cmp	r3, r2
 801a240:	bfb8      	it	lt
 801a242:	4613      	movlt	r3, r2
 801a244:	b21a      	sxth	r2, r3
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	869a      	strh	r2, [r3, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 801a24a:	693b      	ldr	r3, [r7, #16]
 801a24c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801a256:	4293      	cmp	r3, r2
 801a258:	bfb8      	it	lt
 801a25a:	4613      	movlt	r3, r2
 801a25c:	b21a      	sxth	r2, r3
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	869a      	strh	r2, [r3, #52]	; 0x34
 801a262:	e01a      	b.n	801a29a <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801a264:	7afb      	ldrb	r3, [r7, #11]
 801a266:	2b06      	cmp	r3, #6
 801a268:	d117      	bne.n	801a29a <lv_label_signal+0x16e>
        lv_obj_type_t * buf = param;
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a26e:	2300      	movs	r3, #0
 801a270:	77fb      	strb	r3, [r7, #31]
 801a272:	e008      	b.n	801a286 <lv_label_signal+0x15a>
            if(buf->type[i] == NULL) break;
 801a274:	7ffa      	ldrb	r2, [r7, #31]
 801a276:	697b      	ldr	r3, [r7, #20]
 801a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d006      	beq.n	801a28e <lv_label_signal+0x162>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801a280:	7ffb      	ldrb	r3, [r7, #31]
 801a282:	3301      	adds	r3, #1
 801a284:	77fb      	strb	r3, [r7, #31]
 801a286:	7ffb      	ldrb	r3, [r7, #31]
 801a288:	2b06      	cmp	r3, #6
 801a28a:	d9f3      	bls.n	801a274 <lv_label_signal+0x148>
 801a28c:	e000      	b.n	801a290 <lv_label_signal+0x164>
            if(buf->type[i] == NULL) break;
 801a28e:	bf00      	nop
        }
        buf->type[i] = "lv_label";
 801a290:	7ffa      	ldrb	r2, [r7, #31]
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	4904      	ldr	r1, [pc, #16]	; (801a2a8 <lv_label_signal+0x17c>)
 801a296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801a29a:	7fbb      	ldrb	r3, [r7, #30]
}
 801a29c:	4618      	mov	r0, r3
 801a29e:	3724      	adds	r7, #36	; 0x24
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	bd90      	pop	{r4, r7, pc}
 801a2a4:	20002acc 	.word	0x20002acc
 801a2a8:	08029d68 	.word	0x08029d68

0801a2ac <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * label)
{
 801a2ac:	b590      	push	{r4, r7, lr}
 801a2ae:	b09d      	sub	sp, #116	; 0x74
 801a2b0:	af04      	add	r7, sp, #16
 801a2b2:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	f7ec ffe6 	bl	8007286 <lv_obj_get_ext_attr>
 801a2ba:	64f8      	str	r0, [r7, #76]	; 0x4c

    if(ext->text == NULL) return;
 801a2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f000 828f 	beq.w	801a7e4 <lv_label_refr_text+0x538>

    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801a2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2cc:	611a      	str	r2, [r3, #16]

    lv_coord_t max_w         = lv_obj_get_width(label);
 801a2ce:	6878      	ldr	r0, [r7, #4]
 801a2d0:	f7ec feee 	bl	80070b0 <lv_obj_get_width>
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    const lv_style_t * style = lv_obj_get_style(label);
 801a2da:	6878      	ldr	r0, [r7, #4]
 801a2dc:	f7ec ff18 	bl	8007110 <lv_obj_get_style>
 801a2e0:	64b8      	str	r0, [r7, #72]	; 0x48
    const lv_font_t * font   = style->text.font;
 801a2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e6:	647b      	str	r3, [r7, #68]	; 0x44

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2ea:	7f9b      	ldrb	r3, [r3, #30]
 801a2ec:	f003 0307 	and.w	r3, r3, #7
 801a2f0:	b2db      	uxtb	r3, r3
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d103      	bne.n	801a2fe <lv_label_refr_text+0x52>
        max_w = LV_COORD_MAX;
 801a2f6:	f647 4318 	movw	r3, #31768	; 0x7c18
 801a2fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    }

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801a2fe:	2300      	movs	r3, #0
 801a300:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801a304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a306:	7f9b      	ldrb	r3, [r3, #30]
 801a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a30c:	b2db      	uxtb	r3, r3
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d005      	beq.n	801a31e <lv_label_refr_text+0x72>
 801a312:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801a316:	f043 0301 	orr.w	r3, r3, #1
 801a31a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801a31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a320:	7f9b      	ldrb	r3, [r3, #30]
 801a322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a326:	b2db      	uxtb	r3, r3
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d005      	beq.n	801a338 <lv_label_refr_text+0x8c>
 801a32c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801a330:	f043 0302 	orr.w	r3, r3, #2
 801a334:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 801a338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a33a:	6819      	ldr	r1, [r3, #0]
 801a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a33e:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 801a342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a344:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a348:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801a34c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 801a350:	9202      	str	r2, [sp, #8]
 801a352:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 801a356:	9201      	str	r2, [sp, #4]
 801a358:	9300      	str	r3, [sp, #0]
 801a35a:	4623      	mov	r3, r4
 801a35c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a35e:	f7f9 fe7f 	bl	8014060 <lv_txt_get_size>

    /*Set the full size in expand mode*/
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801a362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a364:	7f9b      	ldrb	r3, [r3, #30]
 801a366:	f003 0307 	and.w	r3, r3, #7
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d108      	bne.n	801a382 <lv_label_refr_text+0xd6>
        lv_obj_set_size(label, size.x, size.y);
 801a370:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a374:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801a378:	4619      	mov	r1, r3
 801a37a:	6878      	ldr	r0, [r7, #4]
 801a37c:	f7eb ff0b 	bl	8006196 <lv_obj_set_size>
 801a380:	e22c      	b.n	801a7dc <lv_label_refr_text+0x530>
    }
    /*In roll mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a384:	7f9b      	ldrb	r3, [r3, #30]
 801a386:	f003 0307 	and.w	r3, r3, #7
 801a38a:	b2db      	uxtb	r3, r3
 801a38c:	2b03      	cmp	r3, #3
 801a38e:	f040 809f 	bne.w	801a4d0 <lv_label_refr_text+0x224>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801a396:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a39a:	f043 0302 	orr.w	r3, r3, #2
 801a39e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 1;
 801a3a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a3a6:	f043 0301 	orr.w	r3, r3, #1
 801a3aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	61bb      	str	r3, [r7, #24]
        anim.ready_cb = NULL;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	617b      	str	r3, [r7, #20]
        anim.path_cb  = lv_anim_path_linear;
 801a3b6:	4baa      	ldr	r3, [pc, #680]	; (801a660 <lv_label_refr_text+0x3b4>)
 801a3b8:	613b      	str	r3, [r7, #16]
        anim.playback_pause =
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3be:	2220      	movs	r2, #32
 801a3c0:	2120      	movs	r1, #32
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	f7f7 fd18 	bl	8011df8 <lv_font_get_glyph_width>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3ce:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a3d2:	4413      	add	r3, r2
 801a3d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a3d8:	fb02 f303 	mul.w	r3, r2, r3
             ext->anim_speed) *
 801a3dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a3de:	8b92      	ldrh	r2, [r2, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a3e0:	fb93 f3f2 	sdiv	r3, r3, r2
        anim.playback_pause =
 801a3e4:	b29b      	uxth	r3, r3
 801a3e6:	461a      	mov	r2, r3
 801a3e8:	0052      	lsls	r2, r2, #1
 801a3ea:	4413      	add	r3, r2
 801a3ec:	b29b      	uxth	r3, r3
 801a3ee:	84bb      	strh	r3, [r7, #36]	; 0x24
            LV_LABEL_WAIT_CHAR_COUNT;
        anim.repeat_pause = anim.playback_pause;
 801a3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a3f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        anim.act_time     = -anim.playback_pause;
 801a3f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a3f6:	425b      	negs	r3, r3
 801a3f8:	b29b      	uxth	r3, r3
 801a3fa:	b21b      	sxth	r3, r3
 801a3fc:	847b      	strh	r3, [r7, #34]	; 0x22

        bool hor_anim = false;
 801a3fe:	2300      	movs	r3, #0
 801a400:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if(size.x > lv_obj_get_width(label)) {
 801a404:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801a408:	6878      	ldr	r0, [r7, #4]
 801a40a:	f7ec fe51 	bl	80070b0 <lv_obj_get_width>
 801a40e:	4603      	mov	r3, r0
 801a410:	429c      	cmp	r4, r3
 801a412:	dd1e      	ble.n	801a452 <lv_label_refr_text+0x1a6>
            anim.end     = lv_obj_get_width(label) - size.x;
 801a414:	6878      	ldr	r0, [r7, #4]
 801a416:	f7ec fe4b 	bl	80070b0 <lv_obj_get_width>
 801a41a:	4603      	mov	r3, r0
 801a41c:	461a      	mov	r2, r3
 801a41e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a422:	1ad3      	subs	r3, r2, r3
 801a424:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801a426:	4b8f      	ldr	r3, [pc, #572]	; (801a664 <lv_label_refr_text+0x3b8>)
 801a428:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a42c:	8b9b      	ldrh	r3, [r3, #28]
 801a42e:	69ba      	ldr	r2, [r7, #24]
 801a430:	b211      	sxth	r1, r2
 801a432:	69fa      	ldr	r2, [r7, #28]
 801a434:	b212      	sxth	r2, r2
 801a436:	4618      	mov	r0, r3
 801a438:	f7f8 fa68 	bl	801290c <lv_anim_speed_to_time>
 801a43c:	4603      	mov	r3, r0
 801a43e:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a440:	f107 0308 	add.w	r3, r7, #8
 801a444:	4618      	mov	r0, r3
 801a446:	f7f8 f9e9 	bl	801281c <lv_anim_create>
            hor_anim = true;
 801a44a:	2301      	movs	r3, #1
 801a44c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801a450:	e006      	b.n	801a460 <lv_label_refr_text+0x1b4>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801a452:	4984      	ldr	r1, [pc, #528]	; (801a664 <lv_label_refr_text+0x3b8>)
 801a454:	6878      	ldr	r0, [r7, #4]
 801a456:	f7f8 fa21 	bl	801289c <lv_anim_del>
            ext->offset.x = 0;
 801a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a45c:	2200      	movs	r2, #0
 801a45e:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801a460:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a464:	6878      	ldr	r0, [r7, #4]
 801a466:	f7ec fe31 	bl	80070cc <lv_obj_get_height>
 801a46a:	4603      	mov	r3, r0
 801a46c:	429c      	cmp	r4, r3
 801a46e:	dd27      	ble.n	801a4c0 <lv_label_refr_text+0x214>
 801a470:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801a474:	f083 0301 	eor.w	r3, r3, #1
 801a478:	b2db      	uxtb	r3, r3
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d020      	beq.n	801a4c0 <lv_label_refr_text+0x214>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 801a47e:	6878      	ldr	r0, [r7, #4]
 801a480:	f7ec fe24 	bl	80070cc <lv_obj_get_height>
 801a484:	4603      	mov	r3, r0
 801a486:	461a      	mov	r2, r3
 801a488:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a48c:	1ad4      	subs	r4, r2, r3
 801a48e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a490:	f7fe ffe4 	bl	801945c <lv_font_get_line_height>
 801a494:	4603      	mov	r3, r0
 801a496:	1ae3      	subs	r3, r4, r3
 801a498:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801a49a:	4b73      	ldr	r3, [pc, #460]	; (801a668 <lv_label_refr_text+0x3bc>)
 801a49c:	60fb      	str	r3, [r7, #12]

            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4a0:	8b9b      	ldrh	r3, [r3, #28]
 801a4a2:	69ba      	ldr	r2, [r7, #24]
 801a4a4:	b211      	sxth	r1, r2
 801a4a6:	69fa      	ldr	r2, [r7, #28]
 801a4a8:	b212      	sxth	r2, r2
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f7f8 fa2e 	bl	801290c <lv_anim_speed_to_time>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a4b4:	f107 0308 	add.w	r3, r7, #8
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f7f8 f9af 	bl	801281c <lv_anim_create>
 801a4be:	e18d      	b.n	801a7dc <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801a4c0:	4969      	ldr	r1, [pc, #420]	; (801a668 <lv_label_refr_text+0x3bc>)
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f7f8 f9ea 	bl	801289c <lv_anim_del>
            ext->offset.y = 0;
 801a4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	819a      	strh	r2, [r3, #12]
 801a4ce:	e185      	b.n	801a7dc <lv_label_refr_text+0x530>
        }
#endif
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801a4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4d2:	7f9b      	ldrb	r3, [r3, #30]
 801a4d4:	f003 0307 	and.w	r3, r3, #7
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	2b04      	cmp	r3, #4
 801a4dc:	f040 809c 	bne.w	801a618 <lv_label_refr_text+0x36c>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801a4e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4e8:	f043 0302 	orr.w	r3, r3, #2
 801a4ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.playback = 0;
 801a4f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4f4:	f36f 0300 	bfc	r3, #0, #1
 801a4f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        anim.start    = 0;
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	61bb      	str	r3, [r7, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a504:	2220      	movs	r2, #32
 801a506:	2120      	movs	r1, #32
 801a508:	4618      	mov	r0, r3
 801a50a:	f7f7 fc75 	bl	8011df8 <lv_font_get_glyph_width>
 801a50e:	4603      	mov	r3, r0
 801a510:	461a      	mov	r2, r3
 801a512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a514:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a518:	4413      	add	r3, r2
 801a51a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a51e:	fb02 f303 	mul.w	r3, r2, r3
                          ext->anim_speed) *
 801a522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a524:	8b92      	ldrh	r2, [r2, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801a526:	fb93 f3f2 	sdiv	r3, r3, r2
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	461a      	mov	r2, r3
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	1ad3      	subs	r3, r2, r3
 801a532:	b29b      	uxth	r3, r3
 801a534:	b21b      	sxth	r3, r3
 801a536:	847b      	strh	r3, [r7, #34]	; 0x22
                        LV_LABEL_WAIT_CHAR_COUNT;
        anim.ready_cb       = NULL;
 801a538:	2300      	movs	r3, #0
 801a53a:	617b      	str	r3, [r7, #20]
        anim.path_cb        = lv_anim_path_linear;
 801a53c:	4b48      	ldr	r3, [pc, #288]	; (801a660 <lv_label_refr_text+0x3b4>)
 801a53e:	613b      	str	r3, [r7, #16]
        anim.playback_pause = 0;
 801a540:	2300      	movs	r3, #0
 801a542:	84bb      	strh	r3, [r7, #36]	; 0x24
        anim.repeat_pause   = 0;
 801a544:	2300      	movs	r3, #0
 801a546:	84fb      	strh	r3, [r7, #38]	; 0x26

        bool hor_anim = false;
 801a548:	2300      	movs	r3, #0
 801a54a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if(size.x > lv_obj_get_width(label)) {
 801a54e:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	; 0x38
 801a552:	6878      	ldr	r0, [r7, #4]
 801a554:	f7ec fdac 	bl	80070b0 <lv_obj_get_width>
 801a558:	4603      	mov	r3, r0
 801a55a:	429c      	cmp	r4, r3
 801a55c:	dd22      	ble.n	801a5a4 <lv_label_refr_text+0x2f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801a55e:	2220      	movs	r2, #32
 801a560:	2120      	movs	r1, #32
 801a562:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a564:	f7f7 fc48 	bl	8011df8 <lv_font_get_glyph_width>
 801a568:	4603      	mov	r3, r0
 801a56a:	461a      	mov	r2, r3
 801a56c:	009b      	lsls	r3, r3, #2
 801a56e:	1ad3      	subs	r3, r2, r3
 801a570:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801a574:	1a9b      	subs	r3, r3, r2
 801a576:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801a578:	4b3a      	ldr	r3, [pc, #232]	; (801a664 <lv_label_refr_text+0x3b8>)
 801a57a:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a57e:	8b9b      	ldrh	r3, [r3, #28]
 801a580:	69ba      	ldr	r2, [r7, #24]
 801a582:	b211      	sxth	r1, r2
 801a584:	69fa      	ldr	r2, [r7, #28]
 801a586:	b212      	sxth	r2, r2
 801a588:	4618      	mov	r0, r3
 801a58a:	f7f8 f9bf 	bl	801290c <lv_anim_speed_to_time>
 801a58e:	4603      	mov	r3, r0
 801a590:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a592:	f107 0308 	add.w	r3, r7, #8
 801a596:	4618      	mov	r0, r3
 801a598:	f7f8 f940 	bl	801281c <lv_anim_create>
            hor_anim = true;
 801a59c:	2301      	movs	r3, #1
 801a59e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801a5a2:	e006      	b.n	801a5b2 <lv_label_refr_text+0x306>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801a5a4:	492f      	ldr	r1, [pc, #188]	; (801a664 <lv_label_refr_text+0x3b8>)
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f7f8 f978 	bl	801289c <lv_anim_del>
            ext->offset.x = 0;
 801a5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 801a5b2:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a5b6:	6878      	ldr	r0, [r7, #4]
 801a5b8:	f7ec fd88 	bl	80070cc <lv_obj_get_height>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	429c      	cmp	r4, r3
 801a5c0:	dd22      	ble.n	801a608 <lv_label_refr_text+0x35c>
 801a5c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801a5c6:	f083 0301 	eor.w	r3, r3, #1
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d01b      	beq.n	801a608 <lv_label_refr_text+0x35c>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 801a5d0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a5d4:	425c      	negs	r4, r3
 801a5d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a5d8:	f7fe ff40 	bl	801945c <lv_font_get_line_height>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	1ae3      	subs	r3, r4, r3
 801a5e0:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801a5e2:	4b21      	ldr	r3, [pc, #132]	; (801a668 <lv_label_refr_text+0x3bc>)
 801a5e4:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801a5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5e8:	8b9b      	ldrh	r3, [r3, #28]
 801a5ea:	69ba      	ldr	r2, [r7, #24]
 801a5ec:	b211      	sxth	r1, r2
 801a5ee:	69fa      	ldr	r2, [r7, #28]
 801a5f0:	b212      	sxth	r2, r2
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7f8 f98a 	bl	801290c <lv_anim_speed_to_time>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 801a5fc:	f107 0308 	add.w	r3, r7, #8
 801a600:	4618      	mov	r0, r3
 801a602:	f7f8 f90b 	bl	801281c <lv_anim_create>
 801a606:	e0e9      	b.n	801a7dc <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801a608:	4917      	ldr	r1, [pc, #92]	; (801a668 <lv_label_refr_text+0x3bc>)
 801a60a:	6878      	ldr	r0, [r7, #4]
 801a60c:	f7f8 f946 	bl	801289c <lv_anim_del>
            ext->offset.y = 0;
 801a610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a612:	2200      	movs	r2, #0
 801a614:	819a      	strh	r2, [r3, #12]
 801a616:	e0e1      	b.n	801a7dc <lv_label_refr_text+0x530>
        }
#endif
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801a618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a61a:	7f9b      	ldrb	r3, [r3, #30]
 801a61c:	f003 0307 	and.w	r3, r3, #7
 801a620:	b2db      	uxtb	r3, r3
 801a622:	2b02      	cmp	r3, #2
 801a624:	f040 80cd 	bne.w	801a7c2 <lv_label_refr_text+0x516>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 801a628:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	; 0x3a
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f7ec fd4d 	bl	80070cc <lv_obj_get_height>
 801a632:	4603      	mov	r3, r0
 801a634:	429c      	cmp	r4, r3
 801a636:	dc04      	bgt.n	801a642 <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801a638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a63a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a63e:	811a      	strh	r2, [r3, #8]
 801a640:	e0cc      	b.n	801a7dc <lv_label_refr_text+0x530>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 801a642:	4b0a      	ldr	r3, [pc, #40]	; (801a66c <lv_label_refr_text+0x3c0>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a648:	6812      	ldr	r2, [r2, #0]
 801a64a:	4610      	mov	r0, r2
 801a64c:	4798      	blx	r3
 801a64e:	4603      	mov	r3, r0
 801a650:	2b03      	cmp	r3, #3
 801a652:	d80d      	bhi.n	801a670 <lv_label_refr_text+0x3c4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801a654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a65a:	811a      	strh	r2, [r3, #8]
 801a65c:	e0be      	b.n	801a7dc <lv_label_refr_text+0x530>
 801a65e:	bf00      	nop
 801a660:	0801296d 	.word	0x0801296d
 801a664:	0801a8ad 	.word	0x0801a8ad
 801a668:	0801a8d5 	.word	0x0801a8d5
 801a66c:	200027ac 	.word	0x200027ac
        } else {
            lv_point_t p;
            p.x = lv_obj_get_width(label) -
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	f7ec fd1d 	bl	80070b0 <lv_obj_get_width>
 801a676:	4603      	mov	r3, r0
 801a678:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 801a67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a67e:	222e      	movs	r2, #46	; 0x2e
 801a680:	212e      	movs	r1, #46	; 0x2e
 801a682:	4618      	mov	r0, r3
 801a684:	f7f7 fbb8 	bl	8011df8 <lv_font_get_glyph_width>
 801a688:	4603      	mov	r3, r0
 801a68a:	461a      	mov	r2, r3
 801a68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a68e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a692:	4413      	add	r3, r2
            p.x = lv_obj_get_width(label) -
 801a694:	b29b      	uxth	r3, r3
 801a696:	461a      	mov	r2, r3
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	1ad3      	subs	r3, r2, r3
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	4423      	add	r3, r4
 801a6a0:	b29b      	uxth	r3, r3
 801a6a2:	b21b      	sxth	r3, r3
 801a6a4:	86bb      	strh	r3, [r7, #52]	; 0x34
                      LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_obj_get_height(label);
 801a6a6:	6878      	ldr	r0, [r7, #4]
 801a6a8:	f7ec fd10 	bl	80070cc <lv_obj_get_height>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= p.y %
 801a6b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a6b4:	461c      	mov	r4, r3
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 801a6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7fe fece 	bl	801945c <lv_font_get_line_height>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	461a      	mov	r2, r3
 801a6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6c6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a6ca:	4413      	add	r3, r2
            p.y -= p.y %
 801a6cc:	fb94 f2f3 	sdiv	r2, r4, r3
 801a6d0:	fb03 f302 	mul.w	r3, r3, r2
 801a6d4:	1ae3      	subs	r3, r4, r3
 801a6d6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801a6da:	b292      	uxth	r2, r2
 801a6dc:	b29b      	uxth	r3, r3
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	b29b      	uxth	r3, r3
 801a6e2:	b21b      	sxth	r3, r3
 801a6e4:	86fb      	strh	r3, [r7, #54]	; 0x36
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 801a6e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a6ea:	b29a      	uxth	r2, r3
 801a6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6ee:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	1ad3      	subs	r3, r2, r3
 801a6f6:	b29b      	uxth	r3, r3
 801a6f8:	b21b      	sxth	r3, r3
 801a6fa:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801a6fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a700:	4619      	mov	r1, r3
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f7ff fa00 	bl	8019b08 <lv_label_get_letter_on>
 801a708:	4603      	mov	r3, r0
 801a70a:	643b      	str	r3, [r7, #64]	; 0x40

            /*Save letters under the dots and replace them with dots*/
            uint32_t i;
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801a70c:	4b37      	ldr	r3, [pc, #220]	; (801a7ec <lv_label_refr_text+0x540>)
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a712:	6812      	ldr	r2, [r2, #0]
 801a714:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a716:	4610      	mov	r0, r2
 801a718:	4798      	blx	r3
 801a71a:	4603      	mov	r3, r0
 801a71c:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t byte_id_ori = byte_id;
 801a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a720:	63fb      	str	r3, [r7, #60]	; 0x3c
            uint8_t len          = 0;
 801a722:	2300      	movs	r3, #0
 801a724:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801a728:	2300      	movs	r3, #0
 801a72a:	657b      	str	r3, [r7, #84]	; 0x54
 801a72c:	e019      	b.n	801a762 <lv_label_refr_text+0x4b6>
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801a72e:	4b30      	ldr	r3, [pc, #192]	; (801a7f0 <lv_label_refr_text+0x544>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a734:	6811      	ldr	r1, [r2, #0]
 801a736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a738:	440a      	add	r2, r1
 801a73a:	4610      	mov	r0, r2
 801a73c:	4798      	blx	r3
 801a73e:	4603      	mov	r3, r0
 801a740:	461a      	mov	r2, r3
 801a742:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801a746:	4413      	add	r3, r2
 801a748:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                lv_txt_encoded_next(ext->text, &byte_id);
 801a74c:	4b29      	ldr	r3, [pc, #164]	; (801a7f4 <lv_label_refr_text+0x548>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a752:	6812      	ldr	r2, [r2, #0]
 801a754:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a758:	4610      	mov	r0, r2
 801a75a:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801a75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a75e:	3301      	adds	r3, #1
 801a760:	657b      	str	r3, [r7, #84]	; 0x54
 801a762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a764:	2b03      	cmp	r3, #3
 801a766:	d9e2      	bls.n	801a72e <lv_label_refr_text+0x482>
            }

            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 801a768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a76e:	4413      	add	r3, r2
 801a770:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801a774:	b292      	uxth	r2, r2
 801a776:	4619      	mov	r1, r3
 801a778:	6878      	ldr	r0, [r7, #4]
 801a77a:	f000 f8bf 	bl	801a8fc <lv_label_set_dot_tmp>
 801a77e:	4603      	mov	r3, r0
 801a780:	2b00      	cmp	r3, #0
 801a782:	d02b      	beq.n	801a7dc <lv_label_refr_text+0x530>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801a784:	2300      	movs	r3, #0
 801a786:	657b      	str	r3, [r7, #84]	; 0x54
 801a788:	e00a      	b.n	801a7a0 <lv_label_refr_text+0x4f4>
                    ext->text[byte_id_ori + i] = '.';
 801a78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a78c:	681a      	ldr	r2, [r3, #0]
 801a78e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a792:	440b      	add	r3, r1
 801a794:	4413      	add	r3, r2
 801a796:	222e      	movs	r2, #46	; 0x2e
 801a798:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 801a79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a79c:	3301      	adds	r3, #1
 801a79e:	657b      	str	r3, [r7, #84]	; 0x54
 801a7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7a2:	2b02      	cmp	r3, #2
 801a7a4:	d9f1      	bls.n	801a78a <lv_label_refr_text+0x4de>
                }
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801a7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7a8:	681a      	ldr	r2, [r3, #0]
 801a7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7ac:	3303      	adds	r3, #3
 801a7ae:	4413      	add	r3, r2
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	701a      	strb	r2, [r3, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801a7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	3303      	adds	r3, #3
 801a7ba:	b29a      	uxth	r2, r3
 801a7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7be:	811a      	strh	r2, [r3, #8]
 801a7c0:	e00c      	b.n	801a7dc <lv_label_refr_text+0x530>
            }
        }
    }
    /*In break mode only the height can change*/
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 801a7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7c4:	7f9b      	ldrb	r3, [r3, #30]
 801a7c6:	f003 0307 	and.w	r3, r3, #7
 801a7ca:	b2db      	uxtb	r3, r3
 801a7cc:	2b01      	cmp	r3, #1
 801a7ce:	d105      	bne.n	801a7dc <lv_label_refr_text+0x530>
        lv_obj_set_height(label, size.y);
 801a7d0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f7eb fd6b 	bl	80062b2 <lv_obj_set_height>
    /*Do not set the size in Clip mode*/
    else if(ext->long_mode == LV_LABEL_LONG_CROP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(label);
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f7eb fb26 	bl	8005e2e <lv_obj_invalidate>
 801a7e2:	e000      	b.n	801a7e6 <lv_label_refr_text+0x53a>
    if(ext->text == NULL) return;
 801a7e4:	bf00      	nop
}
 801a7e6:	3764      	adds	r7, #100	; 0x64
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd90      	pop	{r4, r7, pc}
 801a7ec:	200027a4 	.word	0x200027a4
 801a7f0:	20002798 	.word	0x20002798
 801a7f4:	2000279c 	.word	0x2000279c

0801a7f8 <lv_label_revert_dots>:

static void lv_label_revert_dots(lv_obj_t * label)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b088      	sub	sp, #32
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	f7ec fd40 	bl	8007286 <lv_obj_get_ext_attr>
 801a806:	61b8      	str	r0, [r7, #24]
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801a808:	69bb      	ldr	r3, [r7, #24]
 801a80a:	7f9b      	ldrb	r3, [r3, #30]
 801a80c:	f003 0307 	and.w	r3, r3, #7
 801a810:	b2db      	uxtb	r3, r3
 801a812:	2b02      	cmp	r3, #2
 801a814:	d142      	bne.n	801a89c <lv_label_revert_dots+0xa4>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801a816:	69bb      	ldr	r3, [r7, #24]
 801a818:	891b      	ldrh	r3, [r3, #8]
 801a81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a81e:	4293      	cmp	r3, r2
 801a820:	d03e      	beq.n	801a8a0 <lv_label_revert_dots+0xa8>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 801a822:	69bb      	ldr	r3, [r7, #24]
 801a824:	891b      	ldrh	r3, [r3, #8]
 801a826:	3b03      	subs	r3, #3
 801a828:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801a82a:	4b1f      	ldr	r3, [pc, #124]	; (801a8a8 <lv_label_revert_dots+0xb0>)
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	69ba      	ldr	r2, [r7, #24]
 801a830:	6812      	ldr	r2, [r2, #0]
 801a832:	6979      	ldr	r1, [r7, #20]
 801a834:	4610      	mov	r0, r2
 801a836:	4798      	blx	r3
 801a838:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 801a83a:	2300      	movs	r3, #0
 801a83c:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(label);
 801a83e:	6878      	ldr	r0, [r7, #4]
 801a840:	f000 f89f 	bl	801a982 <lv_label_get_dot_tmp>
 801a844:	60f8      	str	r0, [r7, #12]
    while(ext->text[byte_i + i] != '\0') {
 801a846:	e00d      	b.n	801a864 <lv_label_revert_dots+0x6c>
        ext->text[byte_i + i] = dot_tmp[i];
 801a848:	7ffb      	ldrb	r3, [r7, #31]
 801a84a:	68fa      	ldr	r2, [r7, #12]
 801a84c:	441a      	add	r2, r3
 801a84e:	69bb      	ldr	r3, [r7, #24]
 801a850:	6819      	ldr	r1, [r3, #0]
 801a852:	7ff8      	ldrb	r0, [r7, #31]
 801a854:	693b      	ldr	r3, [r7, #16]
 801a856:	4403      	add	r3, r0
 801a858:	440b      	add	r3, r1
 801a85a:	7812      	ldrb	r2, [r2, #0]
 801a85c:	701a      	strb	r2, [r3, #0]
        i++;
 801a85e:	7ffb      	ldrb	r3, [r7, #31]
 801a860:	3301      	adds	r3, #1
 801a862:	77fb      	strb	r3, [r7, #31]
    while(ext->text[byte_i + i] != '\0') {
 801a864:	69bb      	ldr	r3, [r7, #24]
 801a866:	681a      	ldr	r2, [r3, #0]
 801a868:	7ff9      	ldrb	r1, [r7, #31]
 801a86a:	693b      	ldr	r3, [r7, #16]
 801a86c:	440b      	add	r3, r1
 801a86e:	4413      	add	r3, r2
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d1e8      	bne.n	801a848 <lv_label_revert_dots+0x50>
    }
    ext->text[byte_i + i] = dot_tmp[i];
 801a876:	7ffb      	ldrb	r3, [r7, #31]
 801a878:	68fa      	ldr	r2, [r7, #12]
 801a87a:	441a      	add	r2, r3
 801a87c:	69bb      	ldr	r3, [r7, #24]
 801a87e:	6819      	ldr	r1, [r3, #0]
 801a880:	7ff8      	ldrb	r0, [r7, #31]
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	4403      	add	r3, r0
 801a886:	440b      	add	r3, r1
 801a888:	7812      	ldrb	r2, [r2, #0]
 801a88a:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(label);
 801a88c:	6878      	ldr	r0, [r7, #4]
 801a88e:	f000 f890 	bl	801a9b2 <lv_label_dot_tmp_free>

    ext->dot_end = LV_LABEL_DOT_END_INV;
 801a892:	69bb      	ldr	r3, [r7, #24]
 801a894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a898:	811a      	strh	r2, [r3, #8]
 801a89a:	e002      	b.n	801a8a2 <lv_label_revert_dots+0xaa>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801a89c:	bf00      	nop
 801a89e:	e000      	b.n	801a8a2 <lv_label_revert_dots+0xaa>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801a8a0:	bf00      	nop
}
 801a8a2:	3720      	adds	r7, #32
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}
 801a8a8:	200027a4 	.word	0x200027a4

0801a8ac <lv_label_set_offset_x>:

#if LV_USE_ANIMATION
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b084      	sub	sp, #16
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
 801a8b4:	460b      	mov	r3, r1
 801a8b6:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a8b8:	6878      	ldr	r0, [r7, #4]
 801a8ba:	f7ec fce4 	bl	8007286 <lv_obj_get_ext_attr>
 801a8be:	60f8      	str	r0, [r7, #12]
    ext->offset.x        = x;
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	887a      	ldrh	r2, [r7, #2]
 801a8c4:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(label);
 801a8c6:	6878      	ldr	r0, [r7, #4]
 801a8c8:	f7eb fab1 	bl	8005e2e <lv_obj_invalidate>
}
 801a8cc:	bf00      	nop
 801a8ce:	3710      	adds	r7, #16
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd80      	pop	{r7, pc}

0801a8d4 <lv_label_set_offset_y>:

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b084      	sub	sp, #16
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	460b      	mov	r3, r1
 801a8de:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a8e0:	6878      	ldr	r0, [r7, #4]
 801a8e2:	f7ec fcd0 	bl	8007286 <lv_obj_get_ext_attr>
 801a8e6:	60f8      	str	r0, [r7, #12]
    ext->offset.y        = y;
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	887a      	ldrh	r2, [r7, #2]
 801a8ec:	819a      	strh	r2, [r3, #12]
    lv_obj_invalidate(label);
 801a8ee:	6878      	ldr	r0, [r7, #4]
 801a8f0:	f7eb fa9d 	bl	8005e2e <lv_obj_invalidate>
}
 801a8f4:	bf00      	nop
 801a8f6:	3710      	adds	r7, #16
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}

0801a8fc <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint16_t len)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b086      	sub	sp, #24
 801a900:	af00      	add	r7, sp, #0
 801a902:	60f8      	str	r0, [r7, #12]
 801a904:	60b9      	str	r1, [r7, #8]
 801a906:	4613      	mov	r3, r2
 801a908:	80fb      	strh	r3, [r7, #6]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a90a:	68f8      	ldr	r0, [r7, #12]
 801a90c:	f7ec fcbb 	bl	8007286 <lv_obj_get_ext_attr>
 801a910:	6178      	str	r0, [r7, #20]
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801a912:	68f8      	ldr	r0, [r7, #12]
 801a914:	f000 f84d 	bl	801a9b2 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801a918:	88fb      	ldrh	r3, [r7, #6]
 801a91a:	2b04      	cmp	r3, #4
 801a91c:	d920      	bls.n	801a960 <lv_label_set_dot_tmp+0x64>
        /* Memory needs to be allocated. Allocates an additional byte
         * for a NULL-terminator so it can be copied. */
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801a91e:	88fb      	ldrh	r3, [r7, #6]
 801a920:	3301      	adds	r3, #1
 801a922:	4618      	mov	r0, r3
 801a924:	f7f9 f850 	bl	80139c8 <lv_mem_alloc>
 801a928:	4602      	mov	r2, r0
 801a92a:	697b      	ldr	r3, [r7, #20]
 801a92c:	605a      	str	r2, [r3, #4]
        if(ext->dot.tmp_ptr == NULL) {
 801a92e:	697b      	ldr	r3, [r7, #20]
 801a930:	685b      	ldr	r3, [r3, #4]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d101      	bne.n	801a93a <lv_label_set_dot_tmp+0x3e>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 801a936:	2300      	movs	r3, #0
 801a938:	e01f      	b.n	801a97a <lv_label_set_dot_tmp+0x7e>
        }
        memcpy(ext->dot.tmp_ptr, data, len);
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	685b      	ldr	r3, [r3, #4]
 801a93e:	88fa      	ldrh	r2, [r7, #6]
 801a940:	68b9      	ldr	r1, [r7, #8]
 801a942:	4618      	mov	r0, r3
 801a944:	f00c fc6e 	bl	8027224 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 801a948:	697b      	ldr	r3, [r7, #20]
 801a94a:	685a      	ldr	r2, [r3, #4]
 801a94c:	88fb      	ldrh	r3, [r7, #6]
 801a94e:	4413      	add	r3, r2
 801a950:	2200      	movs	r2, #0
 801a952:	701a      	strb	r2, [r3, #0]
        ext->dot_tmp_alloc    = true;
 801a954:	697a      	ldr	r2, [r7, #20]
 801a956:	7fd3      	ldrb	r3, [r2, #31]
 801a958:	f043 0302 	orr.w	r3, r3, #2
 801a95c:	77d3      	strb	r3, [r2, #31]
 801a95e:	e00b      	b.n	801a978 <lv_label_set_dot_tmp+0x7c>
    } else {
        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
 801a960:	697a      	ldr	r2, [r7, #20]
 801a962:	7fd3      	ldrb	r3, [r2, #31]
 801a964:	f36f 0341 	bfc	r3, #1, #1
 801a968:	77d3      	strb	r3, [r2, #31]
        memcpy(ext->dot.tmp, data, len);
 801a96a:	697b      	ldr	r3, [r7, #20]
 801a96c:	3304      	adds	r3, #4
 801a96e:	88fa      	ldrh	r2, [r7, #6]
 801a970:	68b9      	ldr	r1, [r7, #8]
 801a972:	4618      	mov	r0, r3
 801a974:	f00c fc56 	bl	8027224 <memcpy>
    }
    return true;
 801a978:	2301      	movs	r3, #1
}
 801a97a:	4618      	mov	r0, r3
 801a97c:	3718      	adds	r7, #24
 801a97e:	46bd      	mov	sp, r7
 801a980:	bd80      	pop	{r7, pc}

0801a982 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
 801a982:	b580      	push	{r7, lr}
 801a984:	b084      	sub	sp, #16
 801a986:	af00      	add	r7, sp, #0
 801a988:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f7ec fc7b 	bl	8007286 <lv_obj_get_ext_attr>
 801a990:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc) {
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	7fdb      	ldrb	r3, [r3, #31]
 801a996:	f003 0302 	and.w	r3, r3, #2
 801a99a:	b2db      	uxtb	r3, r3
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d002      	beq.n	801a9a6 <lv_label_get_dot_tmp+0x24>
        return ext->dot.tmp_ptr;
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	e001      	b.n	801a9aa <lv_label_get_dot_tmp+0x28>
    } else {
        return ext->dot.tmp;
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	3304      	adds	r3, #4
    }
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	3710      	adds	r7, #16
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}

0801a9b2 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 801a9b2:	b580      	push	{r7, lr}
 801a9b4:	b084      	sub	sp, #16
 801a9b6:	af00      	add	r7, sp, #0
 801a9b8:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	f7ec fc63 	bl	8007286 <lv_obj_get_ext_attr>
 801a9c0:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	7fdb      	ldrb	r3, [r3, #31]
 801a9c6:	f003 0302 	and.w	r3, r3, #2
 801a9ca:	b2db      	uxtb	r3, r3
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d008      	beq.n	801a9e2 <lv_label_dot_tmp_free+0x30>
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	685b      	ldr	r3, [r3, #4]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d004      	beq.n	801a9e2 <lv_label_dot_tmp_free+0x30>
        lv_mem_free(ext->dot.tmp_ptr);
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	685b      	ldr	r3, [r3, #4]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f9 f833 	bl	8013a48 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 801a9e2:	68fa      	ldr	r2, [r7, #12]
 801a9e4:	7fd3      	ldrb	r3, [r2, #31]
 801a9e6:	f36f 0341 	bfc	r3, #1, #1
 801a9ea:	77d3      	strb	r3, [r2, #31]
    ext->dot.tmp_ptr   = NULL;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	605a      	str	r2, [r3, #4]
}
 801a9f2:	bf00      	nop
 801a9f4:	3710      	adds	r7, #16
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}

0801a9fa <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801a9fa:	b480      	push	{r7}
 801a9fc:	b085      	sub	sp, #20
 801a9fe:	af00      	add	r7, sp, #0
 801aa00:	80b8      	strh	r0, [r7, #4]
 801aa02:	8039      	strh	r1, [r7, #0]
 801aa04:	4613      	mov	r3, r2
 801aa06:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801aa08:	793b      	ldrb	r3, [r7, #4]
 801aa0a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	b29a      	uxth	r2, r3
 801aa12:	78fb      	ldrb	r3, [r7, #3]
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	fb12 f303 	smulbb	r3, r2, r3
 801aa1a:	b29a      	uxth	r2, r3
 801aa1c:	783b      	ldrb	r3, [r7, #0]
 801aa1e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801aa22:	b2db      	uxtb	r3, r3
 801aa24:	b299      	uxth	r1, r3
 801aa26:	78fb      	ldrb	r3, [r7, #3]
 801aa28:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	fb11 f303 	smulbb	r3, r1, r3
 801aa32:	b29b      	uxth	r3, r3
 801aa34:	4413      	add	r3, r2
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	0a1b      	lsrs	r3, r3, #8
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	f003 031f 	and.w	r3, r3, #31
 801aa40:	b2da      	uxtb	r2, r3
 801aa42:	7a3b      	ldrb	r3, [r7, #8]
 801aa44:	f362 03c7 	bfi	r3, r2, #3, #5
 801aa48:	723b      	strb	r3, [r7, #8]
#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP
    /*If swapped Green is in 2 parts*/
    uint16_t g_1   = (c1.ch.green_h << 3) + c1.ch.green_l;
 801aa4a:	793b      	ldrb	r3, [r7, #4]
 801aa4c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801aa50:	b2db      	uxtb	r3, r3
 801aa52:	b29b      	uxth	r3, r3
 801aa54:	00db      	lsls	r3, r3, #3
 801aa56:	b29a      	uxth	r2, r3
 801aa58:	797b      	ldrb	r3, [r7, #5]
 801aa5a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801aa5e:	b2db      	uxtb	r3, r3
 801aa60:	b29b      	uxth	r3, r3
 801aa62:	4413      	add	r3, r2
 801aa64:	81fb      	strh	r3, [r7, #14]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
 801aa66:	783b      	ldrb	r3, [r7, #0]
 801aa68:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801aa6c:	b2db      	uxtb	r3, r3
 801aa6e:	b29b      	uxth	r3, r3
 801aa70:	00db      	lsls	r3, r3, #3
 801aa72:	b29a      	uxth	r2, r3
 801aa74:	787b      	ldrb	r3, [r7, #1]
 801aa76:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801aa7a:	b2db      	uxtb	r3, r3
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	4413      	add	r3, r2
 801aa80:	81bb      	strh	r3, [r7, #12]
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
 801aa82:	78fb      	ldrb	r3, [r7, #3]
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	89fa      	ldrh	r2, [r7, #14]
 801aa88:	fb12 f303 	smulbb	r3, r2, r3
 801aa8c:	b29a      	uxth	r2, r3
 801aa8e:	78fb      	ldrb	r3, [r7, #3]
 801aa90:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	89b9      	ldrh	r1, [r7, #12]
 801aa98:	fb11 f303 	smulbb	r3, r1, r3
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	4413      	add	r3, r2
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	0a1b      	lsrs	r3, r3, #8
 801aaa4:	817b      	strh	r3, [r7, #10]
    ret.ch.green_h = g_out >> 3;
 801aaa6:	897b      	ldrh	r3, [r7, #10]
 801aaa8:	08db      	lsrs	r3, r3, #3
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	f003 0307 	and.w	r3, r3, #7
 801aab0:	b2da      	uxtb	r2, r3
 801aab2:	7a3b      	ldrb	r3, [r7, #8]
 801aab4:	f362 0302 	bfi	r3, r2, #0, #3
 801aab8:	723b      	strb	r3, [r7, #8]
    ret.ch.green_l = g_out & 0x7;
 801aaba:	897b      	ldrh	r3, [r7, #10]
 801aabc:	f003 0307 	and.w	r3, r3, #7
 801aac0:	b2da      	uxtb	r2, r3
 801aac2:	7a7b      	ldrb	r3, [r7, #9]
 801aac4:	f362 1347 	bfi	r3, r2, #5, #3
 801aac8:	727b      	strb	r3, [r7, #9]
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801aaca:	797b      	ldrb	r3, [r7, #5]
 801aacc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	b29a      	uxth	r2, r3
 801aad4:	78fb      	ldrb	r3, [r7, #3]
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	fb12 f303 	smulbb	r3, r2, r3
 801aadc:	b29a      	uxth	r2, r3
 801aade:	787b      	ldrb	r3, [r7, #1]
 801aae0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801aae4:	b2db      	uxtb	r3, r3
 801aae6:	b299      	uxth	r1, r3
 801aae8:	78fb      	ldrb	r3, [r7, #3]
 801aaea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	fb11 f303 	smulbb	r3, r1, r3
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	4413      	add	r3, r2
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	0a1b      	lsrs	r3, r3, #8
 801aafc:	b29b      	uxth	r3, r3
 801aafe:	f003 031f 	and.w	r3, r3, #31
 801ab02:	b2da      	uxtb	r2, r3
 801ab04:	7a7b      	ldrb	r3, [r7, #9]
 801ab06:	f362 0304 	bfi	r3, r2, #0, #5
 801ab0a:	727b      	strb	r3, [r7, #9]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801ab0c:	893b      	ldrh	r3, [r7, #8]
}
 801ab0e:	4618      	mov	r0, r3
 801ab10:	3714      	adds	r7, #20
 801ab12:	46bd      	mov	sp, r7
 801ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab18:	4770      	bx	lr

0801ab1a <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801ab1a:	b580      	push	{r7, lr}
 801ab1c:	b084      	sub	sp, #16
 801ab1e:	af00      	add	r7, sp, #0
 801ab20:	60f8      	str	r0, [r7, #12]
 801ab22:	460b      	mov	r3, r1
 801ab24:	607a      	str	r2, [r7, #4]
 801ab26:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801ab28:	6879      	ldr	r1, [r7, #4]
 801ab2a:	68f8      	ldr	r0, [r7, #12]
 801ab2c:	f7ec f87b 	bl	8006c26 <lv_obj_set_style>
}
 801ab30:	bf00      	nop
 801ab32:	3710      	adds	r7, #16
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd80      	pop	{r7, pc}

0801ab38 <lv_lmeter_get_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be get (can be only `LV_LMETER_STYLE_MAIN`)
 * @return pointer to the line meter's style
 */
static inline const lv_style_t * lv_lmeter_get_style(const lv_obj_t * lmeter, lv_lmeter_style_t type)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
 801ab40:	460b      	mov	r3, r1
 801ab42:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(lmeter);
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	f7ec fae3 	bl	8007110 <lv_obj_get_style>
 801ab4a:	4603      	mov	r3, r0
}
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	3708      	adds	r7, #8
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}

0801ab54 <lv_lmeter_create>:
 * @param copy pointer to a line meter object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created line meter
 */
lv_obj_t * lv_lmeter_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b086      	sub	sp, #24
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
 801ab5c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("line meter create started");

    /*Create the ancestor of line meter*/
    lv_obj_t * new_lmeter = lv_obj_create(par, copy);
 801ab5e:	6839      	ldr	r1, [r7, #0]
 801ab60:	6878      	ldr	r0, [r7, #4]
 801ab62:	f7ea fe27 	bl	80057b4 <lv_obj_create>
 801ab66:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_lmeter);
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d100      	bne.n	801ab70 <lv_lmeter_create+0x1c>
 801ab6e:	e7fe      	b.n	801ab6e <lv_lmeter_create+0x1a>
    if(new_lmeter == NULL) return NULL;
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d101      	bne.n	801ab7a <lv_lmeter_create+0x26>
 801ab76:	2300      	movs	r3, #0
 801ab78:	e069      	b.n	801ac4e <lv_lmeter_create+0xfa>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_lmeter);
 801ab7a:	4b37      	ldr	r3, [pc, #220]	; (801ac58 <lv_lmeter_create+0x104>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d105      	bne.n	801ab8e <lv_lmeter_create+0x3a>
 801ab82:	6978      	ldr	r0, [r7, #20]
 801ab84:	f7ec fb67 	bl	8007256 <lv_obj_get_signal_cb>
 801ab88:	4602      	mov	r2, r0
 801ab8a:	4b33      	ldr	r3, [pc, #204]	; (801ac58 <lv_lmeter_create+0x104>)
 801ab8c:	601a      	str	r2, [r3, #0]

    /*Allocate the line meter type specific extended data*/
    lv_lmeter_ext_t * ext = lv_obj_allocate_ext_attr(new_lmeter, sizeof(lv_lmeter_ext_t));
 801ab8e:	210a      	movs	r1, #10
 801ab90:	6978      	ldr	r0, [r7, #20]
 801ab92:	f7ec f9ab 	bl	8006eec <lv_obj_allocate_ext_attr>
 801ab96:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ab98:	693b      	ldr	r3, [r7, #16]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d100      	bne.n	801aba0 <lv_lmeter_create+0x4c>
 801ab9e:	e7fe      	b.n	801ab9e <lv_lmeter_create+0x4a>
    if(ext == NULL) return NULL;
 801aba0:	693b      	ldr	r3, [r7, #16]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d101      	bne.n	801abaa <lv_lmeter_create+0x56>
 801aba6:	2300      	movs	r3, #0
 801aba8:	e051      	b.n	801ac4e <lv_lmeter_create+0xfa>

    /*Initialize the allocated 'ext' */
    ext->min_value   = 0;
 801abaa:	693b      	ldr	r3, [r7, #16]
 801abac:	2200      	movs	r2, #0
 801abae:	80da      	strh	r2, [r3, #6]
    ext->max_value   = 100;
 801abb0:	693b      	ldr	r3, [r7, #16]
 801abb2:	2264      	movs	r2, #100	; 0x64
 801abb4:	811a      	strh	r2, [r3, #8]
    ext->cur_value   = 0;
 801abb6:	693b      	ldr	r3, [r7, #16]
 801abb8:	2200      	movs	r2, #0
 801abba:	809a      	strh	r2, [r3, #4]
    ext->line_cnt    = 21;  /*Odd scale number looks better*/
 801abbc:	693b      	ldr	r3, [r7, #16]
 801abbe:	2215      	movs	r2, #21
 801abc0:	709a      	strb	r2, [r3, #2]
    ext->scale_angle = 240; /*(scale_num - 1) * N looks better */
 801abc2:	693b      	ldr	r3, [r7, #16]
 801abc4:	22f0      	movs	r2, #240	; 0xf0
 801abc6:	801a      	strh	r2, [r3, #0]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_lmeter, lv_lmeter_signal);
 801abc8:	4924      	ldr	r1, [pc, #144]	; (801ac5c <lv_lmeter_create+0x108>)
 801abca:	6978      	ldr	r0, [r7, #20]
 801abcc:	f7ec f972 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_lmeter, lv_lmeter_design);
 801abd0:	4923      	ldr	r1, [pc, #140]	; (801ac60 <lv_lmeter_create+0x10c>)
 801abd2:	6978      	ldr	r0, [r7, #20]
 801abd4:	f7ec f97c 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new line meter line meter*/
    if(copy == NULL) {
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d118      	bne.n	801ac10 <lv_lmeter_create+0xbc>
        lv_obj_set_size(new_lmeter, LV_DPI, LV_DPI);
 801abde:	2264      	movs	r2, #100	; 0x64
 801abe0:	2164      	movs	r1, #100	; 0x64
 801abe2:	6978      	ldr	r0, [r7, #20]
 801abe4:	f7eb fad7 	bl	8006196 <lv_obj_set_size>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801abe8:	f004 f9d0 	bl	801ef8c <lv_theme_get_current>
 801abec:	60b8      	str	r0, [r7, #8]
        if(th) {
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d007      	beq.n	801ac04 <lv_lmeter_create+0xb0>
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, th->style.lmeter);
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801abf8:	461a      	mov	r2, r3
 801abfa:	2100      	movs	r1, #0
 801abfc:	6978      	ldr	r0, [r7, #20]
 801abfe:	f7ff ff8c 	bl	801ab1a <lv_lmeter_set_style>
 801ac02:	e023      	b.n	801ac4c <lv_lmeter_create+0xf8>
        } else {
            lv_lmeter_set_style(new_lmeter, LV_LMETER_STYLE_MAIN, &lv_style_pretty_color);
 801ac04:	4a17      	ldr	r2, [pc, #92]	; (801ac64 <lv_lmeter_create+0x110>)
 801ac06:	2100      	movs	r1, #0
 801ac08:	6978      	ldr	r0, [r7, #20]
 801ac0a:	f7ff ff86 	bl	801ab1a <lv_lmeter_set_style>
 801ac0e:	e01d      	b.n	801ac4c <lv_lmeter_create+0xf8>
        }
    }
    /*Copy an existing line meter*/
    else {
        lv_lmeter_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801ac10:	6838      	ldr	r0, [r7, #0]
 801ac12:	f7ec fb38 	bl	8007286 <lv_obj_get_ext_attr>
 801ac16:	60f8      	str	r0, [r7, #12]
        ext->scale_angle           = copy_ext->scale_angle;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	881a      	ldrh	r2, [r3, #0]
 801ac1c:	693b      	ldr	r3, [r7, #16]
 801ac1e:	801a      	strh	r2, [r3, #0]
        ext->line_cnt              = copy_ext->line_cnt;
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	789a      	ldrb	r2, [r3, #2]
 801ac24:	693b      	ldr	r3, [r7, #16]
 801ac26:	709a      	strb	r2, [r3, #2]
        ext->min_value             = copy_ext->min_value;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	80da      	strh	r2, [r3, #6]
        ext->max_value             = copy_ext->max_value;
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ac38:	693b      	ldr	r3, [r7, #16]
 801ac3a:	811a      	strh	r2, [r3, #8]
        ext->cur_value             = copy_ext->cur_value;
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ac42:	693b      	ldr	r3, [r7, #16]
 801ac44:	809a      	strh	r2, [r3, #4]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_lmeter);
 801ac46:	6978      	ldr	r0, [r7, #20]
 801ac48:	f7eb ffff 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("line meter created");

    return new_lmeter;
 801ac4c:	697b      	ldr	r3, [r7, #20]
}
 801ac4e:	4618      	mov	r0, r3
 801ac50:	3718      	adds	r7, #24
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd80      	pop	{r7, pc}
 801ac56:	bf00      	nop
 801ac58:	20002ad0 	.word	0x20002ad0
 801ac5c:	0801b095 	.word	0x0801b095
 801ac60:	0801ada5 	.word	0x0801ada5
 801ac64:	20006a94 	.word	0x20006a94

0801ac68 <lv_lmeter_set_value>:
 * Set a new value on the line meter
 * @param lmeter pointer to a line meter object
 * @param value new value
 */
void lv_lmeter_set_value(lv_obj_t * lmeter, int16_t value)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
 801ac70:	460b      	mov	r3, r1
 801ac72:	807b      	strh	r3, [r7, #2]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801ac74:	6878      	ldr	r0, [r7, #4]
 801ac76:	f7ec fb06 	bl	8007286 <lv_obj_get_ext_attr>
 801ac7a:	60f8      	str	r0, [r7, #12]
    if(ext->cur_value == value) return;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ac82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d01a      	beq.n	801acc0 <lv_lmeter_set_value+0x58>

    ext->cur_value = value > ext->max_value ? ext->max_value : value;
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ac90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ac94:	4293      	cmp	r3, r2
 801ac96:	bfa8      	it	ge
 801ac98:	4613      	movge	r3, r2
 801ac9a:	b21a      	sxth	r2, r3
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	809a      	strh	r2, [r3, #4]
    ext->cur_value = ext->cur_value < ext->min_value ? ext->min_value : ext->cur_value;
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801acac:	4293      	cmp	r3, r2
 801acae:	bfb8      	it	lt
 801acb0:	4613      	movlt	r3, r2
 801acb2:	b21a      	sxth	r2, r3
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	809a      	strh	r2, [r3, #4]
    lv_obj_invalidate(lmeter);
 801acb8:	6878      	ldr	r0, [r7, #4]
 801acba:	f7eb f8b8 	bl	8005e2e <lv_obj_invalidate>
 801acbe:	e000      	b.n	801acc2 <lv_lmeter_set_value+0x5a>
    if(ext->cur_value == value) return;
 801acc0:	bf00      	nop
}
 801acc2:	3710      	adds	r7, #16
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd80      	pop	{r7, pc}

0801acc8 <lv_lmeter_set_range>:
 * @param lmeter pointer to he line meter object
 * @param min minimum value
 * @param max maximum value
 */
void lv_lmeter_set_range(lv_obj_t * lmeter, int16_t min, int16_t max)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b084      	sub	sp, #16
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
 801acd0:	460b      	mov	r3, r1
 801acd2:	807b      	strh	r3, [r7, #2]
 801acd4:	4613      	mov	r3, r2
 801acd6:	803b      	strh	r3, [r7, #0]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801acd8:	6878      	ldr	r0, [r7, #4]
 801acda:	f7ec fad4 	bl	8007286 <lv_obj_get_ext_attr>
 801acde:	60f8      	str	r0, [r7, #12]
    if(ext->min_value == min && ext->max_value == max) return;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ace6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801acea:	429a      	cmp	r2, r3
 801acec:	d106      	bne.n	801acfc <lv_lmeter_set_range+0x34>
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801acf4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801acf8:	429a      	cmp	r2, r3
 801acfa:	d02b      	beq.n	801ad54 <lv_lmeter_set_range+0x8c>

    ext->max_value = max;
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	883a      	ldrh	r2, [r7, #0]
 801ad00:	811a      	strh	r2, [r3, #8]
    ext->min_value = min;
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	887a      	ldrh	r2, [r7, #2]
 801ad06:	80da      	strh	r2, [r3, #6]
    if(ext->cur_value > max) {
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	da09      	bge.n	801ad2a <lv_lmeter_set_range+0x62>
        ext->cur_value = max;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	883a      	ldrh	r2, [r7, #0]
 801ad1a:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad22:	4619      	mov	r1, r3
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f7ff ff9f 	bl	801ac68 <lv_lmeter_set_value>
    }
    if(ext->cur_value < min) {
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad30:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ad34:	429a      	cmp	r2, r3
 801ad36:	dd09      	ble.n	801ad4c <lv_lmeter_set_range+0x84>
        ext->cur_value = min;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	887a      	ldrh	r2, [r7, #2]
 801ad3c:	809a      	strh	r2, [r3, #4]
        lv_lmeter_set_value(lmeter, ext->cur_value);
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad44:	4619      	mov	r1, r3
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	f7ff ff8e 	bl	801ac68 <lv_lmeter_set_value>
    }
    lv_obj_invalidate(lmeter);
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f7eb f86e 	bl	8005e2e <lv_obj_invalidate>
 801ad52:	e000      	b.n	801ad56 <lv_lmeter_set_range+0x8e>
    if(ext->min_value == min && ext->max_value == max) return;
 801ad54:	bf00      	nop
}
 801ad56:	3710      	adds	r7, #16
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}

0801ad5c <lv_lmeter_set_scale>:
 * @param lmeter pointer to a line meter object
 * @param angle angle of the scale (0..360)
 * @param line_cnt number of lines
 */
void lv_lmeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint8_t line_cnt)
{
 801ad5c:	b580      	push	{r7, lr}
 801ad5e:	b084      	sub	sp, #16
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
 801ad64:	460b      	mov	r3, r1
 801ad66:	807b      	strh	r3, [r7, #2]
 801ad68:	4613      	mov	r3, r2
 801ad6a:	707b      	strb	r3, [r7, #1]
    lv_lmeter_ext_t * ext = lv_obj_get_ext_attr(lmeter);
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f7ec fa8a 	bl	8007286 <lv_obj_get_ext_attr>
 801ad72:	60f8      	str	r0, [r7, #12]
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	881b      	ldrh	r3, [r3, #0]
 801ad78:	887a      	ldrh	r2, [r7, #2]
 801ad7a:	429a      	cmp	r2, r3
 801ad7c:	d104      	bne.n	801ad88 <lv_lmeter_set_scale+0x2c>
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	789b      	ldrb	r3, [r3, #2]
 801ad82:	787a      	ldrb	r2, [r7, #1]
 801ad84:	429a      	cmp	r2, r3
 801ad86:	d009      	beq.n	801ad9c <lv_lmeter_set_scale+0x40>

    ext->scale_angle = angle;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	887a      	ldrh	r2, [r7, #2]
 801ad8c:	801a      	strh	r2, [r3, #0]
    ext->line_cnt    = line_cnt;
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	787a      	ldrb	r2, [r7, #1]
 801ad92:	709a      	strb	r2, [r3, #2]

    lv_obj_invalidate(lmeter);
 801ad94:	6878      	ldr	r0, [r7, #4]
 801ad96:	f7eb f84a 	bl	8005e2e <lv_obj_invalidate>
 801ad9a:	e000      	b.n	801ad9e <lv_lmeter_set_scale+0x42>
    if(ext->scale_angle == angle && ext->line_cnt == line_cnt) return;
 801ad9c:	bf00      	nop
}
 801ad9e:	3710      	adds	r7, #16
 801ada0:	46bd      	mov	sp, r7
 801ada2:	bd80      	pop	{r7, pc}

0801ada4 <lv_lmeter_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_lmeter_design(lv_obj_t * lmeter, const lv_area_t * mask, lv_design_mode_t mode)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b0a2      	sub	sp, #136	; 0x88
 801ada8:	af02      	add	r7, sp, #8
 801adaa:	60f8      	str	r0, [r7, #12]
 801adac:	60b9      	str	r1, [r7, #8]
 801adae:	4613      	mov	r3, r2
 801adb0:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801adb2:	79fb      	ldrb	r3, [r7, #7]
 801adb4:	2b02      	cmp	r3, #2
 801adb6:	d101      	bne.n	801adbc <lv_lmeter_design+0x18>
        return false;
 801adb8:	2300      	movs	r3, #0
 801adba:	e167      	b.n	801b08c <lv_lmeter_design+0x2e8>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801adbc:	79fb      	ldrb	r3, [r7, #7]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	f040 8163 	bne.w	801b08a <lv_lmeter_design+0x2e6>
        lv_lmeter_ext_t * ext    = lv_obj_get_ext_attr(lmeter);
 801adc4:	68f8      	ldr	r0, [r7, #12]
 801adc6:	f7ec fa5e 	bl	8007286 <lv_obj_get_ext_attr>
 801adca:	67b8      	str	r0, [r7, #120]	; 0x78
        const lv_style_t * style = lv_obj_get_style(lmeter);
 801adcc:	68f8      	ldr	r0, [r7, #12]
 801adce:	f7ec f99f 	bl	8007110 <lv_obj_get_style>
 801add2:	6778      	str	r0, [r7, #116]	; 0x74
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(lmeter);
 801add4:	68f8      	ldr	r0, [r7, #12]
 801add6:	f7ec fa08 	bl	80071ea <lv_obj_get_opa_scale>
 801adda:	4603      	mov	r3, r0
 801addc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        lv_style_t style_tmp;
        lv_style_copy(&style_tmp, style);
 801ade0:	f107 0314 	add.w	r3, r7, #20
 801ade4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7ed fcbc 	bl	8008764 <lv_style_copy>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(lmeter);
 801adec:	68f8      	ldr	r0, [r7, #12]
 801adee:	f7ec fa56 	bl	800729e <lv_obj_get_group>
 801adf2:	66f8      	str	r0, [r7, #108]	; 0x6c
        if(lv_group_get_focused(g) == lmeter) {
 801adf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801adf6:	f7ea fa34 	bl	8005262 <lv_group_get_focused>
 801adfa:	4602      	mov	r2, r0
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	4293      	cmp	r3, r2
 801ae00:	d107      	bne.n	801ae12 <lv_lmeter_design+0x6e>
            style_tmp.line.width += 1;
 801ae02:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801ae06:	b29b      	uxth	r3, r3
 801ae08:	3301      	adds	r3, #1
 801ae0a:	b29b      	uxth	r3, r3
 801ae0c:	b21b      	sxth	r3, r3
 801ae0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }
#endif

        lv_coord_t r_out = lv_obj_get_width(lmeter) / 2;
 801ae12:	68f8      	ldr	r0, [r7, #12]
 801ae14:	f7ec f94c 	bl	80070b0 <lv_obj_get_width>
 801ae18:	4603      	mov	r3, r0
 801ae1a:	0fda      	lsrs	r2, r3, #31
 801ae1c:	4413      	add	r3, r2
 801ae1e:	105b      	asrs	r3, r3, #1
 801ae20:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t r_in  = r_out - style->body.padding.left;
 801ae24:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801ae28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae2a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	1ad3      	subs	r3, r2, r3
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(r_in < 1) r_in = 1;
 801ae38:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	dc02      	bgt.n	801ae46 <lv_lmeter_design+0xa2>
 801ae40:	2301      	movs	r3, #1
 801ae42:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        lv_coord_t x_ofs  = lv_obj_get_width(lmeter) / 2 + lmeter->coords.x1;
 801ae46:	68f8      	ldr	r0, [r7, #12]
 801ae48:	f7ec f932 	bl	80070b0 <lv_obj_get_width>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	0fda      	lsrs	r2, r3, #31
 801ae50:	4413      	add	r3, r2
 801ae52:	105b      	asrs	r3, r3, #1
 801ae54:	b21b      	sxth	r3, r3
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ae5e:	b29b      	uxth	r3, r3
 801ae60:	4413      	add	r3, r2
 801ae62:	b29b      	uxth	r3, r3
 801ae64:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_coord_t y_ofs  = lv_obj_get_height(lmeter) / 2 + lmeter->coords.y1;
 801ae68:	68f8      	ldr	r0, [r7, #12]
 801ae6a:	f7ec f92f 	bl	80070cc <lv_obj_get_height>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	0fda      	lsrs	r2, r3, #31
 801ae72:	4413      	add	r3, r2
 801ae74:	105b      	asrs	r3, r3, #1
 801ae76:	b21b      	sxth	r3, r3
 801ae78:	b29a      	uxth	r2, r3
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ae80:	b29b      	uxth	r3, r3
 801ae82:	4413      	add	r3, r2
 801ae84:	b29b      	uxth	r3, r3
 801ae86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        int16_t angle_ofs = 90 + (360 - ext->scale_angle) / 2;
 801ae8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae8c:	881b      	ldrh	r3, [r3, #0]
 801ae8e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801ae92:	0fda      	lsrs	r2, r3, #31
 801ae94:	4413      	add	r3, r2
 801ae96:	105b      	asrs	r3, r3, #1
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	335a      	adds	r3, #90	; 0x5a
 801ae9c:	b29b      	uxth	r3, r3
 801ae9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        int16_t level =
            (int32_t)((int32_t)(ext->cur_value - ext->min_value) * ext->line_cnt) / (ext->max_value - ext->min_value);
 801aea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aea8:	461a      	mov	r2, r3
 801aeaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aeac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aeb0:	1ad3      	subs	r3, r2, r3
 801aeb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801aeb4:	7892      	ldrb	r2, [r2, #2]
 801aeb6:	fb02 f203 	mul.w	r2, r2, r3
 801aeba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aebc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801aec0:	4619      	mov	r1, r3
 801aec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aec4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aec8:	1acb      	subs	r3, r1, r3
 801aeca:	fb92 f3f3 	sdiv	r3, r2, r3
        int16_t level =
 801aece:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        uint8_t i;

        style_tmp.line.color = style->body.main_color;
 801aed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aed4:	885b      	ldrh	r3, [r3, #2]
 801aed6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        /*Calculate every coordinate in a bigger size to make rounding later*/
        r_out = r_out << LV_LMETER_LINE_UPSCALE;
 801aeda:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801aede:	015b      	lsls	r3, r3, #5
 801aee0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        r_in  = r_in << LV_LMETER_LINE_UPSCALE;
 801aee4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801aee8:	015b      	lsls	r3, r3, #5
 801aeea:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        for(i = 0; i < ext->line_cnt; i++) {
 801aeee:	2300      	movs	r3, #0
 801aef0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801aef4:	e0c2      	b.n	801b07c <lv_lmeter_design+0x2d8>
            /*Calculate the position a scale label*/
            int16_t angle = (i * ext->scale_angle) / (ext->line_cnt - 1) + angle_ofs;
 801aef6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801aefa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801aefc:	8812      	ldrh	r2, [r2, #0]
 801aefe:	fb02 f203 	mul.w	r2, r2, r3
 801af02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801af04:	789b      	ldrb	r3, [r3, #2]
 801af06:	3b01      	subs	r3, #1
 801af08:	fb92 f3f3 	sdiv	r3, r2, r3
 801af0c:	b29a      	uxth	r2, r3
 801af0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801af12:	4413      	add	r3, r2
 801af14:	b29b      	uxth	r3, r3
 801af16:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

            lv_coord_t y_out = (int32_t)((int32_t)lv_trigo_sin(angle) * r_out) >> LV_TRIGO_SHIFT;
 801af1a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801af1e:	4618      	mov	r0, r3
 801af20:	f7f8 fcda 	bl	80138d8 <lv_trigo_sin>
 801af24:	4603      	mov	r3, r0
 801af26:	461a      	mov	r2, r3
 801af28:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801af2c:	fb03 f302 	mul.w	r3, r3, r2
 801af30:	13db      	asrs	r3, r3, #15
 801af32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t x_out = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_out) >> LV_TRIGO_SHIFT;
 801af36:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801af3a:	335a      	adds	r3, #90	; 0x5a
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	b21b      	sxth	r3, r3
 801af40:	4618      	mov	r0, r3
 801af42:	f7f8 fcc9 	bl	80138d8 <lv_trigo_sin>
 801af46:	4603      	mov	r3, r0
 801af48:	461a      	mov	r2, r3
 801af4a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801af4e:	fb03 f302 	mul.w	r3, r3, r2
 801af52:	13db      	asrs	r3, r3, #15
 801af54:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_coord_t y_in  = (int32_t)((int32_t)lv_trigo_sin(angle) * r_in) >> LV_TRIGO_SHIFT;
 801af58:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7f8 fcbb 	bl	80138d8 <lv_trigo_sin>
 801af62:	4603      	mov	r3, r0
 801af64:	461a      	mov	r2, r3
 801af66:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801af6a:	fb03 f302 	mul.w	r3, r3, r2
 801af6e:	13db      	asrs	r3, r3, #15
 801af70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_coord_t x_in  = (int32_t)((int32_t)lv_trigo_sin(angle + 90) * r_in) >> LV_TRIGO_SHIFT;
 801af74:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801af78:	335a      	adds	r3, #90	; 0x5a
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	b21b      	sxth	r3, r3
 801af7e:	4618      	mov	r0, r3
 801af80:	f7f8 fcaa 	bl	80138d8 <lv_trigo_sin>
 801af84:	4603      	mov	r3, r0
 801af86:	461a      	mov	r2, r3
 801af88:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801af8c:	fb03 f302 	mul.w	r3, r3, r2
 801af90:	13db      	asrs	r3, r3, #15
 801af92:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

            /*Rounding*/
            x_out = lv_lmeter_coord_round(x_out);
 801af96:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801af9a:	4618      	mov	r0, r3
 801af9c:	f000 f8d2 	bl	801b144 <lv_lmeter_coord_round>
 801afa0:	4603      	mov	r3, r0
 801afa2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            x_in  = lv_lmeter_coord_round(x_in);
 801afa6:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 f8ca 	bl	801b144 <lv_lmeter_coord_round>
 801afb0:	4603      	mov	r3, r0
 801afb2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            y_out = lv_lmeter_coord_round(y_out);
 801afb6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801afba:	4618      	mov	r0, r3
 801afbc:	f000 f8c2 	bl	801b144 <lv_lmeter_coord_round>
 801afc0:	4603      	mov	r3, r0
 801afc2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            y_in  = lv_lmeter_coord_round(y_in);
 801afc6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801afca:	4618      	mov	r0, r3
 801afcc:	f000 f8ba 	bl	801b144 <lv_lmeter_coord_round>
 801afd0:	4603      	mov	r3, r0
 801afd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            lv_point_t p1;
            lv_point_t p2;

            p2.x = x_in + x_ofs;
 801afd6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801afda:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801afde:	4413      	add	r3, r2
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	b21b      	sxth	r3, r3
 801afe4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            p2.y = y_in + y_ofs;
 801afe8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801afec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801aff0:	4413      	add	r3, r2
 801aff2:	b29b      	uxth	r3, r3
 801aff4:	b21b      	sxth	r3, r3
 801aff6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

            p1.x = x_out + x_ofs;
 801affa:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801affe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801b002:	4413      	add	r3, r2
 801b004:	b29b      	uxth	r3, r3
 801b006:	b21b      	sxth	r3, r3
 801b008:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            p1.y = y_out + y_ofs;
 801b00c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b010:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801b014:	4413      	add	r3, r2
 801b016:	b29b      	uxth	r3, r3
 801b018:	b21b      	sxth	r3, r3
 801b01a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            if(i >= level)
 801b01e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b022:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b026:	429a      	cmp	r2, r3
 801b028:	db04      	blt.n	801b034 <lv_lmeter_design+0x290>
                style_tmp.line.color = style->line.color;
 801b02a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b02c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801b02e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b032:	e011      	b.n	801b058 <lv_lmeter_design+0x2b4>
            else {
                style_tmp.line.color =
                    lv_color_mix(style->body.grad_color, style->body.main_color, (255 * i) / ext->line_cnt);
 801b034:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b038:	4613      	mov	r3, r2
 801b03a:	021b      	lsls	r3, r3, #8
 801b03c:	1a9b      	subs	r3, r3, r2
 801b03e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b040:	7892      	ldrb	r2, [r2, #2]
 801b042:	fb93 f3f2 	sdiv	r3, r3, r2
 801b046:	b2da      	uxtb	r2, r3
                style_tmp.line.color =
 801b048:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b04a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b04c:	8849      	ldrh	r1, [r1, #2]
 801b04e:	8898      	ldrh	r0, [r3, #4]
 801b050:	f7ff fcd3 	bl	801a9fa <lv_color_mix>
 801b054:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
            }

            lv_draw_line(&p1, &p2, mask, &style_tmp, opa_scale);
 801b058:	f107 0214 	add.w	r2, r7, #20
 801b05c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801b060:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b064:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801b068:	9300      	str	r3, [sp, #0]
 801b06a:	4613      	mov	r3, r2
 801b06c:	68ba      	ldr	r2, [r7, #8]
 801b06e:	f7ef ff0b 	bl	800ae88 <lv_draw_line>
        for(i = 0; i < ext->line_cnt; i++) {
 801b072:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 801b076:	3301      	adds	r3, #1
 801b078:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 801b07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b07e:	789b      	ldrb	r3, [r3, #2]
 801b080:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 801b084:	429a      	cmp	r2, r3
 801b086:	f4ff af36 	bcc.w	801aef6 <lv_lmeter_design+0x152>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801b08a:	2301      	movs	r3, #1
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	3780      	adds	r7, #128	; 0x80
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}

0801b094 <lv_lmeter_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_lmeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b088      	sub	sp, #32
 801b098:	af00      	add	r7, sp, #0
 801b09a:	60f8      	str	r0, [r7, #12]
 801b09c:	460b      	mov	r3, r1
 801b09e:	607a      	str	r2, [r7, #4]
 801b0a0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(lmeter, sign, param);
 801b0a2:	4b26      	ldr	r3, [pc, #152]	; (801b13c <lv_lmeter_signal+0xa8>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	7af9      	ldrb	r1, [r7, #11]
 801b0a8:	687a      	ldr	r2, [r7, #4]
 801b0aa:	68f8      	ldr	r0, [r7, #12]
 801b0ac:	4798      	blx	r3
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 801b0b2:	7fbb      	ldrb	r3, [r7, #30]
 801b0b4:	2b01      	cmp	r3, #1
 801b0b6:	d001      	beq.n	801b0bc <lv_lmeter_signal+0x28>
 801b0b8:	7fbb      	ldrb	r3, [r7, #30]
 801b0ba:	e03a      	b.n	801b132 <lv_lmeter_signal+0x9e>

    if(sign == LV_SIGNAL_CLEANUP) {
 801b0bc:	7afb      	ldrb	r3, [r7, #11]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d036      	beq.n	801b130 <lv_lmeter_signal+0x9c>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801b0c2:	7afb      	ldrb	r3, [r7, #11]
 801b0c4:	2b04      	cmp	r3, #4
 801b0c6:	d103      	bne.n	801b0d0 <lv_lmeter_signal+0x3c>
        lv_obj_refresh_ext_draw_pad(lmeter);
 801b0c8:	68f8      	ldr	r0, [r7, #12]
 801b0ca:	f7eb ff25 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
 801b0ce:	e02f      	b.n	801b130 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801b0d0:	7afb      	ldrb	r3, [r7, #11]
 801b0d2:	2b05      	cmp	r3, #5
 801b0d4:	d111      	bne.n	801b0fa <lv_lmeter_signal+0x66>
        const lv_style_t * style = lv_lmeter_get_style(lmeter, LV_LMETER_STYLE_MAIN);
 801b0d6:	2100      	movs	r1, #0
 801b0d8:	68f8      	ldr	r0, [r7, #12]
 801b0da:	f7ff fd2d 	bl	801ab38 <lv_lmeter_get_style>
 801b0de:	6178      	str	r0, [r7, #20]
        lmeter->ext_draw_pad     = LV_MATH_MAX(lmeter->ext_draw_pad, style->line.width);
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	bfb8      	it	lt
 801b0f0:	4613      	movlt	r3, r2
 801b0f2:	b21a      	sxth	r2, r3
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	869a      	strh	r2, [r3, #52]	; 0x34
 801b0f8:	e01a      	b.n	801b130 <lv_lmeter_signal+0x9c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b0fa:	7afb      	ldrb	r3, [r7, #11]
 801b0fc:	2b06      	cmp	r3, #6
 801b0fe:	d117      	bne.n	801b130 <lv_lmeter_signal+0x9c>
        lv_obj_type_t * buf = param;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	61bb      	str	r3, [r7, #24]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b104:	2300      	movs	r3, #0
 801b106:	77fb      	strb	r3, [r7, #31]
 801b108:	e008      	b.n	801b11c <lv_lmeter_signal+0x88>
            if(buf->type[i] == NULL) break;
 801b10a:	7ffa      	ldrb	r2, [r7, #31]
 801b10c:	69bb      	ldr	r3, [r7, #24]
 801b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d006      	beq.n	801b124 <lv_lmeter_signal+0x90>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b116:	7ffb      	ldrb	r3, [r7, #31]
 801b118:	3301      	adds	r3, #1
 801b11a:	77fb      	strb	r3, [r7, #31]
 801b11c:	7ffb      	ldrb	r3, [r7, #31]
 801b11e:	2b06      	cmp	r3, #6
 801b120:	d9f3      	bls.n	801b10a <lv_lmeter_signal+0x76>
 801b122:	e000      	b.n	801b126 <lv_lmeter_signal+0x92>
            if(buf->type[i] == NULL) break;
 801b124:	bf00      	nop
        }
        buf->type[i] = "lv_lmeter";
 801b126:	7ffa      	ldrb	r2, [r7, #31]
 801b128:	69bb      	ldr	r3, [r7, #24]
 801b12a:	4905      	ldr	r1, [pc, #20]	; (801b140 <lv_lmeter_signal+0xac>)
 801b12c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801b130:	7fbb      	ldrb	r3, [r7, #30]
}
 801b132:	4618      	mov	r0, r3
 801b134:	3720      	adds	r7, #32
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
 801b13a:	bf00      	nop
 801b13c:	20002ad0 	.word	0x20002ad0
 801b140:	08029d74 	.word	0x08029d74

0801b144 <lv_lmeter_coord_round>:
 * Round a coordinate which is upscaled  (>=x.5 -> x + 1;   <x.5 -> x)
 * @param x a coordinate which is greater then it should be
 * @return the downscaled and rounded coordinate  (+-1)
 */
static lv_coord_t lv_lmeter_coord_round(int32_t x)
{
 801b144:	b480      	push	{r7}
 801b146:	b085      	sub	sp, #20
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
#if LV_LMETER_LINE_UPSCALE > 0
    bool was_negative = false;
 801b14c:	2300      	movs	r3, #0
 801b14e:	73fb      	strb	r3, [r7, #15]
    if(x < 0) {
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2b00      	cmp	r3, #0
 801b154:	da04      	bge.n	801b160 <lv_lmeter_coord_round+0x1c>
        was_negative = true;
 801b156:	2301      	movs	r3, #1
 801b158:	73fb      	strb	r3, [r7, #15]
        x            = -x;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	425b      	negs	r3, r3
 801b15e:	607b      	str	r3, [r7, #4]
    }

    x = (x >> LV_LMETER_LINE_UPSCALE) + ((x & LV_LMETER_LINE_UPSCALE_MASK) >> (LV_LMETER_LINE_UPSCALE - 1));
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	115a      	asrs	r2, r3, #5
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	111b      	asrs	r3, r3, #4
 801b168:	f003 0301 	and.w	r3, r3, #1
 801b16c:	4413      	add	r3, r2
 801b16e:	607b      	str	r3, [r7, #4]

    if(was_negative) x = -x;
 801b170:	7bfb      	ldrb	r3, [r7, #15]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d002      	beq.n	801b17c <lv_lmeter_coord_round+0x38>
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	425b      	negs	r3, r3
 801b17a:	607b      	str	r3, [r7, #4]

    return x;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	b21b      	sxth	r3, r3
#else
    return x;
#endif
}
 801b180:	4618      	mov	r0, r3
 801b182:	3714      	adds	r7, #20
 801b184:	46bd      	mov	sp, r7
 801b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18a:	4770      	bx	lr

0801b18c <lv_font_get_line_height>:
{
 801b18c:	b480      	push	{r7}
 801b18e:	b083      	sub	sp, #12
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	7a1b      	ldrb	r3, [r3, #8]
}
 801b198:	4618      	mov	r0, r3
 801b19a:	370c      	adds	r7, #12
 801b19c:	46bd      	mov	sp, r7
 801b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a2:	4770      	bx	lr

0801b1a4 <lv_area_get_width>:
{
 801b1a4:	b480      	push	{r7}
 801b1a6:	b083      	sub	sp, #12
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1b2:	b29a      	uxth	r2, r3
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b1ba:	b29b      	uxth	r3, r3
 801b1bc:	1ad3      	subs	r3, r2, r3
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	b21b      	sxth	r3, r3
}
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	370c      	adds	r7, #12
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d0:	4770      	bx	lr

0801b1d2 <lv_cont_set_fit2>:
{
 801b1d2:	b580      	push	{r7, lr}
 801b1d4:	b084      	sub	sp, #16
 801b1d6:	af02      	add	r7, sp, #8
 801b1d8:	6078      	str	r0, [r7, #4]
 801b1da:	460b      	mov	r3, r1
 801b1dc:	70fb      	strb	r3, [r7, #3]
 801b1de:	4613      	mov	r3, r2
 801b1e0:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801b1e2:	78b8      	ldrb	r0, [r7, #2]
 801b1e4:	78fa      	ldrb	r2, [r7, #3]
 801b1e6:	78f9      	ldrb	r1, [r7, #3]
 801b1e8:	78bb      	ldrb	r3, [r7, #2]
 801b1ea:	9300      	str	r3, [sp, #0]
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	6878      	ldr	r0, [r7, #4]
 801b1f0:	f7fc feb5 	bl	8017f5e <lv_cont_set_fit4>
}
 801b1f4:	bf00      	nop
 801b1f6:	3708      	adds	r7, #8
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}

0801b1fc <lv_cont_set_fit>:
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b084      	sub	sp, #16
 801b200:	af02      	add	r7, sp, #8
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	460b      	mov	r3, r1
 801b206:	70fb      	strb	r3, [r7, #3]
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801b208:	78f8      	ldrb	r0, [r7, #3]
 801b20a:	78fa      	ldrb	r2, [r7, #3]
 801b20c:	78f9      	ldrb	r1, [r7, #3]
 801b20e:	78fb      	ldrb	r3, [r7, #3]
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	4603      	mov	r3, r0
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7fc fea2 	bl	8017f5e <lv_cont_set_fit4>
}
 801b21a:	bf00      	nop
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
	...

0801b224 <lv_mbox_create>:
 * @param copy pointer to a message box object, if not NULL then the new object will be copied from
 * it
 * @return pointer to the created message box
 */
lv_obj_t * lv_mbox_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b088      	sub	sp, #32
 801b228:	af02      	add	r7, sp, #8
 801b22a:	6078      	str	r0, [r7, #4]
 801b22c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("mesasge box create started");

    /*Create the ancestor message box*/
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 801b22e:	6839      	ldr	r1, [r7, #0]
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	f7fc fdc3 	bl	8017dbc <lv_cont_create>
 801b236:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_mbox);
 801b238:	697b      	ldr	r3, [r7, #20]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d100      	bne.n	801b240 <lv_mbox_create+0x1c>
 801b23e:	e7fe      	b.n	801b23e <lv_mbox_create+0x1a>
    if(new_mbox == NULL) return NULL;
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d101      	bne.n	801b24a <lv_mbox_create+0x26>
 801b246:	2300      	movs	r3, #0
 801b248:	e08c      	b.n	801b364 <lv_mbox_create+0x140>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_mbox);
 801b24a:	4b48      	ldr	r3, [pc, #288]	; (801b36c <lv_mbox_create+0x148>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d105      	bne.n	801b25e <lv_mbox_create+0x3a>
 801b252:	6978      	ldr	r0, [r7, #20]
 801b254:	f7eb ffff 	bl	8007256 <lv_obj_get_signal_cb>
 801b258:	4602      	mov	r2, r0
 801b25a:	4b44      	ldr	r3, [pc, #272]	; (801b36c <lv_mbox_create+0x148>)
 801b25c:	601a      	str	r2, [r3, #0]

    /*Allocate the message box type specific extended data*/
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 801b25e:	2110      	movs	r1, #16
 801b260:	6978      	ldr	r0, [r7, #20]
 801b262:	f7eb fe43 	bl	8006eec <lv_obj_allocate_ext_attr>
 801b266:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d100      	bne.n	801b270 <lv_mbox_create+0x4c>
 801b26e:	e7fe      	b.n	801b26e <lv_mbox_create+0x4a>
    if(ext == NULL) return NULL;
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d101      	bne.n	801b27a <lv_mbox_create+0x56>
 801b276:	2300      	movs	r3, #0
 801b278:	e074      	b.n	801b364 <lv_mbox_create+0x140>

    ext->text = NULL;
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	2200      	movs	r2, #0
 801b27e:	605a      	str	r2, [r3, #4]
    ext->btnm = NULL;
 801b280:	693b      	ldr	r3, [r7, #16]
 801b282:	2200      	movs	r2, #0
 801b284:	609a      	str	r2, [r3, #8]
#if LV_USE_ANIMATION
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 801b286:	693b      	ldr	r3, [r7, #16]
 801b288:	22c8      	movs	r2, #200	; 0xc8
 801b28a:	819a      	strh	r2, [r3, #12]
#endif

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 801b28c:	4938      	ldr	r1, [pc, #224]	; (801b370 <lv_mbox_create+0x14c>)
 801b28e:	6978      	ldr	r0, [r7, #20]
 801b290:	f7eb fe10 	bl	8006eb4 <lv_obj_set_signal_cb>

    /*Init the new message box message box*/
    if(copy == NULL) {
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d146      	bne.n	801b328 <lv_mbox_create+0x104>
        ext->text = lv_label_create(new_mbox, NULL);
 801b29a:	2100      	movs	r1, #0
 801b29c:	6978      	ldr	r0, [r7, #20]
 801b29e:	f7fe f935 	bl	801950c <lv_label_create>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	693b      	ldr	r3, [r7, #16]
 801b2a6:	605a      	str	r2, [r3, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	2101      	movs	r1, #1
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	f7fe fb56 	bl	8019960 <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	685b      	ldr	r3, [r3, #4]
 801b2b8:	2101      	movs	r1, #1
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7fe faf4 	bl	80198a8 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 801b2c0:	693b      	ldr	r3, [r7, #16]
 801b2c2:	685b      	ldr	r3, [r3, #4]
 801b2c4:	492b      	ldr	r1, [pc, #172]	; (801b374 <lv_mbox_create+0x150>)
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7fe fa52 	bl	8019770 <lv_label_set_text>

        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 801b2cc:	2103      	movs	r1, #3
 801b2ce:	6978      	ldr	r0, [r7, #20]
 801b2d0:	f7fc fe1e 	bl	8017f10 <lv_cont_set_layout>
        lv_cont_set_fit2(new_mbox, LV_FIT_NONE, LV_FIT_TIGHT);
 801b2d4:	2201      	movs	r2, #1
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	6978      	ldr	r0, [r7, #20]
 801b2da:	f7ff ff7a 	bl	801b1d2 <lv_cont_set_fit2>
        lv_obj_set_width(new_mbox, LV_DPI * 2);
 801b2de:	21c8      	movs	r1, #200	; 0xc8
 801b2e0:	6978      	ldr	r0, [r7, #20]
 801b2e2:	f7ea ffd1 	bl	8006288 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	2100      	movs	r1, #0
 801b2f0:	6978      	ldr	r0, [r7, #20]
 801b2f2:	f7ea fff3 	bl	80062dc <lv_obj_align>
        lv_obj_set_event_cb(new_mbox, lv_mbox_default_event_cb);
 801b2f6:	4920      	ldr	r1, [pc, #128]	; (801b378 <lv_mbox_create+0x154>)
 801b2f8:	6978      	ldr	r0, [r7, #20]
 801b2fa:	f7eb fd3c 	bl	8006d76 <lv_obj_set_event_cb>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801b2fe:	f003 fe45 	bl	801ef8c <lv_theme_get_current>
 801b302:	60b8      	str	r0, [r7, #8]
        if(th) {
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d008      	beq.n	801b31c <lv_mbox_create+0xf8>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->style.mbox.bg);
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801b310:	461a      	mov	r2, r3
 801b312:	2100      	movs	r1, #0
 801b314:	6978      	ldr	r0, [r7, #20]
 801b316:	f000 f921 	bl	801b55c <lv_mbox_set_style>
 801b31a:	e022      	b.n	801b362 <lv_mbox_create+0x13e>
        } else {
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 801b31c:	4a17      	ldr	r2, [pc, #92]	; (801b37c <lv_mbox_create+0x158>)
 801b31e:	2100      	movs	r1, #0
 801b320:	6978      	ldr	r0, [r7, #20]
 801b322:	f000 f91b 	bl	801b55c <lv_mbox_set_style>
 801b326:	e01c      	b.n	801b362 <lv_mbox_create+0x13e>
        }

    }
    /*Copy an existing message box*/
    else {
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b328:	6838      	ldr	r0, [r7, #0]
 801b32a:	f7eb ffac 	bl	8007286 <lv_obj_get_ext_attr>
 801b32e:	60f8      	str	r0, [r7, #12]

        ext->text = lv_label_create(new_mbox, copy_ext->text);
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	4619      	mov	r1, r3
 801b336:	6978      	ldr	r0, [r7, #20]
 801b338:	f7fe f8e8 	bl	801950c <lv_label_create>
 801b33c:	4602      	mov	r2, r0
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	605a      	str	r2, [r3, #4]

        /*Copy the buttons and the label on them*/
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	689b      	ldr	r3, [r3, #8]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d008      	beq.n	801b35c <lv_mbox_create+0x138>
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	689b      	ldr	r3, [r3, #8]
 801b34e:	4619      	mov	r1, r3
 801b350:	6978      	ldr	r0, [r7, #20]
 801b352:	f7fa fdcd 	bl	8015ef0 <lv_btnm_create>
 801b356:	4602      	mov	r2, r0
 801b358:	693b      	ldr	r3, [r7, #16]
 801b35a:	609a      	str	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_mbox);
 801b35c:	6978      	ldr	r0, [r7, #20]
 801b35e:	f7eb fc74 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("mesasge box created");

    return new_mbox;
 801b362:	697b      	ldr	r3, [r7, #20]
}
 801b364:	4618      	mov	r0, r3
 801b366:	3718      	adds	r7, #24
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}
 801b36c:	20002ad4 	.word	0x20002ad4
 801b370:	0801b721 	.word	0x0801b721
 801b374:	08029d80 	.word	0x08029d80
 801b378:	0801b9a9 	.word	0x0801b9a9
 801b37c:	20006b84 	.word	0x20006b84

0801b380 <lv_mbox_add_btns>:
 * @param mbox pointer to message box object
 * @param btn_map button descriptor (button matrix map).
 *                E.g.  a const char *txt[] = {"ok", "close", ""} (Can not be local variable)
 */
void lv_mbox_add_btns(lv_obj_t * mbox, const char ** btn_map)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b084      	sub	sp, #16
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
 801b388:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	f7eb ff7b 	bl	8007286 <lv_obj_get_ext_attr>
 801b390:	60f8      	str	r0, [r7, #12]

    /*Create a button matrix if not exists yet*/
    if(ext->btnm == NULL) {
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	689b      	ldr	r3, [r3, #8]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d12c      	bne.n	801b3f4 <lv_mbox_add_btns+0x74>
        ext->btnm = lv_btnm_create(mbox, NULL);
 801b39a:	2100      	movs	r1, #0
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f7fa fda7 	bl	8015ef0 <lv_btnm_create>
 801b3a2:	4602      	mov	r2, r0
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	609a      	str	r2, [r3, #8]

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801b3a8:	f003 fdf0 	bl	801ef8c <lv_theme_get_current>
 801b3ac:	60b8      	str	r0, [r7, #8]
        if(th) {
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d018      	beq.n	801b3e6 <lv_mbox_add_btns+0x66>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->style.mbox.btn.bg);
 801b3b4:	68bb      	ldr	r3, [r7, #8]
 801b3b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b3ba:	461a      	mov	r2, r3
 801b3bc:	2101      	movs	r1, #1
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	f000 f8cc 	bl	801b55c <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->style.mbox.btn.rel);
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b3ca:	461a      	mov	r2, r3
 801b3cc:	2102      	movs	r1, #2
 801b3ce:	6878      	ldr	r0, [r7, #4]
 801b3d0:	f000 f8c4 	bl	801b55c <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->style.mbox.btn.pr);
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801b3da:	461a      	mov	r2, r3
 801b3dc:	2103      	movs	r1, #3
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f000 f8bc 	bl	801b55c <lv_mbox_set_style>
 801b3e4:	e006      	b.n	801b3f4 <lv_mbox_add_btns+0x74>
        } else {
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	689b      	ldr	r3, [r3, #8]
 801b3ea:	4a0f      	ldr	r2, [pc, #60]	; (801b428 <lv_mbox_add_btns+0xa8>)
 801b3ec:	2100      	movs	r1, #0
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7fb f810 	bl	8016414 <lv_btnm_set_style>
        }
    }

    lv_btnm_set_map(ext->btnm, btn_map);
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	689b      	ldr	r3, [r3, #8]
 801b3f8:	6839      	ldr	r1, [r7, #0]
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	f7fa fe60 	bl	80160c0 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl_all(ext->btnm, LV_BTNM_CTRL_CLICK_TRIG | LV_BTNM_CTRL_NO_REPEAT);
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	f44f 7188 	mov.w	r1, #272	; 0x110
 801b408:	4618      	mov	r0, r3
 801b40a:	f7fb f8a6 	bl	801655a <lv_btnm_set_btn_ctrl_all>
    lv_obj_set_parent_event(ext->btnm, true);
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	689b      	ldr	r3, [r3, #8]
 801b412:	2101      	movs	r1, #1
 801b414:	4618      	mov	r0, r3
 801b416:	f7eb fc6d 	bl	8006cf4 <lv_obj_set_parent_event>

    mbox_realign(mbox);
 801b41a:	6878      	ldr	r0, [r7, #4]
 801b41c:	f000 fa52 	bl	801b8c4 <mbox_realign>
}
 801b420:	bf00      	nop
 801b422:	3710      	adds	r7, #16
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}
 801b428:	20006c38 	.word	0x20006c38

0801b42c <lv_mbox_set_text>:
 * Set the text of the message box
 * @param mbox pointer to a message box
 * @param txt a '\0' terminated character string which will be the message box text
 */
void lv_mbox_set_text(lv_obj_t * mbox, const char * txt)
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	b084      	sub	sp, #16
 801b430:	af00      	add	r7, sp, #0
 801b432:	6078      	str	r0, [r7, #4]
 801b434:	6039      	str	r1, [r7, #0]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b436:	6878      	ldr	r0, [r7, #4]
 801b438:	f7eb ff25 	bl	8007286 <lv_obj_get_ext_attr>
 801b43c:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(ext->text, txt);
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	685b      	ldr	r3, [r3, #4]
 801b442:	6839      	ldr	r1, [r7, #0]
 801b444:	4618      	mov	r0, r3
 801b446:	f7fe f993 	bl	8019770 <lv_label_set_text>

    mbox_realign(mbox);
 801b44a:	6878      	ldr	r0, [r7, #4]
 801b44c:	f000 fa3a 	bl	801b8c4 <mbox_realign>
}
 801b450:	bf00      	nop
 801b452:	3710      	adds	r7, #16
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}

0801b458 <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b08c      	sub	sp, #48	; 0x30
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
 801b460:	460b      	mov	r3, r1
 801b462:	807b      	strh	r3, [r7, #2]
#if LV_USE_ANIMATION
    if(lv_mbox_get_anim_time(mbox) != 0) {
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f000 f8ee 	bl	801b646 <lv_mbox_get_anim_time>
 801b46a:	4603      	mov	r3, r0
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d040      	beq.n	801b4f2 <lv_mbox_start_auto_close+0x9a>
        /*Add shrinking animations*/
        lv_anim_t a;
        a.var            = mbox;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	60bb      	str	r3, [r7, #8]
        a.start          = lv_obj_get_height(mbox);
 801b474:	6878      	ldr	r0, [r7, #4]
 801b476:	f7eb fe29 	bl	80070cc <lv_obj_get_height>
 801b47a:	4603      	mov	r3, r0
 801b47c:	61bb      	str	r3, [r7, #24]
        a.end            = 0;
 801b47e:	2300      	movs	r3, #0
 801b480:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_height;
 801b482:	4b32      	ldr	r3, [pc, #200]	; (801b54c <lv_mbox_start_auto_close+0xf4>)
 801b484:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801b486:	4b32      	ldr	r3, [pc, #200]	; (801b550 <lv_mbox_start_auto_close+0xf8>)
 801b488:	613b      	str	r3, [r7, #16]
        a.ready_cb       = NULL;
 801b48a:	2300      	movs	r3, #0
 801b48c:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801b48e:	887b      	ldrh	r3, [r7, #2]
 801b490:	425b      	negs	r3, r3
 801b492:	b29b      	uxth	r3, r3
 801b494:	b21b      	sxth	r3, r3
 801b496:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = lv_mbox_get_anim_time(mbox);
 801b498:	6878      	ldr	r0, [r7, #4]
 801b49a:	f000 f8d4 	bl	801b646 <lv_mbox_get_anim_time>
 801b49e:	4603      	mov	r3, r0
 801b4a0:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801b4a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b4a6:	f36f 0300 	bfc	r3, #0, #1
 801b4aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801b4b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b4b6:	f36f 0341 	bfc	r3, #1, #1
 801b4ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801b4be:	2300      	movs	r3, #0
 801b4c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801b4c2:	f107 0308 	add.w	r3, r7, #8
 801b4c6:	4618      	mov	r0, r3
 801b4c8:	f7f7 f9a8 	bl	801281c <lv_anim_create>

        a.start    = lv_obj_get_width(mbox);
 801b4cc:	6878      	ldr	r0, [r7, #4]
 801b4ce:	f7eb fdef 	bl	80070b0 <lv_obj_get_width>
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	61bb      	str	r3, [r7, #24]
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 801b4d6:	4b1f      	ldr	r3, [pc, #124]	; (801b554 <lv_mbox_start_auto_close+0xfc>)
 801b4d8:	60fb      	str	r3, [r7, #12]
        a.ready_cb = lv_mbox_close_ready_cb;
 801b4da:	4b1f      	ldr	r3, [pc, #124]	; (801b558 <lv_mbox_start_auto_close+0x100>)
 801b4dc:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 801b4de:	f107 0308 	add.w	r3, r7, #8
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	f7f7 f99a 	bl	801281c <lv_anim_create>

        /*Disable fit to let shrinking work*/
        lv_cont_set_fit(mbox, LV_FIT_NONE);
 801b4e8:	2100      	movs	r1, #0
 801b4ea:	6878      	ldr	r0, [r7, #4]
 801b4ec:	f7ff fe86 	bl	801b1fc <lv_cont_set_fit>
    }
#else
    (void)delay; /*Unused*/
    lv_obj_del(mbox);
#endif
}
 801b4f0:	e027      	b.n	801b542 <lv_mbox_start_auto_close+0xea>
        a.var            = mbox;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	60bb      	str	r3, [r7, #8]
        a.start          = 0;
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 801b4fa:	2301      	movs	r3, #1
 801b4fc:	61fb      	str	r3, [r7, #28]
        a.exec_cb        = (lv_anim_exec_xcb_t)NULL;
 801b4fe:	2300      	movs	r3, #0
 801b500:	60fb      	str	r3, [r7, #12]
        a.path_cb        = lv_anim_path_linear;
 801b502:	4b13      	ldr	r3, [pc, #76]	; (801b550 <lv_mbox_start_auto_close+0xf8>)
 801b504:	613b      	str	r3, [r7, #16]
        a.ready_cb       = lv_mbox_close_ready_cb;
 801b506:	4b14      	ldr	r3, [pc, #80]	; (801b558 <lv_mbox_start_auto_close+0x100>)
 801b508:	617b      	str	r3, [r7, #20]
        a.act_time       = -delay;
 801b50a:	887b      	ldrh	r3, [r7, #2]
 801b50c:	425b      	negs	r3, r3
 801b50e:	b29b      	uxth	r3, r3
 801b510:	b21b      	sxth	r3, r3
 801b512:	847b      	strh	r3, [r7, #34]	; 0x22
        a.time           = 0;
 801b514:	2300      	movs	r3, #0
 801b516:	843b      	strh	r3, [r7, #32]
        a.playback       = 0;
 801b518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b51c:	f36f 0300 	bfc	r3, #0, #1
 801b520:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.playback_pause = 0;
 801b524:	2300      	movs	r3, #0
 801b526:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.repeat         = 0;
 801b528:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b52c:	f36f 0341 	bfc	r3, #1, #1
 801b530:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        a.repeat_pause   = 0;
 801b534:	2300      	movs	r3, #0
 801b536:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_anim_create(&a);
 801b538:	f107 0308 	add.w	r3, r7, #8
 801b53c:	4618      	mov	r0, r3
 801b53e:	f7f7 f96d 	bl	801281c <lv_anim_create>
}
 801b542:	bf00      	nop
 801b544:	3730      	adds	r7, #48	; 0x30
 801b546:	46bd      	mov	sp, r7
 801b548:	bd80      	pop	{r7, pc}
 801b54a:	bf00      	nop
 801b54c:	080062b3 	.word	0x080062b3
 801b550:	0801296d 	.word	0x0801296d
 801b554:	08006289 	.word	0x08006289
 801b558:	0801b98f 	.word	0x0801b98f

0801b55c <lv_mbox_set_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_mbox_set_style(lv_obj_t * mbox, lv_mbox_style_t type, const lv_style_t * style)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b086      	sub	sp, #24
 801b560:	af00      	add	r7, sp, #0
 801b562:	60f8      	str	r0, [r7, #12]
 801b564:	460b      	mov	r3, r1
 801b566:	607a      	str	r2, [r7, #4]
 801b568:	72fb      	strb	r3, [r7, #11]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b56a:	68f8      	ldr	r0, [r7, #12]
 801b56c:	f7eb fe8b 	bl	8007286 <lv_obj_get_ext_attr>
 801b570:	6178      	str	r0, [r7, #20]

    switch(type) {
 801b572:	7afb      	ldrb	r3, [r7, #11]
 801b574:	2b06      	cmp	r3, #6
 801b576:	d846      	bhi.n	801b606 <lv_mbox_set_style+0xaa>
 801b578:	a201      	add	r2, pc, #4	; (adr r2, 801b580 <lv_mbox_set_style+0x24>)
 801b57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b57e:	bf00      	nop
 801b580:	0801b59d 	.word	0x0801b59d
 801b584:	0801b5a7 	.word	0x0801b5a7
 801b588:	0801b5b7 	.word	0x0801b5b7
 801b58c:	0801b5c7 	.word	0x0801b5c7
 801b590:	0801b5d7 	.word	0x0801b5d7
 801b594:	0801b5e7 	.word	0x0801b5e7
 801b598:	0801b5f7 	.word	0x0801b5f7
        case LV_MBOX_STYLE_BG: lv_obj_set_style(mbox, style); break;
 801b59c:	6879      	ldr	r1, [r7, #4]
 801b59e:	68f8      	ldr	r0, [r7, #12]
 801b5a0:	f7eb fb41 	bl	8006c26 <lv_obj_set_style>
 801b5a4:	e02f      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_BG: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style); break;
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	689b      	ldr	r3, [r3, #8]
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	2100      	movs	r1, #0
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f7fa ff30 	bl	8016414 <lv_btnm_set_style>
 801b5b4:	e027      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style); break;
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	689b      	ldr	r3, [r3, #8]
 801b5ba:	687a      	ldr	r2, [r7, #4]
 801b5bc:	2101      	movs	r1, #1
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f7fa ff28 	bl	8016414 <lv_btnm_set_style>
 801b5c4:	e01f      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style); break;
 801b5c6:	697b      	ldr	r3, [r7, #20]
 801b5c8:	689b      	ldr	r3, [r3, #8]
 801b5ca:	687a      	ldr	r2, [r7, #4]
 801b5cc:	2102      	movs	r1, #2
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7fa ff20 	bl	8016414 <lv_btnm_set_style>
 801b5d4:	e017      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 801b5d6:	697b      	ldr	r3, [r7, #20]
 801b5d8:	689b      	ldr	r3, [r3, #8]
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	2103      	movs	r1, #3
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f7fa ff18 	bl	8016414 <lv_btnm_set_style>
 801b5e4:	e00f      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	689b      	ldr	r3, [r3, #8]
 801b5ea:	687a      	ldr	r2, [r7, #4]
 801b5ec:	2104      	movs	r1, #4
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	f7fa ff10 	bl	8016414 <lv_btnm_set_style>
 801b5f4:	e007      	b.n	801b606 <lv_mbox_set_style+0xaa>
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 801b5f6:	697b      	ldr	r3, [r7, #20]
 801b5f8:	689b      	ldr	r3, [r3, #8]
 801b5fa:	687a      	ldr	r2, [r7, #4]
 801b5fc:	2105      	movs	r1, #5
 801b5fe:	4618      	mov	r0, r3
 801b600:	f7fa ff08 	bl	8016414 <lv_btnm_set_style>
 801b604:	bf00      	nop
    }

    mbox_realign(mbox);
 801b606:	68f8      	ldr	r0, [r7, #12]
 801b608:	f000 f95c 	bl	801b8c4 <mbox_realign>
}
 801b60c:	bf00      	nop
 801b60e:	3718      	adds	r7, #24
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}

0801b614 <lv_mbox_get_active_btn>:
 * Useful in the the `event_cb`.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_mbox_get_active_btn(lv_obj_t * mbox)
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b084      	sub	sp, #16
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f7eb fe32 	bl	8007286 <lv_obj_get_ext_attr>
 801b622:	60f8      	str	r0, [r7, #12]
    if(ext->btnm)
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	689b      	ldr	r3, [r3, #8]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d006      	beq.n	801b63a <lv_mbox_get_active_btn+0x26>
        return lv_btnm_get_active_btn(ext->btnm);
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	689b      	ldr	r3, [r3, #8]
 801b630:	4618      	mov	r0, r3
 801b632:	f7fa ffde 	bl	80165f2 <lv_btnm_get_active_btn>
 801b636:	4603      	mov	r3, r0
 801b638:	e001      	b.n	801b63e <lv_mbox_get_active_btn+0x2a>
    else
        return LV_BTNM_BTN_NONE;
 801b63a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801b63e:	4618      	mov	r0, r3
 801b640:	3710      	adds	r7, #16
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}

0801b646 <lv_mbox_get_anim_time>:
 * Get the animation duration (close animation time)
 * @param mbox pointer to a message box object
 * @return animation length in  milliseconds (0: no animation)
 */
uint16_t lv_mbox_get_anim_time(const lv_obj_t * mbox)
{
 801b646:	b580      	push	{r7, lr}
 801b648:	b084      	sub	sp, #16
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f7eb fe19 	bl	8007286 <lv_obj_get_ext_attr>
 801b654:	60f8      	str	r0, [r7, #12]
    return ext->anim_time;
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	899b      	ldrh	r3, [r3, #12]
#else
    (void)mbox;
    return 0;
#endif
}
 801b65a:	4618      	mov	r0, r3
 801b65c:	3710      	adds	r7, #16
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}
	...

0801b664 <lv_mbox_get_style>:
 * @param mbox pointer to a message box object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_mbox_get_style(const lv_obj_t * mbox, lv_mbox_style_t type)
{
 801b664:	b580      	push	{r7, lr}
 801b666:	b084      	sub	sp, #16
 801b668:	af00      	add	r7, sp, #0
 801b66a:	6078      	str	r0, [r7, #4]
 801b66c:	460b      	mov	r3, r1
 801b66e:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801b670:	2300      	movs	r3, #0
 801b672:	60fb      	str	r3, [r7, #12]
    lv_mbox_ext_t * ext      = lv_obj_get_ext_attr(mbox);
 801b674:	6878      	ldr	r0, [r7, #4]
 801b676:	f7eb fe06 	bl	8007286 <lv_obj_get_ext_attr>
 801b67a:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801b67c:	78fb      	ldrb	r3, [r7, #3]
 801b67e:	2b06      	cmp	r3, #6
 801b680:	d845      	bhi.n	801b70e <lv_mbox_get_style+0xaa>
 801b682:	a201      	add	r2, pc, #4	; (adr r2, 801b688 <lv_mbox_get_style+0x24>)
 801b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b688:	0801b6a5 	.word	0x0801b6a5
 801b68c:	0801b6af 	.word	0x0801b6af
 801b690:	0801b6bf 	.word	0x0801b6bf
 801b694:	0801b6cf 	.word	0x0801b6cf
 801b698:	0801b6df 	.word	0x0801b6df
 801b69c:	0801b6ef 	.word	0x0801b6ef
 801b6a0:	0801b6ff 	.word	0x0801b6ff
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 801b6a4:	6878      	ldr	r0, [r7, #4]
 801b6a6:	f7eb fd33 	bl	8007110 <lv_obj_get_style>
 801b6aa:	60f8      	str	r0, [r7, #12]
 801b6ac:	e032      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG); break;
 801b6ae:	68bb      	ldr	r3, [r7, #8]
 801b6b0:	689b      	ldr	r3, [r3, #8]
 801b6b2:	2100      	movs	r1, #0
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7fa ffcf 	bl	8016658 <lv_btnm_get_style>
 801b6ba:	60f8      	str	r0, [r7, #12]
 801b6bc:	e02a      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL); break;
 801b6be:	68bb      	ldr	r3, [r7, #8]
 801b6c0:	689b      	ldr	r3, [r3, #8]
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7fa ffc7 	bl	8016658 <lv_btnm_get_style>
 801b6ca:	60f8      	str	r0, [r7, #12]
 801b6cc:	e022      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR); break;
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	689b      	ldr	r3, [r3, #8]
 801b6d2:	2102      	movs	r1, #2
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	f7fa ffbf 	bl	8016658 <lv_btnm_get_style>
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	e01a      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL); break;
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	689b      	ldr	r3, [r3, #8]
 801b6e2:	2103      	movs	r1, #3
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7fa ffb7 	bl	8016658 <lv_btnm_get_style>
 801b6ea:	60f8      	str	r0, [r7, #12]
 801b6ec:	e012      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR); break;
 801b6ee:	68bb      	ldr	r3, [r7, #8]
 801b6f0:	689b      	ldr	r3, [r3, #8]
 801b6f2:	2104      	movs	r1, #4
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7fa ffaf 	bl	8016658 <lv_btnm_get_style>
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	e00a      	b.n	801b714 <lv_mbox_get_style+0xb0>
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	689b      	ldr	r3, [r3, #8]
 801b702:	2105      	movs	r1, #5
 801b704:	4618      	mov	r0, r3
 801b706:	f7fa ffa7 	bl	8016658 <lv_btnm_get_style>
 801b70a:	60f8      	str	r0, [r7, #12]
 801b70c:	e002      	b.n	801b714 <lv_mbox_get_style+0xb0>
        default: style = NULL; break;
 801b70e:	2300      	movs	r3, #0
 801b710:	60fb      	str	r3, [r7, #12]
 801b712:	bf00      	nop
    }

    return style;
 801b714:	68fb      	ldr	r3, [r7, #12]
}
 801b716:	4618      	mov	r0, r3
 801b718:	3710      	adds	r7, #16
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bd80      	pop	{r7, pc}
 801b71e:	bf00      	nop

0801b720 <lv_mbox_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_mbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)
{
 801b720:	b590      	push	{r4, r7, lr}
 801b722:	b08d      	sub	sp, #52	; 0x34
 801b724:	af00      	add	r7, sp, #0
 801b726:	60f8      	str	r0, [r7, #12]
 801b728:	460b      	mov	r3, r1
 801b72a:	607a      	str	r2, [r7, #4]
 801b72c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /*Translate LV_KEY_UP/DOWN to LV_KEY_LEFT/RIGHT */
    char c_trans = 0;
 801b72e:	2300      	movs	r3, #0
 801b730:	75fb      	strb	r3, [r7, #23]
    if(sign == LV_SIGNAL_CONTROL) {
 801b732:	7afb      	ldrb	r3, [r7, #11]
 801b734:	2b11      	cmp	r3, #17
 801b736:	d10f      	bne.n	801b758 <lv_mbox_signal+0x38>
        c_trans = *((char *)param);
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	781b      	ldrb	r3, [r3, #0]
 801b73c:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 801b73e:	7dfb      	ldrb	r3, [r7, #23]
 801b740:	2b12      	cmp	r3, #18
 801b742:	d101      	bne.n	801b748 <lv_mbox_signal+0x28>
 801b744:	2314      	movs	r3, #20
 801b746:	75fb      	strb	r3, [r7, #23]
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 801b748:	7dfb      	ldrb	r3, [r7, #23]
 801b74a:	2b11      	cmp	r3, #17
 801b74c:	d101      	bne.n	801b752 <lv_mbox_signal+0x32>
 801b74e:	2313      	movs	r3, #19
 801b750:	75fb      	strb	r3, [r7, #23]

        param = &c_trans;
 801b752:	f107 0317 	add.w	r3, r7, #23
 801b756:	607b      	str	r3, [r7, #4]
    }

    /* Include the ancient signal function */
    res = ancestor_signal(mbox, sign, param);
 801b758:	4b58      	ldr	r3, [pc, #352]	; (801b8bc <lv_mbox_signal+0x19c>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	7af9      	ldrb	r1, [r7, #11]
 801b75e:	687a      	ldr	r2, [r7, #4]
 801b760:	68f8      	ldr	r0, [r7, #12]
 801b762:	4798      	blx	r3
 801b764:	4603      	mov	r3, r0
 801b766:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(res != LV_RES_OK) return res;
 801b76a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b76e:	2b01      	cmp	r3, #1
 801b770:	d002      	beq.n	801b778 <lv_mbox_signal+0x58>
 801b772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b776:	e09c      	b.n	801b8b2 <lv_mbox_signal+0x192>

    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b778:	68f8      	ldr	r0, [r7, #12]
 801b77a:	f7eb fd84 	bl	8007286 <lv_obj_get_ext_attr>
 801b77e:	62b8      	str	r0, [r7, #40]	; 0x28
    if(sign == LV_SIGNAL_CORD_CHG) {
 801b780:	7afb      	ldrb	r3, [r7, #11]
 801b782:	2b02      	cmp	r3, #2
 801b784:	d10f      	bne.n	801b7a6 <lv_mbox_signal+0x86>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 801b786:	68f8      	ldr	r0, [r7, #12]
 801b788:	f7eb fc92 	bl	80070b0 <lv_obj_get_width>
 801b78c:	4603      	mov	r3, r0
 801b78e:	461c      	mov	r4, r3
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	f7ff fd07 	bl	801b1a4 <lv_area_get_width>
 801b796:	4603      	mov	r3, r0
 801b798:	429c      	cmp	r4, r3
 801b79a:	f000 8088 	beq.w	801b8ae <lv_mbox_signal+0x18e>
            mbox_realign(mbox);
 801b79e:	68f8      	ldr	r0, [r7, #12]
 801b7a0:	f000 f890 	bl	801b8c4 <mbox_realign>
 801b7a4:	e083      	b.n	801b8ae <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801b7a6:	7afb      	ldrb	r3, [r7, #11]
 801b7a8:	2b04      	cmp	r3, #4
 801b7aa:	d103      	bne.n	801b7b4 <lv_mbox_signal+0x94>
        mbox_realign(mbox);
 801b7ac:	68f8      	ldr	r0, [r7, #12]
 801b7ae:	f000 f889 	bl	801b8c4 <mbox_realign>
 801b7b2:	e07c      	b.n	801b8ae <lv_mbox_signal+0x18e>
    } else if(sign == LV_SIGNAL_RELEASED) {
 801b7b4:	7afb      	ldrb	r3, [r7, #11]
 801b7b6:	2b0a      	cmp	r3, #10
 801b7b8:	d117      	bne.n	801b7ea <lv_mbox_signal+0xca>
        if(ext->btnm) {
 801b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7bc:	689b      	ldr	r3, [r3, #8]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d075      	beq.n	801b8ae <lv_mbox_signal+0x18e>
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 801b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7c4:	689b      	ldr	r3, [r3, #8]
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7fa ff13 	bl	80165f2 <lv_btnm_get_active_btn>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	613b      	str	r3, [r7, #16]
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d069      	beq.n	801b8ae <lv_mbox_signal+0x18e>
 801b7da:	f107 0310 	add.w	r3, r7, #16
 801b7de:	461a      	mov	r2, r3
 801b7e0:	210e      	movs	r1, #14
 801b7e2:	68f8      	ldr	r0, [r7, #12]
 801b7e4:	f7eb fad5 	bl	8006d92 <lv_event_send>
 801b7e8:	e061      	b.n	801b8ae <lv_mbox_signal+0x18e>
        }
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL ||
 801b7ea:	7afb      	ldrb	r3, [r7, #11]
 801b7ec:	2b0f      	cmp	r3, #15
 801b7ee:	d008      	beq.n	801b802 <lv_mbox_signal+0xe2>
 801b7f0:	7afb      	ldrb	r3, [r7, #11]
 801b7f2:	2b10      	cmp	r3, #16
 801b7f4:	d005      	beq.n	801b802 <lv_mbox_signal+0xe2>
 801b7f6:	7afb      	ldrb	r3, [r7, #11]
 801b7f8:	2b11      	cmp	r3, #17
 801b7fa:	d002      	beq.n	801b802 <lv_mbox_signal+0xe2>
 801b7fc:	7afb      	ldrb	r3, [r7, #11]
 801b7fe:	2b12      	cmp	r3, #18
 801b800:	d132      	bne.n	801b868 <lv_mbox_signal+0x148>
              sign == LV_SIGNAL_GET_EDITABLE) {
        if(ext->btnm) {
 801b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b804:	689b      	ldr	r3, [r3, #8]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d007      	beq.n	801b81a <lv_mbox_signal+0xfa>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 801b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b80c:	689b      	ldr	r3, [r3, #8]
 801b80e:	69db      	ldr	r3, [r3, #28]
 801b810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b812:	6890      	ldr	r0, [r2, #8]
 801b814:	7af9      	ldrb	r1, [r7, #11]
 801b816:	687a      	ldr	r2, [r7, #4]
 801b818:	4798      	blx	r3
        }

        /* The button matrix with ENCODER input supposes it's in a group but in this case it isn't
         * (Only the message box's container) So so some actions here instead*/
        if(sign == LV_SIGNAL_FOCUS) {
 801b81a:	7afb      	ldrb	r3, [r7, #11]
 801b81c:	2b0f      	cmp	r3, #15
 801b81e:	d145      	bne.n	801b8ac <lv_mbox_signal+0x18c>
#if LV_USE_GROUP
            lv_indev_t * indev         = lv_indev_get_act();
 801b820:	f7e9 fe7c 	bl	800551c <lv_indev_get_act>
 801b824:	6238      	str	r0, [r7, #32]
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b826:	6a38      	ldr	r0, [r7, #32]
 801b828:	f7e9 fe84 	bl	8005534 <lv_indev_get_type>
 801b82c:	4603      	mov	r3, r0
 801b82e:	77fb      	strb	r3, [r7, #31]
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801b830:	7ffb      	ldrb	r3, [r7, #31]
 801b832:	2b04      	cmp	r3, #4
 801b834:	d13a      	bne.n	801b8ac <lv_mbox_signal+0x18c>
                /*In navigation mode don't select any button but in edit mode select the fist*/
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 801b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b838:	689b      	ldr	r3, [r3, #8]
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7eb fd23 	bl	8007286 <lv_obj_get_ext_attr>
 801b840:	61b8      	str	r0, [r7, #24]
                if(lv_group_get_editing(lv_obj_get_group(mbox)))
 801b842:	68f8      	ldr	r0, [r7, #12]
 801b844:	f7eb fd2b 	bl	800729e <lv_obj_get_group>
 801b848:	4603      	mov	r3, r0
 801b84a:	4618      	mov	r0, r3
 801b84c:	f7e9 fd21 	bl	8005292 <lv_group_get_editing>
 801b850:	4603      	mov	r3, r0
 801b852:	2b00      	cmp	r3, #0
 801b854:	d003      	beq.n	801b85e <lv_mbox_signal+0x13e>
                    btnm_ext->btn_id_pr = 0;
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	2200      	movs	r2, #0
 801b85a:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801b85c:	e026      	b.n	801b8ac <lv_mbox_signal+0x18c>
                else
                    btnm_ext->btn_id_pr = LV_BTNM_BTN_NONE;
 801b85e:	69bb      	ldr	r3, [r7, #24]
 801b860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b864:	845a      	strh	r2, [r3, #34]	; 0x22
        if(sign == LV_SIGNAL_FOCUS) {
 801b866:	e021      	b.n	801b8ac <lv_mbox_signal+0x18c>
            }
#endif
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801b868:	7afb      	ldrb	r3, [r7, #11]
 801b86a:	2b06      	cmp	r3, #6
 801b86c:	d11f      	bne.n	801b8ae <lv_mbox_signal+0x18e>
        lv_obj_type_t * buf = param;
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b872:	2300      	movs	r3, #0
 801b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b878:	e00b      	b.n	801b892 <lv_mbox_signal+0x172>
            if(buf->type[i] == NULL) break;
 801b87a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d009      	beq.n	801b89c <lv_mbox_signal+0x17c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801b888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b88c:	3301      	adds	r3, #1
 801b88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b896:	2b06      	cmp	r3, #6
 801b898:	d9ef      	bls.n	801b87a <lv_mbox_signal+0x15a>
 801b89a:	e000      	b.n	801b89e <lv_mbox_signal+0x17e>
            if(buf->type[i] == NULL) break;
 801b89c:	bf00      	nop
        }
        buf->type[i] = "lv_mbox";
 801b89e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8a4:	4906      	ldr	r1, [pc, #24]	; (801b8c0 <lv_mbox_signal+0x1a0>)
 801b8a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801b8aa:	e000      	b.n	801b8ae <lv_mbox_signal+0x18e>
        if(sign == LV_SIGNAL_FOCUS) {
 801b8ac:	bf00      	nop
    }

    return res;
 801b8ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	3734      	adds	r7, #52	; 0x34
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	bd90      	pop	{r4, r7, pc}
 801b8ba:	bf00      	nop
 801b8bc:	20002ad4 	.word	0x20002ad4
 801b8c0:	08029d88 	.word	0x08029d88

0801b8c4 <mbox_realign>:
/**
 * Resize the button holder to fit
 * @param mbox pointer to message box object
 */
static void mbox_realign(lv_obj_t * mbox)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b088      	sub	sp, #32
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801b8cc:	6878      	ldr	r0, [r7, #4]
 801b8ce:	f7eb fcda 	bl	8007286 <lv_obj_get_ext_attr>
 801b8d2:	61f8      	str	r0, [r7, #28]

    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 801b8d4:	2100      	movs	r1, #0
 801b8d6:	6878      	ldr	r0, [r7, #4]
 801b8d8:	f7ff fec4 	bl	801b664 <lv_mbox_get_style>
 801b8dc:	61b8      	str	r0, [r7, #24]
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 801b8de:	6878      	ldr	r0, [r7, #4]
 801b8e0:	f7eb fbe6 	bl	80070b0 <lv_obj_get_width>
 801b8e4:	4603      	mov	r3, r0
 801b8e6:	b29a      	uxth	r2, r3
 801b8e8:	69bb      	ldr	r3, [r7, #24]
 801b8ea:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b8ee:	b29b      	uxth	r3, r3
 801b8f0:	1ad3      	subs	r3, r2, r3
 801b8f2:	b29a      	uxth	r2, r3
 801b8f4:	69bb      	ldr	r3, [r7, #24]
 801b8f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801b8fa:	b29b      	uxth	r3, r3
 801b8fc:	1ad3      	subs	r3, r2, r3
 801b8fe:	b29b      	uxth	r3, r3
 801b900:	82fb      	strh	r3, [r7, #22]

    if(ext->text) {
 801b902:	69fb      	ldr	r3, [r7, #28]
 801b904:	685b      	ldr	r3, [r3, #4]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d007      	beq.n	801b91a <mbox_realign+0x56>
        lv_obj_set_width(ext->text, w);
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b912:	4611      	mov	r1, r2
 801b914:	4618      	mov	r0, r3
 801b916:	f7ea fcb7 	bl	8006288 <lv_obj_set_width>
    }

    if(ext->btnm) {
 801b91a:	69fb      	ldr	r3, [r7, #28]
 801b91c:	689b      	ldr	r3, [r3, #8]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d031      	beq.n	801b986 <mbox_realign+0xc2>
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801b922:	2101      	movs	r1, #1
 801b924:	6878      	ldr	r0, [r7, #4]
 801b926:	f7ff fe9d 	bl	801b664 <lv_mbox_get_style>
 801b92a:	6138      	str	r0, [r7, #16]
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 801b92c:	2102      	movs	r1, #2
 801b92e:	6878      	ldr	r0, [r7, #4]
 801b930:	f7ff fe98 	bl	801b664 <lv_mbox_get_style>
 801b934:	60f8      	str	r0, [r7, #12]
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b93a:	4618      	mov	r0, r3
 801b93c:	f7ff fc26 	bl	801b18c <lv_font_get_line_height>
 801b940:	4603      	mov	r3, r0
 801b942:	817b      	strh	r3, [r7, #10]
        lv_obj_set_size(ext->btnm, w,
 801b944:	69fb      	ldr	r3, [r7, #28]
 801b946:	6898      	ldr	r0, [r3, #8]
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b94e:	b29a      	uxth	r2, r3
 801b950:	897b      	ldrh	r3, [r7, #10]
 801b952:	4413      	add	r3, r2
 801b954:	b29a      	uxth	r2, r3
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b95c:	b29b      	uxth	r3, r3
 801b95e:	4413      	add	r3, r2
 801b960:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801b962:	693b      	ldr	r3, [r7, #16]
 801b964:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801b968:	b29b      	uxth	r3, r3
                        font_h + btn_rel_style->body.padding.top + btn_rel_style->body.padding.bottom +
 801b96a:	4413      	add	r3, r2
 801b96c:	b29a      	uxth	r2, r3
                            btn_bg_style->body.padding.top + btn_bg_style->body.padding.bottom);
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801b974:	b29b      	uxth	r3, r3
 801b976:	4413      	add	r3, r2
 801b978:	b29b      	uxth	r3, r3
        lv_obj_set_size(ext->btnm, w,
 801b97a:	b21a      	sxth	r2, r3
 801b97c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b980:	4619      	mov	r1, r3
 801b982:	f7ea fc08 	bl	8006196 <lv_obj_set_size>
    }
}
 801b986:	bf00      	nop
 801b988:	3720      	adds	r7, #32
 801b98a:	46bd      	mov	sp, r7
 801b98c:	bd80      	pop	{r7, pc}

0801b98e <lv_mbox_close_ready_cb>:

#if LV_USE_ANIMATION
static void lv_mbox_close_ready_cb(lv_anim_t * a)
{
 801b98e:	b580      	push	{r7, lr}
 801b990:	b082      	sub	sp, #8
 801b992:	af00      	add	r7, sp, #0
 801b994:	6078      	str	r0, [r7, #4]
    lv_obj_del(a->var);
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7ea f992 	bl	8005cc4 <lv_obj_del>
}
 801b9a0:	bf00      	nop
 801b9a2:	3708      	adds	r7, #8
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}

0801b9a8 <lv_mbox_default_event_cb>:
#endif

static void lv_mbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b084      	sub	sp, #16
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	70fb      	strb	r3, [r7, #3]
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801b9b4:	78fb      	ldrb	r3, [r7, #3]
 801b9b6:	2b0e      	cmp	r3, #14
 801b9b8:	d10e      	bne.n	801b9d8 <lv_mbox_default_event_cb+0x30>

    uint32_t btn_id = lv_mbox_get_active_btn(mbox);
 801b9ba:	6878      	ldr	r0, [r7, #4]
 801b9bc:	f7ff fe2a 	bl	801b614 <lv_mbox_get_active_btn>
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	60fb      	str	r3, [r7, #12]
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d006      	beq.n	801b9dc <lv_mbox_default_event_cb+0x34>

    lv_mbox_start_auto_close(mbox, 0);
 801b9ce:	2100      	movs	r1, #0
 801b9d0:	6878      	ldr	r0, [r7, #4]
 801b9d2:	f7ff fd41 	bl	801b458 <lv_mbox_start_auto_close>
 801b9d6:	e002      	b.n	801b9de <lv_mbox_default_event_cb+0x36>
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801b9d8:	bf00      	nop
 801b9da:	e000      	b.n	801b9de <lv_mbox_default_event_cb+0x36>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801b9dc:	bf00      	nop
}
 801b9de:	3710      	adds	r7, #16
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	bd80      	pop	{r7, pc}

0801b9e4 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	b082      	sub	sp, #8
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
 801b9ec:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801b9ee:	2208      	movs	r2, #8
 801b9f0:	6839      	ldr	r1, [r7, #0]
 801b9f2:	6878      	ldr	r0, [r7, #4]
 801b9f4:	f00b fc16 	bl	8027224 <memcpy>
}
 801b9f8:	bf00      	nop
 801b9fa:	3708      	adds	r7, #8
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bd80      	pop	{r7, pc}

0801ba00 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801ba00:	b480      	push	{r7}
 801ba02:	b083      	sub	sp, #12
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba0e:	b29a      	uxth	r2, r3
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba16:	b29b      	uxth	r3, r3
 801ba18:	1ad3      	subs	r3, r2, r3
 801ba1a:	b29b      	uxth	r3, r3
 801ba1c:	3301      	adds	r3, #1
 801ba1e:	b29b      	uxth	r3, r3
 801ba20:	b21b      	sxth	r3, r3
}
 801ba22:	4618      	mov	r0, r3
 801ba24:	370c      	adds	r7, #12
 801ba26:	46bd      	mov	sp, r7
 801ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba2c:	4770      	bx	lr

0801ba2e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801ba2e:	b480      	push	{r7}
 801ba30:	b083      	sub	sp, #12
 801ba32:	af00      	add	r7, sp, #0
 801ba34:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ba3c:	b29a      	uxth	r2, r3
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	1ad3      	subs	r3, r2, r3
 801ba48:	b29b      	uxth	r3, r3
 801ba4a:	3301      	adds	r3, #1
 801ba4c:	b29b      	uxth	r3, r3
 801ba4e:	b21b      	sxth	r3, r3
}
 801ba50:	4618      	mov	r0, r3
 801ba52:	370c      	adds	r7, #12
 801ba54:	46bd      	mov	sp, r7
 801ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5a:	4770      	bx	lr

0801ba5c <lv_page_get_scrl_width>:
 * Get width of the scrollable part of a page
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b082      	sub	sp, #8
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
    return lv_obj_get_width(lv_page_get_scrl(page));
 801ba64:	6878      	ldr	r0, [r7, #4]
 801ba66:	f000 fa4d 	bl	801bf04 <lv_page_get_scrl>
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	f7eb fb1f 	bl	80070b0 <lv_obj_get_width>
 801ba72:	4603      	mov	r3, r0
}
 801ba74:	4618      	mov	r0, r3
 801ba76:	3708      	adds	r7, #8
 801ba78:	46bd      	mov	sp, r7
 801ba7a:	bd80      	pop	{r7, pc}

0801ba7c <lv_page_get_scrl_fit_left>:
 * Get the left fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	f000 fa3d 	bl	801bf04 <lv_page_get_scrl>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f7fc fade 	bl	801804e <lv_cont_get_fit_left>
 801ba92:	4603      	mov	r3, r0
}
 801ba94:	4618      	mov	r0, r3
 801ba96:	3708      	adds	r7, #8
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}

0801ba9c <lv_page_get_scrl_fit_top>:
 * Get the top fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b082      	sub	sp, #8
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f000 fa2d 	bl	801bf04 <lv_page_get_scrl>
 801baaa:	4603      	mov	r3, r0
 801baac:	4618      	mov	r0, r3
 801baae:	f7fc fadf 	bl	8018070 <lv_cont_get_fit_top>
 801bab2:	4603      	mov	r3, r0
}
 801bab4:	4618      	mov	r0, r3
 801bab6:	3708      	adds	r7, #8
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}

0801babc <lv_page_create>:
 * @param par pointer to an object, it will be the parent of the new page
 * @param copy pointer to a page object, if not NULL then the new object will be copied from it
 * @return pointer to the created page
 */
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b088      	sub	sp, #32
 801bac0:	af02      	add	r7, sp, #8
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("page create started");

    /*Create the ancestor object*/
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801bac6:	6839      	ldr	r1, [r7, #0]
 801bac8:	6878      	ldr	r0, [r7, #4]
 801baca:	f7fc f977 	bl	8017dbc <lv_cont_create>
 801bace:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_page);
 801bad0:	697b      	ldr	r3, [r7, #20]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d100      	bne.n	801bad8 <lv_page_create+0x1c>
 801bad6:	e7fe      	b.n	801bad6 <lv_page_create+0x1a>
    if(new_page == NULL) return NULL;
 801bad8:	697b      	ldr	r3, [r7, #20]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d101      	bne.n	801bae2 <lv_page_create+0x26>
 801bade:	2300      	movs	r3, #0
 801bae0:	e143      	b.n	801bd6a <lv_page_create+0x2ae>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 801bae2:	4ba4      	ldr	r3, [pc, #656]	; (801bd74 <lv_page_create+0x2b8>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d105      	bne.n	801baf6 <lv_page_create+0x3a>
 801baea:	6978      	ldr	r0, [r7, #20]
 801baec:	f7eb fbb3 	bl	8007256 <lv_obj_get_signal_cb>
 801baf0:	4602      	mov	r2, r0
 801baf2:	4ba0      	ldr	r3, [pc, #640]	; (801bd74 <lv_page_create+0x2b8>)
 801baf4:	601a      	str	r2, [r3, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 801baf6:	4ba0      	ldr	r3, [pc, #640]	; (801bd78 <lv_page_create+0x2bc>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d105      	bne.n	801bb0a <lv_page_create+0x4e>
 801bafe:	6978      	ldr	r0, [r7, #20]
 801bb00:	f7eb fbb5 	bl	800726e <lv_obj_get_design_cb>
 801bb04:	4602      	mov	r2, r0
 801bb06:	4b9c      	ldr	r3, [pc, #624]	; (801bd78 <lv_page_create+0x2bc>)
 801bb08:	601a      	str	r2, [r3, #0]

    /*Allocate the object type specific extended data*/
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 801bb0a:	2130      	movs	r1, #48	; 0x30
 801bb0c:	6978      	ldr	r0, [r7, #20]
 801bb0e:	f7eb f9ed 	bl	8006eec <lv_obj_allocate_ext_attr>
 801bb12:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801bb14:	693b      	ldr	r3, [r7, #16]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d100      	bne.n	801bb1c <lv_page_create+0x60>
 801bb1a:	e7fe      	b.n	801bb1a <lv_page_create+0x5e>
    if(ext == NULL) return NULL;
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d101      	bne.n	801bb26 <lv_page_create+0x6a>
 801bb22:	2300      	movs	r3, #0
 801bb24:	e121      	b.n	801bd6a <lv_page_create+0x2ae>

    ext->scrl        = NULL;
 801bb26:	693b      	ldr	r3, [r7, #16]
 801bb28:	2200      	movs	r2, #0
 801bb2a:	605a      	str	r2, [r3, #4]
    ext->sb.hor_draw = 0;
 801bb2c:	693a      	ldr	r2, [r7, #16]
 801bb2e:	7f13      	ldrb	r3, [r2, #28]
 801bb30:	f36f 0300 	bfc	r3, #0, #1
 801bb34:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801bb36:	693a      	ldr	r2, [r7, #16]
 801bb38:	7f13      	ldrb	r3, [r2, #28]
 801bb3a:	f36f 0341 	bfc	r3, #1, #1
 801bb3e:	7713      	strb	r3, [r2, #28]
    ext->sb.style    = &lv_style_pretty;
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	4a8e      	ldr	r2, [pc, #568]	; (801bd7c <lv_page_create+0x2c0>)
 801bb44:	609a      	str	r2, [r3, #8]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 801bb46:	693a      	ldr	r2, [r7, #16]
 801bb48:	7f13      	ldrb	r3, [r2, #28]
 801bb4a:	2103      	movs	r1, #3
 801bb4c:	f361 0384 	bfi	r3, r1, #2, #3
 801bb50:	7713      	strb	r3, [r2, #28]
#if LV_USE_ANIMATION
    ext->edge_flash.enabled   = 0;
 801bb52:	693a      	ldr	r2, [r7, #16]
 801bb54:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb58:	f36f 0300 	bfc	r3, #0, #1
 801bb5c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801bb60:	693a      	ldr	r2, [r7, #16]
 801bb62:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb66:	f36f 0382 	bfc	r3, #2, #1
 801bb6a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.top_ip    = 0;
 801bb6e:	693a      	ldr	r2, [r7, #16]
 801bb70:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb74:	f36f 0341 	bfc	r3, #1, #1
 801bb78:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801bb7c:	693a      	ldr	r2, [r7, #16]
 801bb7e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb82:	f36f 1304 	bfc	r3, #4, #1
 801bb86:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801bb8a:	693a      	ldr	r2, [r7, #16]
 801bb8c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801bb90:	f36f 03c3 	bfc	r3, #3, #1
 801bb94:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.state     = 0;
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	841a      	strh	r2, [r3, #32]
    ext->edge_flash.style     = &lv_style_plain_color;
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	4a77      	ldr	r2, [pc, #476]	; (801bd80 <lv_page_create+0x2c4>)
 801bba2:	625a      	str	r2, [r3, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801bbaa:	859a      	strh	r2, [r3, #44]	; 0x2c
#endif
    ext->scroll_prop    = 0;
 801bbac:	693a      	ldr	r2, [r7, #16]
 801bbae:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801bbb2:	f36f 0300 	bfc	r3, #0, #1
 801bbb6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    ext->scroll_prop_ip = 0;
 801bbba:	693a      	ldr	r2, [r7, #16]
 801bbbc:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801bbc0:	f36f 0341 	bfc	r3, #1, #1
 801bbc4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

    /*Init the new page object*/
    if(copy == NULL) {
 801bbc8:	683b      	ldr	r3, [r7, #0]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	f040 8084 	bne.w	801bcd8 <lv_page_create+0x21c>
        ext->scrl = lv_cont_create(new_page, NULL);
 801bbd0:	2100      	movs	r1, #0
 801bbd2:	6978      	ldr	r0, [r7, #20]
 801bbd4:	f7fc f8f2 	bl	8017dbc <lv_cont_create>
 801bbd8:	4602      	mov	r2, r0
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	685b      	ldr	r3, [r3, #4]
 801bbe2:	4968      	ldr	r1, [pc, #416]	; (801bd84 <lv_page_create+0x2c8>)
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7eb f965 	bl	8006eb4 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 801bbea:	693b      	ldr	r3, [r7, #16]
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	4966      	ldr	r1, [pc, #408]	; (801bd88 <lv_page_create+0x2cc>)
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f7eb f96d 	bl	8006ed0 <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 801bbf6:	693b      	ldr	r3, [r7, #16]
 801bbf8:	685b      	ldr	r3, [r3, #4]
 801bbfa:	2101      	movs	r1, #1
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7eb f84c 	bl	8006c9a <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 801bc02:	693b      	ldr	r3, [r7, #16]
 801bc04:	685b      	ldr	r3, [r3, #4]
 801bc06:	2101      	movs	r1, #1
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7eb f85f 	bl	8006ccc <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801bc0e:	693b      	ldr	r3, [r7, #16]
 801bc10:	685b      	ldr	r3, [r3, #4]
 801bc12:	2112      	movs	r1, #18
 801bc14:	4618      	mov	r0, r3
 801bc16:	f7eb f881 	bl	8006d1c <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 801bc1a:	693b      	ldr	r3, [r7, #16]
 801bc1c:	6858      	ldr	r0, [r3, #4]
 801bc1e:	2303      	movs	r3, #3
 801bc20:	9300      	str	r3, [sp, #0]
 801bc22:	2303      	movs	r3, #3
 801bc24:	2203      	movs	r2, #3
 801bc26:	2103      	movs	r1, #3
 801bc28:	f7fc f999 	bl	8017f5e <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801bc2c:	693b      	ldr	r3, [r7, #16]
 801bc2e:	685b      	ldr	r3, [r3, #4]
 801bc30:	4956      	ldr	r1, [pc, #344]	; (801bd8c <lv_page_create+0x2d0>)
 801bc32:	4618      	mov	r0, r3
 801bc34:	f7eb f89f 	bl	8006d76 <lv_obj_set_event_cb>
                                                              object by default for convenience */

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801bc38:	4955      	ldr	r1, [pc, #340]	; (801bd90 <lv_page_create+0x2d4>)
 801bc3a:	6978      	ldr	r0, [r7, #20]
 801bc3c:	f7eb f93a 	bl	8006eb4 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801bc40:	4954      	ldr	r1, [pc, #336]	; (801bd94 <lv_page_create+0x2d8>)
 801bc42:	6978      	ldr	r0, [r7, #20]
 801bc44:	f7eb f944 	bl	8006ed0 <lv_obj_set_design_cb>

        lv_page_set_sb_mode(new_page, ext->sb.mode);
 801bc48:	693b      	ldr	r3, [r7, #16]
 801bc4a:	7f1b      	ldrb	r3, [r3, #28]
 801bc4c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bc50:	b2db      	uxtb	r3, r3
 801bc52:	4619      	mov	r1, r3
 801bc54:	6978      	ldr	r0, [r7, #20]
 801bc56:	f000 f8a3 	bl	801bda0 <lv_page_set_sb_mode>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801bc5a:	f003 f997 	bl	801ef8c <lv_theme_get_current>
 801bc5e:	60b8      	str	r0, [r7, #8]
        if(th) {
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d028      	beq.n	801bcb8 <lv_page_create+0x1fc>
            if(par == NULL) { /*Different styles if it is screen*/
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d10c      	bne.n	801bc86 <lv_page_create+0x1ca>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 801bc6c:	68bb      	ldr	r3, [r7, #8]
 801bc6e:	685b      	ldr	r3, [r3, #4]
 801bc70:	461a      	mov	r2, r3
 801bc72:	2100      	movs	r1, #0
 801bc74:	6978      	ldr	r0, [r7, #20]
 801bc76:	f000 f8f3 	bl	801be60 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 801bc7a:	4a47      	ldr	r2, [pc, #284]	; (801bd98 <lv_page_create+0x2dc>)
 801bc7c:	2101      	movs	r1, #1
 801bc7e:	6978      	ldr	r0, [r7, #20]
 801bc80:	f000 f8ee 	bl	801be60 <lv_page_set_style>
 801bc84:	e00f      	b.n	801bca6 <lv_page_create+0x1ea>
            } else {
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801bc8c:	461a      	mov	r2, r3
 801bc8e:	2100      	movs	r1, #0
 801bc90:	6978      	ldr	r0, [r7, #20]
 801bc92:	f000 f8e5 	bl	801be60 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	2101      	movs	r1, #1
 801bca0:	6978      	ldr	r0, [r7, #20]
 801bca2:	f000 f8dd 	bl	801be60 <lv_page_set_style>
            }
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801bcac:	461a      	mov	r2, r3
 801bcae:	2102      	movs	r1, #2
 801bcb0:	6978      	ldr	r0, [r7, #20]
 801bcb2:	f000 f8d5 	bl	801be60 <lv_page_set_style>
 801bcb6:	e054      	b.n	801bd62 <lv_page_create+0x2a6>
        } else {
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801bcb8:	4a38      	ldr	r2, [pc, #224]	; (801bd9c <lv_page_create+0x2e0>)
 801bcba:	2100      	movs	r1, #0
 801bcbc:	6978      	ldr	r0, [r7, #20]
 801bcbe:	f000 f8cf 	bl	801be60 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 801bcc2:	4a2e      	ldr	r2, [pc, #184]	; (801bd7c <lv_page_create+0x2c0>)
 801bcc4:	2101      	movs	r1, #1
 801bcc6:	6978      	ldr	r0, [r7, #20]
 801bcc8:	f000 f8ca 	bl	801be60 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801bccc:	4a33      	ldr	r2, [pc, #204]	; (801bd9c <lv_page_create+0x2e0>)
 801bcce:	2102      	movs	r1, #2
 801bcd0:	6978      	ldr	r0, [r7, #20]
 801bcd2:	f000 f8c5 	bl	801be60 <lv_page_set_style>
 801bcd6:	e044      	b.n	801bd62 <lv_page_create+0x2a6>
        }

    } else {
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801bcd8:	6838      	ldr	r0, [r7, #0]
 801bcda:	f7eb fad4 	bl	8007286 <lv_obj_get_ext_attr>
 801bcde:	60f8      	str	r0, [r7, #12]
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	685b      	ldr	r3, [r3, #4]
 801bce4:	4619      	mov	r1, r3
 801bce6:	6978      	ldr	r0, [r7, #20]
 801bce8:	f7fc f868 	bl	8017dbc <lv_cont_create>
 801bcec:	4602      	mov	r2, r0
 801bcee:	693b      	ldr	r3, [r7, #16]
 801bcf0:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801bcf2:	693b      	ldr	r3, [r7, #16]
 801bcf4:	685b      	ldr	r3, [r3, #4]
 801bcf6:	4923      	ldr	r1, [pc, #140]	; (801bd84 <lv_page_create+0x2c8>)
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7eb f8db 	bl	8006eb4 <lv_obj_set_signal_cb>

        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	7f1b      	ldrb	r3, [r3, #28]
 801bd02:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bd06:	b2db      	uxtb	r3, r3
 801bd08:	4619      	mov	r1, r3
 801bd0a:	6978      	ldr	r0, [r7, #20]
 801bd0c:	f000 f848 	bl	801bda0 <lv_page_set_sb_mode>

        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 801bd10:	2100      	movs	r1, #0
 801bd12:	6838      	ldr	r0, [r7, #0]
 801bd14:	f000 f904 	bl	801bf20 <lv_page_get_style>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	461a      	mov	r2, r3
 801bd1c:	2100      	movs	r1, #0
 801bd1e:	6978      	ldr	r0, [r7, #20]
 801bd20:	f000 f89e 	bl	801be60 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 801bd24:	2101      	movs	r1, #1
 801bd26:	6838      	ldr	r0, [r7, #0]
 801bd28:	f000 f8fa 	bl	801bf20 <lv_page_get_style>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	461a      	mov	r2, r3
 801bd30:	2101      	movs	r1, #1
 801bd32:	6978      	ldr	r0, [r7, #20]
 801bd34:	f000 f894 	bl	801be60 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 801bd38:	2102      	movs	r1, #2
 801bd3a:	6838      	ldr	r0, [r7, #0]
 801bd3c:	f000 f8f0 	bl	801bf20 <lv_page_get_style>
 801bd40:	4603      	mov	r3, r0
 801bd42:	461a      	mov	r2, r3
 801bd44:	2102      	movs	r1, #2
 801bd46:	6978      	ldr	r0, [r7, #20]
 801bd48:	f000 f88a 	bl	801be60 <lv_page_set_style>

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801bd4c:	4910      	ldr	r1, [pc, #64]	; (801bd90 <lv_page_create+0x2d4>)
 801bd4e:	6978      	ldr	r0, [r7, #20]
 801bd50:	f7eb f8b0 	bl	8006eb4 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801bd54:	490f      	ldr	r1, [pc, #60]	; (801bd94 <lv_page_create+0x2d8>)
 801bd56:	6978      	ldr	r0, [r7, #20]
 801bd58:	f7eb f8ba 	bl	8006ed0 <lv_obj_set_design_cb>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_page);
 801bd5c:	6978      	ldr	r0, [r7, #20]
 801bd5e:	f7ea ff74 	bl	8006c4a <lv_obj_refresh_style>
    }

    lv_page_sb_refresh(new_page);
 801bd62:	6978      	ldr	r0, [r7, #20]
 801bd64:	f001 fa60 	bl	801d228 <lv_page_sb_refresh>

    LV_LOG_INFO("page created");

    return new_page;
 801bd68:	697b      	ldr	r3, [r7, #20]
}
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	3718      	adds	r7, #24
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}
 801bd72:	bf00      	nop
 801bd74:	20002adc 	.word	0x20002adc
 801bd78:	20002ad8 	.word	0x20002ad8
 801bd7c:	20006b84 	.word	0x20006b84
 801bd80:	20006d64 	.word	0x20006d64
 801bd84:	0801ca99 	.word	0x0801ca99
 801bd88:	0801c5f5 	.word	0x0801c5f5
 801bd8c:	0801d1cd 	.word	0x0801d1cd
 801bd90:	0801c6cd 	.word	0x0801c6cd
 801bd94:	0801c109 	.word	0x0801c109
 801bd98:	20006ad0 	.word	0x20006ad0
 801bd9c:	20006a94 	.word	0x20006a94

0801bda0 <lv_page_set_sb_mode>:
 * Set the scroll bar mode on a page
 * @param page pointer to a page object
 * @param sb_mode the new mode from 'lv_page_sb.mode_t' enum
 */
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b084      	sub	sp, #16
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	6078      	str	r0, [r7, #4]
 801bda8:	460b      	mov	r3, r1
 801bdaa:	70fb      	strb	r3, [r7, #3]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801bdac:	6878      	ldr	r0, [r7, #4]
 801bdae:	f7eb fa6a 	bl	8007286 <lv_obj_get_ext_attr>
 801bdb2:	60f8      	str	r0, [r7, #12]
    if(ext->sb.mode == sb_mode) return;
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	7f1b      	ldrb	r3, [r3, #28]
 801bdb8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bdbc:	b2db      	uxtb	r3, r3
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	78fb      	ldrb	r3, [r7, #3]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d048      	beq.n	801be58 <lv_page_set_sb_mode+0xb8>

    if(sb_mode == LV_SB_MODE_HIDE)
 801bdc6:	78fb      	ldrb	r3, [r7, #3]
 801bdc8:	2b04      	cmp	r3, #4
 801bdca:	d10d      	bne.n	801bde8 <lv_page_set_sb_mode+0x48>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	7f1b      	ldrb	r3, [r3, #28]
 801bdd0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bdd4:	b2db      	uxtb	r3, r3
 801bdd6:	f043 0304 	orr.w	r3, r3, #4
 801bdda:	b2d9      	uxtb	r1, r3
 801bddc:	68fa      	ldr	r2, [r7, #12]
 801bdde:	7f13      	ldrb	r3, [r2, #28]
 801bde0:	f361 0384 	bfi	r3, r1, #2, #3
 801bde4:	7713      	strb	r3, [r2, #28]
 801bde6:	e026      	b.n	801be36 <lv_page_set_sb_mode+0x96>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 801bde8:	78fb      	ldrb	r3, [r7, #3]
 801bdea:	2b05      	cmp	r3, #5
 801bdec:	d10d      	bne.n	801be0a <lv_page_set_sb_mode+0x6a>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	7f1b      	ldrb	r3, [r3, #28]
 801bdf2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801bdf6:	b2db      	uxtb	r3, r3
 801bdf8:	f003 0303 	and.w	r3, r3, #3
 801bdfc:	b2d9      	uxtb	r1, r3
 801bdfe:	68fa      	ldr	r2, [r7, #12]
 801be00:	7f13      	ldrb	r3, [r2, #28]
 801be02:	f361 0384 	bfi	r3, r1, #2, #3
 801be06:	7713      	strb	r3, [r2, #28]
 801be08:	e015      	b.n	801be36 <lv_page_set_sb_mode+0x96>
    else {
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	7f1b      	ldrb	r3, [r3, #28]
 801be0e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801be12:	b2db      	uxtb	r3, r3
 801be14:	f003 0304 	and.w	r3, r3, #4
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d003      	beq.n	801be24 <lv_page_set_sb_mode+0x84>
 801be1c:	78fb      	ldrb	r3, [r7, #3]
 801be1e:	f043 0304 	orr.w	r3, r3, #4
 801be22:	70fb      	strb	r3, [r7, #3]
        ext->sb.mode = sb_mode;
 801be24:	78fb      	ldrb	r3, [r7, #3]
 801be26:	f003 0307 	and.w	r3, r3, #7
 801be2a:	b2d9      	uxtb	r1, r3
 801be2c:	68fa      	ldr	r2, [r7, #12]
 801be2e:	7f13      	ldrb	r3, [r2, #28]
 801be30:	f361 0384 	bfi	r3, r1, #2, #3
 801be34:	7713      	strb	r3, [r2, #28]
    }

    ext->sb.hor_draw = 0;
 801be36:	68fa      	ldr	r2, [r7, #12]
 801be38:	7f13      	ldrb	r3, [r2, #28]
 801be3a:	f36f 0300 	bfc	r3, #0, #1
 801be3e:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 801be40:	68fa      	ldr	r2, [r7, #12]
 801be42:	7f13      	ldrb	r3, [r2, #28]
 801be44:	f36f 0341 	bfc	r3, #1, #1
 801be48:	7713      	strb	r3, [r2, #28]

    lv_page_sb_refresh(page);
 801be4a:	6878      	ldr	r0, [r7, #4]
 801be4c:	f001 f9ec 	bl	801d228 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801be50:	6878      	ldr	r0, [r7, #4]
 801be52:	f7e9 ffec 	bl	8005e2e <lv_obj_invalidate>
 801be56:	e000      	b.n	801be5a <lv_page_set_sb_mode+0xba>
    if(ext->sb.mode == sb_mode) return;
 801be58:	bf00      	nop
}
 801be5a:	3710      	adds	r7, #16
 801be5c:	46bd      	mov	sp, r7
 801be5e:	bd80      	pop	{r7, pc}

0801be60 <lv_page_set_style>:
 * @param page pointer to a page object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style)
{
 801be60:	b580      	push	{r7, lr}
 801be62:	b086      	sub	sp, #24
 801be64:	af00      	add	r7, sp, #0
 801be66:	60f8      	str	r0, [r7, #12]
 801be68:	460b      	mov	r3, r1
 801be6a:	607a      	str	r2, [r7, #4]
 801be6c:	72fb      	strb	r3, [r7, #11]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801be6e:	68f8      	ldr	r0, [r7, #12]
 801be70:	f7eb fa09 	bl	8007286 <lv_obj_get_ext_attr>
 801be74:	6178      	str	r0, [r7, #20]

    switch(type) {
 801be76:	7afb      	ldrb	r3, [r7, #11]
 801be78:	2b03      	cmp	r3, #3
 801be7a:	d83e      	bhi.n	801befa <lv_page_set_style+0x9a>
 801be7c:	a201      	add	r2, pc, #4	; (adr r2, 801be84 <lv_page_set_style+0x24>)
 801be7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be82:	bf00      	nop
 801be84:	0801be95 	.word	0x0801be95
 801be88:	0801be9f 	.word	0x0801be9f
 801be8c:	0801bead 	.word	0x0801bead
 801be90:	0801bef3 	.word	0x0801bef3
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 801be94:	6879      	ldr	r1, [r7, #4]
 801be96:	68f8      	ldr	r0, [r7, #12]
 801be98:	f7ea fec5 	bl	8006c26 <lv_obj_set_style>
 801be9c:	e02d      	b.n	801befa <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	6879      	ldr	r1, [r7, #4]
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7ea febe 	bl	8006c26 <lv_obj_set_style>
 801beaa:	e026      	b.n	801befa <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SB:
            ext->sb.style = style;
 801beac:	697b      	ldr	r3, [r7, #20]
 801beae:	687a      	ldr	r2, [r7, #4]
 801beb0:	609a      	str	r2, [r3, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	f103 020c 	add.w	r2, r3, #12
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	689b      	ldr	r3, [r3, #8]
 801bebc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bec0:	4619      	mov	r1, r3
 801bec2:	4610      	mov	r0, r2
 801bec4:	f7f6 ff05 	bl	8012cd2 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	f103 0214 	add.w	r2, r3, #20
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	689b      	ldr	r3, [r3, #8]
 801bed2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801bed6:	4619      	mov	r1, r3
 801bed8:	4610      	mov	r0, r2
 801beda:	f7f6 fee2 	bl	8012ca2 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801bede:	68f8      	ldr	r0, [r7, #12]
 801bee0:	f001 f9a2 	bl	801d228 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 801bee4:	68f8      	ldr	r0, [r7, #12]
 801bee6:	f7eb f817 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 801beea:	68f8      	ldr	r0, [r7, #12]
 801beec:	f7e9 ff9f 	bl	8005e2e <lv_obj_invalidate>
            break;
 801bef0:	e003      	b.n	801befa <lv_page_set_style+0x9a>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 801bef2:	697b      	ldr	r3, [r7, #20]
 801bef4:	687a      	ldr	r2, [r7, #4]
 801bef6:	625a      	str	r2, [r3, #36]	; 0x24
 801bef8:	bf00      	nop
#endif
    }
}
 801befa:	bf00      	nop
 801befc:	3718      	adds	r7, #24
 801befe:	46bd      	mov	sp, r7
 801bf00:	bd80      	pop	{r7, pc}
 801bf02:	bf00      	nop

0801bf04 <lv_page_get_scrl>:
 * Get the scrollable object of a page
 * @param page pointer to a page object
 * @return pointer to a container which is the scrollable part of the page
 */
lv_obj_t * lv_page_get_scrl(const lv_obj_t * page)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f7eb f9ba 	bl	8007286 <lv_obj_get_ext_attr>
 801bf12:	60f8      	str	r0, [r7, #12]

    return ext->scrl;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	685b      	ldr	r3, [r3, #4]
}
 801bf18:	4618      	mov	r0, r3
 801bf1a:	3710      	adds	r7, #16
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <lv_page_get_style>:
 * @param page pointer to page object
 * @param type which style should be get
 * @return style pointer to a style
 *  */
const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b084      	sub	sp, #16
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
 801bf28:	460b      	mov	r3, r1
 801bf2a:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	60fb      	str	r3, [r7, #12]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7eb f9a8 	bl	8007286 <lv_obj_get_ext_attr>
 801bf36:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801bf38:	78fb      	ldrb	r3, [r7, #3]
 801bf3a:	2b03      	cmp	r3, #3
 801bf3c:	d81e      	bhi.n	801bf7c <lv_page_get_style+0x5c>
 801bf3e:	a201      	add	r2, pc, #4	; (adr r2, 801bf44 <lv_page_get_style+0x24>)
 801bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf44:	0801bf55 	.word	0x0801bf55
 801bf48:	0801bf5f 	.word	0x0801bf5f
 801bf4c:	0801bf6d 	.word	0x0801bf6d
 801bf50:	0801bf75 	.word	0x0801bf75
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 801bf54:	6878      	ldr	r0, [r7, #4]
 801bf56:	f7eb f8db 	bl	8007110 <lv_obj_get_style>
 801bf5a:	60f8      	str	r0, [r7, #12]
 801bf5c:	e011      	b.n	801bf82 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801bf5e:	68bb      	ldr	r3, [r7, #8]
 801bf60:	685b      	ldr	r3, [r3, #4]
 801bf62:	4618      	mov	r0, r3
 801bf64:	f7eb f8d4 	bl	8007110 <lv_obj_get_style>
 801bf68:	60f8      	str	r0, [r7, #12]
 801bf6a:	e00a      	b.n	801bf82 <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 801bf6c:	68bb      	ldr	r3, [r7, #8]
 801bf6e:	689b      	ldr	r3, [r3, #8]
 801bf70:	60fb      	str	r3, [r7, #12]
 801bf72:	e006      	b.n	801bf82 <lv_page_get_style+0x62>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801bf74:	68bb      	ldr	r3, [r7, #8]
 801bf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf78:	60fb      	str	r3, [r7, #12]
 801bf7a:	e002      	b.n	801bf82 <lv_page_get_style+0x62>
#endif
        default: style = NULL; break;
 801bf7c:	2300      	movs	r3, #0
 801bf7e:	60fb      	str	r3, [r7, #12]
 801bf80:	bf00      	nop
    }

    return style;
 801bf82:	68fb      	ldr	r3, [r7, #12]
}
 801bf84:	4618      	mov	r0, r3
 801bf86:	3710      	adds	r7, #16
 801bf88:	46bd      	mov	sp, r7
 801bf8a:	bd80      	pop	{r7, pc}

0801bf8c <lv_page_scroll_hor>:
 * Scroll the page horizontally
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll right; > 0 scroll left)
 */
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b08e      	sub	sp, #56	; 0x38
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	460b      	mov	r3, r1
 801bf96:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801bf98:	6878      	ldr	r0, [r7, #4]
 801bf9a:	f7ff ffb3 	bl	801bf04 <lv_page_get_scrl>
 801bf9e:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfa2:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_x(scrl);
 801bfa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bfa6:	f7eb f851 	bl	800704c <lv_obj_get_x>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801bfae:	69fa      	ldr	r2, [r7, #28]
 801bfb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bfb4:	4413      	add	r3, r2
 801bfb6:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801bfb8:	4b11      	ldr	r3, [pc, #68]	; (801c000 <lv_page_scroll_hor+0x74>)
 801bfba:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801bfbc:	4b11      	ldr	r3, [pc, #68]	; (801c004 <lv_page_scroll_hor+0x78>)
 801bfbe:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801bfc8:	23c8      	movs	r3, #200	; 0xc8
 801bfca:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801bfcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bfd0:	f36f 0300 	bfc	r3, #0, #1
 801bfd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801bfd8:	2300      	movs	r3, #0
 801bfda:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801bfdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bfe0:	f36f 0341 	bfc	r3, #1, #1
 801bfe4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801bfe8:	2300      	movs	r3, #0
 801bfea:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801bfec:	f107 030c 	add.w	r3, r7, #12
 801bff0:	4618      	mov	r0, r3
 801bff2:	f7f6 fc13 	bl	801281c <lv_anim_create>
#else
    lv_obj_set_x(scrl, lv_obj_get_x(scrl) + dist);
#endif
}
 801bff6:	bf00      	nop
 801bff8:	3738      	adds	r7, #56	; 0x38
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}
 801bffe:	bf00      	nop
 801c000:	08006143 	.word	0x08006143
 801c004:	0801296d 	.word	0x0801296d

0801c008 <lv_page_scroll_ver>:
 * Scroll the page vertically
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll down; > 0 scroll up)
 */
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b08e      	sub	sp, #56	; 0x38
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
 801c010:	460b      	mov	r3, r1
 801c012:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f7ff ff75 	bl	801bf04 <lv_page_get_scrl>
 801c01a:	6378      	str	r0, [r7, #52]	; 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 801c01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c01e:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_y(scrl);
 801c020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c022:	f7eb f82c 	bl	800707e <lv_obj_get_y>
 801c026:	4603      	mov	r3, r0
 801c028:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 801c02a:	69fa      	ldr	r2, [r7, #28]
 801c02c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c030:	4413      	add	r3, r2
 801c032:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801c034:	4b11      	ldr	r3, [pc, #68]	; (801c07c <lv_page_scroll_ver+0x74>)
 801c036:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 801c038:	4b11      	ldr	r3, [pc, #68]	; (801c080 <lv_page_scroll_ver+0x78>)
 801c03a:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 801c03c:	2300      	movs	r3, #0
 801c03e:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801c040:	2300      	movs	r3, #0
 801c042:	84fb      	strh	r3, [r7, #38]	; 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 801c044:	23c8      	movs	r3, #200	; 0xc8
 801c046:	84bb      	strh	r3, [r7, #36]	; 0x24
    a.playback       = 0;
 801c048:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c04c:	f36f 0300 	bfc	r3, #0, #1
 801c050:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.playback_pause = 0;
 801c054:	2300      	movs	r3, #0
 801c056:	853b      	strh	r3, [r7, #40]	; 0x28
    a.repeat         = 0;
 801c058:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c05c:	f36f 0341 	bfc	r3, #1, #1
 801c060:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    a.repeat_pause   = 0;
 801c064:	2300      	movs	r3, #0
 801c066:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_anim_create(&a);
 801c068:	f107 030c 	add.w	r3, r7, #12
 801c06c:	4618      	mov	r0, r3
 801c06e:	f7f6 fbd5 	bl	801281c <lv_anim_create>
#else
    lv_obj_set_y(scrl, lv_obj_get_y(scrl) + dist);
#endif
}
 801c072:	bf00      	nop
 801c074:	3738      	adds	r7, #56	; 0x38
 801c076:	46bd      	mov	sp, r7
 801c078:	bd80      	pop	{r7, pc}
 801c07a:	bf00      	nop
 801c07c:	0800616d 	.word	0x0800616d
 801c080:	0801296d 	.word	0x0801296d

0801c084 <lv_page_start_edge_flash>:
 * Not intended to use directly by the user but by other object types internally.
 * Start an edge flash animation. Exactly one `ext->edge_flash.xxx_ip` should be set
 * @param page
 */
void lv_page_start_edge_flash(lv_obj_t * page)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b08e      	sub	sp, #56	; 0x38
 801c088:	af00      	add	r7, sp, #0
 801c08a:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f7eb f8fa 	bl	8007286 <lv_obj_get_ext_attr>
 801c092:	6378      	str	r0, [r7, #52]	; 0x34
    if(ext->edge_flash.enabled) {
 801c094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c09a:	f003 0301 	and.w	r3, r3, #1
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d026      	beq.n	801c0f2 <lv_page_start_edge_flash+0x6e>
        lv_anim_t a;
        a.var            = page;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	60fb      	str	r3, [r7, #12]
        a.start          = 0;
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	61fb      	str	r3, [r7, #28]
        a.end            = LV_PAGE_END_FLASH_SIZE;
 801c0ac:	2319      	movs	r3, #25
 801c0ae:	623b      	str	r3, [r7, #32]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 801c0b0:	4b12      	ldr	r3, [pc, #72]	; (801c0fc <lv_page_start_edge_flash+0x78>)
 801c0b2:	613b      	str	r3, [r7, #16]
        a.path_cb        = lv_anim_path_linear;
 801c0b4:	4b12      	ldr	r3, [pc, #72]	; (801c100 <lv_page_start_edge_flash+0x7c>)
 801c0b6:	617b      	str	r3, [r7, #20]
        a.ready_cb       = edge_flash_anim_end;
 801c0b8:	4b12      	ldr	r3, [pc, #72]	; (801c104 <lv_page_start_edge_flash+0x80>)
 801c0ba:	61bb      	str	r3, [r7, #24]
        a.act_time       = 0;
 801c0bc:	2300      	movs	r3, #0
 801c0be:	84fb      	strh	r3, [r7, #38]	; 0x26
        a.time           = LV_PAGE_END_ANIM_TIME;
 801c0c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801c0c4:	84bb      	strh	r3, [r7, #36]	; 0x24
        a.playback       = 1;
 801c0c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c0ca:	f043 0301 	orr.w	r3, r3, #1
 801c0ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801c0d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801c0d6:	853b      	strh	r3, [r7, #40]	; 0x28
        a.repeat         = 0;
 801c0d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c0dc:	f36f 0341 	bfc	r3, #1, #1
 801c0e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        a.repeat_pause   = 0;
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_anim_create(&a);
 801c0e8:	f107 030c 	add.w	r3, r7, #12
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f7f6 fb95 	bl	801281c <lv_anim_create>
    }
#else
    (void)page; /*Unused*/
#endif
}
 801c0f2:	bf00      	nop
 801c0f4:	3738      	adds	r7, #56	; 0x38
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	0801d827 	.word	0x0801d827
 801c100:	0801296d 	.word	0x0801296d
 801c104:	0801d84f 	.word	0x0801d84f

0801c108 <lv_page_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_page_design(lv_obj_t * page, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c108:	b590      	push	{r4, r7, lr}
 801c10a:	b0ab      	sub	sp, #172	; 0xac
 801c10c:	af00      	add	r7, sp, #0
 801c10e:	60f8      	str	r0, [r7, #12]
 801c110:	60b9      	str	r1, [r7, #8]
 801c112:	4613      	mov	r3, r2
 801c114:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801c116:	79fb      	ldrb	r3, [r7, #7]
 801c118:	2b02      	cmp	r3, #2
 801c11a:	d107      	bne.n	801c12c <lv_page_design+0x24>
        return ancestor_design(page, mask, mode);
 801c11c:	4ba3      	ldr	r3, [pc, #652]	; (801c3ac <lv_page_design+0x2a4>)
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	79fa      	ldrb	r2, [r7, #7]
 801c122:	68b9      	ldr	r1, [r7, #8]
 801c124:	68f8      	ldr	r0, [r7, #12]
 801c126:	4798      	blx	r3
 801c128:	4603      	mov	r3, r0
 801c12a:	e25c      	b.n	801c5e6 <lv_page_design+0x4de>
    }
    /*Cache page bg style for temporary modification*/
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801c12c:	2100      	movs	r1, #0
 801c12e:	68f8      	ldr	r0, [r7, #12]
 801c130:	f7ff fef6 	bl	801bf20 <lv_page_get_style>
 801c134:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    lv_style_t style_tmp;
    lv_style_copy(&style_tmp, style);
 801c138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c13c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c140:	4618      	mov	r0, r3
 801c142:	f7ec fb0f 	bl	8008764 <lv_style_copy>

    if(mode == LV_DESIGN_DRAW_MAIN) {
 801c146:	79fb      	ldrb	r3, [r7, #7]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d110      	bne.n	801c16e <lv_page_design+0x66>
        /*Draw without border*/
        style_tmp.body.border.width = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	f103 0410 	add.w	r4, r3, #16
 801c158:	68f8      	ldr	r0, [r7, #12]
 801c15a:	f7eb f846 	bl	80071ea <lv_obj_get_opa_scale>
 801c15e:	4603      	mov	r3, r0
 801c160:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801c164:	68b9      	ldr	r1, [r7, #8]
 801c166:	4620      	mov	r0, r4
 801c168:	f7f0 fd41 	bl	800cbee <lv_draw_rect>
 801c16c:	e23a      	b.n	801c5e4 <lv_page_design+0x4dc>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 801c16e:	79fb      	ldrb	r3, [r7, #7]
 801c170:	2b01      	cmp	r3, #1
 801c172:	f040 8237 	bne.w	801c5e4 <lv_page_design+0x4dc>
        /*Draw only a border*/
        style_tmp.body.shadow.width = 0;
 801c176:	2300      	movs	r3, #0
 801c178:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        style_tmp.body.opa          = LV_OPA_TRANSP;
 801c17c:	2300      	movs	r3, #0
 801c17e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	f103 0410 	add.w	r4, r3, #16
 801c188:	68f8      	ldr	r0, [r7, #12]
 801c18a:	f7eb f82e 	bl	80071ea <lv_obj_get_opa_scale>
 801c18e:	4603      	mov	r3, r0
 801c190:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801c194:	68b9      	ldr	r1, [r7, #8]
 801c196:	4620      	mov	r0, r4
 801c198:	f7f0 fd29 	bl	800cbee <lv_draw_rect>

        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c19c:	68f8      	ldr	r0, [r7, #12]
 801c19e:	f7eb f872 	bl	8007286 <lv_obj_get_ext_attr>
 801c1a2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

        /*Draw the scrollbars*/
        lv_area_t sb_area;
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801c1a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1aa:	7f1b      	ldrb	r3, [r3, #28]
 801c1ac:	f003 0301 	and.w	r3, r3, #1
 801c1b0:	b2db      	uxtb	r3, r3
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d050      	beq.n	801c258 <lv_page_design+0x150>
 801c1b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1ba:	7f1b      	ldrb	r3, [r3, #28]
 801c1bc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801c1c0:	b2db      	uxtb	r3, r3
 801c1c2:	f003 0304 	and.w	r3, r3, #4
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d146      	bne.n	801c258 <lv_page_design+0x150>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 801c1ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1ce:	f103 020c 	add.w	r2, r3, #12
 801c1d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c1d6:	4611      	mov	r1, r2
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7ff fc03 	bl	801b9e4 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801c1de:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c1e2:	b29a      	uxth	r2, r3
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c1ea:	b29b      	uxth	r3, r3
 801c1ec:	4413      	add	r3, r2
 801c1ee:	b29b      	uxth	r3, r3
 801c1f0:	b21b      	sxth	r3, r3
 801c1f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801c1f6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c1fa:	b29a      	uxth	r2, r3
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c202:	b29b      	uxth	r3, r3
 801c204:	4413      	add	r3, r2
 801c206:	b29b      	uxth	r3, r3
 801c208:	b21b      	sxth	r3, r3
 801c20a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801c20e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c212:	b29a      	uxth	r2, r3
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c21a:	b29b      	uxth	r3, r3
 801c21c:	4413      	add	r3, r2
 801c21e:	b29b      	uxth	r3, r3
 801c220:	b21b      	sxth	r3, r3
 801c222:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801c226:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c22a:	b29a      	uxth	r2, r3
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c232:	b29b      	uxth	r3, r3
 801c234:	4413      	add	r3, r2
 801c236:	b29b      	uxth	r3, r3
 801c238:	b21b      	sxth	r3, r3
 801c23a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801c23e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c242:	689c      	ldr	r4, [r3, #8]
 801c244:	68f8      	ldr	r0, [r7, #12]
 801c246:	f7ea ffd0 	bl	80071ea <lv_obj_get_opa_scale>
 801c24a:	4603      	mov	r3, r0
 801c24c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c250:	4622      	mov	r2, r4
 801c252:	68b9      	ldr	r1, [r7, #8]
 801c254:	f7f0 fccb 	bl	800cbee <lv_draw_rect>
        }

        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 801c258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c25c:	7f1b      	ldrb	r3, [r3, #28]
 801c25e:	f003 0302 	and.w	r3, r3, #2
 801c262:	b2db      	uxtb	r3, r3
 801c264:	2b00      	cmp	r3, #0
 801c266:	d050      	beq.n	801c30a <lv_page_design+0x202>
 801c268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c26c:	7f1b      	ldrb	r3, [r3, #28]
 801c26e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801c272:	b2db      	uxtb	r3, r3
 801c274:	f003 0304 	and.w	r3, r3, #4
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d146      	bne.n	801c30a <lv_page_design+0x202>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 801c27c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c280:	f103 0214 	add.w	r2, r3, #20
 801c284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c288:	4611      	mov	r1, r2
 801c28a:	4618      	mov	r0, r3
 801c28c:	f7ff fbaa 	bl	801b9e4 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801c290:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c294:	b29a      	uxth	r2, r3
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	4413      	add	r3, r2
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	b21b      	sxth	r3, r3
 801c2a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            sb_area.y1 += page->coords.y1;
 801c2a8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c2ac:	b29a      	uxth	r2, r3
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c2b4:	b29b      	uxth	r3, r3
 801c2b6:	4413      	add	r3, r2
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	b21b      	sxth	r3, r3
 801c2bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            sb_area.x2 += page->coords.x1;
 801c2c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801c2c4:	b29a      	uxth	r2, r3
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c2cc:	b29b      	uxth	r3, r3
 801c2ce:	4413      	add	r3, r2
 801c2d0:	b29b      	uxth	r3, r3
 801c2d2:	b21b      	sxth	r3, r3
 801c2d4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            sb_area.y2 += page->coords.y1;
 801c2d8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c2dc:	b29a      	uxth	r2, r3
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c2e4:	b29b      	uxth	r3, r3
 801c2e6:	4413      	add	r3, r2
 801c2e8:	b29b      	uxth	r3, r3
 801c2ea:	b21b      	sxth	r3, r3
 801c2ec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801c2f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c2f4:	689c      	ldr	r4, [r3, #8]
 801c2f6:	68f8      	ldr	r0, [r7, #12]
 801c2f8:	f7ea ff77 	bl	80071ea <lv_obj_get_opa_scale>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c302:	4622      	mov	r2, r4
 801c304:	68b9      	ldr	r1, [r7, #8]
 801c306:	f7f0 fc72 	bl	800cbee <lv_draw_rect>
        }

#if LV_USE_ANIMATION
        {
            lv_coord_t page_w = lv_obj_get_width(page);
 801c30a:	68f8      	ldr	r0, [r7, #12]
 801c30c:	f7ea fed0 	bl	80070b0 <lv_obj_get_width>
 801c310:	4603      	mov	r3, r0
 801c312:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            lv_coord_t page_h = lv_obj_get_height(page);
 801c316:	68f8      	ldr	r0, [r7, #12]
 801c318:	f7ea fed8 	bl	80070cc <lv_obj_get_height>
 801c31c:	4603      	mov	r3, r0
 801c31e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

            lv_area_t flash_area;

            if(ext->edge_flash.top_ip) {
 801c322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c32a:	f003 0302 	and.w	r3, r3, #2
 801c32e:	b2db      	uxtb	r3, r3
 801c330:	2b00      	cmp	r3, #0
 801c332:	d03d      	beq.n	801c3b0 <lv_page_design+0x2a8>
                flash_area.x1 = page->coords.x1 - page_w;
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c33a:	b29a      	uxth	r2, r3
 801c33c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c340:	1ad3      	subs	r3, r2, r3
 801c342:	b29b      	uxth	r3, r3
 801c344:	b21b      	sxth	r3, r3
 801c346:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c350:	b29a      	uxth	r2, r3
 801c352:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c356:	4413      	add	r3, r2
 801c358:	b29b      	uxth	r3, r3
 801c35a:	b21b      	sxth	r3, r3
 801c35c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c366:	b29a      	uxth	r2, r3
 801c368:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c36c:	4619      	mov	r1, r3
 801c36e:	009b      	lsls	r3, r3, #2
 801c370:	1acb      	subs	r3, r1, r3
 801c372:	b29b      	uxth	r3, r3
 801c374:	4413      	add	r3, r2
 801c376:	b29a      	uxth	r2, r3
 801c378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c37c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c380:	b29b      	uxth	r3, r3
 801c382:	4413      	add	r3, r2
 801c384:	b29b      	uxth	r3, r3
 801c386:	b21b      	sxth	r3, r3
 801c388:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c392:	b29a      	uxth	r2, r3
 801c394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c398:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c39c:	b29b      	uxth	r3, r3
 801c39e:	4413      	add	r3, r2
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	b21b      	sxth	r3, r3
 801c3a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c3a8:	e0cd      	b.n	801c546 <lv_page_design+0x43e>
 801c3aa:	bf00      	nop
 801c3ac:	20002ad8 	.word	0x20002ad8
            } else if(ext->edge_flash.bottom_ip) {
 801c3b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c3b8:	f003 0304 	and.w	r3, r3, #4
 801c3bc:	b2db      	uxtb	r3, r3
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d03a      	beq.n	801c438 <lv_page_design+0x330>
                flash_area.x1 = page->coords.x1 - page_w;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c3c8:	b29a      	uxth	r2, r3
 801c3ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	b29b      	uxth	r3, r3
 801c3d2:	b21b      	sxth	r3, r3
 801c3d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c3de:	b29a      	uxth	r2, r3
 801c3e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c3e4:	4413      	add	r3, r2
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	b21b      	sxth	r3, r3
 801c3ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c3f4:	b29a      	uxth	r2, r3
 801c3f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	1ad3      	subs	r3, r2, r3
 801c402:	b29b      	uxth	r3, r3
 801c404:	b21b      	sxth	r3, r3
 801c406:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c410:	b29a      	uxth	r2, r3
 801c412:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801c416:	4619      	mov	r1, r3
 801c418:	0049      	lsls	r1, r1, #1
 801c41a:	440b      	add	r3, r1
 801c41c:	b29b      	uxth	r3, r3
 801c41e:	4413      	add	r3, r2
 801c420:	b29a      	uxth	r2, r3
 801c422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c426:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	1ad3      	subs	r3, r2, r3
 801c42e:	b29b      	uxth	r3, r3
 801c430:	b21b      	sxth	r3, r3
 801c432:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c436:	e086      	b.n	801c546 <lv_page_design+0x43e>
            } else if(ext->edge_flash.right_ip) {
 801c438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c440:	f003 0308 	and.w	r3, r3, #8
 801c444:	b2db      	uxtb	r3, r3
 801c446:	2b00      	cmp	r3, #0
 801c448:	d03a      	beq.n	801c4c0 <lv_page_design+0x3b8>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c450:	b29a      	uxth	r2, r3
 801c452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c456:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c45a:	b29b      	uxth	r3, r3
 801c45c:	1ad3      	subs	r3, r2, r3
 801c45e:	b29b      	uxth	r3, r3
 801c460:	b21b      	sxth	r3, r3
 801c462:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c46c:	b29a      	uxth	r2, r3
 801c46e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c472:	4619      	mov	r1, r3
 801c474:	0049      	lsls	r1, r1, #1
 801c476:	440b      	add	r3, r1
 801c478:	b29b      	uxth	r3, r3
 801c47a:	4413      	add	r3, r2
 801c47c:	b29a      	uxth	r2, r3
 801c47e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c482:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c486:	b29b      	uxth	r3, r3
 801c488:	1ad3      	subs	r3, r2, r3
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	b21b      	sxth	r3, r3
 801c48e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c498:	b29a      	uxth	r2, r3
 801c49a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c49e:	1ad3      	subs	r3, r2, r3
 801c4a0:	b29b      	uxth	r3, r3
 801c4a2:	b21b      	sxth	r3, r3
 801c4a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c4ae:	b29a      	uxth	r2, r3
 801c4b0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c4b4:	4413      	add	r3, r2
 801c4b6:	b29b      	uxth	r3, r3
 801c4b8:	b21b      	sxth	r3, r3
 801c4ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801c4be:	e042      	b.n	801c546 <lv_page_design+0x43e>
            } else if(ext->edge_flash.left_ip) {
 801c4c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c4c8:	f003 0310 	and.w	r3, r3, #16
 801c4cc:	b2db      	uxtb	r3, r3
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d039      	beq.n	801c546 <lv_page_design+0x43e>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c4d8:	b29a      	uxth	r2, r3
 801c4da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c4de:	4619      	mov	r1, r3
 801c4e0:	009b      	lsls	r3, r3, #2
 801c4e2:	1acb      	subs	r3, r1, r3
 801c4e4:	b29b      	uxth	r3, r3
 801c4e6:	4413      	add	r3, r2
 801c4e8:	b29a      	uxth	r2, r3
 801c4ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4ee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	4413      	add	r3, r2
 801c4f6:	b29b      	uxth	r3, r3
 801c4f8:	b21b      	sxth	r3, r3
 801c4fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c504:	b29a      	uxth	r2, r3
 801c506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c50a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c50e:	b29b      	uxth	r3, r3
 801c510:	4413      	add	r3, r2
 801c512:	b29b      	uxth	r3, r3
 801c514:	b21b      	sxth	r3, r3
 801c516:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c520:	b29a      	uxth	r2, r3
 801c522:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c526:	1ad3      	subs	r3, r2, r3
 801c528:	b29b      	uxth	r3, r3
 801c52a:	b21b      	sxth	r3, r3
 801c52c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c536:	b29a      	uxth	r2, r3
 801c538:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801c53c:	4413      	add	r3, r2
 801c53e:	b29b      	uxth	r3, r3
 801c540:	b21b      	sxth	r3, r3
 801c542:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 801c546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c54e:	f003 0310 	and.w	r3, r3, #16
 801c552:	b2db      	uxtb	r3, r3
 801c554:	2b00      	cmp	r3, #0
 801c556:	d11a      	bne.n	801c58e <lv_page_design+0x486>
 801c558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c55c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c560:	f003 0308 	and.w	r3, r3, #8
 801c564:	b2db      	uxtb	r3, r3
 801c566:	2b00      	cmp	r3, #0
 801c568:	d111      	bne.n	801c58e <lv_page_design+0x486>
 801c56a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c56e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c572:	f003 0302 	and.w	r3, r3, #2
 801c576:	b2db      	uxtb	r3, r3
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d108      	bne.n	801c58e <lv_page_design+0x486>
 801c57c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c584:	f003 0304 	and.w	r3, r3, #4
 801c588:	b2db      	uxtb	r3, r3
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d02a      	beq.n	801c5e4 <lv_page_design+0x4dc>
               ext->edge_flash.bottom_ip) {
                lv_style_t flash_style;
                lv_style_copy(&flash_style, ext->edge_flash.style);
 801c58e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c594:	f107 0310 	add.w	r3, r7, #16
 801c598:	4611      	mov	r1, r2
 801c59a:	4618      	mov	r0, r3
 801c59c:	f7ec f8e2 	bl	8008764 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 801c5a0:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c5a4:	82fb      	strh	r3, [r7, #22]
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801c5a6:	7e3b      	ldrb	r3, [r7, #24]
 801c5a8:	461a      	mov	r2, r3
 801c5aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c5ae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c5b2:	fb03 f302 	mul.w	r3, r3, r2
 801c5b6:	4a0e      	ldr	r2, [pc, #56]	; (801c5f0 <lv_page_design+0x4e8>)
 801c5b8:	fb82 1203 	smull	r1, r2, r2, r3
 801c5bc:	10d2      	asrs	r2, r2, #3
 801c5be:	17db      	asrs	r3, r3, #31
 801c5c0:	1ad3      	subs	r3, r2, r3
 801c5c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                flash_style.body.opa    = opa;
 801c5c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	763b      	strb	r3, [r7, #24]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 801c5ce:	68f8      	ldr	r0, [r7, #12]
 801c5d0:	f7ea fe0b 	bl	80071ea <lv_obj_get_opa_scale>
 801c5d4:	4603      	mov	r3, r0
 801c5d6:	f107 0210 	add.w	r2, r7, #16
 801c5da:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801c5de:	68b9      	ldr	r1, [r7, #8]
 801c5e0:	f7f0 fb05 	bl	800cbee <lv_draw_rect>
            }
        }
#endif
    }

    return true;
 801c5e4:	2301      	movs	r3, #1
}
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	37ac      	adds	r7, #172	; 0xac
 801c5ea:	46bd      	mov	sp, r7
 801c5ec:	bd90      	pop	{r4, r7, pc}
 801c5ee:	bf00      	nop
 801c5f0:	51eb851f 	.word	0x51eb851f

0801c5f4 <lv_scrl_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b08a      	sub	sp, #40	; 0x28
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	4613      	mov	r3, r2
 801c600:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 801c602:	79fb      	ldrb	r3, [r7, #7]
 801c604:	2b02      	cmp	r3, #2
 801c606:	d107      	bne.n	801c618 <lv_scrl_design+0x24>
        return ancestor_design(scrl, mask, mode);
 801c608:	4b2f      	ldr	r3, [pc, #188]	; (801c6c8 <lv_scrl_design+0xd4>)
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	79fa      	ldrb	r2, [r7, #7]
 801c60e:	68b9      	ldr	r1, [r7, #8]
 801c610:	68f8      	ldr	r0, [r7, #12]
 801c612:	4798      	blx	r3
 801c614:	4603      	mov	r3, r0
 801c616:	e052      	b.n	801c6be <lv_scrl_design+0xca>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801c618:	79fb      	ldrb	r3, [r7, #7]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d145      	bne.n	801c6aa <lv_scrl_design+0xb6>
#if LV_USE_GROUP
        /* If the page is focused in a group and
         * the background object is not visible (transparent)
         * then "activate" the style of the scrollable*/
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 801c61e:	68f8      	ldr	r0, [r7, #12]
 801c620:	f7ea fd76 	bl	8007110 <lv_obj_get_style>
 801c624:	6238      	str	r0, [r7, #32]
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 801c626:	68f8      	ldr	r0, [r7, #12]
 801c628:	f7ea fcd8 	bl	8006fdc <lv_obj_get_parent>
 801c62c:	61f8      	str	r0, [r7, #28]
        const lv_style_t * style_page     = lv_obj_get_style(page);
 801c62e:	69f8      	ldr	r0, [r7, #28]
 801c630:	f7ea fd6e 	bl	8007110 <lv_obj_get_style>
 801c634:	61b8      	str	r0, [r7, #24]
        lv_group_t * g                    = lv_obj_get_group(page);
 801c636:	69f8      	ldr	r0, [r7, #28]
 801c638:	f7ea fe31 	bl	800729e <lv_obj_get_group>
 801c63c:	6178      	str	r0, [r7, #20]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801c63e:	69bb      	ldr	r3, [r7, #24]
 801c640:	7a1b      	ldrb	r3, [r3, #8]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d127      	bne.n	801c696 <lv_scrl_design+0xa2>
           style_page->body.border.width == 0) { /*Is the background visible?*/
 801c646:	69bb      	ldr	r3, [r7, #24]
 801c648:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d122      	bne.n	801c696 <lv_scrl_design+0xa2>
            if(lv_group_get_focused(g) == page) {
 801c650:	6978      	ldr	r0, [r7, #20]
 801c652:	f7e8 fe06 	bl	8005262 <lv_group_get_focused>
 801c656:	4602      	mov	r2, r0
 801c658:	69fb      	ldr	r3, [r7, #28]
 801c65a:	4293      	cmp	r3, r2
 801c65c:	d11b      	bne.n	801c696 <lv_scrl_design+0xa2>
                lv_style_t * style_mod;
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 801c65e:	6a39      	ldr	r1, [r7, #32]
 801c660:	6978      	ldr	r0, [r7, #20]
 801c662:	f7e8 fdce 	bl	8005202 <lv_group_mod_style>
 801c666:	6278      	str	r0, [r7, #36]	; 0x24
                /*If still not visible modify the style a littel bit*/
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 801c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c66a:	7a1b      	ldrb	r3, [r3, #8]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d10f      	bne.n	801c690 <lv_scrl_design+0x9c>
 801c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c672:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d10a      	bne.n	801c690 <lv_scrl_design+0x9c>
                    style_mod->body.opa          = LV_OPA_50;
 801c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67c:	227f      	movs	r2, #127	; 0x7f
 801c67e:	721a      	strb	r2, [r3, #8]
                    style_mod->body.border.width = 1;
 801c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c682:	2201      	movs	r2, #1
 801c684:	819a      	strh	r2, [r3, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 801c686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c688:	6978      	ldr	r0, [r7, #20]
 801c68a:	f7e8 fdba 	bl	8005202 <lv_group_mod_style>
 801c68e:	6278      	str	r0, [r7, #36]	; 0x24
                }

                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c694:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
#endif
        ancestor_design(scrl, mask, mode);
 801c696:	4b0c      	ldr	r3, [pc, #48]	; (801c6c8 <lv_scrl_design+0xd4>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	79fa      	ldrb	r2, [r7, #7]
 801c69c:	68b9      	ldr	r1, [r7, #8]
 801c69e:	68f8      	ldr	r0, [r7, #12]
 801c6a0:	4798      	blx	r3

#if LV_USE_GROUP
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	6a3a      	ldr	r2, [r7, #32]
 801c6a6:	629a      	str	r2, [r3, #40]	; 0x28
 801c6a8:	e008      	b.n	801c6bc <lv_scrl_design+0xc8>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801c6aa:	79fb      	ldrb	r3, [r7, #7]
 801c6ac:	2b01      	cmp	r3, #1
 801c6ae:	d105      	bne.n	801c6bc <lv_scrl_design+0xc8>
        ancestor_design(scrl, mask, mode);
 801c6b0:	4b05      	ldr	r3, [pc, #20]	; (801c6c8 <lv_scrl_design+0xd4>)
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	79fa      	ldrb	r2, [r7, #7]
 801c6b6:	68b9      	ldr	r1, [r7, #8]
 801c6b8:	68f8      	ldr	r0, [r7, #12]
 801c6ba:	4798      	blx	r3
    }

    return true;
 801c6bc:	2301      	movs	r3, #1
}
 801c6be:	4618      	mov	r0, r3
 801c6c0:	3728      	adds	r7, #40	; 0x28
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	bd80      	pop	{r7, pc}
 801c6c6:	bf00      	nop
 801c6c8:	20002ad8 	.word	0x20002ad8

0801c6cc <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 801c6cc:	b590      	push	{r4, r7, lr}
 801c6ce:	b08f      	sub	sp, #60	; 0x3c
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	60f8      	str	r0, [r7, #12]
 801c6d4:	460b      	mov	r3, r1
 801c6d6:	607a      	str	r2, [r7, #4]
 801c6d8:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 801c6da:	4ba1      	ldr	r3, [pc, #644]	; (801c960 <lv_page_signal+0x294>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	7af9      	ldrb	r1, [r7, #11]
 801c6e0:	687a      	ldr	r2, [r7, #4]
 801c6e2:	68f8      	ldr	r0, [r7, #12]
 801c6e4:	4798      	blx	r3
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if(res != LV_RES_OK) return res;
 801c6ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801c6f0:	2b01      	cmp	r3, #1
 801c6f2:	d002      	beq.n	801c6fa <lv_page_signal+0x2e>
 801c6f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801c6f8:	e1c7      	b.n	801ca8a <lv_page_signal+0x3be>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801c6fa:	68f8      	ldr	r0, [r7, #12]
 801c6fc:	f7ea fdc3 	bl	8007286 <lv_obj_get_ext_attr>
 801c700:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801c702:	7afb      	ldrb	r3, [r7, #11]
 801c704:	2b01      	cmp	r3, #1
 801c706:	f040 8086 	bne.w	801c816 <lv_page_signal+0x14a>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801c70a:	2101      	movs	r1, #1
 801c70c:	68f8      	ldr	r0, [r7, #12]
 801c70e:	f7ff fc07 	bl	801bf20 <lv_page_get_style>
 801c712:	61f8      	str	r0, [r7, #28]
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f7ff f9b1 	bl	801ba7c <lv_page_get_scrl_fit_left>
 801c71a:	4603      	mov	r3, r0
 801c71c:	76fb      	strb	r3, [r7, #27]
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
 801c71e:	68f8      	ldr	r0, [r7, #12]
 801c720:	f7ff f9bc 	bl	801ba9c <lv_page_get_scrl_fit_top>
 801c724:	4603      	mov	r3, r0
 801c726:	76bb      	strb	r3, [r7, #26]
        child                    = lv_obj_get_child(page, NULL);
 801c728:	2100      	movs	r1, #0
 801c72a:	68f8      	ldr	r0, [r7, #12]
 801c72c:	f7ea fc62 	bl	8006ff4 <lv_obj_get_child>
 801c730:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801c732:	e06c      	b.n	801c80e <lv_page_signal+0x142>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801c734:	2102      	movs	r1, #2
 801c736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c738:	f7ea fd76 	bl	8007228 <lv_obj_is_protected>
 801c73c:	4603      	mov	r3, r0
 801c73e:	f083 0301 	eor.w	r3, r3, #1
 801c742:	b2db      	uxtb	r3, r3
 801c744:	2b00      	cmp	r3, #0
 801c746:	d05d      	beq.n	801c804 <lv_page_signal+0x138>
                lv_obj_t * tmp = child;
 801c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c74a:	617b      	str	r3, [r7, #20]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801c74c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7ea fc50 	bl	8006ff4 <lv_obj_get_child>
 801c754:	6378      	str	r0, [r7, #52]	; 0x34

                /* Reposition the child to take padding into account (Only if it's on (0;0) now)
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 801c756:	697b      	ldr	r3, [r7, #20]
 801c758:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c762:	429a      	cmp	r2, r3
 801c764:	d11f      	bne.n	801c7a6 <lv_page_signal+0xda>
 801c766:	7efb      	ldrb	r3, [r7, #27]
 801c768:	2b01      	cmp	r3, #1
 801c76a:	d002      	beq.n	801c772 <lv_page_signal+0xa6>
 801c76c:	7efb      	ldrb	r3, [r7, #27]
 801c76e:	2b03      	cmp	r3, #3
 801c770:	d119      	bne.n	801c7a6 <lv_page_signal+0xda>
                    tmp->coords.x1 += style->body.padding.left;
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801c778:	b29a      	uxth	r2, r3
 801c77a:	69fb      	ldr	r3, [r7, #28]
 801c77c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c780:	b29b      	uxth	r3, r3
 801c782:	4413      	add	r3, r2
 801c784:	b29b      	uxth	r3, r3
 801c786:	b21a      	sxth	r2, r3
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	821a      	strh	r2, [r3, #16]
                    tmp->coords.x2 += style->body.padding.left;
 801c78c:	697b      	ldr	r3, [r7, #20]
 801c78e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c792:	b29a      	uxth	r2, r3
 801c794:	69fb      	ldr	r3, [r7, #28]
 801c796:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c79a:	b29b      	uxth	r3, r3
 801c79c:	4413      	add	r3, r2
 801c79e:	b29b      	uxth	r3, r3
 801c7a0:	b21a      	sxth	r2, r3
 801c7a2:	697b      	ldr	r3, [r7, #20]
 801c7a4:	829a      	strh	r2, [r3, #20]
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c7b2:	429a      	cmp	r2, r3
 801c7b4:	d11f      	bne.n	801c7f6 <lv_page_signal+0x12a>
 801c7b6:	7ebb      	ldrb	r3, [r7, #26]
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	d002      	beq.n	801c7c2 <lv_page_signal+0xf6>
 801c7bc:	7ebb      	ldrb	r3, [r7, #26]
 801c7be:	2b03      	cmp	r3, #3
 801c7c0:	d119      	bne.n	801c7f6 <lv_page_signal+0x12a>
                    tmp->coords.y1 += style->body.padding.top;
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c7c8:	b29a      	uxth	r2, r3
 801c7ca:	69fb      	ldr	r3, [r7, #28]
 801c7cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7d0:	b29b      	uxth	r3, r3
 801c7d2:	4413      	add	r3, r2
 801c7d4:	b29b      	uxth	r3, r3
 801c7d6:	b21a      	sxth	r2, r3
 801c7d8:	697b      	ldr	r3, [r7, #20]
 801c7da:	825a      	strh	r2, [r3, #18]
                    tmp->coords.y2 += style->body.padding.top;
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7e2:	b29a      	uxth	r2, r3
 801c7e4:	69fb      	ldr	r3, [r7, #28]
 801c7e6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	4413      	add	r3, r2
 801c7ee:	b29b      	uxth	r3, r3
 801c7f0:	b21a      	sxth	r2, r3
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	82da      	strh	r2, [r3, #22]
                }
                lv_obj_set_parent(tmp, ext->scrl);
 801c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	4619      	mov	r1, r3
 801c7fc:	6978      	ldr	r0, [r7, #20]
 801c7fe:	f7e9 fba5 	bl	8005f4c <lv_obj_set_parent>
 801c802:	e004      	b.n	801c80e <lv_page_signal+0x142>
            } else {
                child = lv_obj_get_child(page, child);
 801c804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c806:	68f8      	ldr	r0, [r7, #12]
 801c808:	f7ea fbf4 	bl	8006ff4 <lv_obj_get_child>
 801c80c:	6378      	str	r0, [r7, #52]	; 0x34
        while(child != NULL) {
 801c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c810:	2b00      	cmp	r3, #0
 801c812:	d18f      	bne.n	801c734 <lv_page_signal+0x68>
 801c814:	e137      	b.n	801ca86 <lv_page_signal+0x3ba>
            }
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801c816:	7afb      	ldrb	r3, [r7, #11]
 801c818:	2b04      	cmp	r3, #4
 801c81a:	d11e      	bne.n	801c85a <lv_page_signal+0x18e>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c81e:	685b      	ldr	r3, [r3, #4]
 801c820:	69db      	ldr	r3, [r3, #28]
 801c822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c824:	6850      	ldr	r0, [r2, #4]
 801c826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c828:	6852      	ldr	r2, [r2, #4]
 801c82a:	3210      	adds	r2, #16
 801c82c:	2102      	movs	r1, #2
 801c82e:	4798      	blx	r3

        /*The scrollbars are important only if they are visible now*/
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c832:	7f1b      	ldrb	r3, [r3, #28]
 801c834:	f003 0301 	and.w	r3, r3, #1
 801c838:	b2db      	uxtb	r3, r3
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d106      	bne.n	801c84c <lv_page_signal+0x180>
 801c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c840:	7f1b      	ldrb	r3, [r3, #28]
 801c842:	f003 0302 	and.w	r3, r3, #2
 801c846:	b2db      	uxtb	r3, r3
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d002      	beq.n	801c852 <lv_page_signal+0x186>
 801c84c:	68f8      	ldr	r0, [r7, #12]
 801c84e:	f000 fceb 	bl	801d228 <lv_page_sb_refresh>

        /*Refresh the ext. size because the scrollbars might be positioned out of the page*/
        lv_obj_refresh_ext_draw_pad(page);
 801c852:	68f8      	ldr	r0, [r7, #12]
 801c854:	f7ea fb60 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
 801c858:	e115      	b.n	801ca86 <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801c85a:	7afb      	ldrb	r3, [r7, #11]
 801c85c:	2b02      	cmp	r3, #2
 801c85e:	d138      	bne.n	801c8d2 <lv_page_signal+0x206>
        /*Refresh the scrollbar and notify the scrl if the size is changed*/
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c862:	685b      	ldr	r3, [r3, #4]
 801c864:	2b00      	cmp	r3, #0
 801c866:	f000 810e 	beq.w	801ca86 <lv_page_signal+0x3ba>
 801c86a:	68f8      	ldr	r0, [r7, #12]
 801c86c:	f7ea fc20 	bl	80070b0 <lv_obj_get_width>
 801c870:	4603      	mov	r3, r0
 801c872:	461c      	mov	r4, r3
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f7ff f8c3 	bl	801ba00 <lv_area_get_width>
 801c87a:	4603      	mov	r3, r0
 801c87c:	429c      	cmp	r4, r3
 801c87e:	d10b      	bne.n	801c898 <lv_page_signal+0x1cc>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 801c880:	68f8      	ldr	r0, [r7, #12]
 801c882:	f7ea fc23 	bl	80070cc <lv_obj_get_height>
 801c886:	4603      	mov	r3, r0
 801c888:	461c      	mov	r4, r3
 801c88a:	6878      	ldr	r0, [r7, #4]
 801c88c:	f7ff f8cf 	bl	801ba2e <lv_area_get_height>
 801c890:	4603      	mov	r3, r0
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801c892:	429c      	cmp	r4, r3
 801c894:	f000 80f7 	beq.w	801ca86 <lv_page_signal+0x3ba>
            /*If no hor_fit enabled set the scrollable's width to the page's width*/
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c89a:	685b      	ldr	r3, [r3, #4]
 801c89c:	69db      	ldr	r3, [r3, #28]
 801c89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8a0:	6850      	ldr	r0, [r2, #4]
 801c8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8a4:	6852      	ldr	r2, [r2, #4]
 801c8a6:	3210      	adds	r2, #16
 801c8a8:	2102      	movs	r1, #2
 801c8aa:	4798      	blx	r3

            /*The scrollbars are important only if they are visible now*/
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 801c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8ae:	7f1b      	ldrb	r3, [r3, #28]
 801c8b0:	f003 0301 	and.w	r3, r3, #1
 801c8b4:	b2db      	uxtb	r3, r3
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d107      	bne.n	801c8ca <lv_page_signal+0x1fe>
 801c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8bc:	7f1b      	ldrb	r3, [r3, #28]
 801c8be:	f003 0302 	and.w	r3, r3, #2
 801c8c2:	b2db      	uxtb	r3, r3
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	f000 80de 	beq.w	801ca86 <lv_page_signal+0x3ba>
 801c8ca:	68f8      	ldr	r0, [r7, #12]
 801c8cc:	f000 fcac 	bl	801d228 <lv_page_sb_refresh>
 801c8d0:	e0d9      	b.n	801ca86 <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801c8d2:	7afb      	ldrb	r3, [r7, #11]
 801c8d4:	2b05      	cmp	r3, #5
 801c8d6:	d12b      	bne.n	801c930 <lv_page_signal+0x264>
        /*Ensure ext. size for the scrollbars if they are out of the page*/
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801c8de:	461a      	mov	r2, r3
 801c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8e2:	689b      	ldr	r3, [r3, #8]
 801c8e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c8e8:	425b      	negs	r3, r3
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	da09      	bge.n	801c902 <lv_page_signal+0x236>
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 801c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8f0:	689b      	ldr	r3, [r3, #8]
 801c8f2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801c8f6:	b29b      	uxth	r3, r3
 801c8f8:	425b      	negs	r3, r3
 801c8fa:	b29b      	uxth	r3, r3
 801c8fc:	b21a      	sxth	r2, r3
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	869a      	strh	r2, [r3, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801c908:	461a      	mov	r2, r3
 801c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c90c:	689b      	ldr	r3, [r3, #8]
 801c90e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c912:	425b      	negs	r3, r3
 801c914:	429a      	cmp	r2, r3
 801c916:	f280 80b6 	bge.w	801ca86 <lv_page_signal+0x3ba>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 801c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c91c:	689b      	ldr	r3, [r3, #8]
 801c91e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c922:	b29b      	uxth	r3, r3
 801c924:	425b      	negs	r3, r3
 801c926:	b29b      	uxth	r3, r3
 801c928:	b21a      	sxth	r2, r3
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	869a      	strh	r2, [r3, #52]	; 0x34
 801c92e:	e0aa      	b.n	801ca86 <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801c930:	7afb      	ldrb	r3, [r7, #11]
 801c932:	2b11      	cmp	r3, #17
 801c934:	d17d      	bne.n	801ca32 <lv_page_signal+0x366>
        uint32_t c = *((uint32_t *)param);
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	623b      	str	r3, [r7, #32]

        if(c == LV_KEY_DOWN) {
 801c93c:	6a3b      	ldr	r3, [r7, #32]
 801c93e:	2b12      	cmp	r3, #18
 801c940:	d110      	bne.n	801c964 <lv_page_signal+0x298>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801c942:	68f8      	ldr	r0, [r7, #12]
 801c944:	f7ea fbc2 	bl	80070cc <lv_obj_get_height>
 801c948:	4603      	mov	r3, r0
 801c94a:	425b      	negs	r3, r3
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	da00      	bge.n	801c952 <lv_page_signal+0x286>
 801c950:	3303      	adds	r3, #3
 801c952:	109b      	asrs	r3, r3, #2
 801c954:	b21b      	sxth	r3, r3
 801c956:	4619      	mov	r1, r3
 801c958:	68f8      	ldr	r0, [r7, #12]
 801c95a:	f7ff fb55 	bl	801c008 <lv_page_scroll_ver>
 801c95e:	e092      	b.n	801ca86 <lv_page_signal+0x3ba>
 801c960:	20002adc 	.word	0x20002adc
        } else if(c == LV_KEY_UP) {
 801c964:	6a3b      	ldr	r3, [r7, #32]
 801c966:	2b11      	cmp	r3, #17
 801c968:	d10d      	bne.n	801c986 <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801c96a:	68f8      	ldr	r0, [r7, #12]
 801c96c:	f7ea fbae 	bl	80070cc <lv_obj_get_height>
 801c970:	4603      	mov	r3, r0
 801c972:	2b00      	cmp	r3, #0
 801c974:	da00      	bge.n	801c978 <lv_page_signal+0x2ac>
 801c976:	3303      	adds	r3, #3
 801c978:	109b      	asrs	r3, r3, #2
 801c97a:	b21b      	sxth	r3, r3
 801c97c:	4619      	mov	r1, r3
 801c97e:	68f8      	ldr	r0, [r7, #12]
 801c980:	f7ff fb42 	bl	801c008 <lv_page_scroll_ver>
 801c984:	e07f      	b.n	801ca86 <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_RIGHT) {
 801c986:	6a3b      	ldr	r3, [r7, #32]
 801c988:	2b13      	cmp	r3, #19
 801c98a:	d128      	bne.n	801c9de <lv_page_signal+0x312>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801c98c:	68f8      	ldr	r0, [r7, #12]
 801c98e:	f7ff f865 	bl	801ba5c <lv_page_get_scrl_width>
 801c992:	4603      	mov	r3, r0
 801c994:	461c      	mov	r4, r3
 801c996:	68f8      	ldr	r0, [r7, #12]
 801c998:	f7ea fb8a 	bl	80070b0 <lv_obj_get_width>
 801c99c:	4603      	mov	r3, r0
 801c99e:	429c      	cmp	r4, r3
 801c9a0:	dc0e      	bgt.n	801c9c0 <lv_page_signal+0x2f4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801c9a2:	68f8      	ldr	r0, [r7, #12]
 801c9a4:	f7ea fb92 	bl	80070cc <lv_obj_get_height>
 801c9a8:	4603      	mov	r3, r0
 801c9aa:	425b      	negs	r3, r3
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	da00      	bge.n	801c9b2 <lv_page_signal+0x2e6>
 801c9b0:	3303      	adds	r3, #3
 801c9b2:	109b      	asrs	r3, r3, #2
 801c9b4:	b21b      	sxth	r3, r3
 801c9b6:	4619      	mov	r1, r3
 801c9b8:	68f8      	ldr	r0, [r7, #12]
 801c9ba:	f7ff fb25 	bl	801c008 <lv_page_scroll_ver>
 801c9be:	e062      	b.n	801ca86 <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 801c9c0:	68f8      	ldr	r0, [r7, #12]
 801c9c2:	f7ea fb75 	bl	80070b0 <lv_obj_get_width>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	425b      	negs	r3, r3
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	da00      	bge.n	801c9d0 <lv_page_signal+0x304>
 801c9ce:	3303      	adds	r3, #3
 801c9d0:	109b      	asrs	r3, r3, #2
 801c9d2:	b21b      	sxth	r3, r3
 801c9d4:	4619      	mov	r1, r3
 801c9d6:	68f8      	ldr	r0, [r7, #12]
 801c9d8:	f7ff fad8 	bl	801bf8c <lv_page_scroll_hor>
 801c9dc:	e053      	b.n	801ca86 <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_LEFT) {
 801c9de:	6a3b      	ldr	r3, [r7, #32]
 801c9e0:	2b14      	cmp	r3, #20
 801c9e2:	d150      	bne.n	801ca86 <lv_page_signal+0x3ba>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801c9e4:	68f8      	ldr	r0, [r7, #12]
 801c9e6:	f7ff f839 	bl	801ba5c <lv_page_get_scrl_width>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	461c      	mov	r4, r3
 801c9ee:	68f8      	ldr	r0, [r7, #12]
 801c9f0:	f7ea fb5e 	bl	80070b0 <lv_obj_get_width>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	429c      	cmp	r4, r3
 801c9f8:	dc0d      	bgt.n	801ca16 <lv_page_signal+0x34a>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801c9fa:	68f8      	ldr	r0, [r7, #12]
 801c9fc:	f7ea fb66 	bl	80070cc <lv_obj_get_height>
 801ca00:	4603      	mov	r3, r0
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	da00      	bge.n	801ca08 <lv_page_signal+0x33c>
 801ca06:	3303      	adds	r3, #3
 801ca08:	109b      	asrs	r3, r3, #2
 801ca0a:	b21b      	sxth	r3, r3
 801ca0c:	4619      	mov	r1, r3
 801ca0e:	68f8      	ldr	r0, [r7, #12]
 801ca10:	f7ff fafa 	bl	801c008 <lv_page_scroll_ver>
 801ca14:	e037      	b.n	801ca86 <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 801ca16:	68f8      	ldr	r0, [r7, #12]
 801ca18:	f7ea fb4a 	bl	80070b0 <lv_obj_get_width>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	da00      	bge.n	801ca24 <lv_page_signal+0x358>
 801ca22:	3303      	adds	r3, #3
 801ca24:	109b      	asrs	r3, r3, #2
 801ca26:	b21b      	sxth	r3, r3
 801ca28:	4619      	mov	r1, r3
 801ca2a:	68f8      	ldr	r0, [r7, #12]
 801ca2c:	f7ff faae 	bl	801bf8c <lv_page_scroll_hor>
 801ca30:	e029      	b.n	801ca86 <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ca32:	7afb      	ldrb	r3, [r7, #11]
 801ca34:	2b12      	cmp	r3, #18
 801ca36:	d105      	bne.n	801ca44 <lv_page_signal+0x378>
        bool * editable = (bool *)param;
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	627b      	str	r3, [r7, #36]	; 0x24
        *editable       = true;
 801ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca3e:	2201      	movs	r2, #1
 801ca40:	701a      	strb	r2, [r3, #0]
 801ca42:	e020      	b.n	801ca86 <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801ca44:	7afb      	ldrb	r3, [r7, #11]
 801ca46:	2b06      	cmp	r3, #6
 801ca48:	d11d      	bne.n	801ca86 <lv_page_signal+0x3ba>
        lv_obj_type_t * buf = param;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ca4e:	2300      	movs	r3, #0
 801ca50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ca54:	e00b      	b.n	801ca6e <lv_page_signal+0x3a2>
            if(buf->type[i] == NULL) break;
 801ca56:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d009      	beq.n	801ca78 <lv_page_signal+0x3ac>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ca64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ca68:	3301      	adds	r3, #1
 801ca6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801ca6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ca72:	2b06      	cmp	r3, #6
 801ca74:	d9ef      	bls.n	801ca56 <lv_page_signal+0x38a>
 801ca76:	e000      	b.n	801ca7a <lv_page_signal+0x3ae>
            if(buf->type[i] == NULL) break;
 801ca78:	bf00      	nop
        }
        buf->type[i] = "lv_page";
 801ca7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca80:	4904      	ldr	r1, [pc, #16]	; (801ca94 <lv_page_signal+0x3c8>)
 801ca82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ca86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	373c      	adds	r7, #60	; 0x3c
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	bd90      	pop	{r4, r7, pc}
 801ca92:	bf00      	nop
 801ca94:	08029d90 	.word	0x08029d90

0801ca98 <lv_page_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 801ca98:	b590      	push	{r4, r7, lr}
 801ca9a:	b097      	sub	sp, #92	; 0x5c
 801ca9c:	af00      	add	r7, sp, #0
 801ca9e:	60f8      	str	r0, [r7, #12]
 801caa0:	460b      	mov	r3, r1
 801caa2:	607a      	str	r2, [r7, #4]
 801caa4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 801caa6:	4bbf      	ldr	r3, [pc, #764]	; (801cda4 <lv_page_scrollable_signal+0x30c>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	7af9      	ldrb	r1, [r7, #11]
 801caac:	687a      	ldr	r2, [r7, #4]
 801caae:	68f8      	ldr	r0, [r7, #12]
 801cab0:	4798      	blx	r3
 801cab2:	4603      	mov	r3, r0
 801cab4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    if(res != LV_RES_OK) return res;
 801cab8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801cabc:	2b01      	cmp	r3, #1
 801cabe:	d002      	beq.n	801cac6 <lv_page_scrollable_signal+0x2e>
 801cac0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 801cac4:	e37e      	b.n	801d1c4 <lv_page_scrollable_signal+0x72c>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 801cac6:	68f8      	ldr	r0, [r7, #12]
 801cac8:	f7ea fa88 	bl	8006fdc <lv_obj_get_parent>
 801cacc:	64f8      	str	r0, [r7, #76]	; 0x4c
    const lv_style_t * page_style = lv_obj_get_style(page);
 801cace:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cad0:	f7ea fb1e 	bl	8007110 <lv_obj_get_style>
 801cad4:	64b8      	str	r0, [r7, #72]	; 0x48
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 801cad6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cad8:	f7ea fbd5 	bl	8007286 <lv_obj_get_ext_attr>
 801cadc:	6478      	str	r0, [r7, #68]	; 0x44

    if(sign == LV_SIGNAL_CORD_CHG) {
 801cade:	7afb      	ldrb	r3, [r7, #11]
 801cae0:	2b02      	cmp	r3, #2
 801cae2:	f040 82c8 	bne.w	801d076 <lv_page_scrollable_signal+0x5de>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801cae6:	68f8      	ldr	r0, [r7, #12]
 801cae8:	f7ea fab0 	bl	800704c <lv_obj_get_x>
 801caec:	4603      	mov	r3, r0
 801caee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801caf2:	68f8      	ldr	r0, [r7, #12]
 801caf4:	f7ea fac3 	bl	800707e <lv_obj_get_y>
 801caf8:	4603      	mov	r3, r0
 801cafa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        bool refr_x      = false;
 801cafe:	2300      	movs	r3, #0
 801cb00:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        bool refr_y      = false;
 801cb04:	2300      	movs	r3, #0
 801cb06:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 801cb0a:	f107 031c 	add.w	r3, r7, #28
 801cb0e:	4619      	mov	r1, r3
 801cb10:	68f8      	ldr	r0, [r7, #12]
 801cb12:	f7ea fa8c 	bl	800702e <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 801cb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cb1a:	4619      	mov	r1, r3
 801cb1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cb1e:	f7ea fa86 	bl	800702e <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801cb2c:	b29a      	uxth	r2, r3
 801cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cb34:	b29b      	uxth	r3, r3
 801cb36:	1ad3      	subs	r3, r2, r3
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801cb42:	b29a      	uxth	r2, r3
 801cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cb4a:	b29b      	uxth	r3, r3
 801cb4c:	1ad3      	subs	r3, r2, r3
 801cb4e:	b29b      	uxth	r3, r3
 801cb50:	873b      	strh	r3, [r7, #56]	; 0x38
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801cb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb54:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cb58:	b29a      	uxth	r2, r3
 801cb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb5c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	4413      	add	r3, r2
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 801cb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb6a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cb6e:	b29a      	uxth	r2, r3
 801cb70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cb72:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	4413      	add	r3, r2
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801cb7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cb80:	f7ea fa2c 	bl	8006fdc <lv_obj_get_parent>
 801cb84:	6338      	str	r0, [r7, #48]	; 0x30

        lv_indev_t * indev = lv_indev_get_act();
 801cb86:	f7e8 fcc9 	bl	800551c <lv_indev_get_act>
 801cb8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 801cb8c:	f107 0318 	add.w	r3, r7, #24
 801cb90:	4619      	mov	r1, r3
 801cb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb94:	f7e8 fd68 	bl	8005668 <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801cb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb9a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cb9e:	f003 0301 	and.w	r3, r3, #1
 801cba2:	b2db      	uxtb	r3, r3
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d05d      	beq.n	801cc64 <lv_page_scrollable_signal+0x1cc>
 801cba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbaa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cbae:	f003 0302 	and.w	r3, r3, #2
 801cbb2:	b2db      	uxtb	r3, r3
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d155      	bne.n	801cc64 <lv_page_scrollable_signal+0x1cc>
 801cbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cbba:	f7e8 fd31 	bl	8005620 <lv_indev_is_dragging>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	f083 0301 	eor.w	r3, r3, #1
 801cbc4:	b2db      	uxtb	r3, r3
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d04c      	beq.n	801cc64 <lv_page_scrollable_signal+0x1cc>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801cbca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	dd0b      	ble.n	801cbea <lv_page_scrollable_signal+0x152>
 801cbd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cbd6:	461a      	mov	r2, r3
 801cbd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cbdc:	4619      	mov	r1, r3
 801cbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cbe0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cbe4:	440b      	add	r3, r1
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d00f      	beq.n	801cc0a <lv_page_scrollable_signal+0x172>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cbea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	da38      	bge.n	801cc64 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cbf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cbf6:	461a      	mov	r2, r3
 801cbf8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc00:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cc04:	1acb      	subs	r3, r1, r3
 801cc06:	429a      	cmp	r2, r3
 801cc08:	d12c      	bne.n	801cc64 <lv_page_scrollable_signal+0x1cc>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	dd0b      	ble.n	801cc2a <lv_page_scrollable_signal+0x192>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cc16:	461a      	mov	r2, r3
 801cc18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc1c:	4619      	mov	r1, r3
 801cc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc20:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cc24:	440b      	add	r3, r1
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d00f      	beq.n	801cc4a <lv_page_scrollable_signal+0x1b2>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801cc2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	da18      	bge.n	801cc64 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801cc32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cc36:	461a      	mov	r2, r3
 801cc38:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cc3c:	4619      	mov	r1, r3
 801cc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc40:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cc44:	1acb      	subs	r3, r1, r3
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d10c      	bne.n	801cc64 <lv_page_scrollable_signal+0x1cc>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 801cc4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc4c:	f7ea f9c6 	bl	8006fdc <lv_obj_get_parent>
 801cc50:	4603      	mov	r3, r0
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d006      	beq.n	801cc64 <lv_page_scrollable_signal+0x1cc>
                    page_ext->scroll_prop_ip = 1;
 801cc56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cc58:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801cc5c:	f043 0302 	orr.w	r3, r3, #2
 801cc60:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 801cc64:	f107 031c 	add.w	r3, r7, #28
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7fe fec9 	bl	801ba00 <lv_area_get_width>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	461a      	mov	r2, r3
 801cc72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cc76:	18d4      	adds	r4, r2, r3
 801cc78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc7c:	4618      	mov	r0, r3
 801cc7e:	f7fe febf 	bl	801ba00 <lv_area_get_width>
 801cc82:	4603      	mov	r3, r0
 801cc84:	429c      	cmp	r4, r3
 801cc86:	dc14      	bgt.n	801ccb2 <lv_page_scrollable_signal+0x21a>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 801cc88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cc8c:	461a      	mov	r2, r3
 801cc8e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc92:	4619      	mov	r1, r3
 801cc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc96:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cc9a:	440b      	add	r3, r1
 801cc9c:	429a      	cmp	r2, r3
 801cc9e:	f000 80c8 	beq.w	801ce32 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left;
 801cca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cca4:	8b5b      	ldrh	r3, [r3, #26]
 801cca6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801ccaa:	2301      	movs	r3, #1
 801ccac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801ccb0:	e0bf      	b.n	801ce32 <lv_page_scrollable_signal+0x39a>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801ccb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ccb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ccb8:	f003 0302 	and.w	r3, r3, #2
 801ccbc:	b2db      	uxtb	r3, r3
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d015      	beq.n	801ccee <lv_page_scrollable_signal+0x256>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801ccc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ccc6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801ccca:	429a      	cmp	r2, r3
 801cccc:	f040 80b1 	bne.w	801ce32 <lv_page_scrollable_signal+0x39a>
                                               is reverted. Handle only the pos. because of drag*/
                    new_x  = ori_coords->x1 - page_coords.x1;
 801ccd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccd6:	b29a      	uxth	r2, r3
 801ccd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ccdc:	b29b      	uxth	r3, r3
 801ccde:	1ad3      	subs	r3, r2, r3
 801cce0:	b29b      	uxth	r3, r3
 801cce2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    refr_x = true;
 801cce6:	2301      	movs	r3, #1
 801cce8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 801ccec:	e0a1      	b.n	801ce32 <lv_page_scrollable_signal+0x39a>
                }
            }
            /*The edges of the scrollable can not be in the page (minus hpad) */
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 801ccee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ccf8:	4619      	mov	r1, r3
 801ccfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ccfc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cd00:	1acb      	subs	r3, r1, r3
 801cd02:	429a      	cmp	r2, r3
 801cd04:	da50      	bge.n	801cda8 <lv_page_scrollable_signal+0x310>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801cd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	f7fe fe78 	bl	801ba00 <lv_area_get_width>
 801cd10:	4603      	mov	r3, r0
 801cd12:	b29c      	uxth	r4, r3
 801cd14:	f107 031c 	add.w	r3, r7, #28
 801cd18:	4618      	mov	r0, r3
 801cd1a:	f7fe fe71 	bl	801ba00 <lv_area_get_width>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	b29b      	uxth	r3, r3
 801cd22:	1ae3      	subs	r3, r4, r3
 801cd24:	b29a      	uxth	r2, r3
                        page_style->body.padding.right; /* Right align */
 801cd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cd28:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801cd2c:	b29b      	uxth	r3, r3
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 801cd2e:	1ad3      	subs	r3, r2, r3
 801cd30:	b29b      	uxth	r3, r3
 801cd32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801cd36:	2301      	movs	r3, #1
 801cd38:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd42:	f003 0301 	and.w	r3, r3, #1
 801cd46:	b2db      	uxtb	r3, r3
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d072      	beq.n	801ce32 <lv_page_scrollable_signal+0x39a>
 801cd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd52:	f003 0310 	and.w	r3, r3, #16
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d16a      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd62:	f003 0308 	and.w	r3, r3, #8
 801cd66:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d162      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd72:	f003 0302 	and.w	r3, r3, #2
 801cd76:	b2db      	uxtb	r3, r3
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d15a      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cd7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd82:	f003 0304 	and.w	r3, r3, #4
 801cd86:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d152      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801cd8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cd8e:	f7ff f979 	bl	801c084 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 801cd92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd94:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cd98:	f043 0308 	orr.w	r3, r3, #8
 801cd9c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801cda0:	e047      	b.n	801ce32 <lv_page_scrollable_signal+0x39a>
 801cda2:	bf00      	nop
 801cda4:	20002adc 	.word	0x20002adc
                }
#endif
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 801cda8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801cdac:	461a      	mov	r2, r3
 801cdae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cdb2:	4619      	mov	r1, r3
 801cdb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdb6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801cdba:	440b      	add	r3, r1
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	dd38      	ble.n	801ce32 <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left; /*Left align*/
 801cdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cdc2:	8b5b      	ldrh	r3, [r3, #26]
 801cdc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                refr_x = true;
 801cdc8:	2301      	movs	r3, #1
 801cdca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cdce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cdd4:	f003 0301 	and.w	r3, r3, #1
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d029      	beq.n	801ce32 <lv_page_scrollable_signal+0x39a>
 801cdde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cde4:	f003 0310 	and.w	r3, r3, #16
 801cde8:	b2db      	uxtb	r3, r3
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d121      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cdee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cdf4:	f003 0308 	and.w	r3, r3, #8
 801cdf8:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d119      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce04:	f003 0302 	and.w	r3, r3, #2
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d111      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801ce0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce14:	f003 0304 	and.w	r3, r3, #4
 801ce18:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d109      	bne.n	801ce32 <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801ce1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ce20:	f7ff f930 	bl	801c084 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 801ce24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ce26:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801ce2a:	f043 0310 	orr.w	r3, r3, #16
 801ce2e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 801ce32:	f107 031c 	add.w	r3, r7, #28
 801ce36:	4618      	mov	r0, r3
 801ce38:	f7fe fdf9 	bl	801ba2e <lv_area_get_height>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	461a      	mov	r2, r3
 801ce40:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ce44:	18d4      	adds	r4, r2, r3
 801ce46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	f7fe fdef 	bl	801ba2e <lv_area_get_height>
 801ce50:	4603      	mov	r3, r0
 801ce52:	429c      	cmp	r4, r3
 801ce54:	dc14      	bgt.n	801ce80 <lv_page_scrollable_signal+0x3e8>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 801ce56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ce5a:	461a      	mov	r2, r3
 801ce5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ce60:	4619      	mov	r1, r3
 801ce62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ce68:	440b      	add	r3, r1
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	f000 80c5 	beq.w	801cffa <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top;
 801ce70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce72:	8adb      	ldrh	r3, [r3, #22]
 801ce74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801ce78:	2301      	movs	r3, #1
 801ce7a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801ce7e:	e0bc      	b.n	801cffa <lv_page_scrollable_signal+0x562>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801ce80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce82:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ce86:	f003 0302 	and.w	r3, r3, #2
 801ce8a:	b2db      	uxtb	r3, r3
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d015      	beq.n	801cebc <lv_page_scrollable_signal+0x424>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801ce90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ce94:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	f040 80ae 	bne.w	801cffa <lv_page_scrollable_signal+0x562>
                                               is reverted. Handle only the pos. because of drag*/
                    new_y  = ori_coords->y1 - page_coords.y1;
 801ce9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cea0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cea4:	b29a      	uxth	r2, r3
 801cea6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ceaa:	b29b      	uxth	r3, r3
 801ceac:	1ad3      	subs	r3, r2, r3
 801ceae:	b29b      	uxth	r3, r3
 801ceb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                    refr_y = true;
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 801ceba:	e09e      	b.n	801cffa <lv_page_scrollable_signal+0x562>
                }
            }
            /*The edges of the scrollable can not be in the page (minus vpad) */
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 801cebc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cec0:	461a      	mov	r2, r3
 801cec2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801cec6:	4619      	mov	r1, r3
 801cec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ceca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cece:	1acb      	subs	r3, r1, r3
 801ced0:	429a      	cmp	r2, r3
 801ced2:	da4d      	bge.n	801cf70 <lv_page_scrollable_signal+0x4d8>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801ced4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7fe fda8 	bl	801ba2e <lv_area_get_height>
 801cede:	4603      	mov	r3, r0
 801cee0:	b29c      	uxth	r4, r3
 801cee2:	f107 031c 	add.w	r3, r7, #28
 801cee6:	4618      	mov	r0, r3
 801cee8:	f7fe fda1 	bl	801ba2e <lv_area_get_height>
 801ceec:	4603      	mov	r3, r0
 801ceee:	b29b      	uxth	r3, r3
 801cef0:	1ae3      	subs	r3, r4, r3
 801cef2:	b29a      	uxth	r2, r3
                        page_style->body.padding.bottom; /* Bottom align */
 801cef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cef6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cefa:	b29b      	uxth	r3, r3
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801cefc:	1ad3      	subs	r3, r2, r3
 801cefe:	b29b      	uxth	r3, r3
 801cf00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801cf04:	2301      	movs	r3, #1
 801cf06:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf10:	f003 0301 	and.w	r3, r3, #1
 801cf14:	b2db      	uxtb	r3, r3
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d06f      	beq.n	801cffa <lv_page_scrollable_signal+0x562>
 801cf1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf20:	f003 0310 	and.w	r3, r3, #16
 801cf24:	b2db      	uxtb	r3, r3
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d167      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf30:	f003 0308 	and.w	r3, r3, #8
 801cf34:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d15f      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf40:	f003 0302 	and.w	r3, r3, #2
 801cf44:	b2db      	uxtb	r3, r3
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d157      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cf4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf50:	f003 0304 	and.w	r3, r3, #4
 801cf54:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d14f      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801cf5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cf5c:	f7ff f892 	bl	801c084 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801cf60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cf62:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cf66:	f043 0304 	orr.w	r3, r3, #4
 801cf6a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801cf6e:	e044      	b.n	801cffa <lv_page_scrollable_signal+0x562>
                }
#endif
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 801cf70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cf74:	461a      	mov	r2, r3
 801cf76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf7a:	4619      	mov	r1, r3
 801cf7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cf82:	440b      	add	r3, r1
 801cf84:	429a      	cmp	r2, r3
 801cf86:	dd38      	ble.n	801cffa <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top; /*Top align*/
 801cf88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf8a:	8adb      	ldrh	r3, [r3, #22]
 801cf8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                refr_y = true;
 801cf90:	2301      	movs	r3, #1
 801cf92:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cf9c:	f003 0301 	and.w	r3, r3, #1
 801cfa0:	b2db      	uxtb	r3, r3
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d029      	beq.n	801cffa <lv_page_scrollable_signal+0x562>
 801cfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfac:	f003 0310 	and.w	r3, r3, #16
 801cfb0:	b2db      	uxtb	r3, r3
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d121      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfbc:	f003 0308 	and.w	r3, r3, #8
 801cfc0:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d119      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfcc:	f003 0302 	and.w	r3, r3, #2
 801cfd0:	b2db      	uxtb	r3, r3
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d111      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 801cfd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cfdc:	f003 0304 	and.w	r3, r3, #4
 801cfe0:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d109      	bne.n	801cffa <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 801cfe6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801cfe8:	f7ff f84c 	bl	801c084 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 801cfec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cfee:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801cff2:	f043 0302 	orr.w	r3, r3, #2
 801cff6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 801cffa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d103      	bne.n	801d00a <lv_page_scrollable_signal+0x572>
 801d002:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801d006:	2b00      	cmp	r3, #0
 801d008:	d031      	beq.n	801d06e <lv_page_scrollable_signal+0x5d6>
            lv_obj_set_pos(scrl, new_x, new_y);
 801d00a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 801d00e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801d012:	4619      	mov	r1, r3
 801d014:	68f8      	ldr	r0, [r7, #12]
 801d016:	f7e9 f809 	bl	800602c <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 801d01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d01c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801d020:	f003 0302 	and.w	r3, r3, #2
 801d024:	b2db      	uxtb	r3, r3
 801d026:	2b00      	cmp	r3, #0
 801d028:	d021      	beq.n	801d06e <lv_page_scrollable_signal+0x5d6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 801d02a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d00c      	beq.n	801d04c <lv_page_scrollable_signal+0x5b4>
 801d032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d034:	f7ea f823 	bl	800707e <lv_obj_get_y>
 801d038:	4603      	mov	r3, r0
 801d03a:	b29a      	uxth	r2, r3
 801d03c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d03e:	4413      	add	r3, r2
 801d040:	b29b      	uxth	r3, r3
 801d042:	b21b      	sxth	r3, r3
 801d044:	4619      	mov	r1, r3
 801d046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d048:	f7e9 f890 	bl	800616c <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 801d04c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801d050:	2b00      	cmp	r3, #0
 801d052:	d00c      	beq.n	801d06e <lv_page_scrollable_signal+0x5d6>
 801d054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d056:	f7e9 fff9 	bl	800704c <lv_obj_get_x>
 801d05a:	4603      	mov	r3, r0
 801d05c:	b29a      	uxth	r2, r3
 801d05e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d060:	4413      	add	r3, r2
 801d062:	b29b      	uxth	r3, r3
 801d064:	b21b      	sxth	r3, r3
 801d066:	4619      	mov	r1, r3
 801d068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d06a:	f7e9 f86a 	bl	8006142 <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 801d06e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d070:	f000 f8da 	bl	801d228 <lv_page_sb_refresh>
 801d074:	e0a4      	b.n	801d1c0 <lv_page_scrollable_signal+0x728>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 801d076:	7afb      	ldrb	r3, [r7, #11]
 801d078:	2b0e      	cmp	r3, #14
 801d07a:	f040 80a1 	bne.w	801d1c0 <lv_page_scrollable_signal+0x728>

        /*Scroll propagation is finished on drag end*/
        page_ext->scroll_prop_ip = 0;
 801d07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d080:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801d084:	f36f 0341 	bfc	r3, #1, #1
 801d088:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e

        /*Hide scrollbars if required*/
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 801d08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d08e:	7f1b      	ldrb	r3, [r3, #28]
 801d090:	f003 031c 	and.w	r3, r3, #28
 801d094:	b2db      	uxtb	r3, r3
 801d096:	2b08      	cmp	r3, #8
 801d098:	f040 8092 	bne.w	801d1c0 <lv_page_scrollable_signal+0x728>
            lv_disp_t * disp = lv_obj_get_disp(page);
 801d09c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d09e:	f7e9 ff63 	bl	8006f68 <lv_obj_get_disp>
 801d0a2:	6438      	str	r0, [r7, #64]	; 0x40
            lv_area_t sb_area_tmp;
            if(page_ext->sb.hor_draw) {
 801d0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0a6:	7f1b      	ldrb	r3, [r3, #28]
 801d0a8:	f003 0301 	and.w	r3, r3, #1
 801d0ac:	b2db      	uxtb	r3, r3
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d03f      	beq.n	801d132 <lv_page_scrollable_signal+0x69a>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 801d0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0b4:	f103 020c 	add.w	r2, r3, #12
 801d0b8:	f107 0310 	add.w	r3, r7, #16
 801d0bc:	4611      	mov	r1, r2
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7fe fc90 	bl	801b9e4 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801d0c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d0c8:	b29a      	uxth	r2, r3
 801d0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d0d0:	b29b      	uxth	r3, r3
 801d0d2:	4413      	add	r3, r2
 801d0d4:	b29b      	uxth	r3, r3
 801d0d6:	b21b      	sxth	r3, r3
 801d0d8:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801d0da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d0de:	b29a      	uxth	r2, r3
 801d0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d0e6:	b29b      	uxth	r3, r3
 801d0e8:	4413      	add	r3, r2
 801d0ea:	b29b      	uxth	r3, r3
 801d0ec:	b21b      	sxth	r3, r3
 801d0ee:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801d0f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d0f4:	b29a      	uxth	r2, r3
 801d0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d0f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d0fc:	b29b      	uxth	r3, r3
 801d0fe:	4413      	add	r3, r2
 801d100:	b29b      	uxth	r3, r3
 801d102:	b21b      	sxth	r3, r3
 801d104:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801d106:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d10a:	b29a      	uxth	r2, r3
 801d10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d10e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d112:	b29b      	uxth	r3, r3
 801d114:	4413      	add	r3, r2
 801d116:	b29b      	uxth	r3, r3
 801d118:	b21b      	sxth	r3, r3
 801d11a:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801d11c:	f107 0310 	add.w	r3, r7, #16
 801d120:	4619      	mov	r1, r3
 801d122:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d124:	f7ea fb08 	bl	8007738 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 801d128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d12a:	7f13      	ldrb	r3, [r2, #28]
 801d12c:	f36f 0300 	bfc	r3, #0, #1
 801d130:	7713      	strb	r3, [r2, #28]
            }
            if(page_ext->sb.ver_draw) {
 801d132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d134:	7f1b      	ldrb	r3, [r3, #28]
 801d136:	f003 0302 	and.w	r3, r3, #2
 801d13a:	b2db      	uxtb	r3, r3
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d03f      	beq.n	801d1c0 <lv_page_scrollable_signal+0x728>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 801d140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d142:	f103 0214 	add.w	r2, r3, #20
 801d146:	f107 0310 	add.w	r3, r7, #16
 801d14a:	4611      	mov	r1, r2
 801d14c:	4618      	mov	r0, r3
 801d14e:	f7fe fc49 	bl	801b9e4 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801d152:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d156:	b29a      	uxth	r2, r3
 801d158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d15a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d15e:	b29b      	uxth	r3, r3
 801d160:	4413      	add	r3, r2
 801d162:	b29b      	uxth	r3, r3
 801d164:	b21b      	sxth	r3, r3
 801d166:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 801d168:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d16c:	b29a      	uxth	r2, r3
 801d16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d170:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d174:	b29b      	uxth	r3, r3
 801d176:	4413      	add	r3, r2
 801d178:	b29b      	uxth	r3, r3
 801d17a:	b21b      	sxth	r3, r3
 801d17c:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801d17e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d182:	b29a      	uxth	r2, r3
 801d184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d186:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d18a:	b29b      	uxth	r3, r3
 801d18c:	4413      	add	r3, r2
 801d18e:	b29b      	uxth	r3, r3
 801d190:	b21b      	sxth	r3, r3
 801d192:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 801d194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d198:	b29a      	uxth	r2, r3
 801d19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d19c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d1a0:	b29b      	uxth	r3, r3
 801d1a2:	4413      	add	r3, r2
 801d1a4:	b29b      	uxth	r3, r3
 801d1a6:	b21b      	sxth	r3, r3
 801d1a8:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 801d1aa:	f107 0310 	add.w	r3, r7, #16
 801d1ae:	4619      	mov	r1, r3
 801d1b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d1b2:	f7ea fac1 	bl	8007738 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 801d1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d1b8:	7f13      	ldrb	r3, [r2, #28]
 801d1ba:	f36f 0341 	bfc	r3, #1, #1
 801d1be:	7713      	strb	r3, [r2, #28]
            }
        }
    }

    return res;
 801d1c0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
}
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	375c      	adds	r7, #92	; 0x5c
 801d1c8:	46bd      	mov	sp, r7
 801d1ca:	bd90      	pop	{r4, r7, pc}

0801d1cc <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b084      	sub	sp, #16
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	6078      	str	r0, [r7, #4]
 801d1d4:	460b      	mov	r3, r1
 801d1d6:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801d1d8:	6878      	ldr	r0, [r7, #4]
 801d1da:	f7e9 feff 	bl	8006fdc <lv_obj_get_parent>
 801d1de:	60f8      	str	r0, [r7, #12]

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 801d1e0:	78fb      	ldrb	r3, [r7, #3]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d014      	beq.n	801d210 <scrl_def_event_cb+0x44>
 801d1e6:	78fb      	ldrb	r3, [r7, #3]
 801d1e8:	2b01      	cmp	r3, #1
 801d1ea:	d011      	beq.n	801d210 <scrl_def_event_cb+0x44>
 801d1ec:	78fb      	ldrb	r3, [r7, #3]
 801d1ee:	2b02      	cmp	r3, #2
 801d1f0:	d00e      	beq.n	801d210 <scrl_def_event_cb+0x44>
 801d1f2:	78fb      	ldrb	r3, [r7, #3]
 801d1f4:	2b07      	cmp	r3, #7
 801d1f6:	d00b      	beq.n	801d210 <scrl_def_event_cb+0x44>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
 801d1f8:	78fb      	ldrb	r3, [r7, #3]
 801d1fa:	2b03      	cmp	r3, #3
 801d1fc:	d008      	beq.n	801d210 <scrl_def_event_cb+0x44>
 801d1fe:	78fb      	ldrb	r3, [r7, #3]
 801d200:	2b06      	cmp	r3, #6
 801d202:	d005      	beq.n	801d210 <scrl_def_event_cb+0x44>
 801d204:	78fb      	ldrb	r3, [r7, #3]
 801d206:	2b04      	cmp	r3, #4
 801d208:	d002      	beq.n	801d210 <scrl_def_event_cb+0x44>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
 801d20a:	78fb      	ldrb	r3, [r7, #3]
 801d20c:	2b05      	cmp	r3, #5
 801d20e:	d107      	bne.n	801d220 <scrl_def_event_cb+0x54>
        lv_event_send(page, event, lv_event_get_data());
 801d210:	f7e9 fe44 	bl	8006e9c <lv_event_get_data>
 801d214:	4602      	mov	r2, r0
 801d216:	78fb      	ldrb	r3, [r7, #3]
 801d218:	4619      	mov	r1, r3
 801d21a:	68f8      	ldr	r0, [r7, #12]
 801d21c:	f7e9 fdb9 	bl	8006d92 <lv_event_send>
    }
    /*clang-format on*/
}
 801d220:	bf00      	nop
 801d222:	3710      	adds	r7, #16
 801d224:	46bd      	mov	sp, r7
 801d226:	bd80      	pop	{r7, pc}

0801d228 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 801d228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d22a:	b08d      	sub	sp, #52	; 0x34
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801d230:	6878      	ldr	r0, [r7, #4]
 801d232:	f7ea f828 	bl	8007286 <lv_obj_get_ext_attr>
 801d236:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_style_t * style = lv_obj_get_style(page);
 801d238:	6878      	ldr	r0, [r7, #4]
 801d23a:	f7e9 ff69 	bl	8007110 <lv_obj_get_style>
 801d23e:	6278      	str	r0, [r7, #36]	; 0x24
    lv_obj_t * scrl          = ext->scrl;
 801d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d242:	685b      	ldr	r3, [r3, #4]
 801d244:	623b      	str	r3, [r7, #32]
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 801d246:	6a38      	ldr	r0, [r7, #32]
 801d248:	f7e9 ff32 	bl	80070b0 <lv_obj_get_width>
 801d24c:	4603      	mov	r3, r0
 801d24e:	83fb      	strh	r3, [r7, #30]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801d250:	6a38      	ldr	r0, [r7, #32]
 801d252:	f7e9 ff3b 	bl	80070cc <lv_obj_get_height>
 801d256:	4603      	mov	r3, r0
 801d258:	83bb      	strh	r3, [r7, #28]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f7e9 ff28 	bl	80070b0 <lv_obj_get_width>
 801d260:	4603      	mov	r3, r0
 801d262:	837b      	strh	r3, [r7, #26]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 801d264:	6878      	ldr	r0, [r7, #4]
 801d266:	f7e9 ff31 	bl	80070cc <lv_obj_get_height>
 801d26a:	4603      	mov	r3, r0
 801d26c:	833b      	strh	r3, [r7, #24]

    /*Always let 'scrollbar width' padding above, under, left and right to the scrollbars
     * else:
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d270:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d276:	689b      	ldr	r3, [r3, #8]
 801d278:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d27c:	4293      	cmp	r3, r2
 801d27e:	bfb8      	it	lt
 801d280:	4613      	movlt	r3, r2
 801d282:	82fb      	strh	r3, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 801d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d286:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d28c:	689b      	ldr	r3, [r3, #8]
 801d28e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d292:	4293      	cmp	r3, r2
 801d294:	bfb8      	it	lt
 801d296:	4613      	movlt	r3, r2
 801d298:	82bb      	strh	r3, [r7, #20]

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 801d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d29c:	7f1b      	ldrb	r3, [r3, #28]
 801d29e:	f003 031c 	and.w	r3, r3, #28
 801d2a2:	b2db      	uxtb	r3, r3
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	f000 82ba 	beq.w	801d81e <lv_page_sb_refresh+0x5f6>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 801d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2ac:	7f1b      	ldrb	r3, [r3, #28]
 801d2ae:	f003 031c 	and.w	r3, r3, #28
 801d2b2:	b2db      	uxtb	r3, r3
 801d2b4:	2b04      	cmp	r3, #4
 801d2b6:	d109      	bne.n	801d2cc <lv_page_sb_refresh+0xa4>
        ext->sb.hor_draw = 1;
 801d2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2ba:	7f13      	ldrb	r3, [r2, #28]
 801d2bc:	f043 0301 	orr.w	r3, r3, #1
 801d2c0:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 1;
 801d2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2c4:	7f13      	ldrb	r3, [r2, #28]
 801d2c6:	f043 0302 	orr.w	r3, r3, #2
 801d2ca:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 801d2cc:	6878      	ldr	r0, [r7, #4]
 801d2ce:	f7e9 fe4b 	bl	8006f68 <lv_obj_get_disp>
 801d2d2:	6138      	str	r0, [r7, #16]
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 801d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2d6:	7f1b      	ldrb	r3, [r3, #28]
 801d2d8:	f003 0301 	and.w	r3, r3, #1
 801d2dc:	b2db      	uxtb	r3, r3
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d03a      	beq.n	801d358 <lv_page_sb_refresh+0x130>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2e4:	f103 020c 	add.w	r2, r3, #12
 801d2e8:	f107 0308 	add.w	r3, r7, #8
 801d2ec:	4611      	mov	r1, r2
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7fe fb78 	bl	801b9e4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d2f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d2f8:	b29a      	uxth	r2, r3
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d300:	b29b      	uxth	r3, r3
 801d302:	4413      	add	r3, r2
 801d304:	b29b      	uxth	r3, r3
 801d306:	b21b      	sxth	r3, r3
 801d308:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d30a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d30e:	b29a      	uxth	r2, r3
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d316:	b29b      	uxth	r3, r3
 801d318:	4413      	add	r3, r2
 801d31a:	b29b      	uxth	r3, r3
 801d31c:	b21b      	sxth	r3, r3
 801d31e:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d320:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d324:	b29a      	uxth	r2, r3
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	4413      	add	r3, r2
 801d330:	b29b      	uxth	r3, r3
 801d332:	b21b      	sxth	r3, r3
 801d334:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d33a:	b29a      	uxth	r2, r3
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d342:	b29b      	uxth	r3, r3
 801d344:	4413      	add	r3, r2
 801d346:	b29b      	uxth	r3, r3
 801d348:	b21b      	sxth	r3, r3
 801d34a:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d34c:	f107 0308 	add.w	r3, r7, #8
 801d350:	4619      	mov	r1, r3
 801d352:	6938      	ldr	r0, [r7, #16]
 801d354:	f7ea f9f0 	bl	8007738 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d35a:	7f1b      	ldrb	r3, [r3, #28]
 801d35c:	f003 0302 	and.w	r3, r3, #2
 801d360:	b2db      	uxtb	r3, r3
 801d362:	2b00      	cmp	r3, #0
 801d364:	d03a      	beq.n	801d3dc <lv_page_sb_refresh+0x1b4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d368:	f103 0214 	add.w	r2, r3, #20
 801d36c:	f107 0308 	add.w	r3, r7, #8
 801d370:	4611      	mov	r1, r2
 801d372:	4618      	mov	r0, r3
 801d374:	f7fe fb36 	bl	801b9e4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d378:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d37c:	b29a      	uxth	r2, r3
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d384:	b29b      	uxth	r3, r3
 801d386:	4413      	add	r3, r2
 801d388:	b29b      	uxth	r3, r3
 801d38a:	b21b      	sxth	r3, r3
 801d38c:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d38e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d392:	b29a      	uxth	r2, r3
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	4413      	add	r3, r2
 801d39e:	b29b      	uxth	r3, r3
 801d3a0:	b21b      	sxth	r3, r3
 801d3a2:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d3a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d3a8:	b29a      	uxth	r2, r3
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d3b0:	b29b      	uxth	r3, r3
 801d3b2:	4413      	add	r3, r2
 801d3b4:	b29b      	uxth	r3, r3
 801d3b6:	b21b      	sxth	r3, r3
 801d3b8:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d3ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d3be:	b29a      	uxth	r2, r3
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d3c6:	b29b      	uxth	r3, r3
 801d3c8:	4413      	add	r3, r2
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	b21b      	sxth	r3, r3
 801d3ce:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d3d0:	f107 0308 	add.w	r3, r7, #8
 801d3d4:	4619      	mov	r1, r3
 801d3d6:	6938      	ldr	r0, [r7, #16]
 801d3d8:	f7ea f9ae 	bl	8007738 <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 801d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3de:	7f1b      	ldrb	r3, [r3, #28]
 801d3e0:	f003 031c 	and.w	r3, r3, #28
 801d3e4:	b2db      	uxtb	r3, r3
 801d3e6:	2b08      	cmp	r3, #8
 801d3e8:	d116      	bne.n	801d418 <lv_page_sb_refresh+0x1f0>
 801d3ea:	f7e8 f897 	bl	800551c <lv_indev_get_act>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	f7e8 f915 	bl	8005620 <lv_indev_is_dragging>
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	f083 0301 	eor.w	r3, r3, #1
 801d3fc:	b2db      	uxtb	r3, r3
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d00a      	beq.n	801d418 <lv_page_sb_refresh+0x1f0>
        ext->sb.hor_draw = 0;
 801d402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d404:	7f13      	ldrb	r3, [r2, #28]
 801d406:	f36f 0300 	bfc	r3, #0, #1
 801d40a:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 0;
 801d40c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d40e:	7f13      	ldrb	r3, [r2, #28]
 801d410:	f36f 0341 	bfc	r3, #1, #1
 801d414:	7713      	strb	r3, [r2, #28]
        return;
 801d416:	e203      	b.n	801d820 <lv_page_sb_refresh+0x5f8>
    }

    /*Full sized horizontal scrollbar*/
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801d418:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801d41c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d422:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d426:	1a5b      	subs	r3, r3, r1
 801d428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d42a:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d42e:	1a5b      	subs	r3, r3, r1
 801d430:	429a      	cmp	r2, r3
 801d432:	dc38      	bgt.n	801d4a6 <lv_page_sb_refresh+0x27e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 801d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d436:	f103 000c 	add.w	r0, r3, #12
 801d43a:	8b7a      	ldrh	r2, [r7, #26]
 801d43c:	8afb      	ldrh	r3, [r7, #22]
 801d43e:	005b      	lsls	r3, r3, #1
 801d440:	b29b      	uxth	r3, r3
 801d442:	1ad3      	subs	r3, r2, r3
 801d444:	b29b      	uxth	r3, r3
 801d446:	b21b      	sxth	r3, r3
 801d448:	4619      	mov	r1, r3
 801d44a:	f7f5 fc2a 	bl	8012ca2 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d450:	f103 000c 	add.w	r0, r3, #12
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801d454:	8b3a      	ldrh	r2, [r7, #24]
 801d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d458:	689b      	ldr	r3, [r3, #8]
 801d45a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d45e:	b29b      	uxth	r3, r3
 801d460:	1ad3      	subs	r3, r2, r3
 801d462:	b29a      	uxth	r2, r3
 801d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d466:	689b      	ldr	r3, [r3, #8]
 801d468:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	1ad3      	subs	r3, r2, r3
 801d470:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801d472:	b21a      	sxth	r2, r3
 801d474:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d478:	4619      	mov	r1, r3
 801d47a:	f7f5 fc42 	bl	8012d02 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 801d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d480:	7f1b      	ldrb	r3, [r3, #28]
 801d482:	f003 031c 	and.w	r3, r3, #28
 801d486:	b2db      	uxtb	r3, r3
 801d488:	2b0c      	cmp	r3, #12
 801d48a:	d006      	beq.n	801d49a <lv_page_sb_refresh+0x272>
 801d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d48e:	7f1b      	ldrb	r3, [r3, #28]
 801d490:	f003 031c 	and.w	r3, r3, #28
 801d494:	b2db      	uxtb	r3, r3
 801d496:	2b08      	cmp	r3, #8
 801d498:	d17c      	bne.n	801d594 <lv_page_sb_refresh+0x36c>
 801d49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d49c:	7f13      	ldrb	r3, [r2, #28]
 801d49e:	f36f 0300 	bfc	r3, #0, #1
 801d4a2:	7713      	strb	r3, [r2, #28]
 801d4a4:	e076      	b.n	801d594 <lv_page_sb_refresh+0x36c>
    }
    /*Smaller horizontal scrollbar*/
    else {
        size_tmp =
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 801d4a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d4aa:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 801d4ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d4b2:	0052      	lsls	r2, r2, #1
 801d4b4:	1a8a      	subs	r2, r1, r2
 801d4b6:	fb02 f203 	mul.w	r2, r2, r3
 801d4ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d4be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d4c0:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d4c4:	440b      	add	r3, r1
 801d4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d4c8:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d4cc:	440b      	add	r3, r1
 801d4ce:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 801d4d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 801d4d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d4d8:	2b0b      	cmp	r3, #11
 801d4da:	dc01      	bgt.n	801d4e0 <lv_page_sb_refresh+0x2b8>
 801d4dc:	230c      	movs	r3, #12
 801d4de:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 801d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e2:	330c      	adds	r3, #12
 801d4e4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d4e8:	4611      	mov	r1, r2
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	f7f5 fbd9 	bl	8012ca2 <lv_area_set_width>

        lv_area_set_pos(&ext->sb.hor_area,
 801d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4f2:	f103 040c 	add.w	r4, r3, #12
                        sb_hor_pad +
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 801d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801d4fc:	461d      	mov	r5, r3
 801d4fe:	6a38      	ldr	r0, [r7, #32]
 801d500:	f7e9 fda4 	bl	800704c <lv_obj_get_x>
 801d504:	4603      	mov	r3, r0
 801d506:	1aeb      	subs	r3, r5, r3
 801d508:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 801d50c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d510:	1a89      	subs	r1, r1, r2
 801d512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d516:	0052      	lsls	r2, r2, #1
 801d518:	1a8a      	subs	r2, r1, r2
 801d51a:	fb02 f203 	mul.w	r2, r2, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 801d51e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d524:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801d528:	440b      	add	r3, r1
 801d52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d52c:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801d530:	4419      	add	r1, r3
 801d532:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d536:	1acb      	subs	r3, r1, r3
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 801d538:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_hor_pad +
 801d53c:	b29a      	uxth	r2, r3
 801d53e:	8afb      	ldrh	r3, [r7, #22]
 801d540:	4413      	add	r3, r2
 801d542:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 801d544:	b219      	sxth	r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 801d546:	8b3a      	ldrh	r2, [r7, #24]
 801d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d54a:	689b      	ldr	r3, [r3, #8]
 801d54c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d550:	b29b      	uxth	r3, r3
 801d552:	1ad3      	subs	r3, r2, r3
 801d554:	b29a      	uxth	r2, r3
 801d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d558:	689b      	ldr	r3, [r3, #8]
 801d55a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d55e:	b29b      	uxth	r3, r3
 801d560:	1ad3      	subs	r3, r2, r3
 801d562:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 801d564:	b21b      	sxth	r3, r3
 801d566:	461a      	mov	r2, r3
 801d568:	4620      	mov	r0, r4
 801d56a:	f7f5 fbca 	bl	8012d02 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 801d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d570:	7f1b      	ldrb	r3, [r3, #28]
 801d572:	f003 031c 	and.w	r3, r3, #28
 801d576:	b2db      	uxtb	r3, r3
 801d578:	2b0c      	cmp	r3, #12
 801d57a:	d006      	beq.n	801d58a <lv_page_sb_refresh+0x362>
 801d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d57e:	7f1b      	ldrb	r3, [r3, #28]
 801d580:	f003 031c 	and.w	r3, r3, #28
 801d584:	b2db      	uxtb	r3, r3
 801d586:	2b08      	cmp	r3, #8
 801d588:	d104      	bne.n	801d594 <lv_page_sb_refresh+0x36c>
 801d58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d58c:	7f13      	ldrb	r3, [r2, #28]
 801d58e:	f043 0301 	orr.w	r3, r3, #1
 801d592:	7713      	strb	r3, [r2, #28]
    }

    /*Full sized vertical scroll bar*/
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 801d594:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801d598:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d59c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d59e:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d5a2:	1a5b      	subs	r3, r3, r1
 801d5a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d5a6:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d5aa:	1a5b      	subs	r3, r3, r1
 801d5ac:	429a      	cmp	r2, r3
 801d5ae:	dc38      	bgt.n	801d622 <lv_page_sb_refresh+0x3fa>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 801d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5b2:	f103 0014 	add.w	r0, r3, #20
 801d5b6:	8b3a      	ldrh	r2, [r7, #24]
 801d5b8:	8abb      	ldrh	r3, [r7, #20]
 801d5ba:	005b      	lsls	r3, r3, #1
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	1ad3      	subs	r3, r2, r3
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	b21b      	sxth	r3, r3
 801d5c4:	4619      	mov	r1, r3
 801d5c6:	f7f5 fb84 	bl	8012cd2 <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,
 801d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5cc:	f103 0014 	add.w	r0, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 801d5d0:	8b7a      	ldrh	r2, [r7, #26]
 801d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5d4:	689b      	ldr	r3, [r3, #8]
 801d5d6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	1ad3      	subs	r3, r2, r3
 801d5de:	b29a      	uxth	r2, r3
 801d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5e2:	689b      	ldr	r3, [r3, #8]
 801d5e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801d5e8:	b29b      	uxth	r3, r3
 801d5ea:	1ad3      	subs	r3, r2, r3
 801d5ec:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d5ee:	b21b      	sxth	r3, r3
 801d5f0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d5f4:	4619      	mov	r1, r3
 801d5f6:	f7f5 fb84 	bl	8012d02 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 801d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5fc:	7f1b      	ldrb	r3, [r3, #28]
 801d5fe:	f003 031c 	and.w	r3, r3, #28
 801d602:	b2db      	uxtb	r3, r3
 801d604:	2b0c      	cmp	r3, #12
 801d606:	d006      	beq.n	801d616 <lv_page_sb_refresh+0x3ee>
 801d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d60a:	7f1b      	ldrb	r3, [r3, #28]
 801d60c:	f003 031c 	and.w	r3, r3, #28
 801d610:	b2db      	uxtb	r3, r3
 801d612:	2b08      	cmp	r3, #8
 801d614:	d17e      	bne.n	801d714 <lv_page_sb_refresh+0x4ec>
 801d616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d618:	7f13      	ldrb	r3, [r2, #28]
 801d61a:	f36f 0341 	bfc	r3, #1, #1
 801d61e:	7713      	strb	r3, [r2, #28]
 801d620:	e078      	b.n	801d714 <lv_page_sb_refresh+0x4ec>
    }
    /*Smaller vertical scroll bar*/
    else {
        size_tmp =
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 801d622:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d626:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801d62a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d62e:	0052      	lsls	r2, r2, #1
 801d630:	1a8a      	subs	r2, r1, r2
 801d632:	fb02 f203 	mul.w	r2, r2, r3
 801d636:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801d63a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d63c:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d640:	440b      	add	r3, r1
 801d642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d644:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d648:	440b      	add	r3, r1
 801d64a:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 801d64e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 801d650:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d654:	2b0b      	cmp	r3, #11
 801d656:	dc01      	bgt.n	801d65c <lv_page_sb_refresh+0x434>
 801d658:	230c      	movs	r3, #12
 801d65a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 801d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d65e:	3314      	adds	r3, #20
 801d660:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d664:	4611      	mov	r1, r2
 801d666:	4618      	mov	r0, r3
 801d668:	f7f5 fb33 	bl	8012cd2 <lv_area_set_height>

        lv_area_set_pos(&ext->sb.ver_area,
 801d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d66e:	f103 0414 	add.w	r4, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 801d672:	8b7a      	ldrh	r2, [r7, #26]
 801d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d676:	689b      	ldr	r3, [r3, #8]
 801d678:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801d67c:	b29b      	uxth	r3, r3
 801d67e:	1ad3      	subs	r3, r2, r3
 801d680:	b29a      	uxth	r2, r3
 801d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d684:	689b      	ldr	r3, [r3, #8]
 801d686:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801d68a:	b29b      	uxth	r3, r3
 801d68c:	1ad3      	subs	r3, r2, r3
 801d68e:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d690:	b21d      	sxth	r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d694:	689b      	ldr	r3, [r3, #8]
 801d696:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801d69a:	461e      	mov	r6, r3
 801d69c:	6a38      	ldr	r0, [r7, #32]
 801d69e:	f7e9 fcee 	bl	800707e <lv_obj_get_y>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	1af3      	subs	r3, r6, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801d6a6:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801d6aa:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801d6ae:	1a89      	subs	r1, r1, r2
 801d6b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d6b4:	0052      	lsls	r2, r2, #1
 801d6b6:	1a8a      	subs	r2, r1, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d6b8:	fb02 f203 	mul.w	r2, r2, r3
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801d6bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801d6c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6c2:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 801d6c6:	440b      	add	r3, r1
 801d6c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6ca:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801d6ce:	4419      	add	r1, r3
 801d6d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801d6d4:	1acb      	subs	r3, r1, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801d6d6:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801d6da:	b29a      	uxth	r2, r3
 801d6dc:	8abb      	ldrh	r3, [r7, #20]
 801d6de:	4413      	add	r3, r2
 801d6e0:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 801d6e2:	b21b      	sxth	r3, r3
 801d6e4:	461a      	mov	r2, r3
 801d6e6:	4629      	mov	r1, r5
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	f7f5 fb0a 	bl	8012d02 <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 801d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f0:	7f1b      	ldrb	r3, [r3, #28]
 801d6f2:	f003 031c 	and.w	r3, r3, #28
 801d6f6:	b2db      	uxtb	r3, r3
 801d6f8:	2b0c      	cmp	r3, #12
 801d6fa:	d006      	beq.n	801d70a <lv_page_sb_refresh+0x4e2>
 801d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6fe:	7f1b      	ldrb	r3, [r3, #28]
 801d700:	f003 031c 	and.w	r3, r3, #28
 801d704:	b2db      	uxtb	r3, r3
 801d706:	2b08      	cmp	r3, #8
 801d708:	d104      	bne.n	801d714 <lv_page_sb_refresh+0x4ec>
 801d70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d70c:	7f13      	ldrb	r3, [r2, #28]
 801d70e:	f043 0302 	orr.w	r3, r3, #2
 801d712:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 801d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d716:	7f1b      	ldrb	r3, [r3, #28]
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	b2db      	uxtb	r3, r3
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d03a      	beq.n	801d798 <lv_page_sb_refresh+0x570>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d724:	f103 020c 	add.w	r2, r3, #12
 801d728:	f107 0308 	add.w	r3, r7, #8
 801d72c:	4611      	mov	r1, r2
 801d72e:	4618      	mov	r0, r3
 801d730:	f7fe f958 	bl	801b9e4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d734:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d738:	b29a      	uxth	r2, r3
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d740:	b29b      	uxth	r3, r3
 801d742:	4413      	add	r3, r2
 801d744:	b29b      	uxth	r3, r3
 801d746:	b21b      	sxth	r3, r3
 801d748:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d74a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d74e:	b29a      	uxth	r2, r3
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d756:	b29b      	uxth	r3, r3
 801d758:	4413      	add	r3, r2
 801d75a:	b29b      	uxth	r3, r3
 801d75c:	b21b      	sxth	r3, r3
 801d75e:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d760:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d764:	b29a      	uxth	r2, r3
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d76c:	b29b      	uxth	r3, r3
 801d76e:	4413      	add	r3, r2
 801d770:	b29b      	uxth	r3, r3
 801d772:	b21b      	sxth	r3, r3
 801d774:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d77a:	b29a      	uxth	r2, r3
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d782:	b29b      	uxth	r3, r3
 801d784:	4413      	add	r3, r2
 801d786:	b29b      	uxth	r3, r3
 801d788:	b21b      	sxth	r3, r3
 801d78a:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d78c:	f107 0308 	add.w	r3, r7, #8
 801d790:	4619      	mov	r1, r3
 801d792:	6938      	ldr	r0, [r7, #16]
 801d794:	f7e9 ffd0 	bl	8007738 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d79a:	7f1b      	ldrb	r3, [r3, #28]
 801d79c:	f003 0302 	and.w	r3, r3, #2
 801d7a0:	b2db      	uxtb	r3, r3
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d03c      	beq.n	801d820 <lv_page_sb_refresh+0x5f8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7a8:	f103 0214 	add.w	r2, r3, #20
 801d7ac:	f107 0308 	add.w	r3, r7, #8
 801d7b0:	4611      	mov	r1, r2
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f7fe f916 	bl	801b9e4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801d7b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7bc:	b29a      	uxth	r2, r3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d7c4:	b29b      	uxth	r3, r3
 801d7c6:	4413      	add	r3, r2
 801d7c8:	b29b      	uxth	r3, r3
 801d7ca:	b21b      	sxth	r3, r3
 801d7cc:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801d7ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d7d2:	b29a      	uxth	r2, r3
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d7da:	b29b      	uxth	r3, r3
 801d7dc:	4413      	add	r3, r2
 801d7de:	b29b      	uxth	r3, r3
 801d7e0:	b21b      	sxth	r3, r3
 801d7e2:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801d7e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d7e8:	b29a      	uxth	r2, r3
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d7f0:	b29b      	uxth	r3, r3
 801d7f2:	4413      	add	r3, r2
 801d7f4:	b29b      	uxth	r3, r3
 801d7f6:	b21b      	sxth	r3, r3
 801d7f8:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 801d7fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d7fe:	b29a      	uxth	r2, r3
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801d806:	b29b      	uxth	r3, r3
 801d808:	4413      	add	r3, r2
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	b21b      	sxth	r3, r3
 801d80e:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 801d810:	f107 0308 	add.w	r3, r7, #8
 801d814:	4619      	mov	r1, r3
 801d816:	6938      	ldr	r0, [r7, #16]
 801d818:	f7e9 ff8e 	bl	8007738 <lv_inv_area>
 801d81c:	e000      	b.n	801d820 <lv_page_sb_refresh+0x5f8>
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 801d81e:	bf00      	nop
    }
}
 801d820:	3734      	adds	r7, #52	; 0x34
 801d822:	46bd      	mov	sp, r7
 801d824:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d826 <edge_flash_anim>:

#if LV_USE_ANIMATION
static void edge_flash_anim(void * page, lv_anim_value_t v)
{
 801d826:	b580      	push	{r7, lr}
 801d828:	b084      	sub	sp, #16
 801d82a:	af00      	add	r7, sp, #0
 801d82c:	6078      	str	r0, [r7, #4]
 801d82e:	460b      	mov	r3, r1
 801d830:	807b      	strh	r3, [r7, #2]
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7e9 fd27 	bl	8007286 <lv_obj_get_ext_attr>
 801d838:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.state = v;
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	887a      	ldrh	r2, [r7, #2]
 801d83e:	841a      	strh	r2, [r3, #32]
    lv_obj_invalidate(page);
 801d840:	6878      	ldr	r0, [r7, #4]
 801d842:	f7e8 faf4 	bl	8005e2e <lv_obj_invalidate>
}
 801d846:	bf00      	nop
 801d848:	3710      	adds	r7, #16
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}

0801d84e <edge_flash_anim_end>:

static void edge_flash_anim_end(lv_anim_t * a)
{
 801d84e:	b580      	push	{r7, lr}
 801d850:	b084      	sub	sp, #16
 801d852:	af00      	add	r7, sp, #0
 801d854:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	4618      	mov	r0, r3
 801d85c:	f7e9 fd13 	bl	8007286 <lv_obj_get_ext_attr>
 801d860:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.top_ip    = 0;
 801d862:	68fa      	ldr	r2, [r7, #12]
 801d864:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d868:	f36f 0341 	bfc	r3, #1, #1
 801d86c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
 801d870:	68fa      	ldr	r2, [r7, #12]
 801d872:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d876:	f36f 0382 	bfc	r3, #2, #1
 801d87a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.left_ip   = 0;
 801d87e:	68fa      	ldr	r2, [r7, #12]
 801d880:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d884:	f36f 1304 	bfc	r3, #4, #1
 801d888:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ext->edge_flash.right_ip  = 0;
 801d88c:	68fa      	ldr	r2, [r7, #12]
 801d88e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d892:	f36f 03c3 	bfc	r3, #3, #1
 801d896:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lv_obj_invalidate(a->var);
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7e8 fac5 	bl	8005e2e <lv_obj_invalidate>
}
 801d8a4:	bf00      	nop
 801d8a6:	3710      	adds	r7, #16
 801d8a8:	46bd      	mov	sp, r7
 801d8aa:	bd80      	pop	{r7, pc}

0801d8ac <lv_area_copy>:
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b082      	sub	sp, #8
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
 801d8b4:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 801d8b6:	2208      	movs	r2, #8
 801d8b8:	6839      	ldr	r1, [r7, #0]
 801d8ba:	6878      	ldr	r0, [r7, #4]
 801d8bc:	f009 fcb2 	bl	8027224 <memcpy>
}
 801d8c0:	bf00      	nop
 801d8c2:	3708      	adds	r7, #8
 801d8c4:	46bd      	mov	sp, r7
 801d8c6:	bd80      	pop	{r7, pc}

0801d8c8 <lv_area_get_width>:
{
 801d8c8:	b480      	push	{r7}
 801d8ca:	b083      	sub	sp, #12
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8d6:	b29a      	uxth	r2, r3
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	1ad3      	subs	r3, r2, r3
 801d8e2:	b29b      	uxth	r3, r3
 801d8e4:	3301      	adds	r3, #1
 801d8e6:	b29b      	uxth	r3, r3
 801d8e8:	b21b      	sxth	r3, r3
}
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	370c      	adds	r7, #12
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8f4:	4770      	bx	lr

0801d8f6 <lv_area_get_height>:
{
 801d8f6:	b480      	push	{r7}
 801d8f8:	b083      	sub	sp, #12
 801d8fa:	af00      	add	r7, sp, #0
 801d8fc:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d904:	b29a      	uxth	r2, r3
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	1ad3      	subs	r3, r2, r3
 801d910:	b29b      	uxth	r3, r3
 801d912:	3301      	adds	r3, #1
 801d914:	b29b      	uxth	r3, r3
 801d916:	b21b      	sxth	r3, r3
}
 801d918:	4618      	mov	r0, r3
 801d91a:	370c      	adds	r7, #12
 801d91c:	46bd      	mov	sp, r7
 801d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d922:	4770      	bx	lr

0801d924 <lv_slider_set_value>:
 * @param slider pointer to a slider object
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b082      	sub	sp, #8
 801d928:	af00      	add	r7, sp, #0
 801d92a:	6078      	str	r0, [r7, #4]
 801d92c:	460b      	mov	r3, r1
 801d92e:	807b      	strh	r3, [r7, #2]
 801d930:	4613      	mov	r3, r2
 801d932:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 801d934:	787a      	ldrb	r2, [r7, #1]
 801d936:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d93a:	4619      	mov	r1, r3
 801d93c:	6878      	ldr	r0, [r7, #4]
 801d93e:	f7f7 fb59 	bl	8014ff4 <lv_bar_set_value>
}
 801d942:	bf00      	nop
 801d944:	3708      	adds	r7, #8
 801d946:	46bd      	mov	sp, r7
 801d948:	bd80      	pop	{r7, pc}

0801d94a <lv_slider_get_min_value>:
 * Get the minimum value of a slider
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
 801d94a:	b580      	push	{r7, lr}
 801d94c:	b082      	sub	sp, #8
 801d94e:	af00      	add	r7, sp, #0
 801d950:	6078      	str	r0, [r7, #4]
    return lv_bar_get_min_value(slider);
 801d952:	6878      	ldr	r0, [r7, #4]
 801d954:	f7f7 fc58 	bl	8015208 <lv_bar_get_min_value>
 801d958:	4603      	mov	r3, r0
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3708      	adds	r7, #8
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}

0801d962 <lv_slider_get_max_value>:
 * Get the maximum value of a slider
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
 801d962:	b580      	push	{r7, lr}
 801d964:	b082      	sub	sp, #8
 801d966:	af00      	add	r7, sp, #0
 801d968:	6078      	str	r0, [r7, #4]
    return lv_bar_get_max_value(slider);
 801d96a:	6878      	ldr	r0, [r7, #4]
 801d96c:	f7f7 fc5b 	bl	8015226 <lv_bar_get_max_value>
 801d970:	4603      	mov	r3, r0
}
 801d972:	4618      	mov	r0, r3
 801d974:	3708      	adds	r7, #8
 801d976:	46bd      	mov	sp, r7
 801d978:	bd80      	pop	{r7, pc}
	...

0801d97c <lv_slider_create>:
 * @param par pointer to an object, it will be the parent of the new slider
 * @param copy pointer to a slider object, if not NULL then the new object will be copied from it
 * @return pointer to the created slider
 */
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b086      	sub	sp, #24
 801d980:	af00      	add	r7, sp, #0
 801d982:	6078      	str	r0, [r7, #4]
 801d984:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("slider create started");

    /*Create the ancestor slider*/
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 801d986:	6839      	ldr	r1, [r7, #0]
 801d988:	6878      	ldr	r0, [r7, #4]
 801d98a:	f7f7 fa6d 	bl	8014e68 <lv_bar_create>
 801d98e:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_slider);
 801d990:	697b      	ldr	r3, [r7, #20]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d100      	bne.n	801d998 <lv_slider_create+0x1c>
 801d996:	e7fe      	b.n	801d996 <lv_slider_create+0x1a>
    if(new_slider == NULL) return NULL;
 801d998:	697b      	ldr	r3, [r7, #20]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d101      	bne.n	801d9a2 <lv_slider_create+0x26>
 801d99e:	2300      	movs	r3, #0
 801d9a0:	e07a      	b.n	801da98 <lv_slider_create+0x11c>

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 801d9a2:	4b3f      	ldr	r3, [pc, #252]	; (801daa0 <lv_slider_create+0x124>)
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d105      	bne.n	801d9b6 <lv_slider_create+0x3a>
 801d9aa:	6978      	ldr	r0, [r7, #20]
 801d9ac:	f7e9 fc5f 	bl	800726e <lv_obj_get_design_cb>
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	4b3b      	ldr	r3, [pc, #236]	; (801daa0 <lv_slider_create+0x124>)
 801d9b4:	601a      	str	r2, [r3, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 801d9b6:	4b3b      	ldr	r3, [pc, #236]	; (801daa4 <lv_slider_create+0x128>)
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d105      	bne.n	801d9ca <lv_slider_create+0x4e>
 801d9be:	6978      	ldr	r0, [r7, #20]
 801d9c0:	f7e9 fc49 	bl	8007256 <lv_obj_get_signal_cb>
 801d9c4:	4602      	mov	r2, r0
 801d9c6:	4b37      	ldr	r3, [pc, #220]	; (801daa4 <lv_slider_create+0x128>)
 801d9c8:	601a      	str	r2, [r3, #0]

    /*Allocate the slider type specific extended data*/
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 801d9ca:	211c      	movs	r1, #28
 801d9cc:	6978      	ldr	r0, [r7, #20]
 801d9ce:	f7e9 fa8d 	bl	8006eec <lv_obj_allocate_ext_attr>
 801d9d2:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801d9d4:	693b      	ldr	r3, [r7, #16]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d100      	bne.n	801d9dc <lv_slider_create+0x60>
 801d9da:	e7fe      	b.n	801d9da <lv_slider_create+0x5e>
    if(ext == NULL) return NULL;
 801d9dc:	693b      	ldr	r3, [r7, #16]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d101      	bne.n	801d9e6 <lv_slider_create+0x6a>
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	e058      	b.n	801da98 <lv_slider_create+0x11c>

    /*Initialize the allocated 'ext' */
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801d9e6:	693b      	ldr	r3, [r7, #16]
 801d9e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d9ec:	831a      	strh	r2, [r3, #24]
    ext->style_knob = &lv_style_pretty;
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	4a2d      	ldr	r2, [pc, #180]	; (801daa8 <lv_slider_create+0x12c>)
 801d9f2:	615a      	str	r2, [r3, #20]
    ext->knob_in    = 0;
 801d9f4:	693a      	ldr	r2, [r7, #16]
 801d9f6:	7e93      	ldrb	r3, [r2, #26]
 801d9f8:	f36f 0300 	bfc	r3, #0, #1
 801d9fc:	7693      	strb	r3, [r2, #26]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 801d9fe:	492b      	ldr	r1, [pc, #172]	; (801daac <lv_slider_create+0x130>)
 801da00:	6978      	ldr	r0, [r7, #20]
 801da02:	f7e9 fa57 	bl	8006eb4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 801da06:	492a      	ldr	r1, [pc, #168]	; (801dab0 <lv_slider_create+0x134>)
 801da08:	6978      	ldr	r0, [r7, #20]
 801da0a:	f7e9 fa61 	bl	8006ed0 <lv_obj_set_design_cb>

    /*Init the new slider slider*/
    if(copy == NULL) {
 801da0e:	683b      	ldr	r3, [r7, #0]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d12b      	bne.n	801da6c <lv_slider_create+0xf0>
        lv_obj_set_click(new_slider, true);
 801da14:	2101      	movs	r1, #1
 801da16:	6978      	ldr	r0, [r7, #20]
 801da18:	f7e9 f92b 	bl	8006c72 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 801da1c:	2110      	movs	r1, #16
 801da1e:	6978      	ldr	r0, [r7, #20]
 801da20:	f7e9 f97c 	bl	8006d1c <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801da24:	f001 fab2 	bl	801ef8c <lv_theme_get_current>
 801da28:	60b8      	str	r0, [r7, #8]
        if(th) {
 801da2a:	68bb      	ldr	r3, [r7, #8]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d015      	beq.n	801da5c <lv_slider_create+0xe0>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 801da30:	68bb      	ldr	r3, [r7, #8]
 801da32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da34:	461a      	mov	r2, r3
 801da36:	2100      	movs	r1, #0
 801da38:	6978      	ldr	r0, [r7, #20]
 801da3a:	f000 f863 	bl	801db04 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 801da3e:	68bb      	ldr	r3, [r7, #8]
 801da40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da42:	461a      	mov	r2, r3
 801da44:	2101      	movs	r1, #1
 801da46:	6978      	ldr	r0, [r7, #20]
 801da48:	f000 f85c 	bl	801db04 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 801da4c:	68bb      	ldr	r3, [r7, #8]
 801da4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801da50:	461a      	mov	r2, r3
 801da52:	2102      	movs	r1, #2
 801da54:	6978      	ldr	r0, [r7, #20]
 801da56:	f000 f855 	bl	801db04 <lv_slider_set_style>
 801da5a:	e01c      	b.n	801da96 <lv_slider_create+0x11a>
        } else {
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 801da5c:	693b      	ldr	r3, [r7, #16]
 801da5e:	695b      	ldr	r3, [r3, #20]
 801da60:	461a      	mov	r2, r3
 801da62:	2102      	movs	r1, #2
 801da64:	6978      	ldr	r0, [r7, #20]
 801da66:	f000 f84d 	bl	801db04 <lv_slider_set_style>
 801da6a:	e014      	b.n	801da96 <lv_slider_create+0x11a>
        }
    }
    /*Copy an existing slider*/
    else {
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801da6c:	6838      	ldr	r0, [r7, #0]
 801da6e:	f7e9 fc0a 	bl	8007286 <lv_obj_get_ext_attr>
 801da72:	60f8      	str	r0, [r7, #12]
        ext->style_knob            = copy_ext->style_knob;
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	695a      	ldr	r2, [r3, #20]
 801da78:	693b      	ldr	r3, [r7, #16]
 801da7a:	615a      	str	r2, [r3, #20]
        ext->knob_in               = copy_ext->knob_in;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	7e9b      	ldrb	r3, [r3, #26]
 801da80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801da84:	b2d9      	uxtb	r1, r3
 801da86:	693a      	ldr	r2, [r7, #16]
 801da88:	7e93      	ldrb	r3, [r2, #26]
 801da8a:	f361 0300 	bfi	r3, r1, #0, #1
 801da8e:	7693      	strb	r3, [r2, #26]
        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_slider);
 801da90:	6978      	ldr	r0, [r7, #20]
 801da92:	f7e9 f8da 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("slider created");

    return new_slider;
 801da96:	697b      	ldr	r3, [r7, #20]
}
 801da98:	4618      	mov	r0, r3
 801da9a:	3718      	adds	r7, #24
 801da9c:	46bd      	mov	sp, r7
 801da9e:	bd80      	pop	{r7, pc}
 801daa0:	20002ae0 	.word	0x20002ae0
 801daa4:	20002ae4 	.word	0x20002ae4
 801daa8:	20006b84 	.word	0x20006b84
 801daac:	0801e4a9 	.word	0x0801e4a9
 801dab0:	0801dbe3 	.word	0x0801dbe3

0801dab4 <lv_slider_set_knob_in>:
 * @param slider pointer to slider object
 * @param in true: the knob is drawn always in the slider;
 *           false: the knob can be out on the edges
 */
void lv_slider_set_knob_in(lv_obj_t * slider, bool in)
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b084      	sub	sp, #16
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
 801dabc:	460b      	mov	r3, r1
 801dabe:	70fb      	strb	r3, [r7, #3]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801dac0:	6878      	ldr	r0, [r7, #4]
 801dac2:	f7e9 fbe0 	bl	8007286 <lv_obj_get_ext_attr>
 801dac6:	60f8      	str	r0, [r7, #12]
    if(ext->knob_in == in) return;
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	7e9b      	ldrb	r3, [r3, #26]
 801dacc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dad0:	b2db      	uxtb	r3, r3
 801dad2:	78fa      	ldrb	r2, [r7, #3]
 801dad4:	429a      	cmp	r2, r3
 801dad6:	d011      	beq.n	801dafc <lv_slider_set_knob_in+0x48>

    ext->knob_in = in == false ? 0 : 1;
 801dad8:	78fb      	ldrb	r3, [r7, #3]
 801dada:	f083 0301 	eor.w	r3, r3, #1
 801dade:	b2db      	uxtb	r3, r3
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d001      	beq.n	801dae8 <lv_slider_set_knob_in+0x34>
 801dae4:	2100      	movs	r1, #0
 801dae6:	e000      	b.n	801daea <lv_slider_set_knob_in+0x36>
 801dae8:	2101      	movs	r1, #1
 801daea:	68fa      	ldr	r2, [r7, #12]
 801daec:	7e93      	ldrb	r3, [r2, #26]
 801daee:	f361 0300 	bfi	r3, r1, #0, #1
 801daf2:	7693      	strb	r3, [r2, #26]
    lv_obj_invalidate(slider);
 801daf4:	6878      	ldr	r0, [r7, #4]
 801daf6:	f7e8 f99a 	bl	8005e2e <lv_obj_invalidate>
 801dafa:	e000      	b.n	801dafe <lv_slider_set_knob_in+0x4a>
    if(ext->knob_in == in) return;
 801dafc:	bf00      	nop
}
 801dafe:	3710      	adds	r7, #16
 801db00:	46bd      	mov	sp, r7
 801db02:	bd80      	pop	{r7, pc}

0801db04 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
 801db04:	b580      	push	{r7, lr}
 801db06:	b086      	sub	sp, #24
 801db08:	af00      	add	r7, sp, #0
 801db0a:	60f8      	str	r0, [r7, #12]
 801db0c:	460b      	mov	r3, r1
 801db0e:	607a      	str	r2, [r7, #4]
 801db10:	72fb      	strb	r3, [r7, #11]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801db12:	68f8      	ldr	r0, [r7, #12]
 801db14:	f7e9 fbb7 	bl	8007286 <lv_obj_get_ext_attr>
 801db18:	6178      	str	r0, [r7, #20]

    switch(type) {
 801db1a:	7afb      	ldrb	r3, [r7, #11]
 801db1c:	2b01      	cmp	r3, #1
 801db1e:	d00a      	beq.n	801db36 <lv_slider_set_style+0x32>
 801db20:	2b02      	cmp	r3, #2
 801db22:	d00e      	beq.n	801db42 <lv_slider_set_style+0x3e>
 801db24:	2b00      	cmp	r3, #0
 801db26:	d000      	beq.n	801db2a <lv_slider_set_style+0x26>
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
 801db28:	e012      	b.n	801db50 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 801db2a:	687a      	ldr	r2, [r7, #4]
 801db2c:	2100      	movs	r1, #0
 801db2e:	68f8      	ldr	r0, [r7, #12]
 801db30:	f7f7 fb30 	bl	8015194 <lv_bar_set_style>
 801db34:	e00c      	b.n	801db50 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 801db36:	687a      	ldr	r2, [r7, #4]
 801db38:	2101      	movs	r1, #1
 801db3a:	68f8      	ldr	r0, [r7, #12]
 801db3c:	f7f7 fb2a 	bl	8015194 <lv_bar_set_style>
 801db40:	e006      	b.n	801db50 <lv_slider_set_style+0x4c>
            ext->style_knob = style;
 801db42:	697b      	ldr	r3, [r7, #20]
 801db44:	687a      	ldr	r2, [r7, #4]
 801db46:	615a      	str	r2, [r3, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 801db48:	68f8      	ldr	r0, [r7, #12]
 801db4a:	f7e9 f9e5 	bl	8006f18 <lv_obj_refresh_ext_draw_pad>
            break;
 801db4e:	bf00      	nop
}
 801db50:	bf00      	nop
 801db52:	3718      	adds	r7, #24
 801db54:	46bd      	mov	sp, r7
 801db56:	bd80      	pop	{r7, pc}

0801db58 <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 801db58:	b580      	push	{r7, lr}
 801db5a:	b084      	sub	sp, #16
 801db5c:	af00      	add	r7, sp, #0
 801db5e:	6078      	str	r0, [r7, #4]
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801db60:	6878      	ldr	r0, [r7, #4]
 801db62:	f7e9 fb90 	bl	8007286 <lv_obj_get_ext_attr>
 801db66:	60f8      	str	r0, [r7, #12]

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801db6e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801db72:	d003      	beq.n	801db7c <lv_slider_get_value+0x24>
        return ext->drag_value;
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801db7a:	e003      	b.n	801db84 <lv_slider_get_value+0x2c>
    else
        return lv_bar_get_value(slider);
 801db7c:	6878      	ldr	r0, [r7, #4]
 801db7e:	f7f7 fb2a 	bl	80151d6 <lv_bar_get_value>
 801db82:	4603      	mov	r3, r0
}
 801db84:	4618      	mov	r0, r3
 801db86:	3710      	adds	r7, #16
 801db88:	46bd      	mov	sp, r7
 801db8a:	bd80      	pop	{r7, pc}

0801db8c <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b084      	sub	sp, #16
 801db90:	af00      	add	r7, sp, #0
 801db92:	6078      	str	r0, [r7, #4]
 801db94:	460b      	mov	r3, r1
 801db96:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 801db98:	2300      	movs	r3, #0
 801db9a:	60fb      	str	r3, [r7, #12]
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 801db9c:	6878      	ldr	r0, [r7, #4]
 801db9e:	f7e9 fb72 	bl	8007286 <lv_obj_get_ext_attr>
 801dba2:	60b8      	str	r0, [r7, #8]

    switch(type) {
 801dba4:	78fb      	ldrb	r3, [r7, #3]
 801dba6:	2b01      	cmp	r3, #1
 801dba8:	d009      	beq.n	801dbbe <lv_slider_get_style+0x32>
 801dbaa:	2b02      	cmp	r3, #2
 801dbac:	d00d      	beq.n	801dbca <lv_slider_get_style+0x3e>
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d10f      	bne.n	801dbd2 <lv_slider_get_style+0x46>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	6878      	ldr	r0, [r7, #4]
 801dbb6:	f7f7 fb45 	bl	8015244 <lv_bar_get_style>
 801dbba:	60f8      	str	r0, [r7, #12]
 801dbbc:	e00c      	b.n	801dbd8 <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 801dbbe:	2101      	movs	r1, #1
 801dbc0:	6878      	ldr	r0, [r7, #4]
 801dbc2:	f7f7 fb3f 	bl	8015244 <lv_bar_get_style>
 801dbc6:	60f8      	str	r0, [r7, #12]
 801dbc8:	e006      	b.n	801dbd8 <lv_slider_get_style+0x4c>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	695b      	ldr	r3, [r3, #20]
 801dbce:	60fb      	str	r3, [r7, #12]
 801dbd0:	e002      	b.n	801dbd8 <lv_slider_get_style+0x4c>
        default: style = NULL; break;
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	60fb      	str	r3, [r7, #12]
 801dbd6:	bf00      	nop
    }

    return style;
 801dbd8:	68fb      	ldr	r3, [r7, #12]
}
 801dbda:	4618      	mov	r0, r3
 801dbdc:	3710      	adds	r7, #16
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	bd80      	pop	{r7, pc}

0801dbe2 <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
 801dbe2:	b590      	push	{r4, r7, lr}
 801dbe4:	b0ad      	sub	sp, #180	; 0xb4
 801dbe6:	af00      	add	r7, sp, #0
 801dbe8:	60f8      	str	r0, [r7, #12]
 801dbea:	60b9      	str	r1, [r7, #8]
 801dbec:	4613      	mov	r3, r2
 801dbee:	71fb      	strb	r3, [r7, #7]
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 801dbf0:	79fb      	ldrb	r3, [r7, #7]
 801dbf2:	2b02      	cmp	r3, #2
 801dbf4:	d102      	bne.n	801dbfc <lv_slider_design+0x1a>
        return false;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	f000 bc52 	b.w	801e4a0 <lv_slider_design+0x8be>
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801dbfc:	79fb      	ldrb	r3, [r7, #7]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	f040 844d 	bne.w	801e49e <lv_slider_design+0x8bc>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801dc04:	68f8      	ldr	r0, [r7, #12]
 801dc06:	f7e9 fb3e 	bl	8007286 <lv_obj_get_ext_attr>
 801dc0a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 801dc0e:	2100      	movs	r1, #0
 801dc10:	68f8      	ldr	r0, [r7, #12]
 801dc12:	f7ff ffbb 	bl	801db8c <lv_slider_get_style>
 801dc16:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 801dc1a:	2102      	movs	r1, #2
 801dc1c:	68f8      	ldr	r0, [r7, #12]
 801dc1e:	f7ff ffb5 	bl	801db8c <lv_slider_get_style>
 801dc22:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 801dc26:	2101      	movs	r1, #1
 801dc28:	68f8      	ldr	r0, [r7, #12]
 801dc2a:	f7ff ffaf 	bl	801db8c <lv_slider_get_style>
 801dc2e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 801dc32:	68f8      	ldr	r0, [r7, #12]
 801dc34:	f7e9 fad9 	bl	80071ea <lv_obj_get_opa_scale>
 801dc38:	4603      	mov	r3, r0
 801dc3a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	3310      	adds	r3, #16
 801dc42:	4618      	mov	r0, r3
 801dc44:	f7ff fe40 	bl	801d8c8 <lv_area_get_width>
 801dc48:	4603      	mov	r3, r0
 801dc4a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	3310      	adds	r3, #16
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7ff fe4f 	bl	801d8f6 <lv_area_get_height>
 801dc58:	4603      	mov	r3, r0
 801dc5a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	f103 0210 	add.w	r2, r3, #16
 801dc64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dc68:	4611      	mov	r1, r2
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f7ff fe1e 	bl	801d8ac <lv_area_copy>

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 801dc70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc74:	8adb      	ldrh	r3, [r3, #22]
 801dc76:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 801dc7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc7e:	8b1b      	ldrh	r3, [r3, #24]
 801dc80:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 801dc84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc88:	8b5b      	ldrh	r3, [r3, #26]
 801dc8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 801dc8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dc92:	8b9b      	ldrh	r3, [r3, #28]
 801dc94:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801dc98:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801dc9c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801dca0:	4413      	add	r3, r2
 801dca2:	1d1c      	adds	r4, r3, #4
 801dca4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7ff fe24 	bl	801d8f6 <lv_area_get_height>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	429c      	cmp	r4, r3
 801dcb2:	dd0d      	ble.n	801dcd0 <lv_slider_design+0xee>
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dcb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dcb8:	4618      	mov	r0, r3
 801dcba:	f7ff fe1c 	bl	801d8f6 <lv_area_get_height>
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	3b04      	subs	r3, #4
 801dcc2:	105b      	asrs	r3, r3, #1
 801dcc4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            pad_bottom_bg = pad_top_bg;
 801dcc8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801dccc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801dcd0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801dcd4:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 801dcd8:	4413      	add	r3, r2
 801dcda:	1d1c      	adds	r4, r3, #4
 801dcdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dce0:	4618      	mov	r0, r3
 801dce2:	f7ff fdf1 	bl	801d8c8 <lv_area_get_width>
 801dce6:	4603      	mov	r3, r0
 801dce8:	429c      	cmp	r4, r3
 801dcea:	dd13      	ble.n	801dd14 <lv_slider_design+0x132>
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dcec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7ff fde9 	bl	801d8c8 <lv_area_get_width>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	3b04      	subs	r3, #4
 801dcfa:	105b      	asrs	r3, r3, #1
 801dcfc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801dd00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dd04:	4618      	mov	r0, r3
 801dd06:	f7ff fddf 	bl	801d8c8 <lv_area_get_width>
 801dd0a:	4603      	mov	r3, r0
 801dd0c:	3b04      	subs	r3, #4
 801dd0e:	105b      	asrs	r3, r3, #1
 801dd10:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 801dd14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801dd18:	7e9b      	ldrb	r3, [r3, #26]
 801dd1a:	f003 0301 	and.w	r3, r3, #1
 801dd1e:	b2db      	uxtb	r3, r3
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d028      	beq.n	801dd76 <lv_slider_design+0x194>
            area_bg.x1 += pad_left_bg;
 801dd24:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dd28:	b29a      	uxth	r2, r3
 801dd2a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801dd2e:	4413      	add	r3, r2
 801dd30:	b29b      	uxth	r3, r3
 801dd32:	b21b      	sxth	r3, r3
 801dd34:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= pad_right_bg;
 801dd38:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801dd3c:	b29a      	uxth	r2, r3
 801dd3e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801dd42:	1ad3      	subs	r3, r2, r3
 801dd44:	b29b      	uxth	r3, r3
 801dd46:	b21b      	sxth	r3, r3
 801dd48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += pad_top_bg;
 801dd4c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dd50:	b29a      	uxth	r2, r3
 801dd52:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801dd56:	4413      	add	r3, r2
 801dd58:	b29b      	uxth	r3, r3
 801dd5a:	b21b      	sxth	r3, r3
 801dd5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= pad_bottom_bg;
 801dd60:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dd64:	b29a      	uxth	r2, r3
 801dd66:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801dd6a:	1ad3      	subs	r3, r2, r3
 801dd6c:	b29b      	uxth	r3, r3
 801dd6e:	b21b      	sxth	r3, r3
 801dd70:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801dd74:	e047      	b.n	801de06 <lv_slider_design+0x224>
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 801dd76:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dd7a:	b29a      	uxth	r2, r3
 801dd7c:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801dd80:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801dd84:	4299      	cmp	r1, r3
 801dd86:	da02      	bge.n	801dd8e <lv_slider_design+0x1ac>
 801dd88:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801dd8c:	e000      	b.n	801dd90 <lv_slider_design+0x1ae>
 801dd8e:	2300      	movs	r3, #0
 801dd90:	4413      	add	r3, r2
 801dd92:	b29b      	uxth	r3, r3
 801dd94:	b21b      	sxth	r3, r3
 801dd96:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 801dd9a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801dd9e:	b29a      	uxth	r2, r3
 801dda0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801dda4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801dda8:	4299      	cmp	r1, r3
 801ddaa:	da02      	bge.n	801ddb2 <lv_slider_design+0x1d0>
 801ddac:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801ddb0:	e000      	b.n	801ddb4 <lv_slider_design+0x1d2>
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	1ad3      	subs	r3, r2, r3
 801ddb6:	b29b      	uxth	r3, r3
 801ddb8:	b21b      	sxth	r3, r3
 801ddba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 801ddbe:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801ddc2:	b29a      	uxth	r2, r3
 801ddc4:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801ddc8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ddcc:	4299      	cmp	r1, r3
 801ddce:	dd02      	ble.n	801ddd6 <lv_slider_design+0x1f4>
 801ddd0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801ddd4:	e000      	b.n	801ddd8 <lv_slider_design+0x1f6>
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	4413      	add	r3, r2
 801ddda:	b29b      	uxth	r3, r3
 801dddc:	b21b      	sxth	r3, r3
 801ddde:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 801dde2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dde6:	b29a      	uxth	r2, r3
 801dde8:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801ddec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ddf0:	4299      	cmp	r1, r3
 801ddf2:	dd02      	ble.n	801ddfa <lv_slider_design+0x218>
 801ddf4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801ddf8:	e000      	b.n	801ddfc <lv_slider_design+0x21a>
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	1ad3      	subs	r3, r2, r3
 801ddfe:	b29b      	uxth	r3, r3
 801de00:	b21b      	sxth	r3, r3
 801de02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the slider is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 801de06:	68f8      	ldr	r0, [r7, #12]
 801de08:	f7e9 fa55 	bl	80072b6 <lv_obj_is_focused>
 801de0c:	4603      	mov	r3, r0
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d012      	beq.n	801de38 <lv_slider_design+0x256>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801de12:	f107 0314 	add.w	r3, r7, #20
 801de16:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801de1a:	4618      	mov	r0, r3
 801de1c:	f7ea fca2 	bl	8008764 <lv_style_copy>
            style_tmp.body.border.width = 0;
 801de20:	2300      	movs	r3, #0
 801de22:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801de24:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801de28:	f107 0214 	add.w	r2, r7, #20
 801de2c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801de30:	68b9      	ldr	r1, [r7, #8]
 801de32:	f7ee fedc 	bl	800cbee <lv_draw_rect>
 801de36:	e008      	b.n	801de4a <lv_slider_design+0x268>
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 801de38:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801de3c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801de40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801de44:	68b9      	ldr	r1, [r7, #8]
 801de46:	f7ee fed2 	bl	800cbee <lv_draw_rect>
        }
#endif

        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);
 801de4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801de4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de52:	4611      	mov	r1, r2
 801de54:	4618      	mov	r0, r3
 801de56:	f7ff fd29 	bl	801d8ac <lv_area_copy>

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 801de5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de5e:	8adb      	ldrh	r3, [r3, #22]
 801de60:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 801de64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de68:	8b1b      	ldrh	r3, [r3, #24]
 801de6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 801de6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de72:	8b5b      	ldrh	r3, [r3, #26]
 801de74:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 801de78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801de7c:	8b9b      	ldrh	r3, [r3, #28]
 801de7e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 801de82:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 801de86:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801de8a:	4413      	add	r3, r2
 801de8c:	1d1c      	adds	r4, r3, #4
 801de8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de92:	4618      	mov	r0, r3
 801de94:	f7ff fd2f 	bl	801d8f6 <lv_area_get_height>
 801de98:	4603      	mov	r3, r0
 801de9a:	429c      	cmp	r4, r3
 801de9c:	dd0d      	ble.n	801deba <lv_slider_design+0x2d8>
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801de9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dea2:	4618      	mov	r0, r3
 801dea4:	f7ff fd27 	bl	801d8f6 <lv_area_get_height>
 801dea8:	4603      	mov	r3, r0
 801deaa:	3b04      	subs	r3, #4
 801deac:	105b      	asrs	r3, r3, #1
 801deae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
            pad_bottom_indic = pad_top_indic;
 801deb2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801deb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801deba:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 801debe:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801dec2:	4413      	add	r3, r2
 801dec4:	1d1c      	adds	r4, r3, #4
 801dec6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801deca:	4618      	mov	r0, r3
 801decc:	f7ff fcfc 	bl	801d8c8 <lv_area_get_width>
 801ded0:	4603      	mov	r3, r0
 801ded2:	429c      	cmp	r4, r3
 801ded4:	dd0d      	ble.n	801def2 <lv_slider_design+0x310>
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801ded6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801deda:	4618      	mov	r0, r3
 801dedc:	f7ff fcf4 	bl	801d8c8 <lv_area_get_width>
 801dee0:	4603      	mov	r3, r0
 801dee2:	3b04      	subs	r3, #4
 801dee4:	105b      	asrs	r3, r3, #1
 801dee6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
            pad_right_indic = pad_left_indic;
 801deea:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801deee:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        }

        area_indic.x1 += pad_left_indic;
 801def2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801def6:	b29a      	uxth	r2, r3
 801def8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801defc:	4413      	add	r3, r2
 801defe:	b29b      	uxth	r3, r3
 801df00:	b21b      	sxth	r3, r3
 801df02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        area_indic.x2 -= pad_right_indic;
 801df06:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801df0a:	b29a      	uxth	r2, r3
 801df0c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 801df10:	1ad3      	subs	r3, r2, r3
 801df12:	b29b      	uxth	r3, r3
 801df14:	b21b      	sxth	r3, r3
 801df16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        area_indic.y1 += pad_top_indic;
 801df1a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801df1e:	b29a      	uxth	r2, r3
 801df20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801df24:	4413      	add	r3, r2
 801df26:	b29b      	uxth	r3, r3
 801df28:	b21b      	sxth	r3, r3
 801df2a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        area_indic.y2 -= pad_bottom_indic;
 801df2e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801df32:	b29a      	uxth	r2, r3
 801df34:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 801df38:	1ad3      	subs	r3, r2, r3
 801df3a:	b29b      	uxth	r3, r3
 801df3c:	b21b      	sxth	r3, r3
 801df3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        lv_coord_t cur_value = lv_slider_get_value(slider);
 801df42:	68f8      	ldr	r0, [r7, #12]
 801df44:	f7ff fe08 	bl	801db58 <lv_slider_get_value>
 801df48:	4603      	mov	r3, r0
 801df4a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_coord_t min_value = lv_slider_get_min_value(slider);
 801df4e:	68f8      	ldr	r0, [r7, #12]
 801df50:	f7ff fcfb 	bl	801d94a <lv_slider_get_min_value>
 801df54:	4603      	mov	r3, r0
 801df56:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t max_value = lv_slider_get_max_value(slider);
 801df5a:	68f8      	ldr	r0, [r7, #12]
 801df5c:	f7ff fd01 	bl	801d962 <lv_slider_get_max_value>
 801df60:	4603      	mov	r3, r0
 801df62:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 801df66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801df6a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801df6e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801df72:	d004      	beq.n	801df7e <lv_slider_design+0x39c>
 801df74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801df78:	8b1b      	ldrh	r3, [r3, #24]
 801df7a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        if(slider_w >= slider_h) {
 801df7e:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801df82:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801df86:	429a      	cmp	r2, r3
 801df88:	db7e      	blt.n	801e088 <lv_slider_design+0x4a6>
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
 801df8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801df8e:	4618      	mov	r0, r3
 801df90:	f7ff fc9a 	bl	801d8c8 <lv_area_get_width>
 801df94:	4603      	mov	r3, r0
 801df96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801df9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801df9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dfa6:	d03e      	beq.n	801e026 <lv_slider_design+0x444>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801dfa8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801dfac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801dfb0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801dfb4:	4611      	mov	r1, r2
 801dfb6:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801dfba:	1a8a      	subs	r2, r1, r2
 801dfbc:	fb02 f203 	mul.w	r2, r2, r3
 801dfc0:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801dfc4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801dfc8:	1acb      	subs	r3, r1, r3
 801dfca:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_x =
 801dfce:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801dfd2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801dfd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801dfda:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801dfde:	4611      	mov	r1, r2
 801dfe0:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801dfe4:	1a8a      	subs	r2, r1, r2
 801dfe6:	fb02 f203 	mul.w	r2, r2, r3
 801dfea:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801dfee:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801dff2:	1acb      	subs	r3, r1, r3
 801dff4:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_x =
 801dff8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801dffc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 801e000:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 801e004:	1ad3      	subs	r3, r2, r3
 801e006:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e00a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e00e:	fb02 f303 	mul.w	r3, r2, r3
 801e012:	121b      	asrs	r3, r3, #8
 801e014:	b29a      	uxth	r2, r3
 801e016:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e01a:	4413      	add	r3, r2
 801e01c:	b29b      	uxth	r3, r3
 801e01e:	b21b      	sxth	r3, r3
 801e020:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 801e024:	e012      	b.n	801e04c <lv_slider_design+0x46a>
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 801e026:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801e02a:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e02e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e032:	1a8a      	subs	r2, r1, r2
 801e034:	fb02 f203 	mul.w	r2, r2, r3
 801e038:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e03c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e040:	1acb      	subs	r3, r1, r3
 801e042:	fb92 f3f3 	sdiv	r3, r2, r3
 801e046:	b21b      	sxth	r3, r3
 801e048:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 801e04c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801e050:	b29a      	uxth	r2, r3
 801e052:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e056:	b29b      	uxth	r3, r3
 801e058:	4413      	add	r3, r2
 801e05a:	b29b      	uxth	r3, r3
 801e05c:	3b01      	subs	r3, #1
 801e05e:	b29b      	uxth	r3, r3
 801e060:	b21b      	sxth	r3, r3
 801e062:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

            /*Draw the indicator but don't draw an ugly 1px wide rectangle on the left on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801e066:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801e06a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e06e:	429a      	cmp	r2, r3
 801e070:	f000 8087 	beq.w	801e182 <lv_slider_design+0x5a0>
 801e074:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e078:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801e07c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e080:	68b9      	ldr	r1, [r7, #8]
 801e082:	f7ee fdb4 	bl	800cbee <lv_draw_rect>
 801e086:	e07c      	b.n	801e182 <lv_slider_design+0x5a0>

        } else {
            lv_coord_t indic_h = lv_area_get_height(&area_indic);
 801e088:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ff fc32 	bl	801d8f6 <lv_area_get_height>
 801e092:	4603      	mov	r3, r0
 801e094:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e09c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0a4:	d03e      	beq.n	801e124 <lv_slider_design+0x542>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e0a6:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e0aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e0ae:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e0b2:	4611      	mov	r1, r2
 801e0b4:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e0b8:	1a8a      	subs	r2, r1, r2
 801e0ba:	fb02 f203 	mul.w	r2, r2, r3
 801e0be:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e0c2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e0c6:	1acb      	subs	r3, r1, r3
 801e0c8:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_start_y =
 801e0cc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                lv_coord_t anim_end_y =
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e0d0:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e0d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e0d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e0dc:	4611      	mov	r1, r2
 801e0de:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e0e2:	1a8a      	subs	r2, r1, r2
 801e0e4:	fb02 f203 	mul.w	r2, r2, r3
 801e0e8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e0ec:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e0f0:	1acb      	subs	r3, r1, r3
 801e0f2:	fb92 f3f3 	sdiv	r3, r2, r3
                lv_coord_t anim_end_y =
 801e0f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 801e0fa:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 801e0fe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e102:	1ad3      	subs	r3, r2, r3
 801e104:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e108:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e10c:	fb02 f303 	mul.w	r3, r2, r3
 801e110:	121b      	asrs	r3, r3, #8
 801e112:	b29a      	uxth	r2, r3
 801e114:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801e118:	4413      	add	r3, r2
 801e11a:	b29b      	uxth	r3, r3
 801e11c:	b21b      	sxth	r3, r3
 801e11e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 801e122:	e012      	b.n	801e14a <lv_slider_design+0x568>
            } else
#endif
            {
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 801e124:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801e128:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e12c:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e130:	1a8a      	subs	r2, r1, r2
 801e132:	fb02 f203 	mul.w	r2, r2, r3
 801e136:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e13a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e13e:	1acb      	subs	r3, r1, r3
 801e140:	fb92 f3f3 	sdiv	r3, r2, r3
 801e144:	b21b      	sxth	r3, r3
 801e146:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 801e14a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e14e:	b29a      	uxth	r2, r3
 801e150:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801e154:	b29b      	uxth	r3, r3
 801e156:	1ad3      	subs	r3, r2, r3
 801e158:	b29b      	uxth	r3, r3
 801e15a:	3301      	adds	r3, #1
 801e15c:	b29b      	uxth	r3, r3
 801e15e:	b21b      	sxth	r3, r3
 801e160:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801e164:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801e168:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e16c:	429a      	cmp	r2, r3
 801e16e:	d008      	beq.n	801e182 <lv_slider_design+0x5a0>
 801e170:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e174:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801e178:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e17c:	68b9      	ldr	r1, [r7, #8]
 801e17e:	f7ee fd36 	bl	800cbee <lv_draw_rect>
        /*Before the knob add the border if required*/
#if LV_USE_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 801e182:	68f8      	ldr	r0, [r7, #12]
 801e184:	f7e9 f897 	bl	80072b6 <lv_obj_is_focused>
 801e188:	4603      	mov	r3, r0
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d013      	beq.n	801e1b6 <lv_slider_design+0x5d4>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 801e18e:	f107 0314 	add.w	r3, r7, #20
 801e192:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801e196:	4618      	mov	r0, r3
 801e198:	f7ea fae4 	bl	8008764 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 801e19c:	2300      	movs	r3, #0
 801e19e:	773b      	strb	r3, [r7, #28]
            style_tmp.body.shadow.width = 0;
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801e1a4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e1a8:	f107 0214 	add.w	r2, r7, #20
 801e1ac:	f107 0060 	add.w	r0, r7, #96	; 0x60
 801e1b0:	68b9      	ldr	r1, [r7, #8]
 801e1b2:	f7ee fd1c 	bl	800cbee <lv_draw_rect>
        }
#endif

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	f103 0210 	add.w	r2, r3, #16
 801e1bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e1c0:	4611      	mov	r1, r2
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f7ff fb72 	bl	801d8ac <lv_area_copy>

        if(slider_w >= slider_h) {
 801e1c8:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801e1cc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e1d0:	429a      	cmp	r2, r3
 801e1d2:	f2c0 80ae 	blt.w	801e332 <lv_slider_design+0x750>
            if(ext->knob_in == 0) {
 801e1d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e1da:	7e9b      	ldrb	r3, [r3, #26]
 801e1dc:	f003 0301 	and.w	r3, r3, #1
 801e1e0:	b2db      	uxtb	r3, r3
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d11b      	bne.n	801e21e <lv_slider_design+0x63c>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 801e1e6:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801e1ea:	b29a      	uxth	r2, r3
 801e1ec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e1f0:	0fd9      	lsrs	r1, r3, #31
 801e1f2:	440b      	add	r3, r1
 801e1f4:	105b      	asrs	r3, r3, #1
 801e1f6:	b21b      	sxth	r3, r3
 801e1f8:	b29b      	uxth	r3, r3
 801e1fa:	1ad3      	subs	r3, r2, r3
 801e1fc:	b29b      	uxth	r3, r3
 801e1fe:	b21b      	sxth	r3, r3
 801e200:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801e204:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e208:	b29a      	uxth	r2, r3
 801e20a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e20e:	4413      	add	r3, r2
 801e210:	b29b      	uxth	r3, r3
 801e212:	3b01      	subs	r3, #1
 801e214:	b29b      	uxth	r3, r3
 801e216:	b21b      	sxth	r3, r3
 801e218:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801e21c:	e07e      	b.n	801e31c <lv_slider_design+0x73a>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e21e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e222:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e22a:	d048      	beq.n	801e2be <lv_slider_design+0x6dc>
                    lv_coord_t w = slider_w - slider_h - 1;
 801e22c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 801e230:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e234:	1ad3      	subs	r3, r2, r3
 801e236:	b29b      	uxth	r3, r3
 801e238:	3b01      	subs	r3, #1
 801e23a:	b29b      	uxth	r3, r3
 801e23c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e240:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e244:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e248:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e24c:	4611      	mov	r1, r2
 801e24e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e252:	1a8a      	subs	r2, r1, r2
 801e254:	fb02 f203 	mul.w	r2, r2, r3
 801e258:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e25c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e260:	1acb      	subs	r3, r1, r3
 801e262:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 801e266:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e26a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e26e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e272:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e276:	4611      	mov	r1, r2
 801e278:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e27c:	1a8a      	subs	r2, r1, r2
 801e27e:	fb02 f203 	mul.w	r2, r2, r3
 801e282:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e286:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e28a:	1acb      	subs	r3, r1, r3
 801e28c:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 801e290:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801e294:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801e298:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e29c:	1ad3      	subs	r3, r2, r3
 801e29e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e2a2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e2a6:	fb02 f303 	mul.w	r3, r2, r3
 801e2aa:	121b      	asrs	r3, r3, #8
 801e2ac:	b29a      	uxth	r2, r3
 801e2ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801e2b2:	4413      	add	r3, r2
 801e2b4:	b29b      	uxth	r3, r3
 801e2b6:	b21b      	sxth	r3, r3
 801e2b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801e2bc:	e016      	b.n	801e2ec <lv_slider_design+0x70a>
                } else
#endif
                {
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 801e2be:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 801e2c2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e2c6:	1ad3      	subs	r3, r2, r3
 801e2c8:	3b01      	subs	r3, #1
 801e2ca:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e2ce:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e2d2:	1a8a      	subs	r2, r1, r2
 801e2d4:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 801e2d8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e2dc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e2e0:	1acb      	subs	r3, r1, r3
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 801e2e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2e6:	b21b      	sxth	r3, r3
 801e2e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                }

                knob_area.x1 += slider->coords.x1;
 801e2ec:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e2f0:	b29a      	uxth	r2, r3
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e2f8:	b29b      	uxth	r3, r3
 801e2fa:	4413      	add	r3, r2
 801e2fc:	b29b      	uxth	r3, r3
 801e2fe:	b21b      	sxth	r3, r3
 801e300:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801e304:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 801e308:	b29a      	uxth	r2, r3
 801e30a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801e30e:	4413      	add	r3, r2
 801e310:	b29b      	uxth	r3, r3
 801e312:	3b01      	subs	r3, #1
 801e314:	b29b      	uxth	r3, r3
 801e316:	b21b      	sxth	r3, r3
 801e318:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            }

            knob_area.y1 = slider->coords.y1;
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e322:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            knob_area.y2 = slider->coords.y2;
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e32c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e330:	e0ac      	b.n	801e48c <lv_slider_design+0x8aa>
        } else {
            if(ext->knob_in == 0) {
 801e332:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e336:	7e9b      	ldrb	r3, [r3, #26]
 801e338:	f003 0301 	and.w	r3, r3, #1
 801e33c:	b2db      	uxtb	r3, r3
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d11b      	bne.n	801e37a <lv_slider_design+0x798>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 801e342:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801e346:	b29a      	uxth	r2, r3
 801e348:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801e34c:	0fd9      	lsrs	r1, r3, #31
 801e34e:	440b      	add	r3, r1
 801e350:	105b      	asrs	r3, r3, #1
 801e352:	b21b      	sxth	r3, r3
 801e354:	b29b      	uxth	r3, r3
 801e356:	1ad3      	subs	r3, r2, r3
 801e358:	b29b      	uxth	r3, r3
 801e35a:	b21b      	sxth	r3, r3
 801e35c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 801e360:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801e364:	b29a      	uxth	r2, r3
 801e366:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e36a:	4413      	add	r3, r2
 801e36c:	b29b      	uxth	r3, r3
 801e36e:	3b01      	subs	r3, #1
 801e370:	b29b      	uxth	r3, r3
 801e372:	b21b      	sxth	r3, r3
 801e374:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e378:	e07e      	b.n	801e478 <lv_slider_design+0x896>
            } else {
#if LV_USE_ANIMATION
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801e37a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e37e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e386:	d048      	beq.n	801e41a <lv_slider_design+0x838>
                    lv_coord_t h = slider_h - slider_w - 1;
 801e388:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801e38c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e390:	1ad3      	subs	r3, r2, r3
 801e392:	b29b      	uxth	r3, r3
 801e394:	3b01      	subs	r3, #1
 801e396:	b29b      	uxth	r3, r3
 801e398:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    lv_coord_t anim_start_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801e39c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e3a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e3a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801e3a8:	4611      	mov	r1, r2
 801e3aa:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e3ae:	1a8a      	subs	r2, r1, r2
 801e3b0:	fb02 f203 	mul.w	r2, r2, r3
 801e3b4:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e3b8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e3bc:	1acb      	subs	r3, r1, r3
 801e3be:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_start_x =
 801e3c2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                    lv_coord_t anim_end_x =
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801e3c6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e3ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e3ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e3d2:	4611      	mov	r1, r2
 801e3d4:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e3d8:	1a8a      	subs	r2, r1, r2
 801e3da:	fb02 f203 	mul.w	r2, r2, r3
 801e3de:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e3e2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e3e6:	1acb      	subs	r3, r1, r3
 801e3e8:	fb92 f3f3 	sdiv	r3, r2, r3
                    lv_coord_t anim_end_x =
 801e3ec:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                    /*Calculate the real position based on `anim_state` (between `anim_start` and
                     * `anim_end`)*/
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801e3f0:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801e3f4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e3f8:	1ad3      	subs	r3, r2, r3
 801e3fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e3fe:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e402:	fb02 f303 	mul.w	r3, r2, r3
 801e406:	121b      	asrs	r3, r3, #8
 801e408:	b29a      	uxth	r2, r3
 801e40a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 801e40e:	4413      	add	r3, r2
 801e410:	b29b      	uxth	r3, r3
 801e412:	b21b      	sxth	r3, r3
 801e414:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801e418:	e016      	b.n	801e448 <lv_slider_design+0x866>
                } else
#endif
                {
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 801e41a:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801e41e:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801e422:	1ad3      	subs	r3, r2, r3
 801e424:	3b01      	subs	r3, #1
 801e426:	f9b7 109e 	ldrsh.w	r1, [r7, #158]	; 0x9e
 801e42a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801e42e:	1a8a      	subs	r2, r1, r2
 801e430:	fb02 f203 	mul.w	r2, r2, r3
                                   (max_value - min_value);
 801e434:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801e438:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e43c:	1acb      	subs	r3, r1, r3
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 801e43e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e442:	b21b      	sxth	r3, r3
 801e444:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                }

                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e44e:	b29a      	uxth	r2, r3
 801e450:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801e454:	b29b      	uxth	r3, r3
 801e456:	1ad3      	subs	r3, r2, r3
 801e458:	b29b      	uxth	r3, r3
 801e45a:	b21b      	sxth	r3, r3
 801e45c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801e460:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801e464:	b29a      	uxth	r2, r3
 801e466:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801e46a:	1ad3      	subs	r3, r2, r3
 801e46c:	b29b      	uxth	r3, r3
 801e46e:	3b01      	subs	r3, #1
 801e470:	b29b      	uxth	r3, r3
 801e472:	b21b      	sxth	r3, r3
 801e474:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }
            knob_area.x1 = slider->coords.x1;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e47e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            knob_area.x2 = slider->coords.x2;
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801e488:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 801e48c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801e490:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801e494:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e498:	68b9      	ldr	r1, [r7, #8]
 801e49a:	f7ee fba8 	bl	800cbee <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 801e49e:	2301      	movs	r3, #1
}
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	37b4      	adds	r7, #180	; 0xb4
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bd90      	pop	{r4, r7, pc}

0801e4a8 <lv_slider_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
 801e4a8:	b590      	push	{r4, r7, lr}
 801e4aa:	b093      	sub	sp, #76	; 0x4c
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	60f8      	str	r0, [r7, #12]
 801e4b0:	460b      	mov	r3, r1
 801e4b2:	607a      	str	r2, [r7, #4]
 801e4b4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 801e4b6:	4bba      	ldr	r3, [pc, #744]	; (801e7a0 <lv_slider_signal+0x2f8>)
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	7af9      	ldrb	r1, [r7, #11]
 801e4bc:	687a      	ldr	r2, [r7, #4]
 801e4be:	68f8      	ldr	r0, [r7, #12]
 801e4c0:	4798      	blx	r3
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(res != LV_RES_OK) return res;
 801e4c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e4cc:	2b01      	cmp	r3, #1
 801e4ce:	d002      	beq.n	801e4d6 <lv_slider_signal+0x2e>
 801e4d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e4d4:	e233      	b.n	801e93e <lv_slider_signal+0x496>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801e4d6:	68f8      	ldr	r0, [r7, #12]
 801e4d8:	f7e8 fed5 	bl	8007286 <lv_obj_get_ext_attr>
 801e4dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 801e4de:	68f8      	ldr	r0, [r7, #12]
 801e4e0:	f7e8 fde6 	bl	80070b0 <lv_obj_get_width>
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t h = lv_obj_get_height(slider);
 801e4e8:	68f8      	ldr	r0, [r7, #12]
 801e4ea:	f7e8 fdef 	bl	80070cc <lv_obj_get_height>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	873b      	strh	r3, [r7, #56]	; 0x38

    if(sign == LV_SIGNAL_PRESSED) {
 801e4f2:	7afb      	ldrb	r3, [r7, #11]
 801e4f4:	2b07      	cmp	r3, #7
 801e4f6:	d107      	bne.n	801e508 <lv_slider_signal+0x60>
        ext->drag_value = lv_slider_get_value(slider);
 801e4f8:	68f8      	ldr	r0, [r7, #12]
 801e4fa:	f7ff fb2d 	bl	801db58 <lv_slider_get_value>
 801e4fe:	4603      	mov	r3, r0
 801e500:	461a      	mov	r2, r3
 801e502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e504:	831a      	strh	r2, [r3, #24]
 801e506:	e218      	b.n	801e93a <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801e508:	7afb      	ldrb	r3, [r7, #11]
 801e50a:	2b08      	cmp	r3, #8
 801e50c:	f040 80b4 	bne.w	801e678 <lv_slider_signal+0x1d0>
        lv_indev_get_point(param, &p);
 801e510:	f107 0310 	add.w	r3, r7, #16
 801e514:	4619      	mov	r1, r3
 801e516:	6878      	ldr	r0, [r7, #4]
 801e518:	f7e7 f85c 	bl	80055d4 <lv_indev_get_point>
        int16_t tmp = 0;
 801e51c:	2300      	movs	r3, #0
 801e51e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(w > h) {
 801e522:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801e526:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e52a:	429a      	cmp	r2, r3
 801e52c:	dd37      	ble.n	801e59e <lv_slider_signal+0xf6>
            lv_coord_t knob_w = h;
 801e52e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801e530:	82fb      	strh	r3, [r7, #22]
            p.x -=
 801e532:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e536:	b29a      	uxth	r2, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 801e538:	68fb      	ldr	r3, [r7, #12]
 801e53a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801e53e:	b299      	uxth	r1, r3
 801e540:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e544:	0fd8      	lsrs	r0, r3, #31
 801e546:	4403      	add	r3, r0
 801e548:	105b      	asrs	r3, r3, #1
 801e54a:	b21b      	sxth	r3, r3
 801e54c:	b29b      	uxth	r3, r3
 801e54e:	440b      	add	r3, r1
 801e550:	b29b      	uxth	r3, r3
            p.x -=
 801e552:	1ad3      	subs	r3, r2, r3
 801e554:	b29b      	uxth	r3, r3
 801e556:	b21b      	sxth	r3, r3
 801e558:	823b      	strh	r3, [r7, #16]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 801e55a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e55e:	461a      	mov	r2, r3
 801e560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e562:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e566:	4619      	mov	r1, r3
 801e568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e56a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e56e:	1acb      	subs	r3, r1, r3
 801e570:	3301      	adds	r3, #1
 801e572:	fb03 f202 	mul.w	r2, r3, r2
 801e576:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 801e57a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e57e:	1acb      	subs	r3, r1, r3
 801e580:	fb92 f3f3 	sdiv	r3, r2, r3
 801e584:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp += ext->bar.min_value;
 801e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e58a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e58e:	b29a      	uxth	r2, r3
 801e590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e594:	4413      	add	r3, r2
 801e596:	b29b      	uxth	r3, r3
 801e598:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801e59c:	e036      	b.n	801e60c <lv_slider_signal+0x164>
        } else {
            lv_coord_t knob_h = w;
 801e59e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e5a0:	833b      	strh	r3, [r7, #24]
            p.y -=
 801e5a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e5a6:	b29a      	uxth	r2, r3
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801e5ae:	b299      	uxth	r1, r3
 801e5b0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801e5b4:	0fd8      	lsrs	r0, r3, #31
 801e5b6:	4403      	add	r3, r0
 801e5b8:	105b      	asrs	r3, r3, #1
 801e5ba:	b21b      	sxth	r3, r3
 801e5bc:	b29b      	uxth	r3, r3
 801e5be:	440b      	add	r3, r1
 801e5c0:	b29b      	uxth	r3, r3
            p.y -=
 801e5c2:	1ad3      	subs	r3, r2, r3
 801e5c4:	b29b      	uxth	r3, r3
 801e5c6:	b21b      	sxth	r3, r3
 801e5c8:	827b      	strh	r3, [r7, #18]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801e5ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e5ce:	461a      	mov	r2, r3
 801e5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e5d6:	4619      	mov	r1, r3
 801e5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e5de:	1acb      	subs	r3, r1, r3
 801e5e0:	3301      	adds	r3, #1
 801e5e2:	fb03 f202 	mul.w	r2, r3, r2
 801e5e6:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 801e5ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e5ee:	1acb      	subs	r3, r1, r3
 801e5f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 801e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e5fe:	b29a      	uxth	r2, r3
 801e600:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e604:	1ad3      	subs	r3, r2, r3
 801e606:	b29b      	uxth	r3, r3
 801e608:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        if(tmp < ext->bar.min_value)
 801e60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e60e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e612:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e616:	429a      	cmp	r2, r3
 801e618:	da04      	bge.n	801e624 <lv_slider_signal+0x17c>
            tmp = ext->bar.min_value;
 801e61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e61c:	885b      	ldrh	r3, [r3, #2]
 801e61e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801e622:	e00a      	b.n	801e63a <lv_slider_signal+0x192>
        else if(tmp > ext->bar.max_value)
 801e624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e626:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e62a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e62e:	429a      	cmp	r2, r3
 801e630:	dd03      	ble.n	801e63a <lv_slider_signal+0x192>
            tmp = ext->bar.max_value;
 801e632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e634:	889b      	ldrh	r3, [r3, #4]
 801e636:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if(tmp != ext->drag_value) {
 801e63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e63c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e640:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 801e644:	429a      	cmp	r2, r3
 801e646:	f000 8178 	beq.w	801e93a <lv_slider_signal+0x492>
            ext->drag_value = tmp;
 801e64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e64c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e650:	831a      	strh	r2, [r3, #24]
            lv_obj_invalidate(slider);
 801e652:	68f8      	ldr	r0, [r7, #12]
 801e654:	f7e7 fbeb 	bl	8005e2e <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e658:	2200      	movs	r2, #0
 801e65a:	210e      	movs	r1, #14
 801e65c:	68f8      	ldr	r0, [r7, #12]
 801e65e:	f7e8 fb98 	bl	8006d92 <lv_event_send>
 801e662:	4603      	mov	r3, r0
 801e664:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e668:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e66c:	2b01      	cmp	r3, #1
 801e66e:	f000 8164 	beq.w	801e93a <lv_slider_signal+0x492>
 801e672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e676:	e162      	b.n	801e93e <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e678:	7afb      	ldrb	r3, [r7, #11]
 801e67a:	2b0a      	cmp	r3, #10
 801e67c:	d002      	beq.n	801e684 <lv_slider_signal+0x1dc>
 801e67e:	7afb      	ldrb	r3, [r7, #11]
 801e680:	2b09      	cmp	r3, #9
 801e682:	d12f      	bne.n	801e6e4 <lv_slider_signal+0x23c>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 801e684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e686:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e68a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e68e:	d007      	beq.n	801e6a0 <lv_slider_signal+0x1f8>
 801e690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e692:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e696:	2200      	movs	r2, #0
 801e698:	4619      	mov	r1, r3
 801e69a:	68f8      	ldr	r0, [r7, #12]
 801e69c:	f7ff f942 	bl	801d924 <lv_slider_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801e6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801e6a6:	831a      	strh	r2, [r3, #24]

#if LV_USE_GROUP
        /*Leave edit mode if released. (No need to wait for LONG_PRESS) */
        lv_group_t * g             = lv_obj_get_group(slider);
 801e6a8:	68f8      	ldr	r0, [r7, #12]
 801e6aa:	f7e8 fdf8 	bl	800729e <lv_obj_get_group>
 801e6ae:	61f8      	str	r0, [r7, #28]
        bool editing               = lv_group_get_editing(g);
 801e6b0:	69f8      	ldr	r0, [r7, #28]
 801e6b2:	f7e6 fdee 	bl	8005292 <lv_group_get_editing>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	76fb      	strb	r3, [r7, #27]
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e6ba:	f7e6 ff2f 	bl	800551c <lv_indev_get_act>
 801e6be:	4603      	mov	r3, r0
 801e6c0:	4618      	mov	r0, r3
 801e6c2:	f7e6 ff37 	bl	8005534 <lv_indev_get_type>
 801e6c6:	4603      	mov	r3, r0
 801e6c8:	76bb      	strb	r3, [r7, #26]
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e6ca:	7ebb      	ldrb	r3, [r7, #26]
 801e6cc:	2b04      	cmp	r3, #4
 801e6ce:	f040 8133 	bne.w	801e938 <lv_slider_signal+0x490>
            if(editing) lv_group_set_editing(g, false);
 801e6d2:	7efb      	ldrb	r3, [r7, #27]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	f000 812f 	beq.w	801e938 <lv_slider_signal+0x490>
 801e6da:	2100      	movs	r1, #0
 801e6dc:	69f8      	ldr	r0, [r7, #28]
 801e6de:	f7e6 fd4f 	bl	8005180 <lv_group_set_editing>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e6e2:	e129      	b.n	801e938 <lv_slider_signal+0x490>
        }
#endif

    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801e6e4:	7afb      	ldrb	r3, [r7, #11]
 801e6e6:	2b02      	cmp	r3, #2
 801e6e8:	d11d      	bne.n	801e726 <lv_slider_signal+0x27e>
        /* The knob size depends on slider size.
         * During the drawing method the ext. size is used by the knob so refresh the ext. size.*/
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e6ea:	68f8      	ldr	r0, [r7, #12]
 801e6ec:	f7e8 fce0 	bl	80070b0 <lv_obj_get_width>
 801e6f0:	4603      	mov	r3, r0
 801e6f2:	461c      	mov	r4, r3
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f7ff f8e7 	bl	801d8c8 <lv_area_get_width>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	429c      	cmp	r4, r3
 801e6fe:	d10b      	bne.n	801e718 <lv_slider_signal+0x270>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 801e700:	68f8      	ldr	r0, [r7, #12]
 801e702:	f7e8 fce3 	bl	80070cc <lv_obj_get_height>
 801e706:	4603      	mov	r3, r0
 801e708:	461c      	mov	r4, r3
 801e70a:	6878      	ldr	r0, [r7, #4]
 801e70c:	f7ff f8f3 	bl	801d8f6 <lv_area_get_height>
 801e710:	4603      	mov	r3, r0
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e712:	429c      	cmp	r4, r3
 801e714:	f000 8111 	beq.w	801e93a <lv_slider_signal+0x492>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	69db      	ldr	r3, [r3, #28]
 801e71c:	2200      	movs	r2, #0
 801e71e:	2105      	movs	r1, #5
 801e720:	68f8      	ldr	r0, [r7, #12]
 801e722:	4798      	blx	r3
 801e724:	e109      	b.n	801e93a <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801e726:	7afb      	ldrb	r3, [r7, #11]
 801e728:	2b05      	cmp	r3, #5
 801e72a:	f040 8087 	bne.w	801e83c <lv_slider_signal+0x394>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 801e72e:	2100      	movs	r1, #0
 801e730:	68f8      	ldr	r0, [r7, #12]
 801e732:	f7ff fa2b 	bl	801db8c <lv_slider_get_style>
 801e736:	62b8      	str	r0, [r7, #40]	; 0x28
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
 801e738:	2102      	movs	r1, #2
 801e73a:	68f8      	ldr	r0, [r7, #12]
 801e73c:	f7ff fa26 	bl	801db8c <lv_slider_get_style>
 801e740:	6278      	str	r0, [r7, #36]	; 0x24

        lv_coord_t shadow_w = knob_style->body.shadow.width;
 801e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e744:	8a5b      	ldrh	r3, [r3, #18]
 801e746:	847b      	strh	r3, [r7, #34]	; 0x22
        if(ext->knob_in == 0) {
 801e748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e74a:	7e9b      	ldrb	r3, [r3, #26]
 801e74c:	f003 0301 	and.w	r3, r3, #1
 801e750:	b2db      	uxtb	r3, r3
 801e752:	2b00      	cmp	r3, #0
 801e754:	d126      	bne.n	801e7a4 <lv_slider_signal+0x2fc>
            /* The smaller size is the knob diameter*/
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 801e756:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e75a:	0fda      	lsrs	r2, r3, #31
 801e75c:	4413      	add	r3, r2
 801e75e:	105b      	asrs	r3, r3, #1
 801e760:	b21b      	sxth	r3, r3
 801e762:	1c5a      	adds	r2, r3, #1
 801e764:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e768:	441a      	add	r2, r3
 801e76a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801e76e:	0fd9      	lsrs	r1, r3, #31
 801e770:	440b      	add	r3, r1
 801e772:	105b      	asrs	r3, r3, #1
 801e774:	b21b      	sxth	r3, r3
 801e776:	1c59      	adds	r1, r3, #1
 801e778:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e77c:	440b      	add	r3, r1
 801e77e:	4293      	cmp	r3, r2
 801e780:	bfa8      	it	ge
 801e782:	4613      	movge	r3, r2
 801e784:	843b      	strh	r3, [r7, #32]
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e78c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e790:	429a      	cmp	r2, r3
 801e792:	f340 80d2 	ble.w	801e93a <lv_slider_signal+0x492>
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	8c3a      	ldrh	r2, [r7, #32]
 801e79a:	869a      	strh	r2, [r3, #52]	; 0x34
 801e79c:	e0cd      	b.n	801e93a <lv_slider_signal+0x492>
 801e79e:	bf00      	nop
 801e7a0:	20002ae4 	.word	0x20002ae4
        } else {
            lv_coord_t pad = 0;
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.top);
 801e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801e7b0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7b4:	4293      	cmp	r3, r2
 801e7b6:	bfa8      	it	ge
 801e7b8:	4613      	movge	r3, r2
 801e7ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 801e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801e7c4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7c8:	4293      	cmp	r3, r2
 801e7ca:	bfa8      	it	ge
 801e7cc:	4613      	movge	r3, r2
 801e7ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 801e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7d4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e7d8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7dc:	4293      	cmp	r3, r2
 801e7de:	bfa8      	it	ge
 801e7e0:	4613      	movge	r3, r2
 801e7e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 801e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7e8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801e7ec:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e7f0:	4293      	cmp	r3, r2
 801e7f2:	bfa8      	it	ge
 801e7f4:	4613      	movge	r3, r2
 801e7f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(pad < 0) pad = -pad;
 801e7fa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	da05      	bge.n	801e80e <lv_slider_signal+0x366>
 801e802:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e806:	425b      	negs	r3, r3
 801e808:	b29b      	uxth	r3, r3
 801e80a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e814:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801e818:	429a      	cmp	r2, r3
 801e81a:	dd03      	ble.n	801e824 <lv_slider_signal+0x37c>
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e822:	869a      	strh	r2, [r3, #52]	; 0x34

            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801e82a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801e82e:	429a      	cmp	r2, r3
 801e830:	f340 8083 	ble.w	801e93a <lv_slider_signal+0x492>
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e838:	869a      	strh	r2, [r3, #52]	; 0x34
 801e83a:	e07e      	b.n	801e93a <lv_slider_signal+0x492>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 801e83c:	7afb      	ldrb	r3, [r7, #11]
 801e83e:	2b11      	cmp	r3, #17
 801e840:	d14f      	bne.n	801e8e2 <lv_slider_signal+0x43a>
        char c = *((char *)param);
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	781b      	ldrb	r3, [r3, #0]
 801e846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801e84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e84c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801e850:	831a      	strh	r2, [r3, #24]

        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801e852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e856:	2b13      	cmp	r3, #19
 801e858:	d003      	beq.n	801e862 <lv_slider_signal+0x3ba>
 801e85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e85e:	2b11      	cmp	r3, #17
 801e860:	d11b      	bne.n	801e89a <lv_slider_signal+0x3f2>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 801e862:	68f8      	ldr	r0, [r7, #12]
 801e864:	f7ff f978 	bl	801db58 <lv_slider_get_value>
 801e868:	4603      	mov	r3, r0
 801e86a:	b29b      	uxth	r3, r3
 801e86c:	3301      	adds	r3, #1
 801e86e:	b29b      	uxth	r3, r3
 801e870:	b21b      	sxth	r3, r3
 801e872:	2201      	movs	r2, #1
 801e874:	4619      	mov	r1, r3
 801e876:	68f8      	ldr	r0, [r7, #12]
 801e878:	f7ff f854 	bl	801d924 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e87c:	2200      	movs	r2, #0
 801e87e:	210e      	movs	r1, #14
 801e880:	68f8      	ldr	r0, [r7, #12]
 801e882:	f7e8 fa86 	bl	8006d92 <lv_event_send>
 801e886:	4603      	mov	r3, r0
 801e888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e88c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e890:	2b01      	cmp	r3, #1
 801e892:	d052      	beq.n	801e93a <lv_slider_signal+0x492>
 801e894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e898:	e051      	b.n	801e93e <lv_slider_signal+0x496>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801e89a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e89e:	2b14      	cmp	r3, #20
 801e8a0:	d003      	beq.n	801e8aa <lv_slider_signal+0x402>
 801e8a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e8a6:	2b12      	cmp	r3, #18
 801e8a8:	d147      	bne.n	801e93a <lv_slider_signal+0x492>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 801e8aa:	68f8      	ldr	r0, [r7, #12]
 801e8ac:	f7ff f954 	bl	801db58 <lv_slider_get_value>
 801e8b0:	4603      	mov	r3, r0
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	3b01      	subs	r3, #1
 801e8b6:	b29b      	uxth	r3, r3
 801e8b8:	b21b      	sxth	r3, r3
 801e8ba:	2201      	movs	r2, #1
 801e8bc:	4619      	mov	r1, r3
 801e8be:	68f8      	ldr	r0, [r7, #12]
 801e8c0:	f7ff f830 	bl	801d924 <lv_slider_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e8c4:	2200      	movs	r2, #0
 801e8c6:	210e      	movs	r1, #14
 801e8c8:	68f8      	ldr	r0, [r7, #12]
 801e8ca:	f7e8 fa62 	bl	8006d92 <lv_event_send>
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if(res != LV_RES_OK) return res;
 801e8d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e8d8:	2b01      	cmp	r3, #1
 801e8da:	d02e      	beq.n	801e93a <lv_slider_signal+0x492>
 801e8dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801e8e0:	e02d      	b.n	801e93e <lv_slider_signal+0x496>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801e8e2:	7afb      	ldrb	r3, [r7, #11]
 801e8e4:	2b12      	cmp	r3, #18
 801e8e6:	d105      	bne.n	801e8f4 <lv_slider_signal+0x44c>
        bool * editable = (bool *)param;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	633b      	str	r3, [r7, #48]	; 0x30
        *editable       = true;
 801e8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8ee:	2201      	movs	r2, #1
 801e8f0:	701a      	strb	r2, [r3, #0]
 801e8f2:	e022      	b.n	801e93a <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801e8f4:	7afb      	ldrb	r3, [r7, #11]
 801e8f6:	2b06      	cmp	r3, #6
 801e8f8:	d11f      	bne.n	801e93a <lv_slider_signal+0x492>
        lv_obj_type_t * buf = param;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e8fe:	2300      	movs	r3, #0
 801e900:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 801e904:	e00b      	b.n	801e91e <lv_slider_signal+0x476>
            if(buf->type[i] == NULL) break;
 801e906:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801e90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e910:	2b00      	cmp	r3, #0
 801e912:	d009      	beq.n	801e928 <lv_slider_signal+0x480>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801e914:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801e918:	3301      	adds	r3, #1
 801e91a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 801e91e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801e922:	2b06      	cmp	r3, #6
 801e924:	d9ef      	bls.n	801e906 <lv_slider_signal+0x45e>
 801e926:	e000      	b.n	801e92a <lv_slider_signal+0x482>
            if(buf->type[i] == NULL) break;
 801e928:	bf00      	nop
        }
        buf->type[i] = "lv_slider";
 801e92a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801e92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e930:	4905      	ldr	r1, [pc, #20]	; (801e948 <lv_slider_signal+0x4a0>)
 801e932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e936:	e000      	b.n	801e93a <lv_slider_signal+0x492>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e938:	bf00      	nop
    }

    return res;
 801e93a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801e93e:	4618      	mov	r0, r3
 801e940:	374c      	adds	r7, #76	; 0x4c
 801e942:	46bd      	mov	sp, r7
 801e944:	bd90      	pop	{r4, r7, pc}
 801e946:	bf00      	nop
 801e948:	08029d98 	.word	0x08029d98

0801e94c <lv_slider_set_value>:
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b082      	sub	sp, #8
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
 801e954:	460b      	mov	r3, r1
 801e956:	807b      	strh	r3, [r7, #2]
 801e958:	4613      	mov	r3, r2
 801e95a:	707b      	strb	r3, [r7, #1]
    lv_bar_set_value(slider, value, anim);
 801e95c:	787a      	ldrb	r2, [r7, #1]
 801e95e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e962:	4619      	mov	r1, r3
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	f7f6 fb45 	bl	8014ff4 <lv_bar_set_value>
}
 801e96a:	bf00      	nop
 801e96c:	3708      	adds	r7, #8
 801e96e:	46bd      	mov	sp, r7
 801e970:	bd80      	pop	{r7, pc}

0801e972 <lv_slider_set_range>:
{
 801e972:	b580      	push	{r7, lr}
 801e974:	b082      	sub	sp, #8
 801e976:	af00      	add	r7, sp, #0
 801e978:	6078      	str	r0, [r7, #4]
 801e97a:	460b      	mov	r3, r1
 801e97c:	807b      	strh	r3, [r7, #2]
 801e97e:	4613      	mov	r3, r2
 801e980:	803b      	strh	r3, [r7, #0]
    lv_bar_set_range(slider, min, max);
 801e982:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e986:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e98a:	4619      	mov	r1, r3
 801e98c:	6878      	ldr	r0, [r7, #4]
 801e98e:	f7f6 fbb5 	bl	80150fc <lv_bar_set_range>
}
 801e992:	bf00      	nop
 801e994:	3708      	adds	r7, #8
 801e996:	46bd      	mov	sp, r7
 801e998:	bd80      	pop	{r7, pc}

0801e99a <lv_sw_get_state>:
 * Get the state of a switch
 * @param sw pointer to a switch object
 * @return false: OFF; true: ON
 */
static inline bool lv_sw_get_state(const lv_obj_t * sw)
{
 801e99a:	b580      	push	{r7, lr}
 801e99c:	b082      	sub	sp, #8
 801e99e:	af00      	add	r7, sp, #0
 801e9a0:	6078      	str	r0, [r7, #4]
    return lv_bar_get_value(sw) < LV_SW_MAX_VALUE / 2 ? false : true;
 801e9a2:	6878      	ldr	r0, [r7, #4]
 801e9a4:	f7f6 fc17 	bl	80151d6 <lv_bar_get_value>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	2b31      	cmp	r3, #49	; 0x31
 801e9ac:	bfcc      	ite	gt
 801e9ae:	2301      	movgt	r3, #1
 801e9b0:	2300      	movle	r3, #0
 801e9b2:	b2db      	uxtb	r3, r3
}
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	3708      	adds	r7, #8
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd80      	pop	{r7, pc}

0801e9bc <lv_sw_create>:
 * @param par pointer to an object, it will be the parent of the new switch
 * @param copy pointer to a switch object, if not NULL then the new object will be copied from it
 * @return pointer to the created switch
 */
lv_obj_t * lv_sw_create(lv_obj_t * par, const lv_obj_t * copy)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b086      	sub	sp, #24
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
 801e9c4:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("switch create started");

    /*Create the ancestor of switch*/
    lv_obj_t * new_sw = lv_slider_create(par, copy);
 801e9c6:	6839      	ldr	r1, [r7, #0]
 801e9c8:	6878      	ldr	r0, [r7, #4]
 801e9ca:	f7fe ffd7 	bl	801d97c <lv_slider_create>
 801e9ce:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_sw);
 801e9d0:	697b      	ldr	r3, [r7, #20]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d100      	bne.n	801e9d8 <lv_sw_create+0x1c>
 801e9d6:	e7fe      	b.n	801e9d6 <lv_sw_create+0x1a>
    if(new_sw == NULL) return NULL;
 801e9d8:	697b      	ldr	r3, [r7, #20]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d101      	bne.n	801e9e2 <lv_sw_create+0x26>
 801e9de:	2300      	movs	r3, #0
 801e9e0:	e08b      	b.n	801eafa <lv_sw_create+0x13e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_sw);
 801e9e2:	4b48      	ldr	r3, [pc, #288]	; (801eb04 <lv_sw_create+0x148>)
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d105      	bne.n	801e9f6 <lv_sw_create+0x3a>
 801e9ea:	6978      	ldr	r0, [r7, #20]
 801e9ec:	f7e8 fc33 	bl	8007256 <lv_obj_get_signal_cb>
 801e9f0:	4602      	mov	r2, r0
 801e9f2:	4b44      	ldr	r3, [pc, #272]	; (801eb04 <lv_sw_create+0x148>)
 801e9f4:	601a      	str	r2, [r3, #0]

    /*Allocate the switch type specific extended data*/
    lv_sw_ext_t * ext = lv_obj_allocate_ext_attr(new_sw, sizeof(lv_sw_ext_t));
 801e9f6:	212c      	movs	r1, #44	; 0x2c
 801e9f8:	6978      	ldr	r0, [r7, #20]
 801e9fa:	f7e8 fa77 	bl	8006eec <lv_obj_allocate_ext_attr>
 801e9fe:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801ea00:	693b      	ldr	r3, [r7, #16]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d100      	bne.n	801ea08 <lv_sw_create+0x4c>
 801ea06:	e7fe      	b.n	801ea06 <lv_sw_create+0x4a>
    if(ext == NULL) return NULL;
 801ea08:	693b      	ldr	r3, [r7, #16]
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d101      	bne.n	801ea12 <lv_sw_create+0x56>
 801ea0e:	2300      	movs	r3, #0
 801ea10:	e073      	b.n	801eafa <lv_sw_create+0x13e>

    /*Initialize the allocated 'ext' */
    ext->changed = 0;
 801ea12:	693a      	ldr	r2, [r7, #16]
 801ea14:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ea18:	f36f 0300 	bfc	r3, #0, #1
 801ea1c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
#if LV_USE_ANIMATION
    ext->anim_time = 0;
 801ea20:	693b      	ldr	r3, [r7, #16]
 801ea22:	2200      	movs	r2, #0
 801ea24:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    ext->style_knob_off = ext->slider.style_knob;
 801ea26:	693b      	ldr	r3, [r7, #16]
 801ea28:	695a      	ldr	r2, [r3, #20]
 801ea2a:	693b      	ldr	r3, [r7, #16]
 801ea2c:	61da      	str	r2, [r3, #28]
    ext->style_knob_on  = ext->slider.style_knob;
 801ea2e:	693b      	ldr	r3, [r7, #16]
 801ea30:	695a      	ldr	r2, [r3, #20]
 801ea32:	693b      	ldr	r3, [r7, #16]
 801ea34:	621a      	str	r2, [r3, #32]

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_sw, lv_sw_signal);
 801ea36:	4934      	ldr	r1, [pc, #208]	; (801eb08 <lv_sw_create+0x14c>)
 801ea38:	6978      	ldr	r0, [r7, #20]
 801ea3a:	f7e8 fa3b 	bl	8006eb4 <lv_obj_set_signal_cb>

    /*Init the new switch switch*/
    if(copy == NULL) {
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d131      	bne.n	801eaa8 <lv_sw_create+0xec>
        lv_obj_set_size(new_sw, 2 * LV_DPI / 3, LV_DPI / 3);
 801ea44:	2221      	movs	r2, #33	; 0x21
 801ea46:	2142      	movs	r1, #66	; 0x42
 801ea48:	6978      	ldr	r0, [r7, #20]
 801ea4a:	f7e7 fba4 	bl	8006196 <lv_obj_set_size>
        lv_slider_set_knob_in(new_sw, true);
 801ea4e:	2101      	movs	r1, #1
 801ea50:	6978      	ldr	r0, [r7, #20]
 801ea52:	f7ff f82f 	bl	801dab4 <lv_slider_set_knob_in>
        lv_slider_set_range(new_sw, 0, LV_SW_MAX_VALUE);
 801ea56:	2264      	movs	r2, #100	; 0x64
 801ea58:	2100      	movs	r1, #0
 801ea5a:	6978      	ldr	r0, [r7, #20]
 801ea5c:	f7ff ff89 	bl	801e972 <lv_slider_set_range>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 801ea60:	f000 fa94 	bl	801ef8c <lv_theme_get_current>
 801ea64:	60b8      	str	r0, [r7, #8]
        if(th) {
 801ea66:	68bb      	ldr	r3, [r7, #8]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d045      	beq.n	801eaf8 <lv_sw_create+0x13c>
            lv_sw_set_style(new_sw, LV_SW_STYLE_BG, th->style.sw.bg);
 801ea6c:	68bb      	ldr	r3, [r7, #8]
 801ea6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ea70:	461a      	mov	r2, r3
 801ea72:	2100      	movs	r1, #0
 801ea74:	6978      	ldr	r0, [r7, #20]
 801ea76:	f000 f87f 	bl	801eb78 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_INDIC, th->style.sw.indic);
 801ea7a:	68bb      	ldr	r3, [r7, #8]
 801ea7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ea7e:	461a      	mov	r2, r3
 801ea80:	2101      	movs	r1, #1
 801ea82:	6978      	ldr	r0, [r7, #20]
 801ea84:	f000 f878 	bl	801eb78 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_OFF, th->style.sw.knob_off);
 801ea88:	68bb      	ldr	r3, [r7, #8]
 801ea8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ea8c:	461a      	mov	r2, r3
 801ea8e:	2102      	movs	r1, #2
 801ea90:	6978      	ldr	r0, [r7, #20]
 801ea92:	f000 f871 	bl	801eb78 <lv_sw_set_style>
            lv_sw_set_style(new_sw, LV_SW_STYLE_KNOB_ON, th->style.sw.knob_on);
 801ea96:	68bb      	ldr	r3, [r7, #8]
 801ea98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ea9c:	461a      	mov	r2, r3
 801ea9e:	2103      	movs	r1, #3
 801eaa0:	6978      	ldr	r0, [r7, #20]
 801eaa2:	f000 f869 	bl	801eb78 <lv_sw_set_style>
 801eaa6:	e027      	b.n	801eaf8 <lv_sw_create+0x13c>
        }

    }
    /*Copy an existing switch*/
    else {
        lv_sw_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801eaa8:	6838      	ldr	r0, [r7, #0]
 801eaaa:	f7e8 fbec 	bl	8007286 <lv_obj_get_ext_attr>
 801eaae:	60f8      	str	r0, [r7, #12]
        ext->style_knob_off    = copy_ext->style_knob_off;
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	69da      	ldr	r2, [r3, #28]
 801eab4:	693b      	ldr	r3, [r7, #16]
 801eab6:	61da      	str	r2, [r3, #28]
        ext->style_knob_on     = copy_ext->style_knob_on;
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	6a1a      	ldr	r2, [r3, #32]
 801eabc:	693b      	ldr	r3, [r7, #16]
 801eabe:	621a      	str	r2, [r3, #32]
#if LV_USE_ANIMATION
        ext->anim_time = copy_ext->anim_time;
 801eac0:	68fb      	ldr	r3, [r7, #12]
 801eac2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801eac4:	693b      	ldr	r3, [r7, #16]
 801eac6:	851a      	strh	r2, [r3, #40]	; 0x28
#endif

        if(lv_sw_get_state(new_sw))
 801eac8:	6978      	ldr	r0, [r7, #20]
 801eaca:	f7ff ff66 	bl	801e99a <lv_sw_get_state>
 801eace:	4603      	mov	r3, r0
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d007      	beq.n	801eae4 <lv_sw_create+0x128>
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801ead4:	693b      	ldr	r3, [r7, #16]
 801ead6:	6a1b      	ldr	r3, [r3, #32]
 801ead8:	461a      	mov	r2, r3
 801eada:	2102      	movs	r1, #2
 801eadc:	6978      	ldr	r0, [r7, #20]
 801eade:	f7ff f811 	bl	801db04 <lv_slider_set_style>
 801eae2:	e006      	b.n	801eaf2 <lv_sw_create+0x136>
        else
            lv_slider_set_style(new_sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801eae4:	693b      	ldr	r3, [r7, #16]
 801eae6:	69db      	ldr	r3, [r3, #28]
 801eae8:	461a      	mov	r2, r3
 801eaea:	2102      	movs	r1, #2
 801eaec:	6978      	ldr	r0, [r7, #20]
 801eaee:	f7ff f809 	bl	801db04 <lv_slider_set_style>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_sw);
 801eaf2:	6978      	ldr	r0, [r7, #20]
 801eaf4:	f7e8 f8a9 	bl	8006c4a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("switch created");

    return new_sw;
 801eaf8:	697b      	ldr	r3, [r7, #20]
}
 801eafa:	4618      	mov	r0, r3
 801eafc:	3718      	adds	r7, #24
 801eafe:	46bd      	mov	sp, r7
 801eb00:	bd80      	pop	{r7, pc}
 801eb02:	bf00      	nop
 801eb04:	20002ae8 	.word	0x20002ae8
 801eb08:	0801ec15 	.word	0x0801ec15

0801eb0c <lv_sw_on>:
 * Turn ON the switch
 * @param sw pointer to a switch objec
 * @param anim LV_ANOM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_on(lv_obj_t * sw, lv_anim_enable_t anim)
{
 801eb0c:	b580      	push	{r7, lr}
 801eb0e:	b084      	sub	sp, #16
 801eb10:	af00      	add	r7, sp, #0
 801eb12:	6078      	str	r0, [r7, #4]
 801eb14:	460b      	mov	r3, r1
 801eb16:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb18:	6878      	ldr	r0, [r7, #4]
 801eb1a:	f7e8 fbb4 	bl	8007286 <lv_obj_get_ext_attr>
 801eb1e:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, LV_SW_MAX_VALUE, anim);
 801eb20:	78fb      	ldrb	r3, [r7, #3]
 801eb22:	461a      	mov	r2, r3
 801eb24:	2164      	movs	r1, #100	; 0x64
 801eb26:	6878      	ldr	r0, [r7, #4]
 801eb28:	f7ff ff10 	bl	801e94c <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	6a1b      	ldr	r3, [r3, #32]
 801eb30:	461a      	mov	r2, r3
 801eb32:	2102      	movs	r1, #2
 801eb34:	6878      	ldr	r0, [r7, #4]
 801eb36:	f7fe ffe5 	bl	801db04 <lv_slider_set_style>
}
 801eb3a:	bf00      	nop
 801eb3c:	3710      	adds	r7, #16
 801eb3e:	46bd      	mov	sp, r7
 801eb40:	bd80      	pop	{r7, pc}

0801eb42 <lv_sw_off>:
 * Turn OFF the switch
 * @param sw pointer to a switch object
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_sw_off(lv_obj_t * sw, lv_anim_enable_t anim)
{
 801eb42:	b580      	push	{r7, lr}
 801eb44:	b084      	sub	sp, #16
 801eb46:	af00      	add	r7, sp, #0
 801eb48:	6078      	str	r0, [r7, #4]
 801eb4a:	460b      	mov	r3, r1
 801eb4c:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb4e:	6878      	ldr	r0, [r7, #4]
 801eb50:	f7e8 fb99 	bl	8007286 <lv_obj_get_ext_attr>
 801eb54:	60f8      	str	r0, [r7, #12]
    lv_slider_set_value(sw, 0, anim);
 801eb56:	78fb      	ldrb	r3, [r7, #3]
 801eb58:	461a      	mov	r2, r3
 801eb5a:	2100      	movs	r1, #0
 801eb5c:	6878      	ldr	r0, [r7, #4]
 801eb5e:	f7ff fef5 	bl	801e94c <lv_slider_set_value>
    lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	69db      	ldr	r3, [r3, #28]
 801eb66:	461a      	mov	r2, r3
 801eb68:	2102      	movs	r1, #2
 801eb6a:	6878      	ldr	r0, [r7, #4]
 801eb6c:	f7fe ffca 	bl	801db04 <lv_slider_set_style>
}
 801eb70:	bf00      	nop
 801eb72:	3710      	adds	r7, #16
 801eb74:	46bd      	mov	sp, r7
 801eb76:	bd80      	pop	{r7, pc}

0801eb78 <lv_sw_set_style>:
 * @param sw pointer to a switch object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_sw_set_style(lv_obj_t * sw, lv_sw_style_t type, const lv_style_t * style)
{
 801eb78:	b580      	push	{r7, lr}
 801eb7a:	b086      	sub	sp, #24
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	60f8      	str	r0, [r7, #12]
 801eb80:	460b      	mov	r3, r1
 801eb82:	607a      	str	r2, [r7, #4]
 801eb84:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801eb86:	68f8      	ldr	r0, [r7, #12]
 801eb88:	f7e8 fb7d 	bl	8007286 <lv_obj_get_ext_attr>
 801eb8c:	6178      	str	r0, [r7, #20]

    switch(type) {
 801eb8e:	7afb      	ldrb	r3, [r7, #11]
 801eb90:	2b03      	cmp	r3, #3
 801eb92:	d83b      	bhi.n	801ec0c <lv_sw_set_style+0x94>
 801eb94:	a201      	add	r2, pc, #4	; (adr r2, 801eb9c <lv_sw_set_style+0x24>)
 801eb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb9a:	bf00      	nop
 801eb9c:	0801ebad 	.word	0x0801ebad
 801eba0:	0801ebb9 	.word	0x0801ebb9
 801eba4:	0801ebc5 	.word	0x0801ebc5
 801eba8:	0801ebe9 	.word	0x0801ebe9
        case LV_SLIDER_STYLE_BG: lv_slider_set_style(sw, LV_SLIDER_STYLE_BG, style); break;
 801ebac:	687a      	ldr	r2, [r7, #4]
 801ebae:	2100      	movs	r1, #0
 801ebb0:	68f8      	ldr	r0, [r7, #12]
 801ebb2:	f7fe ffa7 	bl	801db04 <lv_slider_set_style>
 801ebb6:	e029      	b.n	801ec0c <lv_sw_set_style+0x94>
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(sw, LV_SLIDER_STYLE_INDIC, style); break;
 801ebb8:	687a      	ldr	r2, [r7, #4]
 801ebba:	2101      	movs	r1, #1
 801ebbc:	68f8      	ldr	r0, [r7, #12]
 801ebbe:	f7f6 fae9 	bl	8015194 <lv_bar_set_style>
 801ebc2:	e023      	b.n	801ec0c <lv_sw_set_style+0x94>
        case LV_SW_STYLE_KNOB_OFF:
            ext->style_knob_off = style;
 801ebc4:	697b      	ldr	r3, [r7, #20]
 801ebc6:	687a      	ldr	r2, [r7, #4]
 801ebc8:	61da      	str	r2, [r3, #28]
            if(lv_sw_get_state(sw) == 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 801ebca:	68f8      	ldr	r0, [r7, #12]
 801ebcc:	f7ff fee5 	bl	801e99a <lv_sw_get_state>
 801ebd0:	4603      	mov	r3, r0
 801ebd2:	f083 0301 	eor.w	r3, r3, #1
 801ebd6:	b2db      	uxtb	r3, r3
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d014      	beq.n	801ec06 <lv_sw_set_style+0x8e>
 801ebdc:	687a      	ldr	r2, [r7, #4]
 801ebde:	2102      	movs	r1, #2
 801ebe0:	68f8      	ldr	r0, [r7, #12]
 801ebe2:	f7fe ff8f 	bl	801db04 <lv_slider_set_style>
            break;
 801ebe6:	e00e      	b.n	801ec06 <lv_sw_set_style+0x8e>
        case LV_SW_STYLE_KNOB_ON:
            ext->style_knob_on = style;
 801ebe8:	697b      	ldr	r3, [r7, #20]
 801ebea:	687a      	ldr	r2, [r7, #4]
 801ebec:	621a      	str	r2, [r3, #32]
            if(lv_sw_get_state(sw) != 0) lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, style);
 801ebee:	68f8      	ldr	r0, [r7, #12]
 801ebf0:	f7ff fed3 	bl	801e99a <lv_sw_get_state>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d007      	beq.n	801ec0a <lv_sw_set_style+0x92>
 801ebfa:	687a      	ldr	r2, [r7, #4]
 801ebfc:	2102      	movs	r1, #2
 801ebfe:	68f8      	ldr	r0, [r7, #12]
 801ec00:	f7fe ff80 	bl	801db04 <lv_slider_set_style>
            break;
 801ec04:	e001      	b.n	801ec0a <lv_sw_set_style+0x92>
            break;
 801ec06:	bf00      	nop
 801ec08:	e000      	b.n	801ec0c <lv_sw_set_style+0x94>
            break;
 801ec0a:	bf00      	nop
    }
}
 801ec0c:	bf00      	nop
 801ec0e:	3718      	adds	r7, #24
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <lv_sw_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_sw_signal(lv_obj_t * sw, lv_signal_t sign, void * param)
{
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b092      	sub	sp, #72	; 0x48
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	460b      	mov	r3, r1
 801ec1e:	607a      	str	r2, [r7, #4]
 801ec20:	72fb      	strb	r3, [r7, #11]
    lv_sw_ext_t * ext = lv_obj_get_ext_attr(sw);
 801ec22:	68f8      	ldr	r0, [r7, #12]
 801ec24:	f7e8 fb2f 	bl	8007286 <lv_obj_get_ext_attr>
 801ec28:	6438      	str	r0, [r7, #64]	; 0x40

    /*Save the current (old) value before slider signal modifies it. It will be required in the
     * later calculations*/
    int16_t old_val;
    if(sign == LV_SIGNAL_PRESSING)
 801ec2a:	7afb      	ldrb	r3, [r7, #11]
 801ec2c:	2b08      	cmp	r3, #8
 801ec2e:	d104      	bne.n	801ec3a <lv_sw_signal+0x26>
        old_val = ext->slider.drag_value;
 801ec30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec32:	8b1b      	ldrh	r3, [r3, #24]
 801ec34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ec38:	e005      	b.n	801ec46 <lv_sw_signal+0x32>
    else
        old_val = lv_slider_get_value(sw);
 801ec3a:	68f8      	ldr	r0, [r7, #12]
 801ec3c:	f7fe ff8c 	bl	801db58 <lv_slider_get_value>
 801ec40:	4603      	mov	r3, r0
 801ec42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    /*Don't let the slider to call the action. Switch handles it differently*/
    lv_event_cb_t event_cb = sw->event_cb;
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	699b      	ldr	r3, [r3, #24]
 801ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sw->event_cb           = NULL;
 801ec4c:	68fb      	ldr	r3, [r7, #12]
 801ec4e:	2200      	movs	r2, #0
 801ec50:	619a      	str	r2, [r3, #24]

    lv_res_t res;
    /* Include the ancient signal function */

    res = ancestor_signal(sw, sign, param);
 801ec52:	4bbd      	ldr	r3, [pc, #756]	; (801ef48 <lv_sw_signal+0x334>)
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	7af9      	ldrb	r1, [r7, #11]
 801ec58:	687a      	ldr	r2, [r7, #4]
 801ec5a:	68f8      	ldr	r0, [r7, #12]
 801ec5c:	4798      	blx	r3
 801ec5e:	4603      	mov	r3, r0
 801ec60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(res != LV_RES_OK) return res;
 801ec64:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ec68:	2b01      	cmp	r3, #1
 801ec6a:	d002      	beq.n	801ec72 <lv_sw_signal+0x5e>
 801ec6c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ec70:	e186      	b.n	801ef80 <lv_sw_signal+0x36c>

    sw->event_cb = event_cb;
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec76:	619a      	str	r2, [r3, #24]

    if(sign == LV_SIGNAL_CLEANUP) {
 801ec78:	7afb      	ldrb	r3, [r7, #11]
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	f000 817e 	beq.w	801ef7c <lv_sw_signal+0x368>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_PRESSED) {
 801ec80:	7afb      	ldrb	r3, [r7, #11]
 801ec82:	2b07      	cmp	r3, #7
 801ec84:	d11e      	bne.n	801ecc4 <lv_sw_signal+0xb0>

        /*Save the x coordinate of the pressed point to see if the switch was slid*/
        lv_indev_t * indev = lv_indev_get_act();
 801ec86:	f7e6 fc49 	bl	800551c <lv_indev_get_act>
 801ec8a:	6278      	str	r0, [r7, #36]	; 0x24
        if(indev) {
 801ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	d009      	beq.n	801eca6 <lv_sw_signal+0x92>
            lv_point_t p;
            lv_indev_get_point(indev, &p);
 801ec92:	f107 0320 	add.w	r3, r7, #32
 801ec96:	4619      	mov	r1, r3
 801ec98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec9a:	f7e6 fc9b 	bl	80055d4 <lv_indev_get_point>
            ext->start_x = p.x;
 801ec9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801eca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eca4:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        ext->slided  = 0;
 801eca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801eca8:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ecac:	f36f 0341 	bfc	r3, #1, #1
 801ecb0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        ext->changed = 0;
 801ecb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ecb6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ecba:	f36f 0300 	bfc	r3, #0, #1
 801ecbe:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801ecc2:	e15b      	b.n	801ef7c <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_PRESSING) {
 801ecc4:	7afb      	ldrb	r3, [r7, #11]
 801ecc6:	2b08      	cmp	r3, #8
 801ecc8:	d15d      	bne.n	801ed86 <lv_sw_signal+0x172>
        /*See if the switch was slid (moved at least a little)*/
        lv_indev_t * indev = lv_indev_get_act();
 801ecca:	f7e6 fc27 	bl	800551c <lv_indev_get_act>
 801ecce:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(indev) {
 801ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d01c      	beq.n	801ed10 <lv_sw_signal+0xfc>
            lv_point_t p = {0, 0};
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	83bb      	strh	r3, [r7, #28]
 801ecda:	2300      	movs	r3, #0
 801ecdc:	83fb      	strh	r3, [r7, #30]
            lv_indev_get_point(indev, &p);
 801ecde:	f107 031c 	add.w	r3, r7, #28
 801ece2:	4619      	mov	r1, r3
 801ece4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ece6:	f7e6 fc75 	bl	80055d4 <lv_indev_get_point>
            if(LV_MATH_ABS(p.x - ext->start_x) > LV_INDEV_DEF_DRAG_LIMIT) ext->slided = 1;
 801ecea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801ecee:	461a      	mov	r2, r3
 801ecf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ecf2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801ecf6:	1ad3      	subs	r3, r2, r3
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	bfb8      	it	lt
 801ecfc:	425b      	neglt	r3, r3
 801ecfe:	2b0a      	cmp	r3, #10
 801ed00:	dd06      	ble.n	801ed10 <lv_sw_signal+0xfc>
 801ed02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed04:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ed08:	f043 0302 	orr.w	r3, r3, #2
 801ed0c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        }

        /*If didn't slide then revert the min/max value. So click without slide won't move the
         * switch as a slider*/
        if(ext->slided == 0) {
 801ed10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed12:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801ed16:	f003 0302 	and.w	r3, r3, #2
 801ed1a:	b2db      	uxtb	r3, r3
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d10c      	bne.n	801ed3a <lv_sw_signal+0x126>
            if(lv_sw_get_state(sw))
 801ed20:	68f8      	ldr	r0, [r7, #12]
 801ed22:	f7ff fe3a 	bl	801e99a <lv_sw_get_state>
 801ed26:	4603      	mov	r3, r0
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d003      	beq.n	801ed34 <lv_sw_signal+0x120>
                ext->slider.drag_value = LV_SW_MAX_VALUE;
 801ed2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed2e:	2264      	movs	r2, #100	; 0x64
 801ed30:	831a      	strh	r2, [r3, #24]
 801ed32:	e002      	b.n	801ed3a <lv_sw_signal+0x126>
            else
                ext->slider.drag_value = 0;
 801ed34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed36:	2200      	movs	r2, #0
 801ed38:	831a      	strh	r2, [r3, #24]
        }

        /*If explicitly changed (by slide) don't need to be toggled on release*/
        int16_t threshold = LV_SW_MAX_VALUE / 2;
 801ed3a:	2332      	movs	r3, #50	; 0x32
 801ed3c:	857b      	strh	r3, [r7, #42]	; 0x2a
        if((old_val < threshold && ext->slider.drag_value > threshold) ||
 801ed3e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801ed42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ed46:	429a      	cmp	r2, r3
 801ed48:	da06      	bge.n	801ed58 <lv_sw_signal+0x144>
 801ed4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed4c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ed50:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801ed54:	429a      	cmp	r2, r3
 801ed56:	db0e      	blt.n	801ed76 <lv_sw_signal+0x162>
 801ed58:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801ed5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ed60:	429a      	cmp	r2, r3
 801ed62:	f340 810b 	ble.w	801ef7c <lv_sw_signal+0x368>
           (old_val > threshold && ext->slider.drag_value < threshold)) {
 801ed66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed68:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ed6c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801ed70:	429a      	cmp	r2, r3
 801ed72:	f340 8103 	ble.w	801ef7c <lv_sw_signal+0x368>
            ext->changed = 1;
 801ed76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed78:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 801ed7c:	f043 0301 	orr.w	r3, r3, #1
 801ed80:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801ed84:	e0fa      	b.n	801ef7c <lv_sw_signal+0x368>
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 801ed86:	7afb      	ldrb	r3, [r7, #11]
 801ed88:	2b09      	cmp	r3, #9
 801ed8a:	d12d      	bne.n	801ede8 <lv_sw_signal+0x1d4>
        if(lv_sw_get_state(sw)) {
 801ed8c:	68f8      	ldr	r0, [r7, #12]
 801ed8e:	f7ff fe04 	bl	801e99a <lv_sw_get_state>
 801ed92:	4603      	mov	r3, r0
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d013      	beq.n	801edc0 <lv_sw_signal+0x1ac>
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_on);
 801ed98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed9a:	6a1b      	ldr	r3, [r3, #32]
 801ed9c:	461a      	mov	r2, r3
 801ed9e:	2102      	movs	r1, #2
 801eda0:	68f8      	ldr	r0, [r7, #12]
 801eda2:	f7fe feaf 	bl	801db04 <lv_slider_set_style>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, LV_ANIM_ON);
 801eda6:	2201      	movs	r2, #1
 801eda8:	2164      	movs	r1, #100	; 0x64
 801edaa:	68f8      	ldr	r0, [r7, #12]
 801edac:	f7ff fdce 	bl	801e94c <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 801edb0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801edb4:	2b01      	cmp	r3, #1
 801edb6:	f000 80e1 	beq.w	801ef7c <lv_sw_signal+0x368>
 801edba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801edbe:	e0df      	b.n	801ef80 <lv_sw_signal+0x36c>
        } else {
            lv_slider_set_style(sw, LV_SLIDER_STYLE_KNOB, ext->style_knob_off);
 801edc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edc2:	69db      	ldr	r3, [r3, #28]
 801edc4:	461a      	mov	r2, r3
 801edc6:	2102      	movs	r1, #2
 801edc8:	68f8      	ldr	r0, [r7, #12]
 801edca:	f7fe fe9b 	bl	801db04 <lv_slider_set_style>
            lv_slider_set_value(sw, 0, LV_ANIM_ON);
 801edce:	2201      	movs	r2, #1
 801edd0:	2100      	movs	r1, #0
 801edd2:	68f8      	ldr	r0, [r7, #12]
 801edd4:	f7ff fdba 	bl	801e94c <lv_slider_set_value>
            if(res != LV_RES_OK) return res;
 801edd8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801eddc:	2b01      	cmp	r3, #1
 801edde:	f000 80cd 	beq.w	801ef7c <lv_sw_signal+0x368>
 801ede2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ede6:	e0cb      	b.n	801ef80 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_RELEASED) {
 801ede8:	7afb      	ldrb	r3, [r7, #11]
 801edea:	2b0a      	cmp	r3, #10
 801edec:	d153      	bne.n	801ee96 <lv_sw_signal+0x282>
        /*If not dragged then toggle the switch*/
        if(ext->changed == 0) {
 801edee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edf0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801edf4:	f003 0301 	and.w	r3, r3, #1
 801edf8:	b2db      	uxtb	r3, r3
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d124      	bne.n	801ee48 <lv_sw_signal+0x234>
            int32_t state;
            if(lv_sw_get_state(sw)) {
 801edfe:	68f8      	ldr	r0, [r7, #12]
 801ee00:	f7ff fdcb 	bl	801e99a <lv_sw_get_state>
 801ee04:	4603      	mov	r3, r0
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d006      	beq.n	801ee18 <lv_sw_signal+0x204>
                lv_sw_off(sw, LV_ANIM_ON);
 801ee0a:	2101      	movs	r1, #1
 801ee0c:	68f8      	ldr	r0, [r7, #12]
 801ee0e:	f7ff fe98 	bl	801eb42 <lv_sw_off>
                state = 0;
 801ee12:	2300      	movs	r3, #0
 801ee14:	61bb      	str	r3, [r7, #24]
 801ee16:	e005      	b.n	801ee24 <lv_sw_signal+0x210>
            } else {
                lv_sw_on(sw, LV_ANIM_ON);
 801ee18:	2101      	movs	r1, #1
 801ee1a:	68f8      	ldr	r0, [r7, #12]
 801ee1c:	f7ff fe76 	bl	801eb0c <lv_sw_on>
                state = 1;
 801ee20:	2301      	movs	r3, #1
 801ee22:	61bb      	str	r3, [r7, #24]
            }

            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ee24:	f107 0318 	add.w	r3, r7, #24
 801ee28:	461a      	mov	r2, r3
 801ee2a:	210e      	movs	r1, #14
 801ee2c:	68f8      	ldr	r0, [r7, #12]
 801ee2e:	f7e7 ffb0 	bl	8006d92 <lv_event_send>
 801ee32:	4603      	mov	r3, r0
 801ee34:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ee38:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee3c:	2b01      	cmp	r3, #1
 801ee3e:	f000 809d 	beq.w	801ef7c <lv_sw_signal+0x368>
 801ee42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee46:	e09b      	b.n	801ef80 <lv_sw_signal+0x36c>
        }
        /*If the switch was dragged then calculate the new state based on the current position*/
        else {
            int16_t v = lv_slider_get_value(sw);
 801ee48:	68f8      	ldr	r0, [r7, #12]
 801ee4a:	f7fe fe85 	bl	801db58 <lv_slider_get_value>
 801ee4e:	4603      	mov	r3, r0
 801ee50:	863b      	strh	r3, [r7, #48]	; 0x30
            int32_t state;
            if(v > LV_SW_MAX_VALUE / 2) {
 801ee52:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ee56:	2b32      	cmp	r3, #50	; 0x32
 801ee58:	dd06      	ble.n	801ee68 <lv_sw_signal+0x254>
                lv_sw_on(sw, LV_ANIM_ON);
 801ee5a:	2101      	movs	r1, #1
 801ee5c:	68f8      	ldr	r0, [r7, #12]
 801ee5e:	f7ff fe55 	bl	801eb0c <lv_sw_on>
                state = 1;
 801ee62:	2301      	movs	r3, #1
 801ee64:	617b      	str	r3, [r7, #20]
 801ee66:	e005      	b.n	801ee74 <lv_sw_signal+0x260>
            } else {
                lv_sw_off(sw, LV_ANIM_ON);
 801ee68:	2101      	movs	r1, #1
 801ee6a:	68f8      	ldr	r0, [r7, #12]
 801ee6c:	f7ff fe69 	bl	801eb42 <lv_sw_off>
                state = 0;
 801ee70:	2300      	movs	r3, #0
 801ee72:	617b      	str	r3, [r7, #20]
            }
            res = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ee74:	f107 0314 	add.w	r3, r7, #20
 801ee78:	461a      	mov	r2, r3
 801ee7a:	210e      	movs	r1, #14
 801ee7c:	68f8      	ldr	r0, [r7, #12]
 801ee7e:	f7e7 ff88 	bl	8006d92 <lv_event_send>
 801ee82:	4603      	mov	r3, r0
 801ee84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ee88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee8c:	2b01      	cmp	r3, #1
 801ee8e:	d075      	beq.n	801ef7c <lv_sw_signal+0x368>
 801ee90:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ee94:	e074      	b.n	801ef80 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 801ee96:	7afb      	ldrb	r3, [r7, #11]
 801ee98:	2b11      	cmp	r3, #17
 801ee9a:	d143      	bne.n	801ef24 <lv_sw_signal+0x310>
        char c = *((char *)param);
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	781b      	ldrb	r3, [r3, #0]
 801eea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint32_t state;
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801eea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eea8:	2b13      	cmp	r3, #19
 801eeaa:	d003      	beq.n	801eeb4 <lv_sw_signal+0x2a0>
 801eeac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eeb0:	2b11      	cmp	r3, #17
 801eeb2:	d117      	bne.n	801eee4 <lv_sw_signal+0x2d0>
            lv_slider_set_value(sw, LV_SW_MAX_VALUE, true);
 801eeb4:	2201      	movs	r2, #1
 801eeb6:	2164      	movs	r1, #100	; 0x64
 801eeb8:	68f8      	ldr	r0, [r7, #12]
 801eeba:	f7ff fd47 	bl	801e94c <lv_slider_set_value>
            state = 1;
 801eebe:	2301      	movs	r3, #1
 801eec0:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801eec2:	f107 0310 	add.w	r3, r7, #16
 801eec6:	461a      	mov	r2, r3
 801eec8:	210e      	movs	r1, #14
 801eeca:	68f8      	ldr	r0, [r7, #12]
 801eecc:	f7e7 ff61 	bl	8006d92 <lv_event_send>
 801eed0:	4603      	mov	r3, r0
 801eed2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801eed6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801eeda:	2b01      	cmp	r3, #1
 801eedc:	d04e      	beq.n	801ef7c <lv_sw_signal+0x368>
 801eede:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801eee2:	e04d      	b.n	801ef80 <lv_sw_signal+0x36c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801eee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eee8:	2b14      	cmp	r3, #20
 801eeea:	d003      	beq.n	801eef4 <lv_sw_signal+0x2e0>
 801eeec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801eef0:	2b12      	cmp	r3, #18
 801eef2:	d143      	bne.n	801ef7c <lv_sw_signal+0x368>
            lv_slider_set_value(sw, 0, true);
 801eef4:	2201      	movs	r2, #1
 801eef6:	2100      	movs	r1, #0
 801eef8:	68f8      	ldr	r0, [r7, #12]
 801eefa:	f7ff fd27 	bl	801e94c <lv_slider_set_value>
            state = 0;
 801eefe:	2300      	movs	r3, #0
 801ef00:	613b      	str	r3, [r7, #16]
            res   = lv_event_send(sw, LV_EVENT_VALUE_CHANGED, &state);
 801ef02:	f107 0310 	add.w	r3, r7, #16
 801ef06:	461a      	mov	r2, r3
 801ef08:	210e      	movs	r1, #14
 801ef0a:	68f8      	ldr	r0, [r7, #12]
 801ef0c:	f7e7 ff41 	bl	8006d92 <lv_event_send>
 801ef10:	4603      	mov	r3, r0
 801ef12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(res != LV_RES_OK) return res;
 801ef16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ef1a:	2b01      	cmp	r3, #1
 801ef1c:	d02e      	beq.n	801ef7c <lv_sw_signal+0x368>
 801ef1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ef22:	e02d      	b.n	801ef80 <lv_sw_signal+0x36c>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ef24:	7afb      	ldrb	r3, [r7, #11]
 801ef26:	2b12      	cmp	r3, #18
 801ef28:	d105      	bne.n	801ef36 <lv_sw_signal+0x322>
        bool * editable = (bool *)param;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	637b      	str	r3, [r7, #52]	; 0x34
        *editable       = false; /*The ancestor slider is editable the switch is not*/
 801ef2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef30:	2200      	movs	r2, #0
 801ef32:	701a      	strb	r2, [r3, #0]
 801ef34:	e022      	b.n	801ef7c <lv_sw_signal+0x368>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801ef36:	7afb      	ldrb	r3, [r7, #11]
 801ef38:	2b06      	cmp	r3, #6
 801ef3a:	d11f      	bne.n	801ef7c <lv_sw_signal+0x368>
        lv_obj_type_t * buf = param;
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ef40:	2300      	movs	r3, #0
 801ef42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801ef46:	e00d      	b.n	801ef64 <lv_sw_signal+0x350>
 801ef48:	20002ae8 	.word	0x20002ae8
            if(buf->type[i] == NULL) break;
 801ef4c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d009      	beq.n	801ef6e <lv_sw_signal+0x35a>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801ef5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ef5e:	3301      	adds	r3, #1
 801ef60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801ef64:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ef68:	2b06      	cmp	r3, #6
 801ef6a:	d9ef      	bls.n	801ef4c <lv_sw_signal+0x338>
 801ef6c:	e000      	b.n	801ef70 <lv_sw_signal+0x35c>
            if(buf->type[i] == NULL) break;
 801ef6e:	bf00      	nop
        }
        buf->type[i] = "lv_sw";
 801ef70:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef76:	4904      	ldr	r1, [pc, #16]	; (801ef88 <lv_sw_signal+0x374>)
 801ef78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 801ef7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}
 801ef80:	4618      	mov	r0, r3
 801ef82:	3748      	adds	r7, #72	; 0x48
 801ef84:	46bd      	mov	sp, r7
 801ef86:	bd80      	pop	{r7, pc}
 801ef88:	08029da4 	.word	0x08029da4

0801ef8c <lv_theme_get_current>:
/**
 * Get the current system theme.
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
 801ef8c:	b480      	push	{r7}
 801ef8e:	af00      	add	r7, sp, #0
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited)
 801ef90:	4b07      	ldr	r3, [pc, #28]	; (801efb0 <lv_theme_get_current+0x24>)
 801ef92:	781b      	ldrb	r3, [r3, #0]
 801ef94:	f083 0301 	eor.w	r3, r3, #1
 801ef98:	b2db      	uxtb	r3, r3
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d001      	beq.n	801efa2 <lv_theme_get_current+0x16>
        return NULL;
 801ef9e:	2300      	movs	r3, #0
 801efa0:	e000      	b.n	801efa4 <lv_theme_get_current+0x18>
    else
        return &current_theme;
 801efa2:	4b04      	ldr	r3, [pc, #16]	; (801efb4 <lv_theme_get_current+0x28>)
#endif
}
 801efa4:	4618      	mov	r0, r3
 801efa6:	46bd      	mov	sp, r7
 801efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efac:	4770      	bx	lr
 801efae:	bf00      	nop
 801efb0:	20002aec 	.word	0x20002aec
 801efb4:	20002af0 	.word	0x20002af0

0801efb8 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 801efb8:	b580      	push	{r7, lr}
 801efba:	b082      	sub	sp, #8
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	4603      	mov	r3, r0
 801efc0:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 801efc2:	2200      	movs	r2, #0
 801efc4:	2104      	movs	r1, #4
 801efc6:	4806      	ldr	r0, [pc, #24]	; (801efe0 <ST7789_WriteCommand+0x28>)
 801efc8:	f7e3 fb5a 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), 1);
 801efcc:	1df9      	adds	r1, r7, #7
 801efce:	2301      	movs	r3, #1
 801efd0:	2201      	movs	r2, #1
 801efd2:	4804      	ldr	r0, [pc, #16]	; (801efe4 <ST7789_WriteCommand+0x2c>)
 801efd4:	f7e4 fc48 	bl	8003868 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &cmd, sizeof(cmd));
}
 801efd8:	bf00      	nop
 801efda:	3708      	adds	r7, #8
 801efdc:	46bd      	mov	sp, r7
 801efde:	bd80      	pop	{r7, pc}
 801efe0:	40020000 	.word	0x40020000
 801efe4:	20006998 	.word	0x20006998

0801efe8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b084      	sub	sp, #16
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
 801eff0:	6039      	str	r1, [r7, #0]
	ST7789_DC_Set();
 801eff2:	2201      	movs	r2, #1
 801eff4:	2104      	movs	r1, #4
 801eff6:	4810      	ldr	r0, [pc, #64]	; (801f038 <ST7789_WriteData+0x50>)
 801eff8:	f7e3 fb42 	bl	8002680 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 801effc:	e014      	b.n	801f028 <ST7789_WriteData+0x40>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f004:	4293      	cmp	r3, r2
 801f006:	bf28      	it	cs
 801f008:	4613      	movcs	r3, r2
 801f00a:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, 10);
 801f00c:	89fa      	ldrh	r2, [r7, #14]
 801f00e:	230a      	movs	r3, #10
 801f010:	6879      	ldr	r1, [r7, #4]
 801f012:	480a      	ldr	r0, [pc, #40]	; (801f03c <ST7789_WriteData+0x54>)
 801f014:	f7e4 fc28 	bl	8003868 <HAL_SPI_Transmit>
		//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
		buff += chunk_size;
 801f018:	89fb      	ldrh	r3, [r7, #14]
 801f01a:	687a      	ldr	r2, [r7, #4]
 801f01c:	4413      	add	r3, r2
 801f01e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 801f020:	89fb      	ldrh	r3, [r7, #14]
 801f022:	683a      	ldr	r2, [r7, #0]
 801f024:	1ad3      	subs	r3, r2, r3
 801f026:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 801f028:	683b      	ldr	r3, [r7, #0]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d1e7      	bne.n	801effe <ST7789_WriteData+0x16>
	}

}
 801f02e:	bf00      	nop
 801f030:	3710      	adds	r7, #16
 801f032:	46bd      	mov	sp, r7
 801f034:	bd80      	pop	{r7, pc}
 801f036:	bf00      	nop
 801f038:	40020000 	.word	0x40020000
 801f03c:	20006998 	.word	0x20006998

0801f040 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 801f040:	b580      	push	{r7, lr}
 801f042:	b082      	sub	sp, #8
 801f044:	af00      	add	r7, sp, #0
 801f046:	4603      	mov	r3, r0
 801f048:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 801f04a:	2201      	movs	r2, #1
 801f04c:	2104      	movs	r1, #4
 801f04e:	4806      	ldr	r0, [pc, #24]	; (801f068 <ST7789_WriteSmallData+0x28>)
 801f050:	f7e3 fb16 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), 1);
 801f054:	1df9      	adds	r1, r7, #7
 801f056:	2301      	movs	r3, #1
 801f058:	2201      	movs	r2, #1
 801f05a:	4804      	ldr	r0, [pc, #16]	; (801f06c <ST7789_WriteSmallData+0x2c>)
 801f05c:	f7e4 fc04 	bl	8003868 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, &data, sizeof(data));
}
 801f060:	bf00      	nop
 801f062:	3708      	adds	r7, #8
 801f064:	46bd      	mov	sp, r7
 801f066:	bd80      	pop	{r7, pc}
 801f068:	40020000 	.word	0x40020000
 801f06c:	20006998 	.word	0x20006998

0801f070 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b082      	sub	sp, #8
 801f074:	af00      	add	r7, sp, #0
 801f076:	4603      	mov	r3, r0
 801f078:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 801f07a:	2036      	movs	r0, #54	; 0x36
 801f07c:	f7ff ff9c 	bl	801efb8 <ST7789_WriteCommand>
	switch (m) {
 801f080:	79fb      	ldrb	r3, [r7, #7]
 801f082:	2b03      	cmp	r3, #3
 801f084:	d81a      	bhi.n	801f0bc <ST7789_SetRotation+0x4c>
 801f086:	a201      	add	r2, pc, #4	; (adr r2, 801f08c <ST7789_SetRotation+0x1c>)
 801f088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f08c:	0801f09d 	.word	0x0801f09d
 801f090:	0801f0a5 	.word	0x0801f0a5
 801f094:	0801f0ad 	.word	0x0801f0ad
 801f098:	0801f0b5 	.word	0x0801f0b5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 801f09c:	20c0      	movs	r0, #192	; 0xc0
 801f09e:	f7ff ffcf 	bl	801f040 <ST7789_WriteSmallData>
		break;
 801f0a2:	e00c      	b.n	801f0be <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 801f0a4:	20a0      	movs	r0, #160	; 0xa0
 801f0a6:	f7ff ffcb 	bl	801f040 <ST7789_WriteSmallData>
		break;
 801f0aa:	e008      	b.n	801f0be <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 801f0ac:	2000      	movs	r0, #0
 801f0ae:	f7ff ffc7 	bl	801f040 <ST7789_WriteSmallData>
		break;
 801f0b2:	e004      	b.n	801f0be <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 801f0b4:	2060      	movs	r0, #96	; 0x60
 801f0b6:	f7ff ffc3 	bl	801f040 <ST7789_WriteSmallData>
		break;
 801f0ba:	e000      	b.n	801f0be <ST7789_SetRotation+0x4e>
	default:
		break;
 801f0bc:	bf00      	nop
	}
}
 801f0be:	bf00      	nop
 801f0c0:	3708      	adds	r7, #8
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	bd80      	pop	{r7, pc}
 801f0c6:	bf00      	nop

0801f0c8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 801f0c8:	b590      	push	{r4, r7, lr}
 801f0ca:	b087      	sub	sp, #28
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	4604      	mov	r4, r0
 801f0d0:	4608      	mov	r0, r1
 801f0d2:	4611      	mov	r1, r2
 801f0d4:	461a      	mov	r2, r3
 801f0d6:	4623      	mov	r3, r4
 801f0d8:	80fb      	strh	r3, [r7, #6]
 801f0da:	4603      	mov	r3, r0
 801f0dc:	80bb      	strh	r3, [r7, #4]
 801f0de:	460b      	mov	r3, r1
 801f0e0:	807b      	strh	r3, [r7, #2]
 801f0e2:	4613      	mov	r3, r2
 801f0e4:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 801f0e6:	88fb      	ldrh	r3, [r7, #6]
 801f0e8:	82fb      	strh	r3, [r7, #22]
 801f0ea:	887b      	ldrh	r3, [r7, #2]
 801f0ec:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 801f0ee:	88bb      	ldrh	r3, [r7, #4]
 801f0f0:	827b      	strh	r3, [r7, #18]
 801f0f2:	883b      	ldrh	r3, [r7, #0]
 801f0f4:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 801f0f6:	202a      	movs	r0, #42	; 0x2a
 801f0f8:	f7ff ff5e 	bl	801efb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 801f0fc:	8afb      	ldrh	r3, [r7, #22]
 801f0fe:	0a1b      	lsrs	r3, r3, #8
 801f100:	b29b      	uxth	r3, r3
 801f102:	b2db      	uxtb	r3, r3
 801f104:	733b      	strb	r3, [r7, #12]
 801f106:	8afb      	ldrh	r3, [r7, #22]
 801f108:	b2db      	uxtb	r3, r3
 801f10a:	737b      	strb	r3, [r7, #13]
 801f10c:	8abb      	ldrh	r3, [r7, #20]
 801f10e:	0a1b      	lsrs	r3, r3, #8
 801f110:	b29b      	uxth	r3, r3
 801f112:	b2db      	uxtb	r3, r3
 801f114:	73bb      	strb	r3, [r7, #14]
 801f116:	8abb      	ldrh	r3, [r7, #20]
 801f118:	b2db      	uxtb	r3, r3
 801f11a:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 801f11c:	f107 030c 	add.w	r3, r7, #12
 801f120:	2104      	movs	r1, #4
 801f122:	4618      	mov	r0, r3
 801f124:	f7ff ff60 	bl	801efe8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 801f128:	202b      	movs	r0, #43	; 0x2b
 801f12a:	f7ff ff45 	bl	801efb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 801f12e:	8a7b      	ldrh	r3, [r7, #18]
 801f130:	0a1b      	lsrs	r3, r3, #8
 801f132:	b29b      	uxth	r3, r3
 801f134:	b2db      	uxtb	r3, r3
 801f136:	723b      	strb	r3, [r7, #8]
 801f138:	8a7b      	ldrh	r3, [r7, #18]
 801f13a:	b2db      	uxtb	r3, r3
 801f13c:	727b      	strb	r3, [r7, #9]
 801f13e:	8a3b      	ldrh	r3, [r7, #16]
 801f140:	0a1b      	lsrs	r3, r3, #8
 801f142:	b29b      	uxth	r3, r3
 801f144:	b2db      	uxtb	r3, r3
 801f146:	72bb      	strb	r3, [r7, #10]
 801f148:	8a3b      	ldrh	r3, [r7, #16]
 801f14a:	b2db      	uxtb	r3, r3
 801f14c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 801f14e:	f107 0308 	add.w	r3, r7, #8
 801f152:	2104      	movs	r1, #4
 801f154:	4618      	mov	r0, r3
 801f156:	f7ff ff47 	bl	801efe8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 801f15a:	202c      	movs	r0, #44	; 0x2c
 801f15c:	f7ff ff2c 	bl	801efb8 <ST7789_WriteCommand>
}
 801f160:	bf00      	nop
 801f162:	371c      	adds	r7, #28
 801f164:	46bd      	mov	sp, r7
 801f166:	bd90      	pop	{r4, r7, pc}

0801f168 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 801f168:	b590      	push	{r4, r7, lr}
 801f16a:	b08b      	sub	sp, #44	; 0x2c
 801f16c:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 801f16e:	2019      	movs	r0, #25
 801f170:	f7e2 fcb8 	bl	8001ae4 <HAL_Delay>
    ST7789_RST_Clr();
 801f174:	2200      	movs	r2, #0
 801f176:	2102      	movs	r1, #2
 801f178:	4846      	ldr	r0, [pc, #280]	; (801f294 <ST7789_Init+0x12c>)
 801f17a:	f7e3 fa81 	bl	8002680 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 801f17e:	2019      	movs	r0, #25
 801f180:	f7e2 fcb0 	bl	8001ae4 <HAL_Delay>
    ST7789_RST_Set();
 801f184:	2201      	movs	r2, #1
 801f186:	2102      	movs	r1, #2
 801f188:	4842      	ldr	r0, [pc, #264]	; (801f294 <ST7789_Init+0x12c>)
 801f18a:	f7e3 fa79 	bl	8002680 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 801f18e:	2032      	movs	r0, #50	; 0x32
 801f190:	f7e2 fca8 	bl	8001ae4 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 801f194:	203a      	movs	r0, #58	; 0x3a
 801f196:	f7ff ff0f 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 801f19a:	2055      	movs	r0, #85	; 0x55
 801f19c:	f7ff ff50 	bl	801f040 <ST7789_WriteSmallData>

    ST7789_WriteCommand(0xB2);				//	Porch control
 801f1a0:	20b2      	movs	r0, #178	; 0xb2
 801f1a2:	f7ff ff09 	bl	801efb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 801f1a6:	4a3c      	ldr	r2, [pc, #240]	; (801f298 <ST7789_Init+0x130>)
 801f1a8:	f107 0320 	add.w	r3, r7, #32
 801f1ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f1b0:	6018      	str	r0, [r3, #0]
 801f1b2:	3304      	adds	r3, #4
 801f1b4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 801f1b6:	f107 0320 	add.w	r3, r7, #32
 801f1ba:	2105      	movs	r1, #5
 801f1bc:	4618      	mov	r0, r3
 801f1be:	f7ff ff13 	bl	801efe8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 801f1c2:	2002      	movs	r0, #2
 801f1c4:	f7ff ff54 	bl	801f070 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 801f1c8:	20b7      	movs	r0, #183	; 0xb7
 801f1ca:	f7ff fef5 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 801f1ce:	2035      	movs	r0, #53	; 0x35
 801f1d0:	f7ff ff36 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 801f1d4:	20bb      	movs	r0, #187	; 0xbb
 801f1d6:	f7ff feef 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 801f1da:	2019      	movs	r0, #25
 801f1dc:	f7ff ff30 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 801f1e0:	20c0      	movs	r0, #192	; 0xc0
 801f1e2:	f7ff fee9 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 801f1e6:	202c      	movs	r0, #44	; 0x2c
 801f1e8:	f7ff ff2a 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 801f1ec:	20c2      	movs	r0, #194	; 0xc2
 801f1ee:	f7ff fee3 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 801f1f2:	2001      	movs	r0, #1
 801f1f4:	f7ff ff24 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 801f1f8:	20c3      	movs	r0, #195	; 0xc3
 801f1fa:	f7ff fedd 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 801f1fe:	2012      	movs	r0, #18
 801f200:	f7ff ff1e 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 801f204:	20c4      	movs	r0, #196	; 0xc4
 801f206:	f7ff fed7 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 801f20a:	2020      	movs	r0, #32
 801f20c:	f7ff ff18 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 801f210:	20c6      	movs	r0, #198	; 0xc6
 801f212:	f7ff fed1 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 801f216:	200f      	movs	r0, #15
 801f218:	f7ff ff12 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 801f21c:	20d0      	movs	r0, #208	; 0xd0
 801f21e:	f7ff fecb 	bl	801efb8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 801f222:	20a4      	movs	r0, #164	; 0xa4
 801f224:	f7ff ff0c 	bl	801f040 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 801f228:	20a1      	movs	r0, #161	; 0xa1
 801f22a:	f7ff ff09 	bl	801f040 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 801f22e:	20e0      	movs	r0, #224	; 0xe0
 801f230:	f7ff fec2 	bl	801efb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 801f234:	4b19      	ldr	r3, [pc, #100]	; (801f29c <ST7789_Init+0x134>)
 801f236:	f107 0410 	add.w	r4, r7, #16
 801f23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f23c:	c407      	stmia	r4!, {r0, r1, r2}
 801f23e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 801f240:	f107 0310 	add.w	r3, r7, #16
 801f244:	210e      	movs	r1, #14
 801f246:	4618      	mov	r0, r3
 801f248:	f7ff fece 	bl	801efe8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 801f24c:	20e1      	movs	r0, #225	; 0xe1
 801f24e:	f7ff feb3 	bl	801efb8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 801f252:	4b13      	ldr	r3, [pc, #76]	; (801f2a0 <ST7789_Init+0x138>)
 801f254:	463c      	mov	r4, r7
 801f256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f258:	c407      	stmia	r4!, {r0, r1, r2}
 801f25a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 801f25c:	463b      	mov	r3, r7
 801f25e:	210e      	movs	r1, #14
 801f260:	4618      	mov	r0, r3
 801f262:	f7ff fec1 	bl	801efe8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 801f266:	2021      	movs	r0, #33	; 0x21
 801f268:	f7ff fea6 	bl	801efb8 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 801f26c:	2011      	movs	r0, #17
 801f26e:	f7ff fea3 	bl	801efb8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 801f272:	2013      	movs	r0, #19
 801f274:	f7ff fea0 	bl	801efb8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 801f278:	2029      	movs	r0, #41	; 0x29
 801f27a:	f7ff fe9d 	bl	801efb8 <ST7789_WriteCommand>

	HAL_Delay(50);
 801f27e:	2032      	movs	r0, #50	; 0x32
 801f280:	f7e2 fc30 	bl	8001ae4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 801f284:	2000      	movs	r0, #0
 801f286:	f000 f80d 	bl	801f2a4 <ST7789_Fill_Color>
}
 801f28a:	bf00      	nop
 801f28c:	372c      	adds	r7, #44	; 0x2c
 801f28e:	46bd      	mov	sp, r7
 801f290:	bd90      	pop	{r4, r7, pc}
 801f292:	bf00      	nop
 801f294:	40020000 	.word	0x40020000
 801f298:	08029dac 	.word	0x08029dac
 801f29c:	08029db4 	.word	0x08029db4
 801f2a0:	08029dc4 	.word	0x08029dc4

0801f2a4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b084      	sub	sp, #16
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	4603      	mov	r3, r0
 801f2ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 801f2ae:	23ef      	movs	r3, #239	; 0xef
 801f2b0:	22ef      	movs	r2, #239	; 0xef
 801f2b2:	2100      	movs	r1, #0
 801f2b4:	2000      	movs	r0, #0
 801f2b6:	f7ff ff07 	bl	801f0c8 <ST7789_SetAddressWindow>
	for (i = 0; i < ST7789_WIDTH; i++)
 801f2ba:	2300      	movs	r3, #0
 801f2bc:	81fb      	strh	r3, [r7, #14]
 801f2be:	e019      	b.n	801f2f4 <ST7789_Fill_Color+0x50>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	81bb      	strh	r3, [r7, #12]
 801f2c4:	e010      	b.n	801f2e8 <ST7789_Fill_Color+0x44>
			uint8_t data[] = {color >> 8, color & 0xFF};
 801f2c6:	88fb      	ldrh	r3, [r7, #6]
 801f2c8:	0a1b      	lsrs	r3, r3, #8
 801f2ca:	b29b      	uxth	r3, r3
 801f2cc:	b2db      	uxtb	r3, r3
 801f2ce:	723b      	strb	r3, [r7, #8]
 801f2d0:	88fb      	ldrh	r3, [r7, #6]
 801f2d2:	b2db      	uxtb	r3, r3
 801f2d4:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 801f2d6:	f107 0308 	add.w	r3, r7, #8
 801f2da:	2102      	movs	r1, #2
 801f2dc:	4618      	mov	r0, r3
 801f2de:	f7ff fe83 	bl	801efe8 <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 801f2e2:	89bb      	ldrh	r3, [r7, #12]
 801f2e4:	3301      	adds	r3, #1
 801f2e6:	81bb      	strh	r3, [r7, #12]
 801f2e8:	89bb      	ldrh	r3, [r7, #12]
 801f2ea:	2bef      	cmp	r3, #239	; 0xef
 801f2ec:	d9eb      	bls.n	801f2c6 <ST7789_Fill_Color+0x22>
	for (i = 0; i < ST7789_WIDTH; i++)
 801f2ee:	89fb      	ldrh	r3, [r7, #14]
 801f2f0:	3301      	adds	r3, #1
 801f2f2:	81fb      	strh	r3, [r7, #14]
 801f2f4:	89fb      	ldrh	r3, [r7, #14]
 801f2f6:	2bef      	cmp	r3, #239	; 0xef
 801f2f8:	d9e2      	bls.n	801f2c0 <ST7789_Fill_Color+0x1c>
		}
}
 801f2fa:	bf00      	nop
 801f2fc:	3710      	adds	r7, #16
 801f2fe:	46bd      	mov	sp, r7
 801f300:	bd80      	pop	{r7, pc}
	...

0801f304 <ST7789_SPI_Send>:
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
}

static void ST7789_SPI_Send(uint8_t *data, uint16_t size)
{
 801f304:	b580      	push	{r7, lr}
 801f306:	b082      	sub	sp, #8
 801f308:	af00      	add	r7, sp, #0
 801f30a:	6078      	str	r0, [r7, #4]
 801f30c:	460b      	mov	r3, r1
 801f30e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&ST7789_SPI_PORT,data,size,1);
 801f310:	887a      	ldrh	r2, [r7, #2]
 801f312:	2301      	movs	r3, #1
 801f314:	6879      	ldr	r1, [r7, #4]
 801f316:	4803      	ldr	r0, [pc, #12]	; (801f324 <ST7789_SPI_Send+0x20>)
 801f318:	f7e4 faa6 	bl	8003868 <HAL_SPI_Transmit>
}
 801f31c:	bf00      	nop
 801f31e:	3708      	adds	r7, #8
 801f320:	46bd      	mov	sp, r7
 801f322:	bd80      	pop	{r7, pc}
 801f324:	20006998 	.word	0x20006998

0801f328 <ST7789_Send_Data>:

void ST7789_Send_Data(uint16_t x, uint16_t y, uint16_t x_end, uint16_t y_end, uint8_t *p){
 801f328:	b590      	push	{r4, r7, lr}
 801f32a:	b083      	sub	sp, #12
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	4604      	mov	r4, r0
 801f330:	4608      	mov	r0, r1
 801f332:	4611      	mov	r1, r2
 801f334:	461a      	mov	r2, r3
 801f336:	4623      	mov	r3, r4
 801f338:	80fb      	strh	r3, [r7, #6]
 801f33a:	4603      	mov	r3, r0
 801f33c:	80bb      	strh	r3, [r7, #4]
 801f33e:	460b      	mov	r3, r1
 801f340:	807b      	strh	r3, [r7, #2]
 801f342:	4613      	mov	r3, r2
 801f344:	803b      	strh	r3, [r7, #0]
	ST7789_SetAddressWindow(x, y, x_end, y_end);
 801f346:	883b      	ldrh	r3, [r7, #0]
 801f348:	887a      	ldrh	r2, [r7, #2]
 801f34a:	88b9      	ldrh	r1, [r7, #4]
 801f34c:	88f8      	ldrh	r0, [r7, #6]
 801f34e:	f7ff febb 	bl	801f0c8 <ST7789_SetAddressWindow>
	ST7789_DC_Set();
 801f352:	2201      	movs	r2, #1
 801f354:	2104      	movs	r1, #4
 801f356:	480d      	ldr	r0, [pc, #52]	; (801f38c <ST7789_Send_Data+0x64>)
 801f358:	f7e3 f992 	bl	8002680 <HAL_GPIO_WritePin>
	ST7789_SPI_Send(p,(x_end - x + 1) * (y_end - y + 1) * 2);
 801f35c:	887a      	ldrh	r2, [r7, #2]
 801f35e:	88fb      	ldrh	r3, [r7, #6]
 801f360:	1ad3      	subs	r3, r2, r3
 801f362:	3301      	adds	r3, #1
 801f364:	b29a      	uxth	r2, r3
 801f366:	8839      	ldrh	r1, [r7, #0]
 801f368:	88bb      	ldrh	r3, [r7, #4]
 801f36a:	1acb      	subs	r3, r1, r3
 801f36c:	3301      	adds	r3, #1
 801f36e:	b29b      	uxth	r3, r3
 801f370:	fb12 f303 	smulbb	r3, r2, r3
 801f374:	b29b      	uxth	r3, r3
 801f376:	005b      	lsls	r3, r3, #1
 801f378:	b29b      	uxth	r3, r3
 801f37a:	4619      	mov	r1, r3
 801f37c:	69b8      	ldr	r0, [r7, #24]
 801f37e:	f7ff ffc1 	bl	801f304 <ST7789_SPI_Send>
}
 801f382:	bf00      	nop
 801f384:	370c      	adds	r7, #12
 801f386:	46bd      	mov	sp, r7
 801f388:	bd90      	pop	{r4, r7, pc}
 801f38a:	bf00      	nop
 801f38c:	40020000 	.word	0x40020000

0801f390 <tos_Tft_init>:
#if DMA_ACTIVE
static lv_disp_drv_t * st7789disp_p;
#endif

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);
void tos_Tft_init(void){
 801f390:	b580      	push	{r7, lr}
 801f392:	b08a      	sub	sp, #40	; 0x28
 801f394:	af00      	add	r7, sp, #0
	  ST7789_Init();
 801f396:	f7ff fee7 	bl	801f168 <ST7789_Init>
	  lv_init();
 801f39a:	f7e6 f9db 	bl	8005754 <lv_init>

	 static lv_disp_buf_t disp_buf;
	 static lv_color_t buf[LV_HOR_RES_MAX * LV_VER_RES_MAX / 10];
	 lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX / 10);
 801f39e:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	4909      	ldr	r1, [pc, #36]	; (801f3cc <tos_Tft_init+0x3c>)
 801f3a6:	480a      	ldr	r0, [pc, #40]	; (801f3d0 <tos_Tft_init+0x40>)
 801f3a8:	f7f3 f84c 	bl	8012444 <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 801f3ac:	1d3b      	adds	r3, r7, #4
 801f3ae:	4618      	mov	r0, r3
 801f3b0:	f7f3 f80b 	bl	80123ca <lv_disp_drv_init>
	  disp_drv.buffer = &disp_buf;
 801f3b4:	4b06      	ldr	r3, [pc, #24]	; (801f3d0 <tos_Tft_init+0x40>)
 801f3b6:	60bb      	str	r3, [r7, #8]
	  disp_drv.flush_cb = st7789_flush_cb;
 801f3b8:	4b06      	ldr	r3, [pc, #24]	; (801f3d4 <tos_Tft_init+0x44>)
 801f3ba:	613b      	str	r3, [r7, #16]
	  lv_disp_drv_register(&disp_drv);
 801f3bc:	1d3b      	adds	r3, r7, #4
 801f3be:	4618      	mov	r0, r3
 801f3c0:	f7f3 f85e 	bl	8012480 <lv_disp_drv_register>

}
 801f3c4:	bf00      	nop
 801f3c6:	3728      	adds	r7, #40	; 0x28
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	bd80      	pop	{r7, pc}
 801f3cc:	20002cb8 	.word	0x20002cb8
 801f3d0:	20002c9c 	.word	0x20002c9c
 801f3d4:	0801f3d9 	.word	0x0801f3d9

0801f3d8 <st7789_flush_cb>:

static void st7789_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 801f3d8:	b590      	push	{r4, r7, lr}
 801f3da:	b087      	sub	sp, #28
 801f3dc:	af02      	add	r7, sp, #8
 801f3de:	60f8      	str	r0, [r7, #12]
 801f3e0:	60b9      	str	r1, [r7, #8]
 801f3e2:	607a      	str	r2, [r7, #4]
	 	if(area->x2 < 0) return;
 801f3e4:	68bb      	ldr	r3, [r7, #8]
 801f3e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	db27      	blt.n	801f43e <st7789_flush_cb+0x66>
	    if(area->y2 < 0) return;
 801f3ee:	68bb      	ldr	r3, [r7, #8]
 801f3f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	db24      	blt.n	801f442 <st7789_flush_cb+0x6a>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 801f3f8:	68bb      	ldr	r3, [r7, #8]
 801f3fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f3fe:	2bef      	cmp	r3, #239	; 0xef
 801f400:	dc21      	bgt.n	801f446 <st7789_flush_cb+0x6e>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 801f402:	68bb      	ldr	r3, [r7, #8]
 801f404:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f408:	2bef      	cmp	r3, #239	; 0xef
 801f40a:	dc1e      	bgt.n	801f44a <st7789_flush_cb+0x72>

#if DMA_ACTIVE
	      ST7789_Send_Data_DMA(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
	      st7789disp_p=disp_drv;
#else
	ST7789_Send_Data(area->x1, area->y1, area->x2, area->y2,(uint8_t *)color_p);
 801f40c:	68bb      	ldr	r3, [r7, #8]
 801f40e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f412:	b298      	uxth	r0, r3
 801f414:	68bb      	ldr	r3, [r7, #8]
 801f416:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f41a:	b299      	uxth	r1, r3
 801f41c:	68bb      	ldr	r3, [r7, #8]
 801f41e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f422:	b29a      	uxth	r2, r3
 801f424:	68bb      	ldr	r3, [r7, #8]
 801f426:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f42a:	b29c      	uxth	r4, r3
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	9300      	str	r3, [sp, #0]
 801f430:	4623      	mov	r3, r4
 801f432:	f7ff ff79 	bl	801f328 <ST7789_Send_Data>
    lv_disp_flush_ready(disp_drv);
 801f436:	68f8      	ldr	r0, [r7, #12]
 801f438:	f7f3 f91c 	bl	8012674 <lv_disp_flush_ready>
 801f43c:	e006      	b.n	801f44c <st7789_flush_cb+0x74>
	 	if(area->x2 < 0) return;
 801f43e:	bf00      	nop
 801f440:	e004      	b.n	801f44c <st7789_flush_cb+0x74>
	    if(area->y2 < 0) return;
 801f442:	bf00      	nop
 801f444:	e002      	b.n	801f44c <st7789_flush_cb+0x74>
	    if(area->x1 > LV_HOR_RES_MAX - 1) return;
 801f446:	bf00      	nop
 801f448:	e000      	b.n	801f44c <st7789_flush_cb+0x74>
	    if(area->y1 > LV_VER_RES_MAX - 1) return;
 801f44a:	bf00      	nop
#endif
}
 801f44c:	3714      	adds	r7, #20
 801f44e:	46bd      	mov	sp, r7
 801f450:	bd90      	pop	{r4, r7, pc}

0801f452 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 801f452:	b580      	push	{r7, lr}
 801f454:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 801f456:	f7f3 f8a3 	bl	80125a0 <lv_disp_get_default>
 801f45a:	4603      	mov	r3, r0
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7e5 fd6b 	bl	8004f38 <lv_disp_get_scr_act>
 801f462:	4603      	mov	r3, r0
}
 801f464:	4618      	mov	r0, r3
 801f466:	bd80      	pop	{r7, pc}

0801f468 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 801f468:	b580      	push	{r7, lr}
 801f46a:	b084      	sub	sp, #16
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	60f8      	str	r0, [r7, #12]
 801f470:	460b      	mov	r3, r1
 801f472:	607a      	str	r2, [r7, #4]
 801f474:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 801f476:	6879      	ldr	r1, [r7, #4]
 801f478:	68f8      	ldr	r0, [r7, #12]
 801f47a:	f7e7 fbd4 	bl	8006c26 <lv_obj_set_style>
}
 801f47e:	bf00      	nop
 801f480:	3710      	adds	r7, #16
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}

0801f486 <lv_lmeter_set_style>:
 * @param lmeter pointer to a line meter object
 * @param type which style should be set (can be only `LV_LMETER_STYLE_MAIN`)
 * @param style set the style of the line meter
 */
static inline void lv_lmeter_set_style(lv_obj_t * lmeter, lv_lmeter_style_t type, lv_style_t * style)
{
 801f486:	b580      	push	{r7, lr}
 801f488:	b084      	sub	sp, #16
 801f48a:	af00      	add	r7, sp, #0
 801f48c:	60f8      	str	r0, [r7, #12]
 801f48e:	460b      	mov	r3, r1
 801f490:	607a      	str	r2, [r7, #4]
 801f492:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(lmeter, style);
 801f494:	6879      	ldr	r1, [r7, #4]
 801f496:	68f8      	ldr	r0, [r7, #12]
 801f498:	f7e7 fbc5 	bl	8006c26 <lv_obj_set_style>
}
 801f49c:	bf00      	nop
 801f49e:	3710      	adds	r7, #16
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	bd80      	pop	{r7, pc}

0801f4a4 <tos_MainScreen_Init>:

@param theme:
false ->Light Theme
true ->Dark Theme
*/
void tos_MainScreen_Init(uint8_t screenType,bool theme) {
 801f4a4:	b580      	push	{r7, lr}
 801f4a6:	b082      	sub	sp, #8
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	4603      	mov	r3, r0
 801f4ac:	460a      	mov	r2, r1
 801f4ae:	71fb      	strb	r3, [r7, #7]
 801f4b0:	4613      	mov	r3, r2
 801f4b2:	71bb      	strb	r3, [r7, #6]
		    weekDayStr="Gun";
 801f4b4:	4b3d      	ldr	r3, [pc, #244]	; (801f5ac <tos_MainScreen_Init+0x108>)
 801f4b6:	4a3e      	ldr	r2, [pc, #248]	; (801f5b0 <tos_MainScreen_Init+0x10c>)
 801f4b8:	601a      	str	r2, [r3, #0]
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 801f4ba:	493e      	ldr	r1, [pc, #248]	; (801f5b4 <tos_MainScreen_Init+0x110>)
 801f4bc:	483e      	ldr	r0, [pc, #248]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4be:	f7e9 f951 	bl	8008764 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 801f4c2:	4a3d      	ldr	r2, [pc, #244]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4c4:	4b3d      	ldr	r3, [pc, #244]	; (801f5bc <tos_MainScreen_Init+0x118>)
 801f4c6:	881b      	ldrh	r3, [r3, #0]
 801f4c8:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 801f4ca:	4a3b      	ldr	r2, [pc, #236]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4cc:	4b3b      	ldr	r3, [pc, #236]	; (801f5bc <tos_MainScreen_Init+0x118>)
 801f4ce:	881b      	ldrh	r3, [r3, #0]
 801f4d0:	8093      	strh	r3, [r2, #4]
	if(theme){
 801f4d2:	79bb      	ldrb	r3, [r7, #6]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d009      	beq.n	801f4ec <tos_MainScreen_Init+0x48>
		lv_style_copy(&style_screen, &lv_style_plain);
 801f4d8:	4936      	ldr	r1, [pc, #216]	; (801f5b4 <tos_MainScreen_Init+0x110>)
 801f4da:	4837      	ldr	r0, [pc, #220]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4dc:	f7e9 f942 	bl	8008764 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_BLACK;
 801f4e0:	4b35      	ldr	r3, [pc, #212]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 801f4e6:	4b34      	ldr	r3, [pc, #208]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	809a      	strh	r2, [r3, #4]
	}
	lv_obj_set_style(lv_scr_act(), &style_screen);
 801f4ec:	f7ff ffb1 	bl	801f452 <lv_scr_act>
 801f4f0:	4603      	mov	r3, r0
 801f4f2:	4931      	ldr	r1, [pc, #196]	; (801f5b8 <tos_MainScreen_Init+0x114>)
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	f7e7 fb96 	bl	8006c26 <lv_obj_set_style>

	MainScreenType= screenType;
 801f4fa:	4a31      	ldr	r2, [pc, #196]	; (801f5c0 <tos_MainScreen_Init+0x11c>)
 801f4fc:	79fb      	ldrb	r3, [r7, #7]
 801f4fe:	7013      	strb	r3, [r2, #0]
	MS_taskController=true;
 801f500:	4b30      	ldr	r3, [pc, #192]	; (801f5c4 <tos_MainScreen_Init+0x120>)
 801f502:	2201      	movs	r2, #1
 801f504:	701a      	strb	r2, [r3, #0]
	switch(screenType){
 801f506:	79fb      	ldrb	r3, [r7, #7]
 801f508:	2b01      	cmp	r3, #1
 801f50a:	d010      	beq.n	801f52e <tos_MainScreen_Init+0x8a>
 801f50c:	2b02      	cmp	r3, #2
 801f50e:	d01b      	beq.n	801f548 <tos_MainScreen_Init+0xa4>
 801f510:	2b00      	cmp	r3, #0
 801f512:	d125      	bne.n	801f560 <tos_MainScreen_Init+0xbc>
	case tos_mainScreen_Type1: tos_DigitalType_Init(0,theme);
 801f514:	79bb      	ldrb	r3, [r7, #6]
 801f516:	4619      	mov	r1, r3
 801f518:	2000      	movs	r0, #0
 801f51a:	f000 fc2f 	bl	801fd7c <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f51e:	2300      	movs	r3, #0
 801f520:	2201      	movs	r2, #1
 801f522:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f526:	4828      	ldr	r0, [pc, #160]	; (801f5c8 <tos_MainScreen_Init+0x124>)
 801f528:	f7f4 fc7e 	bl	8013e28 <lv_task_create>
 801f52c:	e01d      	b.n	801f56a <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type2: tos_DigitalType_Init(1,theme);
 801f52e:	79bb      	ldrb	r3, [r7, #6]
 801f530:	4619      	mov	r1, r3
 801f532:	2001      	movs	r0, #1
 801f534:	f000 fc22 	bl	801fd7c <tos_DigitalType_Init>
	lv_task_create(digitalTimePrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f538:	2300      	movs	r3, #0
 801f53a:	2201      	movs	r2, #1
 801f53c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f540:	4821      	ldr	r0, [pc, #132]	; (801f5c8 <tos_MainScreen_Init+0x124>)
 801f542:	f7f4 fc71 	bl	8013e28 <lv_task_create>
 801f546:	e010      	b.n	801f56a <tos_MainScreen_Init+0xc6>
	case tos_mainScreen_Type3: tos_AnalogueType_Init(theme);
 801f548:	79bb      	ldrb	r3, [r7, #6]
 801f54a:	4618      	mov	r0, r3
 801f54c:	f000 f848 	bl	801f5e0 <tos_AnalogueType_Init>
	lv_task_create(analogueDataPrintTheScreen, 500, LV_TASK_PRIO_LOWEST, NULL); break;
 801f550:	2300      	movs	r3, #0
 801f552:	2201      	movs	r2, #1
 801f554:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f558:	481c      	ldr	r0, [pc, #112]	; (801f5cc <tos_MainScreen_Init+0x128>)
 801f55a:	f7f4 fc65 	bl	8013e28 <lv_task_create>
 801f55e:	e004      	b.n	801f56a <tos_MainScreen_Init+0xc6>
	default: tos_DigitalType_Init(0,theme);
 801f560:	79bb      	ldrb	r3, [r7, #6]
 801f562:	4619      	mov	r1, r3
 801f564:	2000      	movs	r0, #0
 801f566:	f000 fc09 	bl	801fd7c <tos_DigitalType_Init>
	}
	lv_task_create(batteryValueUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f56a:	2300      	movs	r3, #0
 801f56c:	2201      	movs	r2, #1
 801f56e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f572:	4817      	ldr	r0, [pc, #92]	; (801f5d0 <tos_MainScreen_Init+0x12c>)
 801f574:	f7f4 fc58 	bl	8013e28 <lv_task_create>
	lv_task_create(bluetoothStatusUpdater, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f578:	2300      	movs	r3, #0
 801f57a:	2201      	movs	r2, #1
 801f57c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f580:	4814      	ldr	r0, [pc, #80]	; (801f5d4 <tos_MainScreen_Init+0x130>)
 801f582:	f7f4 fc51 	bl	8013e28 <lv_task_create>
	lv_task_create(steps_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f586:	2300      	movs	r3, #0
 801f588:	2201      	movs	r2, #1
 801f58a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f58e:	4812      	ldr	r0, [pc, #72]	; (801f5d8 <tos_MainScreen_Init+0x134>)
 801f590:	f7f4 fc4a 	bl	8013e28 <lv_task_create>
	lv_task_create(kCals_angle_loader, 500, LV_TASK_PRIO_LOWEST, NULL);
 801f594:	2300      	movs	r3, #0
 801f596:	2201      	movs	r2, #1
 801f598:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801f59c:	480f      	ldr	r0, [pc, #60]	; (801f5dc <tos_MainScreen_Init+0x138>)
 801f59e:	f7f4 fc43 	bl	8013e28 <lv_task_create>



}
 801f5a2:	bf00      	nop
 801f5a4:	3708      	adds	r7, #8
 801f5a6:	46bd      	mov	sp, r7
 801f5a8:	bd80      	pop	{r7, pc}
 801f5aa:	bf00      	nop
 801f5ac:	20006e74 	.word	0x20006e74
 801f5b0:	08029dd4 	.word	0x08029dd4
 801f5b4:	20006c74 	.word	0x20006c74
 801f5b8:	200059b8 	.word	0x200059b8
 801f5bc:	08029dd8 	.word	0x08029dd8
 801f5c0:	20006e14 	.word	0x20006e14
 801f5c4:	20006e91 	.word	0x20006e91
 801f5c8:	08020e21 	.word	0x08020e21
 801f5cc:	08020f69 	.word	0x08020f69
 801f5d0:	08020a91 	.word	0x08020a91
 801f5d4:	08020af1 	.word	0x08020af1
 801f5d8:	08021021 	.word	0x08021021
 801f5dc:	08021169 	.word	0x08021169

0801f5e0 <tos_AnalogueType_Init>:

//Analogue Type
void tos_AnalogueType_Init(bool theme){
 801f5e0:	b580      	push	{r7, lr}
 801f5e2:	b084      	sub	sp, #16
 801f5e4:	af02      	add	r7, sp, #8
 801f5e6:	4603      	mov	r3, r0
 801f5e8:	71fb      	strb	r3, [r7, #7]

	static lv_style_t dDate_style,weekD_style;
    lv_style_copy(&dDate_style, &lv_style_plain);
 801f5ea:	49b9      	ldr	r1, [pc, #740]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f5ec:	48b9      	ldr	r0, [pc, #740]	; (801f8d4 <tos_AnalogueType_Init+0x2f4>)
 801f5ee:	f7e9 f8b9 	bl	8008764 <lv_style_copy>
    dDate_style.text.font =&digital_font_for_number_30;
 801f5f2:	4bb8      	ldr	r3, [pc, #736]	; (801f8d4 <tos_AnalogueType_Init+0x2f4>)
 801f5f4:	4ab8      	ldr	r2, [pc, #736]	; (801f8d8 <tos_AnalogueType_Init+0x2f8>)
 801f5f6:	625a      	str	r2, [r3, #36]	; 0x24
	lv_style_copy(&weekD_style, &lv_style_plain);
 801f5f8:	49b5      	ldr	r1, [pc, #724]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f5fa:	48b8      	ldr	r0, [pc, #736]	; (801f8dc <tos_AnalogueType_Init+0x2fc>)
 801f5fc:	f7e9 f8b2 	bl	8008764 <lv_style_copy>
	weekD_style.text.font =&lv_font_roboto_22;
 801f600:	4bb6      	ldr	r3, [pc, #728]	; (801f8dc <tos_AnalogueType_Init+0x2fc>)
 801f602:	4ab7      	ldr	r2, [pc, #732]	; (801f8e0 <tos_AnalogueType_Init+0x300>)
 801f604:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 801f606:	79fb      	ldrb	r3, [r7, #7]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d007      	beq.n	801f61c <tos_AnalogueType_Init+0x3c>
    	dDate_style.text.color = LV_COLOR_SILVER;
 801f60c:	4ab1      	ldr	r2, [pc, #708]	; (801f8d4 <tos_AnalogueType_Init+0x2f4>)
 801f60e:	4bb5      	ldr	r3, [pc, #724]	; (801f8e4 <tos_AnalogueType_Init+0x304>)
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	8413      	strh	r3, [r2, #32]
    	weekD_style.text.color = LV_COLOR_SILVER;
 801f614:	4ab1      	ldr	r2, [pc, #708]	; (801f8dc <tos_AnalogueType_Init+0x2fc>)
 801f616:	4bb3      	ldr	r3, [pc, #716]	; (801f8e4 <tos_AnalogueType_Init+0x304>)
 801f618:	881b      	ldrh	r3, [r3, #0]
 801f61a:	8413      	strh	r3, [r2, #32]
    }

    if(theme){
    }
    //Battery
    	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 801f61c:	f7ff ff19 	bl	801f452 <lv_scr_act>
 801f620:	4603      	mov	r3, r0
 801f622:	2100      	movs	r1, #0
 801f624:	4618      	mov	r0, r3
 801f626:	f7f9 ff71 	bl	801950c <lv_label_create>
 801f62a:	4602      	mov	r2, r0
 801f62c:	4bae      	ldr	r3, [pc, #696]	; (801f8e8 <tos_AnalogueType_Init+0x308>)
 801f62e:	601a      	str	r2, [r3, #0]
    	lv_style_copy(&battery_style, &lv_style_plain);
 801f630:	49a7      	ldr	r1, [pc, #668]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f632:	48ae      	ldr	r0, [pc, #696]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f634:	f7e9 f896 	bl	8008764 <lv_style_copy>
    	battery_style.text.color = LV_COLOR_GREEN;
 801f638:	4aac      	ldr	r2, [pc, #688]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f63a:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f63e:	2104      	movs	r1, #4
 801f640:	f361 0302 	bfi	r3, r1, #0, #3
 801f644:	f882 3020 	strb.w	r3, [r2, #32]
 801f648:	4aa8      	ldr	r2, [pc, #672]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f64a:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f64e:	f36f 03c7 	bfc	r3, #3, #5
 801f652:	f882 3020 	strb.w	r3, [r2, #32]
 801f656:	4aa5      	ldr	r2, [pc, #660]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f658:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f65c:	f36f 0304 	bfc	r3, #0, #5
 801f660:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801f664:	4aa1      	ldr	r2, [pc, #644]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f666:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f66a:	f36f 1347 	bfc	r3, #5, #3
 801f66e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 801f672:	4b9d      	ldr	r3, [pc, #628]	; (801f8e8 <tos_AnalogueType_Init+0x308>)
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	4a9d      	ldr	r2, [pc, #628]	; (801f8ec <tos_AnalogueType_Init+0x30c>)
 801f678:	2100      	movs	r1, #0
 801f67a:	4618      	mov	r0, r3
 801f67c:	f7ff fef4 	bl	801f468 <lv_label_set_style>
    	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 801f680:	4b99      	ldr	r3, [pc, #612]	; (801f8e8 <tos_AnalogueType_Init+0x308>)
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	499a      	ldr	r1, [pc, #616]	; (801f8f0 <tos_AnalogueType_Init+0x310>)
 801f686:	4618      	mov	r0, r3
 801f688:	f7fa f872 	bl	8019770 <lv_label_set_text>
    	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 801f68c:	4b96      	ldr	r3, [pc, #600]	; (801f8e8 <tos_AnalogueType_Init+0x308>)
 801f68e:	6818      	ldr	r0, [r3, #0]
 801f690:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	2364      	movs	r3, #100	; 0x64
 801f698:	2200      	movs	r2, #0
 801f69a:	2100      	movs	r1, #0
 801f69c:	f7e6 fe1e 	bl	80062dc <lv_obj_align>

    	//Bluetooth
    	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 801f6a0:	f7ff fed7 	bl	801f452 <lv_scr_act>
 801f6a4:	4603      	mov	r3, r0
 801f6a6:	2100      	movs	r1, #0
 801f6a8:	4618      	mov	r0, r3
 801f6aa:	f7f9 ff2f 	bl	801950c <lv_label_create>
 801f6ae:	4602      	mov	r2, r0
 801f6b0:	4b90      	ldr	r3, [pc, #576]	; (801f8f4 <tos_AnalogueType_Init+0x314>)
 801f6b2:	601a      	str	r2, [r3, #0]
        lv_style_copy(&bluetooth_style, &lv_style_plain);
 801f6b4:	4986      	ldr	r1, [pc, #536]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f6b6:	4890      	ldr	r0, [pc, #576]	; (801f8f8 <tos_AnalogueType_Init+0x318>)
 801f6b8:	f7e9 f854 	bl	8008764 <lv_style_copy>
    	bluetooth_style.text.color = LV_COLOR_WHITE;
 801f6bc:	4a8e      	ldr	r2, [pc, #568]	; (801f8f8 <tos_AnalogueType_Init+0x318>)
 801f6be:	4b8f      	ldr	r3, [pc, #572]	; (801f8fc <tos_AnalogueType_Init+0x31c>)
 801f6c0:	881b      	ldrh	r3, [r3, #0]
 801f6c2:	8413      	strh	r3, [r2, #32]
    	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 801f6c4:	4b8b      	ldr	r3, [pc, #556]	; (801f8f4 <tos_AnalogueType_Init+0x314>)
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	4a8b      	ldr	r2, [pc, #556]	; (801f8f8 <tos_AnalogueType_Init+0x318>)
 801f6ca:	2100      	movs	r1, #0
 801f6cc:	4618      	mov	r0, r3
 801f6ce:	f7ff fecb 	bl	801f468 <lv_label_set_style>
    	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 801f6d2:	4b88      	ldr	r3, [pc, #544]	; (801f8f4 <tos_AnalogueType_Init+0x314>)
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	498a      	ldr	r1, [pc, #552]	; (801f900 <tos_AnalogueType_Init+0x320>)
 801f6d8:	4618      	mov	r0, r3
 801f6da:	f7fa f849 	bl	8019770 <lv_label_set_text>
    	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 801f6de:	4b85      	ldr	r3, [pc, #532]	; (801f8f4 <tos_AnalogueType_Init+0x314>)
 801f6e0:	6818      	ldr	r0, [r3, #0]
 801f6e2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f6e6:	9300      	str	r3, [sp, #0]
 801f6e8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801f6ec:	2200      	movs	r2, #0
 801f6ee:	2100      	movs	r1, #0
 801f6f0:	f7e6 fdf4 	bl	80062dc <lv_obj_align>
    	//

      //Analogue Quadran
    	static lv_style_t analogue_quadran_style;
       lv_style_copy(&analogue_quadran_style, &lv_style_pretty_color);
 801f6f4:	4983      	ldr	r1, [pc, #524]	; (801f904 <tos_AnalogueType_Init+0x324>)
 801f6f6:	4884      	ldr	r0, [pc, #528]	; (801f908 <tos_AnalogueType_Init+0x328>)
 801f6f8:	f7e9 f834 	bl	8008764 <lv_style_copy>
       analogue_quadran_style.line.width = 2;
 801f6fc:	4b82      	ldr	r3, [pc, #520]	; (801f908 <tos_AnalogueType_Init+0x328>)
 801f6fe:	2202      	movs	r2, #2
 801f700:	86da      	strh	r2, [r3, #54]	; 0x36
       analogue_quadran_style.line.color = LV_COLOR_SILVER;
 801f702:	4a81      	ldr	r2, [pc, #516]	; (801f908 <tos_AnalogueType_Init+0x328>)
 801f704:	4b77      	ldr	r3, [pc, #476]	; (801f8e4 <tos_AnalogueType_Init+0x304>)
 801f706:	881b      	ldrh	r3, [r3, #0]
 801f708:	8693      	strh	r3, [r2, #52]	; 0x34
       analogue_quadran_style.body.padding.left = 20;
 801f70a:	4b7f      	ldr	r3, [pc, #508]	; (801f908 <tos_AnalogueType_Init+0x328>)
 801f70c:	2214      	movs	r2, #20
 801f70e:	835a      	strh	r2, [r3, #26]


       analogueQuadran = lv_lmeter_create(lv_scr_act(), NULL);
 801f710:	f7ff fe9f 	bl	801f452 <lv_scr_act>
 801f714:	4603      	mov	r3, r0
 801f716:	2100      	movs	r1, #0
 801f718:	4618      	mov	r0, r3
 801f71a:	f7fb fa1b 	bl	801ab54 <lv_lmeter_create>
 801f71e:	4602      	mov	r2, r0
 801f720:	4b7a      	ldr	r3, [pc, #488]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f722:	601a      	str	r2, [r3, #0]
       lv_lmeter_set_range(analogueQuadran, 0, 59);
 801f724:	4b79      	ldr	r3, [pc, #484]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	223b      	movs	r2, #59	; 0x3b
 801f72a:	2100      	movs	r1, #0
 801f72c:	4618      	mov	r0, r3
 801f72e:	f7fb facb 	bl	801acc8 <lv_lmeter_set_range>
       lv_lmeter_set_scale(analogueQuadran, 360, 60);
 801f732:	4b76      	ldr	r3, [pc, #472]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	223c      	movs	r2, #60	; 0x3c
 801f738:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801f73c:	4618      	mov	r0, r3
 801f73e:	f7fb fb0d 	bl	801ad5c <lv_lmeter_set_scale>
       lv_lmeter_set_style(analogueQuadran, LV_LMETER_STYLE_MAIN, &analogue_quadran_style);
 801f742:	4b72      	ldr	r3, [pc, #456]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	4a70      	ldr	r2, [pc, #448]	; (801f908 <tos_AnalogueType_Init+0x328>)
 801f748:	2100      	movs	r1, #0
 801f74a:	4618      	mov	r0, r3
 801f74c:	f7ff fe9b 	bl	801f486 <lv_lmeter_set_style>
       lv_obj_set_size(analogueQuadran, 240, 240);
 801f750:	4b6e      	ldr	r3, [pc, #440]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	22f0      	movs	r2, #240	; 0xf0
 801f756:	21f0      	movs	r1, #240	; 0xf0
 801f758:	4618      	mov	r0, r3
 801f75a:	f7e6 fd1c 	bl	8006196 <lv_obj_set_size>
       lv_obj_align(analogueQuadran, NULL, LV_ALIGN_CENTER, 0, 0);
 801f75e:	4b6b      	ldr	r3, [pc, #428]	; (801f90c <tos_AnalogueType_Init+0x32c>)
 801f760:	6818      	ldr	r0, [r3, #0]
 801f762:	2300      	movs	r3, #0
 801f764:	9300      	str	r3, [sp, #0]
 801f766:	2300      	movs	r3, #0
 801f768:	2200      	movs	r2, #0
 801f76a:	2100      	movs	r1, #0
 801f76c:	f7e6 fdb6 	bl	80062dc <lv_obj_align>

       //Hours
       static lv_style_t hours_Style;
       	  lv_style_copy(&hours_Style, &lv_style_plain);
 801f770:	4957      	ldr	r1, [pc, #348]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f772:	4867      	ldr	r0, [pc, #412]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f774:	f7e8 fff6 	bl	8008764 <lv_style_copy>
       	  hours_Style.line.color = LV_COLOR_MAGENTA;
 801f778:	4a65      	ldr	r2, [pc, #404]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f77a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f77e:	f36f 0302 	bfc	r3, #0, #3
 801f782:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f786:	4a62      	ldr	r2, [pc, #392]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f788:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f78c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801f790:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f794:	4a5e      	ldr	r2, [pc, #376]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f796:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f79a:	f043 031f 	orr.w	r3, r3, #31
 801f79e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801f7a2:	4a5b      	ldr	r2, [pc, #364]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f7a4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f7a8:	f36f 1347 	bfc	r3, #5, #3
 801f7ac:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       	  hours_Style.line.width = 3;
 801f7b0:	4b57      	ldr	r3, [pc, #348]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f7b2:	2203      	movs	r2, #3
 801f7b4:	86da      	strh	r2, [r3, #54]	; 0x36

       	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 801f7b6:	f7ff fe4c 	bl	801f452 <lv_scr_act>
 801f7ba:	4603      	mov	r3, r0
 801f7bc:	2100      	movs	r1, #0
 801f7be:	4618      	mov	r0, r3
 801f7c0:	f7f5 f8a2 	bl	8014908 <lv_arc_create>
 801f7c4:	4602      	mov	r2, r0
 801f7c6:	4b53      	ldr	r3, [pc, #332]	; (801f914 <tos_AnalogueType_Init+0x334>)
 801f7c8:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(hoursArc, 240, 240);
 801f7ca:	4b52      	ldr	r3, [pc, #328]	; (801f914 <tos_AnalogueType_Init+0x334>)
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	22f0      	movs	r2, #240	; 0xf0
 801f7d0:	21f0      	movs	r1, #240	; 0xf0
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	f7e6 fcdf 	bl	8006196 <lv_obj_set_size>
       	  lv_arc_set_angles(hoursArc, 180, 180);
 801f7d8:	4b4e      	ldr	r3, [pc, #312]	; (801f914 <tos_AnalogueType_Init+0x334>)
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	22b4      	movs	r2, #180	; 0xb4
 801f7de:	21b4      	movs	r1, #180	; 0xb4
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	f7f5 f90d 	bl	8014a00 <lv_arc_set_angles>
       	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 801f7e6:	4b4b      	ldr	r3, [pc, #300]	; (801f914 <tos_AnalogueType_Init+0x334>)
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	4a49      	ldr	r2, [pc, #292]	; (801f910 <tos_AnalogueType_Init+0x330>)
 801f7ec:	2100      	movs	r1, #0
 801f7ee:	4618      	mov	r0, r3
 801f7f0:	f7f5 f92f 	bl	8014a52 <lv_arc_set_style>
       	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f7f4:	4b47      	ldr	r3, [pc, #284]	; (801f914 <tos_AnalogueType_Init+0x334>)
 801f7f6:	6818      	ldr	r0, [r3, #0]
 801f7f8:	2300      	movs	r3, #0
 801f7fa:	9300      	str	r3, [sp, #0]
 801f7fc:	2300      	movs	r3, #0
 801f7fe:	2200      	movs	r2, #0
 801f800:	2100      	movs	r1, #0
 801f802:	f7e6 fd6b 	bl	80062dc <lv_obj_align>

       	  //Minutes
       	static lv_style_t minutes_Style;
       	  lv_style_copy(&minutes_Style, &lv_style_plain);
 801f806:	4932      	ldr	r1, [pc, #200]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f808:	4843      	ldr	r0, [pc, #268]	; (801f918 <tos_AnalogueType_Init+0x338>)
 801f80a:	f7e8 ffab 	bl	8008764 <lv_style_copy>
       	  minutes_Style.line.color = LV_COLOR_AQUA;
 801f80e:	4a42      	ldr	r2, [pc, #264]	; (801f918 <tos_AnalogueType_Init+0x338>)
 801f810:	4b42      	ldr	r3, [pc, #264]	; (801f91c <tos_AnalogueType_Init+0x33c>)
 801f812:	881b      	ldrh	r3, [r3, #0]
 801f814:	8693      	strh	r3, [r2, #52]	; 0x34
       	  minutes_Style.line.width = 3;
 801f816:	4b40      	ldr	r3, [pc, #256]	; (801f918 <tos_AnalogueType_Init+0x338>)
 801f818:	2203      	movs	r2, #3
 801f81a:	86da      	strh	r2, [r3, #54]	; 0x36

       	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 801f81c:	f7ff fe19 	bl	801f452 <lv_scr_act>
 801f820:	4603      	mov	r3, r0
 801f822:	2100      	movs	r1, #0
 801f824:	4618      	mov	r0, r3
 801f826:	f7f5 f86f 	bl	8014908 <lv_arc_create>
 801f82a:	4602      	mov	r2, r0
 801f82c:	4b3c      	ldr	r3, [pc, #240]	; (801f920 <tos_AnalogueType_Init+0x340>)
 801f82e:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(minutesArc, 225, 225);
 801f830:	4b3b      	ldr	r3, [pc, #236]	; (801f920 <tos_AnalogueType_Init+0x340>)
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	22e1      	movs	r2, #225	; 0xe1
 801f836:	21e1      	movs	r1, #225	; 0xe1
 801f838:	4618      	mov	r0, r3
 801f83a:	f7e6 fcac 	bl	8006196 <lv_obj_set_size>
       	  lv_arc_set_angles(minutesArc, 180, 180);
 801f83e:	4b38      	ldr	r3, [pc, #224]	; (801f920 <tos_AnalogueType_Init+0x340>)
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	22b4      	movs	r2, #180	; 0xb4
 801f844:	21b4      	movs	r1, #180	; 0xb4
 801f846:	4618      	mov	r0, r3
 801f848:	f7f5 f8da 	bl	8014a00 <lv_arc_set_angles>
       	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 801f84c:	4b34      	ldr	r3, [pc, #208]	; (801f920 <tos_AnalogueType_Init+0x340>)
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	4a31      	ldr	r2, [pc, #196]	; (801f918 <tos_AnalogueType_Init+0x338>)
 801f852:	2100      	movs	r1, #0
 801f854:	4618      	mov	r0, r3
 801f856:	f7f5 f8fc 	bl	8014a52 <lv_arc_set_style>
       	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f85a:	4b31      	ldr	r3, [pc, #196]	; (801f920 <tos_AnalogueType_Init+0x340>)
 801f85c:	6818      	ldr	r0, [r3, #0]
 801f85e:	2300      	movs	r3, #0
 801f860:	9300      	str	r3, [sp, #0]
 801f862:	2300      	movs	r3, #0
 801f864:	2200      	movs	r2, #0
 801f866:	2100      	movs	r1, #0
 801f868:	f7e6 fd38 	bl	80062dc <lv_obj_align>

       	  //Seconds
       	static lv_style_t seconds_Style;
       	  lv_style_copy(&seconds_Style, &lv_style_plain);
 801f86c:	4918      	ldr	r1, [pc, #96]	; (801f8d0 <tos_AnalogueType_Init+0x2f0>)
 801f86e:	482d      	ldr	r0, [pc, #180]	; (801f924 <tos_AnalogueType_Init+0x344>)
 801f870:	f7e8 ff78 	bl	8008764 <lv_style_copy>
       	  seconds_Style.line.color = LV_COLOR_ORANGE;
 801f874:	4a2b      	ldr	r2, [pc, #172]	; (801f924 <tos_AnalogueType_Init+0x344>)
 801f876:	4b2c      	ldr	r3, [pc, #176]	; (801f928 <tos_AnalogueType_Init+0x348>)
 801f878:	881b      	ldrh	r3, [r3, #0]
 801f87a:	8693      	strh	r3, [r2, #52]	; 0x34
       	  seconds_Style.line.width = 3;
 801f87c:	4b29      	ldr	r3, [pc, #164]	; (801f924 <tos_AnalogueType_Init+0x344>)
 801f87e:	2203      	movs	r2, #3
 801f880:	86da      	strh	r2, [r3, #54]	; 0x36

       	  secondsArc = lv_arc_create(lv_scr_act(), NULL);
 801f882:	f7ff fde6 	bl	801f452 <lv_scr_act>
 801f886:	4603      	mov	r3, r0
 801f888:	2100      	movs	r1, #0
 801f88a:	4618      	mov	r0, r3
 801f88c:	f7f5 f83c 	bl	8014908 <lv_arc_create>
 801f890:	4602      	mov	r2, r0
 801f892:	4b26      	ldr	r3, [pc, #152]	; (801f92c <tos_AnalogueType_Init+0x34c>)
 801f894:	601a      	str	r2, [r3, #0]
       	  lv_obj_set_size(secondsArc, 205, 205);
 801f896:	4b25      	ldr	r3, [pc, #148]	; (801f92c <tos_AnalogueType_Init+0x34c>)
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	22cd      	movs	r2, #205	; 0xcd
 801f89c:	21cd      	movs	r1, #205	; 0xcd
 801f89e:	4618      	mov	r0, r3
 801f8a0:	f7e6 fc79 	bl	8006196 <lv_obj_set_size>
       	  lv_arc_set_angles(secondsArc, 180, 180);
 801f8a4:	4b21      	ldr	r3, [pc, #132]	; (801f92c <tos_AnalogueType_Init+0x34c>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	22b4      	movs	r2, #180	; 0xb4
 801f8aa:	21b4      	movs	r1, #180	; 0xb4
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	f7f5 f8a7 	bl	8014a00 <lv_arc_set_angles>
       	  lv_arc_set_style(secondsArc, LV_ARC_STYLE_MAIN, &seconds_Style);
 801f8b2:	4b1e      	ldr	r3, [pc, #120]	; (801f92c <tos_AnalogueType_Init+0x34c>)
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	4a1b      	ldr	r2, [pc, #108]	; (801f924 <tos_AnalogueType_Init+0x344>)
 801f8b8:	2100      	movs	r1, #0
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	f7f5 f8c9 	bl	8014a52 <lv_arc_set_style>
       	  lv_obj_align(secondsArc, NULL, LV_ALIGN_CENTER, 0, 0);
 801f8c0:	4b1a      	ldr	r3, [pc, #104]	; (801f92c <tos_AnalogueType_Init+0x34c>)
 801f8c2:	6818      	ldr	r0, [r3, #0]
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	9300      	str	r3, [sp, #0]
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	2100      	movs	r1, #0
 801f8ce:	e02f      	b.n	801f930 <tos_AnalogueType_Init+0x350>
 801f8d0:	20006c74 	.word	0x20006c74
 801f8d4:	200059f4 	.word	0x200059f4
 801f8d8:	200027e8 	.word	0x200027e8
 801f8dc:	20005a30 	.word	0x20005a30
 801f8e0:	200017c0 	.word	0x200017c0
 801f8e4:	08029e0c 	.word	0x08029e0c
 801f8e8:	20006ee0 	.word	0x20006ee0
 801f8ec:	20006e98 	.word	0x20006e98
 801f8f0:	08029ddc 	.word	0x08029ddc
 801f8f4:	20006e7c 	.word	0x20006e7c
 801f8f8:	20006e30 	.word	0x20006e30
 801f8fc:	08029dd8 	.word	0x08029dd8
 801f900:	08029de0 	.word	0x08029de0
 801f904:	20006a94 	.word	0x20006a94
 801f908:	20005a6c 	.word	0x20005a6c
 801f90c:	20006ed8 	.word	0x20006ed8
 801f910:	20005aa8 	.word	0x20005aa8
 801f914:	20006e2c 	.word	0x20006e2c
 801f918:	20005ae4 	.word	0x20005ae4
 801f91c:	08029e10 	.word	0x08029e10
 801f920:	20006e6c 	.word	0x20006e6c
 801f924:	20005b20 	.word	0x20005b20
 801f928:	08029e14 	.word	0x08029e14
 801f92c:	20006e1c 	.word	0x20006e1c
 801f930:	f7e6 fcd4 	bl	80062dc <lv_obj_align>

       	 //Steps
       	static lv_style_t steps_Style,description_Style;
       			   		  lv_style_copy(&steps_Style, &lv_style_plain);
 801f934:	49c0      	ldr	r1, [pc, #768]	; (801fc38 <tos_AnalogueType_Init+0x658>)
 801f936:	48c1      	ldr	r0, [pc, #772]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f938:	f7e8 ff14 	bl	8008764 <lv_style_copy>
       			   		  steps_Style.line.color = LV_COLOR_GREEN;
 801f93c:	4abf      	ldr	r2, [pc, #764]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f93e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f942:	2104      	movs	r1, #4
 801f944:	f361 0302 	bfi	r3, r1, #0, #3
 801f948:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f94c:	4abb      	ldr	r2, [pc, #748]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f94e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801f952:	f36f 03c7 	bfc	r3, #3, #5
 801f956:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801f95a:	4ab8      	ldr	r2, [pc, #736]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f95c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f960:	f36f 0304 	bfc	r3, #0, #5
 801f964:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801f968:	4ab4      	ldr	r2, [pc, #720]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f96a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801f96e:	f36f 1347 	bfc	r3, #5, #3
 801f972:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  steps_Style.line.width = 5;
 801f976:	4bb1      	ldr	r3, [pc, #708]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f978:	2205      	movs	r2, #5
 801f97a:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  steps_Style.text.color = LV_COLOR_GREEN;
 801f97c:	4aaf      	ldr	r2, [pc, #700]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f97e:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f982:	2104      	movs	r1, #4
 801f984:	f361 0302 	bfi	r3, r1, #0, #3
 801f988:	f882 3020 	strb.w	r3, [r2, #32]
 801f98c:	4aab      	ldr	r2, [pc, #684]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f98e:	f892 3020 	ldrb.w	r3, [r2, #32]
 801f992:	f36f 03c7 	bfc	r3, #3, #5
 801f996:	f882 3020 	strb.w	r3, [r2, #32]
 801f99a:	4aa8      	ldr	r2, [pc, #672]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f99c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f9a0:	f36f 0304 	bfc	r3, #0, #5
 801f9a4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801f9a8:	4aa4      	ldr	r2, [pc, #656]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f9aa:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801f9ae:	f36f 1347 	bfc	r3, #5, #3
 801f9b2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  steps_Style.text.font = &lv_font_roboto_22;
 801f9b6:	4ba1      	ldr	r3, [pc, #644]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801f9b8:	4aa1      	ldr	r2, [pc, #644]	; (801fc40 <tos_AnalogueType_Init+0x660>)
 801f9ba:	625a      	str	r2, [r3, #36]	; 0x24

       			   		  lv_style_copy(&description_Style, &lv_style_plain);
 801f9bc:	499e      	ldr	r1, [pc, #632]	; (801fc38 <tos_AnalogueType_Init+0x658>)
 801f9be:	48a1      	ldr	r0, [pc, #644]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801f9c0:	f7e8 fed0 	bl	8008764 <lv_style_copy>
       			   		  description_Style.text.font = &lv_font_unscii_8;
 801f9c4:	4b9f      	ldr	r3, [pc, #636]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801f9c6:	4aa0      	ldr	r2, [pc, #640]	; (801fc48 <tos_AnalogueType_Init+0x668>)
 801f9c8:	625a      	str	r2, [r3, #36]	; 0x24
       			   		  description_Style.text.color = LV_COLOR_GRAY;
 801f9ca:	4a9e      	ldr	r2, [pc, #632]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801f9cc:	4b9f      	ldr	r3, [pc, #636]	; (801fc4c <tos_AnalogueType_Init+0x66c>)
 801f9ce:	881b      	ldrh	r3, [r3, #0]
 801f9d0:	8413      	strh	r3, [r2, #32]
       			   		    if(theme){
 801f9d2:	79fb      	ldrb	r3, [r7, #7]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d003      	beq.n	801f9e0 <tos_AnalogueType_Init+0x400>
       			   		    	description_Style.text.color = LV_COLOR_WHITE;
 801f9d8:	4a9a      	ldr	r2, [pc, #616]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801f9da:	4b9d      	ldr	r3, [pc, #628]	; (801fc50 <tos_AnalogueType_Init+0x670>)
 801f9dc:	881b      	ldrh	r3, [r3, #0]
 801f9de:	8413      	strh	r3, [r2, #32]
       			   		    }

       			   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 801f9e0:	f7ff fd37 	bl	801f452 <lv_scr_act>
 801f9e4:	4603      	mov	r3, r0
 801f9e6:	2100      	movs	r1, #0
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	f7f9 fd8f 	bl	801950c <lv_label_create>
 801f9ee:	4602      	mov	r2, r0
 801f9f0:	4b98      	ldr	r3, [pc, #608]	; (801fc54 <tos_AnalogueType_Init+0x674>)
 801f9f2:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(stepsLbl, 150);
 801f9f4:	4b97      	ldr	r3, [pc, #604]	; (801fc54 <tos_AnalogueType_Init+0x674>)
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	2196      	movs	r1, #150	; 0x96
 801f9fa:	4618      	mov	r0, r3
 801f9fc:	f7e6 fc44 	bl	8006288 <lv_obj_set_width>
       			   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 801fa00:	4b94      	ldr	r3, [pc, #592]	; (801fc54 <tos_AnalogueType_Init+0x674>)
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	4a8d      	ldr	r2, [pc, #564]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801fa06:	2100      	movs	r1, #0
 801fa08:	4618      	mov	r0, r3
 801fa0a:	f7ff fd2d 	bl	801f468 <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", steps);
 801fa0e:	4b92      	ldr	r3, [pc, #584]	; (801fc58 <tos_AnalogueType_Init+0x678>)
 801fa10:	881b      	ldrh	r3, [r3, #0]
 801fa12:	4a92      	ldr	r2, [pc, #584]	; (801fc5c <tos_AnalogueType_Init+0x67c>)
 801fa14:	2108      	movs	r1, #8
 801fa16:	4892      	ldr	r0, [pc, #584]	; (801fc60 <tos_AnalogueType_Init+0x680>)
 801fa18:	f008 f92c 	bl	8027c74 <sniprintf>
       			   		 lv_label_set_text(stepsLbl, buffer);
 801fa1c:	4b8d      	ldr	r3, [pc, #564]	; (801fc54 <tos_AnalogueType_Init+0x674>)
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	498f      	ldr	r1, [pc, #572]	; (801fc60 <tos_AnalogueType_Init+0x680>)
 801fa22:	4618      	mov	r0, r3
 801fa24:	f7f9 fea4 	bl	8019770 <lv_label_set_text>
       			   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 801fa28:	4b8a      	ldr	r3, [pc, #552]	; (801fc54 <tos_AnalogueType_Init+0x674>)
 801fa2a:	6818      	ldr	r0, [r3, #0]
 801fa2c:	2328      	movs	r3, #40	; 0x28
 801fa2e:	9300      	str	r3, [sp, #0]
 801fa30:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801fa34:	2200      	movs	r2, #0
 801fa36:	2100      	movs	r1, #0
 801fa38:	f7e6 fc50 	bl	80062dc <lv_obj_align>

       			         stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 801fa3c:	f7ff fd09 	bl	801f452 <lv_scr_act>
 801fa40:	4603      	mov	r3, r0
 801fa42:	2100      	movs	r1, #0
 801fa44:	4618      	mov	r0, r3
 801fa46:	f7f9 fd61 	bl	801950c <lv_label_create>
 801fa4a:	4602      	mov	r2, r0
 801fa4c:	4b85      	ldr	r3, [pc, #532]	; (801fc64 <tos_AnalogueType_Init+0x684>)
 801fa4e:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 801fa50:	4b84      	ldr	r3, [pc, #528]	; (801fc64 <tos_AnalogueType_Init+0x684>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	4a7b      	ldr	r2, [pc, #492]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801fa56:	2100      	movs	r1, #0
 801fa58:	4618      	mov	r0, r3
 801fa5a:	f7ff fd05 	bl	801f468 <lv_label_set_style>
       			   		 lv_label_set_text(stepsDescLbl, "steps");
 801fa5e:	4b81      	ldr	r3, [pc, #516]	; (801fc64 <tos_AnalogueType_Init+0x684>)
 801fa60:	681b      	ldr	r3, [r3, #0]
 801fa62:	4981      	ldr	r1, [pc, #516]	; (801fc68 <tos_AnalogueType_Init+0x688>)
 801fa64:	4618      	mov	r0, r3
 801fa66:	f7f9 fe83 	bl	8019770 <lv_label_set_text>
       			   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -40, 55);
 801fa6a:	4b7e      	ldr	r3, [pc, #504]	; (801fc64 <tos_AnalogueType_Init+0x684>)
 801fa6c:	6818      	ldr	r0, [r3, #0]
 801fa6e:	2337      	movs	r3, #55	; 0x37
 801fa70:	9300      	str	r3, [sp, #0]
 801fa72:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801fa76:	2200      	movs	r2, #0
 801fa78:	2100      	movs	r1, #0
 801fa7a:	f7e6 fc2f 	bl	80062dc <lv_obj_align>

       			   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 801fa7e:	f7ff fce8 	bl	801f452 <lv_scr_act>
 801fa82:	4603      	mov	r3, r0
 801fa84:	2100      	movs	r1, #0
 801fa86:	4618      	mov	r0, r3
 801fa88:	f7f4 ff3e 	bl	8014908 <lv_arc_create>
 801fa8c:	4602      	mov	r2, r0
 801fa8e:	4b77      	ldr	r3, [pc, #476]	; (801fc6c <tos_AnalogueType_Init+0x68c>)
 801fa90:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(stepsArc, 65, 65);
 801fa92:	4b76      	ldr	r3, [pc, #472]	; (801fc6c <tos_AnalogueType_Init+0x68c>)
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	2241      	movs	r2, #65	; 0x41
 801fa98:	2141      	movs	r1, #65	; 0x41
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	f7e6 fb7b 	bl	8006196 <lv_obj_set_size>
       			   		  lv_arc_set_angles(stepsArc, 0, 360);
 801faa0:	4b72      	ldr	r3, [pc, #456]	; (801fc6c <tos_AnalogueType_Init+0x68c>)
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801faa8:	2100      	movs	r1, #0
 801faaa:	4618      	mov	r0, r3
 801faac:	f7f4 ffa8 	bl	8014a00 <lv_arc_set_angles>
       			   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 801fab0:	4b6e      	ldr	r3, [pc, #440]	; (801fc6c <tos_AnalogueType_Init+0x68c>)
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	4a61      	ldr	r2, [pc, #388]	; (801fc3c <tos_AnalogueType_Init+0x65c>)
 801fab6:	2100      	movs	r1, #0
 801fab8:	4618      	mov	r0, r3
 801faba:	f7f4 ffca 	bl	8014a52 <lv_arc_set_style>
       			   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -40, 40);
 801fabe:	4b6b      	ldr	r3, [pc, #428]	; (801fc6c <tos_AnalogueType_Init+0x68c>)
 801fac0:	6818      	ldr	r0, [r3, #0]
 801fac2:	2328      	movs	r3, #40	; 0x28
 801fac4:	9300      	str	r3, [sp, #0]
 801fac6:	f06f 0327 	mvn.w	r3, #39	; 0x27
 801faca:	2200      	movs	r2, #0
 801facc:	2100      	movs	r1, #0
 801face:	f7e6 fc05 	bl	80062dc <lv_obj_align>

       			   		  //Kcal
       			   	static lv_style_t kCals_Style;
       			   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 801fad2:	4959      	ldr	r1, [pc, #356]	; (801fc38 <tos_AnalogueType_Init+0x658>)
 801fad4:	4866      	ldr	r0, [pc, #408]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fad6:	f7e8 fe45 	bl	8008764 <lv_style_copy>
       			   		  kCals_Style.line.color = LV_COLOR_RED;
 801fada:	4a65      	ldr	r2, [pc, #404]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fadc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801fae0:	f36f 0302 	bfc	r3, #0, #3
 801fae4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801fae8:	4a61      	ldr	r2, [pc, #388]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801faea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801faee:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801faf2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 801faf6:	4a5e      	ldr	r2, [pc, #376]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801faf8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801fafc:	f36f 0304 	bfc	r3, #0, #5
 801fb00:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 801fb04:	4a5a      	ldr	r2, [pc, #360]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb06:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 801fb0a:	f36f 1347 	bfc	r3, #5, #3
 801fb0e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
       			   		  kCals_Style.line.width = 3;
 801fb12:	4b57      	ldr	r3, [pc, #348]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb14:	2203      	movs	r2, #3
 801fb16:	86da      	strh	r2, [r3, #54]	; 0x36
       			   		  kCals_Style.text.color = LV_COLOR_RED;
 801fb18:	4a55      	ldr	r2, [pc, #340]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb1a:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fb1e:	f36f 0302 	bfc	r3, #0, #3
 801fb22:	f882 3020 	strb.w	r3, [r2, #32]
 801fb26:	4a52      	ldr	r2, [pc, #328]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb28:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fb2c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 801fb30:	f882 3020 	strb.w	r3, [r2, #32]
 801fb34:	4a4e      	ldr	r2, [pc, #312]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb36:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fb3a:	f36f 0304 	bfc	r3, #0, #5
 801fb3e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801fb42:	4a4b      	ldr	r2, [pc, #300]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb44:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fb48:	f36f 1347 	bfc	r3, #5, #3
 801fb4c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
       			   		  kCals_Style.text.font = &lv_font_roboto_22;
 801fb50:	4b47      	ldr	r3, [pc, #284]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb52:	4a3b      	ldr	r2, [pc, #236]	; (801fc40 <tos_AnalogueType_Init+0x660>)
 801fb54:	625a      	str	r2, [r3, #36]	; 0x24

       			   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 801fb56:	f7ff fc7c 	bl	801f452 <lv_scr_act>
 801fb5a:	4603      	mov	r3, r0
 801fb5c:	2100      	movs	r1, #0
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f7f9 fcd4 	bl	801950c <lv_label_create>
 801fb64:	4602      	mov	r2, r0
 801fb66:	4b43      	ldr	r3, [pc, #268]	; (801fc74 <tos_AnalogueType_Init+0x694>)
 801fb68:	601a      	str	r2, [r3, #0]
       			   		 lv_obj_set_width(kCalsLbl, 150);
 801fb6a:	4b42      	ldr	r3, [pc, #264]	; (801fc74 <tos_AnalogueType_Init+0x694>)
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	2196      	movs	r1, #150	; 0x96
 801fb70:	4618      	mov	r0, r3
 801fb72:	f7e6 fb89 	bl	8006288 <lv_obj_set_width>
       			   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 801fb76:	4b3f      	ldr	r3, [pc, #252]	; (801fc74 <tos_AnalogueType_Init+0x694>)
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	4a3d      	ldr	r2, [pc, #244]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fb7c:	2100      	movs	r1, #0
 801fb7e:	4618      	mov	r0, r3
 801fb80:	f7ff fc72 	bl	801f468 <lv_label_set_style>
       			   		 snprintf(buffer, 8, "%04d", kCals);
 801fb84:	4b3c      	ldr	r3, [pc, #240]	; (801fc78 <tos_AnalogueType_Init+0x698>)
 801fb86:	881b      	ldrh	r3, [r3, #0]
 801fb88:	4a34      	ldr	r2, [pc, #208]	; (801fc5c <tos_AnalogueType_Init+0x67c>)
 801fb8a:	2108      	movs	r1, #8
 801fb8c:	4834      	ldr	r0, [pc, #208]	; (801fc60 <tos_AnalogueType_Init+0x680>)
 801fb8e:	f008 f871 	bl	8027c74 <sniprintf>
       			   		 lv_label_set_text(kCalsLbl, buffer);
 801fb92:	4b38      	ldr	r3, [pc, #224]	; (801fc74 <tos_AnalogueType_Init+0x694>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	4932      	ldr	r1, [pc, #200]	; (801fc60 <tos_AnalogueType_Init+0x680>)
 801fb98:	4618      	mov	r0, r3
 801fb9a:	f7f9 fde9 	bl	8019770 <lv_label_set_text>
       			   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 801fb9e:	4b35      	ldr	r3, [pc, #212]	; (801fc74 <tos_AnalogueType_Init+0x694>)
 801fba0:	6818      	ldr	r0, [r3, #0]
 801fba2:	2328      	movs	r3, #40	; 0x28
 801fba4:	9300      	str	r3, [sp, #0]
 801fba6:	2328      	movs	r3, #40	; 0x28
 801fba8:	2200      	movs	r2, #0
 801fbaa:	2100      	movs	r1, #0
 801fbac:	f7e6 fb96 	bl	80062dc <lv_obj_align>

       			   		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 801fbb0:	f7ff fc4f 	bl	801f452 <lv_scr_act>
 801fbb4:	4603      	mov	r3, r0
 801fbb6:	2100      	movs	r1, #0
 801fbb8:	4618      	mov	r0, r3
 801fbba:	f7f9 fca7 	bl	801950c <lv_label_create>
 801fbbe:	4602      	mov	r2, r0
 801fbc0:	4b2e      	ldr	r3, [pc, #184]	; (801fc7c <tos_AnalogueType_Init+0x69c>)
 801fbc2:	601a      	str	r2, [r3, #0]
       			   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 801fbc4:	4b2d      	ldr	r3, [pc, #180]	; (801fc7c <tos_AnalogueType_Init+0x69c>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	4a1e      	ldr	r2, [pc, #120]	; (801fc44 <tos_AnalogueType_Init+0x664>)
 801fbca:	2100      	movs	r1, #0
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f7ff fc4b 	bl	801f468 <lv_label_set_style>
       			   		 lv_label_set_text(kCalsDescLbl, "kCals");
 801fbd2:	4b2a      	ldr	r3, [pc, #168]	; (801fc7c <tos_AnalogueType_Init+0x69c>)
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	492a      	ldr	r1, [pc, #168]	; (801fc80 <tos_AnalogueType_Init+0x6a0>)
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7f9 fdc9 	bl	8019770 <lv_label_set_text>
       			   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 40, 55);
 801fbde:	4b27      	ldr	r3, [pc, #156]	; (801fc7c <tos_AnalogueType_Init+0x69c>)
 801fbe0:	6818      	ldr	r0, [r3, #0]
 801fbe2:	2337      	movs	r3, #55	; 0x37
 801fbe4:	9300      	str	r3, [sp, #0]
 801fbe6:	2328      	movs	r3, #40	; 0x28
 801fbe8:	2200      	movs	r2, #0
 801fbea:	2100      	movs	r1, #0
 801fbec:	f7e6 fb76 	bl	80062dc <lv_obj_align>

       			   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 801fbf0:	f7ff fc2f 	bl	801f452 <lv_scr_act>
 801fbf4:	4603      	mov	r3, r0
 801fbf6:	2100      	movs	r1, #0
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	f7f4 fe85 	bl	8014908 <lv_arc_create>
 801fbfe:	4602      	mov	r2, r0
 801fc00:	4b20      	ldr	r3, [pc, #128]	; (801fc84 <tos_AnalogueType_Init+0x6a4>)
 801fc02:	601a      	str	r2, [r3, #0]
       			   		  lv_obj_set_size(kCalsArc, 65, 65);
 801fc04:	4b1f      	ldr	r3, [pc, #124]	; (801fc84 <tos_AnalogueType_Init+0x6a4>)
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	2241      	movs	r2, #65	; 0x41
 801fc0a:	2141      	movs	r1, #65	; 0x41
 801fc0c:	4618      	mov	r0, r3
 801fc0e:	f7e6 fac2 	bl	8006196 <lv_obj_set_size>
       			   		  lv_arc_set_angles(kCalsArc, 0, 360);
 801fc12:	4b1c      	ldr	r3, [pc, #112]	; (801fc84 <tos_AnalogueType_Init+0x6a4>)
 801fc14:	681b      	ldr	r3, [r3, #0]
 801fc16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801fc1a:	2100      	movs	r1, #0
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	f7f4 feef 	bl	8014a00 <lv_arc_set_angles>
       			   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 801fc22:	4b18      	ldr	r3, [pc, #96]	; (801fc84 <tos_AnalogueType_Init+0x6a4>)
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	4a12      	ldr	r2, [pc, #72]	; (801fc70 <tos_AnalogueType_Init+0x690>)
 801fc28:	2100      	movs	r1, #0
 801fc2a:	4618      	mov	r0, r3
 801fc2c:	f7f4 ff11 	bl	8014a52 <lv_arc_set_style>
       			   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 40, 40);
 801fc30:	4b14      	ldr	r3, [pc, #80]	; (801fc84 <tos_AnalogueType_Init+0x6a4>)
 801fc32:	6818      	ldr	r0, [r3, #0]
 801fc34:	e028      	b.n	801fc88 <tos_AnalogueType_Init+0x6a8>
 801fc36:	bf00      	nop
 801fc38:	20006c74 	.word	0x20006c74
 801fc3c:	20005b5c 	.word	0x20005b5c
 801fc40:	200017c0 	.word	0x200017c0
 801fc44:	20005b98 	.word	0x20005b98
 801fc48:	200026cc 	.word	0x200026cc
 801fc4c:	08029e18 	.word	0x08029e18
 801fc50:	08029dd8 	.word	0x08029dd8
 801fc54:	20006e94 	.word	0x20006e94
 801fc58:	20006e70 	.word	0x20006e70
 801fc5c:	08029de4 	.word	0x08029de4
 801fc60:	20006e80 	.word	0x20006e80
 801fc64:	20006e28 	.word	0x20006e28
 801fc68:	08029dec 	.word	0x08029dec
 801fc6c:	20006e78 	.word	0x20006e78
 801fc70:	20005bd4 	.word	0x20005bd4
 801fc74:	20006ef0 	.word	0x20006ef0
 801fc78:	20006e16 	.word	0x20006e16
 801fc7c:	20006edc 	.word	0x20006edc
 801fc80:	08029df4 	.word	0x08029df4
 801fc84:	20006ef8 	.word	0x20006ef8
 801fc88:	2328      	movs	r3, #40	; 0x28
 801fc8a:	9300      	str	r3, [sp, #0]
 801fc8c:	2328      	movs	r3, #40	; 0x28
 801fc8e:	2200      	movs	r2, #0
 801fc90:	2100      	movs	r1, #0
 801fc92:	f7e6 fb23 	bl	80062dc <lv_obj_align>

       			       //Digital Date
       			   		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 801fc96:	f7ff fbdc 	bl	801f452 <lv_scr_act>
 801fc9a:	4603      	mov	r3, r0
 801fc9c:	2100      	movs	r1, #0
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f7f9 fc34 	bl	801950c <lv_label_create>
 801fca4:	4602      	mov	r2, r0
 801fca6:	4b2b      	ldr	r3, [pc, #172]	; (801fd54 <tos_AnalogueType_Init+0x774>)
 801fca8:	601a      	str	r2, [r3, #0]
       			   		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 801fcaa:	4b2a      	ldr	r3, [pc, #168]	; (801fd54 <tos_AnalogueType_Init+0x774>)
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	4a2a      	ldr	r2, [pc, #168]	; (801fd58 <tos_AnalogueType_Init+0x778>)
 801fcb0:	2100      	movs	r1, #0
 801fcb2:	4618      	mov	r0, r3
 801fcb4:	f7ff fbd8 	bl	801f468 <lv_label_set_style>
       			     	    snprintf(buffer, 9, "%02d:%02d:%04d", date,month,year);
 801fcb8:	4b28      	ldr	r3, [pc, #160]	; (801fd5c <tos_AnalogueType_Init+0x77c>)
 801fcba:	781b      	ldrb	r3, [r3, #0]
 801fcbc:	4619      	mov	r1, r3
 801fcbe:	4b28      	ldr	r3, [pc, #160]	; (801fd60 <tos_AnalogueType_Init+0x780>)
 801fcc0:	781b      	ldrb	r3, [r3, #0]
 801fcc2:	461a      	mov	r2, r3
 801fcc4:	4b27      	ldr	r3, [pc, #156]	; (801fd64 <tos_AnalogueType_Init+0x784>)
 801fcc6:	881b      	ldrh	r3, [r3, #0]
 801fcc8:	9301      	str	r3, [sp, #4]
 801fcca:	9200      	str	r2, [sp, #0]
 801fccc:	460b      	mov	r3, r1
 801fcce:	4a26      	ldr	r2, [pc, #152]	; (801fd68 <tos_AnalogueType_Init+0x788>)
 801fcd0:	2109      	movs	r1, #9
 801fcd2:	4826      	ldr	r0, [pc, #152]	; (801fd6c <tos_AnalogueType_Init+0x78c>)
 801fcd4:	f007 ffce 	bl	8027c74 <sniprintf>
       			 		    lv_label_set_text(digitalDate, buffer);
 801fcd8:	4b1e      	ldr	r3, [pc, #120]	; (801fd54 <tos_AnalogueType_Init+0x774>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	4923      	ldr	r1, [pc, #140]	; (801fd6c <tos_AnalogueType_Init+0x78c>)
 801fcde:	4618      	mov	r0, r3
 801fce0:	f7f9 fd46 	bl	8019770 <lv_label_set_text>
       			   		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 801fce4:	4b1b      	ldr	r3, [pc, #108]	; (801fd54 <tos_AnalogueType_Init+0x774>)
 801fce6:	6818      	ldr	r0, [r3, #0]
 801fce8:	f06f 0322 	mvn.w	r3, #34	; 0x22
 801fcec:	9300      	str	r3, [sp, #0]
 801fcee:	2300      	movs	r3, #0
 801fcf0:	2200      	movs	r2, #0
 801fcf2:	2100      	movs	r1, #0
 801fcf4:	f7e6 faf2 	bl	80062dc <lv_obj_align>

       			   		    //Week Day
       			   		    weekDay = lv_label_create(lv_scr_act(), NULL);
 801fcf8:	f7ff fbab 	bl	801f452 <lv_scr_act>
 801fcfc:	4603      	mov	r3, r0
 801fcfe:	2100      	movs	r1, #0
 801fd00:	4618      	mov	r0, r3
 801fd02:	f7f9 fc03 	bl	801950c <lv_label_create>
 801fd06:	4602      	mov	r2, r0
 801fd08:	4b19      	ldr	r3, [pc, #100]	; (801fd70 <tos_AnalogueType_Init+0x790>)
 801fd0a:	601a      	str	r2, [r3, #0]
       			   		    lv_obj_set_width(weekDay, 150);
 801fd0c:	4b18      	ldr	r3, [pc, #96]	; (801fd70 <tos_AnalogueType_Init+0x790>)
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	2196      	movs	r1, #150	; 0x96
 801fd12:	4618      	mov	r0, r3
 801fd14:	f7e6 fab8 	bl	8006288 <lv_obj_set_width>
       			   		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 801fd18:	4b15      	ldr	r3, [pc, #84]	; (801fd70 <tos_AnalogueType_Init+0x790>)
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	4a15      	ldr	r2, [pc, #84]	; (801fd74 <tos_AnalogueType_Init+0x794>)
 801fd1e:	2100      	movs	r1, #0
 801fd20:	4618      	mov	r0, r3
 801fd22:	f7ff fba1 	bl	801f468 <lv_label_set_style>
       			   		    lv_label_set_text(weekDay,weekDayStr);
 801fd26:	4b12      	ldr	r3, [pc, #72]	; (801fd70 <tos_AnalogueType_Init+0x790>)
 801fd28:	681a      	ldr	r2, [r3, #0]
 801fd2a:	4b13      	ldr	r3, [pc, #76]	; (801fd78 <tos_AnalogueType_Init+0x798>)
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	4619      	mov	r1, r3
 801fd30:	4610      	mov	r0, r2
 801fd32:	f7f9 fd1d 	bl	8019770 <lv_label_set_text>
       			   		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 801fd36:	4b0e      	ldr	r3, [pc, #56]	; (801fd70 <tos_AnalogueType_Init+0x790>)
 801fd38:	6818      	ldr	r0, [r3, #0]
 801fd3a:	f06f 0309 	mvn.w	r3, #9
 801fd3e:	9300      	str	r3, [sp, #0]
 801fd40:	2300      	movs	r3, #0
 801fd42:	2200      	movs	r2, #0
 801fd44:	2100      	movs	r1, #0
 801fd46:	f7e6 fac9 	bl	80062dc <lv_obj_align>
}
 801fd4a:	bf00      	nop
 801fd4c:	3708      	adds	r7, #8
 801fd4e:	46bd      	mov	sp, r7
 801fd50:	bd80      	pop	{r7, pc}
 801fd52:	bf00      	nop
 801fd54:	20006e18 	.word	0x20006e18
 801fd58:	200059f4 	.word	0x200059f4
 801fd5c:	200073c4 	.word	0x200073c4
 801fd60:	20006e24 	.word	0x20006e24
 801fd64:	20006ee6 	.word	0x20006ee6
 801fd68:	08029dfc 	.word	0x08029dfc
 801fd6c:	20006e80 	.word	0x20006e80
 801fd70:	20006e10 	.word	0x20006e10
 801fd74:	20005a30 	.word	0x20005a30
 801fd78:	20006e74 	.word	0x20006e74

0801fd7c <tos_DigitalType_Init>:
void dType1_Clock_Init(bool theme);
void dType2_Clock_Init(bool theme);

/*
*/
void tos_DigitalType_Init(uint8_t clockType,bool theme) {
 801fd7c:	b580      	push	{r7, lr}
 801fd7e:	b084      	sub	sp, #16
 801fd80:	af02      	add	r7, sp, #8
 801fd82:	4603      	mov	r3, r0
 801fd84:	460a      	mov	r2, r1
 801fd86:	71fb      	strb	r3, [r7, #7]
 801fd88:	4613      	mov	r3, r2
 801fd8a:	71bb      	strb	r3, [r7, #6]
	switch(clockType){
 801fd8c:	79fb      	ldrb	r3, [r7, #7]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d002      	beq.n	801fd98 <tos_DigitalType_Init+0x1c>
 801fd92:	2b01      	cmp	r3, #1
 801fd94:	d005      	beq.n	801fda2 <tos_DigitalType_Init+0x26>
 801fd96:	e009      	b.n	801fdac <tos_DigitalType_Init+0x30>
	case 0: dType1_Clock_Init(theme); break;
 801fd98:	79bb      	ldrb	r3, [r7, #6]
 801fd9a:	4618      	mov	r0, r3
 801fd9c:	f000 f886 	bl	801feac <dType1_Clock_Init>
 801fda0:	e004      	b.n	801fdac <tos_DigitalType_Init+0x30>
	case 1: dType2_Clock_Init(theme); break;
 801fda2:	79bb      	ldrb	r3, [r7, #6]
 801fda4:	4618      	mov	r0, r3
 801fda6:	f000 fbb1 	bl	802050c <dType2_Clock_Init>
 801fdaa:	bf00      	nop
	}
	//Battery
	batteryLbl= lv_label_create(lv_scr_act(), NULL);
 801fdac:	f7ff fb51 	bl	801f452 <lv_scr_act>
 801fdb0:	4603      	mov	r3, r0
 801fdb2:	2100      	movs	r1, #0
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	f7f9 fba9 	bl	801950c <lv_label_create>
 801fdba:	4602      	mov	r2, r0
 801fdbc:	4b33      	ldr	r3, [pc, #204]	; (801fe8c <tos_DigitalType_Init+0x110>)
 801fdbe:	601a      	str	r2, [r3, #0]
	lv_style_copy(&battery_style, &lv_style_plain);
 801fdc0:	4933      	ldr	r1, [pc, #204]	; (801fe90 <tos_DigitalType_Init+0x114>)
 801fdc2:	4834      	ldr	r0, [pc, #208]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fdc4:	f7e8 fcce 	bl	8008764 <lv_style_copy>
	battery_style.text.color = LV_COLOR_GREEN;
 801fdc8:	4a32      	ldr	r2, [pc, #200]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fdca:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fdce:	2104      	movs	r1, #4
 801fdd0:	f361 0302 	bfi	r3, r1, #0, #3
 801fdd4:	f882 3020 	strb.w	r3, [r2, #32]
 801fdd8:	4a2e      	ldr	r2, [pc, #184]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fdda:	f892 3020 	ldrb.w	r3, [r2, #32]
 801fdde:	f36f 03c7 	bfc	r3, #3, #5
 801fde2:	f882 3020 	strb.w	r3, [r2, #32]
 801fde6:	4a2b      	ldr	r2, [pc, #172]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fde8:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fdec:	f36f 0304 	bfc	r3, #0, #5
 801fdf0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 801fdf4:	4a27      	ldr	r2, [pc, #156]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fdf6:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 801fdfa:	f36f 1347 	bfc	r3, #5, #3
 801fdfe:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(batteryLbl, LV_LABEL_STYLE_MAIN, &battery_style);
 801fe02:	4b22      	ldr	r3, [pc, #136]	; (801fe8c <tos_DigitalType_Init+0x110>)
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	4a23      	ldr	r2, [pc, #140]	; (801fe94 <tos_DigitalType_Init+0x118>)
 801fe08:	2100      	movs	r1, #0
 801fe0a:	4618      	mov	r0, r3
 801fe0c:	f7ff fb2c 	bl	801f468 <lv_label_set_style>
	lv_label_set_text(batteryLbl, LV_SYMBOL_BATTERY_FULL);
 801fe10:	4b1e      	ldr	r3, [pc, #120]	; (801fe8c <tos_DigitalType_Init+0x110>)
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	4920      	ldr	r1, [pc, #128]	; (801fe98 <tos_DigitalType_Init+0x11c>)
 801fe16:	4618      	mov	r0, r3
 801fe18:	f7f9 fcaa 	bl	8019770 <lv_label_set_text>
	lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 801fe1c:	4b1b      	ldr	r3, [pc, #108]	; (801fe8c <tos_DigitalType_Init+0x110>)
 801fe1e:	6818      	ldr	r0, [r3, #0]
 801fe20:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe24:	9300      	str	r3, [sp, #0]
 801fe26:	2364      	movs	r3, #100	; 0x64
 801fe28:	2200      	movs	r2, #0
 801fe2a:	2100      	movs	r1, #0
 801fe2c:	f7e6 fa56 	bl	80062dc <lv_obj_align>

	//Bluetooth
	bluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 801fe30:	f7ff fb0f 	bl	801f452 <lv_scr_act>
 801fe34:	4603      	mov	r3, r0
 801fe36:	2100      	movs	r1, #0
 801fe38:	4618      	mov	r0, r3
 801fe3a:	f7f9 fb67 	bl	801950c <lv_label_create>
 801fe3e:	4602      	mov	r2, r0
 801fe40:	4b16      	ldr	r3, [pc, #88]	; (801fe9c <tos_DigitalType_Init+0x120>)
 801fe42:	601a      	str	r2, [r3, #0]
    lv_style_copy(&bluetooth_style, &lv_style_plain);
 801fe44:	4912      	ldr	r1, [pc, #72]	; (801fe90 <tos_DigitalType_Init+0x114>)
 801fe46:	4816      	ldr	r0, [pc, #88]	; (801fea0 <tos_DigitalType_Init+0x124>)
 801fe48:	f7e8 fc8c 	bl	8008764 <lv_style_copy>
	bluetooth_style.text.color = LV_COLOR_WHITE;
 801fe4c:	4a14      	ldr	r2, [pc, #80]	; (801fea0 <tos_DigitalType_Init+0x124>)
 801fe4e:	4b15      	ldr	r3, [pc, #84]	; (801fea4 <tos_DigitalType_Init+0x128>)
 801fe50:	881b      	ldrh	r3, [r3, #0]
 801fe52:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &bluetooth_style);
 801fe54:	4b11      	ldr	r3, [pc, #68]	; (801fe9c <tos_DigitalType_Init+0x120>)
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	4a11      	ldr	r2, [pc, #68]	; (801fea0 <tos_DigitalType_Init+0x124>)
 801fe5a:	2100      	movs	r1, #0
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	f7ff fb03 	bl	801f468 <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 801fe62:	4b0e      	ldr	r3, [pc, #56]	; (801fe9c <tos_DigitalType_Init+0x120>)
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	4910      	ldr	r1, [pc, #64]	; (801fea8 <tos_DigitalType_Init+0x12c>)
 801fe68:	4618      	mov	r0, r3
 801fe6a:	f7f9 fc81 	bl	8019770 <lv_label_set_text>
	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 801fe6e:	4b0b      	ldr	r3, [pc, #44]	; (801fe9c <tos_DigitalType_Init+0x120>)
 801fe70:	6818      	ldr	r0, [r3, #0]
 801fe72:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe76:	9300      	str	r3, [sp, #0]
 801fe78:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801fe7c:	2200      	movs	r2, #0
 801fe7e:	2100      	movs	r1, #0
 801fe80:	f7e6 fa2c 	bl	80062dc <lv_obj_align>
}
 801fe84:	bf00      	nop
 801fe86:	3708      	adds	r7, #8
 801fe88:	46bd      	mov	sp, r7
 801fe8a:	bd80      	pop	{r7, pc}
 801fe8c:	20006ee0 	.word	0x20006ee0
 801fe90:	20006c74 	.word	0x20006c74
 801fe94:	20006e98 	.word	0x20006e98
 801fe98:	08029ddc 	.word	0x08029ddc
 801fe9c:	20006e7c 	.word	0x20006e7c
 801fea0:	20006e30 	.word	0x20006e30
 801fea4:	08029dd8 	.word	0x08029dd8
 801fea8:	08029de0 	.word	0x08029de0

0801feac <dType1_Clock_Init>:



/*Analogue and digital Type*/
void dType1_Clock_Init(bool theme) {
 801feac:	b580      	push	{r7, lr}
 801feae:	b084      	sub	sp, #16
 801feb0:	af02      	add	r7, sp, #8
 801feb2:	4603      	mov	r3, r0
 801feb4:	71fb      	strb	r3, [r7, #7]

	  //Digital Clock
	static lv_style_t dClock_style,dDate_style;
		lv_style_copy(&dClock_style, &lv_style_plain);
 801feb6:	49bd      	ldr	r1, [pc, #756]	; (80201ac <dType1_Clock_Init+0x300>)
 801feb8:	48bd      	ldr	r0, [pc, #756]	; (80201b0 <dType1_Clock_Init+0x304>)
 801feba:	f7e8 fc53 	bl	8008764 <lv_style_copy>
	    dClock_style.text.font =&lv_font_roboto_22;
 801febe:	4bbc      	ldr	r3, [pc, #752]	; (80201b0 <dType1_Clock_Init+0x304>)
 801fec0:	4abc      	ldr	r2, [pc, #752]	; (80201b4 <dType1_Clock_Init+0x308>)
 801fec2:	625a      	str	r2, [r3, #36]	; 0x24
	    lv_style_copy(&dDate_style, &lv_style_plain);
 801fec4:	49b9      	ldr	r1, [pc, #740]	; (80201ac <dType1_Clock_Init+0x300>)
 801fec6:	48bc      	ldr	r0, [pc, #752]	; (80201b8 <dType1_Clock_Init+0x30c>)
 801fec8:	f7e8 fc4c 	bl	8008764 <lv_style_copy>
	    dDate_style.text.font =&lv_font_roboto_16;
 801fecc:	4bba      	ldr	r3, [pc, #744]	; (80201b8 <dType1_Clock_Init+0x30c>)
 801fece:	4abb      	ldr	r2, [pc, #748]	; (80201bc <dType1_Clock_Init+0x310>)
 801fed0:	625a      	str	r2, [r3, #36]	; 0x24
	    if(theme){
 801fed2:	79fb      	ldrb	r3, [r7, #7]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d007      	beq.n	801fee8 <dType1_Clock_Init+0x3c>
	    	dClock_style.text.color = LV_COLOR_WHITE;
 801fed8:	4ab5      	ldr	r2, [pc, #724]	; (80201b0 <dType1_Clock_Init+0x304>)
 801feda:	4bb9      	ldr	r3, [pc, #740]	; (80201c0 <dType1_Clock_Init+0x314>)
 801fedc:	881b      	ldrh	r3, [r3, #0]
 801fede:	8413      	strh	r3, [r2, #32]
	    	dDate_style.text.color = LV_COLOR_WHITE;
 801fee0:	4ab5      	ldr	r2, [pc, #724]	; (80201b8 <dType1_Clock_Init+0x30c>)
 801fee2:	4bb7      	ldr	r3, [pc, #732]	; (80201c0 <dType1_Clock_Init+0x314>)
 801fee4:	881b      	ldrh	r3, [r3, #0]
 801fee6:	8413      	strh	r3, [r2, #32]
	    }

	    digitalClock = lv_label_create(lv_scr_act(), NULL);
 801fee8:	f7ff fab3 	bl	801f452 <lv_scr_act>
 801feec:	4603      	mov	r3, r0
 801feee:	2100      	movs	r1, #0
 801fef0:	4618      	mov	r0, r3
 801fef2:	f7f9 fb0b 	bl	801950c <lv_label_create>
 801fef6:	4602      	mov	r2, r0
 801fef8:	4bb2      	ldr	r3, [pc, #712]	; (80201c4 <dType1_Clock_Init+0x318>)
 801fefa:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalClock, 150);
 801fefc:	4bb1      	ldr	r3, [pc, #708]	; (80201c4 <dType1_Clock_Init+0x318>)
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	2196      	movs	r1, #150	; 0x96
 801ff02:	4618      	mov	r0, r3
 801ff04:	f7e6 f9c0 	bl	8006288 <lv_obj_set_width>
	    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 801ff08:	4bae      	ldr	r3, [pc, #696]	; (80201c4 <dType1_Clock_Init+0x318>)
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	4aa8      	ldr	r2, [pc, #672]	; (80201b0 <dType1_Clock_Init+0x304>)
 801ff0e:	2100      	movs	r1, #0
 801ff10:	4618      	mov	r0, r3
 801ff12:	f7ff faa9 	bl	801f468 <lv_label_set_style>
	    snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 801ff16:	4bac      	ldr	r3, [pc, #688]	; (80201c8 <dType1_Clock_Init+0x31c>)
 801ff18:	781b      	ldrb	r3, [r3, #0]
 801ff1a:	4619      	mov	r1, r3
 801ff1c:	4bab      	ldr	r3, [pc, #684]	; (80201cc <dType1_Clock_Init+0x320>)
 801ff1e:	781b      	ldrb	r3, [r3, #0]
 801ff20:	461a      	mov	r2, r3
 801ff22:	4bab      	ldr	r3, [pc, #684]	; (80201d0 <dType1_Clock_Init+0x324>)
 801ff24:	781b      	ldrb	r3, [r3, #0]
 801ff26:	9301      	str	r3, [sp, #4]
 801ff28:	9200      	str	r2, [sp, #0]
 801ff2a:	460b      	mov	r3, r1
 801ff2c:	4aa9      	ldr	r2, [pc, #676]	; (80201d4 <dType1_Clock_Init+0x328>)
 801ff2e:	2109      	movs	r1, #9
 801ff30:	48a9      	ldr	r0, [pc, #676]	; (80201d8 <dType1_Clock_Init+0x32c>)
 801ff32:	f007 fe9f 	bl	8027c74 <sniprintf>
	    lv_label_set_text(digitalClock, buffer);
 801ff36:	4ba3      	ldr	r3, [pc, #652]	; (80201c4 <dType1_Clock_Init+0x318>)
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	49a7      	ldr	r1, [pc, #668]	; (80201d8 <dType1_Clock_Init+0x32c>)
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	f7f9 fc17 	bl	8019770 <lv_label_set_text>
	    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 801ff42:	4ba0      	ldr	r3, [pc, #640]	; (80201c4 <dType1_Clock_Init+0x318>)
 801ff44:	6818      	ldr	r0, [r3, #0]
 801ff46:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 801ff4a:	9300      	str	r3, [sp, #0]
 801ff4c:	2300      	movs	r3, #0
 801ff4e:	2200      	movs	r2, #0
 801ff50:	2100      	movs	r1, #0
 801ff52:	f7e6 f9c3 	bl	80062dc <lv_obj_align>

	    //Digital Date
	    digitalDate = lv_label_create(lv_scr_act(), NULL);
 801ff56:	f7ff fa7c 	bl	801f452 <lv_scr_act>
 801ff5a:	4603      	mov	r3, r0
 801ff5c:	2100      	movs	r1, #0
 801ff5e:	4618      	mov	r0, r3
 801ff60:	f7f9 fad4 	bl	801950c <lv_label_create>
 801ff64:	4602      	mov	r2, r0
 801ff66:	4b9d      	ldr	r3, [pc, #628]	; (80201dc <dType1_Clock_Init+0x330>)
 801ff68:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(digitalDate, 150);
 801ff6a:	4b9c      	ldr	r3, [pc, #624]	; (80201dc <dType1_Clock_Init+0x330>)
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	2196      	movs	r1, #150	; 0x96
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7e6 f989 	bl	8006288 <lv_obj_set_width>
	    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 801ff76:	4b99      	ldr	r3, [pc, #612]	; (80201dc <dType1_Clock_Init+0x330>)
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	4a8f      	ldr	r2, [pc, #572]	; (80201b8 <dType1_Clock_Init+0x30c>)
 801ff7c:	2100      	movs	r1, #0
 801ff7e:	4618      	mov	r0, r3
 801ff80:	f7ff fa72 	bl	801f468 <lv_label_set_style>
    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 801ff84:	4b96      	ldr	r3, [pc, #600]	; (80201e0 <dType1_Clock_Init+0x334>)
 801ff86:	781b      	ldrb	r3, [r3, #0]
 801ff88:	4619      	mov	r1, r3
 801ff8a:	4b96      	ldr	r3, [pc, #600]	; (80201e4 <dType1_Clock_Init+0x338>)
 801ff8c:	781b      	ldrb	r3, [r3, #0]
 801ff8e:	461a      	mov	r2, r3
 801ff90:	4b95      	ldr	r3, [pc, #596]	; (80201e8 <dType1_Clock_Init+0x33c>)
 801ff92:	881b      	ldrh	r3, [r3, #0]
 801ff94:	9301      	str	r3, [sp, #4]
 801ff96:	9200      	str	r2, [sp, #0]
 801ff98:	460b      	mov	r3, r1
 801ff9a:	4a94      	ldr	r2, [pc, #592]	; (80201ec <dType1_Clock_Init+0x340>)
 801ff9c:	2110      	movs	r1, #16
 801ff9e:	488e      	ldr	r0, [pc, #568]	; (80201d8 <dType1_Clock_Init+0x32c>)
 801ffa0:	f007 fe68 	bl	8027c74 <sniprintf>
		lv_label_set_text(digitalDate, buffer);
 801ffa4:	4b8d      	ldr	r3, [pc, #564]	; (80201dc <dType1_Clock_Init+0x330>)
 801ffa6:	681b      	ldr	r3, [r3, #0]
 801ffa8:	498b      	ldr	r1, [pc, #556]	; (80201d8 <dType1_Clock_Init+0x32c>)
 801ffaa:	4618      	mov	r0, r3
 801ffac:	f7f9 fbe0 	bl	8019770 <lv_label_set_text>
	    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 801ffb0:	4b8a      	ldr	r3, [pc, #552]	; (80201dc <dType1_Clock_Init+0x330>)
 801ffb2:	6818      	ldr	r0, [r3, #0]
 801ffb4:	f06f 0336 	mvn.w	r3, #54	; 0x36
 801ffb8:	9300      	str	r3, [sp, #0]
 801ffba:	2300      	movs	r3, #0
 801ffbc:	2200      	movs	r2, #0
 801ffbe:	2100      	movs	r1, #0
 801ffc0:	f7e6 f98c 	bl	80062dc <lv_obj_align>

	    //Week Day
	    weekDay = lv_label_create(lv_scr_act(), NULL);
 801ffc4:	f7ff fa45 	bl	801f452 <lv_scr_act>
 801ffc8:	4603      	mov	r3, r0
 801ffca:	2100      	movs	r1, #0
 801ffcc:	4618      	mov	r0, r3
 801ffce:	f7f9 fa9d 	bl	801950c <lv_label_create>
 801ffd2:	4602      	mov	r2, r0
 801ffd4:	4b86      	ldr	r3, [pc, #536]	; (80201f0 <dType1_Clock_Init+0x344>)
 801ffd6:	601a      	str	r2, [r3, #0]
	    lv_obj_set_width(weekDay, 150);
 801ffd8:	4b85      	ldr	r3, [pc, #532]	; (80201f0 <dType1_Clock_Init+0x344>)
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	2196      	movs	r1, #150	; 0x96
 801ffde:	4618      	mov	r0, r3
 801ffe0:	f7e6 f952 	bl	8006288 <lv_obj_set_width>
	    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &dClock_style);
 801ffe4:	4b82      	ldr	r3, [pc, #520]	; (80201f0 <dType1_Clock_Init+0x344>)
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	4a71      	ldr	r2, [pc, #452]	; (80201b0 <dType1_Clock_Init+0x304>)
 801ffea:	2100      	movs	r1, #0
 801ffec:	4618      	mov	r0, r3
 801ffee:	f7ff fa3b 	bl	801f468 <lv_label_set_style>
	    lv_label_set_text(weekDay,weekDayStr);
 801fff2:	4b7f      	ldr	r3, [pc, #508]	; (80201f0 <dType1_Clock_Init+0x344>)
 801fff4:	681a      	ldr	r2, [r3, #0]
 801fff6:	4b7f      	ldr	r3, [pc, #508]	; (80201f4 <dType1_Clock_Init+0x348>)
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	4619      	mov	r1, r3
 801fffc:	4610      	mov	r0, r2
 801fffe:	f7f9 fbb7 	bl	8019770 <lv_label_set_text>
	    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8020002:	4b7b      	ldr	r3, [pc, #492]	; (80201f0 <dType1_Clock_Init+0x344>)
 8020004:	6818      	ldr	r0, [r3, #0]
 8020006:	f06f 0322 	mvn.w	r3, #34	; 0x22
 802000a:	9300      	str	r3, [sp, #0]
 802000c:	2300      	movs	r3, #0
 802000e:	2200      	movs	r2, #0
 8020010:	2100      	movs	r1, #0
 8020012:	f7e6 f963 	bl	80062dc <lv_obj_align>

	  //Analog
	  //Hours
	    static lv_style_t hours_Style;
	  lv_style_copy(&hours_Style, &lv_style_plain);
 8020016:	4965      	ldr	r1, [pc, #404]	; (80201ac <dType1_Clock_Init+0x300>)
 8020018:	4877      	ldr	r0, [pc, #476]	; (80201f8 <dType1_Clock_Init+0x34c>)
 802001a:	f7e8 fba3 	bl	8008764 <lv_style_copy>
	  hours_Style.line.color = LV_COLOR_RED;
 802001e:	4a76      	ldr	r2, [pc, #472]	; (80201f8 <dType1_Clock_Init+0x34c>)
 8020020:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020024:	f36f 0302 	bfc	r3, #0, #3
 8020028:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802002c:	4a72      	ldr	r2, [pc, #456]	; (80201f8 <dType1_Clock_Init+0x34c>)
 802002e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020032:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8020036:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802003a:	4a6f      	ldr	r2, [pc, #444]	; (80201f8 <dType1_Clock_Init+0x34c>)
 802003c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8020040:	f36f 0304 	bfc	r3, #0, #5
 8020044:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8020048:	4a6b      	ldr	r2, [pc, #428]	; (80201f8 <dType1_Clock_Init+0x34c>)
 802004a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802004e:	f36f 1347 	bfc	r3, #5, #3
 8020052:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  hours_Style.line.width = 6;
 8020056:	4b68      	ldr	r3, [pc, #416]	; (80201f8 <dType1_Clock_Init+0x34c>)
 8020058:	2206      	movs	r2, #6
 802005a:	86da      	strh	r2, [r3, #54]	; 0x36

	  hoursArc = lv_arc_create(lv_scr_act(), NULL);
 802005c:	f7ff f9f9 	bl	801f452 <lv_scr_act>
 8020060:	4603      	mov	r3, r0
 8020062:	2100      	movs	r1, #0
 8020064:	4618      	mov	r0, r3
 8020066:	f7f4 fc4f 	bl	8014908 <lv_arc_create>
 802006a:	4602      	mov	r2, r0
 802006c:	4b63      	ldr	r3, [pc, #396]	; (80201fc <dType1_Clock_Init+0x350>)
 802006e:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(hoursArc, 215, 215);
 8020070:	4b62      	ldr	r3, [pc, #392]	; (80201fc <dType1_Clock_Init+0x350>)
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	22d7      	movs	r2, #215	; 0xd7
 8020076:	21d7      	movs	r1, #215	; 0xd7
 8020078:	4618      	mov	r0, r3
 802007a:	f7e6 f88c 	bl	8006196 <lv_obj_set_size>
	  lv_arc_set_angles(hoursArc, 180, 180);
 802007e:	4b5f      	ldr	r3, [pc, #380]	; (80201fc <dType1_Clock_Init+0x350>)
 8020080:	681b      	ldr	r3, [r3, #0]
 8020082:	22b4      	movs	r2, #180	; 0xb4
 8020084:	21b4      	movs	r1, #180	; 0xb4
 8020086:	4618      	mov	r0, r3
 8020088:	f7f4 fcba 	bl	8014a00 <lv_arc_set_angles>
	  lv_arc_set_style(hoursArc, LV_ARC_STYLE_MAIN, &hours_Style);
 802008c:	4b5b      	ldr	r3, [pc, #364]	; (80201fc <dType1_Clock_Init+0x350>)
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	4a59      	ldr	r2, [pc, #356]	; (80201f8 <dType1_Clock_Init+0x34c>)
 8020092:	2100      	movs	r1, #0
 8020094:	4618      	mov	r0, r3
 8020096:	f7f4 fcdc 	bl	8014a52 <lv_arc_set_style>
	  lv_obj_align(hoursArc, NULL, LV_ALIGN_CENTER, 0, 0);
 802009a:	4b58      	ldr	r3, [pc, #352]	; (80201fc <dType1_Clock_Init+0x350>)
 802009c:	6818      	ldr	r0, [r3, #0]
 802009e:	2300      	movs	r3, #0
 80200a0:	9300      	str	r3, [sp, #0]
 80200a2:	2300      	movs	r3, #0
 80200a4:	2200      	movs	r2, #0
 80200a6:	2100      	movs	r1, #0
 80200a8:	f7e6 f918 	bl	80062dc <lv_obj_align>

	  //Minutes
	  static lv_style_t minutes_Style;
	  lv_style_copy(&minutes_Style, &lv_style_plain);
 80200ac:	493f      	ldr	r1, [pc, #252]	; (80201ac <dType1_Clock_Init+0x300>)
 80200ae:	4854      	ldr	r0, [pc, #336]	; (8020200 <dType1_Clock_Init+0x354>)
 80200b0:	f7e8 fb58 	bl	8008764 <lv_style_copy>
	  minutes_Style.line.color = LV_COLOR_BLUE;
 80200b4:	4a52      	ldr	r2, [pc, #328]	; (8020200 <dType1_Clock_Init+0x354>)
 80200b6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80200ba:	f36f 0302 	bfc	r3, #0, #3
 80200be:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80200c2:	4a4f      	ldr	r2, [pc, #316]	; (8020200 <dType1_Clock_Init+0x354>)
 80200c4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80200c8:	f36f 03c7 	bfc	r3, #3, #5
 80200cc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80200d0:	4a4b      	ldr	r2, [pc, #300]	; (8020200 <dType1_Clock_Init+0x354>)
 80200d2:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80200d6:	f043 031f 	orr.w	r3, r3, #31
 80200da:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80200de:	4a48      	ldr	r2, [pc, #288]	; (8020200 <dType1_Clock_Init+0x354>)
 80200e0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80200e4:	f36f 1347 	bfc	r3, #5, #3
 80200e8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	  minutes_Style.line.width = 5;
 80200ec:	4b44      	ldr	r3, [pc, #272]	; (8020200 <dType1_Clock_Init+0x354>)
 80200ee:	2205      	movs	r2, #5
 80200f0:	86da      	strh	r2, [r3, #54]	; 0x36

	  minutesArc = lv_arc_create(lv_scr_act(), NULL);
 80200f2:	f7ff f9ae 	bl	801f452 <lv_scr_act>
 80200f6:	4603      	mov	r3, r0
 80200f8:	2100      	movs	r1, #0
 80200fa:	4618      	mov	r0, r3
 80200fc:	f7f4 fc04 	bl	8014908 <lv_arc_create>
 8020100:	4602      	mov	r2, r0
 8020102:	4b40      	ldr	r3, [pc, #256]	; (8020204 <dType1_Clock_Init+0x358>)
 8020104:	601a      	str	r2, [r3, #0]
	  lv_obj_set_size(minutesArc, 230, 230);
 8020106:	4b3f      	ldr	r3, [pc, #252]	; (8020204 <dType1_Clock_Init+0x358>)
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	22e6      	movs	r2, #230	; 0xe6
 802010c:	21e6      	movs	r1, #230	; 0xe6
 802010e:	4618      	mov	r0, r3
 8020110:	f7e6 f841 	bl	8006196 <lv_obj_set_size>
	  lv_arc_set_angles(minutesArc, 180, 180);
 8020114:	4b3b      	ldr	r3, [pc, #236]	; (8020204 <dType1_Clock_Init+0x358>)
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	22b4      	movs	r2, #180	; 0xb4
 802011a:	21b4      	movs	r1, #180	; 0xb4
 802011c:	4618      	mov	r0, r3
 802011e:	f7f4 fc6f 	bl	8014a00 <lv_arc_set_angles>
	  lv_arc_set_style(minutesArc, LV_ARC_STYLE_MAIN, &minutes_Style);
 8020122:	4b38      	ldr	r3, [pc, #224]	; (8020204 <dType1_Clock_Init+0x358>)
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	4a36      	ldr	r2, [pc, #216]	; (8020200 <dType1_Clock_Init+0x354>)
 8020128:	2100      	movs	r1, #0
 802012a:	4618      	mov	r0, r3
 802012c:	f7f4 fc91 	bl	8014a52 <lv_arc_set_style>
	  lv_obj_align(minutesArc, NULL, LV_ALIGN_CENTER, 0, 0);
 8020130:	4b34      	ldr	r3, [pc, #208]	; (8020204 <dType1_Clock_Init+0x358>)
 8020132:	6818      	ldr	r0, [r3, #0]
 8020134:	2300      	movs	r3, #0
 8020136:	9300      	str	r3, [sp, #0]
 8020138:	2300      	movs	r3, #0
 802013a:	2200      	movs	r2, #0
 802013c:	2100      	movs	r1, #0
 802013e:	f7e6 f8cd 	bl	80062dc <lv_obj_align>

	  //Steps
	  static  lv_style_t steps_Style,description_Style;
	 		  lv_style_copy(&steps_Style, &lv_style_plain);
 8020142:	491a      	ldr	r1, [pc, #104]	; (80201ac <dType1_Clock_Init+0x300>)
 8020144:	4830      	ldr	r0, [pc, #192]	; (8020208 <dType1_Clock_Init+0x35c>)
 8020146:	f7e8 fb0d 	bl	8008764 <lv_style_copy>
	 		  steps_Style.line.color = LV_COLOR_GREEN;
 802014a:	4a2f      	ldr	r2, [pc, #188]	; (8020208 <dType1_Clock_Init+0x35c>)
 802014c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020150:	2104      	movs	r1, #4
 8020152:	f361 0302 	bfi	r3, r1, #0, #3
 8020156:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802015a:	4a2b      	ldr	r2, [pc, #172]	; (8020208 <dType1_Clock_Init+0x35c>)
 802015c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020160:	f36f 03c7 	bfc	r3, #3, #5
 8020164:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020168:	4a27      	ldr	r2, [pc, #156]	; (8020208 <dType1_Clock_Init+0x35c>)
 802016a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802016e:	f36f 0304 	bfc	r3, #0, #5
 8020172:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8020176:	4a24      	ldr	r2, [pc, #144]	; (8020208 <dType1_Clock_Init+0x35c>)
 8020178:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802017c:	f36f 1347 	bfc	r3, #5, #3
 8020180:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  steps_Style.line.width = 5;
 8020184:	4b20      	ldr	r3, [pc, #128]	; (8020208 <dType1_Clock_Init+0x35c>)
 8020186:	2205      	movs	r2, #5
 8020188:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  steps_Style.text.color = LV_COLOR_GREEN;
 802018a:	4a1f      	ldr	r2, [pc, #124]	; (8020208 <dType1_Clock_Init+0x35c>)
 802018c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8020190:	2104      	movs	r1, #4
 8020192:	f361 0302 	bfi	r3, r1, #0, #3
 8020196:	f882 3020 	strb.w	r3, [r2, #32]
 802019a:	4a1b      	ldr	r2, [pc, #108]	; (8020208 <dType1_Clock_Init+0x35c>)
 802019c:	f892 3020 	ldrb.w	r3, [r2, #32]
 80201a0:	f36f 03c7 	bfc	r3, #3, #5
 80201a4:	f882 3020 	strb.w	r3, [r2, #32]
 80201a8:	e030      	b.n	802020c <dType1_Clock_Init+0x360>
 80201aa:	bf00      	nop
 80201ac:	20006c74 	.word	0x20006c74
 80201b0:	20005c10 	.word	0x20005c10
 80201b4:	200017c0 	.word	0x200017c0
 80201b8:	20005c4c 	.word	0x20005c4c
 80201bc:	20000bec 	.word	0x20000bec
 80201c0:	08029dd8 	.word	0x08029dd8
 80201c4:	20006e20 	.word	0x20006e20
 80201c8:	20006ef5 	.word	0x20006ef5
 80201cc:	20006ef4 	.word	0x20006ef4
 80201d0:	20006ee4 	.word	0x20006ee4
 80201d4:	08029e1c 	.word	0x08029e1c
 80201d8:	20006e80 	.word	0x20006e80
 80201dc:	20006e18 	.word	0x20006e18
 80201e0:	200073c4 	.word	0x200073c4
 80201e4:	20006e24 	.word	0x20006e24
 80201e8:	20006ee6 	.word	0x20006ee6
 80201ec:	08029dfc 	.word	0x08029dfc
 80201f0:	20006e10 	.word	0x20006e10
 80201f4:	20006e74 	.word	0x20006e74
 80201f8:	20005c88 	.word	0x20005c88
 80201fc:	20006e2c 	.word	0x20006e2c
 8020200:	20005cc4 	.word	0x20005cc4
 8020204:	20006e6c 	.word	0x20006e6c
 8020208:	20005d00 	.word	0x20005d00
 802020c:	4aab      	ldr	r2, [pc, #684]	; (80204bc <dType1_Clock_Init+0x610>)
 802020e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020212:	f36f 0304 	bfc	r3, #0, #5
 8020216:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 802021a:	4aa8      	ldr	r2, [pc, #672]	; (80204bc <dType1_Clock_Init+0x610>)
 802021c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020220:	f36f 1347 	bfc	r3, #5, #3
 8020224:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  steps_Style.text.font = &lv_font_roboto_22;
 8020228:	4ba4      	ldr	r3, [pc, #656]	; (80204bc <dType1_Clock_Init+0x610>)
 802022a:	4aa5      	ldr	r2, [pc, #660]	; (80204c0 <dType1_Clock_Init+0x614>)
 802022c:	625a      	str	r2, [r3, #36]	; 0x24

	 		  lv_style_copy(&description_Style, &lv_style_plain);
 802022e:	49a5      	ldr	r1, [pc, #660]	; (80204c4 <dType1_Clock_Init+0x618>)
 8020230:	48a5      	ldr	r0, [pc, #660]	; (80204c8 <dType1_Clock_Init+0x61c>)
 8020232:	f7e8 fa97 	bl	8008764 <lv_style_copy>
	 		  description_Style.text.font = &lv_font_unscii_8;
 8020236:	4ba4      	ldr	r3, [pc, #656]	; (80204c8 <dType1_Clock_Init+0x61c>)
 8020238:	4aa4      	ldr	r2, [pc, #656]	; (80204cc <dType1_Clock_Init+0x620>)
 802023a:	625a      	str	r2, [r3, #36]	; 0x24
	 		  description_Style.text.color = LV_COLOR_GRAY;
 802023c:	4aa2      	ldr	r2, [pc, #648]	; (80204c8 <dType1_Clock_Init+0x61c>)
 802023e:	4ba4      	ldr	r3, [pc, #656]	; (80204d0 <dType1_Clock_Init+0x624>)
 8020240:	881b      	ldrh	r3, [r3, #0]
 8020242:	8413      	strh	r3, [r2, #32]
	 		    if(theme){
 8020244:	79fb      	ldrb	r3, [r7, #7]
 8020246:	2b00      	cmp	r3, #0
 8020248:	d003      	beq.n	8020252 <dType1_Clock_Init+0x3a6>
	 		    	description_Style.text.color = LV_COLOR_WHITE;
 802024a:	4a9f      	ldr	r2, [pc, #636]	; (80204c8 <dType1_Clock_Init+0x61c>)
 802024c:	4ba1      	ldr	r3, [pc, #644]	; (80204d4 <dType1_Clock_Init+0x628>)
 802024e:	881b      	ldrh	r3, [r3, #0]
 8020250:	8413      	strh	r3, [r2, #32]
	 		    }

	 		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8020252:	f7ff f8fe 	bl	801f452 <lv_scr_act>
 8020256:	4603      	mov	r3, r0
 8020258:	2100      	movs	r1, #0
 802025a:	4618      	mov	r0, r3
 802025c:	f7f9 f956 	bl	801950c <lv_label_create>
 8020260:	4602      	mov	r2, r0
 8020262:	4b9d      	ldr	r3, [pc, #628]	; (80204d8 <dType1_Clock_Init+0x62c>)
 8020264:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(stepsLbl, 150);
 8020266:	4b9c      	ldr	r3, [pc, #624]	; (80204d8 <dType1_Clock_Init+0x62c>)
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	2196      	movs	r1, #150	; 0x96
 802026c:	4618      	mov	r0, r3
 802026e:	f7e6 f80b 	bl	8006288 <lv_obj_set_width>
	 		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8020272:	4b99      	ldr	r3, [pc, #612]	; (80204d8 <dType1_Clock_Init+0x62c>)
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	4a91      	ldr	r2, [pc, #580]	; (80204bc <dType1_Clock_Init+0x610>)
 8020278:	2100      	movs	r1, #0
 802027a:	4618      	mov	r0, r3
 802027c:	f7ff f8f4 	bl	801f468 <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", steps);
 8020280:	4b96      	ldr	r3, [pc, #600]	; (80204dc <dType1_Clock_Init+0x630>)
 8020282:	881b      	ldrh	r3, [r3, #0]
 8020284:	4a96      	ldr	r2, [pc, #600]	; (80204e0 <dType1_Clock_Init+0x634>)
 8020286:	2108      	movs	r1, #8
 8020288:	4896      	ldr	r0, [pc, #600]	; (80204e4 <dType1_Clock_Init+0x638>)
 802028a:	f007 fcf3 	bl	8027c74 <sniprintf>
	 		 lv_label_set_text(stepsLbl, buffer);
 802028e:	4b92      	ldr	r3, [pc, #584]	; (80204d8 <dType1_Clock_Init+0x62c>)
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	4994      	ldr	r1, [pc, #592]	; (80204e4 <dType1_Clock_Init+0x638>)
 8020294:	4618      	mov	r0, r3
 8020296:	f7f9 fa6b 	bl	8019770 <lv_label_set_text>
	 		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 802029a:	4b8f      	ldr	r3, [pc, #572]	; (80204d8 <dType1_Clock_Init+0x62c>)
 802029c:	6818      	ldr	r0, [r3, #0]
 802029e:	2328      	movs	r3, #40	; 0x28
 80202a0:	9300      	str	r3, [sp, #0]
 80202a2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80202a6:	2200      	movs	r2, #0
 80202a8:	2100      	movs	r1, #0
 80202aa:	f7e6 f817 	bl	80062dc <lv_obj_align>

	 		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 80202ae:	f7ff f8d0 	bl	801f452 <lv_scr_act>
 80202b2:	4603      	mov	r3, r0
 80202b4:	2100      	movs	r1, #0
 80202b6:	4618      	mov	r0, r3
 80202b8:	f7f9 f928 	bl	801950c <lv_label_create>
 80202bc:	4602      	mov	r2, r0
 80202be:	4b8a      	ldr	r3, [pc, #552]	; (80204e8 <dType1_Clock_Init+0x63c>)
 80202c0:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80202c2:	4b89      	ldr	r3, [pc, #548]	; (80204e8 <dType1_Clock_Init+0x63c>)
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	4a80      	ldr	r2, [pc, #512]	; (80204c8 <dType1_Clock_Init+0x61c>)
 80202c8:	2100      	movs	r1, #0
 80202ca:	4618      	mov	r0, r3
 80202cc:	f7ff f8cc 	bl	801f468 <lv_label_set_style>
	 		 lv_label_set_text(stepsDescLbl, "steps");
 80202d0:	4b85      	ldr	r3, [pc, #532]	; (80204e8 <dType1_Clock_Init+0x63c>)
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	4985      	ldr	r1, [pc, #532]	; (80204ec <dType1_Clock_Init+0x640>)
 80202d6:	4618      	mov	r0, r3
 80202d8:	f7f9 fa4a 	bl	8019770 <lv_label_set_text>
	 		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 80202dc:	4b82      	ldr	r3, [pc, #520]	; (80204e8 <dType1_Clock_Init+0x63c>)
 80202de:	6818      	ldr	r0, [r3, #0]
 80202e0:	2337      	movs	r3, #55	; 0x37
 80202e2:	9300      	str	r3, [sp, #0]
 80202e4:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80202e8:	2200      	movs	r2, #0
 80202ea:	2100      	movs	r1, #0
 80202ec:	f7e5 fff6 	bl	80062dc <lv_obj_align>

	 		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80202f0:	f7ff f8af 	bl	801f452 <lv_scr_act>
 80202f4:	4603      	mov	r3, r0
 80202f6:	2100      	movs	r1, #0
 80202f8:	4618      	mov	r0, r3
 80202fa:	f7f4 fb05 	bl	8014908 <lv_arc_create>
 80202fe:	4602      	mov	r2, r0
 8020300:	4b7b      	ldr	r3, [pc, #492]	; (80204f0 <dType1_Clock_Init+0x644>)
 8020302:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(stepsArc, 40, 40);
 8020304:	4b7a      	ldr	r3, [pc, #488]	; (80204f0 <dType1_Clock_Init+0x644>)
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	2228      	movs	r2, #40	; 0x28
 802030a:	2128      	movs	r1, #40	; 0x28
 802030c:	4618      	mov	r0, r3
 802030e:	f7e5 ff42 	bl	8006196 <lv_obj_set_size>
	 		  lv_arc_set_angles(stepsArc, 0, 360);
 8020312:	4b77      	ldr	r3, [pc, #476]	; (80204f0 <dType1_Clock_Init+0x644>)
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802031a:	2100      	movs	r1, #0
 802031c:	4618      	mov	r0, r3
 802031e:	f7f4 fb6f 	bl	8014a00 <lv_arc_set_angles>
	 		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8020322:	4b73      	ldr	r3, [pc, #460]	; (80204f0 <dType1_Clock_Init+0x644>)
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	4a65      	ldr	r2, [pc, #404]	; (80204bc <dType1_Clock_Init+0x610>)
 8020328:	2100      	movs	r1, #0
 802032a:	4618      	mov	r0, r3
 802032c:	f7f4 fb91 	bl	8014a52 <lv_arc_set_style>
	 		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 0);
 8020330:	4b6f      	ldr	r3, [pc, #444]	; (80204f0 <dType1_Clock_Init+0x644>)
 8020332:	6818      	ldr	r0, [r3, #0]
 8020334:	2300      	movs	r3, #0
 8020336:	9300      	str	r3, [sp, #0]
 8020338:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802033c:	2200      	movs	r2, #0
 802033e:	2100      	movs	r1, #0
 8020340:	f7e5 ffcc 	bl	80062dc <lv_obj_align>

	 		  //Kcal
	 		 static lv_style_t kCals_Style;
	 		  lv_style_copy(&kCals_Style, &lv_style_plain);
 8020344:	495f      	ldr	r1, [pc, #380]	; (80204c4 <dType1_Clock_Init+0x618>)
 8020346:	486b      	ldr	r0, [pc, #428]	; (80204f4 <dType1_Clock_Init+0x648>)
 8020348:	f7e8 fa0c 	bl	8008764 <lv_style_copy>
	 		  kCals_Style.line.color = LV_COLOR_RED;
 802034c:	4a69      	ldr	r2, [pc, #420]	; (80204f4 <dType1_Clock_Init+0x648>)
 802034e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020352:	f36f 0302 	bfc	r3, #0, #3
 8020356:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 802035a:	4a66      	ldr	r2, [pc, #408]	; (80204f4 <dType1_Clock_Init+0x648>)
 802035c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8020360:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8020364:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8020368:	4a62      	ldr	r2, [pc, #392]	; (80204f4 <dType1_Clock_Init+0x648>)
 802036a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802036e:	f36f 0304 	bfc	r3, #0, #5
 8020372:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8020376:	4a5f      	ldr	r2, [pc, #380]	; (80204f4 <dType1_Clock_Init+0x648>)
 8020378:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 802037c:	f36f 1347 	bfc	r3, #5, #3
 8020380:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		  kCals_Style.line.width = 5;
 8020384:	4b5b      	ldr	r3, [pc, #364]	; (80204f4 <dType1_Clock_Init+0x648>)
 8020386:	2205      	movs	r2, #5
 8020388:	86da      	strh	r2, [r3, #54]	; 0x36
	 		  kCals_Style.text.color = LV_COLOR_RED;
 802038a:	4a5a      	ldr	r2, [pc, #360]	; (80204f4 <dType1_Clock_Init+0x648>)
 802038c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8020390:	f36f 0302 	bfc	r3, #0, #3
 8020394:	f882 3020 	strb.w	r3, [r2, #32]
 8020398:	4a56      	ldr	r2, [pc, #344]	; (80204f4 <dType1_Clock_Init+0x648>)
 802039a:	f892 3020 	ldrb.w	r3, [r2, #32]
 802039e:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80203a2:	f882 3020 	strb.w	r3, [r2, #32]
 80203a6:	4a53      	ldr	r2, [pc, #332]	; (80204f4 <dType1_Clock_Init+0x648>)
 80203a8:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80203ac:	f36f 0304 	bfc	r3, #0, #5
 80203b0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80203b4:	4a4f      	ldr	r2, [pc, #316]	; (80204f4 <dType1_Clock_Init+0x648>)
 80203b6:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80203ba:	f36f 1347 	bfc	r3, #5, #3
 80203be:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	 		  kCals_Style.text.font = &lv_font_roboto_22;
 80203c2:	4b4c      	ldr	r3, [pc, #304]	; (80204f4 <dType1_Clock_Init+0x648>)
 80203c4:	4a3e      	ldr	r2, [pc, #248]	; (80204c0 <dType1_Clock_Init+0x614>)
 80203c6:	625a      	str	r2, [r3, #36]	; 0x24

	 		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 80203c8:	f7ff f843 	bl	801f452 <lv_scr_act>
 80203cc:	4603      	mov	r3, r0
 80203ce:	2100      	movs	r1, #0
 80203d0:	4618      	mov	r0, r3
 80203d2:	f7f9 f89b 	bl	801950c <lv_label_create>
 80203d6:	4602      	mov	r2, r0
 80203d8:	4b47      	ldr	r3, [pc, #284]	; (80204f8 <dType1_Clock_Init+0x64c>)
 80203da:	601a      	str	r2, [r3, #0]
	 		 lv_obj_set_width(kCalsLbl, 150);
 80203dc:	4b46      	ldr	r3, [pc, #280]	; (80204f8 <dType1_Clock_Init+0x64c>)
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	2196      	movs	r1, #150	; 0x96
 80203e2:	4618      	mov	r0, r3
 80203e4:	f7e5 ff50 	bl	8006288 <lv_obj_set_width>
	 		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 80203e8:	4b43      	ldr	r3, [pc, #268]	; (80204f8 <dType1_Clock_Init+0x64c>)
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	4a41      	ldr	r2, [pc, #260]	; (80204f4 <dType1_Clock_Init+0x648>)
 80203ee:	2100      	movs	r1, #0
 80203f0:	4618      	mov	r0, r3
 80203f2:	f7ff f839 	bl	801f468 <lv_label_set_style>
	 		 snprintf(buffer, 8, "%04d", kCals);
 80203f6:	4b41      	ldr	r3, [pc, #260]	; (80204fc <dType1_Clock_Init+0x650>)
 80203f8:	881b      	ldrh	r3, [r3, #0]
 80203fa:	4a39      	ldr	r2, [pc, #228]	; (80204e0 <dType1_Clock_Init+0x634>)
 80203fc:	2108      	movs	r1, #8
 80203fe:	4839      	ldr	r0, [pc, #228]	; (80204e4 <dType1_Clock_Init+0x638>)
 8020400:	f007 fc38 	bl	8027c74 <sniprintf>
	 		 lv_label_set_text(kCalsLbl, buffer);
 8020404:	4b3c      	ldr	r3, [pc, #240]	; (80204f8 <dType1_Clock_Init+0x64c>)
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	4936      	ldr	r1, [pc, #216]	; (80204e4 <dType1_Clock_Init+0x638>)
 802040a:	4618      	mov	r0, r3
 802040c:	f7f9 f9b0 	bl	8019770 <lv_label_set_text>
	 		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8020410:	4b39      	ldr	r3, [pc, #228]	; (80204f8 <dType1_Clock_Init+0x64c>)
 8020412:	6818      	ldr	r0, [r3, #0]
 8020414:	2328      	movs	r3, #40	; 0x28
 8020416:	9300      	str	r3, [sp, #0]
 8020418:	233c      	movs	r3, #60	; 0x3c
 802041a:	2200      	movs	r2, #0
 802041c:	2100      	movs	r1, #0
 802041e:	f7e5 ff5d 	bl	80062dc <lv_obj_align>


	 		 kCalsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8020422:	f7ff f816 	bl	801f452 <lv_scr_act>
 8020426:	4603      	mov	r3, r0
 8020428:	2100      	movs	r1, #0
 802042a:	4618      	mov	r0, r3
 802042c:	f7f9 f86e 	bl	801950c <lv_label_create>
 8020430:	4602      	mov	r2, r0
 8020432:	4b33      	ldr	r3, [pc, #204]	; (8020500 <dType1_Clock_Init+0x654>)
 8020434:	601a      	str	r2, [r3, #0]
	 		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8020436:	4b32      	ldr	r3, [pc, #200]	; (8020500 <dType1_Clock_Init+0x654>)
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	4a23      	ldr	r2, [pc, #140]	; (80204c8 <dType1_Clock_Init+0x61c>)
 802043c:	2100      	movs	r1, #0
 802043e:	4618      	mov	r0, r3
 8020440:	f7ff f812 	bl	801f468 <lv_label_set_style>
	 		 lv_label_set_text(kCalsDescLbl, "kCals");
 8020444:	4b2e      	ldr	r3, [pc, #184]	; (8020500 <dType1_Clock_Init+0x654>)
 8020446:	681b      	ldr	r3, [r3, #0]
 8020448:	492e      	ldr	r1, [pc, #184]	; (8020504 <dType1_Clock_Init+0x658>)
 802044a:	4618      	mov	r0, r3
 802044c:	f7f9 f990 	bl	8019770 <lv_label_set_text>
	 		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 8020450:	4b2b      	ldr	r3, [pc, #172]	; (8020500 <dType1_Clock_Init+0x654>)
 8020452:	6818      	ldr	r0, [r3, #0]
 8020454:	2337      	movs	r3, #55	; 0x37
 8020456:	9300      	str	r3, [sp, #0]
 8020458:	233c      	movs	r3, #60	; 0x3c
 802045a:	2200      	movs	r2, #0
 802045c:	2100      	movs	r1, #0
 802045e:	f7e5 ff3d 	bl	80062dc <lv_obj_align>

	 		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8020462:	f7fe fff6 	bl	801f452 <lv_scr_act>
 8020466:	4603      	mov	r3, r0
 8020468:	2100      	movs	r1, #0
 802046a:	4618      	mov	r0, r3
 802046c:	f7f4 fa4c 	bl	8014908 <lv_arc_create>
 8020470:	4602      	mov	r2, r0
 8020472:	4b25      	ldr	r3, [pc, #148]	; (8020508 <dType1_Clock_Init+0x65c>)
 8020474:	601a      	str	r2, [r3, #0]
	 		  lv_obj_set_size(kCalsArc, 40, 40);
 8020476:	4b24      	ldr	r3, [pc, #144]	; (8020508 <dType1_Clock_Init+0x65c>)
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	2228      	movs	r2, #40	; 0x28
 802047c:	2128      	movs	r1, #40	; 0x28
 802047e:	4618      	mov	r0, r3
 8020480:	f7e5 fe89 	bl	8006196 <lv_obj_set_size>
	 		  lv_arc_set_angles(kCalsArc, 0, 360);
 8020484:	4b20      	ldr	r3, [pc, #128]	; (8020508 <dType1_Clock_Init+0x65c>)
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802048c:	2100      	movs	r1, #0
 802048e:	4618      	mov	r0, r3
 8020490:	f7f4 fab6 	bl	8014a00 <lv_arc_set_angles>
	 		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8020494:	4b1c      	ldr	r3, [pc, #112]	; (8020508 <dType1_Clock_Init+0x65c>)
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	4a16      	ldr	r2, [pc, #88]	; (80204f4 <dType1_Clock_Init+0x648>)
 802049a:	2100      	movs	r1, #0
 802049c:	4618      	mov	r0, r3
 802049e:	f7f4 fad8 	bl	8014a52 <lv_arc_set_style>
	 		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 0);
 80204a2:	4b19      	ldr	r3, [pc, #100]	; (8020508 <dType1_Clock_Init+0x65c>)
 80204a4:	6818      	ldr	r0, [r3, #0]
 80204a6:	2300      	movs	r3, #0
 80204a8:	9300      	str	r3, [sp, #0]
 80204aa:	233c      	movs	r3, #60	; 0x3c
 80204ac:	2200      	movs	r2, #0
 80204ae:	2100      	movs	r1, #0
 80204b0:	f7e5 ff14 	bl	80062dc <lv_obj_align>
}
 80204b4:	bf00      	nop
 80204b6:	3708      	adds	r7, #8
 80204b8:	46bd      	mov	sp, r7
 80204ba:	bd80      	pop	{r7, pc}
 80204bc:	20005d00 	.word	0x20005d00
 80204c0:	200017c0 	.word	0x200017c0
 80204c4:	20006c74 	.word	0x20006c74
 80204c8:	20005d3c 	.word	0x20005d3c
 80204cc:	200026cc 	.word	0x200026cc
 80204d0:	08029e18 	.word	0x08029e18
 80204d4:	08029dd8 	.word	0x08029dd8
 80204d8:	20006e94 	.word	0x20006e94
 80204dc:	20006e70 	.word	0x20006e70
 80204e0:	08029de4 	.word	0x08029de4
 80204e4:	20006e80 	.word	0x20006e80
 80204e8:	20006e28 	.word	0x20006e28
 80204ec:	08029dec 	.word	0x08029dec
 80204f0:	20006e78 	.word	0x20006e78
 80204f4:	20005d78 	.word	0x20005d78
 80204f8:	20006ef0 	.word	0x20006ef0
 80204fc:	20006e16 	.word	0x20006e16
 8020500:	20006edc 	.word	0x20006edc
 8020504:	08029df4 	.word	0x08029df4
 8020508:	20006ef8 	.word	0x20006ef8

0802050c <dType2_Clock_Init>:
/*Only digital Type*/
void dType2_Clock_Init(bool theme) {
 802050c:	b580      	push	{r7, lr}
 802050e:	b084      	sub	sp, #16
 8020510:	af02      	add	r7, sp, #8
 8020512:	4603      	mov	r3, r0
 8020514:	71fb      	strb	r3, [r7, #7]
	//Digital Clock
	static lv_style_t dClock_style,dDate_style,weekD_style;
			lv_style_copy(&dClock_style, &lv_style_plain);
 8020516:	49b4      	ldr	r1, [pc, #720]	; (80207e8 <dType2_Clock_Init+0x2dc>)
 8020518:	48b4      	ldr	r0, [pc, #720]	; (80207ec <dType2_Clock_Init+0x2e0>)
 802051a:	f7e8 f923 	bl	8008764 <lv_style_copy>
		    dClock_style.text.font =&digital_font_for_number_65;
 802051e:	4bb3      	ldr	r3, [pc, #716]	; (80207ec <dType2_Clock_Init+0x2e0>)
 8020520:	4ab3      	ldr	r2, [pc, #716]	; (80207f0 <dType2_Clock_Init+0x2e4>)
 8020522:	625a      	str	r2, [r3, #36]	; 0x24
		    lv_style_copy(&dDate_style, &lv_style_plain);
 8020524:	49b0      	ldr	r1, [pc, #704]	; (80207e8 <dType2_Clock_Init+0x2dc>)
 8020526:	48b3      	ldr	r0, [pc, #716]	; (80207f4 <dType2_Clock_Init+0x2e8>)
 8020528:	f7e8 f91c 	bl	8008764 <lv_style_copy>
		    dDate_style.text.font =&digital_font_for_number_30;
 802052c:	4bb1      	ldr	r3, [pc, #708]	; (80207f4 <dType2_Clock_Init+0x2e8>)
 802052e:	4ab2      	ldr	r2, [pc, #712]	; (80207f8 <dType2_Clock_Init+0x2ec>)
 8020530:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&weekD_style, &lv_style_plain);
 8020532:	49ad      	ldr	r1, [pc, #692]	; (80207e8 <dType2_Clock_Init+0x2dc>)
 8020534:	48b1      	ldr	r0, [pc, #708]	; (80207fc <dType2_Clock_Init+0x2f0>)
 8020536:	f7e8 f915 	bl	8008764 <lv_style_copy>
			weekD_style.text.font =&lv_font_roboto_22;
 802053a:	4bb0      	ldr	r3, [pc, #704]	; (80207fc <dType2_Clock_Init+0x2f0>)
 802053c:	4ab0      	ldr	r2, [pc, #704]	; (8020800 <dType2_Clock_Init+0x2f4>)
 802053e:	625a      	str	r2, [r3, #36]	; 0x24
		    if(theme){
 8020540:	79fb      	ldrb	r3, [r7, #7]
 8020542:	2b00      	cmp	r3, #0
 8020544:	d00b      	beq.n	802055e <dType2_Clock_Init+0x52>
		    	dClock_style.text.color = LV_COLOR_WHITE;
 8020546:	4aa9      	ldr	r2, [pc, #676]	; (80207ec <dType2_Clock_Init+0x2e0>)
 8020548:	4bae      	ldr	r3, [pc, #696]	; (8020804 <dType2_Clock_Init+0x2f8>)
 802054a:	881b      	ldrh	r3, [r3, #0]
 802054c:	8413      	strh	r3, [r2, #32]
		    	dDate_style.text.color = LV_COLOR_WHITE;
 802054e:	4aa9      	ldr	r2, [pc, #676]	; (80207f4 <dType2_Clock_Init+0x2e8>)
 8020550:	4bac      	ldr	r3, [pc, #688]	; (8020804 <dType2_Clock_Init+0x2f8>)
 8020552:	881b      	ldrh	r3, [r3, #0]
 8020554:	8413      	strh	r3, [r2, #32]
		    	weekD_style.text.color = LV_COLOR_WHITE;
 8020556:	4aa9      	ldr	r2, [pc, #676]	; (80207fc <dType2_Clock_Init+0x2f0>)
 8020558:	4baa      	ldr	r3, [pc, #680]	; (8020804 <dType2_Clock_Init+0x2f8>)
 802055a:	881b      	ldrh	r3, [r3, #0]
 802055c:	8413      	strh	r3, [r2, #32]
		    }

		    digitalClock = lv_label_create(lv_scr_act(), NULL);
 802055e:	f7fe ff78 	bl	801f452 <lv_scr_act>
 8020562:	4603      	mov	r3, r0
 8020564:	2100      	movs	r1, #0
 8020566:	4618      	mov	r0, r3
 8020568:	f7f8 ffd0 	bl	801950c <lv_label_create>
 802056c:	4602      	mov	r2, r0
 802056e:	4ba6      	ldr	r3, [pc, #664]	; (8020808 <dType2_Clock_Init+0x2fc>)
 8020570:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalClock, LV_LABEL_STYLE_MAIN, &dClock_style);
 8020572:	4ba5      	ldr	r3, [pc, #660]	; (8020808 <dType2_Clock_Init+0x2fc>)
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	4a9d      	ldr	r2, [pc, #628]	; (80207ec <dType2_Clock_Init+0x2e0>)
 8020578:	2100      	movs	r1, #0
 802057a:	4618      	mov	r0, r3
 802057c:	f7fe ff74 	bl	801f468 <lv_label_set_style>
		    lv_obj_set_width(digitalClock, 200);
 8020580:	4ba1      	ldr	r3, [pc, #644]	; (8020808 <dType2_Clock_Init+0x2fc>)
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	21c8      	movs	r1, #200	; 0xc8
 8020586:	4618      	mov	r0, r3
 8020588:	f7e5 fe7e 	bl	8006288 <lv_obj_set_width>
		    snprintf(buffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 802058c:	4b9f      	ldr	r3, [pc, #636]	; (802080c <dType2_Clock_Init+0x300>)
 802058e:	781b      	ldrb	r3, [r3, #0]
 8020590:	4619      	mov	r1, r3
 8020592:	4b9f      	ldr	r3, [pc, #636]	; (8020810 <dType2_Clock_Init+0x304>)
 8020594:	781b      	ldrb	r3, [r3, #0]
 8020596:	461a      	mov	r2, r3
 8020598:	4b9e      	ldr	r3, [pc, #632]	; (8020814 <dType2_Clock_Init+0x308>)
 802059a:	781b      	ldrb	r3, [r3, #0]
 802059c:	9301      	str	r3, [sp, #4]
 802059e:	9200      	str	r2, [sp, #0]
 80205a0:	460b      	mov	r3, r1
 80205a2:	4a9d      	ldr	r2, [pc, #628]	; (8020818 <dType2_Clock_Init+0x30c>)
 80205a4:	2110      	movs	r1, #16
 80205a6:	489d      	ldr	r0, [pc, #628]	; (802081c <dType2_Clock_Init+0x310>)
 80205a8:	f007 fb64 	bl	8027c74 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 80205ac:	4b96      	ldr	r3, [pc, #600]	; (8020808 <dType2_Clock_Init+0x2fc>)
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	499a      	ldr	r1, [pc, #616]	; (802081c <dType2_Clock_Init+0x310>)
 80205b2:	4618      	mov	r0, r3
 80205b4:	f7f9 f8dc 	bl	8019770 <lv_label_set_text>
		    lv_label_set_align(digitalClock, LV_LABEL_ALIGN_CENTER);
 80205b8:	4b93      	ldr	r3, [pc, #588]	; (8020808 <dType2_Clock_Init+0x2fc>)
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	2101      	movs	r1, #1
 80205be:	4618      	mov	r0, r3
 80205c0:	f7f9 f9ce 	bl	8019960 <lv_label_set_align>
		    lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 80205c4:	4b90      	ldr	r3, [pc, #576]	; (8020808 <dType2_Clock_Init+0x2fc>)
 80205c6:	6818      	ldr	r0, [r3, #0]
 80205c8:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80205cc:	9300      	str	r3, [sp, #0]
 80205ce:	2300      	movs	r3, #0
 80205d0:	2200      	movs	r2, #0
 80205d2:	2100      	movs	r1, #0
 80205d4:	f7e5 fe82 	bl	80062dc <lv_obj_align>

		    //Digital Date
		    digitalDate = lv_label_create(lv_scr_act(), NULL);
 80205d8:	f7fe ff3b 	bl	801f452 <lv_scr_act>
 80205dc:	4603      	mov	r3, r0
 80205de:	2100      	movs	r1, #0
 80205e0:	4618      	mov	r0, r3
 80205e2:	f7f8 ff93 	bl	801950c <lv_label_create>
 80205e6:	4602      	mov	r2, r0
 80205e8:	4b8d      	ldr	r3, [pc, #564]	; (8020820 <dType2_Clock_Init+0x314>)
 80205ea:	601a      	str	r2, [r3, #0]
		    lv_label_set_style(digitalDate, LV_LABEL_STYLE_MAIN, &dDate_style);
 80205ec:	4b8c      	ldr	r3, [pc, #560]	; (8020820 <dType2_Clock_Init+0x314>)
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	4a80      	ldr	r2, [pc, #512]	; (80207f4 <dType2_Clock_Init+0x2e8>)
 80205f2:	2100      	movs	r1, #0
 80205f4:	4618      	mov	r0, r3
 80205f6:	f7fe ff37 	bl	801f468 <lv_label_set_style>
	    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 80205fa:	4b8a      	ldr	r3, [pc, #552]	; (8020824 <dType2_Clock_Init+0x318>)
 80205fc:	781b      	ldrb	r3, [r3, #0]
 80205fe:	4619      	mov	r1, r3
 8020600:	4b89      	ldr	r3, [pc, #548]	; (8020828 <dType2_Clock_Init+0x31c>)
 8020602:	781b      	ldrb	r3, [r3, #0]
 8020604:	461a      	mov	r2, r3
 8020606:	4b89      	ldr	r3, [pc, #548]	; (802082c <dType2_Clock_Init+0x320>)
 8020608:	881b      	ldrh	r3, [r3, #0]
 802060a:	9301      	str	r3, [sp, #4]
 802060c:	9200      	str	r2, [sp, #0]
 802060e:	460b      	mov	r3, r1
 8020610:	4a87      	ldr	r2, [pc, #540]	; (8020830 <dType2_Clock_Init+0x324>)
 8020612:	2110      	movs	r1, #16
 8020614:	4881      	ldr	r0, [pc, #516]	; (802081c <dType2_Clock_Init+0x310>)
 8020616:	f007 fb2d 	bl	8027c74 <sniprintf>
			lv_label_set_text(digitalDate, buffer);
 802061a:	4b81      	ldr	r3, [pc, #516]	; (8020820 <dType2_Clock_Init+0x314>)
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	497f      	ldr	r1, [pc, #508]	; (802081c <dType2_Clock_Init+0x310>)
 8020620:	4618      	mov	r0, r3
 8020622:	f7f9 f8a5 	bl	8019770 <lv_label_set_text>
		    lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8020626:	4b7e      	ldr	r3, [pc, #504]	; (8020820 <dType2_Clock_Init+0x314>)
 8020628:	6818      	ldr	r0, [r3, #0]
 802062a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 802062e:	9300      	str	r3, [sp, #0]
 8020630:	2300      	movs	r3, #0
 8020632:	2200      	movs	r2, #0
 8020634:	2100      	movs	r1, #0
 8020636:	f7e5 fe51 	bl	80062dc <lv_obj_align>

		    //Week Day
		    weekDay = lv_label_create(lv_scr_act(), NULL);
 802063a:	f7fe ff0a 	bl	801f452 <lv_scr_act>
 802063e:	4603      	mov	r3, r0
 8020640:	2100      	movs	r1, #0
 8020642:	4618      	mov	r0, r3
 8020644:	f7f8 ff62 	bl	801950c <lv_label_create>
 8020648:	4602      	mov	r2, r0
 802064a:	4b7a      	ldr	r3, [pc, #488]	; (8020834 <dType2_Clock_Init+0x328>)
 802064c:	601a      	str	r2, [r3, #0]
		    lv_obj_set_width(weekDay, 150);
 802064e:	4b79      	ldr	r3, [pc, #484]	; (8020834 <dType2_Clock_Init+0x328>)
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	2196      	movs	r1, #150	; 0x96
 8020654:	4618      	mov	r0, r3
 8020656:	f7e5 fe17 	bl	8006288 <lv_obj_set_width>
		    lv_label_set_style(weekDay, LV_LABEL_STYLE_MAIN, &weekD_style);
 802065a:	4b76      	ldr	r3, [pc, #472]	; (8020834 <dType2_Clock_Init+0x328>)
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	4a67      	ldr	r2, [pc, #412]	; (80207fc <dType2_Clock_Init+0x2f0>)
 8020660:	2100      	movs	r1, #0
 8020662:	4618      	mov	r0, r3
 8020664:	f7fe ff00 	bl	801f468 <lv_label_set_style>
		    lv_label_set_text(weekDay,weekDayStr);
 8020668:	4b72      	ldr	r3, [pc, #456]	; (8020834 <dType2_Clock_Init+0x328>)
 802066a:	681a      	ldr	r2, [r3, #0]
 802066c:	4b72      	ldr	r3, [pc, #456]	; (8020838 <dType2_Clock_Init+0x32c>)
 802066e:	681b      	ldr	r3, [r3, #0]
 8020670:	4619      	mov	r1, r3
 8020672:	4610      	mov	r0, r2
 8020674:	f7f9 f87c 	bl	8019770 <lv_label_set_text>
		    lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020678:	4b6e      	ldr	r3, [pc, #440]	; (8020834 <dType2_Clock_Init+0x328>)
 802067a:	6818      	ldr	r0, [r3, #0]
 802067c:	f06f 0309 	mvn.w	r3, #9
 8020680:	9300      	str	r3, [sp, #0]
 8020682:	2300      	movs	r3, #0
 8020684:	2200      	movs	r2, #0
 8020686:	2100      	movs	r1, #0
 8020688:	f7e5 fe28 	bl	80062dc <lv_obj_align>

		    //Steps
		    static lv_style_t steps_Style,description_Style;
		   		  lv_style_copy(&steps_Style, &lv_style_plain);
 802068c:	4956      	ldr	r1, [pc, #344]	; (80207e8 <dType2_Clock_Init+0x2dc>)
 802068e:	486b      	ldr	r0, [pc, #428]	; (802083c <dType2_Clock_Init+0x330>)
 8020690:	f7e8 f868 	bl	8008764 <lv_style_copy>
		   		  steps_Style.line.color = LV_COLOR_GREEN;
 8020694:	4a69      	ldr	r2, [pc, #420]	; (802083c <dType2_Clock_Init+0x330>)
 8020696:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 802069a:	2104      	movs	r1, #4
 802069c:	f361 0302 	bfi	r3, r1, #0, #3
 80206a0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80206a4:	4a65      	ldr	r2, [pc, #404]	; (802083c <dType2_Clock_Init+0x330>)
 80206a6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80206aa:	f36f 03c7 	bfc	r3, #3, #5
 80206ae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80206b2:	4a62      	ldr	r2, [pc, #392]	; (802083c <dType2_Clock_Init+0x330>)
 80206b4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80206b8:	f36f 0304 	bfc	r3, #0, #5
 80206bc:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80206c0:	4a5e      	ldr	r2, [pc, #376]	; (802083c <dType2_Clock_Init+0x330>)
 80206c2:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80206c6:	f36f 1347 	bfc	r3, #5, #3
 80206ca:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  steps_Style.line.width = 5;
 80206ce:	4b5b      	ldr	r3, [pc, #364]	; (802083c <dType2_Clock_Init+0x330>)
 80206d0:	2205      	movs	r2, #5
 80206d2:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  steps_Style.text.color = LV_COLOR_GREEN;
 80206d4:	4a59      	ldr	r2, [pc, #356]	; (802083c <dType2_Clock_Init+0x330>)
 80206d6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80206da:	2104      	movs	r1, #4
 80206dc:	f361 0302 	bfi	r3, r1, #0, #3
 80206e0:	f882 3020 	strb.w	r3, [r2, #32]
 80206e4:	4a55      	ldr	r2, [pc, #340]	; (802083c <dType2_Clock_Init+0x330>)
 80206e6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80206ea:	f36f 03c7 	bfc	r3, #3, #5
 80206ee:	f882 3020 	strb.w	r3, [r2, #32]
 80206f2:	4a52      	ldr	r2, [pc, #328]	; (802083c <dType2_Clock_Init+0x330>)
 80206f4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80206f8:	f36f 0304 	bfc	r3, #0, #5
 80206fc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8020700:	4a4e      	ldr	r2, [pc, #312]	; (802083c <dType2_Clock_Init+0x330>)
 8020702:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8020706:	f36f 1347 	bfc	r3, #5, #3
 802070a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  steps_Style.text.font = &lv_font_roboto_22;
 802070e:	4b4b      	ldr	r3, [pc, #300]	; (802083c <dType2_Clock_Init+0x330>)
 8020710:	4a3b      	ldr	r2, [pc, #236]	; (8020800 <dType2_Clock_Init+0x2f4>)
 8020712:	625a      	str	r2, [r3, #36]	; 0x24

		   		  lv_style_copy(&description_Style, &lv_style_plain);
 8020714:	4934      	ldr	r1, [pc, #208]	; (80207e8 <dType2_Clock_Init+0x2dc>)
 8020716:	484a      	ldr	r0, [pc, #296]	; (8020840 <dType2_Clock_Init+0x334>)
 8020718:	f7e8 f824 	bl	8008764 <lv_style_copy>
		   		  description_Style.text.font = &lv_font_unscii_8;
 802071c:	4b48      	ldr	r3, [pc, #288]	; (8020840 <dType2_Clock_Init+0x334>)
 802071e:	4a49      	ldr	r2, [pc, #292]	; (8020844 <dType2_Clock_Init+0x338>)
 8020720:	625a      	str	r2, [r3, #36]	; 0x24
		   		  description_Style.text.color = LV_COLOR_GRAY;
 8020722:	4a47      	ldr	r2, [pc, #284]	; (8020840 <dType2_Clock_Init+0x334>)
 8020724:	4b48      	ldr	r3, [pc, #288]	; (8020848 <dType2_Clock_Init+0x33c>)
 8020726:	881b      	ldrh	r3, [r3, #0]
 8020728:	8413      	strh	r3, [r2, #32]
		   		    if(theme){
 802072a:	79fb      	ldrb	r3, [r7, #7]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d003      	beq.n	8020738 <dType2_Clock_Init+0x22c>
		   		    	description_Style.text.color = LV_COLOR_WHITE;
 8020730:	4a43      	ldr	r2, [pc, #268]	; (8020840 <dType2_Clock_Init+0x334>)
 8020732:	4b34      	ldr	r3, [pc, #208]	; (8020804 <dType2_Clock_Init+0x2f8>)
 8020734:	881b      	ldrh	r3, [r3, #0]
 8020736:	8413      	strh	r3, [r2, #32]
		   		    }

		   		 stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8020738:	f7fe fe8b 	bl	801f452 <lv_scr_act>
 802073c:	4603      	mov	r3, r0
 802073e:	2100      	movs	r1, #0
 8020740:	4618      	mov	r0, r3
 8020742:	f7f8 fee3 	bl	801950c <lv_label_create>
 8020746:	4602      	mov	r2, r0
 8020748:	4b40      	ldr	r3, [pc, #256]	; (802084c <dType2_Clock_Init+0x340>)
 802074a:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(stepsLbl, 150);
 802074c:	4b3f      	ldr	r3, [pc, #252]	; (802084c <dType2_Clock_Init+0x340>)
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	2196      	movs	r1, #150	; 0x96
 8020752:	4618      	mov	r0, r3
 8020754:	f7e5 fd98 	bl	8006288 <lv_obj_set_width>
		   		 lv_label_set_style(stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8020758:	4b3c      	ldr	r3, [pc, #240]	; (802084c <dType2_Clock_Init+0x340>)
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	4a37      	ldr	r2, [pc, #220]	; (802083c <dType2_Clock_Init+0x330>)
 802075e:	2100      	movs	r1, #0
 8020760:	4618      	mov	r0, r3
 8020762:	f7fe fe81 	bl	801f468 <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", steps);
 8020766:	4b3a      	ldr	r3, [pc, #232]	; (8020850 <dType2_Clock_Init+0x344>)
 8020768:	881b      	ldrh	r3, [r3, #0]
 802076a:	4a3a      	ldr	r2, [pc, #232]	; (8020854 <dType2_Clock_Init+0x348>)
 802076c:	2108      	movs	r1, #8
 802076e:	482b      	ldr	r0, [pc, #172]	; (802081c <dType2_Clock_Init+0x310>)
 8020770:	f007 fa80 	bl	8027c74 <sniprintf>
		   		 lv_label_set_text(stepsLbl, buffer);
 8020774:	4b35      	ldr	r3, [pc, #212]	; (802084c <dType2_Clock_Init+0x340>)
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	4928      	ldr	r1, [pc, #160]	; (802081c <dType2_Clock_Init+0x310>)
 802077a:	4618      	mov	r0, r3
 802077c:	f7f8 fff8 	bl	8019770 <lv_label_set_text>
		   		 lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8020780:	4b32      	ldr	r3, [pc, #200]	; (802084c <dType2_Clock_Init+0x340>)
 8020782:	6818      	ldr	r0, [r3, #0]
 8020784:	2328      	movs	r3, #40	; 0x28
 8020786:	9300      	str	r3, [sp, #0]
 8020788:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802078c:	2200      	movs	r2, #0
 802078e:	2100      	movs	r1, #0
 8020790:	f7e5 fda4 	bl	80062dc <lv_obj_align>

		   		 stepsDescLbl = lv_label_create(lv_scr_act(), NULL);
 8020794:	f7fe fe5d 	bl	801f452 <lv_scr_act>
 8020798:	4603      	mov	r3, r0
 802079a:	2100      	movs	r1, #0
 802079c:	4618      	mov	r0, r3
 802079e:	f7f8 feb5 	bl	801950c <lv_label_create>
 80207a2:	4602      	mov	r2, r0
 80207a4:	4b2c      	ldr	r3, [pc, #176]	; (8020858 <dType2_Clock_Init+0x34c>)
 80207a6:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80207a8:	4b2b      	ldr	r3, [pc, #172]	; (8020858 <dType2_Clock_Init+0x34c>)
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	4a24      	ldr	r2, [pc, #144]	; (8020840 <dType2_Clock_Init+0x334>)
 80207ae:	2100      	movs	r1, #0
 80207b0:	4618      	mov	r0, r3
 80207b2:	f7fe fe59 	bl	801f468 <lv_label_set_style>
		   		 lv_label_set_text(stepsDescLbl, "steps");
 80207b6:	4b28      	ldr	r3, [pc, #160]	; (8020858 <dType2_Clock_Init+0x34c>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	4928      	ldr	r1, [pc, #160]	; (802085c <dType2_Clock_Init+0x350>)
 80207bc:	4618      	mov	r0, r3
 80207be:	f7f8 ffd7 	bl	8019770 <lv_label_set_text>
		   		 lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -60, 55);
 80207c2:	4b25      	ldr	r3, [pc, #148]	; (8020858 <dType2_Clock_Init+0x34c>)
 80207c4:	6818      	ldr	r0, [r3, #0]
 80207c6:	2337      	movs	r3, #55	; 0x37
 80207c8:	9300      	str	r3, [sp, #0]
 80207ca:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80207ce:	2200      	movs	r2, #0
 80207d0:	2100      	movs	r1, #0
 80207d2:	f7e5 fd83 	bl	80062dc <lv_obj_align>

		   		  stepsArc = lv_arc_create(lv_scr_act(), NULL);
 80207d6:	f7fe fe3c 	bl	801f452 <lv_scr_act>
 80207da:	4603      	mov	r3, r0
 80207dc:	2100      	movs	r1, #0
 80207de:	4618      	mov	r0, r3
 80207e0:	f7f4 f892 	bl	8014908 <lv_arc_create>
 80207e4:	4602      	mov	r2, r0
 80207e6:	e03b      	b.n	8020860 <dType2_Clock_Init+0x354>
 80207e8:	20006c74 	.word	0x20006c74
 80207ec:	20005db4 	.word	0x20005db4
 80207f0:	20002818 	.word	0x20002818
 80207f4:	20005df0 	.word	0x20005df0
 80207f8:	200027e8 	.word	0x200027e8
 80207fc:	20005e2c 	.word	0x20005e2c
 8020800:	200017c0 	.word	0x200017c0
 8020804:	08029dd8 	.word	0x08029dd8
 8020808:	20006e20 	.word	0x20006e20
 802080c:	20006ef5 	.word	0x20006ef5
 8020810:	20006ef4 	.word	0x20006ef4
 8020814:	20006ee4 	.word	0x20006ee4
 8020818:	08029e1c 	.word	0x08029e1c
 802081c:	20006e80 	.word	0x20006e80
 8020820:	20006e18 	.word	0x20006e18
 8020824:	200073c4 	.word	0x200073c4
 8020828:	20006e24 	.word	0x20006e24
 802082c:	20006ee6 	.word	0x20006ee6
 8020830:	08029dfc 	.word	0x08029dfc
 8020834:	20006e10 	.word	0x20006e10
 8020838:	20006e74 	.word	0x20006e74
 802083c:	20005e68 	.word	0x20005e68
 8020840:	20005ea4 	.word	0x20005ea4
 8020844:	200026cc 	.word	0x200026cc
 8020848:	08029e18 	.word	0x08029e18
 802084c:	20006e94 	.word	0x20006e94
 8020850:	20006e70 	.word	0x20006e70
 8020854:	08029de4 	.word	0x08029de4
 8020858:	20006e28 	.word	0x20006e28
 802085c:	08029dec 	.word	0x08029dec
 8020860:	4b6e      	ldr	r3, [pc, #440]	; (8020a1c <dType2_Clock_Init+0x510>)
 8020862:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(stepsArc, 80, 80);
 8020864:	4b6d      	ldr	r3, [pc, #436]	; (8020a1c <dType2_Clock_Init+0x510>)
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	2250      	movs	r2, #80	; 0x50
 802086a:	2150      	movs	r1, #80	; 0x50
 802086c:	4618      	mov	r0, r3
 802086e:	f7e5 fc92 	bl	8006196 <lv_obj_set_size>
		   		  lv_arc_set_angles(stepsArc, 0, 360);
 8020872:	4b6a      	ldr	r3, [pc, #424]	; (8020a1c <dType2_Clock_Init+0x510>)
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802087a:	2100      	movs	r1, #0
 802087c:	4618      	mov	r0, r3
 802087e:	f7f4 f8bf 	bl	8014a00 <lv_arc_set_angles>
		   		  lv_arc_set_style(stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8020882:	4b66      	ldr	r3, [pc, #408]	; (8020a1c <dType2_Clock_Init+0x510>)
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	4a66      	ldr	r2, [pc, #408]	; (8020a20 <dType2_Clock_Init+0x514>)
 8020888:	2100      	movs	r1, #0
 802088a:	4618      	mov	r0, r3
 802088c:	f7f4 f8e1 	bl	8014a52 <lv_arc_set_style>
		   		  lv_obj_align(stepsArc, NULL, LV_ALIGN_CENTER, -60, 40);
 8020890:	4b62      	ldr	r3, [pc, #392]	; (8020a1c <dType2_Clock_Init+0x510>)
 8020892:	6818      	ldr	r0, [r3, #0]
 8020894:	2328      	movs	r3, #40	; 0x28
 8020896:	9300      	str	r3, [sp, #0]
 8020898:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802089c:	2200      	movs	r2, #0
 802089e:	2100      	movs	r1, #0
 80208a0:	f7e5 fd1c 	bl	80062dc <lv_obj_align>

		   		  //Kcal
		   		static lv_style_t kCals_Style;
		   		  lv_style_copy(&kCals_Style, &lv_style_plain);
 80208a4:	495f      	ldr	r1, [pc, #380]	; (8020a24 <dType2_Clock_Init+0x518>)
 80208a6:	4860      	ldr	r0, [pc, #384]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208a8:	f7e7 ff5c 	bl	8008764 <lv_style_copy>
		   		  kCals_Style.line.color = LV_COLOR_RED;
 80208ac:	4a5e      	ldr	r2, [pc, #376]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208ae:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80208b2:	f36f 0302 	bfc	r3, #0, #3
 80208b6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80208ba:	4a5b      	ldr	r2, [pc, #364]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208bc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80208c0:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80208c4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 80208c8:	4a57      	ldr	r2, [pc, #348]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208ca:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80208ce:	f36f 0304 	bfc	r3, #0, #5
 80208d2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80208d6:	4a54      	ldr	r2, [pc, #336]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208d8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80208dc:	f36f 1347 	bfc	r3, #5, #3
 80208e0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		   		  kCals_Style.line.width = 5;
 80208e4:	4b50      	ldr	r3, [pc, #320]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208e6:	2205      	movs	r2, #5
 80208e8:	86da      	strh	r2, [r3, #54]	; 0x36
		   		  kCals_Style.text.color = LV_COLOR_RED;
 80208ea:	4a4f      	ldr	r2, [pc, #316]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208ec:	f892 3020 	ldrb.w	r3, [r2, #32]
 80208f0:	f36f 0302 	bfc	r3, #0, #3
 80208f4:	f882 3020 	strb.w	r3, [r2, #32]
 80208f8:	4a4b      	ldr	r2, [pc, #300]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80208fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80208fe:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8020902:	f882 3020 	strb.w	r3, [r2, #32]
 8020906:	4a48      	ldr	r2, [pc, #288]	; (8020a28 <dType2_Clock_Init+0x51c>)
 8020908:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802090c:	f36f 0304 	bfc	r3, #0, #5
 8020910:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8020914:	4a44      	ldr	r2, [pc, #272]	; (8020a28 <dType2_Clock_Init+0x51c>)
 8020916:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 802091a:	f36f 1347 	bfc	r3, #5, #3
 802091e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
		   		  kCals_Style.text.font = &lv_font_roboto_22;
 8020922:	4b41      	ldr	r3, [pc, #260]	; (8020a28 <dType2_Clock_Init+0x51c>)
 8020924:	4a41      	ldr	r2, [pc, #260]	; (8020a2c <dType2_Clock_Init+0x520>)
 8020926:	625a      	str	r2, [r3, #36]	; 0x24

		   		 kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8020928:	f7fe fd93 	bl	801f452 <lv_scr_act>
 802092c:	4603      	mov	r3, r0
 802092e:	2100      	movs	r1, #0
 8020930:	4618      	mov	r0, r3
 8020932:	f7f8 fdeb 	bl	801950c <lv_label_create>
 8020936:	4602      	mov	r2, r0
 8020938:	4b3d      	ldr	r3, [pc, #244]	; (8020a30 <dType2_Clock_Init+0x524>)
 802093a:	601a      	str	r2, [r3, #0]
		   		 lv_obj_set_width(kCalsLbl, 150);
 802093c:	4b3c      	ldr	r3, [pc, #240]	; (8020a30 <dType2_Clock_Init+0x524>)
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	2196      	movs	r1, #150	; 0x96
 8020942:	4618      	mov	r0, r3
 8020944:	f7e5 fca0 	bl	8006288 <lv_obj_set_width>
		   		 lv_label_set_style(kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8020948:	4b39      	ldr	r3, [pc, #228]	; (8020a30 <dType2_Clock_Init+0x524>)
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	4a36      	ldr	r2, [pc, #216]	; (8020a28 <dType2_Clock_Init+0x51c>)
 802094e:	2100      	movs	r1, #0
 8020950:	4618      	mov	r0, r3
 8020952:	f7fe fd89 	bl	801f468 <lv_label_set_style>
		   		 snprintf(buffer, 8, "%04d", kCals);
 8020956:	4b37      	ldr	r3, [pc, #220]	; (8020a34 <dType2_Clock_Init+0x528>)
 8020958:	881b      	ldrh	r3, [r3, #0]
 802095a:	4a37      	ldr	r2, [pc, #220]	; (8020a38 <dType2_Clock_Init+0x52c>)
 802095c:	2108      	movs	r1, #8
 802095e:	4837      	ldr	r0, [pc, #220]	; (8020a3c <dType2_Clock_Init+0x530>)
 8020960:	f007 f988 	bl	8027c74 <sniprintf>
		   		 lv_label_set_text(kCalsLbl, buffer);
 8020964:	4b32      	ldr	r3, [pc, #200]	; (8020a30 <dType2_Clock_Init+0x524>)
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	4934      	ldr	r1, [pc, #208]	; (8020a3c <dType2_Clock_Init+0x530>)
 802096a:	4618      	mov	r0, r3
 802096c:	f7f8 ff00 	bl	8019770 <lv_label_set_text>
		   		 lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 8020970:	4b2f      	ldr	r3, [pc, #188]	; (8020a30 <dType2_Clock_Init+0x524>)
 8020972:	6818      	ldr	r0, [r3, #0]
 8020974:	2328      	movs	r3, #40	; 0x28
 8020976:	9300      	str	r3, [sp, #0]
 8020978:	233c      	movs	r3, #60	; 0x3c
 802097a:	2200      	movs	r2, #0
 802097c:	2100      	movs	r1, #0
 802097e:	f7e5 fcad 	bl	80062dc <lv_obj_align>

		   		 kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8020982:	f7fe fd66 	bl	801f452 <lv_scr_act>
 8020986:	4603      	mov	r3, r0
 8020988:	2100      	movs	r1, #0
 802098a:	4618      	mov	r0, r3
 802098c:	f7f8 fdbe 	bl	801950c <lv_label_create>
 8020990:	4602      	mov	r2, r0
 8020992:	4b2b      	ldr	r3, [pc, #172]	; (8020a40 <dType2_Clock_Init+0x534>)
 8020994:	601a      	str	r2, [r3, #0]
		   		 lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8020996:	4b2a      	ldr	r3, [pc, #168]	; (8020a40 <dType2_Clock_Init+0x534>)
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	4a2a      	ldr	r2, [pc, #168]	; (8020a44 <dType2_Clock_Init+0x538>)
 802099c:	2100      	movs	r1, #0
 802099e:	4618      	mov	r0, r3
 80209a0:	f7fe fd62 	bl	801f468 <lv_label_set_style>
		   		 lv_label_set_text(kCalsDescLbl, "kCals");
 80209a4:	4b26      	ldr	r3, [pc, #152]	; (8020a40 <dType2_Clock_Init+0x534>)
 80209a6:	681b      	ldr	r3, [r3, #0]
 80209a8:	4927      	ldr	r1, [pc, #156]	; (8020a48 <dType2_Clock_Init+0x53c>)
 80209aa:	4618      	mov	r0, r3
 80209ac:	f7f8 fee0 	bl	8019770 <lv_label_set_text>
		   		 lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, 60, 55);
 80209b0:	4b23      	ldr	r3, [pc, #140]	; (8020a40 <dType2_Clock_Init+0x534>)
 80209b2:	6818      	ldr	r0, [r3, #0]
 80209b4:	2337      	movs	r3, #55	; 0x37
 80209b6:	9300      	str	r3, [sp, #0]
 80209b8:	233c      	movs	r3, #60	; 0x3c
 80209ba:	2200      	movs	r2, #0
 80209bc:	2100      	movs	r1, #0
 80209be:	f7e5 fc8d 	bl	80062dc <lv_obj_align>

		   		  kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 80209c2:	f7fe fd46 	bl	801f452 <lv_scr_act>
 80209c6:	4603      	mov	r3, r0
 80209c8:	2100      	movs	r1, #0
 80209ca:	4618      	mov	r0, r3
 80209cc:	f7f3 ff9c 	bl	8014908 <lv_arc_create>
 80209d0:	4602      	mov	r2, r0
 80209d2:	4b1e      	ldr	r3, [pc, #120]	; (8020a4c <dType2_Clock_Init+0x540>)
 80209d4:	601a      	str	r2, [r3, #0]
		   		  lv_obj_set_size(kCalsArc, 80, 80);
 80209d6:	4b1d      	ldr	r3, [pc, #116]	; (8020a4c <dType2_Clock_Init+0x540>)
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	2250      	movs	r2, #80	; 0x50
 80209dc:	2150      	movs	r1, #80	; 0x50
 80209de:	4618      	mov	r0, r3
 80209e0:	f7e5 fbd9 	bl	8006196 <lv_obj_set_size>
		   		  lv_arc_set_angles(kCalsArc, 0, 360);
 80209e4:	4b19      	ldr	r3, [pc, #100]	; (8020a4c <dType2_Clock_Init+0x540>)
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80209ec:	2100      	movs	r1, #0
 80209ee:	4618      	mov	r0, r3
 80209f0:	f7f4 f806 	bl	8014a00 <lv_arc_set_angles>
		   		  lv_arc_set_style(kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 80209f4:	4b15      	ldr	r3, [pc, #84]	; (8020a4c <dType2_Clock_Init+0x540>)
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	4a0b      	ldr	r2, [pc, #44]	; (8020a28 <dType2_Clock_Init+0x51c>)
 80209fa:	2100      	movs	r1, #0
 80209fc:	4618      	mov	r0, r3
 80209fe:	f7f4 f828 	bl	8014a52 <lv_arc_set_style>
		   		  lv_obj_align(kCalsArc, NULL, LV_ALIGN_CENTER, 60, 40);
 8020a02:	4b12      	ldr	r3, [pc, #72]	; (8020a4c <dType2_Clock_Init+0x540>)
 8020a04:	6818      	ldr	r0, [r3, #0]
 8020a06:	2328      	movs	r3, #40	; 0x28
 8020a08:	9300      	str	r3, [sp, #0]
 8020a0a:	233c      	movs	r3, #60	; 0x3c
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	2100      	movs	r1, #0
 8020a10:	f7e5 fc64 	bl	80062dc <lv_obj_align>
}
 8020a14:	bf00      	nop
 8020a16:	3708      	adds	r7, #8
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	bd80      	pop	{r7, pc}
 8020a1c:	20006e78 	.word	0x20006e78
 8020a20:	20005e68 	.word	0x20005e68
 8020a24:	20006c74 	.word	0x20006c74
 8020a28:	20005ee0 	.word	0x20005ee0
 8020a2c:	200017c0 	.word	0x200017c0
 8020a30:	20006ef0 	.word	0x20006ef0
 8020a34:	20006e16 	.word	0x20006e16
 8020a38:	08029de4 	.word	0x08029de4
 8020a3c:	20006e80 	.word	0x20006e80
 8020a40:	20006edc 	.word	0x20006edc
 8020a44:	20005ea4 	.word	0x20005ea4
 8020a48:	08029df4 	.word	0x08029df4
 8020a4c:	20006ef8 	.word	0x20006ef8

08020a50 <MainScreen_Updater>:
/*This function using for update values*/
void MainScreen_Updater(void){
 8020a50:	b580      	push	{r7, lr}
 8020a52:	af00      	add	r7, sp, #0
	if(MS_taskController){
 8020a54:	4b0c      	ldr	r3, [pc, #48]	; (8020a88 <MainScreen_Updater+0x38>)
 8020a56:	781b      	ldrb	r3, [r3, #0]
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d012      	beq.n	8020a82 <MainScreen_Updater+0x32>
	switch(MainScreenType){
 8020a5c:	4b0b      	ldr	r3, [pc, #44]	; (8020a8c <MainScreen_Updater+0x3c>)
 8020a5e:	781b      	ldrb	r3, [r3, #0]
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d002      	beq.n	8020a6a <MainScreen_Updater+0x1a>
 8020a64:	2b02      	cmp	r3, #2
 8020a66:	d005      	beq.n	8020a74 <MainScreen_Updater+0x24>
	case tos_mainScreen_Type3:
		seconds_angle_loader();
		minutes_angle_loader();
		hours_angle_loader();
		break;
	default: break;
 8020a68:	e00c      	b.n	8020a84 <MainScreen_Updater+0x34>
		minutes_angle_loader();
 8020a6a:	f000 f905 	bl	8020c78 <minutes_angle_loader>
		hours_angle_loader();
 8020a6e:	f000 f87f 	bl	8020b70 <hours_angle_loader>
		break;
 8020a72:	e007      	b.n	8020a84 <MainScreen_Updater+0x34>
		seconds_angle_loader();
 8020a74:	f000 f96c 	bl	8020d50 <seconds_angle_loader>
		minutes_angle_loader();
 8020a78:	f000 f8fe 	bl	8020c78 <minutes_angle_loader>
		hours_angle_loader();
 8020a7c:	f000 f878 	bl	8020b70 <hours_angle_loader>
		break;
 8020a80:	e000      	b.n	8020a84 <MainScreen_Updater+0x34>
	}
	}
 8020a82:	bf00      	nop
}
 8020a84:	bf00      	nop
 8020a86:	bd80      	pop	{r7, pc}
 8020a88:	20006e91 	.word	0x20006e91
 8020a8c:	20006e14 	.word	0x20006e14

08020a90 <batteryValueUpdater>:



/* This function using for battery value update
*/
void batteryValueUpdater(lv_task_t *t){
 8020a90:	b580      	push	{r7, lr}
 8020a92:	b084      	sub	sp, #16
 8020a94:	af02      	add	r7, sp, #8
 8020a96:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020a98:	4b10      	ldr	r3, [pc, #64]	; (8020adc <batteryValueUpdater+0x4c>)
 8020a9a:	781b      	ldrb	r3, [r3, #0]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d016      	beq.n	8020ace <batteryValueUpdater+0x3e>
		  lv_label_set_text(batteryLbl, batteryVal);
 8020aa0:	4b0f      	ldr	r3, [pc, #60]	; (8020ae0 <batteryValueUpdater+0x50>)
 8020aa2:	681a      	ldr	r2, [r3, #0]
 8020aa4:	4b0f      	ldr	r3, [pc, #60]	; (8020ae4 <batteryValueUpdater+0x54>)
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	4619      	mov	r1, r3
 8020aaa:	4610      	mov	r0, r2
 8020aac:	f7f8 fe60 	bl	8019770 <lv_label_set_text>
		  battery_style.text.color = batteryColor;
 8020ab0:	4a0d      	ldr	r2, [pc, #52]	; (8020ae8 <batteryValueUpdater+0x58>)
 8020ab2:	4b0e      	ldr	r3, [pc, #56]	; (8020aec <batteryValueUpdater+0x5c>)
 8020ab4:	881b      	ldrh	r3, [r3, #0]
 8020ab6:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(batteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8020ab8:	4b09      	ldr	r3, [pc, #36]	; (8020ae0 <batteryValueUpdater+0x50>)
 8020aba:	6818      	ldr	r0, [r3, #0]
 8020abc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020ac0:	9300      	str	r3, [sp, #0]
 8020ac2:	2364      	movs	r3, #100	; 0x64
 8020ac4:	2200      	movs	r2, #0
 8020ac6:	2100      	movs	r1, #0
 8020ac8:	f7e5 fc08 	bl	80062dc <lv_obj_align>
}else lv_task_del(t);}
 8020acc:	e002      	b.n	8020ad4 <batteryValueUpdater+0x44>
 8020ace:	6878      	ldr	r0, [r7, #4]
 8020ad0:	f7f3 f9e2 	bl	8013e98 <lv_task_del>
 8020ad4:	bf00      	nop
 8020ad6:	3708      	adds	r7, #8
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bd80      	pop	{r7, pc}
 8020adc:	20006e91 	.word	0x20006e91
 8020ae0:	20006ee0 	.word	0x20006ee0
 8020ae4:	20006eec 	.word	0x20006eec
 8020ae8:	20006e98 	.word	0x20006e98
 8020aec:	20006ee8 	.word	0x20006ee8

08020af0 <bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void bluetoothStatusUpdater(lv_task_t *t){
 8020af0:	b580      	push	{r7, lr}
 8020af2:	b084      	sub	sp, #16
 8020af4:	af02      	add	r7, sp, #8
 8020af6:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020af8:	4b15      	ldr	r3, [pc, #84]	; (8020b50 <bluetoothStatusUpdater+0x60>)
 8020afa:	781b      	ldrb	r3, [r3, #0]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d020      	beq.n	8020b42 <bluetoothStatusUpdater+0x52>
		if(bluetoothStatus){
 8020b00:	4b14      	ldr	r3, [pc, #80]	; (8020b54 <bluetoothStatusUpdater+0x64>)
 8020b02:	781b      	ldrb	r3, [r3, #0]
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d015      	beq.n	8020b34 <bluetoothStatusUpdater+0x44>
		      bluetooth_style.text.color = bluetoothColor;
 8020b08:	4a13      	ldr	r2, [pc, #76]	; (8020b58 <bluetoothStatusUpdater+0x68>)
 8020b0a:	4b14      	ldr	r3, [pc, #80]	; (8020b5c <bluetoothStatusUpdater+0x6c>)
 8020b0c:	881b      	ldrh	r3, [r3, #0]
 8020b0e:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8020b10:	4b13      	ldr	r3, [pc, #76]	; (8020b60 <bluetoothStatusUpdater+0x70>)
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	4913      	ldr	r1, [pc, #76]	; (8020b64 <bluetoothStatusUpdater+0x74>)
 8020b16:	4618      	mov	r0, r3
 8020b18:	f7f8 fe2a 	bl	8019770 <lv_label_set_text>
			  lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8020b1c:	4b10      	ldr	r3, [pc, #64]	; (8020b60 <bluetoothStatusUpdater+0x70>)
 8020b1e:	6818      	ldr	r0, [r3, #0]
 8020b20:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020b24:	9300      	str	r3, [sp, #0]
 8020b26:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8020b2a:	2200      	movs	r2, #0
 8020b2c:	2100      	movs	r1, #0
 8020b2e:	f7e5 fbd5 	bl	80062dc <lv_obj_align>
		}
		else lv_label_set_text(bluetoothLbl, " ");
	}else lv_task_del(t);
}
 8020b32:	e009      	b.n	8020b48 <bluetoothStatusUpdater+0x58>
		else lv_label_set_text(bluetoothLbl, " ");
 8020b34:	4b0a      	ldr	r3, [pc, #40]	; (8020b60 <bluetoothStatusUpdater+0x70>)
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	490b      	ldr	r1, [pc, #44]	; (8020b68 <bluetoothStatusUpdater+0x78>)
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	f7f8 fe18 	bl	8019770 <lv_label_set_text>
}
 8020b40:	e002      	b.n	8020b48 <bluetoothStatusUpdater+0x58>
	}else lv_task_del(t);
 8020b42:	6878      	ldr	r0, [r7, #4]
 8020b44:	f7f3 f9a8 	bl	8013e98 <lv_task_del>
}
 8020b48:	bf00      	nop
 8020b4a:	3708      	adds	r7, #8
 8020b4c:	46bd      	mov	sp, r7
 8020b4e:	bd80      	pop	{r7, pc}
 8020b50:	20006e91 	.word	0x20006e91
 8020b54:	20006e90 	.word	0x20006e90
 8020b58:	20006e30 	.word	0x20006e30
 8020b5c:	20006ed4 	.word	0x20006ed4
 8020b60:	20006e7c 	.word	0x20006e7c
 8020b64:	08029de0 	.word	0x08029de0
 8020b68:	08029e2c 	.word	0x08029e2c
 8020b6c:	00000000 	.word	0x00000000

08020b70 <hours_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set hours 
*/
void hours_angle_loader(void)
{	/*saat 12 veya 0 olduğunda saat çubuğu ilerlemiyor çöz*/
 8020b70:	b590      	push	{r4, r7, lr}
 8020b72:	b085      	sub	sp, #20
 8020b74:	af00      	add	r7, sp, #0
		uint8_t hoursTmpVal=hours;
 8020b76:	4b3a      	ldr	r3, [pc, #232]	; (8020c60 <hours_angle_loader+0xf0>)
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	73fb      	strb	r3, [r7, #15]
		if(hours>=12)hoursTmpVal=hours%12;
 8020b7c:	4b38      	ldr	r3, [pc, #224]	; (8020c60 <hours_angle_loader+0xf0>)
 8020b7e:	781b      	ldrb	r3, [r3, #0]
 8020b80:	2b0b      	cmp	r3, #11
 8020b82:	d90b      	bls.n	8020b9c <hours_angle_loader+0x2c>
 8020b84:	4b36      	ldr	r3, [pc, #216]	; (8020c60 <hours_angle_loader+0xf0>)
 8020b86:	781a      	ldrb	r2, [r3, #0]
 8020b88:	4b36      	ldr	r3, [pc, #216]	; (8020c64 <hours_angle_loader+0xf4>)
 8020b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8020b8e:	08d9      	lsrs	r1, r3, #3
 8020b90:	460b      	mov	r3, r1
 8020b92:	005b      	lsls	r3, r3, #1
 8020b94:	440b      	add	r3, r1
 8020b96:	009b      	lsls	r3, r3, #2
 8020b98:	1ad3      	subs	r3, r2, r3
 8020b9a:	73fb      	strb	r3, [r7, #15]
		double hoursTemp = tos_Ratio(hoursTmpVal*60, 0, 11*60,0, 359);
 8020b9c:	7bfa      	ldrb	r2, [r7, #15]
 8020b9e:	4613      	mov	r3, r2
 8020ba0:	011b      	lsls	r3, r3, #4
 8020ba2:	1a9b      	subs	r3, r3, r2
 8020ba4:	009b      	lsls	r3, r3, #2
 8020ba6:	4618      	mov	r0, r3
 8020ba8:	f7df fccc 	bl	8000544 <__aeabi_i2d>
 8020bac:	4603      	mov	r3, r0
 8020bae:	460c      	mov	r4, r1
 8020bb0:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8020c48 <hours_angle_loader+0xd8>
 8020bb4:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8020c50 <hours_angle_loader+0xe0>
 8020bb8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8020c58 <hours_angle_loader+0xe8>
 8020bbc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8020c50 <hours_angle_loader+0xe0>
 8020bc0:	ec44 3b10 	vmov	d0, r3, r4
 8020bc4:	f005 fe6e 	bl	80268a4 <tos_Ratio>
 8020bc8:	ed87 0b00 	vstr	d0, [r7]
		if(hoursTemp < 180) lv_arc_set_angles(hoursArc, 180-hoursTemp ,180);
 8020bcc:	f04f 0200 	mov.w	r2, #0
 8020bd0:	4b25      	ldr	r3, [pc, #148]	; (8020c68 <hours_angle_loader+0xf8>)
 8020bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020bd6:	f7df ff91 	bl	8000afc <__aeabi_dcmplt>
 8020bda:	4603      	mov	r3, r0
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d016      	beq.n	8020c0e <hours_angle_loader+0x9e>
 8020be0:	4b22      	ldr	r3, [pc, #136]	; (8020c6c <hours_angle_loader+0xfc>)
 8020be2:	681c      	ldr	r4, [r3, #0]
 8020be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020be8:	f04f 0000 	mov.w	r0, #0
 8020bec:	491e      	ldr	r1, [pc, #120]	; (8020c68 <hours_angle_loader+0xf8>)
 8020bee:	f7df fb5b 	bl	80002a8 <__aeabi_dsub>
 8020bf2:	4602      	mov	r2, r0
 8020bf4:	460b      	mov	r3, r1
 8020bf6:	4610      	mov	r0, r2
 8020bf8:	4619      	mov	r1, r3
 8020bfa:	f7df ffe5 	bl	8000bc8 <__aeabi_d2uiz>
 8020bfe:	4603      	mov	r3, r0
 8020c00:	b29b      	uxth	r3, r3
 8020c02:	22b4      	movs	r2, #180	; 0xb4
 8020c04:	4619      	mov	r1, r3
 8020c06:	4620      	mov	r0, r4
 8020c08:	f7f3 fefa 	bl	8014a00 <lv_arc_set_angles>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
}
 8020c0c:	e015      	b.n	8020c3a <hours_angle_loader+0xca>
		    else lv_arc_set_angles(hoursArc, 540-hoursTemp ,180);
 8020c0e:	4b17      	ldr	r3, [pc, #92]	; (8020c6c <hours_angle_loader+0xfc>)
 8020c10:	681c      	ldr	r4, [r3, #0]
 8020c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020c16:	f04f 0000 	mov.w	r0, #0
 8020c1a:	4915      	ldr	r1, [pc, #84]	; (8020c70 <hours_angle_loader+0x100>)
 8020c1c:	f7df fb44 	bl	80002a8 <__aeabi_dsub>
 8020c20:	4602      	mov	r2, r0
 8020c22:	460b      	mov	r3, r1
 8020c24:	4610      	mov	r0, r2
 8020c26:	4619      	mov	r1, r3
 8020c28:	f7df ffce 	bl	8000bc8 <__aeabi_d2uiz>
 8020c2c:	4603      	mov	r3, r0
 8020c2e:	b29b      	uxth	r3, r3
 8020c30:	22b4      	movs	r2, #180	; 0xb4
 8020c32:	4619      	mov	r1, r3
 8020c34:	4620      	mov	r0, r4
 8020c36:	f7f3 fee3 	bl	8014a00 <lv_arc_set_angles>
}
 8020c3a:	bf00      	nop
 8020c3c:	3714      	adds	r7, #20
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	bd90      	pop	{r4, r7, pc}
 8020c42:	bf00      	nop
 8020c44:	f3af 8000 	nop.w
 8020c48:	00000000 	.word	0x00000000
 8020c4c:	40767000 	.word	0x40767000
	...
 8020c5c:	4084a000 	.word	0x4084a000
 8020c60:	20006ef5 	.word	0x20006ef5
 8020c64:	aaaaaaab 	.word	0xaaaaaaab
 8020c68:	40668000 	.word	0x40668000
 8020c6c:	20006e2c 	.word	0x20006e2c
 8020c70:	4080e000 	.word	0x4080e000
 8020c74:	00000000 	.word	0x00000000

08020c78 <minutes_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set minutes
*/
void minutes_angle_loader(void)
{
 8020c78:	b590      	push	{r4, r7, lr}
 8020c7a:	b083      	sub	sp, #12
 8020c7c:	af00      	add	r7, sp, #0
	double minutesTemp = tos_Ratio(minutes*60, 0, 59*60, 0, 359);
 8020c7e:	4b30      	ldr	r3, [pc, #192]	; (8020d40 <minutes_angle_loader+0xc8>)
 8020c80:	781b      	ldrb	r3, [r3, #0]
 8020c82:	461a      	mov	r2, r3
 8020c84:	4613      	mov	r3, r2
 8020c86:	011b      	lsls	r3, r3, #4
 8020c88:	1a9b      	subs	r3, r3, r2
 8020c8a:	009b      	lsls	r3, r3, #2
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	f7df fc59 	bl	8000544 <__aeabi_i2d>
 8020c92:	4603      	mov	r3, r0
 8020c94:	460c      	mov	r4, r1
 8020c96:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8020d28 <minutes_angle_loader+0xb0>
 8020c9a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8020d30 <minutes_angle_loader+0xb8>
 8020c9e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8020d38 <minutes_angle_loader+0xc0>
 8020ca2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020d30 <minutes_angle_loader+0xb8>
 8020ca6:	ec44 3b10 	vmov	d0, r3, r4
 8020caa:	f005 fdfb 	bl	80268a4 <tos_Ratio>
 8020cae:	ed87 0b00 	vstr	d0, [r7]
		if(minutesTemp < 180) lv_arc_set_angles(minutesArc, 180-minutesTemp ,180);
 8020cb2:	f04f 0200 	mov.w	r2, #0
 8020cb6:	4b23      	ldr	r3, [pc, #140]	; (8020d44 <minutes_angle_loader+0xcc>)
 8020cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020cbc:	f7df ff1e 	bl	8000afc <__aeabi_dcmplt>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d016      	beq.n	8020cf4 <minutes_angle_loader+0x7c>
 8020cc6:	4b20      	ldr	r3, [pc, #128]	; (8020d48 <minutes_angle_loader+0xd0>)
 8020cc8:	681c      	ldr	r4, [r3, #0]
 8020cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020cce:	f04f 0000 	mov.w	r0, #0
 8020cd2:	491c      	ldr	r1, [pc, #112]	; (8020d44 <minutes_angle_loader+0xcc>)
 8020cd4:	f7df fae8 	bl	80002a8 <__aeabi_dsub>
 8020cd8:	4602      	mov	r2, r0
 8020cda:	460b      	mov	r3, r1
 8020cdc:	4610      	mov	r0, r2
 8020cde:	4619      	mov	r1, r3
 8020ce0:	f7df ff72 	bl	8000bc8 <__aeabi_d2uiz>
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	b29b      	uxth	r3, r3
 8020ce8:	22b4      	movs	r2, #180	; 0xb4
 8020cea:	4619      	mov	r1, r3
 8020cec:	4620      	mov	r0, r4
 8020cee:	f7f3 fe87 	bl	8014a00 <lv_arc_set_angles>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);

}
 8020cf2:	e015      	b.n	8020d20 <minutes_angle_loader+0xa8>
		    else lv_arc_set_angles(minutesArc, 540-minutesTemp ,180);
 8020cf4:	4b14      	ldr	r3, [pc, #80]	; (8020d48 <minutes_angle_loader+0xd0>)
 8020cf6:	681c      	ldr	r4, [r3, #0]
 8020cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4912      	ldr	r1, [pc, #72]	; (8020d4c <minutes_angle_loader+0xd4>)
 8020d02:	f7df fad1 	bl	80002a8 <__aeabi_dsub>
 8020d06:	4602      	mov	r2, r0
 8020d08:	460b      	mov	r3, r1
 8020d0a:	4610      	mov	r0, r2
 8020d0c:	4619      	mov	r1, r3
 8020d0e:	f7df ff5b 	bl	8000bc8 <__aeabi_d2uiz>
 8020d12:	4603      	mov	r3, r0
 8020d14:	b29b      	uxth	r3, r3
 8020d16:	22b4      	movs	r2, #180	; 0xb4
 8020d18:	4619      	mov	r1, r3
 8020d1a:	4620      	mov	r0, r4
 8020d1c:	f7f3 fe70 	bl	8014a00 <lv_arc_set_angles>
}
 8020d20:	bf00      	nop
 8020d22:	370c      	adds	r7, #12
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd90      	pop	{r4, r7, pc}
 8020d28:	00000000 	.word	0x00000000
 8020d2c:	40767000 	.word	0x40767000
	...
 8020d3c:	40aba800 	.word	0x40aba800
 8020d40:	20006ef4 	.word	0x20006ef4
 8020d44:	40668000 	.word	0x40668000
 8020d48:	20006e6c 	.word	0x20006e6c
 8020d4c:	4080e000 	.word	0x4080e000

08020d50 <seconds_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set Seconds
*/
void seconds_angle_loader(void)
{
 8020d50:	b590      	push	{r4, r7, lr}
 8020d52:	b083      	sub	sp, #12
 8020d54:	af00      	add	r7, sp, #0
	double secondsTemp = tos_Ratio(seconds, 0, 59, 0, 359);
 8020d56:	4b2e      	ldr	r3, [pc, #184]	; (8020e10 <seconds_angle_loader+0xc0>)
 8020d58:	781b      	ldrb	r3, [r3, #0]
 8020d5a:	4618      	mov	r0, r3
 8020d5c:	f7df fbe2 	bl	8000524 <__aeabi_ui2d>
 8020d60:	4603      	mov	r3, r0
 8020d62:	460c      	mov	r4, r1
 8020d64:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8020df8 <seconds_angle_loader+0xa8>
 8020d68:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8020e00 <seconds_angle_loader+0xb0>
 8020d6c:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8020e08 <seconds_angle_loader+0xb8>
 8020d70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020e00 <seconds_angle_loader+0xb0>
 8020d74:	ec44 3b10 	vmov	d0, r3, r4
 8020d78:	f005 fd94 	bl	80268a4 <tos_Ratio>
 8020d7c:	ed87 0b00 	vstr	d0, [r7]
		if(secondsTemp < 180) lv_arc_set_angles(secondsArc, 180-secondsTemp ,180);
 8020d80:	f04f 0200 	mov.w	r2, #0
 8020d84:	4b23      	ldr	r3, [pc, #140]	; (8020e14 <seconds_angle_loader+0xc4>)
 8020d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020d8a:	f7df feb7 	bl	8000afc <__aeabi_dcmplt>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d016      	beq.n	8020dc2 <seconds_angle_loader+0x72>
 8020d94:	4b20      	ldr	r3, [pc, #128]	; (8020e18 <seconds_angle_loader+0xc8>)
 8020d96:	681c      	ldr	r4, [r3, #0]
 8020d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020d9c:	f04f 0000 	mov.w	r0, #0
 8020da0:	491c      	ldr	r1, [pc, #112]	; (8020e14 <seconds_angle_loader+0xc4>)
 8020da2:	f7df fa81 	bl	80002a8 <__aeabi_dsub>
 8020da6:	4602      	mov	r2, r0
 8020da8:	460b      	mov	r3, r1
 8020daa:	4610      	mov	r0, r2
 8020dac:	4619      	mov	r1, r3
 8020dae:	f7df ff0b 	bl	8000bc8 <__aeabi_d2uiz>
 8020db2:	4603      	mov	r3, r0
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	22b4      	movs	r2, #180	; 0xb4
 8020db8:	4619      	mov	r1, r3
 8020dba:	4620      	mov	r0, r4
 8020dbc:	f7f3 fe20 	bl	8014a00 <lv_arc_set_angles>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);

}
 8020dc0:	e015      	b.n	8020dee <seconds_angle_loader+0x9e>
		    else lv_arc_set_angles(secondsArc, 540-secondsTemp ,180);
 8020dc2:	4b15      	ldr	r3, [pc, #84]	; (8020e18 <seconds_angle_loader+0xc8>)
 8020dc4:	681c      	ldr	r4, [r3, #0]
 8020dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020dca:	f04f 0000 	mov.w	r0, #0
 8020dce:	4913      	ldr	r1, [pc, #76]	; (8020e1c <seconds_angle_loader+0xcc>)
 8020dd0:	f7df fa6a 	bl	80002a8 <__aeabi_dsub>
 8020dd4:	4602      	mov	r2, r0
 8020dd6:	460b      	mov	r3, r1
 8020dd8:	4610      	mov	r0, r2
 8020dda:	4619      	mov	r1, r3
 8020ddc:	f7df fef4 	bl	8000bc8 <__aeabi_d2uiz>
 8020de0:	4603      	mov	r3, r0
 8020de2:	b29b      	uxth	r3, r3
 8020de4:	22b4      	movs	r2, #180	; 0xb4
 8020de6:	4619      	mov	r1, r3
 8020de8:	4620      	mov	r0, r4
 8020dea:	f7f3 fe09 	bl	8014a00 <lv_arc_set_angles>
}
 8020dee:	bf00      	nop
 8020df0:	370c      	adds	r7, #12
 8020df2:	46bd      	mov	sp, r7
 8020df4:	bd90      	pop	{r4, r7, pc}
 8020df6:	bf00      	nop
 8020df8:	00000000 	.word	0x00000000
 8020dfc:	40767000 	.word	0x40767000
	...
 8020e0c:	404d8000 	.word	0x404d8000
 8020e10:	20006ee4 	.word	0x20006ee4
 8020e14:	40668000 	.word	0x40668000
 8020e18:	20006e1c 	.word	0x20006e1c
 8020e1c:	4080e000 	.word	0x4080e000

08020e20 <digitalTimePrintTheScreen>:

/* This function using for digital clock print to screen*/
void digitalTimePrintTheScreen(lv_task_t *t){
 8020e20:	b580      	push	{r7, lr}
 8020e22:	b084      	sub	sp, #16
 8020e24:	af02      	add	r7, sp, #8
 8020e26:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020e28:	4b3f      	ldr	r3, [pc, #252]	; (8020f28 <digitalTimePrintTheScreen+0x108>)
 8020e2a:	781b      	ldrb	r3, [r3, #0]
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d073      	beq.n	8020f18 <digitalTimePrintTheScreen+0xf8>
		snprintf(buffer, 9, "%02d:%02d:%02d", hours,minutes,seconds);
 8020e30:	4b3e      	ldr	r3, [pc, #248]	; (8020f2c <digitalTimePrintTheScreen+0x10c>)
 8020e32:	781b      	ldrb	r3, [r3, #0]
 8020e34:	4619      	mov	r1, r3
 8020e36:	4b3e      	ldr	r3, [pc, #248]	; (8020f30 <digitalTimePrintTheScreen+0x110>)
 8020e38:	781b      	ldrb	r3, [r3, #0]
 8020e3a:	461a      	mov	r2, r3
 8020e3c:	4b3d      	ldr	r3, [pc, #244]	; (8020f34 <digitalTimePrintTheScreen+0x114>)
 8020e3e:	781b      	ldrb	r3, [r3, #0]
 8020e40:	9301      	str	r3, [sp, #4]
 8020e42:	9200      	str	r2, [sp, #0]
 8020e44:	460b      	mov	r3, r1
 8020e46:	4a3c      	ldr	r2, [pc, #240]	; (8020f38 <digitalTimePrintTheScreen+0x118>)
 8020e48:	2109      	movs	r1, #9
 8020e4a:	483c      	ldr	r0, [pc, #240]	; (8020f3c <digitalTimePrintTheScreen+0x11c>)
 8020e4c:	f006 ff12 	bl	8027c74 <sniprintf>
		    lv_label_set_text(digitalClock, buffer);
 8020e50:	4b3b      	ldr	r3, [pc, #236]	; (8020f40 <digitalTimePrintTheScreen+0x120>)
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	4939      	ldr	r1, [pc, #228]	; (8020f3c <digitalTimePrintTheScreen+0x11c>)
 8020e56:	4618      	mov	r0, r3
 8020e58:	f7f8 fc8a 	bl	8019770 <lv_label_set_text>
			lv_obj_align(digitalClock, NULL, LV_ALIGN_CENTER, 0, -75);
 8020e5c:	4b38      	ldr	r3, [pc, #224]	; (8020f40 <digitalTimePrintTheScreen+0x120>)
 8020e5e:	6818      	ldr	r0, [r3, #0]
 8020e60:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8020e64:	9300      	str	r3, [sp, #0]
 8020e66:	2300      	movs	r3, #0
 8020e68:	2200      	movs	r2, #0
 8020e6a:	2100      	movs	r1, #0
 8020e6c:	f7e5 fa36 	bl	80062dc <lv_obj_align>
			        //Digital Date
			    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8020e70:	4b34      	ldr	r3, [pc, #208]	; (8020f44 <digitalTimePrintTheScreen+0x124>)
 8020e72:	781b      	ldrb	r3, [r3, #0]
 8020e74:	4619      	mov	r1, r3
 8020e76:	4b34      	ldr	r3, [pc, #208]	; (8020f48 <digitalTimePrintTheScreen+0x128>)
 8020e78:	781b      	ldrb	r3, [r3, #0]
 8020e7a:	461a      	mov	r2, r3
 8020e7c:	4b33      	ldr	r3, [pc, #204]	; (8020f4c <digitalTimePrintTheScreen+0x12c>)
 8020e7e:	881b      	ldrh	r3, [r3, #0]
 8020e80:	9301      	str	r3, [sp, #4]
 8020e82:	9200      	str	r2, [sp, #0]
 8020e84:	460b      	mov	r3, r1
 8020e86:	4a32      	ldr	r2, [pc, #200]	; (8020f50 <digitalTimePrintTheScreen+0x130>)
 8020e88:	2110      	movs	r1, #16
 8020e8a:	482c      	ldr	r0, [pc, #176]	; (8020f3c <digitalTimePrintTheScreen+0x11c>)
 8020e8c:	f006 fef2 	bl	8027c74 <sniprintf>
					lv_label_set_text(digitalDate, buffer);
 8020e90:	4b30      	ldr	r3, [pc, #192]	; (8020f54 <digitalTimePrintTheScreen+0x134>)
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	4929      	ldr	r1, [pc, #164]	; (8020f3c <digitalTimePrintTheScreen+0x11c>)
 8020e96:	4618      	mov	r0, r3
 8020e98:	f7f8 fc6a 	bl	8019770 <lv_label_set_text>
			    	//Week Day
			    	lv_label_set_text(weekDay, weekDayStr);
 8020e9c:	4b2e      	ldr	r3, [pc, #184]	; (8020f58 <digitalTimePrintTheScreen+0x138>)
 8020e9e:	681a      	ldr	r2, [r3, #0]
 8020ea0:	4b2e      	ldr	r3, [pc, #184]	; (8020f5c <digitalTimePrintTheScreen+0x13c>)
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	4619      	mov	r1, r3
 8020ea6:	4610      	mov	r0, r2
 8020ea8:	f7f8 fc62 	bl	8019770 <lv_label_set_text>
			    	dateTmp=date;
 8020eac:	4b25      	ldr	r3, [pc, #148]	; (8020f44 <digitalTimePrintTheScreen+0x124>)
 8020eae:	781a      	ldrb	r2, [r3, #0]
 8020eb0:	4b2b      	ldr	r3, [pc, #172]	; (8020f60 <digitalTimePrintTheScreen+0x140>)
 8020eb2:	701a      	strb	r2, [r3, #0]

					switch(MainScreenType){
 8020eb4:	4b2b      	ldr	r3, [pc, #172]	; (8020f64 <digitalTimePrintTheScreen+0x144>)
 8020eb6:	781b      	ldrb	r3, [r3, #0]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d002      	beq.n	8020ec2 <digitalTimePrintTheScreen+0xa2>
 8020ebc:	2b01      	cmp	r3, #1
 8020ebe:	d015      	beq.n	8020eec <digitalTimePrintTheScreen+0xcc>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
					break;
					}
	}else lv_task_del(t);
}
 8020ec0:	e02e      	b.n	8020f20 <digitalTimePrintTheScreen+0x100>
					case 0: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -55);
 8020ec2:	4b24      	ldr	r3, [pc, #144]	; (8020f54 <digitalTimePrintTheScreen+0x134>)
 8020ec4:	6818      	ldr	r0, [r3, #0]
 8020ec6:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8020eca:	9300      	str	r3, [sp, #0]
 8020ecc:	2300      	movs	r3, #0
 8020ece:	2200      	movs	r2, #0
 8020ed0:	2100      	movs	r1, #0
 8020ed2:	f7e5 fa03 	bl	80062dc <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -35);
 8020ed6:	4b20      	ldr	r3, [pc, #128]	; (8020f58 <digitalTimePrintTheScreen+0x138>)
 8020ed8:	6818      	ldr	r0, [r3, #0]
 8020eda:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020ede:	9300      	str	r3, [sp, #0]
 8020ee0:	2300      	movs	r3, #0
 8020ee2:	2200      	movs	r2, #0
 8020ee4:	2100      	movs	r1, #0
 8020ee6:	f7e5 f9f9 	bl	80062dc <lv_obj_align>
					break;
 8020eea:	e019      	b.n	8020f20 <digitalTimePrintTheScreen+0x100>
					case 1: lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8020eec:	4b19      	ldr	r3, [pc, #100]	; (8020f54 <digitalTimePrintTheScreen+0x134>)
 8020eee:	6818      	ldr	r0, [r3, #0]
 8020ef0:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020ef4:	9300      	str	r3, [sp, #0]
 8020ef6:	2300      	movs	r3, #0
 8020ef8:	2200      	movs	r2, #0
 8020efa:	2100      	movs	r1, #0
 8020efc:	f7e5 f9ee 	bl	80062dc <lv_obj_align>
			    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020f00:	4b15      	ldr	r3, [pc, #84]	; (8020f58 <digitalTimePrintTheScreen+0x138>)
 8020f02:	6818      	ldr	r0, [r3, #0]
 8020f04:	f06f 0309 	mvn.w	r3, #9
 8020f08:	9300      	str	r3, [sp, #0]
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	2200      	movs	r2, #0
 8020f0e:	2100      	movs	r1, #0
 8020f10:	f7e5 f9e4 	bl	80062dc <lv_obj_align>
					break;
 8020f14:	bf00      	nop
 8020f16:	e003      	b.n	8020f20 <digitalTimePrintTheScreen+0x100>
	}else lv_task_del(t);
 8020f18:	6878      	ldr	r0, [r7, #4]
 8020f1a:	f7f2 ffbd 	bl	8013e98 <lv_task_del>
}
 8020f1e:	e7ff      	b.n	8020f20 <digitalTimePrintTheScreen+0x100>
 8020f20:	bf00      	nop
 8020f22:	3708      	adds	r7, #8
 8020f24:	46bd      	mov	sp, r7
 8020f26:	bd80      	pop	{r7, pc}
 8020f28:	20006e91 	.word	0x20006e91
 8020f2c:	20006ef5 	.word	0x20006ef5
 8020f30:	20006ef4 	.word	0x20006ef4
 8020f34:	20006ee4 	.word	0x20006ee4
 8020f38:	08029e1c 	.word	0x08029e1c
 8020f3c:	20006e80 	.word	0x20006e80
 8020f40:	20006e20 	.word	0x20006e20
 8020f44:	200073c4 	.word	0x200073c4
 8020f48:	20006e24 	.word	0x20006e24
 8020f4c:	20006ee6 	.word	0x20006ee6
 8020f50:	08029dfc 	.word	0x08029dfc
 8020f54:	20006e18 	.word	0x20006e18
 8020f58:	20006e10 	.word	0x20006e10
 8020f5c:	20006e74 	.word	0x20006e74
 8020f60:	20006e0c 	.word	0x20006e0c
 8020f64:	20006e14 	.word	0x20006e14

08020f68 <analogueDataPrintTheScreen>:
/*This function using for date and week day print to screen on analogue clock*/
void analogueDataPrintTheScreen(lv_task_t *t){
 8020f68:	b580      	push	{r7, lr}
 8020f6a:	b084      	sub	sp, #16
 8020f6c:	af02      	add	r7, sp, #8
 8020f6e:	6078      	str	r0, [r7, #4]
	if(MS_taskController){
 8020f70:	4b20      	ldr	r3, [pc, #128]	; (8020ff4 <analogueDataPrintTheScreen+0x8c>)
 8020f72:	781b      	ldrb	r3, [r3, #0]
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d036      	beq.n	8020fe6 <analogueDataPrintTheScreen+0x7e>
		 //Digital Date
			snprintf(buffer, 16, " "); //For cleaning buff
 8020f78:	4a1f      	ldr	r2, [pc, #124]	; (8020ff8 <analogueDataPrintTheScreen+0x90>)
 8020f7a:	4b20      	ldr	r3, [pc, #128]	; (8020ffc <analogueDataPrintTheScreen+0x94>)
 8020f7c:	881b      	ldrh	r3, [r3, #0]
 8020f7e:	8013      	strh	r3, [r2, #0]
		    	snprintf(buffer, 16, "%02d:%02d:%04d", date,month,year);
 8020f80:	4b1f      	ldr	r3, [pc, #124]	; (8021000 <analogueDataPrintTheScreen+0x98>)
 8020f82:	781b      	ldrb	r3, [r3, #0]
 8020f84:	4619      	mov	r1, r3
 8020f86:	4b1f      	ldr	r3, [pc, #124]	; (8021004 <analogueDataPrintTheScreen+0x9c>)
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	461a      	mov	r2, r3
 8020f8c:	4b1e      	ldr	r3, [pc, #120]	; (8021008 <analogueDataPrintTheScreen+0xa0>)
 8020f8e:	881b      	ldrh	r3, [r3, #0]
 8020f90:	9301      	str	r3, [sp, #4]
 8020f92:	9200      	str	r2, [sp, #0]
 8020f94:	460b      	mov	r3, r1
 8020f96:	4a1d      	ldr	r2, [pc, #116]	; (802100c <analogueDataPrintTheScreen+0xa4>)
 8020f98:	2110      	movs	r1, #16
 8020f9a:	4817      	ldr	r0, [pc, #92]	; (8020ff8 <analogueDataPrintTheScreen+0x90>)
 8020f9c:	f006 fe6a 	bl	8027c74 <sniprintf>
				lv_label_set_text(digitalDate, buffer);
 8020fa0:	4b1b      	ldr	r3, [pc, #108]	; (8021010 <analogueDataPrintTheScreen+0xa8>)
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	4914      	ldr	r1, [pc, #80]	; (8020ff8 <analogueDataPrintTheScreen+0x90>)
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f7f8 fbe2 	bl	8019770 <lv_label_set_text>
		    	//Week Day
		    	lv_label_set_text(weekDay, weekDayStr);
 8020fac:	4b19      	ldr	r3, [pc, #100]	; (8021014 <analogueDataPrintTheScreen+0xac>)
 8020fae:	681a      	ldr	r2, [r3, #0]
 8020fb0:	4b19      	ldr	r3, [pc, #100]	; (8021018 <analogueDataPrintTheScreen+0xb0>)
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	4619      	mov	r1, r3
 8020fb6:	4610      	mov	r0, r2
 8020fb8:	f7f8 fbda 	bl	8019770 <lv_label_set_text>
		    	lv_obj_align(digitalDate, NULL, LV_ALIGN_CENTER, 0, -35);
 8020fbc:	4b14      	ldr	r3, [pc, #80]	; (8021010 <analogueDataPrintTheScreen+0xa8>)
 8020fbe:	6818      	ldr	r0, [r3, #0]
 8020fc0:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8020fc4:	9300      	str	r3, [sp, #0]
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	2200      	movs	r2, #0
 8020fca:	2100      	movs	r1, #0
 8020fcc:	f7e5 f986 	bl	80062dc <lv_obj_align>
		    	lv_obj_align(weekDay, NULL, LV_ALIGN_CENTER, 0, -10);
 8020fd0:	4b10      	ldr	r3, [pc, #64]	; (8021014 <analogueDataPrintTheScreen+0xac>)
 8020fd2:	6818      	ldr	r0, [r3, #0]
 8020fd4:	f06f 0309 	mvn.w	r3, #9
 8020fd8:	9300      	str	r3, [sp, #0]
 8020fda:	2300      	movs	r3, #0
 8020fdc:	2200      	movs	r2, #0
 8020fde:	2100      	movs	r1, #0
 8020fe0:	f7e5 f97c 	bl	80062dc <lv_obj_align>
	}else lv_task_del(t);
}
 8020fe4:	e002      	b.n	8020fec <analogueDataPrintTheScreen+0x84>
	}else lv_task_del(t);
 8020fe6:	6878      	ldr	r0, [r7, #4]
 8020fe8:	f7f2 ff56 	bl	8013e98 <lv_task_del>
}
 8020fec:	bf00      	nop
 8020fee:	3708      	adds	r7, #8
 8020ff0:	46bd      	mov	sp, r7
 8020ff2:	bd80      	pop	{r7, pc}
 8020ff4:	20006e91 	.word	0x20006e91
 8020ff8:	20006e80 	.word	0x20006e80
 8020ffc:	08029e2c 	.word	0x08029e2c
 8021000:	200073c4 	.word	0x200073c4
 8021004:	20006e24 	.word	0x20006e24
 8021008:	20006ee6 	.word	0x20006ee6
 802100c:	08029dfc 	.word	0x08029dfc
 8021010:	20006e18 	.word	0x20006e18
 8021014:	20006e10 	.word	0x20006e10
 8021018:	20006e74 	.word	0x20006e74
 802101c:	00000000 	.word	0x00000000

08021020 <steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void steps_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8021020:	b590      	push	{r4, r7, lr}
 8021022:	b087      	sub	sp, #28
 8021024:	af02      	add	r7, sp, #8
 8021026:	6078      	str	r0, [r7, #4]
 8021028:	4b45      	ldr	r3, [pc, #276]	; (8021140 <steps_angle_loader+0x120>)
 802102a:	781b      	ldrb	r3, [r3, #0]
 802102c:	2b00      	cmp	r3, #0
 802102e:	d072      	beq.n	8021116 <steps_angle_loader+0xf6>
	snprintf(buffer, 8, "%04d", steps);
 8021030:	4b44      	ldr	r3, [pc, #272]	; (8021144 <steps_angle_loader+0x124>)
 8021032:	881b      	ldrh	r3, [r3, #0]
 8021034:	4a44      	ldr	r2, [pc, #272]	; (8021148 <steps_angle_loader+0x128>)
 8021036:	2108      	movs	r1, #8
 8021038:	4844      	ldr	r0, [pc, #272]	; (802114c <steps_angle_loader+0x12c>)
 802103a:	f006 fe1b 	bl	8027c74 <sniprintf>
		 lv_label_set_text(stepsLbl, buffer);
 802103e:	4b44      	ldr	r3, [pc, #272]	; (8021150 <steps_angle_loader+0x130>)
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	4942      	ldr	r1, [pc, #264]	; (802114c <steps_angle_loader+0x12c>)
 8021044:	4618      	mov	r0, r3
 8021046:	f7f8 fb93 	bl	8019770 <lv_label_set_text>
		 if(MainScreenType ==tos_mainScreen_Type3)lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -40, 40);
 802104a:	4b42      	ldr	r3, [pc, #264]	; (8021154 <steps_angle_loader+0x134>)
 802104c:	781b      	ldrb	r3, [r3, #0]
 802104e:	2b02      	cmp	r3, #2
 8021050:	d10a      	bne.n	8021068 <steps_angle_loader+0x48>
 8021052:	4b3f      	ldr	r3, [pc, #252]	; (8021150 <steps_angle_loader+0x130>)
 8021054:	6818      	ldr	r0, [r3, #0]
 8021056:	2328      	movs	r3, #40	; 0x28
 8021058:	9300      	str	r3, [sp, #0]
 802105a:	f06f 0327 	mvn.w	r3, #39	; 0x27
 802105e:	2200      	movs	r2, #0
 8021060:	2100      	movs	r1, #0
 8021062:	f7e5 f93b 	bl	80062dc <lv_obj_align>
 8021066:	e009      	b.n	802107c <steps_angle_loader+0x5c>
		 else lv_obj_align(stepsLbl, NULL, LV_ALIGN_CENTER, -60, 40);
 8021068:	4b39      	ldr	r3, [pc, #228]	; (8021150 <steps_angle_loader+0x130>)
 802106a:	6818      	ldr	r0, [r3, #0]
 802106c:	2328      	movs	r3, #40	; 0x28
 802106e:	9300      	str	r3, [sp, #0]
 8021070:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8021074:	2200      	movs	r2, #0
 8021076:	2100      	movs	r1, #0
 8021078:	f7e5 f930 	bl	80062dc <lv_obj_align>

		double stepsTemp = tos_Ratio(steps, 0, 10000, 0, 359);
 802107c:	4b31      	ldr	r3, [pc, #196]	; (8021144 <steps_angle_loader+0x124>)
 802107e:	881b      	ldrh	r3, [r3, #0]
 8021080:	4618      	mov	r0, r3
 8021082:	f7df fa4f 	bl	8000524 <__aeabi_ui2d>
 8021086:	4603      	mov	r3, r0
 8021088:	460c      	mov	r4, r1
 802108a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8021128 <steps_angle_loader+0x108>
 802108e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8021130 <steps_angle_loader+0x110>
 8021092:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8021138 <steps_angle_loader+0x118>
 8021096:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8021130 <steps_angle_loader+0x110>
 802109a:	ec44 3b10 	vmov	d0, r3, r4
 802109e:	f005 fc01 	bl	80268a4 <tos_Ratio>
 80210a2:	ed87 0b02 	vstr	d0, [r7, #8]
		if(stepsTemp < 180) lv_arc_set_angles(stepsArc, 180-stepsTemp ,180);
 80210a6:	f04f 0200 	mov.w	r2, #0
 80210aa:	4b2b      	ldr	r3, [pc, #172]	; (8021158 <steps_angle_loader+0x138>)
 80210ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80210b0:	f7df fd24 	bl	8000afc <__aeabi_dcmplt>
 80210b4:	4603      	mov	r3, r0
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d016      	beq.n	80210e8 <steps_angle_loader+0xc8>
 80210ba:	4b28      	ldr	r3, [pc, #160]	; (802115c <steps_angle_loader+0x13c>)
 80210bc:	681c      	ldr	r4, [r3, #0]
 80210be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210c2:	f04f 0000 	mov.w	r0, #0
 80210c6:	4924      	ldr	r1, [pc, #144]	; (8021158 <steps_angle_loader+0x138>)
 80210c8:	f7df f8ee 	bl	80002a8 <__aeabi_dsub>
 80210cc:	4602      	mov	r2, r0
 80210ce:	460b      	mov	r3, r1
 80210d0:	4610      	mov	r0, r2
 80210d2:	4619      	mov	r1, r3
 80210d4:	f7df fd78 	bl	8000bc8 <__aeabi_d2uiz>
 80210d8:	4603      	mov	r3, r0
 80210da:	b29b      	uxth	r3, r3
 80210dc:	22b4      	movs	r2, #180	; 0xb4
 80210de:	4619      	mov	r1, r3
 80210e0:	4620      	mov	r0, r4
 80210e2:	f7f3 fc8d 	bl	8014a00 <lv_arc_set_angles>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
}else lv_task_del(t);
}
 80210e6:	e019      	b.n	802111c <steps_angle_loader+0xfc>
		    else lv_arc_set_angles(stepsArc, 540-stepsTemp ,180);
 80210e8:	4b1c      	ldr	r3, [pc, #112]	; (802115c <steps_angle_loader+0x13c>)
 80210ea:	681c      	ldr	r4, [r3, #0]
 80210ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210f0:	f04f 0000 	mov.w	r0, #0
 80210f4:	491a      	ldr	r1, [pc, #104]	; (8021160 <steps_angle_loader+0x140>)
 80210f6:	f7df f8d7 	bl	80002a8 <__aeabi_dsub>
 80210fa:	4602      	mov	r2, r0
 80210fc:	460b      	mov	r3, r1
 80210fe:	4610      	mov	r0, r2
 8021100:	4619      	mov	r1, r3
 8021102:	f7df fd61 	bl	8000bc8 <__aeabi_d2uiz>
 8021106:	4603      	mov	r3, r0
 8021108:	b29b      	uxth	r3, r3
 802110a:	22b4      	movs	r2, #180	; 0xb4
 802110c:	4619      	mov	r1, r3
 802110e:	4620      	mov	r0, r4
 8021110:	f7f3 fc76 	bl	8014a00 <lv_arc_set_angles>
}
 8021114:	e002      	b.n	802111c <steps_angle_loader+0xfc>
}else lv_task_del(t);
 8021116:	6878      	ldr	r0, [r7, #4]
 8021118:	f7f2 febe 	bl	8013e98 <lv_task_del>
}
 802111c:	bf00      	nop
 802111e:	3714      	adds	r7, #20
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}
 8021124:	f3af 8000 	nop.w
 8021128:	00000000 	.word	0x00000000
 802112c:	40767000 	.word	0x40767000
	...
 802113c:	40c38800 	.word	0x40c38800
 8021140:	20006e91 	.word	0x20006e91
 8021144:	20006e70 	.word	0x20006e70
 8021148:	08029de4 	.word	0x08029de4
 802114c:	20006e80 	.word	0x20006e80
 8021150:	20006e94 	.word	0x20006e94
 8021154:	20006e14 	.word	0x20006e14
 8021158:	40668000 	.word	0x40668000
 802115c:	20006e78 	.word	0x20006e78
 8021160:	4080e000 	.word	0x4080e000
 8021164:	00000000 	.word	0x00000000

08021168 <kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCals
*/
void kCals_angle_loader(lv_task_t *t)
{	if(MS_taskController){
 8021168:	b590      	push	{r4, r7, lr}
 802116a:	b087      	sub	sp, #28
 802116c:	af02      	add	r7, sp, #8
 802116e:	6078      	str	r0, [r7, #4]
 8021170:	4b43      	ldr	r3, [pc, #268]	; (8021280 <kCals_angle_loader+0x118>)
 8021172:	781b      	ldrb	r3, [r3, #0]
 8021174:	2b00      	cmp	r3, #0
 8021176:	d070      	beq.n	802125a <kCals_angle_loader+0xf2>
	 	 	 snprintf(buffer, 8, "%04d", kCals);
 8021178:	4b42      	ldr	r3, [pc, #264]	; (8021284 <kCals_angle_loader+0x11c>)
 802117a:	881b      	ldrh	r3, [r3, #0]
 802117c:	4a42      	ldr	r2, [pc, #264]	; (8021288 <kCals_angle_loader+0x120>)
 802117e:	2108      	movs	r1, #8
 8021180:	4842      	ldr	r0, [pc, #264]	; (802128c <kCals_angle_loader+0x124>)
 8021182:	f006 fd77 	bl	8027c74 <sniprintf>
			 lv_label_set_text(kCalsLbl, buffer);
 8021186:	4b42      	ldr	r3, [pc, #264]	; (8021290 <kCals_angle_loader+0x128>)
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	4940      	ldr	r1, [pc, #256]	; (802128c <kCals_angle_loader+0x124>)
 802118c:	4618      	mov	r0, r3
 802118e:	f7f8 faef 	bl	8019770 <lv_label_set_text>
			 if(MainScreenType ==tos_mainScreen_Type3) lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 40, 40);
 8021192:	4b40      	ldr	r3, [pc, #256]	; (8021294 <kCals_angle_loader+0x12c>)
 8021194:	781b      	ldrb	r3, [r3, #0]
 8021196:	2b02      	cmp	r3, #2
 8021198:	d109      	bne.n	80211ae <kCals_angle_loader+0x46>
 802119a:	4b3d      	ldr	r3, [pc, #244]	; (8021290 <kCals_angle_loader+0x128>)
 802119c:	6818      	ldr	r0, [r3, #0]
 802119e:	2328      	movs	r3, #40	; 0x28
 80211a0:	9300      	str	r3, [sp, #0]
 80211a2:	2328      	movs	r3, #40	; 0x28
 80211a4:	2200      	movs	r2, #0
 80211a6:	2100      	movs	r1, #0
 80211a8:	f7e5 f898 	bl	80062dc <lv_obj_align>
 80211ac:	e008      	b.n	80211c0 <kCals_angle_loader+0x58>
			 else lv_obj_align(kCalsLbl, NULL, LV_ALIGN_CENTER, 60, 40);
 80211ae:	4b38      	ldr	r3, [pc, #224]	; (8021290 <kCals_angle_loader+0x128>)
 80211b0:	6818      	ldr	r0, [r3, #0]
 80211b2:	2328      	movs	r3, #40	; 0x28
 80211b4:	9300      	str	r3, [sp, #0]
 80211b6:	233c      	movs	r3, #60	; 0x3c
 80211b8:	2200      	movs	r2, #0
 80211ba:	2100      	movs	r1, #0
 80211bc:	f7e5 f88e 	bl	80062dc <lv_obj_align>

		double kCalsTemp = tos_Ratio(kCals, 0, 10000, 0, 359);
 80211c0:	4b30      	ldr	r3, [pc, #192]	; (8021284 <kCals_angle_loader+0x11c>)
 80211c2:	881b      	ldrh	r3, [r3, #0]
 80211c4:	4618      	mov	r0, r3
 80211c6:	f7df f9ad 	bl	8000524 <__aeabi_ui2d>
 80211ca:	4603      	mov	r3, r0
 80211cc:	460c      	mov	r4, r1
 80211ce:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8021268 <kCals_angle_loader+0x100>
 80211d2:	ed9f 3b27 	vldr	d3, [pc, #156]	; 8021270 <kCals_angle_loader+0x108>
 80211d6:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8021278 <kCals_angle_loader+0x110>
 80211da:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8021270 <kCals_angle_loader+0x108>
 80211de:	ec44 3b10 	vmov	d0, r3, r4
 80211e2:	f005 fb5f 	bl	80268a4 <tos_Ratio>
 80211e6:	ed87 0b02 	vstr	d0, [r7, #8]
		if(kCalsTemp < 180) lv_arc_set_angles(kCalsArc, 180-kCalsTemp ,180);
 80211ea:	f04f 0200 	mov.w	r2, #0
 80211ee:	4b2a      	ldr	r3, [pc, #168]	; (8021298 <kCals_angle_loader+0x130>)
 80211f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80211f4:	f7df fc82 	bl	8000afc <__aeabi_dcmplt>
 80211f8:	4603      	mov	r3, r0
 80211fa:	2b00      	cmp	r3, #0
 80211fc:	d016      	beq.n	802122c <kCals_angle_loader+0xc4>
 80211fe:	4b27      	ldr	r3, [pc, #156]	; (802129c <kCals_angle_loader+0x134>)
 8021200:	681c      	ldr	r4, [r3, #0]
 8021202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021206:	f04f 0000 	mov.w	r0, #0
 802120a:	4923      	ldr	r1, [pc, #140]	; (8021298 <kCals_angle_loader+0x130>)
 802120c:	f7df f84c 	bl	80002a8 <__aeabi_dsub>
 8021210:	4602      	mov	r2, r0
 8021212:	460b      	mov	r3, r1
 8021214:	4610      	mov	r0, r2
 8021216:	4619      	mov	r1, r3
 8021218:	f7df fcd6 	bl	8000bc8 <__aeabi_d2uiz>
 802121c:	4603      	mov	r3, r0
 802121e:	b29b      	uxth	r3, r3
 8021220:	22b4      	movs	r2, #180	; 0xb4
 8021222:	4619      	mov	r1, r3
 8021224:	4620      	mov	r0, r4
 8021226:	f7f3 fbeb 	bl	8014a00 <lv_arc_set_angles>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
}else lv_task_del(t);
}
 802122a:	e019      	b.n	8021260 <kCals_angle_loader+0xf8>
		    else lv_arc_set_angles(kCalsArc, 540-kCalsTemp ,180);
 802122c:	4b1b      	ldr	r3, [pc, #108]	; (802129c <kCals_angle_loader+0x134>)
 802122e:	681c      	ldr	r4, [r3, #0]
 8021230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021234:	f04f 0000 	mov.w	r0, #0
 8021238:	4919      	ldr	r1, [pc, #100]	; (80212a0 <kCals_angle_loader+0x138>)
 802123a:	f7df f835 	bl	80002a8 <__aeabi_dsub>
 802123e:	4602      	mov	r2, r0
 8021240:	460b      	mov	r3, r1
 8021242:	4610      	mov	r0, r2
 8021244:	4619      	mov	r1, r3
 8021246:	f7df fcbf 	bl	8000bc8 <__aeabi_d2uiz>
 802124a:	4603      	mov	r3, r0
 802124c:	b29b      	uxth	r3, r3
 802124e:	22b4      	movs	r2, #180	; 0xb4
 8021250:	4619      	mov	r1, r3
 8021252:	4620      	mov	r0, r4
 8021254:	f7f3 fbd4 	bl	8014a00 <lv_arc_set_angles>
}
 8021258:	e002      	b.n	8021260 <kCals_angle_loader+0xf8>
}else lv_task_del(t);
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f7f2 fe1c 	bl	8013e98 <lv_task_del>
}
 8021260:	bf00      	nop
 8021262:	3714      	adds	r7, #20
 8021264:	46bd      	mov	sp, r7
 8021266:	bd90      	pop	{r4, r7, pc}
 8021268:	00000000 	.word	0x00000000
 802126c:	40767000 	.word	0x40767000
	...
 802127c:	40c38800 	.word	0x40c38800
 8021280:	20006e91 	.word	0x20006e91
 8021284:	20006e16 	.word	0x20006e16
 8021288:	08029de4 	.word	0x08029de4
 802128c:	20006e80 	.word	0x20006e80
 8021290:	20006ef0 	.word	0x20006ef0
 8021294:	20006e14 	.word	0x20006e14
 8021298:	40668000 	.word	0x40668000
 802129c:	20006ef8 	.word	0x20006ef8
 80212a0:	4080e000 	.word	0x4080e000

080212a4 <MainScreen_SetTime>:
//Getter and setter functions
void MainScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 80212a4:	b480      	push	{r7}
 80212a6:	b083      	sub	sp, #12
 80212a8:	af00      	add	r7, sp, #0
 80212aa:	4603      	mov	r3, r0
 80212ac:	71fb      	strb	r3, [r7, #7]
 80212ae:	460b      	mov	r3, r1
 80212b0:	71bb      	strb	r3, [r7, #6]
 80212b2:	4613      	mov	r3, r2
 80212b4:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 80212b6:	4a07      	ldr	r2, [pc, #28]	; (80212d4 <MainScreen_SetTime+0x30>)
 80212b8:	79fb      	ldrb	r3, [r7, #7]
 80212ba:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 80212bc:	4a06      	ldr	r2, [pc, #24]	; (80212d8 <MainScreen_SetTime+0x34>)
 80212be:	79bb      	ldrb	r3, [r7, #6]
 80212c0:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 80212c2:	4a06      	ldr	r2, [pc, #24]	; (80212dc <MainScreen_SetTime+0x38>)
 80212c4:	797b      	ldrb	r3, [r7, #5]
 80212c6:	7013      	strb	r3, [r2, #0]
}
 80212c8:	bf00      	nop
 80212ca:	370c      	adds	r7, #12
 80212cc:	46bd      	mov	sp, r7
 80212ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d2:	4770      	bx	lr
 80212d4:	20006ef5 	.word	0x20006ef5
 80212d8:	20006ef4 	.word	0x20006ef4
 80212dc:	20006ee4 	.word	0x20006ee4

080212e0 <MainScreen_SetDate>:
void MainScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 80212e0:	b480      	push	{r7}
 80212e2:	b083      	sub	sp, #12
 80212e4:	af00      	add	r7, sp, #0
 80212e6:	603b      	str	r3, [r7, #0]
 80212e8:	4603      	mov	r3, r0
 80212ea:	71fb      	strb	r3, [r7, #7]
 80212ec:	460b      	mov	r3, r1
 80212ee:	71bb      	strb	r3, [r7, #6]
 80212f0:	4613      	mov	r3, r2
 80212f2:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 80212f4:	79fb      	ldrb	r3, [r7, #7]
 80212f6:	b29b      	uxth	r3, r3
 80212f8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80212fc:	b29a      	uxth	r2, r3
 80212fe:	4b08      	ldr	r3, [pc, #32]	; (8021320 <MainScreen_SetDate+0x40>)
 8021300:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8021302:	4a08      	ldr	r2, [pc, #32]	; (8021324 <MainScreen_SetDate+0x44>)
 8021304:	79bb      	ldrb	r3, [r7, #6]
 8021306:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8021308:	4a07      	ldr	r2, [pc, #28]	; (8021328 <MainScreen_SetDate+0x48>)
 802130a:	797b      	ldrb	r3, [r7, #5]
 802130c:	7013      	strb	r3, [r2, #0]
	weekDayStr =getWeekDay;
 802130e:	4a07      	ldr	r2, [pc, #28]	; (802132c <MainScreen_SetDate+0x4c>)
 8021310:	683b      	ldr	r3, [r7, #0]
 8021312:	6013      	str	r3, [r2, #0]

}
 8021314:	bf00      	nop
 8021316:	370c      	adds	r7, #12
 8021318:	46bd      	mov	sp, r7
 802131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802131e:	4770      	bx	lr
 8021320:	20006ee6 	.word	0x20006ee6
 8021324:	20006e24 	.word	0x20006e24
 8021328:	200073c4 	.word	0x200073c4
 802132c:	20006e74 	.word	0x20006e74

08021330 <MainScreen_SetBatteryVal>:
void MainScreen_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	steps =getSteps;
	kCals =getKcals;
}
void MainScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8021330:	b480      	push	{r7}
 8021332:	b083      	sub	sp, #12
 8021334:	af00      	add	r7, sp, #0
 8021336:	6078      	str	r0, [r7, #4]
 8021338:	8039      	strh	r1, [r7, #0]
	batteryVal =getBatteryVal;
 802133a:	4a06      	ldr	r2, [pc, #24]	; (8021354 <MainScreen_SetBatteryVal+0x24>)
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	6013      	str	r3, [r2, #0]
	batteryColor =getBatteryColor;
 8021340:	4a05      	ldr	r2, [pc, #20]	; (8021358 <MainScreen_SetBatteryVal+0x28>)
 8021342:	883b      	ldrh	r3, [r7, #0]
 8021344:	8013      	strh	r3, [r2, #0]
}
 8021346:	bf00      	nop
 8021348:	370c      	adds	r7, #12
 802134a:	46bd      	mov	sp, r7
 802134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021350:	4770      	bx	lr
 8021352:	bf00      	nop
 8021354:	20006eec 	.word	0x20006eec
 8021358:	20006ee8 	.word	0x20006ee8

0802135c <MainScreen_SetBluetoothStatusVal>:
void MainScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 802135c:	b480      	push	{r7}
 802135e:	b083      	sub	sp, #12
 8021360:	af00      	add	r7, sp, #0
 8021362:	4603      	mov	r3, r0
 8021364:	80b9      	strh	r1, [r7, #4]
 8021366:	71fb      	strb	r3, [r7, #7]
	bluetoothStatus =getBluetoothStatus;
 8021368:	4a05      	ldr	r2, [pc, #20]	; (8021380 <MainScreen_SetBluetoothStatusVal+0x24>)
 802136a:	79fb      	ldrb	r3, [r7, #7]
 802136c:	7013      	strb	r3, [r2, #0]
	bluetoothColor =getBluetoothColor;
 802136e:	4a05      	ldr	r2, [pc, #20]	; (8021384 <MainScreen_SetBluetoothStatusVal+0x28>)
 8021370:	88bb      	ldrh	r3, [r7, #4]
 8021372:	8013      	strh	r3, [r2, #0]
}
 8021374:	bf00      	nop
 8021376:	370c      	adds	r7, #12
 8021378:	46bd      	mov	sp, r7
 802137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802137e:	4770      	bx	lr
 8021380:	20006e90 	.word	0x20006e90
 8021384:	20006ed4 	.word	0x20006ed4

08021388 <MainScreen_TaskControllerSet>:
void MainScreen_TaskControllerSet(bool active){
 8021388:	b480      	push	{r7}
 802138a:	b083      	sub	sp, #12
 802138c:	af00      	add	r7, sp, #0
 802138e:	4603      	mov	r3, r0
 8021390:	71fb      	strb	r3, [r7, #7]
	MS_taskController = active;
 8021392:	4a04      	ldr	r2, [pc, #16]	; (80213a4 <MainScreen_TaskControllerSet+0x1c>)
 8021394:	79fb      	ldrb	r3, [r7, #7]
 8021396:	7013      	strb	r3, [r2, #0]
}
 8021398:	bf00      	nop
 802139a:	370c      	adds	r7, #12
 802139c:	46bd      	mov	sp, r7
 802139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213a2:	4770      	bx	lr
 80213a4:	20006e91 	.word	0x20006e91

080213a8 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80213a8:	b480      	push	{r7}
 80213aa:	b085      	sub	sp, #20
 80213ac:	af00      	add	r7, sp, #0
 80213ae:	4603      	mov	r3, r0
 80213b0:	71fb      	strb	r3, [r7, #7]
 80213b2:	460b      	mov	r3, r1
 80213b4:	71bb      	strb	r3, [r7, #6]
 80213b6:	4613      	mov	r3, r2
 80213b8:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 80213ba:	79bb      	ldrb	r3, [r7, #6]
 80213bc:	095b      	lsrs	r3, r3, #5
 80213be:	b2db      	uxtb	r3, r3
 80213c0:	f003 0307 	and.w	r3, r3, #7
 80213c4:	b2da      	uxtb	r2, r3
 80213c6:	7b3b      	ldrb	r3, [r7, #12]
 80213c8:	f362 0302 	bfi	r3, r2, #0, #3
 80213cc:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 80213ce:	79fb      	ldrb	r3, [r7, #7]
 80213d0:	08db      	lsrs	r3, r3, #3
 80213d2:	b2db      	uxtb	r3, r3
 80213d4:	f003 031f 	and.w	r3, r3, #31
 80213d8:	b2da      	uxtb	r2, r3
 80213da:	7b3b      	ldrb	r3, [r7, #12]
 80213dc:	f362 03c7 	bfi	r3, r2, #3, #5
 80213e0:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 80213e2:	797b      	ldrb	r3, [r7, #5]
 80213e4:	08db      	lsrs	r3, r3, #3
 80213e6:	b2db      	uxtb	r3, r3
 80213e8:	f003 031f 	and.w	r3, r3, #31
 80213ec:	b2da      	uxtb	r2, r3
 80213ee:	7b7b      	ldrb	r3, [r7, #13]
 80213f0:	f362 0304 	bfi	r3, r2, #0, #5
 80213f4:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 80213f6:	79bb      	ldrb	r3, [r7, #6]
 80213f8:	089b      	lsrs	r3, r3, #2
 80213fa:	b2db      	uxtb	r3, r3
 80213fc:	f003 0307 	and.w	r3, r3, #7
 8021400:	b2da      	uxtb	r2, r3
 8021402:	7b7b      	ldrb	r3, [r7, #13]
 8021404:	f362 1347 	bfi	r3, r2, #5, #3
 8021408:	737b      	strb	r3, [r7, #13]
    return color;
 802140a:	89bb      	ldrh	r3, [r7, #12]
}
 802140c:	4618      	mov	r0, r3
 802140e:	3714      	adds	r7, #20
 8021410:	46bd      	mov	sp, r7
 8021412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021416:	4770      	bx	lr

08021418 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8021418:	b580      	push	{r7, lr}
 802141a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802141c:	f7f1 f8c0 	bl	80125a0 <lv_disp_get_default>
 8021420:	4603      	mov	r3, r0
 8021422:	4618      	mov	r0, r3
 8021424:	f7e3 fd88 	bl	8004f38 <lv_disp_get_scr_act>
 8021428:	4603      	mov	r3, r0
}
 802142a:	4618      	mov	r0, r3
 802142c:	bd80      	pop	{r7, pc}

0802142e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802142e:	b580      	push	{r7, lr}
 8021430:	b084      	sub	sp, #16
 8021432:	af00      	add	r7, sp, #0
 8021434:	60f8      	str	r0, [r7, #12]
 8021436:	460b      	mov	r3, r1
 8021438:	607a      	str	r2, [r7, #4]
 802143a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 802143c:	6879      	ldr	r1, [r7, #4]
 802143e:	68f8      	ldr	r0, [r7, #12]
 8021440:	f7e5 fbf1 	bl	8006c26 <lv_obj_set_style>
}
 8021444:	bf00      	nop
 8021446:	3710      	adds	r7, #16
 8021448:	46bd      	mov	sp, r7
 802144a:	bd80      	pop	{r7, pc}

0802144c <tos_MenuScreen_Init>:
void MenuScreen_MenuItem(char * itemTitle,const void * itemImg);
void MenuScreen_ItemController(uint8_t item);
void MenuScreen_OpenMenu(uint8_t item);
static uint8_t item=0,befItem=255;

void tos_MenuScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 802144c:	b590      	push	{r4, r7, lr}
 802144e:	b083      	sub	sp, #12
 8021450:	af00      	add	r7, sp, #0
 8021452:	4603      	mov	r3, r0
 8021454:	6039      	str	r1, [r7, #0]
 8021456:	71fb      	strb	r3, [r7, #7]
	befItem=255;
 8021458:	4b1c      	ldr	r3, [pc, #112]	; (80214cc <tos_MenuScreen_Init+0x80>)
 802145a:	22ff      	movs	r2, #255	; 0xff
 802145c:	701a      	strb	r2, [r3, #0]
		lv_style_copy(&style_screen, &lv_style_plain);
 802145e:	491c      	ldr	r1, [pc, #112]	; (80214d0 <tos_MenuScreen_Init+0x84>)
 8021460:	481c      	ldr	r0, [pc, #112]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 8021462:	f7e7 f97f 	bl	8008764 <lv_style_copy>
		style_screen.body.main_color = LV_COLOR_WHITE;
 8021466:	4a1b      	ldr	r2, [pc, #108]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 8021468:	4b1b      	ldr	r3, [pc, #108]	; (80214d8 <tos_MenuScreen_Init+0x8c>)
 802146a:	881b      	ldrh	r3, [r3, #0]
 802146c:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 802146e:	4a19      	ldr	r2, [pc, #100]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 8021470:	4b19      	ldr	r3, [pc, #100]	; (80214d8 <tos_MenuScreen_Init+0x8c>)
 8021472:	881b      	ldrh	r3, [r3, #0]
 8021474:	8093      	strh	r3, [r2, #4]
		if(theme){
 8021476:	79fb      	ldrb	r3, [r7, #7]
 8021478:	2b00      	cmp	r3, #0
 802147a:	d005      	beq.n	8021488 <tos_MenuScreen_Init+0x3c>
			style_screen.body.main_color = LV_COLOR_BLACK;
 802147c:	4b15      	ldr	r3, [pc, #84]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 802147e:	2200      	movs	r2, #0
 8021480:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 8021482:	4b14      	ldr	r3, [pc, #80]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 8021484:	2200      	movs	r2, #0
 8021486:	809a      	strh	r2, [r3, #4]
		}
		style_screen.text.color = lv_color_make(68,133,247);
 8021488:	4c12      	ldr	r4, [pc, #72]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 802148a:	22f7      	movs	r2, #247	; 0xf7
 802148c:	2185      	movs	r1, #133	; 0x85
 802148e:	2044      	movs	r0, #68	; 0x44
 8021490:	f7ff ff8a 	bl	80213a8 <lv_color_make>
 8021494:	8420      	strh	r0, [r4, #32]
		style_screen.text.font = &lv_font_roboto_28;
 8021496:	4b0f      	ldr	r3, [pc, #60]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 8021498:	4a10      	ldr	r2, [pc, #64]	; (80214dc <tos_MenuScreen_Init+0x90>)
 802149a:	625a      	str	r2, [r3, #36]	; 0x24
		lv_obj_set_style(lv_scr_act(), &style_screen);
 802149c:	f7ff ffbc 	bl	8021418 <lv_scr_act>
 80214a0:	4603      	mov	r3, r0
 80214a2:	490c      	ldr	r1, [pc, #48]	; (80214d4 <tos_MenuScreen_Init+0x88>)
 80214a4:	4618      	mov	r0, r3
 80214a6:	f7e5 fbbe 	bl	8006c26 <lv_obj_set_style>
		MenuIsOpen=true;
 80214aa:	4b0d      	ldr	r3, [pc, #52]	; (80214e0 <tos_MenuScreen_Init+0x94>)
 80214ac:	2201      	movs	r2, #1
 80214ae:	701a      	strb	r2, [r3, #0]
		MenuS_TaskController=true;
 80214b0:	4b0c      	ldr	r3, [pc, #48]	; (80214e4 <tos_MenuScreen_Init+0x98>)
 80214b2:	2201      	movs	r2, #1
 80214b4:	701a      	strb	r2, [r3, #0]
		Menutheme=theme;
 80214b6:	4a0c      	ldr	r2, [pc, #48]	; (80214e8 <tos_MenuScreen_Init+0x9c>)
 80214b8:	79fb      	ldrb	r3, [r7, #7]
 80214ba:	7013      	strb	r3, [r2, #0]
		M_hrtc=hrtc;
 80214bc:	4a0b      	ldr	r2, [pc, #44]	; (80214ec <tos_MenuScreen_Init+0xa0>)
 80214be:	683b      	ldr	r3, [r7, #0]
 80214c0:	6013      	str	r3, [r2, #0]
}
 80214c2:	bf00      	nop
 80214c4:	370c      	adds	r7, #12
 80214c6:	46bd      	mov	sp, r7
 80214c8:	bd90      	pop	{r4, r7, pc}
 80214ca:	bf00      	nop
 80214cc:	2000282c 	.word	0x2000282c
 80214d0:	20006c74 	.word	0x20006c74
 80214d4:	20005f1c 	.word	0x20005f1c
 80214d8:	08029e30 	.word	0x08029e30
 80214dc:	20002394 	.word	0x20002394
 80214e0:	20005f58 	.word	0x20005f58
 80214e4:	20006f00 	.word	0x20006f00
 80214e8:	20006f01 	.word	0x20006f01
 80214ec:	20006efc 	.word	0x20006efc

080214f0 <tos_Menu_Controller>:
void tos_Menu_Controller(void){
 80214f0:	b580      	push	{r7, lr}
 80214f2:	af00      	add	r7, sp, #0
	if(MenuS_TaskController){
 80214f4:	4b38      	ldr	r3, [pc, #224]	; (80215d8 <tos_Menu_Controller+0xe8>)
 80214f6:	781b      	ldrb	r3, [r3, #0]
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d06a      	beq.n	80215d2 <tos_Menu_Controller+0xe2>
			  if(SettingsScreen_isSettingsOpen())  SettingsScreen_ButtonController();
 80214fc:	f003 fae4 	bl	8024ac8 <SettingsScreen_isSettingsOpen>
 8021500:	4603      	mov	r3, r0
 8021502:	2b00      	cmp	r3, #0
 8021504:	d002      	beq.n	802150c <tos_Menu_Controller+0x1c>
 8021506:	f002 fe13 	bl	8024130 <SettingsScreen_ButtonController>
				  MenuScreen_ItemController(item);
				  befItem=item;
				}
			  }
	}
}
 802150a:	e062      	b.n	80215d2 <tos_Menu_Controller+0xe2>
				  if(1==tos_EnterButton_Listenner_For_MenuControl()) MenuScreen_OpenMenu(item);
 802150c:	f005 f96c 	bl	80267e8 <tos_EnterButton_Listenner_For_MenuControl>
 8021510:	4603      	mov	r3, r0
 8021512:	2b01      	cmp	r3, #1
 8021514:	d104      	bne.n	8021520 <tos_Menu_Controller+0x30>
 8021516:	4b31      	ldr	r3, [pc, #196]	; (80215dc <tos_Menu_Controller+0xec>)
 8021518:	781b      	ldrb	r3, [r3, #0]
 802151a:	4618      	mov	r0, r3
 802151c:	f000 f862 	bl	80215e4 <MenuScreen_OpenMenu>
				  if(StopWatch_TaskControllerGet())  StopWatch_ButtonController();
 8021520:	f004 fe40 	bl	80261a4 <StopWatch_TaskControllerGet>
 8021524:	4603      	mov	r3, r0
 8021526:	2b00      	cmp	r3, #0
 8021528:	d002      	beq.n	8021530 <tos_Menu_Controller+0x40>
 802152a:	f004 fcd5 	bl	8025ed8 <StopWatch_ButtonController>
 802152e:	e041      	b.n	80215b4 <tos_Menu_Controller+0xc4>
				  else if(RunMode_TaskControllerGet())    RunMode_ButtonController();
 8021530:	f002 f9e4 	bl	80238fc <RunMode_TaskControllerGet>
 8021534:	4603      	mov	r3, r0
 8021536:	2b00      	cmp	r3, #0
 8021538:	d002      	beq.n	8021540 <tos_Menu_Controller+0x50>
 802153a:	f001 ff8f 	bl	802345c <RunMode_ButtonController>
 802153e:	e039      	b.n	80215b4 <tos_Menu_Controller+0xc4>
				  else if(MusicPlayer_TaskControllerGet())   MusicPlayer_ButtonController();
 8021540:	f000 fd20 	bl	8021f84 <MusicPlayer_TaskControllerGet>
 8021544:	4603      	mov	r3, r0
 8021546:	2b00      	cmp	r3, #0
 8021548:	d002      	beq.n	8021550 <tos_Menu_Controller+0x60>
 802154a:	f000 fc1f 	bl	8021d8c <MusicPlayer_ButtonController>
 802154e:	e031      	b.n	80215b4 <tos_Menu_Controller+0xc4>
				  else if(NotificationScreen_TaskControllerGet())   NotificationScreen_ButtonController();
 8021550:	f001 f8c8 	bl	80226e4 <NotificationScreen_TaskControllerGet>
 8021554:	4603      	mov	r3, r0
 8021556:	2b00      	cmp	r3, #0
 8021558:	d002      	beq.n	8021560 <tos_Menu_Controller+0x70>
 802155a:	f000 fdb9 	bl	80220d0 <NotificationScreen_ButtonController>
 802155e:	e029      	b.n	80215b4 <tos_Menu_Controller+0xc4>
					  if(1==tos_LeftButton_Listenner_For_MenuControl()){
 8021560:	f005 f91a 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8021564:	4603      	mov	r3, r0
 8021566:	2b01      	cmp	r3, #1
 8021568:	d10f      	bne.n	802158a <tos_Menu_Controller+0x9a>
						  if(item>ITEM_MIN)item--;
 802156a:	4b1c      	ldr	r3, [pc, #112]	; (80215dc <tos_Menu_Controller+0xec>)
 802156c:	781b      	ldrb	r3, [r3, #0]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d006      	beq.n	8021580 <tos_Menu_Controller+0x90>
 8021572:	4b1a      	ldr	r3, [pc, #104]	; (80215dc <tos_Menu_Controller+0xec>)
 8021574:	781b      	ldrb	r3, [r3, #0]
 8021576:	3b01      	subs	r3, #1
 8021578:	b2da      	uxtb	r2, r3
 802157a:	4b18      	ldr	r3, [pc, #96]	; (80215dc <tos_Menu_Controller+0xec>)
 802157c:	701a      	strb	r2, [r3, #0]
 802157e:	e004      	b.n	802158a <tos_Menu_Controller+0x9a>
							  	MenuS_TaskController=false;
 8021580:	4b15      	ldr	r3, [pc, #84]	; (80215d8 <tos_Menu_Controller+0xe8>)
 8021582:	2200      	movs	r2, #0
 8021584:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 8021586:	f005 fbb1 	bl	8026cec <tos_Set_Current_Screen>
					  if(1==tos_RightButton_Listenner_For_MenuControl()){
 802158a:	f005 f8dd 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 802158e:	4603      	mov	r3, r0
 8021590:	2b01      	cmp	r3, #1
 8021592:	d10f      	bne.n	80215b4 <tos_Menu_Controller+0xc4>
						  if(item<ITEM_MAX)item++;
 8021594:	4b11      	ldr	r3, [pc, #68]	; (80215dc <tos_Menu_Controller+0xec>)
 8021596:	781b      	ldrb	r3, [r3, #0]
 8021598:	2b04      	cmp	r3, #4
 802159a:	d806      	bhi.n	80215aa <tos_Menu_Controller+0xba>
 802159c:	4b0f      	ldr	r3, [pc, #60]	; (80215dc <tos_Menu_Controller+0xec>)
 802159e:	781b      	ldrb	r3, [r3, #0]
 80215a0:	3301      	adds	r3, #1
 80215a2:	b2da      	uxtb	r2, r3
 80215a4:	4b0d      	ldr	r3, [pc, #52]	; (80215dc <tos_Menu_Controller+0xec>)
 80215a6:	701a      	strb	r2, [r3, #0]
 80215a8:	e004      	b.n	80215b4 <tos_Menu_Controller+0xc4>
							  	MenuS_TaskController=false;
 80215aa:	4b0b      	ldr	r3, [pc, #44]	; (80215d8 <tos_Menu_Controller+0xe8>)
 80215ac:	2200      	movs	r2, #0
 80215ae:	701a      	strb	r2, [r3, #0]
							  	tos_Set_Current_Screen();
 80215b0:	f005 fb9c 	bl	8026cec <tos_Set_Current_Screen>
				  if(befItem!=item){
 80215b4:	4b0a      	ldr	r3, [pc, #40]	; (80215e0 <tos_Menu_Controller+0xf0>)
 80215b6:	781a      	ldrb	r2, [r3, #0]
 80215b8:	4b08      	ldr	r3, [pc, #32]	; (80215dc <tos_Menu_Controller+0xec>)
 80215ba:	781b      	ldrb	r3, [r3, #0]
 80215bc:	429a      	cmp	r2, r3
 80215be:	d008      	beq.n	80215d2 <tos_Menu_Controller+0xe2>
				  MenuScreen_ItemController(item);
 80215c0:	4b06      	ldr	r3, [pc, #24]	; (80215dc <tos_Menu_Controller+0xec>)
 80215c2:	781b      	ldrb	r3, [r3, #0]
 80215c4:	4618      	mov	r0, r3
 80215c6:	f000 f88d 	bl	80216e4 <MenuScreen_ItemController>
				  befItem=item;
 80215ca:	4b04      	ldr	r3, [pc, #16]	; (80215dc <tos_Menu_Controller+0xec>)
 80215cc:	781a      	ldrb	r2, [r3, #0]
 80215ce:	4b04      	ldr	r3, [pc, #16]	; (80215e0 <tos_Menu_Controller+0xf0>)
 80215d0:	701a      	strb	r2, [r3, #0]
}
 80215d2:	bf00      	nop
 80215d4:	bd80      	pop	{r7, pc}
 80215d6:	bf00      	nop
 80215d8:	20006f00 	.word	0x20006f00
 80215dc:	20005f59 	.word	0x20005f59
 80215e0:	2000282c 	.word	0x2000282c

080215e4 <MenuScreen_OpenMenu>:

void MenuScreen_OpenMenu(uint8_t item){
 80215e4:	b580      	push	{r7, lr}
 80215e6:	b082      	sub	sp, #8
 80215e8:	af00      	add	r7, sp, #0
 80215ea:	4603      	mov	r3, r0
 80215ec:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 80215ee:	f7ff ff13 	bl	8021418 <lv_scr_act>
 80215f2:	4603      	mov	r3, r0
 80215f4:	4618      	mov	r0, r3
 80215f6:	f7e4 fbff 	bl	8005df8 <lv_obj_clean>
	StepAndKcal_TaskControllerSet(false);
 80215fa:	2000      	movs	r0, #0
 80215fc:	f004 fb06 	bl	8025c0c <StepAndKcal_TaskControllerSet>
	StopWatch_TaskControllerSet(false);
 8021600:	2000      	movs	r0, #0
 8021602:	f004 fdbf 	bl	8026184 <StopWatch_TaskControllerSet>
	RunMode_TaskControllerSet(false);
 8021606:	2000      	movs	r0, #0
 8021608:	f002 f968 	bl	80238dc <RunMode_TaskControllerSet>
	MusicPlayer_TaskControllerSet(false);
 802160c:	2000      	movs	r0, #0
 802160e:	f000 fca9 	bl	8021f64 <MusicPlayer_TaskControllerSet>
	NotificationScreen_TaskControllerSet(false);
 8021612:	2000      	movs	r0, #0
 8021614:	f001 f856 	bl	80226c4 <NotificationScreen_TaskControllerSet>

	if(!MenuIsOpen){
 8021618:	4b2f      	ldr	r3, [pc, #188]	; (80216d8 <MenuScreen_OpenMenu+0xf4>)
 802161a:	781b      	ldrb	r3, [r3, #0]
 802161c:	f083 0301 	eor.w	r3, r3, #1
 8021620:	b2db      	uxtb	r3, r3
 8021622:	2b00      	cmp	r3, #0
 8021624:	d007      	beq.n	8021636 <MenuScreen_OpenMenu+0x52>
		  MenuIsOpen=true;
 8021626:	4b2c      	ldr	r3, [pc, #176]	; (80216d8 <MenuScreen_OpenMenu+0xf4>)
 8021628:	2201      	movs	r2, #1
 802162a:	701a      	strb	r2, [r3, #0]
		  MenuScreen_ItemController(item);
 802162c:	79fb      	ldrb	r3, [r7, #7]
 802162e:	4618      	mov	r0, r3
 8021630:	f000 f858 	bl	80216e4 <MenuScreen_ItemController>
		  return;
 8021634:	e04d      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>
	}

	MenuIsOpen=false;
 8021636:	4b28      	ldr	r3, [pc, #160]	; (80216d8 <MenuScreen_OpenMenu+0xf4>)
 8021638:	2200      	movs	r2, #0
 802163a:	701a      	strb	r2, [r3, #0]

	switch(item){
 802163c:	79fb      	ldrb	r3, [r7, #7]
 802163e:	2b05      	cmp	r3, #5
 8021640:	d846      	bhi.n	80216d0 <MenuScreen_OpenMenu+0xec>
 8021642:	a201      	add	r2, pc, #4	; (adr r2, 8021648 <MenuScreen_OpenMenu+0x64>)
 8021644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021648:	08021661 	.word	0x08021661
 802164c:	08021675 	.word	0x08021675
 8021650:	08021687 	.word	0x08021687
 8021654:	0802169b 	.word	0x0802169b
 8021658:	080216ad 	.word	0x080216ad
 802165c:	080216bf 	.word	0x080216bf
	case ITEM0:
	/*Steps And kCals*/
	tos_StepAndKcalScreen_Init(true,Menutheme);
 8021660:	4b1e      	ldr	r3, [pc, #120]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 8021662:	781b      	ldrb	r3, [r3, #0]
 8021664:	4619      	mov	r1, r3
 8021666:	2001      	movs	r0, #1
 8021668:	f003 fe44 	bl	80252f4 <tos_StepAndKcalScreen_Init>
	StepAndKcal_TaskControllerSet(true);
 802166c:	2001      	movs	r0, #1
 802166e:	f004 facd 	bl	8025c0c <StepAndKcal_TaskControllerSet>
	break;
 8021672:	e02e      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	case ITEM1:
	/*Stopwatch*/
	tos_StopWatchScreen_Init(Menutheme);
 8021674:	4b19      	ldr	r3, [pc, #100]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 8021676:	781b      	ldrb	r3, [r3, #0]
 8021678:	4618      	mov	r0, r3
 802167a:	f004 faf1 	bl	8025c60 <tos_StopWatchScreen_Init>
	StopWatch_TaskControllerSet(true);
 802167e:	2001      	movs	r0, #1
 8021680:	f004 fd80 	bl	8026184 <StopWatch_TaskControllerSet>
		break;
 8021684:	e025      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	case ITEM2:
	/*Run Mode*/
	tos_RunModeScreen_Init(true,Menutheme); //unit type alma yazılacak
 8021686:	4b15      	ldr	r3, [pc, #84]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 8021688:	781b      	ldrb	r3, [r3, #0]
 802168a:	4619      	mov	r1, r3
 802168c:	2001      	movs	r0, #1
 802168e:	f001 f89d 	bl	80227cc <tos_RunModeScreen_Init>
	RunMode_TaskControllerSet(true);
 8021692:	2001      	movs	r0, #1
 8021694:	f002 f922 	bl	80238dc <RunMode_TaskControllerSet>
	break;
 8021698:	e01b      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	case ITEM3:
	/*Music Player*/
	tos_MusicPlayerScreen_Init(Menutheme);
 802169a:	4b10      	ldr	r3, [pc, #64]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 802169c:	781b      	ldrb	r3, [r3, #0]
 802169e:	4618      	mov	r0, r3
 80216a0:	f000 f916 	bl	80218d0 <tos_MusicPlayerScreen_Init>
	MusicPlayer_TaskControllerSet(true);
 80216a4:	2001      	movs	r0, #1
 80216a6:	f000 fc5d 	bl	8021f64 <MusicPlayer_TaskControllerSet>
	break;
 80216aa:	e012      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	case ITEM4:
	/*Notification*/
	tos_NotificationScreen_Init(Menutheme);
 80216ac:	4b0b      	ldr	r3, [pc, #44]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 80216ae:	781b      	ldrb	r3, [r3, #0]
 80216b0:	4618      	mov	r0, r3
 80216b2:	f000 fca1 	bl	8021ff8 <tos_NotificationScreen_Init>
	NotificationScreen_TaskControllerSet(true);
 80216b6:	2001      	movs	r0, #1
 80216b8:	f001 f804 	bl	80226c4 <NotificationScreen_TaskControllerSet>
	break;
 80216bc:	e009      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	case ITEM5:
	/*Sys Settings*/
	tos_SettingsScreen_Init(Menutheme,M_hrtc);
 80216be:	4b07      	ldr	r3, [pc, #28]	; (80216dc <MenuScreen_OpenMenu+0xf8>)
 80216c0:	781a      	ldrb	r2, [r3, #0]
 80216c2:	4b07      	ldr	r3, [pc, #28]	; (80216e0 <MenuScreen_OpenMenu+0xfc>)
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	4619      	mov	r1, r3
 80216c8:	4610      	mov	r0, r2
 80216ca:	f002 f989 	bl	80239e0 <tos_SettingsScreen_Init>
	//Close a veya save e basınca buraya dönmüyor !!
	break;
 80216ce:	e000      	b.n	80216d2 <MenuScreen_OpenMenu+0xee>

	default: return;
 80216d0:	bf00      	nop
	}
}
 80216d2:	3708      	adds	r7, #8
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}
 80216d8:	20005f58 	.word	0x20005f58
 80216dc:	20006f01 	.word	0x20006f01
 80216e0:	20006efc 	.word	0x20006efc

080216e4 <MenuScreen_ItemController>:

void MenuScreen_ItemController(uint8_t item){
 80216e4:	b580      	push	{r7, lr}
 80216e6:	b082      	sub	sp, #8
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	4603      	mov	r3, r0
 80216ec:	71fb      	strb	r3, [r7, #7]
		switch(item){
 80216ee:	79fb      	ldrb	r3, [r7, #7]
 80216f0:	2b05      	cmp	r3, #5
 80216f2:	d82d      	bhi.n	8021750 <MenuScreen_ItemController+0x6c>
 80216f4:	a201      	add	r2, pc, #4	; (adr r2, 80216fc <MenuScreen_ItemController+0x18>)
 80216f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216fa:	bf00      	nop
 80216fc:	08021715 	.word	0x08021715
 8021700:	0802171f 	.word	0x0802171f
 8021704:	08021729 	.word	0x08021729
 8021708:	08021733 	.word	0x08021733
 802170c:	0802173d 	.word	0x0802173d
 8021710:	08021747 	.word	0x08021747
		case ITEM0:	MenuScreen_MenuItem("STEPS AND KCALS", &tos75x75); break;
 8021714:	4910      	ldr	r1, [pc, #64]	; (8021758 <MenuScreen_ItemController+0x74>)
 8021716:	4811      	ldr	r0, [pc, #68]	; (802175c <MenuScreen_ItemController+0x78>)
 8021718:	f000 f82c 	bl	8021774 <MenuScreen_MenuItem>
 802171c:	e019      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		case ITEM1: MenuScreen_MenuItem("STOPWATCH", &tos75x75); break;
 802171e:	490e      	ldr	r1, [pc, #56]	; (8021758 <MenuScreen_ItemController+0x74>)
 8021720:	480f      	ldr	r0, [pc, #60]	; (8021760 <MenuScreen_ItemController+0x7c>)
 8021722:	f000 f827 	bl	8021774 <MenuScreen_MenuItem>
 8021726:	e014      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		case ITEM2: MenuScreen_MenuItem("RUN MODE", &tos75x75); break;
 8021728:	490b      	ldr	r1, [pc, #44]	; (8021758 <MenuScreen_ItemController+0x74>)
 802172a:	480e      	ldr	r0, [pc, #56]	; (8021764 <MenuScreen_ItemController+0x80>)
 802172c:	f000 f822 	bl	8021774 <MenuScreen_MenuItem>
 8021730:	e00f      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		case ITEM3: MenuScreen_MenuItem("MUSIC PLAYER", &tos75x75); break;
 8021732:	4909      	ldr	r1, [pc, #36]	; (8021758 <MenuScreen_ItemController+0x74>)
 8021734:	480c      	ldr	r0, [pc, #48]	; (8021768 <MenuScreen_ItemController+0x84>)
 8021736:	f000 f81d 	bl	8021774 <MenuScreen_MenuItem>
 802173a:	e00a      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		case ITEM4: MenuScreen_MenuItem("NOTIFICATIONS", &tos75x75); break;
 802173c:	4906      	ldr	r1, [pc, #24]	; (8021758 <MenuScreen_ItemController+0x74>)
 802173e:	480b      	ldr	r0, [pc, #44]	; (802176c <MenuScreen_ItemController+0x88>)
 8021740:	f000 f818 	bl	8021774 <MenuScreen_MenuItem>
 8021744:	e005      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		case ITEM5: MenuScreen_MenuItem("SYSTEM SETTINGS", &tos75x75); break;
 8021746:	4904      	ldr	r1, [pc, #16]	; (8021758 <MenuScreen_ItemController+0x74>)
 8021748:	4809      	ldr	r0, [pc, #36]	; (8021770 <MenuScreen_ItemController+0x8c>)
 802174a:	f000 f813 	bl	8021774 <MenuScreen_MenuItem>
 802174e:	e000      	b.n	8021752 <MenuScreen_ItemController+0x6e>

		default: return;
 8021750:	bf00      	nop
		}
}
 8021752:	3708      	adds	r7, #8
 8021754:	46bd      	mov	sp, r7
 8021756:	bd80      	pop	{r7, pc}
 8021758:	08044fcc 	.word	0x08044fcc
 802175c:	08029e34 	.word	0x08029e34
 8021760:	08029e44 	.word	0x08029e44
 8021764:	08029e50 	.word	0x08029e50
 8021768:	08029e5c 	.word	0x08029e5c
 802176c:	08029e6c 	.word	0x08029e6c
 8021770:	08029e7c 	.word	0x08029e7c

08021774 <MenuScreen_MenuItem>:

void MenuScreen_MenuItem(char * itemTitle,const void * itemImg){
 8021774:	b580      	push	{r7, lr}
 8021776:	b086      	sub	sp, #24
 8021778:	af02      	add	r7, sp, #8
 802177a:	6078      	str	r0, [r7, #4]
 802177c:	6039      	str	r1, [r7, #0]
	lv_obj_clean(lv_scr_act());
 802177e:	f7ff fe4b 	bl	8021418 <lv_scr_act>
 8021782:	4603      	mov	r3, r0
 8021784:	4618      	mov	r0, r3
 8021786:	f7e4 fb37 	bl	8005df8 <lv_obj_clean>
		lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802178a:	f7ff fe45 	bl	8021418 <lv_scr_act>
 802178e:	4603      	mov	r3, r0
 8021790:	2100      	movs	r1, #0
 8021792:	4618      	mov	r0, r3
 8021794:	f7f7 fb2e 	bl	8018df4 <lv_img_create>
 8021798:	60f8      	str	r0, [r7, #12]
		lv_img_set_src(img1, itemImg);
 802179a:	6839      	ldr	r1, [r7, #0]
 802179c:	68f8      	ldr	r0, [r7, #12]
 802179e:	f7f7 fbc7 	bl	8018f30 <lv_img_set_src>
		lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 80217a2:	f06f 0313 	mvn.w	r3, #19
 80217a6:	9300      	str	r3, [sp, #0]
 80217a8:	2300      	movs	r3, #0
 80217aa:	2200      	movs	r2, #0
 80217ac:	2100      	movs	r1, #0
 80217ae:	68f8      	ldr	r0, [r7, #12]
 80217b0:	f7e4 fd94 	bl	80062dc <lv_obj_align>

		lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 80217b4:	f7ff fe30 	bl	8021418 <lv_scr_act>
 80217b8:	4603      	mov	r3, r0
 80217ba:	2100      	movs	r1, #0
 80217bc:	4618      	mov	r0, r3
 80217be:	f7f7 fea5 	bl	801950c <lv_label_create>
 80217c2:	60b8      	str	r0, [r7, #8]
	 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 80217c4:	4a0d      	ldr	r2, [pc, #52]	; (80217fc <MenuScreen_MenuItem+0x88>)
 80217c6:	2100      	movs	r1, #0
 80217c8:	68b8      	ldr	r0, [r7, #8]
 80217ca:	f7ff fe30 	bl	802142e <lv_label_set_style>
	   	snprintf(menuBuffer, 20, "%s", itemTitle);
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	4a0b      	ldr	r2, [pc, #44]	; (8021800 <MenuScreen_MenuItem+0x8c>)
 80217d2:	2114      	movs	r1, #20
 80217d4:	480b      	ldr	r0, [pc, #44]	; (8021804 <MenuScreen_MenuItem+0x90>)
 80217d6:	f006 fa4d 	bl	8027c74 <sniprintf>
	 	lv_label_set_text(tosLbl,menuBuffer);
 80217da:	490a      	ldr	r1, [pc, #40]	; (8021804 <MenuScreen_MenuItem+0x90>)
 80217dc:	68b8      	ldr	r0, [r7, #8]
 80217de:	f7f7 ffc7 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 80217e2:	2332      	movs	r3, #50	; 0x32
 80217e4:	9300      	str	r3, [sp, #0]
 80217e6:	2300      	movs	r3, #0
 80217e8:	2200      	movs	r2, #0
 80217ea:	2100      	movs	r1, #0
 80217ec:	68b8      	ldr	r0, [r7, #8]
 80217ee:	f7e4 fd75 	bl	80062dc <lv_obj_align>
}
 80217f2:	bf00      	nop
 80217f4:	3710      	adds	r7, #16
 80217f6:	46bd      	mov	sp, r7
 80217f8:	bd80      	pop	{r7, pc}
 80217fa:	bf00      	nop
 80217fc:	20005f1c 	.word	0x20005f1c
 8021800:	08029e8c 	.word	0x08029e8c
 8021804:	20006f04 	.word	0x20006f04

08021808 <MenuScreen_TaskControllerSet>:
//Setter And Getter Functions
bool MenuScreen_TaskControllerGet(void){
	return MenuS_TaskController;
}
void MenuScreen_TaskControllerSet(bool active){
 8021808:	b480      	push	{r7}
 802180a:	b083      	sub	sp, #12
 802180c:	af00      	add	r7, sp, #0
 802180e:	4603      	mov	r3, r0
 8021810:	71fb      	strb	r3, [r7, #7]
	MenuS_TaskController=active;
 8021812:	4a04      	ldr	r2, [pc, #16]	; (8021824 <MenuScreen_TaskControllerSet+0x1c>)
 8021814:	79fb      	ldrb	r3, [r7, #7]
 8021816:	7013      	strb	r3, [r2, #0]
}
 8021818:	bf00      	nop
 802181a:	370c      	adds	r7, #12
 802181c:	46bd      	mov	sp, r7
 802181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021822:	4770      	bx	lr
 8021824:	20006f00 	.word	0x20006f00

08021828 <MenuScreen_SetItem>:
void MenuScreen_SetItem(uint8_t SelectItem){
 8021828:	b480      	push	{r7}
 802182a:	b083      	sub	sp, #12
 802182c:	af00      	add	r7, sp, #0
 802182e:	4603      	mov	r3, r0
 8021830:	71fb      	strb	r3, [r7, #7]
	item=SelectItem;
 8021832:	4a04      	ldr	r2, [pc, #16]	; (8021844 <MenuScreen_SetItem+0x1c>)
 8021834:	79fb      	ldrb	r3, [r7, #7]
 8021836:	7013      	strb	r3, [r2, #0]
}
 8021838:	bf00      	nop
 802183a:	370c      	adds	r7, #12
 802183c:	46bd      	mov	sp, r7
 802183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021842:	4770      	bx	lr
 8021844:	20005f59 	.word	0x20005f59

08021848 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8021848:	b480      	push	{r7}
 802184a:	b085      	sub	sp, #20
 802184c:	af00      	add	r7, sp, #0
 802184e:	4603      	mov	r3, r0
 8021850:	71fb      	strb	r3, [r7, #7]
 8021852:	460b      	mov	r3, r1
 8021854:	71bb      	strb	r3, [r7, #6]
 8021856:	4613      	mov	r3, r2
 8021858:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802185a:	79bb      	ldrb	r3, [r7, #6]
 802185c:	095b      	lsrs	r3, r3, #5
 802185e:	b2db      	uxtb	r3, r3
 8021860:	f003 0307 	and.w	r3, r3, #7
 8021864:	b2da      	uxtb	r2, r3
 8021866:	7b3b      	ldrb	r3, [r7, #12]
 8021868:	f362 0302 	bfi	r3, r2, #0, #3
 802186c:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802186e:	79fb      	ldrb	r3, [r7, #7]
 8021870:	08db      	lsrs	r3, r3, #3
 8021872:	b2db      	uxtb	r3, r3
 8021874:	f003 031f 	and.w	r3, r3, #31
 8021878:	b2da      	uxtb	r2, r3
 802187a:	7b3b      	ldrb	r3, [r7, #12]
 802187c:	f362 03c7 	bfi	r3, r2, #3, #5
 8021880:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8021882:	797b      	ldrb	r3, [r7, #5]
 8021884:	08db      	lsrs	r3, r3, #3
 8021886:	b2db      	uxtb	r3, r3
 8021888:	f003 031f 	and.w	r3, r3, #31
 802188c:	b2da      	uxtb	r2, r3
 802188e:	7b7b      	ldrb	r3, [r7, #13]
 8021890:	f362 0304 	bfi	r3, r2, #0, #5
 8021894:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8021896:	79bb      	ldrb	r3, [r7, #6]
 8021898:	089b      	lsrs	r3, r3, #2
 802189a:	b2db      	uxtb	r3, r3
 802189c:	f003 0307 	and.w	r3, r3, #7
 80218a0:	b2da      	uxtb	r2, r3
 80218a2:	7b7b      	ldrb	r3, [r7, #13]
 80218a4:	f362 1347 	bfi	r3, r2, #5, #3
 80218a8:	737b      	strb	r3, [r7, #13]
    return color;
 80218aa:	89bb      	ldrh	r3, [r7, #12]
}
 80218ac:	4618      	mov	r0, r3
 80218ae:	3714      	adds	r7, #20
 80218b0:	46bd      	mov	sp, r7
 80218b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b6:	4770      	bx	lr

080218b8 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80218b8:	b580      	push	{r7, lr}
 80218ba:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80218bc:	f7f0 fe70 	bl	80125a0 <lv_disp_get_default>
 80218c0:	4603      	mov	r3, r0
 80218c2:	4618      	mov	r0, r3
 80218c4:	f7e3 fb38 	bl	8004f38 <lv_disp_get_scr_act>
 80218c8:	4603      	mov	r3, r0
}
 80218ca:	4618      	mov	r0, r3
 80218cc:	bd80      	pop	{r7, pc}
	...

080218d0 <tos_MusicPlayerScreen_Init>:
void MusicPlayerUpdateVal(void);
void soundVolumeController(bool vol);


/*This function using for initialization Music Player screen*/
void tos_MusicPlayerScreen_Init(bool theme){
 80218d0:	b590      	push	{r4, r7, lr}
 80218d2:	b083      	sub	sp, #12
 80218d4:	af00      	add	r7, sp, #0
 80218d6:	4603      	mov	r3, r0
 80218d8:	71fb      	strb	r3, [r7, #7]

	lv_obj_clean(lv_scr_act());
 80218da:	f7ff ffed 	bl	80218b8 <lv_scr_act>
 80218de:	4603      	mov	r3, r0
 80218e0:	4618      	mov	r0, r3
 80218e2:	f7e4 fa89 	bl	8005df8 <lv_obj_clean>
		lv_style_copy(&description_Style, &lv_style_plain);
 80218e6:	492c      	ldr	r1, [pc, #176]	; (8021998 <tos_MusicPlayerScreen_Init+0xc8>)
 80218e8:	482c      	ldr	r0, [pc, #176]	; (802199c <tos_MusicPlayerScreen_Init+0xcc>)
 80218ea:	f7e6 ff3b 	bl	8008764 <lv_style_copy>
		description_Style.text.font = &lv_font_roboto_22;
 80218ee:	4b2b      	ldr	r3, [pc, #172]	; (802199c <tos_MusicPlayerScreen_Init+0xcc>)
 80218f0:	4a2b      	ldr	r2, [pc, #172]	; (80219a0 <tos_MusicPlayerScreen_Init+0xd0>)
 80218f2:	625a      	str	r2, [r3, #36]	; 0x24
		description_Style.text.color = LV_COLOR_GRAY;
 80218f4:	4a29      	ldr	r2, [pc, #164]	; (802199c <tos_MusicPlayerScreen_Init+0xcc>)
 80218f6:	4b2b      	ldr	r3, [pc, #172]	; (80219a4 <tos_MusicPlayerScreen_Init+0xd4>)
 80218f8:	881b      	ldrh	r3, [r3, #0]
 80218fa:	8413      	strh	r3, [r2, #32]

		lv_style_copy(&style_screen, &lv_style_plain);
 80218fc:	4926      	ldr	r1, [pc, #152]	; (8021998 <tos_MusicPlayerScreen_Init+0xc8>)
 80218fe:	482a      	ldr	r0, [pc, #168]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 8021900:	f7e6 ff30 	bl	8008764 <lv_style_copy>
		if(theme){
 8021904:	79fb      	ldrb	r3, [r7, #7]
 8021906:	2b00      	cmp	r3, #0
 8021908:	d00d      	beq.n	8021926 <tos_MusicPlayerScreen_Init+0x56>
			style_screen.body.main_color = LV_COLOR_BLACK;
 802190a:	4b27      	ldr	r3, [pc, #156]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 802190c:	2200      	movs	r2, #0
 802190e:	805a      	strh	r2, [r3, #2]
			style_screen.body.grad_color = LV_COLOR_BLACK;
 8021910:	4b25      	ldr	r3, [pc, #148]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 8021912:	2200      	movs	r2, #0
 8021914:	809a      	strh	r2, [r3, #4]
			description_Style.text.color = lv_color_make(0xc0, 0xc0, 0xc0);
 8021916:	4c21      	ldr	r4, [pc, #132]	; (802199c <tos_MusicPlayerScreen_Init+0xcc>)
 8021918:	22c0      	movs	r2, #192	; 0xc0
 802191a:	21c0      	movs	r1, #192	; 0xc0
 802191c:	20c0      	movs	r0, #192	; 0xc0
 802191e:	f7ff ff93 	bl	8021848 <lv_color_make>
 8021922:	8420      	strh	r0, [r4, #32]
 8021924:	e00e      	b.n	8021944 <tos_MusicPlayerScreen_Init+0x74>
		}else{
			style_screen.body.main_color = LV_COLOR_WHITE;
 8021926:	4a20      	ldr	r2, [pc, #128]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 8021928:	4b20      	ldr	r3, [pc, #128]	; (80219ac <tos_MusicPlayerScreen_Init+0xdc>)
 802192a:	881b      	ldrh	r3, [r3, #0]
 802192c:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 802192e:	4a1e      	ldr	r2, [pc, #120]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 8021930:	4b1e      	ldr	r3, [pc, #120]	; (80219ac <tos_MusicPlayerScreen_Init+0xdc>)
 8021932:	881b      	ldrh	r3, [r3, #0]
 8021934:	8093      	strh	r3, [r2, #4]
			description_Style.text.color = lv_color_make(0x37, 0x37, 0x37);
 8021936:	4c19      	ldr	r4, [pc, #100]	; (802199c <tos_MusicPlayerScreen_Init+0xcc>)
 8021938:	2237      	movs	r2, #55	; 0x37
 802193a:	2137      	movs	r1, #55	; 0x37
 802193c:	2037      	movs	r0, #55	; 0x37
 802193e:	f7ff ff83 	bl	8021848 <lv_color_make>
 8021942:	8420      	strh	r0, [r4, #32]
		}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8021944:	f7ff ffb8 	bl	80218b8 <lv_scr_act>
 8021948:	4603      	mov	r3, r0
 802194a:	4917      	ldr	r1, [pc, #92]	; (80219a8 <tos_MusicPlayerScreen_Init+0xd8>)
 802194c:	4618      	mov	r0, r3
 802194e:	f7e5 f96a 	bl	8006c26 <lv_obj_set_style>

		MP_theme=theme;
 8021952:	4a17      	ldr	r2, [pc, #92]	; (80219b0 <tos_MusicPlayerScreen_Init+0xe0>)
 8021954:	79fb      	ldrb	r3, [r7, #7]
 8021956:	7013      	strb	r3, [r2, #0]
		MP_isButtonPressed=false;
 8021958:	4b16      	ldr	r3, [pc, #88]	; (80219b4 <tos_MusicPlayerScreen_Init+0xe4>)
 802195a:	2200      	movs	r2, #0
 802195c:	701a      	strb	r2, [r3, #0]
		MP_buttonMode=false;
 802195e:	4b16      	ldr	r3, [pc, #88]	; (80219b8 <tos_MusicPlayerScreen_Init+0xe8>)
 8021960:	2200      	movs	r2, #0
 8021962:	701a      	strb	r2, [r3, #0]

		MusicPlayerSound_Init(theme);
 8021964:	79fb      	ldrb	r3, [r7, #7]
 8021966:	4618      	mov	r0, r3
 8021968:	f000 f89a 	bl	8021aa0 <MusicPlayerSound_Init>
		MusicPlayerPlayingVal_Init(theme);
 802196c:	79fb      	ldrb	r3, [r7, #7]
 802196e:	4618      	mov	r0, r3
 8021970:	f000 f984 	bl	8021c7c <MusicPlayerPlayingVal_Init>
		MusicPlayerDescriptionLbl_Init(theme);
 8021974:	79fb      	ldrb	r3, [r7, #7]
 8021976:	4618      	mov	r0, r3
 8021978:	f000 f9a8 	bl	8021ccc <MusicPlayerDescriptionLbl_Init>

		MP_taskController=true;
 802197c:	4b0f      	ldr	r3, [pc, #60]	; (80219bc <tos_MusicPlayerScreen_Init+0xec>)
 802197e:	2201      	movs	r2, #1
 8021980:	701a      	strb	r2, [r3, #0]
		lv_task_create(MusicPlayerScreen_Updater, 750, LV_TASK_PRIO_LOWEST, NULL);
 8021982:	2300      	movs	r3, #0
 8021984:	2201      	movs	r2, #1
 8021986:	f240 21ee 	movw	r1, #750	; 0x2ee
 802198a:	480d      	ldr	r0, [pc, #52]	; (80219c0 <tos_MusicPlayerScreen_Init+0xf0>)
 802198c:	f7f2 fa4c 	bl	8013e28 <lv_task_create>
}
 8021990:	bf00      	nop
 8021992:	370c      	adds	r7, #12
 8021994:	46bd      	mov	sp, r7
 8021996:	bd90      	pop	{r4, r7, pc}
 8021998:	20006c74 	.word	0x20006c74
 802199c:	20005f98 	.word	0x20005f98
 80219a0:	200017c0 	.word	0x200017c0
 80219a4:	08029e90 	.word	0x08029e90
 80219a8:	20005f5c 	.word	0x20005f5c
 80219ac:	08029e94 	.word	0x08029e94
 80219b0:	20006f41 	.word	0x20006f41
 80219b4:	20006f20 	.word	0x20006f20
 80219b8:	20006f30 	.word	0x20006f30
 80219bc:	20006f28 	.word	0x20006f28
 80219c0:	080219c5 	.word	0x080219c5

080219c4 <MusicPlayerScreen_Updater>:


/*This function using for update variables*/
void MusicPlayerScreen_Updater(lv_task_t *t){
 80219c4:	b580      	push	{r7, lr}
 80219c6:	b084      	sub	sp, #16
 80219c8:	af02      	add	r7, sp, #8
 80219ca:	6078      	str	r0, [r7, #4]
	if(MP_taskController){
 80219cc:	4b2a      	ldr	r3, [pc, #168]	; (8021a78 <MusicPlayerScreen_Updater+0xb4>)
 80219ce:	781b      	ldrb	r3, [r3, #0]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d049      	beq.n	8021a68 <MusicPlayerScreen_Updater+0xa4>
		if(NULL != MP_SongName) 	lv_label_set_text(MP_SongNameLbl, MP_SongName);
 80219d4:	4b29      	ldr	r3, [pc, #164]	; (8021a7c <MusicPlayerScreen_Updater+0xb8>)
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d008      	beq.n	80219ee <MusicPlayerScreen_Updater+0x2a>
 80219dc:	4b28      	ldr	r3, [pc, #160]	; (8021a80 <MusicPlayerScreen_Updater+0xbc>)
 80219de:	681a      	ldr	r2, [r3, #0]
 80219e0:	4b26      	ldr	r3, [pc, #152]	; (8021a7c <MusicPlayerScreen_Updater+0xb8>)
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	4619      	mov	r1, r3
 80219e6:	4610      	mov	r0, r2
 80219e8:	f7f7 fec2 	bl	8019770 <lv_label_set_text>
 80219ec:	e005      	b.n	80219fa <MusicPlayerScreen_Updater+0x36>
		else lv_label_set_text(MP_SongNameLbl, "unknow");
 80219ee:	4b24      	ldr	r3, [pc, #144]	; (8021a80 <MusicPlayerScreen_Updater+0xbc>)
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	4924      	ldr	r1, [pc, #144]	; (8021a84 <MusicPlayerScreen_Updater+0xc0>)
 80219f4:	4618      	mov	r0, r3
 80219f6:	f7f7 febb 	bl	8019770 <lv_label_set_text>
		if(NULL != MP_SongActrist) lv_label_set_text(MP_SingerLbl, MP_SongActrist);
 80219fa:	4b23      	ldr	r3, [pc, #140]	; (8021a88 <MusicPlayerScreen_Updater+0xc4>)
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d008      	beq.n	8021a14 <MusicPlayerScreen_Updater+0x50>
 8021a02:	4b22      	ldr	r3, [pc, #136]	; (8021a8c <MusicPlayerScreen_Updater+0xc8>)
 8021a04:	681a      	ldr	r2, [r3, #0]
 8021a06:	4b20      	ldr	r3, [pc, #128]	; (8021a88 <MusicPlayerScreen_Updater+0xc4>)
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	4619      	mov	r1, r3
 8021a0c:	4610      	mov	r0, r2
 8021a0e:	f7f7 feaf 	bl	8019770 <lv_label_set_text>
 8021a12:	e005      	b.n	8021a20 <MusicPlayerScreen_Updater+0x5c>
		else lv_label_set_text(MP_SingerLbl, "unknow");
 8021a14:	4b1d      	ldr	r3, [pc, #116]	; (8021a8c <MusicPlayerScreen_Updater+0xc8>)
 8021a16:	681b      	ldr	r3, [r3, #0]
 8021a18:	491a      	ldr	r1, [pc, #104]	; (8021a84 <MusicPlayerScreen_Updater+0xc0>)
 8021a1a:	4618      	mov	r0, r3
 8021a1c:	f7f7 fea8 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8021a20:	4b17      	ldr	r3, [pc, #92]	; (8021a80 <MusicPlayerScreen_Updater+0xbc>)
 8021a22:	6818      	ldr	r0, [r3, #0]
 8021a24:	2332      	movs	r3, #50	; 0x32
 8021a26:	9300      	str	r3, [sp, #0]
 8021a28:	2300      	movs	r3, #0
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	2100      	movs	r1, #0
 8021a2e:	f7e4 fc55 	bl	80062dc <lv_obj_align>
	 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 8021a32:	4b16      	ldr	r3, [pc, #88]	; (8021a8c <MusicPlayerScreen_Updater+0xc8>)
 8021a34:	6818      	ldr	r0, [r3, #0]
 8021a36:	2355      	movs	r3, #85	; 0x55
 8021a38:	9300      	str	r3, [sp, #0]
 8021a3a:	2300      	movs	r3, #0
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	2100      	movs	r1, #0
 8021a40:	f7e4 fc4c 	bl	80062dc <lv_obj_align>
	    lv_bar_set_value(MP_soundValBar, MP_SoundVal, LV_ANIM_OFF);
 8021a44:	4b12      	ldr	r3, [pc, #72]	; (8021a90 <MusicPlayerScreen_Updater+0xcc>)
 8021a46:	6818      	ldr	r0, [r3, #0]
 8021a48:	4b12      	ldr	r3, [pc, #72]	; (8021a94 <MusicPlayerScreen_Updater+0xd0>)
 8021a4a:	781b      	ldrb	r3, [r3, #0]
 8021a4c:	b21b      	sxth	r3, r3
 8021a4e:	2200      	movs	r2, #0
 8021a50:	4619      	mov	r1, r3
 8021a52:	f7f3 facf 	bl	8014ff4 <lv_bar_set_value>
		MusicPlayerImgSet(MP_statu,MP_theme);
 8021a56:	4b10      	ldr	r3, [pc, #64]	; (8021a98 <MusicPlayerScreen_Updater+0xd4>)
 8021a58:	781a      	ldrb	r2, [r3, #0]
 8021a5a:	4b10      	ldr	r3, [pc, #64]	; (8021a9c <MusicPlayerScreen_Updater+0xd8>)
 8021a5c:	781b      	ldrb	r3, [r3, #0]
 8021a5e:	4619      	mov	r1, r3
 8021a60:	4610      	mov	r0, r2
 8021a62:	f000 fa2b 	bl	8021ebc <MusicPlayerImgSet>
	}else lv_task_del(t);
}
 8021a66:	e002      	b.n	8021a6e <MusicPlayerScreen_Updater+0xaa>
	}else lv_task_del(t);
 8021a68:	6878      	ldr	r0, [r7, #4]
 8021a6a:	f7f2 fa15 	bl	8013e98 <lv_task_del>
}
 8021a6e:	bf00      	nop
 8021a70:	3708      	adds	r7, #8
 8021a72:	46bd      	mov	sp, r7
 8021a74:	bd80      	pop	{r7, pc}
 8021a76:	bf00      	nop
 8021a78:	20006f28 	.word	0x20006f28
 8021a7c:	20006f24 	.word	0x20006f24
 8021a80:	20006f3c 	.word	0x20006f3c
 8021a84:	08029e98 	.word	0x08029e98
 8021a88:	20006f2c 	.word	0x20006f2c
 8021a8c:	20006f34 	.word	0x20006f34
 8021a90:	20006f18 	.word	0x20006f18
 8021a94:	20006f38 	.word	0x20006f38
 8021a98:	20006f40 	.word	0x20006f40
 8021a9c:	20006f41 	.word	0x20006f41

08021aa0 <MusicPlayerSound_Init>:
/**/
void MusicPlayerSound_Init(bool theme){
 8021aa0:	b590      	push	{r4, r7, lr}
 8021aa2:	b087      	sub	sp, #28
 8021aa4:	af02      	add	r7, sp, #8
 8021aa6:	4603      	mov	r3, r0
 8021aa8:	71fb      	strb	r3, [r7, #7]

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 8021aaa:	496b      	ldr	r1, [pc, #428]	; (8021c58 <MusicPlayerSound_Init+0x1b8>)
 8021aac:	486b      	ldr	r0, [pc, #428]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021aae:	f7e6 fe59 	bl	8008764 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 8021ab2:	4b6a      	ldr	r3, [pc, #424]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021ab4:	2200      	movs	r2, #0
 8021ab6:	841a      	strh	r2, [r3, #32]
    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8021ab8:	79fb      	ldrb	r3, [r7, #7]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d003      	beq.n	8021ac6 <MusicPlayerSound_Init+0x26>
 8021abe:	4a67      	ldr	r2, [pc, #412]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021ac0:	4b67      	ldr	r3, [pc, #412]	; (8021c60 <MusicPlayerSound_Init+0x1c0>)
 8021ac2:	881b      	ldrh	r3, [r3, #0]
 8021ac4:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;	//373737
 8021ac6:	4b65      	ldr	r3, [pc, #404]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021ac8:	4a66      	ldr	r2, [pc, #408]	; (8021c64 <MusicPlayerSound_Init+0x1c4>)
 8021aca:	625a      	str	r2, [r3, #36]	; 0x24
    if(theme){
 8021acc:	79fb      	ldrb	r3, [r7, #7]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d00e      	beq.n	8021af0 <MusicPlayerSound_Init+0x50>
        obj_Style.body.main_color   = lv_color_make(0x00, 0x00, 0x00);
 8021ad2:	4c62      	ldr	r4, [pc, #392]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021ad4:	2200      	movs	r2, #0
 8021ad6:	2100      	movs	r1, #0
 8021ad8:	2000      	movs	r0, #0
 8021ada:	f7ff feb5 	bl	8021848 <lv_color_make>
 8021ade:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x00, 0x00, 0x00);
 8021ae0:	4c5e      	ldr	r4, [pc, #376]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	2100      	movs	r1, #0
 8021ae6:	2000      	movs	r0, #0
 8021ae8:	f7ff feae 	bl	8021848 <lv_color_make>
 8021aec:	80a0      	strh	r0, [r4, #4]
 8021aee:	e00d      	b.n	8021b0c <MusicPlayerSound_Init+0x6c>
    }else {
        obj_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8021af0:	4c5a      	ldr	r4, [pc, #360]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021af2:	2237      	movs	r2, #55	; 0x37
 8021af4:	2137      	movs	r1, #55	; 0x37
 8021af6:	2037      	movs	r0, #55	; 0x37
 8021af8:	f7ff fea6 	bl	8021848 <lv_color_make>
 8021afc:	8060      	strh	r0, [r4, #2]
        obj_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 8021afe:	4c57      	ldr	r4, [pc, #348]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021b00:	2237      	movs	r2, #55	; 0x37
 8021b02:	2137      	movs	r1, #55	; 0x37
 8021b04:	2037      	movs	r0, #55	; 0x37
 8021b06:	f7ff fe9f 	bl	8021848 <lv_color_make>
 8021b0a:	80a0      	strh	r0, [r4, #4]
    }
    obj_Style.body.radius= 10;
 8021b0c:	4b53      	ldr	r3, [pc, #332]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021b0e:	220a      	movs	r2, #10
 8021b10:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8021b12:	4b52      	ldr	r3, [pc, #328]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021b14:	22c8      	movs	r2, #200	; 0xc8
 8021b16:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 8021b18:	4950      	ldr	r1, [pc, #320]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021b1a:	4853      	ldr	r0, [pc, #332]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b1c:	f7e6 fe22 	bl	8008764 <lv_style_copy>
    if(theme){
 8021b20:	79fb      	ldrb	r3, [r7, #7]
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d00e      	beq.n	8021b44 <MusicPlayerSound_Init+0xa4>
        indic_Style.body.main_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 8021b26:	4c50      	ldr	r4, [pc, #320]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b28:	22c0      	movs	r2, #192	; 0xc0
 8021b2a:	21c0      	movs	r1, #192	; 0xc0
 8021b2c:	20c0      	movs	r0, #192	; 0xc0
 8021b2e:	f7ff fe8b 	bl	8021848 <lv_color_make>
 8021b32:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0xc0, 0xc0, 0xc0);
 8021b34:	4c4c      	ldr	r4, [pc, #304]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b36:	22c0      	movs	r2, #192	; 0xc0
 8021b38:	21c0      	movs	r1, #192	; 0xc0
 8021b3a:	20c0      	movs	r0, #192	; 0xc0
 8021b3c:	f7ff fe84 	bl	8021848 <lv_color_make>
 8021b40:	80a0      	strh	r0, [r4, #4]
 8021b42:	e00d      	b.n	8021b60 <MusicPlayerSound_Init+0xc0>
    }else {
        indic_Style.body.main_color   = lv_color_make(0x37, 0x37, 0x37);
 8021b44:	4c48      	ldr	r4, [pc, #288]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b46:	2237      	movs	r2, #55	; 0x37
 8021b48:	2137      	movs	r1, #55	; 0x37
 8021b4a:	2037      	movs	r0, #55	; 0x37
 8021b4c:	f7ff fe7c 	bl	8021848 <lv_color_make>
 8021b50:	8060      	strh	r0, [r4, #2]
        indic_Style.body.grad_color   = lv_color_make(0x37, 0x37, 0x37);
 8021b52:	4c45      	ldr	r4, [pc, #276]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b54:	2237      	movs	r2, #55	; 0x37
 8021b56:	2137      	movs	r1, #55	; 0x37
 8021b58:	2037      	movs	r0, #55	; 0x37
 8021b5a:	f7ff fe75 	bl	8021848 <lv_color_make>
 8021b5e:	80a0      	strh	r0, [r4, #4]
    }
    indic_Style.body.opa=255;
 8021b60:	4b41      	ldr	r3, [pc, #260]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b62:	22ff      	movs	r2, #255	; 0xff
 8021b64:	721a      	strb	r2, [r3, #8]

    MP_soundValBar = lv_bar_create(lv_scr_act(), NULL);
 8021b66:	f7ff fea7 	bl	80218b8 <lv_scr_act>
 8021b6a:	4603      	mov	r3, r0
 8021b6c:	2100      	movs	r1, #0
 8021b6e:	4618      	mov	r0, r3
 8021b70:	f7f3 f97a 	bl	8014e68 <lv_bar_create>
 8021b74:	4602      	mov	r2, r0
 8021b76:	4b3d      	ldr	r3, [pc, #244]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021b78:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_BG, &obj_Style);
 8021b7a:	4b3c      	ldr	r3, [pc, #240]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	4a37      	ldr	r2, [pc, #220]	; (8021c5c <MusicPlayerSound_Init+0x1bc>)
 8021b80:	2100      	movs	r1, #0
 8021b82:	4618      	mov	r0, r3
 8021b84:	f7f3 fb06 	bl	8015194 <lv_bar_set_style>
    lv_bar_set_style(MP_soundValBar, LV_BAR_STYLE_INDIC, &indic_Style);
 8021b88:	4b38      	ldr	r3, [pc, #224]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	4a36      	ldr	r2, [pc, #216]	; (8021c68 <MusicPlayerSound_Init+0x1c8>)
 8021b8e:	2101      	movs	r1, #1
 8021b90:	4618      	mov	r0, r3
 8021b92:	f7f3 faff 	bl	8015194 <lv_bar_set_style>
    lv_obj_set_size(MP_soundValBar, 150, 25);
 8021b96:	4b35      	ldr	r3, [pc, #212]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021b98:	681b      	ldr	r3, [r3, #0]
 8021b9a:	2219      	movs	r2, #25
 8021b9c:	2196      	movs	r1, #150	; 0x96
 8021b9e:	4618      	mov	r0, r3
 8021ba0:	f7e4 faf9 	bl	8006196 <lv_obj_set_size>
    lv_obj_align(MP_soundValBar, NULL, LV_ALIGN_CENTER, 0, -100);
 8021ba4:	4b31      	ldr	r3, [pc, #196]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021ba6:	6818      	ldr	r0, [r3, #0]
 8021ba8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8021bac:	9300      	str	r3, [sp, #0]
 8021bae:	2300      	movs	r3, #0
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	2100      	movs	r1, #0
 8021bb4:	f7e4 fb92 	bl	80062dc <lv_obj_align>
    lv_bar_set_range(MP_soundValBar,0,100);
 8021bb8:	4b2c      	ldr	r3, [pc, #176]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	2264      	movs	r2, #100	; 0x64
 8021bbe:	2100      	movs	r1, #0
 8021bc0:	4618      	mov	r0, r3
 8021bc2:	f7f3 fa9b 	bl	80150fc <lv_bar_set_range>
    lv_bar_set_value(MP_soundValBar, 0, LV_ANIM_OFF);
 8021bc6:	4b29      	ldr	r3, [pc, #164]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	2100      	movs	r1, #0
 8021bce:	4618      	mov	r0, r3
 8021bd0:	f7f3 fa10 	bl	8014ff4 <lv_bar_set_value>

    lv_obj_t * plusLbl = lv_label_create(lv_scr_act(), NULL);
 8021bd4:	f7ff fe70 	bl	80218b8 <lv_scr_act>
 8021bd8:	4603      	mov	r3, r0
 8021bda:	2100      	movs	r1, #0
 8021bdc:	4618      	mov	r0, r3
 8021bde:	f7f7 fc95 	bl	801950c <lv_label_create>
 8021be2:	60f8      	str	r0, [r7, #12]
    lv_label_set_recolor(plusLbl, true);
 8021be4:	2101      	movs	r1, #1
 8021be6:	68f8      	ldr	r0, [r7, #12]
 8021be8:	f7f7 fede 	bl	80199a8 <lv_label_set_recolor>
	lv_label_set_text(plusLbl, "#FFFFFF +#");
 8021bec:	4920      	ldr	r1, [pc, #128]	; (8021c70 <MusicPlayerSound_Init+0x1d0>)
 8021bee:	68f8      	ldr	r0, [r7, #12]
 8021bf0:	f7f7 fdbe 	bl	8019770 <lv_label_set_text>
    lv_arc_set_style(plusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021bf4:	4a1f      	ldr	r2, [pc, #124]	; (8021c74 <MusicPlayerSound_Init+0x1d4>)
 8021bf6:	2100      	movs	r1, #0
 8021bf8:	68f8      	ldr	r0, [r7, #12]
 8021bfa:	f7f2 ff2a 	bl	8014a52 <lv_arc_set_style>
 	lv_obj_align(plusLbl, MP_soundValBar, LV_ALIGN_CENTER, 65, 0);
 8021bfe:	4b1b      	ldr	r3, [pc, #108]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021c00:	6819      	ldr	r1, [r3, #0]
 8021c02:	2300      	movs	r3, #0
 8021c04:	9300      	str	r3, [sp, #0]
 8021c06:	2341      	movs	r3, #65	; 0x41
 8021c08:	2200      	movs	r2, #0
 8021c0a:	68f8      	ldr	r0, [r7, #12]
 8021c0c:	f7e4 fb66 	bl	80062dc <lv_obj_align>

    lv_obj_t * minusLbl = lv_label_create(lv_scr_act(), NULL);
 8021c10:	f7ff fe52 	bl	80218b8 <lv_scr_act>
 8021c14:	4603      	mov	r3, r0
 8021c16:	2100      	movs	r1, #0
 8021c18:	4618      	mov	r0, r3
 8021c1a:	f7f7 fc77 	bl	801950c <lv_label_create>
 8021c1e:	60b8      	str	r0, [r7, #8]
    lv_label_set_recolor(minusLbl, true);
 8021c20:	2101      	movs	r1, #1
 8021c22:	68b8      	ldr	r0, [r7, #8]
 8021c24:	f7f7 fec0 	bl	80199a8 <lv_label_set_recolor>
	lv_label_set_text(minusLbl, "#FFFFFF -#");
 8021c28:	4913      	ldr	r1, [pc, #76]	; (8021c78 <MusicPlayerSound_Init+0x1d8>)
 8021c2a:	68b8      	ldr	r0, [r7, #8]
 8021c2c:	f7f7 fda0 	bl	8019770 <lv_label_set_text>
    lv_arc_set_style(minusLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021c30:	4a10      	ldr	r2, [pc, #64]	; (8021c74 <MusicPlayerSound_Init+0x1d4>)
 8021c32:	2100      	movs	r1, #0
 8021c34:	68b8      	ldr	r0, [r7, #8]
 8021c36:	f7f2 ff0c 	bl	8014a52 <lv_arc_set_style>
 	lv_obj_align(minusLbl, MP_soundValBar, LV_ALIGN_CENTER, -65, 0);
 8021c3a:	4b0c      	ldr	r3, [pc, #48]	; (8021c6c <MusicPlayerSound_Init+0x1cc>)
 8021c3c:	6819      	ldr	r1, [r3, #0]
 8021c3e:	2300      	movs	r3, #0
 8021c40:	9300      	str	r3, [sp, #0]
 8021c42:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8021c46:	2200      	movs	r2, #0
 8021c48:	68b8      	ldr	r0, [r7, #8]
 8021c4a:	f7e4 fb47 	bl	80062dc <lv_obj_align>

}
 8021c4e:	bf00      	nop
 8021c50:	3714      	adds	r7, #20
 8021c52:	46bd      	mov	sp, r7
 8021c54:	bd90      	pop	{r4, r7, pc}
 8021c56:	bf00      	nop
 8021c58:	20006c74 	.word	0x20006c74
 8021c5c:	20005fd8 	.word	0x20005fd8
 8021c60:	08029eb8 	.word	0x08029eb8
 8021c64:	200027e8 	.word	0x200027e8
 8021c68:	20006014 	.word	0x20006014
 8021c6c:	20006f18 	.word	0x20006f18
 8021c70:	08029ea0 	.word	0x08029ea0
 8021c74:	20005f98 	.word	0x20005f98
 8021c78:	08029eac 	.word	0x08029eac

08021c7c <MusicPlayerPlayingVal_Init>:
/*his function using for initialization playing statu image obj.*/
void MusicPlayerPlayingVal_Init(bool theme){
 8021c7c:	b580      	push	{r7, lr}
 8021c7e:	b084      	sub	sp, #16
 8021c80:	af02      	add	r7, sp, #8
 8021c82:	4603      	mov	r3, r0
 8021c84:	71fb      	strb	r3, [r7, #7]

	MP_PlayingVAl_Img = lv_img_create(lv_scr_act(), NULL);
 8021c86:	f7ff fe17 	bl	80218b8 <lv_scr_act>
 8021c8a:	4603      	mov	r3, r0
 8021c8c:	2100      	movs	r1, #0
 8021c8e:	4618      	mov	r0, r3
 8021c90:	f7f7 f8b0 	bl	8018df4 <lv_img_create>
 8021c94:	4602      	mov	r2, r0
 8021c96:	4b0b      	ldr	r3, [pc, #44]	; (8021cc4 <MusicPlayerPlayingVal_Init+0x48>)
 8021c98:	601a      	str	r2, [r3, #0]
	MusicPlayerImgSet(MP_statu,theme);
 8021c9a:	4b0b      	ldr	r3, [pc, #44]	; (8021cc8 <MusicPlayerPlayingVal_Init+0x4c>)
 8021c9c:	781b      	ldrb	r3, [r3, #0]
 8021c9e:	79fa      	ldrb	r2, [r7, #7]
 8021ca0:	4611      	mov	r1, r2
 8021ca2:	4618      	mov	r0, r3
 8021ca4:	f000 f90a 	bl	8021ebc <MusicPlayerImgSet>
	lv_obj_align(MP_PlayingVAl_Img, NULL, LV_ALIGN_CENTER, 0,0);
 8021ca8:	4b06      	ldr	r3, [pc, #24]	; (8021cc4 <MusicPlayerPlayingVal_Init+0x48>)
 8021caa:	6818      	ldr	r0, [r3, #0]
 8021cac:	2300      	movs	r3, #0
 8021cae:	9300      	str	r3, [sp, #0]
 8021cb0:	2300      	movs	r3, #0
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	2100      	movs	r1, #0
 8021cb6:	f7e4 fb11 	bl	80062dc <lv_obj_align>

}
 8021cba:	bf00      	nop
 8021cbc:	3708      	adds	r7, #8
 8021cbe:	46bd      	mov	sp, r7
 8021cc0:	bd80      	pop	{r7, pc}
 8021cc2:	bf00      	nop
 8021cc4:	20006f1c 	.word	0x20006f1c
 8021cc8:	20006f40 	.word	0x20006f40

08021ccc <MusicPlayerDescriptionLbl_Init>:
/*This funct}ion using for initialization description(name & songer) of music */
void MusicPlayerDescriptionLbl_Init(bool theme){
 8021ccc:	b580      	push	{r7, lr}
 8021cce:	b084      	sub	sp, #16
 8021cd0:	af02      	add	r7, sp, #8
 8021cd2:	4603      	mov	r3, r0
 8021cd4:	71fb      	strb	r3, [r7, #7]

 	MP_SongNameLbl = lv_label_create(lv_scr_act(), NULL);
 8021cd6:	f7ff fdef 	bl	80218b8 <lv_scr_act>
 8021cda:	4603      	mov	r3, r0
 8021cdc:	2100      	movs	r1, #0
 8021cde:	4618      	mov	r0, r3
 8021ce0:	f7f7 fc14 	bl	801950c <lv_label_create>
 8021ce4:	4602      	mov	r2, r0
 8021ce6:	4b24      	ldr	r3, [pc, #144]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021ce8:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SongNameLbl, 240);
 8021cea:	4b23      	ldr	r3, [pc, #140]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	21f0      	movs	r1, #240	; 0xf0
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	f7e4 fac9 	bl	8006288 <lv_obj_set_width>
	lv_label_set_text(MP_SongNameLbl, "song name");
 8021cf6:	4b20      	ldr	r3, [pc, #128]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	4920      	ldr	r1, [pc, #128]	; (8021d7c <MusicPlayerDescriptionLbl_Init+0xb0>)
 8021cfc:	4618      	mov	r0, r3
 8021cfe:	f7f7 fd37 	bl	8019770 <lv_label_set_text>
    lv_arc_set_style(MP_SongNameLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021d02:	4b1d      	ldr	r3, [pc, #116]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	4a1e      	ldr	r2, [pc, #120]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb4>)
 8021d08:	2100      	movs	r1, #0
 8021d0a:	4618      	mov	r0, r3
 8021d0c:	f7f2 fea1 	bl	8014a52 <lv_arc_set_style>
 	lv_obj_align(MP_SongNameLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8021d10:	4b19      	ldr	r3, [pc, #100]	; (8021d78 <MusicPlayerDescriptionLbl_Init+0xac>)
 8021d12:	6818      	ldr	r0, [r3, #0]
 8021d14:	2332      	movs	r3, #50	; 0x32
 8021d16:	9300      	str	r3, [sp, #0]
 8021d18:	2300      	movs	r3, #0
 8021d1a:	2200      	movs	r2, #0
 8021d1c:	2100      	movs	r1, #0
 8021d1e:	f7e4 fadd 	bl	80062dc <lv_obj_align>

	MP_SingerLbl = lv_label_create(lv_scr_act(), NULL);
 8021d22:	f7ff fdc9 	bl	80218b8 <lv_scr_act>
 8021d26:	4603      	mov	r3, r0
 8021d28:	2100      	movs	r1, #0
 8021d2a:	4618      	mov	r0, r3
 8021d2c:	f7f7 fbee 	bl	801950c <lv_label_create>
 8021d30:	4602      	mov	r2, r0
 8021d32:	4b14      	ldr	r3, [pc, #80]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d34:	601a      	str	r2, [r3, #0]
 	lv_obj_set_width(MP_SingerLbl, 240);
 8021d36:	4b13      	ldr	r3, [pc, #76]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	21f0      	movs	r1, #240	; 0xf0
 8021d3c:	4618      	mov	r0, r3
 8021d3e:	f7e4 faa3 	bl	8006288 <lv_obj_set_width>
	lv_label_set_text(MP_SingerLbl, "song actrist");
 8021d42:	4b10      	ldr	r3, [pc, #64]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d44:	681b      	ldr	r3, [r3, #0]
 8021d46:	4910      	ldr	r1, [pc, #64]	; (8021d88 <MusicPlayerDescriptionLbl_Init+0xbc>)
 8021d48:	4618      	mov	r0, r3
 8021d4a:	f7f7 fd11 	bl	8019770 <lv_label_set_text>
    lv_arc_set_style(MP_SingerLbl, LV_ARC_STYLE_MAIN, &description_Style);
 8021d4e:	4b0d      	ldr	r3, [pc, #52]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d50:	681b      	ldr	r3, [r3, #0]
 8021d52:	4a0b      	ldr	r2, [pc, #44]	; (8021d80 <MusicPlayerDescriptionLbl_Init+0xb4>)
 8021d54:	2100      	movs	r1, #0
 8021d56:	4618      	mov	r0, r3
 8021d58:	f7f2 fe7b 	bl	8014a52 <lv_arc_set_style>
 	lv_obj_align(MP_SingerLbl, NULL, LV_ALIGN_CENTER, 0, 85);
 8021d5c:	4b09      	ldr	r3, [pc, #36]	; (8021d84 <MusicPlayerDescriptionLbl_Init+0xb8>)
 8021d5e:	6818      	ldr	r0, [r3, #0]
 8021d60:	2355      	movs	r3, #85	; 0x55
 8021d62:	9300      	str	r3, [sp, #0]
 8021d64:	2300      	movs	r3, #0
 8021d66:	2200      	movs	r2, #0
 8021d68:	2100      	movs	r1, #0
 8021d6a:	f7e4 fab7 	bl	80062dc <lv_obj_align>


}
 8021d6e:	bf00      	nop
 8021d70:	3708      	adds	r7, #8
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bd80      	pop	{r7, pc}
 8021d76:	bf00      	nop
 8021d78:	20006f3c 	.word	0x20006f3c
 8021d7c:	08029ebc 	.word	0x08029ebc
 8021d80:	20005f98 	.word	0x20005f98
 8021d84:	20006f34 	.word	0x20006f34
 8021d88:	08029ec8 	.word	0x08029ec8

08021d8c <MusicPlayer_ButtonController>:
/*This function using for control to buttons*/
void MusicPlayer_ButtonController(void){
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	af00      	add	r7, sp, #0
	if(!MP_isButtonPressed){
 8021d90:	4b2f      	ldr	r3, [pc, #188]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021d92:	781b      	ldrb	r3, [r3, #0]
 8021d94:	f083 0301 	eor.w	r3, r3, #1
 8021d98:	b2db      	uxtb	r3, r3
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d056      	beq.n	8021e4c <MusicPlayer_ButtonController+0xc0>
		  if(2==MP_leftBtnListen){
 8021d9e:	4b2d      	ldr	r3, [pc, #180]	; (8021e54 <MusicPlayer_ButtonController+0xc8>)
 8021da0:	781b      	ldrb	r3, [r3, #0]
 8021da2:	2b02      	cmp	r3, #2
 8021da4:	d105      	bne.n	8021db2 <MusicPlayer_ButtonController+0x26>
				MP_isButtonPressed=true;
 8021da6:	4b2a      	ldr	r3, [pc, #168]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021da8:	2201      	movs	r2, #1
 8021daa:	701a      	strb	r2, [r3, #0]
			   MP_statu=2;
 8021dac:	4b2a      	ldr	r3, [pc, #168]	; (8021e58 <MusicPlayer_ButtonController+0xcc>)
 8021dae:	2202      	movs	r2, #2
 8021db0:	701a      	strb	r2, [r3, #0]
		  }
		if(2==MP_rightBtnListen){
 8021db2:	4b2a      	ldr	r3, [pc, #168]	; (8021e5c <MusicPlayer_ButtonController+0xd0>)
 8021db4:	781b      	ldrb	r3, [r3, #0]
 8021db6:	2b02      	cmp	r3, #2
 8021db8:	d10d      	bne.n	8021dd6 <MusicPlayer_ButtonController+0x4a>
				MP_isButtonPressed=true;
 8021dba:	4b25      	ldr	r3, [pc, #148]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021dbc:	2201      	movs	r2, #1
 8021dbe:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode)MP_buttonMode=false;
 8021dc0:	4b27      	ldr	r3, [pc, #156]	; (8021e60 <MusicPlayer_ButtonController+0xd4>)
 8021dc2:	781b      	ldrb	r3, [r3, #0]
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d003      	beq.n	8021dd0 <MusicPlayer_ButtonController+0x44>
 8021dc8:	4b25      	ldr	r3, [pc, #148]	; (8021e60 <MusicPlayer_ButtonController+0xd4>)
 8021dca:	2200      	movs	r2, #0
 8021dcc:	701a      	strb	r2, [r3, #0]
 8021dce:	e002      	b.n	8021dd6 <MusicPlayer_ButtonController+0x4a>
			else MP_buttonMode=true;
 8021dd0:	4b23      	ldr	r3, [pc, #140]	; (8021e60 <MusicPlayer_ButtonController+0xd4>)
 8021dd2:	2201      	movs	r2, #1
 8021dd4:	701a      	strb	r2, [r3, #0]
				  }
	if(1==MP_leftBtnListen) {
 8021dd6:	4b1f      	ldr	r3, [pc, #124]	; (8021e54 <MusicPlayer_ButtonController+0xc8>)
 8021dd8:	781b      	ldrb	r3, [r3, #0]
 8021dda:	2b01      	cmp	r3, #1
 8021ddc:	d119      	bne.n	8021e12 <MusicPlayer_ButtonController+0x86>
				MP_isButtonPressed=true;
 8021dde:	4b1c      	ldr	r3, [pc, #112]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021de0:	2201      	movs	r2, #1
 8021de2:	701a      	strb	r2, [r3, #0]
			if(MP_buttonMode) soundVolumeController(false);
 8021de4:	4b1e      	ldr	r3, [pc, #120]	; (8021e60 <MusicPlayer_ButtonController+0xd4>)
 8021de6:	781b      	ldrb	r3, [r3, #0]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d003      	beq.n	8021df4 <MusicPlayer_ButtonController+0x68>
 8021dec:	2000      	movs	r0, #0
 8021dee:	f000 f839 	bl	8021e64 <soundVolumeController>
 8021df2:	e00e      	b.n	8021e12 <MusicPlayer_ButtonController+0x86>
			else{
				if((1==MP_statu) || (2==MP_statu)) MP_statu=0;
 8021df4:	4b18      	ldr	r3, [pc, #96]	; (8021e58 <MusicPlayer_ButtonController+0xcc>)
 8021df6:	781b      	ldrb	r3, [r3, #0]
 8021df8:	2b01      	cmp	r3, #1
 8021dfa:	d003      	beq.n	8021e04 <MusicPlayer_ButtonController+0x78>
 8021dfc:	4b16      	ldr	r3, [pc, #88]	; (8021e58 <MusicPlayer_ButtonController+0xcc>)
 8021dfe:	781b      	ldrb	r3, [r3, #0]
 8021e00:	2b02      	cmp	r3, #2
 8021e02:	d103      	bne.n	8021e0c <MusicPlayer_ButtonController+0x80>
 8021e04:	4b14      	ldr	r3, [pc, #80]	; (8021e58 <MusicPlayer_ButtonController+0xcc>)
 8021e06:	2200      	movs	r2, #0
 8021e08:	701a      	strb	r2, [r3, #0]
 8021e0a:	e002      	b.n	8021e12 <MusicPlayer_ButtonController+0x86>
				else MP_statu=1;
 8021e0c:	4b12      	ldr	r3, [pc, #72]	; (8021e58 <MusicPlayer_ButtonController+0xcc>)
 8021e0e:	2201      	movs	r2, #1
 8021e10:	701a      	strb	r2, [r3, #0]
				  }
			  }


	if(1==MP_rightBtnListen) {
 8021e12:	4b12      	ldr	r3, [pc, #72]	; (8021e5c <MusicPlayer_ButtonController+0xd0>)
 8021e14:	781b      	ldrb	r3, [r3, #0]
 8021e16:	2b01      	cmp	r3, #1
 8021e18:	d109      	bne.n	8021e2e <MusicPlayer_ButtonController+0xa2>
				MP_isButtonPressed=true;
 8021e1a:	4b0d      	ldr	r3, [pc, #52]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021e1c:	2201      	movs	r2, #1
 8021e1e:	701a      	strb	r2, [r3, #0]
				if(MP_buttonMode) soundVolumeController(true);
 8021e20:	4b0f      	ldr	r3, [pc, #60]	; (8021e60 <MusicPlayer_ButtonController+0xd4>)
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	2b00      	cmp	r3, #0
 8021e26:	d002      	beq.n	8021e2e <MusicPlayer_ButtonController+0xa2>
 8021e28:	2001      	movs	r0, #1
 8021e2a:	f000 f81b 	bl	8021e64 <soundVolumeController>

			  }
				MP_isButtonPressed=false;
 8021e2e:	4b08      	ldr	r3, [pc, #32]	; (8021e50 <MusicPlayer_ButtonController+0xc4>)
 8021e30:	2200      	movs	r2, #0
 8021e32:	701a      	strb	r2, [r3, #0]
				MP_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 8021e34:	f004 fc88 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 8021e38:	4603      	mov	r3, r0
 8021e3a:	461a      	mov	r2, r3
 8021e3c:	4b07      	ldr	r3, [pc, #28]	; (8021e5c <MusicPlayer_ButtonController+0xd0>)
 8021e3e:	701a      	strb	r2, [r3, #0]
				MP_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8021e40:	f004 fcaa 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8021e44:	4603      	mov	r3, r0
 8021e46:	461a      	mov	r2, r3
 8021e48:	4b02      	ldr	r3, [pc, #8]	; (8021e54 <MusicPlayer_ButtonController+0xc8>)
 8021e4a:	701a      	strb	r2, [r3, #0]
	}

}
 8021e4c:	bf00      	nop
 8021e4e:	bd80      	pop	{r7, pc}
 8021e50:	20006f20 	.word	0x20006f20
 8021e54:	20005fd5 	.word	0x20005fd5
 8021e58:	20006f40 	.word	0x20006f40
 8021e5c:	20005fd4 	.word	0x20005fd4
 8021e60:	20006f30 	.word	0x20006f30

08021e64 <soundVolumeController>:
/*This function using for plus or minus volume
 * @param vol
 * true -> plus
 * false -> minus */
void soundVolumeController(bool vol){
 8021e64:	b480      	push	{r7}
 8021e66:	b083      	sub	sp, #12
 8021e68:	af00      	add	r7, sp, #0
 8021e6a:	4603      	mov	r3, r0
 8021e6c:	71fb      	strb	r3, [r7, #7]
	if(vol && MP_SoundVal<100) MP_SoundVal+=5;
 8021e6e:	79fb      	ldrb	r3, [r7, #7]
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d00a      	beq.n	8021e8a <soundVolumeController+0x26>
 8021e74:	4b10      	ldr	r3, [pc, #64]	; (8021eb8 <soundVolumeController+0x54>)
 8021e76:	781b      	ldrb	r3, [r3, #0]
 8021e78:	2b63      	cmp	r3, #99	; 0x63
 8021e7a:	d806      	bhi.n	8021e8a <soundVolumeController+0x26>
 8021e7c:	4b0e      	ldr	r3, [pc, #56]	; (8021eb8 <soundVolumeController+0x54>)
 8021e7e:	781b      	ldrb	r3, [r3, #0]
 8021e80:	3305      	adds	r3, #5
 8021e82:	b2da      	uxtb	r2, r3
 8021e84:	4b0c      	ldr	r3, [pc, #48]	; (8021eb8 <soundVolumeController+0x54>)
 8021e86:	701a      	strb	r2, [r3, #0]
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
}
 8021e88:	e00f      	b.n	8021eaa <soundVolumeController+0x46>
	else if(!vol && MP_SoundVal>0) MP_SoundVal-=5;
 8021e8a:	79fb      	ldrb	r3, [r7, #7]
 8021e8c:	f083 0301 	eor.w	r3, r3, #1
 8021e90:	b2db      	uxtb	r3, r3
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d009      	beq.n	8021eaa <soundVolumeController+0x46>
 8021e96:	4b08      	ldr	r3, [pc, #32]	; (8021eb8 <soundVolumeController+0x54>)
 8021e98:	781b      	ldrb	r3, [r3, #0]
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d005      	beq.n	8021eaa <soundVolumeController+0x46>
 8021e9e:	4b06      	ldr	r3, [pc, #24]	; (8021eb8 <soundVolumeController+0x54>)
 8021ea0:	781b      	ldrb	r3, [r3, #0]
 8021ea2:	3b05      	subs	r3, #5
 8021ea4:	b2da      	uxtb	r2, r3
 8021ea6:	4b04      	ldr	r3, [pc, #16]	; (8021eb8 <soundVolumeController+0x54>)
 8021ea8:	701a      	strb	r2, [r3, #0]
}
 8021eaa:	bf00      	nop
 8021eac:	370c      	adds	r7, #12
 8021eae:	46bd      	mov	sp, r7
 8021eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eb4:	4770      	bx	lr
 8021eb6:	bf00      	nop
 8021eb8:	20006f38 	.word	0x20006f38

08021ebc <MusicPlayerImgSet>:
 * 1 -> pause
 * 2 -> stop
 * @param theme using for image backgraud select
 * false -> white
 * true -> black*/
void  MusicPlayerImgSet(uint8_t statu,bool theme){
 8021ebc:	b580      	push	{r7, lr}
 8021ebe:	b082      	sub	sp, #8
 8021ec0:	af00      	add	r7, sp, #0
 8021ec2:	4603      	mov	r3, r0
 8021ec4:	460a      	mov	r2, r1
 8021ec6:	71fb      	strb	r3, [r7, #7]
 8021ec8:	4613      	mov	r3, r2
 8021eca:	71bb      	strb	r3, [r7, #6]

	switch(statu){
 8021ecc:	79fb      	ldrb	r3, [r7, #7]
 8021ece:	2b01      	cmp	r3, #1
 8021ed0:	d015      	beq.n	8021efe <MusicPlayerImgSet+0x42>
 8021ed2:	2b02      	cmp	r3, #2
 8021ed4:	d024      	beq.n	8021f20 <MusicPlayerImgSet+0x64>
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	d000      	beq.n	8021edc <MusicPlayerImgSet+0x20>
		break;
	case 2:
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
		break;
	default: return;
 8021eda:	e032      	b.n	8021f42 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&playBlack50x50 );
 8021edc:	79bb      	ldrb	r3, [r7, #6]
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	d006      	beq.n	8021ef0 <MusicPlayerImgSet+0x34>
 8021ee2:	4b19      	ldr	r3, [pc, #100]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	4919      	ldr	r1, [pc, #100]	; (8021f4c <MusicPlayerImgSet+0x90>)
 8021ee8:	4618      	mov	r0, r3
 8021eea:	f7f7 f821 	bl	8018f30 <lv_img_set_src>
		break;
 8021eee:	e028      	b.n	8021f42 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&playWhite50x50 );
 8021ef0:	4b15      	ldr	r3, [pc, #84]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	4916      	ldr	r1, [pc, #88]	; (8021f50 <MusicPlayerImgSet+0x94>)
 8021ef6:	4618      	mov	r0, r3
 8021ef8:	f7f7 f81a 	bl	8018f30 <lv_img_set_src>
		break;
 8021efc:	e021      	b.n	8021f42 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&pauseBlack50x50 );
 8021efe:	79bb      	ldrb	r3, [r7, #6]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d006      	beq.n	8021f12 <MusicPlayerImgSet+0x56>
 8021f04:	4b10      	ldr	r3, [pc, #64]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	4912      	ldr	r1, [pc, #72]	; (8021f54 <MusicPlayerImgSet+0x98>)
 8021f0a:	4618      	mov	r0, r3
 8021f0c:	f7f7 f810 	bl	8018f30 <lv_img_set_src>
		break;
 8021f10:	e017      	b.n	8021f42 <MusicPlayerImgSet+0x86>
		else lv_img_set_src(MP_PlayingVAl_Img,&pauseWhite50x50 );
 8021f12:	4b0d      	ldr	r3, [pc, #52]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	4910      	ldr	r1, [pc, #64]	; (8021f58 <MusicPlayerImgSet+0x9c>)
 8021f18:	4618      	mov	r0, r3
 8021f1a:	f7f7 f809 	bl	8018f30 <lv_img_set_src>
		break;
 8021f1e:	e010      	b.n	8021f42 <MusicPlayerImgSet+0x86>
		if(theme)lv_img_set_src(MP_PlayingVAl_Img,&stopBlack50x50 );
 8021f20:	79bb      	ldrb	r3, [r7, #6]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d006      	beq.n	8021f34 <MusicPlayerImgSet+0x78>
 8021f26:	4b08      	ldr	r3, [pc, #32]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	490c      	ldr	r1, [pc, #48]	; (8021f5c <MusicPlayerImgSet+0xa0>)
 8021f2c:	4618      	mov	r0, r3
 8021f2e:	f7f6 ffff 	bl	8018f30 <lv_img_set_src>
		break;
 8021f32:	e005      	b.n	8021f40 <MusicPlayerImgSet+0x84>
		else lv_img_set_src(MP_PlayingVAl_Img,&stopWhite50x50 );
 8021f34:	4b04      	ldr	r3, [pc, #16]	; (8021f48 <MusicPlayerImgSet+0x8c>)
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	4909      	ldr	r1, [pc, #36]	; (8021f60 <MusicPlayerImgSet+0xa4>)
 8021f3a:	4618      	mov	r0, r3
 8021f3c:	f7f6 fff8 	bl	8018f30 <lv_img_set_src>
		break;
 8021f40:	bf00      	nop
	}
}
 8021f42:	3708      	adds	r7, #8
 8021f44:	46bd      	mov	sp, r7
 8021f46:	bd80      	pop	{r7, pc}
 8021f48:	20006f1c 	.word	0x20006f1c
 8021f4c:	0803d698 	.word	0x0803d698
 8021f50:	0803ea2c 	.word	0x0803ea2c
 8021f54:	0803af70 	.word	0x0803af70
 8021f58:	0803c304 	.word	0x0803c304
 8021f5c:	08041038 	.word	0x08041038
 8021f60:	080423cc 	.word	0x080423cc

08021f64 <MusicPlayer_TaskControllerSet>:
//Setter Getter Functions
void MusicPlayer_TaskControllerSet(bool active){
 8021f64:	b480      	push	{r7}
 8021f66:	b083      	sub	sp, #12
 8021f68:	af00      	add	r7, sp, #0
 8021f6a:	4603      	mov	r3, r0
 8021f6c:	71fb      	strb	r3, [r7, #7]
	MP_taskController = active;
 8021f6e:	4a04      	ldr	r2, [pc, #16]	; (8021f80 <MusicPlayer_TaskControllerSet+0x1c>)
 8021f70:	79fb      	ldrb	r3, [r7, #7]
 8021f72:	7013      	strb	r3, [r2, #0]
}
 8021f74:	bf00      	nop
 8021f76:	370c      	adds	r7, #12
 8021f78:	46bd      	mov	sp, r7
 8021f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f7e:	4770      	bx	lr
 8021f80:	20006f28 	.word	0x20006f28

08021f84 <MusicPlayer_TaskControllerGet>:
	MP_SongName = name;
}
void MusicPlayer_MP_SoundVAlSet(uint8_t volume){
	MP_SoundVal = volume;
}
bool MusicPlayer_TaskControllerGet(void){
 8021f84:	b480      	push	{r7}
 8021f86:	af00      	add	r7, sp, #0
	return MP_taskController;
 8021f88:	4b03      	ldr	r3, [pc, #12]	; (8021f98 <MusicPlayer_TaskControllerGet+0x14>)
 8021f8a:	781b      	ldrb	r3, [r3, #0]
}
 8021f8c:	4618      	mov	r0, r3
 8021f8e:	46bd      	mov	sp, r7
 8021f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f94:	4770      	bx	lr
 8021f96:	bf00      	nop
 8021f98:	20006f28 	.word	0x20006f28

08021f9c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8021f9c:	b580      	push	{r7, lr}
 8021f9e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8021fa0:	f7f0 fafe 	bl	80125a0 <lv_disp_get_default>
 8021fa4:	4603      	mov	r3, r0
 8021fa6:	4618      	mov	r0, r3
 8021fa8:	f7e2 ffc6 	bl	8004f38 <lv_disp_get_scr_act>
 8021fac:	4603      	mov	r3, r0
}
 8021fae:	4618      	mov	r0, r3
 8021fb0:	bd80      	pop	{r7, pc}

08021fb2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b084      	sub	sp, #16
 8021fb6:	af00      	add	r7, sp, #0
 8021fb8:	60f8      	str	r0, [r7, #12]
 8021fba:	460b      	mov	r3, r1
 8021fbc:	607a      	str	r2, [r7, #4]
 8021fbe:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8021fc0:	6879      	ldr	r1, [r7, #4]
 8021fc2:	68f8      	ldr	r0, [r7, #12]
 8021fc4:	f7e4 fe2f 	bl	8006c26 <lv_obj_set_style>
}
 8021fc8:	bf00      	nop
 8021fca:	3710      	adds	r7, #16
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	bd80      	pop	{r7, pc}

08021fd0 <lv_cb_set_checked>:
 * Set the state of the check box
 * @param cb pointer to a check box object
 * @param checked true: make the check box checked; false: make it unchecked
 */
static inline void lv_cb_set_checked(lv_obj_t * cb, bool checked)
{
 8021fd0:	b580      	push	{r7, lr}
 8021fd2:	b082      	sub	sp, #8
 8021fd4:	af00      	add	r7, sp, #0
 8021fd6:	6078      	str	r0, [r7, #4]
 8021fd8:	460b      	mov	r3, r1
 8021fda:	70fb      	strb	r3, [r7, #3]
    lv_btn_set_state(cb, checked ? LV_BTN_STATE_TGL_REL : LV_BTN_STATE_REL);
 8021fdc:	78fb      	ldrb	r3, [r7, #3]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d001      	beq.n	8021fe6 <lv_cb_set_checked+0x16>
 8021fe2:	2302      	movs	r3, #2
 8021fe4:	e000      	b.n	8021fe8 <lv_cb_set_checked+0x18>
 8021fe6:	2300      	movs	r3, #0
 8021fe8:	4619      	mov	r1, r3
 8021fea:	6878      	ldr	r0, [r7, #4]
 8021fec:	f7f3 fd06 	bl	80159fc <lv_btn_set_state>
}
 8021ff0:	bf00      	nop
 8021ff2:	3708      	adds	r7, #8
 8021ff4:	46bd      	mov	sp, r7
 8021ff6:	bd80      	pop	{r7, pc}

08021ff8 <tos_NotificationScreen_Init>:
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node);
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected);
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex);
void NotificationScreen_NotificationBox(char * appNotification);
/*This function using for initialization notification screen*/
void tos_NotificationScreen_Init(bool theme){
 8021ff8:	b580      	push	{r7, lr}
 8021ffa:	b082      	sub	sp, #8
 8021ffc:	af00      	add	r7, sp, #0
 8021ffe:	4603      	mov	r3, r0
 8022000:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8022002:	f7ff ffcb 	bl	8021f9c <lv_scr_act>
 8022006:	4603      	mov	r3, r0
 8022008:	4618      	mov	r0, r3
 802200a:	f7e3 fef5 	bl	8005df8 <lv_obj_clean>
	lv_style_copy(&style_screen, &lv_style_plain);
 802200e:	4927      	ldr	r1, [pc, #156]	; (80220ac <tos_NotificationScreen_Init+0xb4>)
 8022010:	4827      	ldr	r0, [pc, #156]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 8022012:	f7e6 fba7 	bl	8008764 <lv_style_copy>
	if(theme){
 8022016:	79fb      	ldrb	r3, [r7, #7]
 8022018:	2b00      	cmp	r3, #0
 802201a:	d006      	beq.n	802202a <tos_NotificationScreen_Init+0x32>
		style_screen.body.main_color = LV_COLOR_BLACK;
 802201c:	4b24      	ldr	r3, [pc, #144]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 802201e:	2200      	movs	r2, #0
 8022020:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8022022:	4b23      	ldr	r3, [pc, #140]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 8022024:	2200      	movs	r2, #0
 8022026:	809a      	strh	r2, [r3, #4]
 8022028:	e007      	b.n	802203a <tos_NotificationScreen_Init+0x42>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802202a:	4a21      	ldr	r2, [pc, #132]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 802202c:	4b21      	ldr	r3, [pc, #132]	; (80220b4 <tos_NotificationScreen_Init+0xbc>)
 802202e:	881b      	ldrh	r3, [r3, #0]
 8022030:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8022032:	4a1f      	ldr	r2, [pc, #124]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 8022034:	4b1f      	ldr	r3, [pc, #124]	; (80220b4 <tos_NotificationScreen_Init+0xbc>)
 8022036:	881b      	ldrh	r3, [r3, #0]
 8022038:	8093      	strh	r3, [r2, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 802203a:	f7ff ffaf 	bl	8021f9c <lv_scr_act>
 802203e:	4603      	mov	r3, r0
 8022040:	491b      	ldr	r1, [pc, #108]	; (80220b0 <tos_NotificationScreen_Init+0xb8>)
 8022042:	4618      	mov	r0, r3
 8022044:	f7e4 fdef 	bl	8006c26 <lv_obj_set_style>
    NotificationScreen_ItemsStyleInit(theme);
 8022048:	79fb      	ldrb	r3, [r7, #7]
 802204a:	4618      	mov	r0, r3
 802204c:	f000 fa60 	bl	8022510 <NotificationScreen_ItemsStyleInit>

	root=tos_Notification_CreateRoot(root);
 8022050:	4b19      	ldr	r3, [pc, #100]	; (80220b8 <tos_NotificationScreen_Init+0xc0>)
 8022052:	681b      	ldr	r3, [r3, #0]
 8022054:	4618      	mov	r0, r3
 8022056:	f004 fe8b 	bl	8026d70 <tos_Notification_CreateRoot>
 802205a:	4602      	mov	r2, r0
 802205c:	4b16      	ldr	r3, [pc, #88]	; (80220b8 <tos_NotificationScreen_Init+0xc0>)
 802205e:	601a      	str	r2, [r3, #0]
    node=tos_Notification_SetFirstNode(root,node);
 8022060:	4b15      	ldr	r3, [pc, #84]	; (80220b8 <tos_NotificationScreen_Init+0xc0>)
 8022062:	681a      	ldr	r2, [r3, #0]
 8022064:	4b15      	ldr	r3, [pc, #84]	; (80220bc <tos_NotificationScreen_Init+0xc4>)
 8022066:	681b      	ldr	r3, [r3, #0]
 8022068:	4619      	mov	r1, r3
 802206a:	4610      	mov	r0, r2
 802206c:	f004 fe8f 	bl	8026d8e <tos_Notification_SetFirstNode>
 8022070:	4602      	mov	r2, r0
 8022072:	4b12      	ldr	r3, [pc, #72]	; (80220bc <tos_NotificationScreen_Init+0xc4>)
 8022074:	601a      	str	r2, [r3, #0]

    myPos=0;
 8022076:	4b12      	ldr	r3, [pc, #72]	; (80220c0 <tos_NotificationScreen_Init+0xc8>)
 8022078:	2200      	movs	r2, #0
 802207a:	701a      	strb	r2, [r3, #0]
    isOpenNotificationBox=false;
 802207c:	4b11      	ldr	r3, [pc, #68]	; (80220c4 <tos_NotificationScreen_Init+0xcc>)
 802207e:	2200      	movs	r2, #0
 8022080:	701a      	strb	r2, [r3, #0]
    NS_isBtnPressed=false;
 8022082:	4b11      	ldr	r3, [pc, #68]	; (80220c8 <tos_NotificationScreen_Init+0xd0>)
 8022084:	2200      	movs	r2, #0
 8022086:	701a      	strb	r2, [r3, #0]
    NotificationScreen_SetOnScreenItems(root,node,myPos);
 8022088:	4b0b      	ldr	r3, [pc, #44]	; (80220b8 <tos_NotificationScreen_Init+0xc0>)
 802208a:	6818      	ldr	r0, [r3, #0]
 802208c:	4b0b      	ldr	r3, [pc, #44]	; (80220bc <tos_NotificationScreen_Init+0xc4>)
 802208e:	6819      	ldr	r1, [r3, #0]
 8022090:	4b0b      	ldr	r3, [pc, #44]	; (80220c0 <tos_NotificationScreen_Init+0xc8>)
 8022092:	f993 3000 	ldrsb.w	r3, [r3]
 8022096:	461a      	mov	r2, r3
 8022098:	f000 f9e4 	bl	8022464 <NotificationScreen_SetOnScreenItems>
    NS_taskController=true;
 802209c:	4b0b      	ldr	r3, [pc, #44]	; (80220cc <tos_NotificationScreen_Init+0xd4>)
 802209e:	2201      	movs	r2, #1
 80220a0:	701a      	strb	r2, [r3, #0]

}
 80220a2:	bf00      	nop
 80220a4:	3708      	adds	r7, #8
 80220a6:	46bd      	mov	sp, r7
 80220a8:	bd80      	pop	{r7, pc}
 80220aa:	bf00      	nop
 80220ac:	20006c74 	.word	0x20006c74
 80220b0:	20006050 	.word	0x20006050
 80220b4:	08029ed8 	.word	0x08029ed8
 80220b8:	20006f54 	.word	0x20006f54
 80220bc:	20006f48 	.word	0x20006f48
 80220c0:	20006f6c 	.word	0x20006f6c
 80220c4:	20006f58 	.word	0x20006f58
 80220c8:	20006f4c 	.word	0x20006f4c
 80220cc:	20006f44 	.word	0x20006f44

080220d0 <NotificationScreen_ButtonController>:
/*This function using for control to buttons*/
void NotificationScreen_ButtonController(void){
 80220d0:	b590      	push	{r4, r7, lr}
 80220d2:	b083      	sub	sp, #12
 80220d4:	af00      	add	r7, sp, #0
	if(!NS_isBtnPressed){
 80220d6:	4b60      	ldr	r3, [pc, #384]	; (8022258 <NotificationScreen_ButtonController+0x188>)
 80220d8:	781b      	ldrb	r3, [r3, #0]
 80220da:	f083 0301 	eor.w	r3, r3, #1
 80220de:	b2db      	uxtb	r3, r3
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	f000 80b4 	beq.w	802224e <NotificationScreen_ButtonController+0x17e>
		NS_isBtnPressed=true;
 80220e6:	4b5c      	ldr	r3, [pc, #368]	; (8022258 <NotificationScreen_ButtonController+0x188>)
 80220e8:	2201      	movs	r2, #1
 80220ea:	701a      	strb	r2, [r3, #0]
		  if(2==NS_rightBtnListen){
 80220ec:	4b5b      	ldr	r3, [pc, #364]	; (802225c <NotificationScreen_ButtonController+0x18c>)
 80220ee:	781b      	ldrb	r3, [r3, #0]
 80220f0:	2b02      	cmp	r3, #2
 80220f2:	d118      	bne.n	8022126 <NotificationScreen_ButtonController+0x56>
			  //open
			  if(!isOpenNotificationBox){
 80220f4:	4b5a      	ldr	r3, [pc, #360]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 80220f6:	781b      	ldrb	r3, [r3, #0]
 80220f8:	f083 0301 	eor.w	r3, r3, #1
 80220fc:	b2db      	uxtb	r3, r3
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d011      	beq.n	8022126 <NotificationScreen_ButtonController+0x56>
				  isOpenNotificationBox=true;
 8022102:	4b57      	ldr	r3, [pc, #348]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 8022104:	2201      	movs	r2, #1
 8022106:	701a      	strb	r2, [r3, #0]
				  char * tmp=tos_NotificationGetItem(root,selectedItem)->appNot;
 8022108:	4b56      	ldr	r3, [pc, #344]	; (8022264 <NotificationScreen_ButtonController+0x194>)
 802210a:	681a      	ldr	r2, [r3, #0]
 802210c:	4b56      	ldr	r3, [pc, #344]	; (8022268 <NotificationScreen_ButtonController+0x198>)
 802210e:	781b      	ldrb	r3, [r3, #0]
 8022110:	b29b      	uxth	r3, r3
 8022112:	4619      	mov	r1, r3
 8022114:	4610      	mov	r0, r2
 8022116:	f004 fe97 	bl	8026e48 <tos_NotificationGetItem>
 802211a:	4603      	mov	r3, r0
 802211c:	685b      	ldr	r3, [r3, #4]
 802211e:	607b      	str	r3, [r7, #4]
				    NotificationScreen_NotificationBox(tmp);
 8022120:	6878      	ldr	r0, [r7, #4]
 8022122:	f000 f94d 	bl	80223c0 <NotificationScreen_NotificationBox>
			  }
		  }
		  if(1==NS_rightBtnListen) {
 8022126:	4b4d      	ldr	r3, [pc, #308]	; (802225c <NotificationScreen_ButtonController+0x18c>)
 8022128:	781b      	ldrb	r3, [r3, #0]
 802212a:	2b01      	cmp	r3, #1
 802212c:	d14d      	bne.n	80221ca <NotificationScreen_ButtonController+0xfa>
		  			  if(!isOpenNotificationBox){
 802212e:	4b4c      	ldr	r3, [pc, #304]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 8022130:	781b      	ldrb	r3, [r3, #0]
 8022132:	f083 0301 	eor.w	r3, r3, #1
 8022136:	b2db      	uxtb	r3, r3
 8022138:	2b00      	cmp	r3, #0
 802213a:	d026      	beq.n	802218a <NotificationScreen_ButtonController+0xba>
		  			  //minus
		  				lv_obj_clean(lv_scr_act());
 802213c:	f7ff ff2e 	bl	8021f9c <lv_scr_act>
 8022140:	4603      	mov	r3, r0
 8022142:	4618      	mov	r0, r3
 8022144:	f7e3 fe58 	bl	8005df8 <lv_obj_clean>
		  				if(myPos>-NotificationScreen_GetMaxScroll(node))myPos--;
 8022148:	4b48      	ldr	r3, [pc, #288]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 802214a:	f993 3000 	ldrsb.w	r3, [r3]
 802214e:	461c      	mov	r4, r3
 8022150:	4b47      	ldr	r3, [pc, #284]	; (8022270 <NotificationScreen_ButtonController+0x1a0>)
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	4618      	mov	r0, r3
 8022156:	f000 fa9b 	bl	8022690 <NotificationScreen_GetMaxScroll>
 802215a:	4603      	mov	r3, r0
 802215c:	425b      	negs	r3, r3
 802215e:	429c      	cmp	r4, r3
 8022160:	dd08      	ble.n	8022174 <NotificationScreen_ButtonController+0xa4>
 8022162:	4b42      	ldr	r3, [pc, #264]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 8022164:	f993 3000 	ldrsb.w	r3, [r3]
 8022168:	b2db      	uxtb	r3, r3
 802216a:	3b01      	subs	r3, #1
 802216c:	b2db      	uxtb	r3, r3
 802216e:	b25a      	sxtb	r2, r3
 8022170:	4b3e      	ldr	r3, [pc, #248]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 8022172:	701a      	strb	r2, [r3, #0]
		  				NotificationScreen_SetOnScreenItems(root,node,myPos);
 8022174:	4b3b      	ldr	r3, [pc, #236]	; (8022264 <NotificationScreen_ButtonController+0x194>)
 8022176:	6818      	ldr	r0, [r3, #0]
 8022178:	4b3d      	ldr	r3, [pc, #244]	; (8022270 <NotificationScreen_ButtonController+0x1a0>)
 802217a:	6819      	ldr	r1, [r3, #0]
 802217c:	4b3b      	ldr	r3, [pc, #236]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 802217e:	f993 3000 	ldrsb.w	r3, [r3]
 8022182:	461a      	mov	r2, r3
 8022184:	f000 f96e 	bl	8022464 <NotificationScreen_SetOnScreenItems>
 8022188:	e01f      	b.n	80221ca <NotificationScreen_ButtonController+0xfa>
		  			  }else {isOpenNotificationBox=false;
 802218a:	4b35      	ldr	r3, [pc, #212]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 802218c:	2200      	movs	r2, #0
 802218e:	701a      	strb	r2, [r3, #0]
		  			  //remove
		  				lv_obj_clean(lv_scr_act());
 8022190:	f7ff ff04 	bl	8021f9c <lv_scr_act>
 8022194:	4603      	mov	r3, r0
 8022196:	4618      	mov	r0, r3
 8022198:	f7e3 fe2e 	bl	8005df8 <lv_obj_clean>
		  				notBox = NULL;
 802219c:	4b35      	ldr	r3, [pc, #212]	; (8022274 <NotificationScreen_ButtonController+0x1a4>)
 802219e:	2200      	movs	r2, #0
 80221a0:	601a      	str	r2, [r3, #0]
		  			    tos_NotificationDelItem(root,node,selectedItem);
 80221a2:	4b30      	ldr	r3, [pc, #192]	; (8022264 <NotificationScreen_ButtonController+0x194>)
 80221a4:	6818      	ldr	r0, [r3, #0]
 80221a6:	4b32      	ldr	r3, [pc, #200]	; (8022270 <NotificationScreen_ButtonController+0x1a0>)
 80221a8:	6819      	ldr	r1, [r3, #0]
 80221aa:	4b2f      	ldr	r3, [pc, #188]	; (8022268 <NotificationScreen_ButtonController+0x198>)
 80221ac:	781b      	ldrb	r3, [r3, #0]
 80221ae:	b29b      	uxth	r3, r3
 80221b0:	461a      	mov	r2, r3
 80221b2:	f004 fe92 	bl	8026eda <tos_NotificationDelItem>
		  				NotificationScreen_SetOnScreenItems(root,node,myPos);
 80221b6:	4b2b      	ldr	r3, [pc, #172]	; (8022264 <NotificationScreen_ButtonController+0x194>)
 80221b8:	6818      	ldr	r0, [r3, #0]
 80221ba:	4b2d      	ldr	r3, [pc, #180]	; (8022270 <NotificationScreen_ButtonController+0x1a0>)
 80221bc:	6819      	ldr	r1, [r3, #0]
 80221be:	4b2b      	ldr	r3, [pc, #172]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 80221c0:	f993 3000 	ldrsb.w	r3, [r3]
 80221c4:	461a      	mov	r2, r3
 80221c6:	f000 f94d 	bl	8022464 <NotificationScreen_SetOnScreenItems>

		  			  }
		  		  }
		  if(1==NS_leftBtnListen) {
 80221ca:	4b2b      	ldr	r3, [pc, #172]	; (8022278 <NotificationScreen_ButtonController+0x1a8>)
 80221cc:	781b      	ldrb	r3, [r3, #0]
 80221ce:	2b01      	cmp	r3, #1
 80221d0:	d12e      	bne.n	8022230 <NotificationScreen_ButtonController+0x160>
			  //plus
			  if(!isOpenNotificationBox){
 80221d2:	4b23      	ldr	r3, [pc, #140]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 80221d4:	781b      	ldrb	r3, [r3, #0]
 80221d6:	f083 0301 	eor.w	r3, r3, #1
 80221da:	b2db      	uxtb	r3, r3
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d01e      	beq.n	802221e <NotificationScreen_ButtonController+0x14e>
				lv_obj_clean(lv_scr_act());
 80221e0:	f7ff fedc 	bl	8021f9c <lv_scr_act>
 80221e4:	4603      	mov	r3, r0
 80221e6:	4618      	mov	r0, r3
 80221e8:	f7e3 fe06 	bl	8005df8 <lv_obj_clean>
				if(myPos<0)myPos++;
 80221ec:	4b1f      	ldr	r3, [pc, #124]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 80221ee:	f993 3000 	ldrsb.w	r3, [r3]
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	da08      	bge.n	8022208 <NotificationScreen_ButtonController+0x138>
 80221f6:	4b1d      	ldr	r3, [pc, #116]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 80221f8:	f993 3000 	ldrsb.w	r3, [r3]
 80221fc:	b2db      	uxtb	r3, r3
 80221fe:	3301      	adds	r3, #1
 8022200:	b2db      	uxtb	r3, r3
 8022202:	b25a      	sxtb	r2, r3
 8022204:	4b19      	ldr	r3, [pc, #100]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 8022206:	701a      	strb	r2, [r3, #0]
				NotificationScreen_SetOnScreenItems(root,node,myPos);
 8022208:	4b16      	ldr	r3, [pc, #88]	; (8022264 <NotificationScreen_ButtonController+0x194>)
 802220a:	6818      	ldr	r0, [r3, #0]
 802220c:	4b18      	ldr	r3, [pc, #96]	; (8022270 <NotificationScreen_ButtonController+0x1a0>)
 802220e:	6819      	ldr	r1, [r3, #0]
 8022210:	4b16      	ldr	r3, [pc, #88]	; (802226c <NotificationScreen_ButtonController+0x19c>)
 8022212:	f993 3000 	ldrsb.w	r3, [r3]
 8022216:	461a      	mov	r2, r3
 8022218:	f000 f924 	bl	8022464 <NotificationScreen_SetOnScreenItems>
 802221c:	e008      	b.n	8022230 <NotificationScreen_ButtonController+0x160>
			  }else{isOpenNotificationBox=false;
 802221e:	4b10      	ldr	r3, [pc, #64]	; (8022260 <NotificationScreen_ButtonController+0x190>)
 8022220:	2200      	movs	r2, #0
 8022222:	701a      	strb	r2, [r3, #0]
				  lv_mbox_start_auto_close(notBox,0);
 8022224:	4b13      	ldr	r3, [pc, #76]	; (8022274 <NotificationScreen_ButtonController+0x1a4>)
 8022226:	681b      	ldr	r3, [r3, #0]
 8022228:	2100      	movs	r1, #0
 802222a:	4618      	mov	r0, r3
 802222c:	f7f9 f914 	bl	801b458 <lv_mbox_start_auto_close>
			  }
		  }
		  NS_isBtnPressed=false;
 8022230:	4b09      	ldr	r3, [pc, #36]	; (8022258 <NotificationScreen_ButtonController+0x188>)
 8022232:	2200      	movs	r2, #0
 8022234:	701a      	strb	r2, [r3, #0]
		  NS_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 8022236:	f004 fa87 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 802223a:	4603      	mov	r3, r0
 802223c:	461a      	mov	r2, r3
 802223e:	4b07      	ldr	r3, [pc, #28]	; (802225c <NotificationScreen_ButtonController+0x18c>)
 8022240:	701a      	strb	r2, [r3, #0]
		  NS_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8022242:	f004 faa9 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8022246:	4603      	mov	r3, r0
 8022248:	461a      	mov	r2, r3
 802224a:	4b0b      	ldr	r3, [pc, #44]	; (8022278 <NotificationScreen_ButtonController+0x1a8>)
 802224c:	701a      	strb	r2, [r3, #0]

	}
}
 802224e:	bf00      	nop
 8022250:	370c      	adds	r7, #12
 8022252:	46bd      	mov	sp, r7
 8022254:	bd90      	pop	{r4, r7, pc}
 8022256:	bf00      	nop
 8022258:	20006f4c 	.word	0x20006f4c
 802225c:	200061b8 	.word	0x200061b8
 8022260:	20006f58 	.word	0x20006f58
 8022264:	20006f54 	.word	0x20006f54
 8022268:	20006f59 	.word	0x20006f59
 802226c:	20006f6c 	.word	0x20006f6c
 8022270:	20006f48 	.word	0x20006f48
 8022274:	20006f50 	.word	0x20006f50
 8022278:	200061b9 	.word	0x200061b9

0802227c <NotificationScreen_Items>:
/*This function using for create notification items
 * @param appName using for get app name
 * @param appNotification for get app notification text
 * @param pos set item position
 * @param isSelected get statu (is first item on screen?) */
void NotificationScreen_Items(char *appName,char * appNotification,tos_Position pos,bool isSelected){
 802227c:	b580      	push	{r7, lr}
 802227e:	b08a      	sub	sp, #40	; 0x28
 8022280:	af02      	add	r7, sp, #8
 8022282:	60f8      	str	r0, [r7, #12]
 8022284:	60b9      	str	r1, [r7, #8]
 8022286:	607a      	str	r2, [r7, #4]
 8022288:	70fb      	strb	r3, [r7, #3]
	  lv_obj_t * itemCanvas = lv_page_create(lv_scr_act(), NULL);
 802228a:	f7ff fe87 	bl	8021f9c <lv_scr_act>
 802228e:	4603      	mov	r3, r0
 8022290:	2100      	movs	r1, #0
 8022292:	4618      	mov	r0, r3
 8022294:	f7f9 fc12 	bl	801babc <lv_page_create>
 8022298:	61f8      	str	r0, [r7, #28]
	  lv_obj_set_size(itemCanvas, 200, 50);
 802229a:	2232      	movs	r2, #50	; 0x32
 802229c:	21c8      	movs	r1, #200	; 0xc8
 802229e:	69f8      	ldr	r0, [r7, #28]
 80222a0:	f7e3 ff79 	bl	8006196 <lv_obj_set_size>
	  lv_page_set_sb_mode(itemCanvas,LV_SB_MODE_OFF);
 80222a4:	2100      	movs	r1, #0
 80222a6:	69f8      	ldr	r0, [r7, #28]
 80222a8:	f7f9 fd7a 	bl	801bda0 <lv_page_set_sb_mode>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_BG, &bg_style);
 80222ac:	4a3b      	ldr	r2, [pc, #236]	; (802239c <NotificationScreen_Items+0x120>)
 80222ae:	2100      	movs	r1, #0
 80222b0:	69f8      	ldr	r0, [r7, #28]
 80222b2:	f7f9 fdd5 	bl	801be60 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SB, &sb_style);
 80222b6:	4a3a      	ldr	r2, [pc, #232]	; (80223a0 <NotificationScreen_Items+0x124>)
 80222b8:	2102      	movs	r1, #2
 80222ba:	69f8      	ldr	r0, [r7, #28]
 80222bc:	f7f9 fdd0 	bl	801be60 <lv_page_set_style>
	  lv_page_set_style(itemCanvas, LV_PAGE_STYLE_SCRL, &scrl_style);
 80222c0:	4a38      	ldr	r2, [pc, #224]	; (80223a4 <NotificationScreen_Items+0x128>)
 80222c2:	2101      	movs	r1, #1
 80222c4:	69f8      	ldr	r0, [r7, #28]
 80222c6:	f7f9 fdcb 	bl	801be60 <lv_page_set_style>
	  lv_obj_align(itemCanvas, NULL, LV_ALIGN_CENTER, pos.x, pos.y);
 80222ca:	88bb      	ldrh	r3, [r7, #4]
 80222cc:	b21a      	sxth	r2, r3
 80222ce:	88fb      	ldrh	r3, [r7, #6]
 80222d0:	b21b      	sxth	r3, r3
 80222d2:	9300      	str	r3, [sp, #0]
 80222d4:	4613      	mov	r3, r2
 80222d6:	2200      	movs	r2, #0
 80222d8:	2100      	movs	r1, #0
 80222da:	69f8      	ldr	r0, [r7, #28]
 80222dc:	f7e3 fffe 	bl	80062dc <lv_obj_align>

	  if(strlen(appName)>=12)  {
 80222e0:	68f8      	ldr	r0, [r7, #12]
 80222e2:	f7dd ff7f 	bl	80001e4 <strlen>
 80222e6:	4603      	mov	r3, r0
 80222e8:	2b0b      	cmp	r3, #11
 80222ea:	d906      	bls.n	80222fa <NotificationScreen_Items+0x7e>
		snprintf(NS_buffer,14, "%.9s ...",appName);
 80222ec:	68fb      	ldr	r3, [r7, #12]
 80222ee:	4a2e      	ldr	r2, [pc, #184]	; (80223a8 <NotificationScreen_Items+0x12c>)
 80222f0:	210e      	movs	r1, #14
 80222f2:	482e      	ldr	r0, [pc, #184]	; (80223ac <NotificationScreen_Items+0x130>)
 80222f4:	f005 fcbe 	bl	8027c74 <sniprintf>
 80222f8:	e005      	b.n	8022306 <NotificationScreen_Items+0x8a>
	  }else snprintf(NS_buffer,14, "%s",appName);
 80222fa:	68fb      	ldr	r3, [r7, #12]
 80222fc:	4a2c      	ldr	r2, [pc, #176]	; (80223b0 <NotificationScreen_Items+0x134>)
 80222fe:	210e      	movs	r1, #14
 8022300:	482a      	ldr	r0, [pc, #168]	; (80223ac <NotificationScreen_Items+0x130>)
 8022302:	f005 fcb7 	bl	8027c74 <sniprintf>

	  lv_obj_t * appNameLbl = lv_label_create(itemCanvas, NULL);
 8022306:	2100      	movs	r1, #0
 8022308:	69f8      	ldr	r0, [r7, #28]
 802230a:	f7f7 f8ff 	bl	801950c <lv_label_create>
 802230e:	61b8      	str	r0, [r7, #24]
	  lv_obj_set_width(appNameLbl, 50);
 8022310:	2132      	movs	r1, #50	; 0x32
 8022312:	69b8      	ldr	r0, [r7, #24]
 8022314:	f7e3 ffb8 	bl	8006288 <lv_obj_set_width>
	  lv_label_set_style(appNameLbl, LV_LABEL_STYLE_MAIN, &appName_Style);
 8022318:	4a26      	ldr	r2, [pc, #152]	; (80223b4 <NotificationScreen_Items+0x138>)
 802231a:	2100      	movs	r1, #0
 802231c:	69b8      	ldr	r0, [r7, #24]
 802231e:	f7ff fe48 	bl	8021fb2 <lv_label_set_style>
	  lv_label_set_text(appNameLbl, NS_buffer);
 8022322:	4922      	ldr	r1, [pc, #136]	; (80223ac <NotificationScreen_Items+0x130>)
 8022324:	69b8      	ldr	r0, [r7, #24]
 8022326:	f7f7 fa23 	bl	8019770 <lv_label_set_text>
	  lv_obj_align(appNameLbl, itemCanvas, LV_ALIGN_IN_TOP_LEFT, 20, 0);
 802232a:	2300      	movs	r3, #0
 802232c:	9300      	str	r3, [sp, #0]
 802232e:	2314      	movs	r3, #20
 8022330:	2201      	movs	r2, #1
 8022332:	69f9      	ldr	r1, [r7, #28]
 8022334:	69b8      	ldr	r0, [r7, #24]
 8022336:	f7e3 ffd1 	bl	80062dc <lv_obj_align>

	  lv_obj_t * appNotLbl = lv_label_create(itemCanvas, NULL);
 802233a:	2100      	movs	r1, #0
 802233c:	69f8      	ldr	r0, [r7, #28]
 802233e:	f7f7 f8e5 	bl	801950c <lv_label_create>
 8022342:	6178      	str	r0, [r7, #20]
	  lv_label_set_text(appNotLbl, appNotification);
 8022344:	68b9      	ldr	r1, [r7, #8]
 8022346:	6978      	ldr	r0, [r7, #20]
 8022348:	f7f7 fa12 	bl	8019770 <lv_label_set_text>
	  lv_label_set_style(appNotLbl, LV_LABEL_STYLE_MAIN, &notification_Style);
 802234c:	4a1a      	ldr	r2, [pc, #104]	; (80223b8 <NotificationScreen_Items+0x13c>)
 802234e:	2100      	movs	r1, #0
 8022350:	6978      	ldr	r0, [r7, #20]
 8022352:	f7ff fe2e 	bl	8021fb2 <lv_label_set_style>
	  lv_obj_align(appNotLbl, itemCanvas, LV_ALIGN_IN_BOTTOM_LEFT, 20, 0);
 8022356:	2300      	movs	r3, #0
 8022358:	9300      	str	r3, [sp, #0]
 802235a:	2314      	movs	r3, #20
 802235c:	2204      	movs	r2, #4
 802235e:	69f9      	ldr	r1, [r7, #28]
 8022360:	6978      	ldr	r0, [r7, #20]
 8022362:	f7e3 ffbb 	bl	80062dc <lv_obj_align>

	  lv_obj_t * isSelettedItem = lv_cb_create(itemCanvas, NULL);
 8022366:	2100      	movs	r1, #0
 8022368:	69f8      	ldr	r0, [r7, #28]
 802236a:	f7f5 fa35 	bl	80177d8 <lv_cb_create>
 802236e:	6138      	str	r0, [r7, #16]
	  lv_obj_align(isSelettedItem, itemCanvas, LV_ALIGN_IN_RIGHT_MID, 80, 0);
 8022370:	2300      	movs	r3, #0
 8022372:	9300      	str	r3, [sp, #0]
 8022374:	2350      	movs	r3, #80	; 0x50
 8022376:	2208      	movs	r2, #8
 8022378:	69f9      	ldr	r1, [r7, #28]
 802237a:	6938      	ldr	r0, [r7, #16]
 802237c:	f7e3 ffae 	bl	80062dc <lv_obj_align>
	  lv_cb_set_checked(isSelettedItem,isSelected);
 8022380:	78fb      	ldrb	r3, [r7, #3]
 8022382:	4619      	mov	r1, r3
 8022384:	6938      	ldr	r0, [r7, #16]
 8022386:	f7ff fe23 	bl	8021fd0 <lv_cb_set_checked>
	  lv_cb_set_text(isSelettedItem,"");
 802238a:	490c      	ldr	r1, [pc, #48]	; (80223bc <NotificationScreen_Items+0x140>)
 802238c:	6938      	ldr	r0, [r7, #16]
 802238e:	f7f5 fb15 	bl	80179bc <lv_cb_set_text>
}
 8022392:	bf00      	nop
 8022394:	3720      	adds	r7, #32
 8022396:	46bd      	mov	sp, r7
 8022398:	bd80      	pop	{r7, pc}
 802239a:	bf00      	nop
 802239c:	200060c8 	.word	0x200060c8
 80223a0:	2000608c 	.word	0x2000608c
 80223a4:	20006104 	.word	0x20006104
 80223a8:	08029edc 	.word	0x08029edc
 80223ac:	20006f5c 	.word	0x20006f5c
 80223b0:	08029ee8 	.word	0x08029ee8
 80223b4:	20006140 	.word	0x20006140
 80223b8:	2000617c 	.word	0x2000617c
 80223bc:	08029eec 	.word	0x08029eec

080223c0 <NotificationScreen_NotificationBox>:
/*This function using for notification box*/
void NotificationScreen_NotificationBox(char * appNotification){
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b084      	sub	sp, #16
 80223c4:	af02      	add	r7, sp, #8
 80223c6:	6078      	str	r0, [r7, #4]
    static const char * btns[] ={"Okey", "Delete", ""};

    notBox = lv_mbox_create(lv_scr_act(), NULL);
 80223c8:	f7ff fde8 	bl	8021f9c <lv_scr_act>
 80223cc:	4603      	mov	r3, r0
 80223ce:	2100      	movs	r1, #0
 80223d0:	4618      	mov	r0, r3
 80223d2:	f7f8 ff27 	bl	801b224 <lv_mbox_create>
 80223d6:	4602      	mov	r2, r0
 80223d8:	4b1d      	ldr	r3, [pc, #116]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 80223da:	601a      	str	r2, [r3, #0]
    lv_mbox_add_btns(notBox, btns);
 80223dc:	4b1c      	ldr	r3, [pc, #112]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 80223de:	681b      	ldr	r3, [r3, #0]
 80223e0:	491c      	ldr	r1, [pc, #112]	; (8022454 <NotificationScreen_NotificationBox+0x94>)
 80223e2:	4618      	mov	r0, r3
 80223e4:	f7f8 ffcc 	bl	801b380 <lv_mbox_add_btns>
    lv_mbox_set_text(notBox, appNotification);
 80223e8:	4b19      	ldr	r3, [pc, #100]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	6879      	ldr	r1, [r7, #4]
 80223ee:	4618      	mov	r0, r3
 80223f0:	f7f9 f81c 	bl	801b42c <lv_mbox_set_text>
    lv_obj_set_width(notBox, 200);
 80223f4:	4b16      	ldr	r3, [pc, #88]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	21c8      	movs	r1, #200	; 0xc8
 80223fa:	4618      	mov	r0, r3
 80223fc:	f7e3 ff44 	bl	8006288 <lv_obj_set_width>
    lv_obj_set_height(notBox, 150);
 8022400:	4b13      	ldr	r3, [pc, #76]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	2196      	movs	r1, #150	; 0x96
 8022406:	4618      	mov	r0, r3
 8022408:	f7e3 ff53 	bl	80062b2 <lv_obj_set_height>
    lv_obj_align(notBox, NULL, LV_ALIGN_CENTER, 0, 0);
 802240c:	4b10      	ldr	r3, [pc, #64]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 802240e:	6818      	ldr	r0, [r3, #0]
 8022410:	2300      	movs	r3, #0
 8022412:	9300      	str	r3, [sp, #0]
 8022414:	2300      	movs	r3, #0
 8022416:	2200      	movs	r2, #0
 8022418:	2100      	movs	r1, #0
 802241a:	f7e3 ff5f 	bl	80062dc <lv_obj_align>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BG,  &sb_style);
 802241e:	4b0c      	ldr	r3, [pc, #48]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	4a0d      	ldr	r2, [pc, #52]	; (8022458 <NotificationScreen_NotificationBox+0x98>)
 8022424:	2100      	movs	r1, #0
 8022426:	4618      	mov	r0, r3
 8022428:	f7f9 f898 	bl	801b55c <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_REL,  &scrl_style);
 802242c:	4b08      	ldr	r3, [pc, #32]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	4a0a      	ldr	r2, [pc, #40]	; (802245c <NotificationScreen_NotificationBox+0x9c>)
 8022432:	2102      	movs	r1, #2
 8022434:	4618      	mov	r0, r3
 8022436:	f7f9 f891 	bl	801b55c <lv_mbox_set_style>
    lv_mbox_set_style(notBox, LV_MBOX_STYLE_BTN_TGL_PR,  &bg_style);
 802243a:	4b05      	ldr	r3, [pc, #20]	; (8022450 <NotificationScreen_NotificationBox+0x90>)
 802243c:	681b      	ldr	r3, [r3, #0]
 802243e:	4a08      	ldr	r2, [pc, #32]	; (8022460 <NotificationScreen_NotificationBox+0xa0>)
 8022440:	2105      	movs	r1, #5
 8022442:	4618      	mov	r0, r3
 8022444:	f7f9 f88a 	bl	801b55c <lv_mbox_set_style>
}
 8022448:	bf00      	nop
 802244a:	3708      	adds	r7, #8
 802244c:	46bd      	mov	sp, r7
 802244e:	bd80      	pop	{r7, pc}
 8022450:	20006f50 	.word	0x20006f50
 8022454:	20002830 	.word	0x20002830
 8022458:	2000608c 	.word	0x2000608c
 802245c:	20006104 	.word	0x20006104
 8022460:	200060c8 	.word	0x200060c8

08022464 <NotificationScreen_SetOnScreenItems>:

/*This function using for notification items set values(app name,app notification,position)
 * @param root using for first node
 * @param node using for all nodes
 * @param posIndex using for set position index*/
void NotificationScreen_SetOnScreenItems(tos_Notification * root,tos_Notification* node,int8_t posIndex){
 8022464:	b5b0      	push	{r4, r5, r7, lr}
 8022466:	b086      	sub	sp, #24
 8022468:	af00      	add	r7, sp, #0
 802246a:	60f8      	str	r0, [r7, #12]
 802246c:	60b9      	str	r1, [r7, #8]
 802246e:	4613      	mov	r3, r2
 8022470:	71fb      	strb	r3, [r7, #7]
	bool selected= false;
 8022472:	2300      	movs	r3, #0
 8022474:	75fb      	strb	r3, [r7, #23]
       for(uint8_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 8022476:	2301      	movs	r3, #1
 8022478:	75bb      	strb	r3, [r7, #22]
 802247a:	e03a      	b.n	80224f2 <NotificationScreen_SetOnScreenItems+0x8e>
    	   	   if(tos_NotificationGetItem(root,i) !=NULL){
 802247c:	7dbb      	ldrb	r3, [r7, #22]
 802247e:	b29b      	uxth	r3, r3
 8022480:	4619      	mov	r1, r3
 8022482:	68f8      	ldr	r0, [r7, #12]
 8022484:	f004 fce0 	bl	8026e48 <tos_NotificationGetItem>
 8022488:	4603      	mov	r3, r0
 802248a:	2b00      	cmp	r3, #0
 802248c:	d02e      	beq.n	80224ec <NotificationScreen_SetOnScreenItems+0x88>
    	           if(posIndex==0){selectedItem=i; selected=true;}
 802248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022492:	2b00      	cmp	r3, #0
 8022494:	d105      	bne.n	80224a2 <NotificationScreen_SetOnScreenItems+0x3e>
 8022496:	4a1d      	ldr	r2, [pc, #116]	; (802250c <NotificationScreen_SetOnScreenItems+0xa8>)
 8022498:	7dbb      	ldrb	r3, [r7, #22]
 802249a:	7013      	strb	r3, [r2, #0]
 802249c:	2301      	movs	r3, #1
 802249e:	75fb      	strb	r3, [r7, #23]
 80224a0:	e001      	b.n	80224a6 <NotificationScreen_SetOnScreenItems+0x42>
    	           else selected=false;
 80224a2:	2300      	movs	r3, #0
 80224a4:	75fb      	strb	r3, [r7, #23]
        NotificationScreen_Items(tos_NotificationGetItem(root,i)->appName,
 80224a6:	7dbb      	ldrb	r3, [r7, #22]
 80224a8:	b29b      	uxth	r3, r3
 80224aa:	4619      	mov	r1, r3
 80224ac:	68f8      	ldr	r0, [r7, #12]
 80224ae:	f004 fccb 	bl	8026e48 <tos_NotificationGetItem>
 80224b2:	4603      	mov	r3, r0
 80224b4:	681c      	ldr	r4, [r3, #0]
        		tos_NotificationGetItem(root,i)->appNot,
 80224b6:	7dbb      	ldrb	r3, [r7, #22]
 80224b8:	b29b      	uxth	r3, r3
 80224ba:	4619      	mov	r1, r3
 80224bc:	68f8      	ldr	r0, [r7, #12]
 80224be:	f004 fcc3 	bl	8026e48 <tos_NotificationGetItem>
 80224c2:	4603      	mov	r3, r0
        NotificationScreen_Items(tos_NotificationGetItem(root,i)->appName,
 80224c4:	685d      	ldr	r5, [r3, #4]
 80224c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224ca:	4618      	mov	r0, r3
 80224cc:	f000 f8be 	bl	802264c <NotificationScreen_ItemsetPos>
 80224d0:	4603      	mov	r3, r0
 80224d2:	613b      	str	r3, [r7, #16]
 80224d4:	7dfb      	ldrb	r3, [r7, #23]
 80224d6:	693a      	ldr	r2, [r7, #16]
 80224d8:	4629      	mov	r1, r5
 80224da:	4620      	mov	r0, r4
 80224dc:	f7ff fece 	bl	802227c <NotificationScreen_Items>
				NotificationScreen_ItemsetPos(posIndex),selected);
        posIndex++;
 80224e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224e4:	b2db      	uxtb	r3, r3
 80224e6:	3301      	adds	r3, #1
 80224e8:	b2db      	uxtb	r3, r3
 80224ea:	71fb      	strb	r3, [r7, #7]
       for(uint8_t i=1;i<(uint8_t)tos_NotificationGetSize(node);i++){
 80224ec:	7dbb      	ldrb	r3, [r7, #22]
 80224ee:	3301      	adds	r3, #1
 80224f0:	75bb      	strb	r3, [r7, #22]
 80224f2:	68b8      	ldr	r0, [r7, #8]
 80224f4:	f004 fc8b 	bl	8026e0e <tos_NotificationGetSize>
 80224f8:	4603      	mov	r3, r0
 80224fa:	461a      	mov	r2, r3
 80224fc:	7dbb      	ldrb	r3, [r7, #22]
 80224fe:	4293      	cmp	r3, r2
 8022500:	d3bc      	bcc.n	802247c <NotificationScreen_SetOnScreenItems+0x18>
    }
    }
}
 8022502:	bf00      	nop
 8022504:	3718      	adds	r7, #24
 8022506:	46bd      	mov	sp, r7
 8022508:	bdb0      	pop	{r4, r5, r7, pc}
 802250a:	bf00      	nop
 802250c:	20006f59 	.word	0x20006f59

08022510 <NotificationScreen_ItemsStyleInit>:
/*This function using for set notification style init
 * created a style init because when create a notification then be not get again memory
 * @param theme using for select theme
 * true -> dark
 * false -> light*/
void NotificationScreen_ItemsStyleInit(bool theme){
 8022510:	b580      	push	{r7, lr}
 8022512:	b082      	sub	sp, #8
 8022514:	af00      	add	r7, sp, #0
 8022516:	4603      	mov	r3, r0
 8022518:	71fb      	strb	r3, [r7, #7]
    lv_style_copy(&scrl_style, &lv_style_plain);
 802251a:	4941      	ldr	r1, [pc, #260]	; (8022620 <NotificationScreen_ItemsStyleInit+0x110>)
 802251c:	4841      	ldr	r0, [pc, #260]	; (8022624 <NotificationScreen_ItemsStyleInit+0x114>)
 802251e:	f7e6 f921 	bl	8008764 <lv_style_copy>
    scrl_style.body.main_color = LV_COLOR_SILVER;
 8022522:	4a40      	ldr	r2, [pc, #256]	; (8022624 <NotificationScreen_ItemsStyleInit+0x114>)
 8022524:	4b40      	ldr	r3, [pc, #256]	; (8022628 <NotificationScreen_ItemsStyleInit+0x118>)
 8022526:	881b      	ldrh	r3, [r3, #0]
 8022528:	8053      	strh	r3, [r2, #2]
    scrl_style.body.grad_color = LV_COLOR_SILVER;
 802252a:	4a3e      	ldr	r2, [pc, #248]	; (8022624 <NotificationScreen_ItemsStyleInit+0x114>)
 802252c:	4b3e      	ldr	r3, [pc, #248]	; (8022628 <NotificationScreen_ItemsStyleInit+0x118>)
 802252e:	881b      	ldrh	r3, [r3, #0]
 8022530:	8093      	strh	r3, [r2, #4]
    scrl_style.body.border.color = LV_COLOR_BLACK;
 8022532:	4b3c      	ldr	r3, [pc, #240]	; (8022624 <NotificationScreen_ItemsStyleInit+0x114>)
 8022534:	2200      	movs	r2, #0
 8022536:	815a      	strh	r2, [r3, #10]
    scrl_style.body.border.width = 0;
 8022538:	4b3a      	ldr	r3, [pc, #232]	; (8022624 <NotificationScreen_ItemsStyleInit+0x114>)
 802253a:	2200      	movs	r2, #0
 802253c:	819a      	strh	r2, [r3, #12]

    lv_style_copy(&sb_style, &lv_style_plain);
 802253e:	4938      	ldr	r1, [pc, #224]	; (8022620 <NotificationScreen_ItemsStyleInit+0x110>)
 8022540:	483a      	ldr	r0, [pc, #232]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022542:	f7e6 f90f 	bl	8008764 <lv_style_copy>
    sb_style.body.main_color = LV_COLOR_WHITE;
 8022546:	4a39      	ldr	r2, [pc, #228]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022548:	4b39      	ldr	r3, [pc, #228]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 802254a:	881b      	ldrh	r3, [r3, #0]
 802254c:	8053      	strh	r3, [r2, #2]
    sb_style.body.grad_color = LV_COLOR_WHITE;
 802254e:	4a37      	ldr	r2, [pc, #220]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022550:	4b37      	ldr	r3, [pc, #220]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 8022552:	881b      	ldrh	r3, [r3, #0]
 8022554:	8093      	strh	r3, [r2, #4]
    sb_style.body.border.color = LV_COLOR_BLACK;
 8022556:	4b35      	ldr	r3, [pc, #212]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022558:	2200      	movs	r2, #0
 802255a:	815a      	strh	r2, [r3, #10]
    sb_style.text.color =LV_COLOR_BLACK;
 802255c:	4b33      	ldr	r3, [pc, #204]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 802255e:	2200      	movs	r2, #0
 8022560:	841a      	strh	r2, [r3, #32]
    sb_style.body.border.width = 1;
 8022562:	4b32      	ldr	r3, [pc, #200]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022564:	2201      	movs	r2, #1
 8022566:	819a      	strh	r2, [r3, #12]
    sb_style.body.border.opa = LV_OPA_70;
 8022568:	4b30      	ldr	r3, [pc, #192]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 802256a:	22b2      	movs	r2, #178	; 0xb2
 802256c:	73da      	strb	r2, [r3, #15]
    sb_style.body.opa = LV_OPA_70;
 802256e:	4b2f      	ldr	r3, [pc, #188]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022570:	22b2      	movs	r2, #178	; 0xb2
 8022572:	721a      	strb	r2, [r3, #8]
    sb_style.body.padding.right = 3;
 8022574:	4b2d      	ldr	r3, [pc, #180]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022576:	2203      	movs	r2, #3
 8022578:	839a      	strh	r2, [r3, #28]
    sb_style.body.padding.bottom = 3;
 802257a:	4b2c      	ldr	r3, [pc, #176]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 802257c:	2203      	movs	r2, #3
 802257e:	831a      	strh	r2, [r3, #24]
    sb_style.body.padding.inner = 8;
 8022580:	4b2a      	ldr	r3, [pc, #168]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 8022582:	2208      	movs	r2, #8
 8022584:	83da      	strh	r2, [r3, #30]
    lv_style_copy(&bg_style, &lv_style_plain);
 8022586:	4926      	ldr	r1, [pc, #152]	; (8022620 <NotificationScreen_ItemsStyleInit+0x110>)
 8022588:	482a      	ldr	r0, [pc, #168]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 802258a:	f7e6 f8eb 	bl	8008764 <lv_style_copy>
    bg_style.body.main_color = LV_COLOR_WHITE;
 802258e:	4a29      	ldr	r2, [pc, #164]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 8022590:	4b27      	ldr	r3, [pc, #156]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 8022592:	881b      	ldrh	r3, [r3, #0]
 8022594:	8053      	strh	r3, [r2, #2]
    bg_style.body.grad_color = LV_COLOR_WHITE;
 8022596:	4a27      	ldr	r2, [pc, #156]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 8022598:	4b25      	ldr	r3, [pc, #148]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 802259a:	881b      	ldrh	r3, [r3, #0]
 802259c:	8093      	strh	r3, [r2, #4]
    bg_style.body.border.color = LV_COLOR_WHITE;
 802259e:	4a25      	ldr	r2, [pc, #148]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225a0:	4b23      	ldr	r3, [pc, #140]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 80225a2:	881b      	ldrh	r3, [r3, #0]
 80225a4:	8153      	strh	r3, [r2, #10]
    bg_style.body.border.width = 0;
 80225a6:	4b23      	ldr	r3, [pc, #140]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225a8:	2200      	movs	r2, #0
 80225aa:	819a      	strh	r2, [r3, #12]
    bg_style.body.border.opa = LV_OPA_70;
 80225ac:	4b21      	ldr	r3, [pc, #132]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225ae:	22b2      	movs	r2, #178	; 0xb2
 80225b0:	73da      	strb	r2, [r3, #15]
    bg_style.body.opa = LV_OPA_70;
 80225b2:	4b20      	ldr	r3, [pc, #128]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225b4:	22b2      	movs	r2, #178	; 0xb2
 80225b6:	721a      	strb	r2, [r3, #8]
    if(theme){
 80225b8:	79fb      	ldrb	r3, [r7, #7]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d016      	beq.n	80225ec <NotificationScreen_ItemsStyleInit+0xdc>
    	sb_style.body.main_color = LV_COLOR_BLACK;
 80225be:	4b1b      	ldr	r3, [pc, #108]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 80225c0:	2200      	movs	r2, #0
 80225c2:	805a      	strh	r2, [r3, #2]
        sb_style.body.grad_color = LV_COLOR_BLACK;
 80225c4:	4b19      	ldr	r3, [pc, #100]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 80225c6:	2200      	movs	r2, #0
 80225c8:	809a      	strh	r2, [r3, #4]
        sb_style.body.border.color = LV_COLOR_WHITE;
 80225ca:	4a18      	ldr	r2, [pc, #96]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 80225cc:	4b18      	ldr	r3, [pc, #96]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 80225ce:	881b      	ldrh	r3, [r3, #0]
 80225d0:	8153      	strh	r3, [r2, #10]
        bg_style.body.main_color = LV_COLOR_BLACK;
 80225d2:	4b18      	ldr	r3, [pc, #96]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225d4:	2200      	movs	r2, #0
 80225d6:	805a      	strh	r2, [r3, #2]
        bg_style.body.grad_color = LV_COLOR_BLACK;
 80225d8:	4b16      	ldr	r3, [pc, #88]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225da:	2200      	movs	r2, #0
 80225dc:	809a      	strh	r2, [r3, #4]
        bg_style.body.border.color = LV_COLOR_BLACK;
 80225de:	4b15      	ldr	r3, [pc, #84]	; (8022634 <NotificationScreen_ItemsStyleInit+0x124>)
 80225e0:	2200      	movs	r2, #0
 80225e2:	815a      	strh	r2, [r3, #10]
        sb_style.text.color =LV_COLOR_WHITE;
 80225e4:	4a11      	ldr	r2, [pc, #68]	; (802262c <NotificationScreen_ItemsStyleInit+0x11c>)
 80225e6:	4b12      	ldr	r3, [pc, #72]	; (8022630 <NotificationScreen_ItemsStyleInit+0x120>)
 80225e8:	881b      	ldrh	r3, [r3, #0]
 80225ea:	8413      	strh	r3, [r2, #32]
    }

	lv_style_copy(&appName_Style, &lv_style_plain);
 80225ec:	490c      	ldr	r1, [pc, #48]	; (8022620 <NotificationScreen_ItemsStyleInit+0x110>)
 80225ee:	4812      	ldr	r0, [pc, #72]	; (8022638 <NotificationScreen_ItemsStyleInit+0x128>)
 80225f0:	f7e6 f8b8 	bl	8008764 <lv_style_copy>
	appName_Style.text.font = &lv_font_roboto_22;
 80225f4:	4b10      	ldr	r3, [pc, #64]	; (8022638 <NotificationScreen_ItemsStyleInit+0x128>)
 80225f6:	4a11      	ldr	r2, [pc, #68]	; (802263c <NotificationScreen_ItemsStyleInit+0x12c>)
 80225f8:	625a      	str	r2, [r3, #36]	; 0x24
	appName_Style.text.color = LV_COLOR_AQUA;
 80225fa:	4a0f      	ldr	r2, [pc, #60]	; (8022638 <NotificationScreen_ItemsStyleInit+0x128>)
 80225fc:	4b10      	ldr	r3, [pc, #64]	; (8022640 <NotificationScreen_ItemsStyleInit+0x130>)
 80225fe:	881b      	ldrh	r3, [r3, #0]
 8022600:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&notification_Style, &lv_style_plain);
 8022602:	4907      	ldr	r1, [pc, #28]	; (8022620 <NotificationScreen_ItemsStyleInit+0x110>)
 8022604:	480f      	ldr	r0, [pc, #60]	; (8022644 <NotificationScreen_ItemsStyleInit+0x134>)
 8022606:	f7e6 f8ad 	bl	8008764 <lv_style_copy>
	notification_Style.text.font = &lv_font_roboto_16;
 802260a:	4b0e      	ldr	r3, [pc, #56]	; (8022644 <NotificationScreen_ItemsStyleInit+0x134>)
 802260c:	4a0e      	ldr	r2, [pc, #56]	; (8022648 <NotificationScreen_ItemsStyleInit+0x138>)
 802260e:	625a      	str	r2, [r3, #36]	; 0x24
	notification_Style.text.color = LV_COLOR_BLACK;
 8022610:	4b0c      	ldr	r3, [pc, #48]	; (8022644 <NotificationScreen_ItemsStyleInit+0x134>)
 8022612:	2200      	movs	r2, #0
 8022614:	841a      	strh	r2, [r3, #32]
}
 8022616:	bf00      	nop
 8022618:	3708      	adds	r7, #8
 802261a:	46bd      	mov	sp, r7
 802261c:	bd80      	pop	{r7, pc}
 802261e:	bf00      	nop
 8022620:	20006c74 	.word	0x20006c74
 8022624:	20006104 	.word	0x20006104
 8022628:	08029ef0 	.word	0x08029ef0
 802262c:	2000608c 	.word	0x2000608c
 8022630:	08029ed8 	.word	0x08029ed8
 8022634:	200060c8 	.word	0x200060c8
 8022638:	20006140 	.word	0x20006140
 802263c:	200017c0 	.word	0x200017c0
 8022640:	08029ef4 	.word	0x08029ef4
 8022644:	2000617c 	.word	0x2000617c
 8022648:	20000bec 	.word	0x20000bec

0802264c <NotificationScreen_ItemsetPos>:
/*This function using for set items position
 * @param index using for set position axis y*/
tos_Position NotificationScreen_ItemsetPos(int8_t index){
 802264c:	b480      	push	{r7}
 802264e:	b085      	sub	sp, #20
 8022650:	af00      	add	r7, sp, #0
 8022652:	4603      	mov	r3, r0
 8022654:	71fb      	strb	r3, [r7, #7]
	tos_Position tmp;
	tmp.x=0; tmp.y=(index*55)-90;
 8022656:	2300      	movs	r3, #0
 8022658:	813b      	strh	r3, [r7, #8]
 802265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802265e:	b29b      	uxth	r3, r3
 8022660:	461a      	mov	r2, r3
 8022662:	00d2      	lsls	r2, r2, #3
 8022664:	1ad2      	subs	r2, r2, r3
 8022666:	00d2      	lsls	r2, r2, #3
 8022668:	1ad3      	subs	r3, r2, r3
 802266a:	b29b      	uxth	r3, r3
 802266c:	3b5a      	subs	r3, #90	; 0x5a
 802266e:	b29b      	uxth	r3, r3
 8022670:	817b      	strh	r3, [r7, #10]
	return tmp;
 8022672:	68bb      	ldr	r3, [r7, #8]
 8022674:	60fb      	str	r3, [r7, #12]
 8022676:	2300      	movs	r3, #0
 8022678:	89ba      	ldrh	r2, [r7, #12]
 802267a:	f362 030f 	bfi	r3, r2, #0, #16
 802267e:	89fa      	ldrh	r2, [r7, #14]
 8022680:	f362 431f 	bfi	r3, r2, #16, #16
}
 8022684:	4618      	mov	r0, r3
 8022686:	3714      	adds	r7, #20
 8022688:	46bd      	mov	sp, r7
 802268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802268e:	4770      	bx	lr

08022690 <NotificationScreen_GetMaxScroll>:
/*This function using for return can get max going scroll value
 * @param node using for get node*/
int8_t NotificationScreen_GetMaxScroll(tos_Notification* node){
 8022690:	b580      	push	{r7, lr}
 8022692:	b084      	sub	sp, #16
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
	if(tos_NotificationGetSize(node)>=5){
 8022698:	6878      	ldr	r0, [r7, #4]
 802269a:	f004 fbb8 	bl	8026e0e <tos_NotificationGetSize>
 802269e:	4603      	mov	r3, r0
 80226a0:	2b04      	cmp	r3, #4
 80226a2:	d909      	bls.n	80226b8 <NotificationScreen_GetMaxScroll+0x28>
		int8_t max=tos_NotificationGetSize(node)-2;
 80226a4:	6878      	ldr	r0, [r7, #4]
 80226a6:	f004 fbb2 	bl	8026e0e <tos_NotificationGetSize>
 80226aa:	4603      	mov	r3, r0
 80226ac:	3b02      	subs	r3, #2
 80226ae:	b2db      	uxtb	r3, r3
 80226b0:	73fb      	strb	r3, [r7, #15]
		return max;
 80226b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80226b6:	e000      	b.n	80226ba <NotificationScreen_GetMaxScroll+0x2a>
	} return 0;
 80226b8:	2300      	movs	r3, #0
}
 80226ba:	4618      	mov	r0, r3
 80226bc:	3710      	adds	r7, #16
 80226be:	46bd      	mov	sp, r7
 80226c0:	bd80      	pop	{r7, pc}
	...

080226c4 <NotificationScreen_TaskControllerSet>:

//Setter Getter Functions
void NotificationScreen_TaskControllerSet(bool active){
 80226c4:	b480      	push	{r7}
 80226c6:	b083      	sub	sp, #12
 80226c8:	af00      	add	r7, sp, #0
 80226ca:	4603      	mov	r3, r0
 80226cc:	71fb      	strb	r3, [r7, #7]
	NS_taskController = active;
 80226ce:	4a04      	ldr	r2, [pc, #16]	; (80226e0 <NotificationScreen_TaskControllerSet+0x1c>)
 80226d0:	79fb      	ldrb	r3, [r7, #7]
 80226d2:	7013      	strb	r3, [r2, #0]
}
 80226d4:	bf00      	nop
 80226d6:	370c      	adds	r7, #12
 80226d8:	46bd      	mov	sp, r7
 80226da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226de:	4770      	bx	lr
 80226e0:	20006f44 	.word	0x20006f44

080226e4 <NotificationScreen_TaskControllerGet>:
bool NotificationScreen_TaskControllerGet(void){
 80226e4:	b480      	push	{r7}
 80226e6:	af00      	add	r7, sp, #0
	return NS_taskController;
 80226e8:	4b03      	ldr	r3, [pc, #12]	; (80226f8 <NotificationScreen_TaskControllerGet+0x14>)
 80226ea:	781b      	ldrb	r3, [r3, #0]
}
 80226ec:	4618      	mov	r0, r3
 80226ee:	46bd      	mov	sp, r7
 80226f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226f4:	4770      	bx	lr
 80226f6:	bf00      	nop
 80226f8:	20006f44 	.word	0x20006f44

080226fc <NotificationScreen_GetNotifications>:
void NotificationScreen_GetNotifications(char *appName,char* appNotification){
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b082      	sub	sp, #8
 8022700:	af00      	add	r7, sp, #0
 8022702:	6078      	str	r0, [r7, #4]
 8022704:	6039      	str	r1, [r7, #0]
	  node=tos_NotificationPushItem(node,appName,appNotification);
 8022706:	4b07      	ldr	r3, [pc, #28]	; (8022724 <NotificationScreen_GetNotifications+0x28>)
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	683a      	ldr	r2, [r7, #0]
 802270c:	6879      	ldr	r1, [r7, #4]
 802270e:	4618      	mov	r0, r3
 8022710:	f004 fbbd 	bl	8026e8e <tos_NotificationPushItem>
 8022714:	4602      	mov	r2, r0
 8022716:	4b03      	ldr	r3, [pc, #12]	; (8022724 <NotificationScreen_GetNotifications+0x28>)
 8022718:	601a      	str	r2, [r3, #0]
}
 802271a:	bf00      	nop
 802271c:	3708      	adds	r7, #8
 802271e:	46bd      	mov	sp, r7
 8022720:	bd80      	pop	{r7, pc}
 8022722:	bf00      	nop
 8022724:	20006f48 	.word	0x20006f48

08022728 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8022728:	b480      	push	{r7}
 802272a:	b085      	sub	sp, #20
 802272c:	af00      	add	r7, sp, #0
 802272e:	4603      	mov	r3, r0
 8022730:	71fb      	strb	r3, [r7, #7]
 8022732:	460b      	mov	r3, r1
 8022734:	71bb      	strb	r3, [r7, #6]
 8022736:	4613      	mov	r3, r2
 8022738:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802273a:	79bb      	ldrb	r3, [r7, #6]
 802273c:	095b      	lsrs	r3, r3, #5
 802273e:	b2db      	uxtb	r3, r3
 8022740:	f003 0307 	and.w	r3, r3, #7
 8022744:	b2da      	uxtb	r2, r3
 8022746:	7b3b      	ldrb	r3, [r7, #12]
 8022748:	f362 0302 	bfi	r3, r2, #0, #3
 802274c:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802274e:	79fb      	ldrb	r3, [r7, #7]
 8022750:	08db      	lsrs	r3, r3, #3
 8022752:	b2db      	uxtb	r3, r3
 8022754:	f003 031f 	and.w	r3, r3, #31
 8022758:	b2da      	uxtb	r2, r3
 802275a:	7b3b      	ldrb	r3, [r7, #12]
 802275c:	f362 03c7 	bfi	r3, r2, #3, #5
 8022760:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8022762:	797b      	ldrb	r3, [r7, #5]
 8022764:	08db      	lsrs	r3, r3, #3
 8022766:	b2db      	uxtb	r3, r3
 8022768:	f003 031f 	and.w	r3, r3, #31
 802276c:	b2da      	uxtb	r2, r3
 802276e:	7b7b      	ldrb	r3, [r7, #13]
 8022770:	f362 0304 	bfi	r3, r2, #0, #5
 8022774:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8022776:	79bb      	ldrb	r3, [r7, #6]
 8022778:	089b      	lsrs	r3, r3, #2
 802277a:	b2db      	uxtb	r3, r3
 802277c:	f003 0307 	and.w	r3, r3, #7
 8022780:	b2da      	uxtb	r2, r3
 8022782:	7b7b      	ldrb	r3, [r7, #13]
 8022784:	f362 1347 	bfi	r3, r2, #5, #3
 8022788:	737b      	strb	r3, [r7, #13]
    return color;
 802278a:	89bb      	ldrh	r3, [r7, #12]
}
 802278c:	4618      	mov	r0, r3
 802278e:	3714      	adds	r7, #20
 8022790:	46bd      	mov	sp, r7
 8022792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022796:	4770      	bx	lr

08022798 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8022798:	b580      	push	{r7, lr}
 802279a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802279c:	f7ef ff00 	bl	80125a0 <lv_disp_get_default>
 80227a0:	4603      	mov	r3, r0
 80227a2:	4618      	mov	r0, r3
 80227a4:	f7e2 fbc8 	bl	8004f38 <lv_disp_get_scr_act>
 80227a8:	4603      	mov	r3, r0
}
 80227aa:	4618      	mov	r0, r3
 80227ac:	bd80      	pop	{r7, pc}

080227ae <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80227ae:	b580      	push	{r7, lr}
 80227b0:	b084      	sub	sp, #16
 80227b2:	af00      	add	r7, sp, #0
 80227b4:	60f8      	str	r0, [r7, #12]
 80227b6:	460b      	mov	r3, r1
 80227b8:	607a      	str	r2, [r7, #4]
 80227ba:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80227bc:	6879      	ldr	r1, [r7, #4]
 80227be:	68f8      	ldr	r0, [r7, #12]
 80227c0:	f7e4 fa31 	bl	8006c26 <lv_obj_set_style>
}
 80227c4:	bf00      	nop
 80227c6:	3710      	adds	r7, #16
 80227c8:	46bd      	mov	sp, r7
 80227ca:	bd80      	pop	{r7, pc}

080227cc <tos_RunModeScreen_Init>:
void RunMode_steps_angle_loader(void);
void RunMode_kCals_angle_loader(void);
void RunMode_distances_angle_loader(void);

/*This function using for initialization Run Mode screen*/
void tos_RunModeScreen_Init(bool unitType,bool theme){
 80227cc:	b580      	push	{r7, lr}
 80227ce:	b082      	sub	sp, #8
 80227d0:	af00      	add	r7, sp, #0
 80227d2:	4603      	mov	r3, r0
 80227d4:	460a      	mov	r2, r1
 80227d6:	71fb      	strb	r3, [r7, #7]
 80227d8:	4613      	mov	r3, r2
 80227da:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 80227dc:	f7ff ffdc 	bl	8022798 <lv_scr_act>
 80227e0:	4603      	mov	r3, r0
 80227e2:	4618      	mov	r0, r3
 80227e4:	f7e3 fb08 	bl	8005df8 <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 80227e8:	492e      	ldr	r1, [pc, #184]	; (80228a4 <tos_RunModeScreen_Init+0xd8>)
 80227ea:	482f      	ldr	r0, [pc, #188]	; (80228a8 <tos_RunModeScreen_Init+0xdc>)
 80227ec:	f7e5 ffba 	bl	8008764 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 80227f0:	4b2d      	ldr	r3, [pc, #180]	; (80228a8 <tos_RunModeScreen_Init+0xdc>)
 80227f2:	4a2e      	ldr	r2, [pc, #184]	; (80228ac <tos_RunModeScreen_Init+0xe0>)
 80227f4:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 80227f6:	4a2c      	ldr	r2, [pc, #176]	; (80228a8 <tos_RunModeScreen_Init+0xdc>)
 80227f8:	4b2d      	ldr	r3, [pc, #180]	; (80228b0 <tos_RunModeScreen_Init+0xe4>)
 80227fa:	881b      	ldrh	r3, [r3, #0]
 80227fc:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 80227fe:	4929      	ldr	r1, [pc, #164]	; (80228a4 <tos_RunModeScreen_Init+0xd8>)
 8022800:	482c      	ldr	r0, [pc, #176]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 8022802:	f7e5 ffaf 	bl	8008764 <lv_style_copy>
	if(theme){
 8022806:	79bb      	ldrb	r3, [r7, #6]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d00a      	beq.n	8022822 <tos_RunModeScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 802280c:	4b29      	ldr	r3, [pc, #164]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 802280e:	2200      	movs	r2, #0
 8022810:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8022812:	4b28      	ldr	r3, [pc, #160]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 8022814:	2200      	movs	r2, #0
 8022816:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8022818:	4a23      	ldr	r2, [pc, #140]	; (80228a8 <tos_RunModeScreen_Init+0xdc>)
 802281a:	4b27      	ldr	r3, [pc, #156]	; (80228b8 <tos_RunModeScreen_Init+0xec>)
 802281c:	881b      	ldrh	r3, [r3, #0]
 802281e:	8413      	strh	r3, [r2, #32]
 8022820:	e00b      	b.n	802283a <tos_RunModeScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 8022822:	4a24      	ldr	r2, [pc, #144]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 8022824:	4b25      	ldr	r3, [pc, #148]	; (80228bc <tos_RunModeScreen_Init+0xf0>)
 8022826:	881b      	ldrh	r3, [r3, #0]
 8022828:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 802282a:	4a22      	ldr	r2, [pc, #136]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 802282c:	4b23      	ldr	r3, [pc, #140]	; (80228bc <tos_RunModeScreen_Init+0xf0>)
 802282e:	881b      	ldrh	r3, [r3, #0]
 8022830:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8022832:	4a1d      	ldr	r2, [pc, #116]	; (80228a8 <tos_RunModeScreen_Init+0xdc>)
 8022834:	4b20      	ldr	r3, [pc, #128]	; (80228b8 <tos_RunModeScreen_Init+0xec>)
 8022836:	881b      	ldrh	r3, [r3, #0]
 8022838:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 802283a:	f7ff ffad 	bl	8022798 <lv_scr_act>
 802283e:	4603      	mov	r3, r0
 8022840:	491c      	ldr	r1, [pc, #112]	; (80228b4 <tos_RunModeScreen_Init+0xe8>)
 8022842:	4618      	mov	r0, r3
 8022844:	f7e4 f9ef 	bl	8006c26 <lv_obj_set_style>

	RMfirstVAl=true;
 8022848:	4b1d      	ldr	r3, [pc, #116]	; (80228c0 <tos_RunModeScreen_Init+0xf4>)
 802284a:	2201      	movs	r2, #1
 802284c:	701a      	strb	r2, [r3, #0]
	RMtimeSetVal=0;
 802284e:	4b1d      	ldr	r3, [pc, #116]	; (80228c4 <tos_RunModeScreen_Init+0xf8>)
 8022850:	2200      	movs	r2, #0
 8022852:	701a      	strb	r2, [r3, #0]
	isStartRun=false;
 8022854:	4b1c      	ldr	r3, [pc, #112]	; (80228c8 <tos_RunModeScreen_Init+0xfc>)
 8022856:	2200      	movs	r2, #0
 8022858:	701a      	strb	r2, [r3, #0]

	RM_theme=theme;
 802285a:	4a1c      	ldr	r2, [pc, #112]	; (80228cc <tos_RunModeScreen_Init+0x100>)
 802285c:	79bb      	ldrb	r3, [r7, #6]
 802285e:	7013      	strb	r3, [r2, #0]
	RM_unitType=unitType;
 8022860:	4a1b      	ldr	r2, [pc, #108]	; (80228d0 <tos_RunModeScreen_Init+0x104>)
 8022862:	79fb      	ldrb	r3, [r7, #7]
 8022864:	7013      	strb	r3, [r2, #0]
	RunMode_Obj_Init();
 8022866:	f000 f839 	bl	80228dc <RunMode_Obj_Init>
	RunMode_Steps(theme);
 802286a:	79bb      	ldrb	r3, [r7, #6]
 802286c:	4618      	mov	r0, r3
 802286e:	f000 f9bd 	bl	8022bec <RunMode_Steps>
	RunMode_kCals(theme);
 8022872:	79bb      	ldrb	r3, [r7, #6]
 8022874:	4618      	mov	r0, r3
 8022876:	f000 f8ff 	bl	8022a78 <RunMode_kCals>
	RunMode_Distances(unitType,theme);
 802287a:	79ba      	ldrb	r2, [r7, #6]
 802287c:	79fb      	ldrb	r3, [r7, #7]
 802287e:	4611      	mov	r1, r2
 8022880:	4618      	mov	r0, r3
 8022882:	f000 fa69 	bl	8022d58 <RunMode_Distances>
	RM_taskController=true;
 8022886:	4b13      	ldr	r3, [pc, #76]	; (80228d4 <tos_RunModeScreen_Init+0x108>)
 8022888:	2201      	movs	r2, #1
 802288a:	701a      	strb	r2, [r3, #0]
	lv_task_create(RunModeScreen_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 802288c:	2300      	movs	r3, #0
 802288e:	2201      	movs	r2, #1
 8022890:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8022894:	4810      	ldr	r0, [pc, #64]	; (80228d8 <tos_RunModeScreen_Init+0x10c>)
 8022896:	f7f1 fac7 	bl	8013e28 <lv_task_create>
}
 802289a:	bf00      	nop
 802289c:	3708      	adds	r7, #8
 802289e:	46bd      	mov	sp, r7
 80228a0:	bd80      	pop	{r7, pc}
 80228a2:	bf00      	nop
 80228a4:	20006c74 	.word	0x20006c74
 80228a8:	200061f8 	.word	0x200061f8
 80228ac:	200026cc 	.word	0x200026cc
 80228b0:	08029f08 	.word	0x08029f08
 80228b4:	200061bc 	.word	0x200061bc
 80228b8:	08029f0c 	.word	0x08029f0c
 80228bc:	08029f10 	.word	0x08029f10
 80228c0:	20006ffc 	.word	0x20006ffc
 80228c4:	20006fbc 	.word	0x20006fbc
 80228c8:	20006ff4 	.word	0x20006ff4
 80228cc:	20006fbd 	.word	0x20006fbd
 80228d0:	20006f70 	.word	0x20006f70
 80228d4:	20006fe0 	.word	0x20006fe0
 80228d8:	08022ee1 	.word	0x08022ee1

080228dc <RunMode_Obj_Init>:


/*This function using for create and set objects on screen*/
void RunMode_Obj_Init(void){
 80228dc:	b590      	push	{r4, r7, lr}
 80228de:	b085      	sub	sp, #20
 80228e0:	af04      	add	r7, sp, #16

    static lv_style_t obj_Style,indic_Style;
    lv_style_copy(&obj_Style, &lv_style_plain);
 80228e2:	4957      	ldr	r1, [pc, #348]	; (8022a40 <RunMode_Obj_Init+0x164>)
 80228e4:	4857      	ldr	r0, [pc, #348]	; (8022a44 <RunMode_Obj_Init+0x168>)
 80228e6:	f7e5 ff3d 	bl	8008764 <lv_style_copy>
    obj_Style.text.color = LV_COLOR_BLACK;
 80228ea:	4b56      	ldr	r3, [pc, #344]	; (8022a44 <RunMode_Obj_Init+0x168>)
 80228ec:	2200      	movs	r2, #0
 80228ee:	841a      	strh	r2, [r3, #32]
    if(RM_theme) obj_Style.text.color = LV_COLOR_SILVER;
 80228f0:	4b55      	ldr	r3, [pc, #340]	; (8022a48 <RunMode_Obj_Init+0x16c>)
 80228f2:	781b      	ldrb	r3, [r3, #0]
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d003      	beq.n	8022900 <RunMode_Obj_Init+0x24>
 80228f8:	4a52      	ldr	r2, [pc, #328]	; (8022a44 <RunMode_Obj_Init+0x168>)
 80228fa:	4b54      	ldr	r3, [pc, #336]	; (8022a4c <RunMode_Obj_Init+0x170>)
 80228fc:	881b      	ldrh	r3, [r3, #0]
 80228fe:	8413      	strh	r3, [r2, #32]
    obj_Style.text.font = &digital_font_for_number_30;
 8022900:	4b50      	ldr	r3, [pc, #320]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022902:	4a53      	ldr	r2, [pc, #332]	; (8022a50 <RunMode_Obj_Init+0x174>)
 8022904:	625a      	str	r2, [r3, #36]	; 0x24
    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8022906:	4c4f      	ldr	r4, [pc, #316]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022908:	2200      	movs	r2, #0
 802290a:	21a5      	movs	r1, #165	; 0xa5
 802290c:	20ff      	movs	r0, #255	; 0xff
 802290e:	f7ff ff0b 	bl	8022728 <lv_color_make>
 8022912:	8060      	strh	r0, [r4, #2]
    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8022914:	4c4b      	ldr	r4, [pc, #300]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022916:	2200      	movs	r2, #0
 8022918:	21a5      	movs	r1, #165	; 0xa5
 802291a:	20ff      	movs	r0, #255	; 0xff
 802291c:	f7ff ff04 	bl	8022728 <lv_color_make>
 8022920:	80a0      	strh	r0, [r4, #4]
    obj_Style.body.radius= 10;
 8022922:	4b48      	ldr	r3, [pc, #288]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022924:	220a      	movs	r2, #10
 8022926:	80da      	strh	r2, [r3, #6]
    obj_Style.body.opa=200;
 8022928:	4b46      	ldr	r3, [pc, #280]	; (8022a44 <RunMode_Obj_Init+0x168>)
 802292a:	22c8      	movs	r2, #200	; 0xc8
 802292c:	721a      	strb	r2, [r3, #8]
    lv_style_copy(&indic_Style, &obj_Style);
 802292e:	4945      	ldr	r1, [pc, #276]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022930:	4848      	ldr	r0, [pc, #288]	; (8022a54 <RunMode_Obj_Init+0x178>)
 8022932:	f7e5 ff17 	bl	8008764 <lv_style_copy>
    indic_Style.body.main_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8022936:	4c47      	ldr	r4, [pc, #284]	; (8022a54 <RunMode_Obj_Init+0x178>)
 8022938:	22ff      	movs	r2, #255	; 0xff
 802293a:	21ff      	movs	r1, #255	; 0xff
 802293c:	2000      	movs	r0, #0
 802293e:	f7ff fef3 	bl	8022728 <lv_color_make>
 8022942:	8060      	strh	r0, [r4, #2]
    indic_Style.body.grad_color   = lv_color_make(0x00, 0xFF, 0xFF);
 8022944:	4c43      	ldr	r4, [pc, #268]	; (8022a54 <RunMode_Obj_Init+0x178>)
 8022946:	22ff      	movs	r2, #255	; 0xff
 8022948:	21ff      	movs	r1, #255	; 0xff
 802294a:	2000      	movs	r0, #0
 802294c:	f7ff feec 	bl	8022728 <lv_color_make>
 8022950:	80a0      	strh	r0, [r4, #4]
    indic_Style.body.opa=255;
 8022952:	4b40      	ldr	r3, [pc, #256]	; (8022a54 <RunMode_Obj_Init+0x178>)
 8022954:	22ff      	movs	r2, #255	; 0xff
 8022956:	721a      	strb	r2, [r3, #8]

    RM_targetTimeBar = lv_bar_create(lv_scr_act(), NULL);
 8022958:	f7ff ff1e 	bl	8022798 <lv_scr_act>
 802295c:	4603      	mov	r3, r0
 802295e:	2100      	movs	r1, #0
 8022960:	4618      	mov	r0, r3
 8022962:	f7f2 fa81 	bl	8014e68 <lv_bar_create>
 8022966:	4602      	mov	r2, r0
 8022968:	4b3b      	ldr	r3, [pc, #236]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 802296a:	601a      	str	r2, [r3, #0]
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_BG, &obj_Style);
 802296c:	4b3a      	ldr	r3, [pc, #232]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	4a34      	ldr	r2, [pc, #208]	; (8022a44 <RunMode_Obj_Init+0x168>)
 8022972:	2100      	movs	r1, #0
 8022974:	4618      	mov	r0, r3
 8022976:	f7f2 fc0d 	bl	8015194 <lv_bar_set_style>
    lv_bar_set_style(RM_targetTimeBar, LV_BAR_STYLE_INDIC, &indic_Style);
 802297a:	4b37      	ldr	r3, [pc, #220]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 802297c:	681b      	ldr	r3, [r3, #0]
 802297e:	4a35      	ldr	r2, [pc, #212]	; (8022a54 <RunMode_Obj_Init+0x178>)
 8022980:	2101      	movs	r1, #1
 8022982:	4618      	mov	r0, r3
 8022984:	f7f2 fc06 	bl	8015194 <lv_bar_set_style>
    lv_obj_set_size(RM_targetTimeBar, 150, 30);
 8022988:	4b33      	ldr	r3, [pc, #204]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	221e      	movs	r2, #30
 802298e:	2196      	movs	r1, #150	; 0x96
 8022990:	4618      	mov	r0, r3
 8022992:	f7e3 fc00 	bl	8006196 <lv_obj_set_size>
    lv_obj_align(RM_targetTimeBar, NULL, LV_ALIGN_CENTER, 0, 80);
 8022996:	4b30      	ldr	r3, [pc, #192]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 8022998:	6818      	ldr	r0, [r3, #0]
 802299a:	2350      	movs	r3, #80	; 0x50
 802299c:	9300      	str	r3, [sp, #0]
 802299e:	2300      	movs	r3, #0
 80229a0:	2200      	movs	r2, #0
 80229a2:	2100      	movs	r1, #0
 80229a4:	f7e3 fc9a 	bl	80062dc <lv_obj_align>
    lv_bar_set_range(RM_targetTimeBar,0,100);
 80229a8:	4b2b      	ldr	r3, [pc, #172]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 80229aa:	681b      	ldr	r3, [r3, #0]
 80229ac:	2264      	movs	r2, #100	; 0x64
 80229ae:	2100      	movs	r1, #0
 80229b0:	4618      	mov	r0, r3
 80229b2:	f7f2 fba3 	bl	80150fc <lv_bar_set_range>
    lv_bar_set_value(RM_targetTimeBar, 0, LV_ANIM_OFF);
 80229b6:	4b28      	ldr	r3, [pc, #160]	; (8022a58 <RunMode_Obj_Init+0x17c>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	2200      	movs	r2, #0
 80229bc:	2100      	movs	r1, #0
 80229be:	4618      	mov	r0, r3
 80229c0:	f7f2 fb18 	bl	8014ff4 <lv_bar_set_value>

    //MAGENTA -> FF00FF
   	//AQUA -> 00FFFF
	//ORANGE -> FFA500

    RM_Lbl = lv_label_create(lv_scr_act(), NULL);
 80229c4:	f7ff fee8 	bl	8022798 <lv_scr_act>
 80229c8:	4603      	mov	r3, r0
 80229ca:	2100      	movs	r1, #0
 80229cc:	4618      	mov	r0, r3
 80229ce:	f7f6 fd9d 	bl	801950c <lv_label_create>
 80229d2:	4602      	mov	r2, r0
 80229d4:	4b21      	ldr	r3, [pc, #132]	; (8022a5c <RunMode_Obj_Init+0x180>)
 80229d6:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(RM_Lbl, true);
 80229d8:	4b20      	ldr	r3, [pc, #128]	; (8022a5c <RunMode_Obj_Init+0x180>)
 80229da:	681b      	ldr	r3, [r3, #0]
 80229dc:	2101      	movs	r1, #1
 80229de:	4618      	mov	r0, r3
 80229e0:	f7f6 ffe2 	bl	80199a8 <lv_label_set_recolor>
 	lv_label_set_style(RM_Lbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 80229e4:	4b1d      	ldr	r3, [pc, #116]	; (8022a5c <RunMode_Obj_Init+0x180>)
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	4a16      	ldr	r2, [pc, #88]	; (8022a44 <RunMode_Obj_Init+0x168>)
 80229ea:	2100      	movs	r1, #0
 80229ec:	4618      	mov	r0, r3
 80229ee:	f7ff fede 	bl	80227ae <lv_label_set_style>
	snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80229f2:	4b1b      	ldr	r3, [pc, #108]	; (8022a60 <RunMode_Obj_Init+0x184>)
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	4618      	mov	r0, r3
 80229f8:	4b1a      	ldr	r3, [pc, #104]	; (8022a64 <RunMode_Obj_Init+0x188>)
 80229fa:	781b      	ldrb	r3, [r3, #0]
 80229fc:	461a      	mov	r2, r3
 80229fe:	4b1a      	ldr	r3, [pc, #104]	; (8022a68 <RunMode_Obj_Init+0x18c>)
 8022a00:	781b      	ldrb	r3, [r3, #0]
 8022a02:	4619      	mov	r1, r3
 8022a04:	4b19      	ldr	r3, [pc, #100]	; (8022a6c <RunMode_Obj_Init+0x190>)
 8022a06:	881b      	ldrh	r3, [r3, #0]
 8022a08:	9302      	str	r3, [sp, #8]
 8022a0a:	9101      	str	r1, [sp, #4]
 8022a0c:	9200      	str	r2, [sp, #0]
 8022a0e:	4603      	mov	r3, r0
 8022a10:	4a17      	ldr	r2, [pc, #92]	; (8022a70 <RunMode_Obj_Init+0x194>)
 8022a12:	2140      	movs	r1, #64	; 0x40
 8022a14:	4817      	ldr	r0, [pc, #92]	; (8022a74 <RunMode_Obj_Init+0x198>)
 8022a16:	f005 f92d 	bl	8027c74 <sniprintf>
			RMhours,RMminutes,RMseconds,RMmilisecs);
	lv_label_set_text(RM_Lbl, runModeBuffer);
 8022a1a:	4b10      	ldr	r3, [pc, #64]	; (8022a5c <RunMode_Obj_Init+0x180>)
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	4915      	ldr	r1, [pc, #84]	; (8022a74 <RunMode_Obj_Init+0x198>)
 8022a20:	4618      	mov	r0, r3
 8022a22:	f7f6 fea5 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8022a26:	4b0d      	ldr	r3, [pc, #52]	; (8022a5c <RunMode_Obj_Init+0x180>)
 8022a28:	6818      	ldr	r0, [r3, #0]
 8022a2a:	2328      	movs	r3, #40	; 0x28
 8022a2c:	9300      	str	r3, [sp, #0]
 8022a2e:	2300      	movs	r3, #0
 8022a30:	2200      	movs	r2, #0
 8022a32:	2100      	movs	r1, #0
 8022a34:	f7e3 fc52 	bl	80062dc <lv_obj_align>
}
 8022a38:	bf00      	nop
 8022a3a:	3704      	adds	r7, #4
 8022a3c:	46bd      	mov	sp, r7
 8022a3e:	bd90      	pop	{r4, r7, pc}
 8022a40:	20006c74 	.word	0x20006c74
 8022a44:	20006238 	.word	0x20006238
 8022a48:	20006fbd 	.word	0x20006fbd
 8022a4c:	08029f0c 	.word	0x08029f0c
 8022a50:	200027e8 	.word	0x200027e8
 8022a54:	20006274 	.word	0x20006274
 8022a58:	20006fd4 	.word	0x20006fd4
 8022a5c:	20006f74 	.word	0x20006f74
 8022a60:	20006f71 	.word	0x20006f71
 8022a64:	20006fb8 	.word	0x20006fb8
 8022a68:	20006fc4 	.word	0x20006fc4
 8022a6c:	20007000 	.word	0x20007000
 8022a70:	08029f14 	.word	0x08029f14
 8022a74:	20006f78 	.word	0x20006f78

08022a78 <RunMode_kCals>:
/* This function using for initiation kCAls Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_kCals(bool theme){
 8022a78:	b590      	push	{r4, r7, lr}
 8022a7a:	b087      	sub	sp, #28
 8022a7c:	af02      	add	r7, sp, #8
 8022a7e:	4603      	mov	r3, r0
 8022a80:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022a82:	f7ff fe89 	bl	8022798 <lv_scr_act>
 8022a86:	4603      	mov	r3, r0
 8022a88:	2100      	movs	r1, #0
 8022a8a:	4618      	mov	r0, r3
 8022a8c:	f7f6 f9b2 	bl	8018df4 <lv_img_create>
 8022a90:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 8022a92:	79fb      	ldrb	r3, [r7, #7]
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d004      	beq.n	8022aa2 <RunMode_kCals+0x2a>
 8022a98:	494a      	ldr	r1, [pc, #296]	; (8022bc4 <RunMode_kCals+0x14c>)
 8022a9a:	68f8      	ldr	r0, [r7, #12]
 8022a9c:	f7f6 fa48 	bl	8018f30 <lv_img_set_src>
 8022aa0:	e003      	b.n	8022aaa <RunMode_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 8022aa2:	4949      	ldr	r1, [pc, #292]	; (8022bc8 <RunMode_kCals+0x150>)
 8022aa4:	68f8      	ldr	r0, [r7, #12]
 8022aa6:	f7f6 fa43 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -75, -60);
 8022aaa:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022aae:	9300      	str	r3, [sp, #0]
 8022ab0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022ab4:	2200      	movs	r2, #0
 8022ab6:	2100      	movs	r1, #0
 8022ab8:	68f8      	ldr	r0, [r7, #12]
 8022aba:	f7e3 fc0f 	bl	80062dc <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022abe:	f7ff fe6b 	bl	8022798 <lv_scr_act>
 8022ac2:	4603      	mov	r3, r0
 8022ac4:	2100      	movs	r1, #0
 8022ac6:	4618      	mov	r0, r3
 8022ac8:	f7f6 fd20 	bl	801950c <lv_label_create>
 8022acc:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022ace:	4a3f      	ldr	r2, [pc, #252]	; (8022bcc <RunMode_kCals+0x154>)
 8022ad0:	2100      	movs	r1, #0
 8022ad2:	68b8      	ldr	r0, [r7, #8]
 8022ad4:	f7ff fe6b 	bl	80227ae <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8022ad8:	493d      	ldr	r1, [pc, #244]	; (8022bd0 <RunMode_kCals+0x158>)
 8022ada:	68b8      	ldr	r0, [r7, #8]
 8022adc:	f7f6 fe48 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, -75, 3);
 8022ae0:	2303      	movs	r3, #3
 8022ae2:	9300      	str	r3, [sp, #0]
 8022ae4:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022ae8:	2200      	movs	r2, #0
 8022aea:	2100      	movs	r1, #0
 8022aec:	68b8      	ldr	r0, [r7, #8]
 8022aee:	f7e3 fbf5 	bl	80062dc <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 8022af2:	4938      	ldr	r1, [pc, #224]	; (8022bd4 <RunMode_kCals+0x15c>)
 8022af4:	4838      	ldr	r0, [pc, #224]	; (8022bd8 <RunMode_kCals+0x160>)
 8022af6:	f7e5 fe35 	bl	8008764 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 8022afa:	4c37      	ldr	r4, [pc, #220]	; (8022bd8 <RunMode_kCals+0x160>)
 8022afc:	2269      	movs	r2, #105	; 0x69
 8022afe:	21cd      	movs	r1, #205	; 0xcd
 8022b00:	20ff      	movs	r0, #255	; 0xff
 8022b02:	f7ff fe11 	bl	8022728 <lv_color_make>
 8022b06:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 8022b08:	4b33      	ldr	r3, [pc, #204]	; (8022bd8 <RunMode_kCals+0x160>)
 8022b0a:	2203      	movs	r2, #3
 8022b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 8022b0e:	4c32      	ldr	r4, [pc, #200]	; (8022bd8 <RunMode_kCals+0x160>)
 8022b10:	2269      	movs	r2, #105	; 0x69
 8022b12:	21cd      	movs	r1, #205	; 0xcd
 8022b14:	20ff      	movs	r0, #255	; 0xff
 8022b16:	f7ff fe07 	bl	8022728 <lv_color_make>
 8022b1a:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 8022b1c:	4b2e      	ldr	r3, [pc, #184]	; (8022bd8 <RunMode_kCals+0x160>)
 8022b1e:	4a2f      	ldr	r2, [pc, #188]	; (8022bdc <RunMode_kCals+0x164>)
 8022b20:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 8022b22:	f7ff fe39 	bl	8022798 <lv_scr_act>
 8022b26:	4603      	mov	r3, r0
 8022b28:	2100      	movs	r1, #0
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	f7f1 feec 	bl	8014908 <lv_arc_create>
 8022b30:	4602      	mov	r2, r0
 8022b32:	4b2b      	ldr	r3, [pc, #172]	; (8022be0 <RunMode_kCals+0x168>)
 8022b34:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_kCalsArc, 60, 60);
 8022b36:	4b2a      	ldr	r3, [pc, #168]	; (8022be0 <RunMode_kCals+0x168>)
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	223c      	movs	r2, #60	; 0x3c
 8022b3c:	213c      	movs	r1, #60	; 0x3c
 8022b3e:	4618      	mov	r0, r3
 8022b40:	f7e3 fb29 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(RM_kCalsArc, 0, 360);
 8022b44:	4b26      	ldr	r3, [pc, #152]	; (8022be0 <RunMode_kCals+0x168>)
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022b4c:	2100      	movs	r1, #0
 8022b4e:	4618      	mov	r0, r3
 8022b50:	f7f1 ff56 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(RM_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 8022b54:	4b22      	ldr	r3, [pc, #136]	; (8022be0 <RunMode_kCals+0x168>)
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	4a1f      	ldr	r2, [pc, #124]	; (8022bd8 <RunMode_kCals+0x160>)
 8022b5a:	2100      	movs	r1, #0
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	f7f1 ff78 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(RM_kCalsArc, NULL, LV_ALIGN_CENTER, -75, -60);
 8022b62:	4b1f      	ldr	r3, [pc, #124]	; (8022be0 <RunMode_kCals+0x168>)
 8022b64:	6818      	ldr	r0, [r3, #0]
 8022b66:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022b6a:	9300      	str	r3, [sp, #0]
 8022b6c:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022b70:	2200      	movs	r2, #0
 8022b72:	2100      	movs	r1, #0
 8022b74:	f7e3 fbb2 	bl	80062dc <lv_obj_align>

    RM_kCalsLbl = lv_label_create(lv_scr_act(), NULL);
 8022b78:	f7ff fe0e 	bl	8022798 <lv_scr_act>
 8022b7c:	4603      	mov	r3, r0
 8022b7e:	2100      	movs	r1, #0
 8022b80:	4618      	mov	r0, r3
 8022b82:	f7f6 fcc3 	bl	801950c <lv_label_create>
 8022b86:	4602      	mov	r2, r0
 8022b88:	4b16      	ldr	r3, [pc, #88]	; (8022be4 <RunMode_kCals+0x16c>)
 8022b8a:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_kCalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8022b8c:	4b15      	ldr	r3, [pc, #84]	; (8022be4 <RunMode_kCals+0x16c>)
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	4a11      	ldr	r2, [pc, #68]	; (8022bd8 <RunMode_kCals+0x160>)
 8022b92:	2100      	movs	r1, #0
 8022b94:	4618      	mov	r0, r3
 8022b96:	f7ff fe0a 	bl	80227ae <lv_label_set_style>
   	lv_label_set_text(RM_kCalsLbl, "0000");
 8022b9a:	4b12      	ldr	r3, [pc, #72]	; (8022be4 <RunMode_kCals+0x16c>)
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	4912      	ldr	r1, [pc, #72]	; (8022be8 <RunMode_kCals+0x170>)
 8022ba0:	4618      	mov	r0, r3
 8022ba2:	f7f6 fde5 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 8022ba6:	4b0f      	ldr	r3, [pc, #60]	; (8022be4 <RunMode_kCals+0x16c>)
 8022ba8:	6818      	ldr	r0, [r3, #0]
 8022baa:	f06f 030e 	mvn.w	r3, #14
 8022bae:	9300      	str	r3, [sp, #0]
 8022bb0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	2100      	movs	r1, #0
 8022bb8:	f7e3 fb90 	bl	80062dc <lv_obj_align>

}
 8022bbc:	bf00      	nop
 8022bbe:	3714      	adds	r7, #20
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	bd90      	pop	{r4, r7, pc}
 8022bc4:	08038028 	.word	0x08038028
 8022bc8:	08038964 	.word	0x08038964
 8022bcc:	200061f8 	.word	0x200061f8
 8022bd0:	08029f44 	.word	0x08029f44
 8022bd4:	20006c74 	.word	0x20006c74
 8022bd8:	200062b0 	.word	0x200062b0
 8022bdc:	200027e8 	.word	0x200027e8
 8022be0:	20006ff0 	.word	0x20006ff0
 8022be4:	20006fe4 	.word	0x20006fe4
 8022be8:	08029f4c 	.word	0x08029f4c

08022bec <RunMode_Steps>:
/* This function using for initiation Steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Steps(bool theme){
 8022bec:	b590      	push	{r4, r7, lr}
 8022bee:	b087      	sub	sp, #28
 8022bf0:	af02      	add	r7, sp, #8
 8022bf2:	4603      	mov	r3, r0
 8022bf4:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022bf6:	f7ff fdcf 	bl	8022798 <lv_scr_act>
 8022bfa:	4603      	mov	r3, r0
 8022bfc:	2100      	movs	r1, #0
 8022bfe:	4618      	mov	r0, r3
 8022c00:	f7f6 f8f8 	bl	8018df4 <lv_img_create>
 8022c04:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 8022c06:	79fb      	ldrb	r3, [r7, #7]
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d004      	beq.n	8022c16 <RunMode_Steps+0x2a>
 8022c0c:	4948      	ldr	r1, [pc, #288]	; (8022d30 <RunMode_Steps+0x144>)
 8022c0e:	68f8      	ldr	r0, [r7, #12]
 8022c10:	f7f6 f98e 	bl	8018f30 <lv_img_set_src>
 8022c14:	e003      	b.n	8022c1e <RunMode_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 8022c16:	4947      	ldr	r1, [pc, #284]	; (8022d34 <RunMode_Steps+0x148>)
 8022c18:	68f8      	ldr	r0, [r7, #12]
 8022c1a:	f7f6 f989 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -60);
 8022c1e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022c22:	9300      	str	r3, [sp, #0]
 8022c24:	2300      	movs	r3, #0
 8022c26:	2200      	movs	r2, #0
 8022c28:	2100      	movs	r1, #0
 8022c2a:	68f8      	ldr	r0, [r7, #12]
 8022c2c:	f7e3 fb56 	bl	80062dc <lv_obj_align>

 	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022c30:	f7ff fdb2 	bl	8022798 <lv_scr_act>
 8022c34:	4603      	mov	r3, r0
 8022c36:	2100      	movs	r1, #0
 8022c38:	4618      	mov	r0, r3
 8022c3a:	f7f6 fc67 	bl	801950c <lv_label_create>
 8022c3e:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022c40:	4a3d      	ldr	r2, [pc, #244]	; (8022d38 <RunMode_Steps+0x14c>)
 8022c42:	2100      	movs	r1, #0
 8022c44:	68b8      	ldr	r0, [r7, #8]
 8022c46:	f7ff fdb2 	bl	80227ae <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8022c4a:	493c      	ldr	r1, [pc, #240]	; (8022d3c <RunMode_Steps+0x150>)
 8022c4c:	68b8      	ldr	r0, [r7, #8]
 8022c4e:	f7f6 fd8f 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, 3);
 8022c52:	2303      	movs	r3, #3
 8022c54:	9300      	str	r3, [sp, #0]
 8022c56:	2300      	movs	r3, #0
 8022c58:	2200      	movs	r2, #0
 8022c5a:	2100      	movs	r1, #0
 8022c5c:	68b8      	ldr	r0, [r7, #8]
 8022c5e:	f7e3 fb3d 	bl	80062dc <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 8022c62:	4937      	ldr	r1, [pc, #220]	; (8022d40 <RunMode_Steps+0x154>)
 8022c64:	4837      	ldr	r0, [pc, #220]	; (8022d44 <RunMode_Steps+0x158>)
 8022c66:	f7e5 fd7d 	bl	8008764 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8022c6a:	4c36      	ldr	r4, [pc, #216]	; (8022d44 <RunMode_Steps+0x158>)
 8022c6c:	2235      	movs	r2, #53	; 0x35
 8022c6e:	21cc      	movs	r1, #204	; 0xcc
 8022c70:	2065      	movs	r0, #101	; 0x65
 8022c72:	f7ff fd59 	bl	8022728 <lv_color_make>
 8022c76:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8022c78:	4b32      	ldr	r3, [pc, #200]	; (8022d44 <RunMode_Steps+0x158>)
 8022c7a:	2203      	movs	r2, #3
 8022c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8022c7e:	4c31      	ldr	r4, [pc, #196]	; (8022d44 <RunMode_Steps+0x158>)
 8022c80:	2235      	movs	r2, #53	; 0x35
 8022c82:	21cc      	movs	r1, #204	; 0xcc
 8022c84:	2065      	movs	r0, #101	; 0x65
 8022c86:	f7ff fd4f 	bl	8022728 <lv_color_make>
 8022c8a:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8022c8c:	4b2d      	ldr	r3, [pc, #180]	; (8022d44 <RunMode_Steps+0x158>)
 8022c8e:	4a2e      	ldr	r2, [pc, #184]	; (8022d48 <RunMode_Steps+0x15c>)
 8022c90:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 8022c92:	f7ff fd81 	bl	8022798 <lv_scr_act>
 8022c96:	4603      	mov	r3, r0
 8022c98:	2100      	movs	r1, #0
 8022c9a:	4618      	mov	r0, r3
 8022c9c:	f7f1 fe34 	bl	8014908 <lv_arc_create>
 8022ca0:	4602      	mov	r2, r0
 8022ca2:	4b2a      	ldr	r3, [pc, #168]	; (8022d4c <RunMode_Steps+0x160>)
 8022ca4:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_stepsArc, 60, 60);
 8022ca6:	4b29      	ldr	r3, [pc, #164]	; (8022d4c <RunMode_Steps+0x160>)
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	223c      	movs	r2, #60	; 0x3c
 8022cac:	213c      	movs	r1, #60	; 0x3c
 8022cae:	4618      	mov	r0, r3
 8022cb0:	f7e3 fa71 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(RM_stepsArc, 0, 360);
 8022cb4:	4b25      	ldr	r3, [pc, #148]	; (8022d4c <RunMode_Steps+0x160>)
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022cbc:	2100      	movs	r1, #0
 8022cbe:	4618      	mov	r0, r3
 8022cc0:	f7f1 fe9e 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(RM_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 8022cc4:	4b21      	ldr	r3, [pc, #132]	; (8022d4c <RunMode_Steps+0x160>)
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	4a1e      	ldr	r2, [pc, #120]	; (8022d44 <RunMode_Steps+0x158>)
 8022cca:	2100      	movs	r1, #0
 8022ccc:	4618      	mov	r0, r3
 8022cce:	f7f1 fec0 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(RM_stepsArc, NULL, LV_ALIGN_CENTER, 0, -60);
 8022cd2:	4b1e      	ldr	r3, [pc, #120]	; (8022d4c <RunMode_Steps+0x160>)
 8022cd4:	6818      	ldr	r0, [r3, #0]
 8022cd6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022cda:	9300      	str	r3, [sp, #0]
 8022cdc:	2300      	movs	r3, #0
 8022cde:	2200      	movs	r2, #0
 8022ce0:	2100      	movs	r1, #0
 8022ce2:	f7e3 fafb 	bl	80062dc <lv_obj_align>

    RM_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 8022ce6:	f7ff fd57 	bl	8022798 <lv_scr_act>
 8022cea:	4603      	mov	r3, r0
 8022cec:	2100      	movs	r1, #0
 8022cee:	4618      	mov	r0, r3
 8022cf0:	f7f6 fc0c 	bl	801950c <lv_label_create>
 8022cf4:	4602      	mov	r2, r0
 8022cf6:	4b16      	ldr	r3, [pc, #88]	; (8022d50 <RunMode_Steps+0x164>)
 8022cf8:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 8022cfa:	4b15      	ldr	r3, [pc, #84]	; (8022d50 <RunMode_Steps+0x164>)
 8022cfc:	681b      	ldr	r3, [r3, #0]
 8022cfe:	4a11      	ldr	r2, [pc, #68]	; (8022d44 <RunMode_Steps+0x158>)
 8022d00:	2100      	movs	r1, #0
 8022d02:	4618      	mov	r0, r3
 8022d04:	f7ff fd53 	bl	80227ae <lv_label_set_style>
   	lv_label_set_text(RM_stepsLbl, "00000");
 8022d08:	4b11      	ldr	r3, [pc, #68]	; (8022d50 <RunMode_Steps+0x164>)
 8022d0a:	681b      	ldr	r3, [r3, #0]
 8022d0c:	4911      	ldr	r1, [pc, #68]	; (8022d54 <RunMode_Steps+0x168>)
 8022d0e:	4618      	mov	r0, r3
 8022d10:	f7f6 fd2e 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8022d14:	4b0e      	ldr	r3, [pc, #56]	; (8022d50 <RunMode_Steps+0x164>)
 8022d16:	6818      	ldr	r0, [r3, #0]
 8022d18:	f06f 030e 	mvn.w	r3, #14
 8022d1c:	9300      	str	r3, [sp, #0]
 8022d1e:	2300      	movs	r3, #0
 8022d20:	2200      	movs	r2, #0
 8022d22:	2100      	movs	r1, #0
 8022d24:	f7e3 fada 	bl	80062dc <lv_obj_align>

}
 8022d28:	bf00      	nop
 8022d2a:	3714      	adds	r7, #20
 8022d2c:	46bd      	mov	sp, r7
 8022d2e:	bd90      	pop	{r4, r7, pc}
 8022d30:	0803f368 	.word	0x0803f368
 8022d34:	0803fca4 	.word	0x0803fca4
 8022d38:	200061f8 	.word	0x200061f8
 8022d3c:	08029f44 	.word	0x08029f44
 8022d40:	20006c74 	.word	0x20006c74
 8022d44:	200062ec 	.word	0x200062ec
 8022d48:	200027e8 	.word	0x200027e8
 8022d4c:	20006fe8 	.word	0x20006fe8
 8022d50:	20006fc8 	.word	0x20006fc8
 8022d54:	08029f54 	.word	0x08029f54

08022d58 <RunMode_Distances>:
/* This function using for initiation Distances Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void RunMode_Distances(bool unitType,bool theme){
 8022d58:	b590      	push	{r4, r7, lr}
 8022d5a:	b087      	sub	sp, #28
 8022d5c:	af02      	add	r7, sp, #8
 8022d5e:	4603      	mov	r3, r0
 8022d60:	460a      	mov	r2, r1
 8022d62:	71fb      	strb	r3, [r7, #7]
 8022d64:	4613      	mov	r3, r2
 8022d66:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 8022d68:	f7ff fd16 	bl	8022798 <lv_scr_act>
 8022d6c:	4603      	mov	r3, r0
 8022d6e:	2100      	movs	r1, #0
 8022d70:	4618      	mov	r0, r3
 8022d72:	f7f6 f83f 	bl	8018df4 <lv_img_create>
 8022d76:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 8022d78:	79bb      	ldrb	r3, [r7, #6]
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d004      	beq.n	8022d88 <RunMode_Distances+0x30>
 8022d7e:	494d      	ldr	r1, [pc, #308]	; (8022eb4 <RunMode_Distances+0x15c>)
 8022d80:	68f8      	ldr	r0, [r7, #12]
 8022d82:	f7f6 f8d5 	bl	8018f30 <lv_img_set_src>
 8022d86:	e003      	b.n	8022d90 <RunMode_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 8022d88:	494b      	ldr	r1, [pc, #300]	; (8022eb8 <RunMode_Distances+0x160>)
 8022d8a:	68f8      	ldr	r0, [r7, #12]
 8022d8c:	f7f6 f8d0 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 75, -60);
 8022d90:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022d94:	9300      	str	r3, [sp, #0]
 8022d96:	234b      	movs	r3, #75	; 0x4b
 8022d98:	2200      	movs	r2, #0
 8022d9a:	2100      	movs	r1, #0
 8022d9c:	68f8      	ldr	r0, [r7, #12]
 8022d9e:	f7e3 fa9d 	bl	80062dc <lv_obj_align>

 	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 8022da2:	f7ff fcf9 	bl	8022798 <lv_scr_act>
 8022da6:	4603      	mov	r3, r0
 8022da8:	2100      	movs	r1, #0
 8022daa:	4618      	mov	r0, r3
 8022dac:	f7f6 fbae 	bl	801950c <lv_label_create>
 8022db0:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8022db2:	4a42      	ldr	r2, [pc, #264]	; (8022ebc <RunMode_Distances+0x164>)
 8022db4:	2100      	movs	r1, #0
 8022db6:	68b8      	ldr	r0, [r7, #8]
 8022db8:	f7ff fcf9 	bl	80227ae <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 8022dbc:	79fb      	ldrb	r3, [r7, #7]
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	d004      	beq.n	8022dcc <RunMode_Distances+0x74>
 8022dc2:	493f      	ldr	r1, [pc, #252]	; (8022ec0 <RunMode_Distances+0x168>)
 8022dc4:	68b8      	ldr	r0, [r7, #8]
 8022dc6:	f7f6 fcd3 	bl	8019770 <lv_label_set_text>
 8022dca:	e003      	b.n	8022dd4 <RunMode_Distances+0x7c>
 	else lv_label_set_text(distDescLbl, "miles");
 8022dcc:	493d      	ldr	r1, [pc, #244]	; (8022ec4 <RunMode_Distances+0x16c>)
 8022dce:	68b8      	ldr	r0, [r7, #8]
 8022dd0:	f7f6 fcce 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 75, 3);
 8022dd4:	2303      	movs	r3, #3
 8022dd6:	9300      	str	r3, [sp, #0]
 8022dd8:	234b      	movs	r3, #75	; 0x4b
 8022dda:	2200      	movs	r2, #0
 8022ddc:	2100      	movs	r1, #0
 8022dde:	68b8      	ldr	r0, [r7, #8]
 8022de0:	f7e3 fa7c 	bl	80062dc <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 8022de4:	4938      	ldr	r1, [pc, #224]	; (8022ec8 <RunMode_Distances+0x170>)
 8022de6:	4839      	ldr	r0, [pc, #228]	; (8022ecc <RunMode_Distances+0x174>)
 8022de8:	f7e5 fcbc 	bl	8008764 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8022dec:	4c37      	ldr	r4, [pc, #220]	; (8022ecc <RunMode_Distances+0x174>)
 8022dee:	2220      	movs	r2, #32
 8022df0:	2117      	movs	r1, #23
 8022df2:	20d6      	movs	r0, #214	; 0xd6
 8022df4:	f7ff fc98 	bl	8022728 <lv_color_make>
 8022df8:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8022dfa:	4b34      	ldr	r3, [pc, #208]	; (8022ecc <RunMode_Distances+0x174>)
 8022dfc:	2203      	movs	r2, #3
 8022dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 8022e00:	4c32      	ldr	r4, [pc, #200]	; (8022ecc <RunMode_Distances+0x174>)
 8022e02:	2220      	movs	r2, #32
 8022e04:	2117      	movs	r1, #23
 8022e06:	20d6      	movs	r0, #214	; 0xd6
 8022e08:	f7ff fc8e 	bl	8022728 <lv_color_make>
 8022e0c:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 8022e0e:	4b2f      	ldr	r3, [pc, #188]	; (8022ecc <RunMode_Distances+0x174>)
 8022e10:	4a2f      	ldr	r2, [pc, #188]	; (8022ed0 <RunMode_Distances+0x178>)
 8022e12:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    RM_distArc = lv_arc_create(lv_scr_act(), NULL);
 8022e14:	f7ff fcc0 	bl	8022798 <lv_scr_act>
 8022e18:	4603      	mov	r3, r0
 8022e1a:	2100      	movs	r1, #0
 8022e1c:	4618      	mov	r0, r3
 8022e1e:	f7f1 fd73 	bl	8014908 <lv_arc_create>
 8022e22:	4602      	mov	r2, r0
 8022e24:	4b2b      	ldr	r3, [pc, #172]	; (8022ed4 <RunMode_Distances+0x17c>)
 8022e26:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(RM_distArc, 60, 60);
 8022e28:	4b2a      	ldr	r3, [pc, #168]	; (8022ed4 <RunMode_Distances+0x17c>)
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	223c      	movs	r2, #60	; 0x3c
 8022e2e:	213c      	movs	r1, #60	; 0x3c
 8022e30:	4618      	mov	r0, r3
 8022e32:	f7e3 f9b0 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(RM_distArc, 0, 360);
 8022e36:	4b27      	ldr	r3, [pc, #156]	; (8022ed4 <RunMode_Distances+0x17c>)
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022e3e:	2100      	movs	r1, #0
 8022e40:	4618      	mov	r0, r3
 8022e42:	f7f1 fddd 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(RM_distArc, LV_ARC_STYLE_MAIN, &distance_Style);
 8022e46:	4b23      	ldr	r3, [pc, #140]	; (8022ed4 <RunMode_Distances+0x17c>)
 8022e48:	681b      	ldr	r3, [r3, #0]
 8022e4a:	4a20      	ldr	r2, [pc, #128]	; (8022ecc <RunMode_Distances+0x174>)
 8022e4c:	2100      	movs	r1, #0
 8022e4e:	4618      	mov	r0, r3
 8022e50:	f7f1 fdff 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(RM_distArc, NULL, LV_ALIGN_CENTER, 75, -60);
 8022e54:	4b1f      	ldr	r3, [pc, #124]	; (8022ed4 <RunMode_Distances+0x17c>)
 8022e56:	6818      	ldr	r0, [r3, #0]
 8022e58:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8022e5c:	9300      	str	r3, [sp, #0]
 8022e5e:	234b      	movs	r3, #75	; 0x4b
 8022e60:	2200      	movs	r2, #0
 8022e62:	2100      	movs	r1, #0
 8022e64:	f7e3 fa3a 	bl	80062dc <lv_obj_align>

    RM_distLbl = lv_label_create(lv_scr_act(), NULL);
 8022e68:	f7ff fc96 	bl	8022798 <lv_scr_act>
 8022e6c:	4603      	mov	r3, r0
 8022e6e:	2100      	movs	r1, #0
 8022e70:	4618      	mov	r0, r3
 8022e72:	f7f6 fb4b 	bl	801950c <lv_label_create>
 8022e76:	4602      	mov	r2, r0
 8022e78:	4b17      	ldr	r3, [pc, #92]	; (8022ed8 <RunMode_Distances+0x180>)
 8022e7a:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(RM_distLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 8022e7c:	4b16      	ldr	r3, [pc, #88]	; (8022ed8 <RunMode_Distances+0x180>)
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	4a12      	ldr	r2, [pc, #72]	; (8022ecc <RunMode_Distances+0x174>)
 8022e82:	2100      	movs	r1, #0
 8022e84:	4618      	mov	r0, r3
 8022e86:	f7ff fc92 	bl	80227ae <lv_label_set_style>
   	lv_label_set_text(RM_distLbl, "00.000");
 8022e8a:	4b13      	ldr	r3, [pc, #76]	; (8022ed8 <RunMode_Distances+0x180>)
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	4913      	ldr	r1, [pc, #76]	; (8022edc <RunMode_Distances+0x184>)
 8022e90:	4618      	mov	r0, r3
 8022e92:	f7f6 fc6d 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75, -15);
 8022e96:	4b10      	ldr	r3, [pc, #64]	; (8022ed8 <RunMode_Distances+0x180>)
 8022e98:	6818      	ldr	r0, [r3, #0]
 8022e9a:	f06f 030e 	mvn.w	r3, #14
 8022e9e:	9300      	str	r3, [sp, #0]
 8022ea0:	234b      	movs	r3, #75	; 0x4b
 8022ea2:	2200      	movs	r2, #0
 8022ea4:	2100      	movs	r1, #0
 8022ea6:	f7e3 fa19 	bl	80062dc <lv_obj_align>
}
 8022eaa:	bf00      	nop
 8022eac:	3714      	adds	r7, #20
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	bd90      	pop	{r4, r7, pc}
 8022eb2:	bf00      	nop
 8022eb4:	080392a0 	.word	0x080392a0
 8022eb8:	08039bdc 	.word	0x08039bdc
 8022ebc:	200061f8 	.word	0x200061f8
 8022ec0:	08029f5c 	.word	0x08029f5c
 8022ec4:	08029f60 	.word	0x08029f60
 8022ec8:	20006c74 	.word	0x20006c74
 8022ecc:	20006328 	.word	0x20006328
 8022ed0:	200027e8 	.word	0x200027e8
 8022ed4:	20006ff8 	.word	0x20006ff8
 8022ed8:	20006fc0 	.word	0x20006fc0
 8022edc:	08029f68 	.word	0x08029f68

08022ee0 <RunModeScreen_Updater>:
/*This function using for update all updater functions*/
void RunModeScreen_Updater(lv_task_t *t){
 8022ee0:	b580      	push	{r7, lr}
 8022ee2:	b082      	sub	sp, #8
 8022ee4:	af00      	add	r7, sp, #0
 8022ee6:	6078      	str	r0, [r7, #4]
	if(RM_taskController){
 8022ee8:	4b09      	ldr	r3, [pc, #36]	; (8022f10 <RunModeScreen_Updater+0x30>)
 8022eea:	781b      	ldrb	r3, [r3, #0]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d008      	beq.n	8022f02 <RunModeScreen_Updater+0x22>
		 RunMode_RunMode_Updater();
 8022ef0:	f000 f812 	bl	8022f18 <RunMode_RunMode_Updater>
		 RunMode_steps_angle_loader();
 8022ef4:	f000 f8bc 	bl	8023070 <RunMode_steps_angle_loader>
		 RunMode_kCals_angle_loader();
 8022ef8:	f000 f952 	bl	80231a0 <RunMode_kCals_angle_loader>
		 RunMode_distances_angle_loader();
 8022efc:	f000 f9ec 	bl	80232d8 <RunMode_distances_angle_loader>
	}else lv_task_del(t);
}
 8022f00:	e002      	b.n	8022f08 <RunModeScreen_Updater+0x28>
	}else lv_task_del(t);
 8022f02:	6878      	ldr	r0, [r7, #4]
 8022f04:	f7f0 ffc8 	bl	8013e98 <lv_task_del>
}
 8022f08:	bf00      	nop
 8022f0a:	3708      	adds	r7, #8
 8022f0c:	46bd      	mov	sp, r7
 8022f0e:	bd80      	pop	{r7, pc}
 8022f10:	20006fe0 	.word	0x20006fe0
 8022f14:	00000000 	.word	0x00000000

08022f18 <RunMode_RunMode_Updater>:
/*This function using for update to current label*/
void RunMode_RunMode_Updater(void){
 8022f18:	b5b0      	push	{r4, r5, r7, lr}
 8022f1a:	b086      	sub	sp, #24
 8022f1c:	af04      	add	r7, sp, #16
		if(0==RMtimeSetVal){
 8022f1e:	4b48      	ldr	r3, [pc, #288]	; (8023040 <RunMode_RunMode_Updater+0x128>)
 8022f20:	781b      	ldrb	r3, [r3, #0]
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d17e      	bne.n	8023024 <RunMode_RunMode_Updater+0x10c>
			uint16_t targetValTmp = RMtargetSeconds+(RMtargetMinutes*60)+(RMtargetHours*60*60);
 8022f26:	4b47      	ldr	r3, [pc, #284]	; (8023044 <RunMode_RunMode_Updater+0x12c>)
 8022f28:	781b      	ldrb	r3, [r3, #0]
 8022f2a:	b29a      	uxth	r2, r3
 8022f2c:	4b46      	ldr	r3, [pc, #280]	; (8023048 <RunMode_RunMode_Updater+0x130>)
 8022f2e:	781b      	ldrb	r3, [r3, #0]
 8022f30:	b29b      	uxth	r3, r3
 8022f32:	4619      	mov	r1, r3
 8022f34:	0109      	lsls	r1, r1, #4
 8022f36:	1acb      	subs	r3, r1, r3
 8022f38:	4619      	mov	r1, r3
 8022f3a:	0109      	lsls	r1, r1, #4
 8022f3c:	1acb      	subs	r3, r1, r3
 8022f3e:	011b      	lsls	r3, r3, #4
 8022f40:	b299      	uxth	r1, r3
 8022f42:	4b42      	ldr	r3, [pc, #264]	; (802304c <RunMode_RunMode_Updater+0x134>)
 8022f44:	781b      	ldrb	r3, [r3, #0]
 8022f46:	b29b      	uxth	r3, r3
 8022f48:	4618      	mov	r0, r3
 8022f4a:	0100      	lsls	r0, r0, #4
 8022f4c:	1ac3      	subs	r3, r0, r3
 8022f4e:	009b      	lsls	r3, r3, #2
 8022f50:	b29b      	uxth	r3, r3
 8022f52:	440b      	add	r3, r1
 8022f54:	b29b      	uxth	r3, r3
 8022f56:	4413      	add	r3, r2
 8022f58:	80fb      	strh	r3, [r7, #6]
			uint16_t nowValTmp = RMseconds+(RMminutes*60)+(RMhours*60*60);
 8022f5a:	4b3d      	ldr	r3, [pc, #244]	; (8023050 <RunMode_RunMode_Updater+0x138>)
 8022f5c:	781b      	ldrb	r3, [r3, #0]
 8022f5e:	b29a      	uxth	r2, r3
 8022f60:	4b3c      	ldr	r3, [pc, #240]	; (8023054 <RunMode_RunMode_Updater+0x13c>)
 8022f62:	781b      	ldrb	r3, [r3, #0]
 8022f64:	b29b      	uxth	r3, r3
 8022f66:	4619      	mov	r1, r3
 8022f68:	0109      	lsls	r1, r1, #4
 8022f6a:	1acb      	subs	r3, r1, r3
 8022f6c:	4619      	mov	r1, r3
 8022f6e:	0109      	lsls	r1, r1, #4
 8022f70:	1acb      	subs	r3, r1, r3
 8022f72:	011b      	lsls	r3, r3, #4
 8022f74:	b299      	uxth	r1, r3
 8022f76:	4b38      	ldr	r3, [pc, #224]	; (8023058 <RunMode_RunMode_Updater+0x140>)
 8022f78:	781b      	ldrb	r3, [r3, #0]
 8022f7a:	b29b      	uxth	r3, r3
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	0100      	lsls	r0, r0, #4
 8022f80:	1ac3      	subs	r3, r0, r3
 8022f82:	009b      	lsls	r3, r3, #2
 8022f84:	b29b      	uxth	r3, r3
 8022f86:	440b      	add	r3, r1
 8022f88:	b29b      	uxth	r3, r3
 8022f8a:	4413      	add	r3, r2
 8022f8c:	80bb      	strh	r3, [r7, #4]
			uint8_t targetBarTmp = tos_Ratio(nowValTmp, 0,targetValTmp ,0, 100);
 8022f8e:	88bb      	ldrh	r3, [r7, #4]
 8022f90:	4618      	mov	r0, r3
 8022f92:	f7dd fac7 	bl	8000524 <__aeabi_ui2d>
 8022f96:	4604      	mov	r4, r0
 8022f98:	460d      	mov	r5, r1
 8022f9a:	88fb      	ldrh	r3, [r7, #6]
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	f7dd fac1 	bl	8000524 <__aeabi_ui2d>
 8022fa2:	4602      	mov	r2, r0
 8022fa4:	460b      	mov	r3, r1
 8022fa6:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8023030 <RunMode_RunMode_Updater+0x118>
 8022faa:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8023038 <RunMode_RunMode_Updater+0x120>
 8022fae:	ec43 2b12 	vmov	d2, r2, r3
 8022fb2:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023038 <RunMode_RunMode_Updater+0x120>
 8022fb6:	ec45 4b10 	vmov	d0, r4, r5
 8022fba:	f003 fc73 	bl	80268a4 <tos_Ratio>
 8022fbe:	ec54 3b10 	vmov	r3, r4, d0
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	4621      	mov	r1, r4
 8022fc6:	f7dd fdff 	bl	8000bc8 <__aeabi_d2uiz>
 8022fca:	4603      	mov	r3, r0
 8022fcc:	70fb      	strb	r3, [r7, #3]
		    lv_bar_set_value(RM_targetTimeBar, targetBarTmp, LV_ANIM_OFF);
 8022fce:	4b23      	ldr	r3, [pc, #140]	; (802305c <RunMode_RunMode_Updater+0x144>)
 8022fd0:	681b      	ldr	r3, [r3, #0]
 8022fd2:	78fa      	ldrb	r2, [r7, #3]
 8022fd4:	b211      	sxth	r1, r2
 8022fd6:	2200      	movs	r2, #0
 8022fd8:	4618      	mov	r0, r3
 8022fda:	f7f2 f80b 	bl	8014ff4 <lv_bar_set_value>

		snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8022fde:	4b1d      	ldr	r3, [pc, #116]	; (8023054 <RunMode_RunMode_Updater+0x13c>)
 8022fe0:	781b      	ldrb	r3, [r3, #0]
 8022fe2:	4618      	mov	r0, r3
 8022fe4:	4b1c      	ldr	r3, [pc, #112]	; (8023058 <RunMode_RunMode_Updater+0x140>)
 8022fe6:	781b      	ldrb	r3, [r3, #0]
 8022fe8:	461a      	mov	r2, r3
 8022fea:	4b19      	ldr	r3, [pc, #100]	; (8023050 <RunMode_RunMode_Updater+0x138>)
 8022fec:	781b      	ldrb	r3, [r3, #0]
 8022fee:	4619      	mov	r1, r3
 8022ff0:	4b1b      	ldr	r3, [pc, #108]	; (8023060 <RunMode_RunMode_Updater+0x148>)
 8022ff2:	881b      	ldrh	r3, [r3, #0]
 8022ff4:	9302      	str	r3, [sp, #8]
 8022ff6:	9101      	str	r1, [sp, #4]
 8022ff8:	9200      	str	r2, [sp, #0]
 8022ffa:	4603      	mov	r3, r0
 8022ffc:	4a19      	ldr	r2, [pc, #100]	; (8023064 <RunMode_RunMode_Updater+0x14c>)
 8022ffe:	2140      	movs	r1, #64	; 0x40
 8023000:	4819      	ldr	r0, [pc, #100]	; (8023068 <RunMode_RunMode_Updater+0x150>)
 8023002:	f004 fe37 	bl	8027c74 <sniprintf>
				RMhours,RMminutes,RMseconds,RMmilisecs);
		lv_label_set_text(RM_Lbl, runModeBuffer);
 8023006:	4b19      	ldr	r3, [pc, #100]	; (802306c <RunMode_RunMode_Updater+0x154>)
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	4917      	ldr	r1, [pc, #92]	; (8023068 <RunMode_RunMode_Updater+0x150>)
 802300c:	4618      	mov	r0, r3
 802300e:	f7f6 fbaf 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 8023012:	4b16      	ldr	r3, [pc, #88]	; (802306c <RunMode_RunMode_Updater+0x154>)
 8023014:	6818      	ldr	r0, [r3, #0]
 8023016:	2328      	movs	r3, #40	; 0x28
 8023018:	9300      	str	r3, [sp, #0]
 802301a:	2300      	movs	r3, #0
 802301c:	2200      	movs	r2, #0
 802301e:	2100      	movs	r1, #0
 8023020:	f7e3 f95c 	bl	80062dc <lv_obj_align>
	}
}
 8023024:	bf00      	nop
 8023026:	3708      	adds	r7, #8
 8023028:	46bd      	mov	sp, r7
 802302a:	bdb0      	pop	{r4, r5, r7, pc}
 802302c:	f3af 8000 	nop.w
 8023030:	00000000 	.word	0x00000000
 8023034:	40590000 	.word	0x40590000
	...
 8023040:	20006fbc 	.word	0x20006fbc
 8023044:	20006fec 	.word	0x20006fec
 8023048:	20006fd8 	.word	0x20006fd8
 802304c:	20006fe1 	.word	0x20006fe1
 8023050:	20006fc4 	.word	0x20006fc4
 8023054:	20006f71 	.word	0x20006f71
 8023058:	20006fb8 	.word	0x20006fb8
 802305c:	20006fd4 	.word	0x20006fd4
 8023060:	20007000 	.word	0x20007000
 8023064:	08029f14 	.word	0x08029f14
 8023068:	20006f78 	.word	0x20006f78
 802306c:	20006f74 	.word	0x20006f74

08023070 <RunMode_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void RunMode_steps_angle_loader(void)
{	    snprintf(runModeBuffer,8, "%05d",(RMsteps-RMstepsBeff));
 8023070:	b590      	push	{r4, r7, lr}
 8023072:	b085      	sub	sp, #20
 8023074:	af02      	add	r7, sp, #8
 8023076:	4b42      	ldr	r3, [pc, #264]	; (8023180 <RunMode_steps_angle_loader+0x110>)
 8023078:	881b      	ldrh	r3, [r3, #0]
 802307a:	461a      	mov	r2, r3
 802307c:	4b41      	ldr	r3, [pc, #260]	; (8023184 <RunMode_steps_angle_loader+0x114>)
 802307e:	881b      	ldrh	r3, [r3, #0]
 8023080:	1ad3      	subs	r3, r2, r3
 8023082:	4a41      	ldr	r2, [pc, #260]	; (8023188 <RunMode_steps_angle_loader+0x118>)
 8023084:	2108      	movs	r1, #8
 8023086:	4841      	ldr	r0, [pc, #260]	; (802318c <RunMode_steps_angle_loader+0x11c>)
 8023088:	f004 fdf4 	bl	8027c74 <sniprintf>
 		lv_label_set_text(RM_stepsLbl, runModeBuffer);
 802308c:	4b40      	ldr	r3, [pc, #256]	; (8023190 <RunMode_steps_angle_loader+0x120>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	493e      	ldr	r1, [pc, #248]	; (802318c <RunMode_steps_angle_loader+0x11c>)
 8023092:	4618      	mov	r0, r3
 8023094:	f7f6 fb6c 	bl	8019770 <lv_label_set_text>
 		lv_obj_align(RM_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -15);
 8023098:	4b3d      	ldr	r3, [pc, #244]	; (8023190 <RunMode_steps_angle_loader+0x120>)
 802309a:	6818      	ldr	r0, [r3, #0]
 802309c:	f06f 030e 	mvn.w	r3, #14
 80230a0:	9300      	str	r3, [sp, #0]
 80230a2:	2300      	movs	r3, #0
 80230a4:	2200      	movs	r2, #0
 80230a6:	2100      	movs	r1, #0
 80230a8:	f7e3 f918 	bl	80062dc <lv_obj_align>

 		if((RMsteps-RMstepsBeff)<=10000){
 80230ac:	4b34      	ldr	r3, [pc, #208]	; (8023180 <RunMode_steps_angle_loader+0x110>)
 80230ae:	881b      	ldrh	r3, [r3, #0]
 80230b0:	461a      	mov	r2, r3
 80230b2:	4b34      	ldr	r3, [pc, #208]	; (8023184 <RunMode_steps_angle_loader+0x114>)
 80230b4:	881b      	ldrh	r3, [r3, #0]
 80230b6:	1ad3      	subs	r3, r2, r3
 80230b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80230bc:	4293      	cmp	r3, r2
 80230be:	dc4f      	bgt.n	8023160 <RunMode_steps_angle_loader+0xf0>
 			double stepsTemp = tos_Ratio((RMsteps-RMstepsBeff), 0, 10000, 0, 359);
 80230c0:	4b2f      	ldr	r3, [pc, #188]	; (8023180 <RunMode_steps_angle_loader+0x110>)
 80230c2:	881b      	ldrh	r3, [r3, #0]
 80230c4:	461a      	mov	r2, r3
 80230c6:	4b2f      	ldr	r3, [pc, #188]	; (8023184 <RunMode_steps_angle_loader+0x114>)
 80230c8:	881b      	ldrh	r3, [r3, #0]
 80230ca:	1ad3      	subs	r3, r2, r3
 80230cc:	4618      	mov	r0, r3
 80230ce:	f7dd fa39 	bl	8000544 <__aeabi_i2d>
 80230d2:	4603      	mov	r3, r0
 80230d4:	460c      	mov	r4, r1
 80230d6:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8023168 <RunMode_steps_angle_loader+0xf8>
 80230da:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8023170 <RunMode_steps_angle_loader+0x100>
 80230de:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8023178 <RunMode_steps_angle_loader+0x108>
 80230e2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023170 <RunMode_steps_angle_loader+0x100>
 80230e6:	ec44 3b10 	vmov	d0, r3, r4
 80230ea:	f003 fbdb 	bl	80268a4 <tos_Ratio>
 80230ee:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(RM_stepsArc, 180-stepsTemp ,180);
 80230f2:	f04f 0200 	mov.w	r2, #0
 80230f6:	4b27      	ldr	r3, [pc, #156]	; (8023194 <RunMode_steps_angle_loader+0x124>)
 80230f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80230fc:	f7dd fcfe 	bl	8000afc <__aeabi_dcmplt>
 8023100:	4603      	mov	r3, r0
 8023102:	2b00      	cmp	r3, #0
 8023104:	d016      	beq.n	8023134 <RunMode_steps_angle_loader+0xc4>
 8023106:	4b24      	ldr	r3, [pc, #144]	; (8023198 <RunMode_steps_angle_loader+0x128>)
 8023108:	681c      	ldr	r4, [r3, #0]
 802310a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802310e:	f04f 0000 	mov.w	r0, #0
 8023112:	4920      	ldr	r1, [pc, #128]	; (8023194 <RunMode_steps_angle_loader+0x124>)
 8023114:	f7dd f8c8 	bl	80002a8 <__aeabi_dsub>
 8023118:	4602      	mov	r2, r0
 802311a:	460b      	mov	r3, r1
 802311c:	4610      	mov	r0, r2
 802311e:	4619      	mov	r1, r3
 8023120:	f7dd fd52 	bl	8000bc8 <__aeabi_d2uiz>
 8023124:	4603      	mov	r3, r0
 8023126:	b29b      	uxth	r3, r3
 8023128:	22b4      	movs	r2, #180	; 0xb4
 802312a:	4619      	mov	r1, r3
 802312c:	4620      	mov	r0, r4
 802312e:	f7f1 fc67 	bl	8014a00 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 		}
}
 8023132:	e015      	b.n	8023160 <RunMode_steps_angle_loader+0xf0>
 			    else lv_arc_set_angles(RM_stepsArc, 540-stepsTemp ,180);
 8023134:	4b18      	ldr	r3, [pc, #96]	; (8023198 <RunMode_steps_angle_loader+0x128>)
 8023136:	681c      	ldr	r4, [r3, #0]
 8023138:	e9d7 2300 	ldrd	r2, r3, [r7]
 802313c:	f04f 0000 	mov.w	r0, #0
 8023140:	4916      	ldr	r1, [pc, #88]	; (802319c <RunMode_steps_angle_loader+0x12c>)
 8023142:	f7dd f8b1 	bl	80002a8 <__aeabi_dsub>
 8023146:	4602      	mov	r2, r0
 8023148:	460b      	mov	r3, r1
 802314a:	4610      	mov	r0, r2
 802314c:	4619      	mov	r1, r3
 802314e:	f7dd fd3b 	bl	8000bc8 <__aeabi_d2uiz>
 8023152:	4603      	mov	r3, r0
 8023154:	b29b      	uxth	r3, r3
 8023156:	22b4      	movs	r2, #180	; 0xb4
 8023158:	4619      	mov	r1, r3
 802315a:	4620      	mov	r0, r4
 802315c:	f7f1 fc50 	bl	8014a00 <lv_arc_set_angles>
}
 8023160:	bf00      	nop
 8023162:	370c      	adds	r7, #12
 8023164:	46bd      	mov	sp, r7
 8023166:	bd90      	pop	{r4, r7, pc}
 8023168:	00000000 	.word	0x00000000
 802316c:	40767000 	.word	0x40767000
	...
 802317c:	40c38800 	.word	0x40c38800
 8023180:	20006ffe 	.word	0x20006ffe
 8023184:	20006ff6 	.word	0x20006ff6
 8023188:	08029f70 	.word	0x08029f70
 802318c:	20006f78 	.word	0x20006f78
 8023190:	20006fc8 	.word	0x20006fc8
 8023194:	40668000 	.word	0x40668000
 8023198:	20006fe8 	.word	0x20006fe8
 802319c:	4080e000 	.word	0x4080e000

080231a0 <RunMode_kCals_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_kCals_angle_loader(void)
{ 		snprintf(runModeBuffer,8, "%05d",(RMkCals-RMkCalsBeff));
 80231a0:	b590      	push	{r4, r7, lr}
 80231a2:	b085      	sub	sp, #20
 80231a4:	af02      	add	r7, sp, #8
 80231a6:	4b44      	ldr	r3, [pc, #272]	; (80232b8 <RunMode_kCals_angle_loader+0x118>)
 80231a8:	881b      	ldrh	r3, [r3, #0]
 80231aa:	461a      	mov	r2, r3
 80231ac:	4b43      	ldr	r3, [pc, #268]	; (80232bc <RunMode_kCals_angle_loader+0x11c>)
 80231ae:	881b      	ldrh	r3, [r3, #0]
 80231b0:	1ad3      	subs	r3, r2, r3
 80231b2:	4a43      	ldr	r2, [pc, #268]	; (80232c0 <RunMode_kCals_angle_loader+0x120>)
 80231b4:	2108      	movs	r1, #8
 80231b6:	4843      	ldr	r0, [pc, #268]	; (80232c4 <RunMode_kCals_angle_loader+0x124>)
 80231b8:	f004 fd5c 	bl	8027c74 <sniprintf>
 		lv_label_set_text(RM_kCalsLbl, runModeBuffer);
 80231bc:	4b42      	ldr	r3, [pc, #264]	; (80232c8 <RunMode_kCals_angle_loader+0x128>)
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	4940      	ldr	r1, [pc, #256]	; (80232c4 <RunMode_kCals_angle_loader+0x124>)
 80231c2:	4618      	mov	r0, r3
 80231c4:	f7f6 fad4 	bl	8019770 <lv_label_set_text>
 	   	lv_obj_align(RM_kCalsLbl, NULL, LV_ALIGN_CENTER, -75, -15);
 80231c8:	4b3f      	ldr	r3, [pc, #252]	; (80232c8 <RunMode_kCals_angle_loader+0x128>)
 80231ca:	6818      	ldr	r0, [r3, #0]
 80231cc:	f06f 030e 	mvn.w	r3, #14
 80231d0:	9300      	str	r3, [sp, #0]
 80231d2:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80231d6:	2200      	movs	r2, #0
 80231d8:	2100      	movs	r1, #0
 80231da:	f7e3 f87f 	bl	80062dc <lv_obj_align>

 	   	if((RMkCals-RMkCalsBeff)<=10000){
 80231de:	4b36      	ldr	r3, [pc, #216]	; (80232b8 <RunMode_kCals_angle_loader+0x118>)
 80231e0:	881b      	ldrh	r3, [r3, #0]
 80231e2:	461a      	mov	r2, r3
 80231e4:	4b35      	ldr	r3, [pc, #212]	; (80232bc <RunMode_kCals_angle_loader+0x11c>)
 80231e6:	881b      	ldrh	r3, [r3, #0]
 80231e8:	1ad3      	subs	r3, r2, r3
 80231ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80231ee:	4293      	cmp	r3, r2
 80231f0:	dc4f      	bgt.n	8023292 <RunMode_kCals_angle_loader+0xf2>
 			double kCalsTemp = tos_Ratio((RMkCals-RMkCalsBeff), 0, 10000, 0, 359);
 80231f2:	4b31      	ldr	r3, [pc, #196]	; (80232b8 <RunMode_kCals_angle_loader+0x118>)
 80231f4:	881b      	ldrh	r3, [r3, #0]
 80231f6:	461a      	mov	r2, r3
 80231f8:	4b30      	ldr	r3, [pc, #192]	; (80232bc <RunMode_kCals_angle_loader+0x11c>)
 80231fa:	881b      	ldrh	r3, [r3, #0]
 80231fc:	1ad3      	subs	r3, r2, r3
 80231fe:	4618      	mov	r0, r3
 8023200:	f7dd f9a0 	bl	8000544 <__aeabi_i2d>
 8023204:	4603      	mov	r3, r0
 8023206:	460c      	mov	r4, r1
 8023208:	ed9f 4b25 	vldr	d4, [pc, #148]	; 80232a0 <RunMode_kCals_angle_loader+0x100>
 802320c:	ed9f 3b26 	vldr	d3, [pc, #152]	; 80232a8 <RunMode_kCals_angle_loader+0x108>
 8023210:	ed9f 2b27 	vldr	d2, [pc, #156]	; 80232b0 <RunMode_kCals_angle_loader+0x110>
 8023214:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80232a8 <RunMode_kCals_angle_loader+0x108>
 8023218:	ec44 3b10 	vmov	d0, r3, r4
 802321c:	f003 fb42 	bl	80268a4 <tos_Ratio>
 8023220:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(RM_kCalsArc, 180-kCalsTemp ,180);
 8023224:	f04f 0200 	mov.w	r2, #0
 8023228:	4b28      	ldr	r3, [pc, #160]	; (80232cc <RunMode_kCals_angle_loader+0x12c>)
 802322a:	e9d7 0100 	ldrd	r0, r1, [r7]
 802322e:	f7dd fc65 	bl	8000afc <__aeabi_dcmplt>
 8023232:	4603      	mov	r3, r0
 8023234:	2b00      	cmp	r3, #0
 8023236:	d016      	beq.n	8023266 <RunMode_kCals_angle_loader+0xc6>
 8023238:	4b25      	ldr	r3, [pc, #148]	; (80232d0 <RunMode_kCals_angle_loader+0x130>)
 802323a:	681c      	ldr	r4, [r3, #0]
 802323c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023240:	f04f 0000 	mov.w	r0, #0
 8023244:	4921      	ldr	r1, [pc, #132]	; (80232cc <RunMode_kCals_angle_loader+0x12c>)
 8023246:	f7dd f82f 	bl	80002a8 <__aeabi_dsub>
 802324a:	4602      	mov	r2, r0
 802324c:	460b      	mov	r3, r1
 802324e:	4610      	mov	r0, r2
 8023250:	4619      	mov	r1, r3
 8023252:	f7dd fcb9 	bl	8000bc8 <__aeabi_d2uiz>
 8023256:	4603      	mov	r3, r0
 8023258:	b29b      	uxth	r3, r3
 802325a:	22b4      	movs	r2, #180	; 0xb4
 802325c:	4619      	mov	r1, r3
 802325e:	4620      	mov	r0, r4
 8023260:	f7f1 fbce 	bl	8014a00 <lv_arc_set_angles>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 8023264:	e015      	b.n	8023292 <RunMode_kCals_angle_loader+0xf2>
 			    else lv_arc_set_angles(RM_kCalsArc, 540-kCalsTemp ,180);
 8023266:	4b1a      	ldr	r3, [pc, #104]	; (80232d0 <RunMode_kCals_angle_loader+0x130>)
 8023268:	681c      	ldr	r4, [r3, #0]
 802326a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802326e:	f04f 0000 	mov.w	r0, #0
 8023272:	4918      	ldr	r1, [pc, #96]	; (80232d4 <RunMode_kCals_angle_loader+0x134>)
 8023274:	f7dd f818 	bl	80002a8 <__aeabi_dsub>
 8023278:	4602      	mov	r2, r0
 802327a:	460b      	mov	r3, r1
 802327c:	4610      	mov	r0, r2
 802327e:	4619      	mov	r1, r3
 8023280:	f7dd fca2 	bl	8000bc8 <__aeabi_d2uiz>
 8023284:	4603      	mov	r3, r0
 8023286:	b29b      	uxth	r3, r3
 8023288:	22b4      	movs	r2, #180	; 0xb4
 802328a:	4619      	mov	r1, r3
 802328c:	4620      	mov	r0, r4
 802328e:	f7f1 fbb7 	bl	8014a00 <lv_arc_set_angles>
}
 8023292:	bf00      	nop
 8023294:	370c      	adds	r7, #12
 8023296:	46bd      	mov	sp, r7
 8023298:	bd90      	pop	{r4, r7, pc}
 802329a:	bf00      	nop
 802329c:	f3af 8000 	nop.w
 80232a0:	00000000 	.word	0x00000000
 80232a4:	40767000 	.word	0x40767000
	...
 80232b4:	40c38800 	.word	0x40c38800
 80232b8:	20006fba 	.word	0x20006fba
 80232bc:	20006fd0 	.word	0x20006fd0
 80232c0:	08029f70 	.word	0x08029f70
 80232c4:	20006f78 	.word	0x20006f78
 80232c8:	20006fe4 	.word	0x20006fe4
 80232cc:	40668000 	.word	0x40668000
 80232d0:	20006ff0 	.word	0x20006ff0
 80232d4:	4080e000 	.word	0x4080e000

080232d8 <RunMode_distances_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void RunMode_distances_angle_loader(void){
 80232d8:	b590      	push	{r4, r7, lr}
 80232da:	b089      	sub	sp, #36	; 0x24
 80232dc:	af02      	add	r7, sp, #8
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 80232de:	4b54      	ldr	r3, [pc, #336]	; (8023430 <RunMode_distances_angle_loader+0x158>)
 80232e0:	781a      	ldrb	r2, [r3, #0]
 80232e2:	4b54      	ldr	r3, [pc, #336]	; (8023434 <RunMode_distances_angle_loader+0x15c>)
 80232e4:	881b      	ldrh	r3, [r3, #0]
 80232e6:	4619      	mov	r1, r3
 80232e8:	4610      	mov	r0, r2
 80232ea:	f003 fb59 	bl	80269a0 <tos_distance_Calc>
 80232ee:	eef0 7a40 	vmov.f32	s15, s0
 80232f2:	4b51      	ldr	r3, [pc, #324]	; (8023438 <RunMode_distances_angle_loader+0x160>)
 80232f4:	edc3 7a00 	vstr	s15, [r3]
		float distTmp =RMdistances-RMdistancesBeff;
 80232f8:	4b4f      	ldr	r3, [pc, #316]	; (8023438 <RunMode_distances_angle_loader+0x160>)
 80232fa:	ed93 7a00 	vldr	s14, [r3]
 80232fe:	4b4f      	ldr	r3, [pc, #316]	; (802343c <RunMode_distances_angle_loader+0x164>)
 8023300:	edd3 7a00 	vldr	s15, [r3]
 8023304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023308:	edc7 7a05 	vstr	s15, [r7, #20]
		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 802330c:	edd7 7a05 	vldr	s15, [r7, #20]
 8023310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023314:	ee17 3a90 	vmov	r3, s15
 8023318:	827b      	strh	r3, [r7, #18]
 802331a:	8a7b      	ldrh	r3, [r7, #18]
 802331c:	ee07 3a90 	vmov	s15, r3
 8023320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023324:	ed97 7a05 	vldr	s14, [r7, #20]
 8023328:	ee77 7a67 	vsub.f32	s15, s14, s15
 802332c:	edc7 7a03 	vstr	s15, [r7, #12]
 8023330:	edd7 7a03 	vldr	s15, [r7, #12]
 8023334:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8023440 <RunMode_distances_angle_loader+0x168>
 8023338:	ee67 7a87 	vmul.f32	s15, s15, s14
 802333c:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(runModeBuffer,8, "%02d.%03d",tmp1,(uint16_t)tmp2);
 8023340:	8a7b      	ldrh	r3, [r7, #18]
 8023342:	edd7 7a03 	vldr	s15, [r7, #12]
 8023346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802334a:	ee17 2a90 	vmov	r2, s15
 802334e:	b292      	uxth	r2, r2
 8023350:	9200      	str	r2, [sp, #0]
 8023352:	4a3c      	ldr	r2, [pc, #240]	; (8023444 <RunMode_distances_angle_loader+0x16c>)
 8023354:	2108      	movs	r1, #8
 8023356:	483c      	ldr	r0, [pc, #240]	; (8023448 <RunMode_distances_angle_loader+0x170>)
 8023358:	f004 fc8c 	bl	8027c74 <sniprintf>
	 	lv_label_set_text(RM_distLbl, runModeBuffer);
 802335c:	4b3b      	ldr	r3, [pc, #236]	; (802344c <RunMode_distances_angle_loader+0x174>)
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	4939      	ldr	r1, [pc, #228]	; (8023448 <RunMode_distances_angle_loader+0x170>)
 8023362:	4618      	mov	r0, r3
 8023364:	f7f6 fa04 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(RM_distLbl, NULL, LV_ALIGN_CENTER, 75,-15);
 8023368:	4b38      	ldr	r3, [pc, #224]	; (802344c <RunMode_distances_angle_loader+0x174>)
 802336a:	6818      	ldr	r0, [r3, #0]
 802336c:	f06f 030e 	mvn.w	r3, #14
 8023370:	9300      	str	r3, [sp, #0]
 8023372:	234b      	movs	r3, #75	; 0x4b
 8023374:	2200      	movs	r2, #0
 8023376:	2100      	movs	r1, #0
 8023378:	f7e2 ffb0 	bl	80062dc <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 802337c:	6978      	ldr	r0, [r7, #20]
 802337e:	f7dd f8f3 	bl	8000568 <__aeabi_f2d>
 8023382:	4603      	mov	r3, r0
 8023384:	460c      	mov	r4, r1
 8023386:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8023418 <RunMode_distances_angle_loader+0x140>
 802338a:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8023420 <RunMode_distances_angle_loader+0x148>
 802338e:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8023428 <RunMode_distances_angle_loader+0x150>
 8023392:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023420 <RunMode_distances_angle_loader+0x148>
 8023396:	ec44 3b10 	vmov	d0, r3, r4
 802339a:	f003 fa83 	bl	80268a4 <tos_Ratio>
 802339e:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(RM_distArc, 180-distanceTemp ,180);
 80233a2:	f04f 0200 	mov.w	r2, #0
 80233a6:	4b2a      	ldr	r3, [pc, #168]	; (8023450 <RunMode_distances_angle_loader+0x178>)
 80233a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80233ac:	f7dd fba6 	bl	8000afc <__aeabi_dcmplt>
 80233b0:	4603      	mov	r3, r0
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d016      	beq.n	80233e4 <RunMode_distances_angle_loader+0x10c>
 80233b6:	4b27      	ldr	r3, [pc, #156]	; (8023454 <RunMode_distances_angle_loader+0x17c>)
 80233b8:	681c      	ldr	r4, [r3, #0]
 80233ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80233be:	f04f 0000 	mov.w	r0, #0
 80233c2:	4923      	ldr	r1, [pc, #140]	; (8023450 <RunMode_distances_angle_loader+0x178>)
 80233c4:	f7dc ff70 	bl	80002a8 <__aeabi_dsub>
 80233c8:	4602      	mov	r2, r0
 80233ca:	460b      	mov	r3, r1
 80233cc:	4610      	mov	r0, r2
 80233ce:	4619      	mov	r1, r3
 80233d0:	f7dd fbfa 	bl	8000bc8 <__aeabi_d2uiz>
 80233d4:	4603      	mov	r3, r0
 80233d6:	b29b      	uxth	r3, r3
 80233d8:	22b4      	movs	r2, #180	; 0xb4
 80233da:	4619      	mov	r1, r3
 80233dc:	4620      	mov	r0, r4
 80233de:	f7f1 fb0f 	bl	8014a00 <lv_arc_set_angles>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
}
 80233e2:	e015      	b.n	8023410 <RunMode_distances_angle_loader+0x138>
 			else lv_arc_set_angles(RM_distArc, 540-distanceTemp ,180);
 80233e4:	4b1b      	ldr	r3, [pc, #108]	; (8023454 <RunMode_distances_angle_loader+0x17c>)
 80233e6:	681c      	ldr	r4, [r3, #0]
 80233e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80233ec:	f04f 0000 	mov.w	r0, #0
 80233f0:	4919      	ldr	r1, [pc, #100]	; (8023458 <RunMode_distances_angle_loader+0x180>)
 80233f2:	f7dc ff59 	bl	80002a8 <__aeabi_dsub>
 80233f6:	4602      	mov	r2, r0
 80233f8:	460b      	mov	r3, r1
 80233fa:	4610      	mov	r0, r2
 80233fc:	4619      	mov	r1, r3
 80233fe:	f7dd fbe3 	bl	8000bc8 <__aeabi_d2uiz>
 8023402:	4603      	mov	r3, r0
 8023404:	b29b      	uxth	r3, r3
 8023406:	22b4      	movs	r2, #180	; 0xb4
 8023408:	4619      	mov	r1, r3
 802340a:	4620      	mov	r0, r4
 802340c:	f7f1 faf8 	bl	8014a00 <lv_arc_set_angles>
}
 8023410:	bf00      	nop
 8023412:	371c      	adds	r7, #28
 8023414:	46bd      	mov	sp, r7
 8023416:	bd90      	pop	{r4, r7, pc}
 8023418:	00000000 	.word	0x00000000
 802341c:	40767000 	.word	0x40767000
	...
 802342c:	408f4000 	.word	0x408f4000
 8023430:	20006f70 	.word	0x20006f70
 8023434:	20006ffe 	.word	0x20006ffe
 8023438:	20006fdc 	.word	0x20006fdc
 802343c:	20006fcc 	.word	0x20006fcc
 8023440:	447a0000 	.word	0x447a0000
 8023444:	08029f78 	.word	0x08029f78
 8023448:	20006f78 	.word	0x20006f78
 802344c:	20006fc0 	.word	0x20006fc0
 8023450:	40668000 	.word	0x40668000
 8023454:	20006ff8 	.word	0x20006ff8
 8023458:	4080e000 	.word	0x4080e000

0802345c <RunMode_ButtonController>:
/*This function using for control to buttons*/
void RunMode_ButtonController(void){
 802345c:	b580      	push	{r7, lr}
 802345e:	af00      	add	r7, sp, #0
	if(2==Rm_leftBtnListen){
 8023460:	4b2c      	ldr	r3, [pc, #176]	; (8023514 <RunMode_ButtonController+0xb8>)
 8023462:	781b      	ldrb	r3, [r3, #0]
 8023464:	2b02      	cmp	r3, #2
 8023466:	d101      	bne.n	802346c <RunMode_ButtonController+0x10>
		  //Time Set Open/Close
		  RunMode_RunTimeSetVal();
 8023468:	f000 f8cc 	bl	8023604 <RunMode_RunTimeSetVal>
	  }
	  if(2==Rm_rightBtnListen){
 802346c:	4b2a      	ldr	r3, [pc, #168]	; (8023518 <RunMode_ButtonController+0xbc>)
 802346e:	781b      	ldrb	r3, [r3, #0]
 8023470:	2b02      	cmp	r3, #2
 8023472:	d11c      	bne.n	80234ae <RunMode_ButtonController+0x52>
		  //Clear and stop
		   RMmilisecs=0; RMfirstVAl=true;
 8023474:	4b29      	ldr	r3, [pc, #164]	; (802351c <RunMode_ButtonController+0xc0>)
 8023476:	2200      	movs	r2, #0
 8023478:	801a      	strh	r2, [r3, #0]
 802347a:	4b29      	ldr	r3, [pc, #164]	; (8023520 <RunMode_ButtonController+0xc4>)
 802347c:	2201      	movs	r2, #1
 802347e:	701a      	strb	r2, [r3, #0]
			  RMseconds=0;RMminutes=0;RMhours=0;RMtargetSeconds=0;RMtargetMinutes=0;RMtargetHours=0;
 8023480:	4b28      	ldr	r3, [pc, #160]	; (8023524 <RunMode_ButtonController+0xc8>)
 8023482:	2200      	movs	r2, #0
 8023484:	701a      	strb	r2, [r3, #0]
 8023486:	4b28      	ldr	r3, [pc, #160]	; (8023528 <RunMode_ButtonController+0xcc>)
 8023488:	2200      	movs	r2, #0
 802348a:	701a      	strb	r2, [r3, #0]
 802348c:	4b27      	ldr	r3, [pc, #156]	; (802352c <RunMode_ButtonController+0xd0>)
 802348e:	2200      	movs	r2, #0
 8023490:	701a      	strb	r2, [r3, #0]
 8023492:	4b27      	ldr	r3, [pc, #156]	; (8023530 <RunMode_ButtonController+0xd4>)
 8023494:	2200      	movs	r2, #0
 8023496:	701a      	strb	r2, [r3, #0]
 8023498:	4b26      	ldr	r3, [pc, #152]	; (8023534 <RunMode_ButtonController+0xd8>)
 802349a:	2200      	movs	r2, #0
 802349c:	701a      	strb	r2, [r3, #0]
 802349e:	4b26      	ldr	r3, [pc, #152]	; (8023538 <RunMode_ButtonController+0xdc>)
 80234a0:	2200      	movs	r2, #0
 80234a2:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 80234a4:	4825      	ldr	r0, [pc, #148]	; (802353c <RunMode_ButtonController+0xe0>)
 80234a6:	f7e0 fc0e 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
			  RunMode_RunTimeLblController();
 80234aa:	f000 f907 	bl	80236bc <RunMode_RunTimeLblController>
	  }
	 if(1==Rm_leftBtnListen) {
 80234ae:	4b19      	ldr	r3, [pc, #100]	; (8023514 <RunMode_ButtonController+0xb8>)
 80234b0:	781b      	ldrb	r3, [r3, #0]
 80234b2:	2b01      	cmp	r3, #1
 80234b4:	d101      	bne.n	80234ba <RunMode_ButtonController+0x5e>
			  //Time Set
			  RunMode_RunTimeUpdateVal();
 80234b6:	f000 f8bb 	bl	8023630 <RunMode_RunTimeUpdateVal>
		  }
	 if(1==Rm_rightBtnListen) {
 80234ba:	4b17      	ldr	r3, [pc, #92]	; (8023518 <RunMode_ButtonController+0xbc>)
 80234bc:	781b      	ldrb	r3, [r3, #0]
 80234be:	2b01      	cmp	r3, #1
 80234c0:	d119      	bne.n	80234f6 <RunMode_ButtonController+0x9a>
		  		  //Timer start/stop
		  		  if(0==RMtimeSetVal && !isStartRun){ RunMode_FistValueSet();
 80234c2:	4b1f      	ldr	r3, [pc, #124]	; (8023540 <RunMode_ButtonController+0xe4>)
 80234c4:	781b      	ldrb	r3, [r3, #0]
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d10f      	bne.n	80234ea <RunMode_ButtonController+0x8e>
 80234ca:	4b1e      	ldr	r3, [pc, #120]	; (8023544 <RunMode_ButtonController+0xe8>)
 80234cc:	781b      	ldrb	r3, [r3, #0]
 80234ce:	f083 0301 	eor.w	r3, r3, #1
 80234d2:	b2db      	uxtb	r3, r3
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d008      	beq.n	80234ea <RunMode_ButtonController+0x8e>
 80234d8:	f000 f9cc 	bl	8023874 <RunMode_FistValueSet>
		  			  HAL_TIM_Base_Start_IT(&TOS_RUNMODE_TIMER); isStartRun=true;
 80234dc:	4817      	ldr	r0, [pc, #92]	; (802353c <RunMode_ButtonController+0xe0>)
 80234de:	f7e0 fbce 	bl	8003c7e <HAL_TIM_Base_Start_IT>
 80234e2:	4b18      	ldr	r3, [pc, #96]	; (8023544 <RunMode_ButtonController+0xe8>)
 80234e4:	2201      	movs	r2, #1
 80234e6:	701a      	strb	r2, [r3, #0]
 80234e8:	e005      	b.n	80234f6 <RunMode_ButtonController+0x9a>
		  		  }
		  		  else { isStartRun=false;
 80234ea:	4b16      	ldr	r3, [pc, #88]	; (8023544 <RunMode_ButtonController+0xe8>)
 80234ec:	2200      	movs	r2, #0
 80234ee:	701a      	strb	r2, [r3, #0]
		  			  HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 80234f0:	4812      	ldr	r0, [pc, #72]	; (802353c <RunMode_ButtonController+0xe0>)
 80234f2:	f7e0 fbe8 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
		  		  }
	 }

	 Rm_rightBtnListen=tos_RightButton_Listenner_For_MenuControl();
 80234f6:	f003 f927 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 80234fa:	4603      	mov	r3, r0
 80234fc:	461a      	mov	r2, r3
 80234fe:	4b06      	ldr	r3, [pc, #24]	; (8023518 <RunMode_ButtonController+0xbc>)
 8023500:	701a      	strb	r2, [r3, #0]
	 Rm_leftBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8023502:	f003 f949 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8023506:	4603      	mov	r3, r0
 8023508:	461a      	mov	r2, r3
 802350a:	4b02      	ldr	r3, [pc, #8]	; (8023514 <RunMode_ButtonController+0xb8>)
 802350c:	701a      	strb	r2, [r3, #0]
}
 802350e:	bf00      	nop
 8023510:	bd80      	pop	{r7, pc}
 8023512:	bf00      	nop
 8023514:	20006235 	.word	0x20006235
 8023518:	20006234 	.word	0x20006234
 802351c:	20007000 	.word	0x20007000
 8023520:	20006ffc 	.word	0x20006ffc
 8023524:	20006fc4 	.word	0x20006fc4
 8023528:	20006fb8 	.word	0x20006fb8
 802352c:	20006f71 	.word	0x20006f71
 8023530:	20006fec 	.word	0x20006fec
 8023534:	20006fe1 	.word	0x20006fe1
 8023538:	20006fd8 	.word	0x20006fd8
 802353c:	200069f0 	.word	0x200069f0
 8023540:	20006fbc 	.word	0x20006fbc
 8023544:	20006ff4 	.word	0x20006ff4

08023548 <RunMode_Update_Time>:
/*This function using for update time
 * this function must be called in timer interupt function*/
void RunMode_Update_Time(void){
 8023548:	b580      	push	{r7, lr}
 802354a:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(RM_taskController){
 802354c:	4b24      	ldr	r3, [pc, #144]	; (80235e0 <RunMode_Update_Time+0x98>)
 802354e:	781b      	ldrb	r3, [r3, #0]
 8023550:	2b00      	cmp	r3, #0
 8023552:	d042      	beq.n	80235da <RunMode_Update_Time+0x92>
		if(RMtargetHours==RMhours && RMtargetMinutes ==RMminutes && RMtargetSeconds==RMseconds)
 8023554:	4b23      	ldr	r3, [pc, #140]	; (80235e4 <RunMode_Update_Time+0x9c>)
 8023556:	781a      	ldrb	r2, [r3, #0]
 8023558:	4b23      	ldr	r3, [pc, #140]	; (80235e8 <RunMode_Update_Time+0xa0>)
 802355a:	781b      	ldrb	r3, [r3, #0]
 802355c:	429a      	cmp	r2, r3
 802355e:	d10e      	bne.n	802357e <RunMode_Update_Time+0x36>
 8023560:	4b22      	ldr	r3, [pc, #136]	; (80235ec <RunMode_Update_Time+0xa4>)
 8023562:	781a      	ldrb	r2, [r3, #0]
 8023564:	4b22      	ldr	r3, [pc, #136]	; (80235f0 <RunMode_Update_Time+0xa8>)
 8023566:	781b      	ldrb	r3, [r3, #0]
 8023568:	429a      	cmp	r2, r3
 802356a:	d108      	bne.n	802357e <RunMode_Update_Time+0x36>
 802356c:	4b21      	ldr	r3, [pc, #132]	; (80235f4 <RunMode_Update_Time+0xac>)
 802356e:	781a      	ldrb	r2, [r3, #0]
 8023570:	4b21      	ldr	r3, [pc, #132]	; (80235f8 <RunMode_Update_Time+0xb0>)
 8023572:	781b      	ldrb	r3, [r3, #0]
 8023574:	429a      	cmp	r2, r3
 8023576:	d102      	bne.n	802357e <RunMode_Update_Time+0x36>
		HAL_TIM_Base_Stop_IT(&TOS_RUNMODE_TIMER);
 8023578:	4820      	ldr	r0, [pc, #128]	; (80235fc <RunMode_Update_Time+0xb4>)
 802357a:	f7e0 fba4 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
		RMmilisecs++;
 802357e:	4b20      	ldr	r3, [pc, #128]	; (8023600 <RunMode_Update_Time+0xb8>)
 8023580:	881b      	ldrh	r3, [r3, #0]
 8023582:	3301      	adds	r3, #1
 8023584:	b29a      	uxth	r2, r3
 8023586:	4b1e      	ldr	r3, [pc, #120]	; (8023600 <RunMode_Update_Time+0xb8>)
 8023588:	801a      	strh	r2, [r3, #0]
			if(RMmilisecs==1000){
 802358a:	4b1d      	ldr	r3, [pc, #116]	; (8023600 <RunMode_Update_Time+0xb8>)
 802358c:	881b      	ldrh	r3, [r3, #0]
 802358e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8023592:	d122      	bne.n	80235da <RunMode_Update_Time+0x92>
				RMmilisecs=0;
 8023594:	4b1a      	ldr	r3, [pc, #104]	; (8023600 <RunMode_Update_Time+0xb8>)
 8023596:	2200      	movs	r2, #0
 8023598:	801a      	strh	r2, [r3, #0]
				RMseconds++;
 802359a:	4b17      	ldr	r3, [pc, #92]	; (80235f8 <RunMode_Update_Time+0xb0>)
 802359c:	781b      	ldrb	r3, [r3, #0]
 802359e:	3301      	adds	r3, #1
 80235a0:	b2da      	uxtb	r2, r3
 80235a2:	4b15      	ldr	r3, [pc, #84]	; (80235f8 <RunMode_Update_Time+0xb0>)
 80235a4:	701a      	strb	r2, [r3, #0]
				if(RMseconds==60){
 80235a6:	4b14      	ldr	r3, [pc, #80]	; (80235f8 <RunMode_Update_Time+0xb0>)
 80235a8:	781b      	ldrb	r3, [r3, #0]
 80235aa:	2b3c      	cmp	r3, #60	; 0x3c
 80235ac:	d115      	bne.n	80235da <RunMode_Update_Time+0x92>
					RMseconds=0;
 80235ae:	4b12      	ldr	r3, [pc, #72]	; (80235f8 <RunMode_Update_Time+0xb0>)
 80235b0:	2200      	movs	r2, #0
 80235b2:	701a      	strb	r2, [r3, #0]
					RMminutes++;
 80235b4:	4b0e      	ldr	r3, [pc, #56]	; (80235f0 <RunMode_Update_Time+0xa8>)
 80235b6:	781b      	ldrb	r3, [r3, #0]
 80235b8:	3301      	adds	r3, #1
 80235ba:	b2da      	uxtb	r2, r3
 80235bc:	4b0c      	ldr	r3, [pc, #48]	; (80235f0 <RunMode_Update_Time+0xa8>)
 80235be:	701a      	strb	r2, [r3, #0]
					if(RMminutes==60){
 80235c0:	4b0b      	ldr	r3, [pc, #44]	; (80235f0 <RunMode_Update_Time+0xa8>)
 80235c2:	781b      	ldrb	r3, [r3, #0]
 80235c4:	2b3c      	cmp	r3, #60	; 0x3c
 80235c6:	d108      	bne.n	80235da <RunMode_Update_Time+0x92>
						RMminutes=0;
 80235c8:	4b09      	ldr	r3, [pc, #36]	; (80235f0 <RunMode_Update_Time+0xa8>)
 80235ca:	2200      	movs	r2, #0
 80235cc:	701a      	strb	r2, [r3, #0]
						RMhours++;
 80235ce:	4b06      	ldr	r3, [pc, #24]	; (80235e8 <RunMode_Update_Time+0xa0>)
 80235d0:	781b      	ldrb	r3, [r3, #0]
 80235d2:	3301      	adds	r3, #1
 80235d4:	b2da      	uxtb	r2, r3
 80235d6:	4b04      	ldr	r3, [pc, #16]	; (80235e8 <RunMode_Update_Time+0xa0>)
 80235d8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}

}
 80235da:	bf00      	nop
 80235dc:	bd80      	pop	{r7, pc}
 80235de:	bf00      	nop
 80235e0:	20006fe0 	.word	0x20006fe0
 80235e4:	20006fd8 	.word	0x20006fd8
 80235e8:	20006f71 	.word	0x20006f71
 80235ec:	20006fe1 	.word	0x20006fe1
 80235f0:	20006fb8 	.word	0x20006fb8
 80235f4:	20006fec 	.word	0x20006fec
 80235f8:	20006fc4 	.word	0x20006fc4
 80235fc:	200069f0 	.word	0x200069f0
 8023600:	20007000 	.word	0x20007000

08023604 <RunMode_RunTimeSetVal>:
/*This function using for  control the set target values chouser*/
void RunMode_RunTimeSetVal(void){
 8023604:	b580      	push	{r7, lr}
 8023606:	af00      	add	r7, sp, #0
	RMtimeSetVal++;
 8023608:	4b08      	ldr	r3, [pc, #32]	; (802362c <RunMode_RunTimeSetVal+0x28>)
 802360a:	781b      	ldrb	r3, [r3, #0]
 802360c:	3301      	adds	r3, #1
 802360e:	b2da      	uxtb	r2, r3
 8023610:	4b06      	ldr	r3, [pc, #24]	; (802362c <RunMode_RunTimeSetVal+0x28>)
 8023612:	701a      	strb	r2, [r3, #0]
	if(4==RMtimeSetVal)RMtimeSetVal=0;
 8023614:	4b05      	ldr	r3, [pc, #20]	; (802362c <RunMode_RunTimeSetVal+0x28>)
 8023616:	781b      	ldrb	r3, [r3, #0]
 8023618:	2b04      	cmp	r3, #4
 802361a:	d102      	bne.n	8023622 <RunMode_RunTimeSetVal+0x1e>
 802361c:	4b03      	ldr	r3, [pc, #12]	; (802362c <RunMode_RunTimeSetVal+0x28>)
 802361e:	2200      	movs	r2, #0
 8023620:	701a      	strb	r2, [r3, #0]
	RunMode_RunTimeLblController();
 8023622:	f000 f84b 	bl	80236bc <RunMode_RunTimeLblController>
}
 8023626:	bf00      	nop
 8023628:	bd80      	pop	{r7, pc}
 802362a:	bf00      	nop
 802362c:	20006fbc 	.word	0x20006fbc

08023630 <RunMode_RunTimeUpdateVal>:

/*This function using for  update and plus the target values*/
void RunMode_RunTimeUpdateVal(void){
 8023630:	b580      	push	{r7, lr}
 8023632:	af00      	add	r7, sp, #0
	switch(RMtimeSetVal){
 8023634:	4b1d      	ldr	r3, [pc, #116]	; (80236ac <RunMode_RunTimeUpdateVal+0x7c>)
 8023636:	781b      	ldrb	r3, [r3, #0]
 8023638:	2b02      	cmp	r3, #2
 802363a:	d012      	beq.n	8023662 <RunMode_RunTimeUpdateVal+0x32>
 802363c:	2b03      	cmp	r3, #3
 802363e:	d01e      	beq.n	802367e <RunMode_RunTimeUpdateVal+0x4e>
 8023640:	2b01      	cmp	r3, #1
 8023642:	d000      	beq.n	8023646 <RunMode_RunTimeUpdateVal+0x16>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
	default: break;
 8023644:	e02e      	b.n	80236a4 <RunMode_RunTimeUpdateVal+0x74>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 8023646:	4b1a      	ldr	r3, [pc, #104]	; (80236b0 <RunMode_RunTimeUpdateVal+0x80>)
 8023648:	781b      	ldrb	r3, [r3, #0]
 802364a:	3301      	adds	r3, #1
 802364c:	b2da      	uxtb	r2, r3
 802364e:	4b18      	ldr	r3, [pc, #96]	; (80236b0 <RunMode_RunTimeUpdateVal+0x80>)
 8023650:	701a      	strb	r2, [r3, #0]
 8023652:	4b17      	ldr	r3, [pc, #92]	; (80236b0 <RunMode_RunTimeUpdateVal+0x80>)
 8023654:	781b      	ldrb	r3, [r3, #0]
 8023656:	2b18      	cmp	r3, #24
 8023658:	d11f      	bne.n	802369a <RunMode_RunTimeUpdateVal+0x6a>
 802365a:	4b15      	ldr	r3, [pc, #84]	; (80236b0 <RunMode_RunTimeUpdateVal+0x80>)
 802365c:	2200      	movs	r2, #0
 802365e:	701a      	strb	r2, [r3, #0]
 8023660:	e01b      	b.n	802369a <RunMode_RunTimeUpdateVal+0x6a>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 8023662:	4b14      	ldr	r3, [pc, #80]	; (80236b4 <RunMode_RunTimeUpdateVal+0x84>)
 8023664:	781b      	ldrb	r3, [r3, #0]
 8023666:	3301      	adds	r3, #1
 8023668:	b2da      	uxtb	r2, r3
 802366a:	4b12      	ldr	r3, [pc, #72]	; (80236b4 <RunMode_RunTimeUpdateVal+0x84>)
 802366c:	701a      	strb	r2, [r3, #0]
 802366e:	4b11      	ldr	r3, [pc, #68]	; (80236b4 <RunMode_RunTimeUpdateVal+0x84>)
 8023670:	781b      	ldrb	r3, [r3, #0]
 8023672:	2b3c      	cmp	r3, #60	; 0x3c
 8023674:	d113      	bne.n	802369e <RunMode_RunTimeUpdateVal+0x6e>
 8023676:	4b0f      	ldr	r3, [pc, #60]	; (80236b4 <RunMode_RunTimeUpdateVal+0x84>)
 8023678:	2200      	movs	r2, #0
 802367a:	701a      	strb	r2, [r3, #0]
 802367c:	e00f      	b.n	802369e <RunMode_RunTimeUpdateVal+0x6e>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 802367e:	4b0e      	ldr	r3, [pc, #56]	; (80236b8 <RunMode_RunTimeUpdateVal+0x88>)
 8023680:	781b      	ldrb	r3, [r3, #0]
 8023682:	3301      	adds	r3, #1
 8023684:	b2da      	uxtb	r2, r3
 8023686:	4b0c      	ldr	r3, [pc, #48]	; (80236b8 <RunMode_RunTimeUpdateVal+0x88>)
 8023688:	701a      	strb	r2, [r3, #0]
 802368a:	4b0b      	ldr	r3, [pc, #44]	; (80236b8 <RunMode_RunTimeUpdateVal+0x88>)
 802368c:	781b      	ldrb	r3, [r3, #0]
 802368e:	2b3c      	cmp	r3, #60	; 0x3c
 8023690:	d107      	bne.n	80236a2 <RunMode_RunTimeUpdateVal+0x72>
 8023692:	4b09      	ldr	r3, [pc, #36]	; (80236b8 <RunMode_RunTimeUpdateVal+0x88>)
 8023694:	2200      	movs	r2, #0
 8023696:	701a      	strb	r2, [r3, #0]
 8023698:	e003      	b.n	80236a2 <RunMode_RunTimeUpdateVal+0x72>
	case 1: RMtargetHours++; if(24==RMtargetHours)RMtargetHours=0; break;
 802369a:	bf00      	nop
 802369c:	e002      	b.n	80236a4 <RunMode_RunTimeUpdateVal+0x74>
	case 2: RMtargetMinutes++; if(60==RMtargetMinutes)RMtargetMinutes=0; break;
 802369e:	bf00      	nop
 80236a0:	e000      	b.n	80236a4 <RunMode_RunTimeUpdateVal+0x74>
	case 3: RMtargetSeconds++; if(60==RMtargetSeconds)RMtargetSeconds=0; break;
 80236a2:	bf00      	nop
	}
	RunMode_RunTimeLblController();
 80236a4:	f000 f80a 	bl	80236bc <RunMode_RunTimeLblController>
}
 80236a8:	bf00      	nop
 80236aa:	bd80      	pop	{r7, pc}
 80236ac:	20006fbc 	.word	0x20006fbc
 80236b0:	20006fd8 	.word	0x20006fd8
 80236b4:	20006fe1 	.word	0x20006fe1
 80236b8:	20006fec 	.word	0x20006fec

080236bc <RunMode_RunTimeLblController>:

/*This function using for update set time label*/
void RunMode_RunTimeLblController(void){
 80236bc:	b580      	push	{r7, lr}
 80236be:	b084      	sub	sp, #16
 80236c0:	af04      	add	r7, sp, #16
	switch(RMtimeSetVal){
 80236c2:	4b5d      	ldr	r3, [pc, #372]	; (8023838 <RunMode_RunTimeLblController+0x17c>)
 80236c4:	781b      	ldrb	r3, [r3, #0]
 80236c6:	2b02      	cmp	r3, #2
 80236c8:	d032      	beq.n	8023730 <RunMode_RunTimeLblController+0x74>
 80236ca:	2b03      	cmp	r3, #3
 80236cc:	d05e      	beq.n	802378c <RunMode_RunTimeLblController+0xd0>
 80236ce:	2b01      	cmp	r3, #1
 80236d0:	f040 808a 	bne.w	80237e8 <RunMode_RunTimeLblController+0x12c>
	case 1:
			if(RM_theme)
 80236d4:	4b59      	ldr	r3, [pc, #356]	; (802383c <RunMode_RunTimeLblController+0x180>)
 80236d6:	781b      	ldrb	r3, [r3, #0]
 80236d8:	2b00      	cmp	r3, #0
 80236da:	d014      	beq.n	8023706 <RunMode_RunTimeLblController+0x4a>
				 snprintf(runModeBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80236dc:	4b58      	ldr	r3, [pc, #352]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 80236de:	781b      	ldrb	r3, [r3, #0]
 80236e0:	4618      	mov	r0, r3
 80236e2:	4b58      	ldr	r3, [pc, #352]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 80236e4:	781b      	ldrb	r3, [r3, #0]
 80236e6:	461a      	mov	r2, r3
 80236e8:	4b57      	ldr	r3, [pc, #348]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 80236ea:	781b      	ldrb	r3, [r3, #0]
 80236ec:	4619      	mov	r1, r3
 80236ee:	4b57      	ldr	r3, [pc, #348]	; (802384c <RunMode_RunTimeLblController+0x190>)
 80236f0:	881b      	ldrh	r3, [r3, #0]
 80236f2:	9302      	str	r3, [sp, #8]
 80236f4:	9101      	str	r1, [sp, #4]
 80236f6:	9200      	str	r2, [sp, #0]
 80236f8:	4603      	mov	r3, r0
 80236fa:	4a55      	ldr	r2, [pc, #340]	; (8023850 <RunMode_RunTimeLblController+0x194>)
 80236fc:	2140      	movs	r1, #64	; 0x40
 80236fe:	4855      	ldr	r0, [pc, #340]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 8023700:	f004 fab8 	bl	8027c74 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8023704:	e085      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8023706:	4b4e      	ldr	r3, [pc, #312]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 8023708:	781b      	ldrb	r3, [r3, #0]
 802370a:	4618      	mov	r0, r3
 802370c:	4b4d      	ldr	r3, [pc, #308]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 802370e:	781b      	ldrb	r3, [r3, #0]
 8023710:	461a      	mov	r2, r3
 8023712:	4b4d      	ldr	r3, [pc, #308]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 8023714:	781b      	ldrb	r3, [r3, #0]
 8023716:	4619      	mov	r1, r3
 8023718:	4b4c      	ldr	r3, [pc, #304]	; (802384c <RunMode_RunTimeLblController+0x190>)
 802371a:	881b      	ldrh	r3, [r3, #0]
 802371c:	9302      	str	r3, [sp, #8]
 802371e:	9101      	str	r1, [sp, #4]
 8023720:	9200      	str	r2, [sp, #0]
 8023722:	4603      	mov	r3, r0
 8023724:	4a4c      	ldr	r2, [pc, #304]	; (8023858 <RunMode_RunTimeLblController+0x19c>)
 8023726:	2140      	movs	r1, #64	; 0x40
 8023728:	484a      	ldr	r0, [pc, #296]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 802372a:	f004 faa3 	bl	8027c74 <sniprintf>
		break;
 802372e:	e070      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
	case 2:
			if(RM_theme)
 8023730:	4b42      	ldr	r3, [pc, #264]	; (802383c <RunMode_RunTimeLblController+0x180>)
 8023732:	781b      	ldrb	r3, [r3, #0]
 8023734:	2b00      	cmp	r3, #0
 8023736:	d014      	beq.n	8023762 <RunMode_RunTimeLblController+0xa6>
				 snprintf(runModeBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#.%03d",
 8023738:	4b41      	ldr	r3, [pc, #260]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 802373a:	781b      	ldrb	r3, [r3, #0]
 802373c:	4618      	mov	r0, r3
 802373e:	4b41      	ldr	r3, [pc, #260]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 8023740:	781b      	ldrb	r3, [r3, #0]
 8023742:	461a      	mov	r2, r3
 8023744:	4b40      	ldr	r3, [pc, #256]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 8023746:	781b      	ldrb	r3, [r3, #0]
 8023748:	4619      	mov	r1, r3
 802374a:	4b40      	ldr	r3, [pc, #256]	; (802384c <RunMode_RunTimeLblController+0x190>)
 802374c:	881b      	ldrh	r3, [r3, #0]
 802374e:	9302      	str	r3, [sp, #8]
 8023750:	9101      	str	r1, [sp, #4]
 8023752:	9200      	str	r2, [sp, #0]
 8023754:	4603      	mov	r3, r0
 8023756:	4a41      	ldr	r2, [pc, #260]	; (802385c <RunMode_RunTimeLblController+0x1a0>)
 8023758:	2140      	movs	r1, #64	; 0x40
 802375a:	483e      	ldr	r0, [pc, #248]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 802375c:	f004 fa8a 	bl	8027c74 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 8023760:	e057      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
			else snprintf(runModeBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#.%03d",
 8023762:	4b37      	ldr	r3, [pc, #220]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 8023764:	781b      	ldrb	r3, [r3, #0]
 8023766:	4618      	mov	r0, r3
 8023768:	4b36      	ldr	r3, [pc, #216]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 802376a:	781b      	ldrb	r3, [r3, #0]
 802376c:	461a      	mov	r2, r3
 802376e:	4b36      	ldr	r3, [pc, #216]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 8023770:	781b      	ldrb	r3, [r3, #0]
 8023772:	4619      	mov	r1, r3
 8023774:	4b35      	ldr	r3, [pc, #212]	; (802384c <RunMode_RunTimeLblController+0x190>)
 8023776:	881b      	ldrh	r3, [r3, #0]
 8023778:	9302      	str	r3, [sp, #8]
 802377a:	9101      	str	r1, [sp, #4]
 802377c:	9200      	str	r2, [sp, #0]
 802377e:	4603      	mov	r3, r0
 8023780:	4a37      	ldr	r2, [pc, #220]	; (8023860 <RunMode_RunTimeLblController+0x1a4>)
 8023782:	2140      	movs	r1, #64	; 0x40
 8023784:	4833      	ldr	r0, [pc, #204]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 8023786:	f004 fa75 	bl	8027c74 <sniprintf>
		break;
 802378a:	e042      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
	case 3:
		if(RM_theme)
 802378c:	4b2b      	ldr	r3, [pc, #172]	; (802383c <RunMode_RunTimeLblController+0x180>)
 802378e:	781b      	ldrb	r3, [r3, #0]
 8023790:	2b00      	cmp	r3, #0
 8023792:	d014      	beq.n	80237be <RunMode_RunTimeLblController+0x102>
			 snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#.%03d",
 8023794:	4b2a      	ldr	r3, [pc, #168]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 8023796:	781b      	ldrb	r3, [r3, #0]
 8023798:	4618      	mov	r0, r3
 802379a:	4b2a      	ldr	r3, [pc, #168]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 802379c:	781b      	ldrb	r3, [r3, #0]
 802379e:	461a      	mov	r2, r3
 80237a0:	4b29      	ldr	r3, [pc, #164]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 80237a2:	781b      	ldrb	r3, [r3, #0]
 80237a4:	4619      	mov	r1, r3
 80237a6:	4b29      	ldr	r3, [pc, #164]	; (802384c <RunMode_RunTimeLblController+0x190>)
 80237a8:	881b      	ldrh	r3, [r3, #0]
 80237aa:	9302      	str	r3, [sp, #8]
 80237ac:	9101      	str	r1, [sp, #4]
 80237ae:	9200      	str	r2, [sp, #0]
 80237b0:	4603      	mov	r3, r0
 80237b2:	4a2c      	ldr	r2, [pc, #176]	; (8023864 <RunMode_RunTimeLblController+0x1a8>)
 80237b4:	2140      	movs	r1, #64	; 0x40
 80237b6:	4827      	ldr	r0, [pc, #156]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 80237b8:	f004 fa5c 	bl	8027c74 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs);
		break;
 80237bc:	e029      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
		else snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#.%03d",
 80237be:	4b20      	ldr	r3, [pc, #128]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 80237c0:	781b      	ldrb	r3, [r3, #0]
 80237c2:	4618      	mov	r0, r3
 80237c4:	4b1f      	ldr	r3, [pc, #124]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 80237c6:	781b      	ldrb	r3, [r3, #0]
 80237c8:	461a      	mov	r2, r3
 80237ca:	4b1f      	ldr	r3, [pc, #124]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 80237cc:	781b      	ldrb	r3, [r3, #0]
 80237ce:	4619      	mov	r1, r3
 80237d0:	4b1e      	ldr	r3, [pc, #120]	; (802384c <RunMode_RunTimeLblController+0x190>)
 80237d2:	881b      	ldrh	r3, [r3, #0]
 80237d4:	9302      	str	r3, [sp, #8]
 80237d6:	9101      	str	r1, [sp, #4]
 80237d8:	9200      	str	r2, [sp, #0]
 80237da:	4603      	mov	r3, r0
 80237dc:	4a22      	ldr	r2, [pc, #136]	; (8023868 <RunMode_RunTimeLblController+0x1ac>)
 80237de:	2140      	movs	r1, #64	; 0x40
 80237e0:	481c      	ldr	r0, [pc, #112]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 80237e2:	f004 fa47 	bl	8027c74 <sniprintf>
		break;
 80237e6:	e014      	b.n	8023812 <RunMode_RunTimeLblController+0x156>
	default: snprintf(runModeBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 80237e8:	4b15      	ldr	r3, [pc, #84]	; (8023840 <RunMode_RunTimeLblController+0x184>)
 80237ea:	781b      	ldrb	r3, [r3, #0]
 80237ec:	4618      	mov	r0, r3
 80237ee:	4b15      	ldr	r3, [pc, #84]	; (8023844 <RunMode_RunTimeLblController+0x188>)
 80237f0:	781b      	ldrb	r3, [r3, #0]
 80237f2:	461a      	mov	r2, r3
 80237f4:	4b14      	ldr	r3, [pc, #80]	; (8023848 <RunMode_RunTimeLblController+0x18c>)
 80237f6:	781b      	ldrb	r3, [r3, #0]
 80237f8:	4619      	mov	r1, r3
 80237fa:	4b14      	ldr	r3, [pc, #80]	; (802384c <RunMode_RunTimeLblController+0x190>)
 80237fc:	881b      	ldrh	r3, [r3, #0]
 80237fe:	9302      	str	r3, [sp, #8]
 8023800:	9101      	str	r1, [sp, #4]
 8023802:	9200      	str	r2, [sp, #0]
 8023804:	4603      	mov	r3, r0
 8023806:	4a19      	ldr	r2, [pc, #100]	; (802386c <RunMode_RunTimeLblController+0x1b0>)
 8023808:	2140      	movs	r1, #64	; 0x40
 802380a:	4812      	ldr	r0, [pc, #72]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 802380c:	f004 fa32 	bl	8027c74 <sniprintf>
					RMtargetHours,RMtargetMinutes,RMtargetSeconds,RMmilisecs); break;
 8023810:	bf00      	nop
	}
	lv_label_set_text(RM_Lbl, runModeBuffer);
 8023812:	4b17      	ldr	r3, [pc, #92]	; (8023870 <RunMode_RunTimeLblController+0x1b4>)
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	490f      	ldr	r1, [pc, #60]	; (8023854 <RunMode_RunTimeLblController+0x198>)
 8023818:	4618      	mov	r0, r3
 802381a:	f7f5 ffa9 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(RM_Lbl, NULL, LV_ALIGN_CENTER, 0, 40);
 802381e:	4b14      	ldr	r3, [pc, #80]	; (8023870 <RunMode_RunTimeLblController+0x1b4>)
 8023820:	6818      	ldr	r0, [r3, #0]
 8023822:	2328      	movs	r3, #40	; 0x28
 8023824:	9300      	str	r3, [sp, #0]
 8023826:	2300      	movs	r3, #0
 8023828:	2200      	movs	r2, #0
 802382a:	2100      	movs	r1, #0
 802382c:	f7e2 fd56 	bl	80062dc <lv_obj_align>

}
 8023830:	bf00      	nop
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}
 8023836:	bf00      	nop
 8023838:	20006fbc 	.word	0x20006fbc
 802383c:	20006fbd 	.word	0x20006fbd
 8023840:	20006fd8 	.word	0x20006fd8
 8023844:	20006fe1 	.word	0x20006fe1
 8023848:	20006fec 	.word	0x20006fec
 802384c:	20007000 	.word	0x20007000
 8023850:	08029f84 	.word	0x08029f84
 8023854:	20006f78 	.word	0x20006f78
 8023858:	08029fb4 	.word	0x08029fb4
 802385c:	08029fe4 	.word	0x08029fe4
 8023860:	0802a014 	.word	0x0802a014
 8023864:	0802a044 	.word	0x0802a044
 8023868:	0802a074 	.word	0x0802a074
 802386c:	08029f14 	.word	0x08029f14
 8023870:	20006f74 	.word	0x20006f74

08023874 <RunMode_FistValueSet>:
//Setter Getter Functions
void RunMode_FistValueSet(void){
 8023874:	b580      	push	{r7, lr}
 8023876:	af00      	add	r7, sp, #0
	if(RMfirstVAl){
 8023878:	4b10      	ldr	r3, [pc, #64]	; (80238bc <RunMode_FistValueSet+0x48>)
 802387a:	781b      	ldrb	r3, [r3, #0]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d01b      	beq.n	80238b8 <RunMode_FistValueSet+0x44>
		RMstepsBeff=RMsteps;
 8023880:	4b0f      	ldr	r3, [pc, #60]	; (80238c0 <RunMode_FistValueSet+0x4c>)
 8023882:	881a      	ldrh	r2, [r3, #0]
 8023884:	4b0f      	ldr	r3, [pc, #60]	; (80238c4 <RunMode_FistValueSet+0x50>)
 8023886:	801a      	strh	r2, [r3, #0]
		RMkCalsBeff=RMkCals;
 8023888:	4b0f      	ldr	r3, [pc, #60]	; (80238c8 <RunMode_FistValueSet+0x54>)
 802388a:	881a      	ldrh	r2, [r3, #0]
 802388c:	4b0f      	ldr	r3, [pc, #60]	; (80238cc <RunMode_FistValueSet+0x58>)
 802388e:	801a      	strh	r2, [r3, #0]
		RMdistances=(float)tos_distance_Calc(RM_unitType,RMsteps);
 8023890:	4b0f      	ldr	r3, [pc, #60]	; (80238d0 <RunMode_FistValueSet+0x5c>)
 8023892:	781a      	ldrb	r2, [r3, #0]
 8023894:	4b0a      	ldr	r3, [pc, #40]	; (80238c0 <RunMode_FistValueSet+0x4c>)
 8023896:	881b      	ldrh	r3, [r3, #0]
 8023898:	4619      	mov	r1, r3
 802389a:	4610      	mov	r0, r2
 802389c:	f003 f880 	bl	80269a0 <tos_distance_Calc>
 80238a0:	eef0 7a40 	vmov.f32	s15, s0
 80238a4:	4b0b      	ldr	r3, [pc, #44]	; (80238d4 <RunMode_FistValueSet+0x60>)
 80238a6:	edc3 7a00 	vstr	s15, [r3]
		RMdistancesBeff=RMdistances;
 80238aa:	4b0a      	ldr	r3, [pc, #40]	; (80238d4 <RunMode_FistValueSet+0x60>)
 80238ac:	681b      	ldr	r3, [r3, #0]
 80238ae:	4a0a      	ldr	r2, [pc, #40]	; (80238d8 <RunMode_FistValueSet+0x64>)
 80238b0:	6013      	str	r3, [r2, #0]
		RMfirstVAl=false;
 80238b2:	4b02      	ldr	r3, [pc, #8]	; (80238bc <RunMode_FistValueSet+0x48>)
 80238b4:	2200      	movs	r2, #0
 80238b6:	701a      	strb	r2, [r3, #0]
	}

}
 80238b8:	bf00      	nop
 80238ba:	bd80      	pop	{r7, pc}
 80238bc:	20006ffc 	.word	0x20006ffc
 80238c0:	20006ffe 	.word	0x20006ffe
 80238c4:	20006ff6 	.word	0x20006ff6
 80238c8:	20006fba 	.word	0x20006fba
 80238cc:	20006fd0 	.word	0x20006fd0
 80238d0:	20006f70 	.word	0x20006f70
 80238d4:	20006fdc 	.word	0x20006fdc
 80238d8:	20006fcc 	.word	0x20006fcc

080238dc <RunMode_TaskControllerSet>:
void RunMode_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	RMsteps =getSteps;
	RMkCals =getKcals;
}
void RunMode_TaskControllerSet(bool active){
 80238dc:	b480      	push	{r7}
 80238de:	b083      	sub	sp, #12
 80238e0:	af00      	add	r7, sp, #0
 80238e2:	4603      	mov	r3, r0
 80238e4:	71fb      	strb	r3, [r7, #7]
	RM_taskController = active;
 80238e6:	4a04      	ldr	r2, [pc, #16]	; (80238f8 <RunMode_TaskControllerSet+0x1c>)
 80238e8:	79fb      	ldrb	r3, [r7, #7]
 80238ea:	7013      	strb	r3, [r2, #0]
}
 80238ec:	bf00      	nop
 80238ee:	370c      	adds	r7, #12
 80238f0:	46bd      	mov	sp, r7
 80238f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238f6:	4770      	bx	lr
 80238f8:	20006fe0 	.word	0x20006fe0

080238fc <RunMode_TaskControllerGet>:
bool RunMode_TaskControllerGet(void){
 80238fc:	b480      	push	{r7}
 80238fe:	af00      	add	r7, sp, #0
	return RM_taskController;
 8023900:	4b03      	ldr	r3, [pc, #12]	; (8023910 <RunMode_TaskControllerGet+0x14>)
 8023902:	781b      	ldrb	r3, [r3, #0]
}
 8023904:	4618      	mov	r0, r3
 8023906:	46bd      	mov	sp, r7
 8023908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390c:	4770      	bx	lr
 802390e:	bf00      	nop
 8023910:	20006fe0 	.word	0x20006fe0

08023914 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8023914:	b480      	push	{r7}
 8023916:	b085      	sub	sp, #20
 8023918:	af00      	add	r7, sp, #0
 802391a:	4603      	mov	r3, r0
 802391c:	71fb      	strb	r3, [r7, #7]
 802391e:	460b      	mov	r3, r1
 8023920:	71bb      	strb	r3, [r7, #6]
 8023922:	4613      	mov	r3, r2
 8023924:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8023926:	79bb      	ldrb	r3, [r7, #6]
 8023928:	095b      	lsrs	r3, r3, #5
 802392a:	b2db      	uxtb	r3, r3
 802392c:	f003 0307 	and.w	r3, r3, #7
 8023930:	b2da      	uxtb	r2, r3
 8023932:	7b3b      	ldrb	r3, [r7, #12]
 8023934:	f362 0302 	bfi	r3, r2, #0, #3
 8023938:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802393a:	79fb      	ldrb	r3, [r7, #7]
 802393c:	08db      	lsrs	r3, r3, #3
 802393e:	b2db      	uxtb	r3, r3
 8023940:	f003 031f 	and.w	r3, r3, #31
 8023944:	b2da      	uxtb	r2, r3
 8023946:	7b3b      	ldrb	r3, [r7, #12]
 8023948:	f362 03c7 	bfi	r3, r2, #3, #5
 802394c:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802394e:	797b      	ldrb	r3, [r7, #5]
 8023950:	08db      	lsrs	r3, r3, #3
 8023952:	b2db      	uxtb	r3, r3
 8023954:	f003 031f 	and.w	r3, r3, #31
 8023958:	b2da      	uxtb	r2, r3
 802395a:	7b7b      	ldrb	r3, [r7, #13]
 802395c:	f362 0304 	bfi	r3, r2, #0, #5
 8023960:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8023962:	79bb      	ldrb	r3, [r7, #6]
 8023964:	089b      	lsrs	r3, r3, #2
 8023966:	b2db      	uxtb	r3, r3
 8023968:	f003 0307 	and.w	r3, r3, #7
 802396c:	b2da      	uxtb	r2, r3
 802396e:	7b7b      	ldrb	r3, [r7, #13]
 8023970:	f362 1347 	bfi	r3, r2, #5, #3
 8023974:	737b      	strb	r3, [r7, #13]
    return color;
 8023976:	89bb      	ldrh	r3, [r7, #12]
}
 8023978:	4618      	mov	r0, r3
 802397a:	3714      	adds	r7, #20
 802397c:	46bd      	mov	sp, r7
 802397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023982:	4770      	bx	lr

08023984 <lv_color_hex>:
    return color;
}
#endif

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8023984:	b580      	push	{r7, lr}
 8023986:	b082      	sub	sp, #8
 8023988:	af00      	add	r7, sp, #0
 802398a:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	0c1b      	lsrs	r3, r3, #16
 8023990:	b2d8      	uxtb	r0, r3
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	0a1b      	lsrs	r3, r3, #8
 8023996:	b2db      	uxtb	r3, r3
 8023998:	687a      	ldr	r2, [r7, #4]
 802399a:	b2d2      	uxtb	r2, r2
 802399c:	4619      	mov	r1, r3
 802399e:	f7ff ffb9 	bl	8023914 <lv_color_make>
 80239a2:	4603      	mov	r3, r0
}
 80239a4:	4618      	mov	r0, r3
 80239a6:	3708      	adds	r7, #8
 80239a8:	46bd      	mov	sp, r7
 80239aa:	bd80      	pop	{r7, pc}

080239ac <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80239ac:	b580      	push	{r7, lr}
 80239ae:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80239b0:	f7ee fdf6 	bl	80125a0 <lv_disp_get_default>
 80239b4:	4603      	mov	r3, r0
 80239b6:	4618      	mov	r0, r3
 80239b8:	f7e1 fabe 	bl	8004f38 <lv_disp_get_scr_act>
 80239bc:	4603      	mov	r3, r0
}
 80239be:	4618      	mov	r0, r3
 80239c0:	bd80      	pop	{r7, pc}

080239c2 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80239c2:	b580      	push	{r7, lr}
 80239c4:	b084      	sub	sp, #16
 80239c6:	af00      	add	r7, sp, #0
 80239c8:	60f8      	str	r0, [r7, #12]
 80239ca:	460b      	mov	r3, r1
 80239cc:	607a      	str	r2, [r7, #4]
 80239ce:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80239d0:	6879      	ldr	r1, [r7, #4]
 80239d2:	68f8      	ldr	r0, [r7, #12]
 80239d4:	f7e3 f927 	bl	8006c26 <lv_obj_set_style>
}
 80239d8:	bf00      	nop
 80239da:	3710      	adds	r7, #16
 80239dc:	46bd      	mov	sp, r7
 80239de:	bd80      	pop	{r7, pc}

080239e0 <tos_SettingsScreen_Init>:
void SettingsScreen_UnitUpdateVal(bool val);


void SettingsScreen_SetNewValues(void);

void tos_SettingsScreen_Init(bool theme,RTC_HandleTypeDef *hrtc){
 80239e0:	b580      	push	{r7, lr}
 80239e2:	b082      	sub	sp, #8
 80239e4:	af00      	add	r7, sp, #0
 80239e6:	4603      	mov	r3, r0
 80239e8:	6039      	str	r1, [r7, #0]
 80239ea:	71fb      	strb	r3, [r7, #7]
			lv_obj_clean(lv_scr_act());
 80239ec:	f7ff ffde 	bl	80239ac <lv_scr_act>
 80239f0:	4603      	mov	r3, r0
 80239f2:	4618      	mov	r0, r3
 80239f4:	f7e2 fa00 	bl	8005df8 <lv_obj_clean>
    		lv_style_copy(&description_Style, &lv_style_plain);
 80239f8:	4925      	ldr	r1, [pc, #148]	; (8023a90 <tos_SettingsScreen_Init+0xb0>)
 80239fa:	4826      	ldr	r0, [pc, #152]	; (8023a94 <tos_SettingsScreen_Init+0xb4>)
 80239fc:	f7e4 feb2 	bl	8008764 <lv_style_copy>
    		description_Style.text.font = &lv_font_roboto_28;
 8023a00:	4b24      	ldr	r3, [pc, #144]	; (8023a94 <tos_SettingsScreen_Init+0xb4>)
 8023a02:	4a25      	ldr	r2, [pc, #148]	; (8023a98 <tos_SettingsScreen_Init+0xb8>)
 8023a04:	625a      	str	r2, [r3, #36]	; 0x24
			lv_style_copy(&style_screen, &lv_style_plain);
 8023a06:	4922      	ldr	r1, [pc, #136]	; (8023a90 <tos_SettingsScreen_Init+0xb0>)
 8023a08:	4824      	ldr	r0, [pc, #144]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a0a:	f7e4 feab 	bl	8008764 <lv_style_copy>
			style_screen.body.main_color = LV_COLOR_WHITE;
 8023a0e:	4a23      	ldr	r2, [pc, #140]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a10:	4b23      	ldr	r3, [pc, #140]	; (8023aa0 <tos_SettingsScreen_Init+0xc0>)
 8023a12:	881b      	ldrh	r3, [r3, #0]
 8023a14:	8053      	strh	r3, [r2, #2]
			style_screen.body.grad_color = LV_COLOR_WHITE;
 8023a16:	4a21      	ldr	r2, [pc, #132]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a18:	4b21      	ldr	r3, [pc, #132]	; (8023aa0 <tos_SettingsScreen_Init+0xc0>)
 8023a1a:	881b      	ldrh	r3, [r3, #0]
 8023a1c:	8093      	strh	r3, [r2, #4]
		    description_Style.text.color = LV_COLOR_BLACK;
 8023a1e:	4b1d      	ldr	r3, [pc, #116]	; (8023a94 <tos_SettingsScreen_Init+0xb4>)
 8023a20:	2200      	movs	r2, #0
 8023a22:	841a      	strh	r2, [r3, #32]
			if(theme){
 8023a24:	79fb      	ldrb	r3, [r7, #7]
 8023a26:	2b00      	cmp	r3, #0
 8023a28:	d009      	beq.n	8023a3e <tos_SettingsScreen_Init+0x5e>
				style_screen.body.main_color = LV_COLOR_BLACK;
 8023a2a:	4b1c      	ldr	r3, [pc, #112]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a2c:	2200      	movs	r2, #0
 8023a2e:	805a      	strh	r2, [r3, #2]
				style_screen.body.grad_color = LV_COLOR_BLACK;
 8023a30:	4b1a      	ldr	r3, [pc, #104]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a32:	2200      	movs	r2, #0
 8023a34:	809a      	strh	r2, [r3, #4]
				description_Style.text.color = LV_COLOR_WHITE;
 8023a36:	4a17      	ldr	r2, [pc, #92]	; (8023a94 <tos_SettingsScreen_Init+0xb4>)
 8023a38:	4b19      	ldr	r3, [pc, #100]	; (8023aa0 <tos_SettingsScreen_Init+0xc0>)
 8023a3a:	881b      	ldrh	r3, [r3, #0]
 8023a3c:	8413      	strh	r3, [r2, #32]
			}lv_obj_set_style(lv_scr_act(), &style_screen);
 8023a3e:	f7ff ffb5 	bl	80239ac <lv_scr_act>
 8023a42:	4603      	mov	r3, r0
 8023a44:	4915      	ldr	r1, [pc, #84]	; (8023a9c <tos_SettingsScreen_Init+0xbc>)
 8023a46:	4618      	mov	r0, r3
 8023a48:	f7e3 f8ed 	bl	8006c26 <lv_obj_set_style>
			Stheme=theme;
 8023a4c:	4a15      	ldr	r2, [pc, #84]	; (8023aa4 <tos_SettingsScreen_Init+0xc4>)
 8023a4e:	79fb      	ldrb	r3, [r7, #7]
 8023a50:	7013      	strb	r3, [r2, #0]
			isMenuOpen=true;
 8023a52:	4b15      	ldr	r3, [pc, #84]	; (8023aa8 <tos_SettingsScreen_Init+0xc8>)
 8023a54:	2201      	movs	r2, #1
 8023a56:	701a      	strb	r2, [r3, #0]
			S_hrtc=hrtc;
 8023a58:	4a14      	ldr	r2, [pc, #80]	; (8023aac <tos_SettingsScreen_Init+0xcc>)
 8023a5a:	683b      	ldr	r3, [r7, #0]
 8023a5c:	6013      	str	r3, [r2, #0]
			SettingsScreen_clockInit(theme);
 8023a5e:	79fb      	ldrb	r3, [r7, #7]
 8023a60:	4618      	mov	r0, r3
 8023a62:	f000 f825 	bl	8023ab0 <SettingsScreen_clockInit>
			SettingsScreen_dateInit(theme);
 8023a66:	79fb      	ldrb	r3, [r7, #7]
 8023a68:	4618      	mov	r0, r3
 8023a6a:	f000 f8b7 	bl	8023bdc <SettingsScreen_dateInit>
			SettingsScreen_bluetoothInit(theme);
 8023a6e:	79fb      	ldrb	r3, [r7, #7]
 8023a70:	4618      	mov	r0, r3
 8023a72:	f000 f949 	bl	8023d08 <SettingsScreen_bluetoothInit>
			SettingsScreen_unitTypeInit(theme);
 8023a76:	79fb      	ldrb	r3, [r7, #7]
 8023a78:	4618      	mov	r0, r3
 8023a7a:	f000 f9cb 	bl	8023e14 <SettingsScreen_unitTypeInit>
			SettingsScreen_buttonsInit(theme);
 8023a7e:	79fb      	ldrb	r3, [r7, #7]
 8023a80:	4618      	mov	r0, r3
 8023a82:	f000 fa77 	bl	8023f74 <SettingsScreen_buttonsInit>

}
 8023a86:	bf00      	nop
 8023a88:	3708      	adds	r7, #8
 8023a8a:	46bd      	mov	sp, r7
 8023a8c:	bd80      	pop	{r7, pc}
 8023a8e:	bf00      	nop
 8023a90:	20006c74 	.word	0x20006c74
 8023a94:	200063a0 	.word	0x200063a0
 8023a98:	20002394 	.word	0x20002394
 8023a9c:	20006364 	.word	0x20006364
 8023aa0:	0802a0a4 	.word	0x0802a0a4
 8023aa4:	20007013 	.word	0x20007013
 8023aa8:	2000702c 	.word	0x2000702c
 8023aac:	20007030 	.word	0x20007030

08023ab0 <SettingsScreen_clockInit>:
/**/
void SettingsScreen_clockInit(bool theme){
 8023ab0:	b590      	push	{r4, r7, lr}
 8023ab2:	b087      	sub	sp, #28
 8023ab4:	af02      	add	r7, sp, #8
 8023ab6:	4603      	mov	r3, r0
 8023ab8:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 8023aba:	493c      	ldr	r1, [pc, #240]	; (8023bac <SettingsScreen_clockInit+0xfc>)
 8023abc:	483c      	ldr	r0, [pc, #240]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023abe:	f7e4 fe51 	bl	8008764 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8023ac2:	4b3b      	ldr	r3, [pc, #236]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8023ac8:	79fb      	ldrb	r3, [r7, #7]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d003      	beq.n	8023ad6 <SettingsScreen_clockInit+0x26>
 8023ace:	4a38      	ldr	r2, [pc, #224]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023ad0:	4b38      	ldr	r3, [pc, #224]	; (8023bb4 <SettingsScreen_clockInit+0x104>)
 8023ad2:	881b      	ldrh	r3, [r3, #0]
 8023ad4:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 8023ad6:	4b36      	ldr	r3, [pc, #216]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023ad8:	4a37      	ldr	r2, [pc, #220]	; (8023bb8 <SettingsScreen_clockInit+0x108>)
 8023ada:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023adc:	4c34      	ldr	r4, [pc, #208]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023ade:	2200      	movs	r2, #0
 8023ae0:	21a5      	movs	r1, #165	; 0xa5
 8023ae2:	20ff      	movs	r0, #255	; 0xff
 8023ae4:	f7ff ff16 	bl	8023914 <lv_color_make>
 8023ae8:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023aea:	4c31      	ldr	r4, [pc, #196]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023aec:	2200      	movs	r2, #0
 8023aee:	21a5      	movs	r1, #165	; 0xa5
 8023af0:	20ff      	movs	r0, #255	; 0xff
 8023af2:	f7ff ff0f 	bl	8023914 <lv_color_make>
 8023af6:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8023af8:	4b2d      	ldr	r3, [pc, #180]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023afa:	220a      	movs	r2, #10
 8023afc:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8023afe:	4b2c      	ldr	r3, [pc, #176]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023b00:	22c8      	movs	r2, #200	; 0xc8
 8023b02:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * clockLbl = lv_label_create(lv_scr_act(), NULL);
 8023b04:	f7ff ff52 	bl	80239ac <lv_scr_act>
 8023b08:	4603      	mov	r3, r0
 8023b0a:	2100      	movs	r1, #0
 8023b0c:	4618      	mov	r0, r3
 8023b0e:	f7f5 fcfd 	bl	801950c <lv_label_create>
 8023b12:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(clockLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023b14:	4a29      	ldr	r2, [pc, #164]	; (8023bbc <SettingsScreen_clockInit+0x10c>)
 8023b16:	2100      	movs	r1, #0
 8023b18:	68f8      	ldr	r0, [r7, #12]
 8023b1a:	f7ff ff52 	bl	80239c2 <lv_label_set_style>
		lv_label_set_text(clockLbl, "Clock:");
 8023b1e:	4928      	ldr	r1, [pc, #160]	; (8023bc0 <SettingsScreen_clockInit+0x110>)
 8023b20:	68f8      	ldr	r0, [r7, #12]
 8023b22:	f7f5 fe25 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(clockLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 40);
 8023b26:	2328      	movs	r3, #40	; 0x28
 8023b28:	9300      	str	r3, [sp, #0]
 8023b2a:	2314      	movs	r3, #20
 8023b2c:	2201      	movs	r2, #1
 8023b2e:	2100      	movs	r1, #0
 8023b30:	68f8      	ldr	r0, [r7, #12]
 8023b32:	f7e2 fbd3 	bl	80062dc <lv_obj_align>

    S_ClockLbl = lv_label_create(lv_scr_act(), NULL);
 8023b36:	f7ff ff39 	bl	80239ac <lv_scr_act>
 8023b3a:	4603      	mov	r3, r0
 8023b3c:	2100      	movs	r1, #0
 8023b3e:	4618      	mov	r0, r3
 8023b40:	f7f5 fce4 	bl	801950c <lv_label_create>
 8023b44:	4602      	mov	r2, r0
 8023b46:	4b1f      	ldr	r3, [pc, #124]	; (8023bc4 <SettingsScreen_clockInit+0x114>)
 8023b48:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_ClockLbl, true);
 8023b4a:	4b1e      	ldr	r3, [pc, #120]	; (8023bc4 <SettingsScreen_clockInit+0x114>)
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	2101      	movs	r1, #1
 8023b50:	4618      	mov	r0, r3
 8023b52:	f7f5 ff29 	bl	80199a8 <lv_label_set_recolor>
 	lv_label_set_style(S_ClockLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8023b56:	4b1b      	ldr	r3, [pc, #108]	; (8023bc4 <SettingsScreen_clockInit+0x114>)
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	4a15      	ldr	r2, [pc, #84]	; (8023bb0 <SettingsScreen_clockInit+0x100>)
 8023b5c:	2100      	movs	r1, #0
 8023b5e:	4618      	mov	r0, r3
 8023b60:	f7ff ff2f 	bl	80239c2 <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8023b64:	4b18      	ldr	r3, [pc, #96]	; (8023bc8 <SettingsScreen_clockInit+0x118>)
 8023b66:	781b      	ldrb	r3, [r3, #0]
 8023b68:	4619      	mov	r1, r3
 8023b6a:	4b18      	ldr	r3, [pc, #96]	; (8023bcc <SettingsScreen_clockInit+0x11c>)
 8023b6c:	781b      	ldrb	r3, [r3, #0]
 8023b6e:	461a      	mov	r2, r3
 8023b70:	4b17      	ldr	r3, [pc, #92]	; (8023bd0 <SettingsScreen_clockInit+0x120>)
 8023b72:	781b      	ldrb	r3, [r3, #0]
 8023b74:	9301      	str	r3, [sp, #4]
 8023b76:	9200      	str	r2, [sp, #0]
 8023b78:	460b      	mov	r3, r1
 8023b7a:	4a16      	ldr	r2, [pc, #88]	; (8023bd4 <SettingsScreen_clockInit+0x124>)
 8023b7c:	2140      	movs	r1, #64	; 0x40
 8023b7e:	4816      	ldr	r0, [pc, #88]	; (8023bd8 <SettingsScreen_clockInit+0x128>)
 8023b80:	f004 f878 	bl	8027c74 <sniprintf>
			Shours,Sminutes,Sseconds);
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 8023b84:	4b0f      	ldr	r3, [pc, #60]	; (8023bc4 <SettingsScreen_clockInit+0x114>)
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	4913      	ldr	r1, [pc, #76]	; (8023bd8 <SettingsScreen_clockInit+0x128>)
 8023b8a:	4618      	mov	r0, r3
 8023b8c:	f7f5 fdf0 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 8023b90:	4b0c      	ldr	r3, [pc, #48]	; (8023bc4 <SettingsScreen_clockInit+0x114>)
 8023b92:	6818      	ldr	r0, [r3, #0]
 8023b94:	2328      	movs	r3, #40	; 0x28
 8023b96:	9300      	str	r3, [sp, #0]
 8023b98:	f06f 0313 	mvn.w	r3, #19
 8023b9c:	2203      	movs	r2, #3
 8023b9e:	2100      	movs	r1, #0
 8023ba0:	f7e2 fb9c 	bl	80062dc <lv_obj_align>
}
 8023ba4:	bf00      	nop
 8023ba6:	3714      	adds	r7, #20
 8023ba8:	46bd      	mov	sp, r7
 8023baa:	bd90      	pop	{r4, r7, pc}
 8023bac:	20006c74 	.word	0x20006c74
 8023bb0:	20006454 	.word	0x20006454
 8023bb4:	0802a0dc 	.word	0x0802a0dc
 8023bb8:	200027e8 	.word	0x200027e8
 8023bbc:	200063a0 	.word	0x200063a0
 8023bc0:	0802a0a8 	.word	0x0802a0a8
 8023bc4:	20007018 	.word	0x20007018
 8023bc8:	20007011 	.word	0x20007011
 8023bcc:	2000701c 	.word	0x2000701c
 8023bd0:	2000702f 	.word	0x2000702f
 8023bd4:	0802a0b0 	.word	0x0802a0b0
 8023bd8:	20007034 	.word	0x20007034

08023bdc <SettingsScreen_dateInit>:
/**/
void SettingsScreen_dateInit(bool theme){
 8023bdc:	b590      	push	{r4, r7, lr}
 8023bde:	b087      	sub	sp, #28
 8023be0:	af02      	add	r7, sp, #8
 8023be2:	4603      	mov	r3, r0
 8023be4:	71fb      	strb	r3, [r7, #7]

	 	static lv_style_t obj_Style;
	    lv_style_copy(&obj_Style, &lv_style_plain);
 8023be6:	493c      	ldr	r1, [pc, #240]	; (8023cd8 <SettingsScreen_dateInit+0xfc>)
 8023be8:	483c      	ldr	r0, [pc, #240]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023bea:	f7e4 fdbb 	bl	8008764 <lv_style_copy>
	    obj_Style.text.color = LV_COLOR_BLACK;
 8023bee:	4b3b      	ldr	r3, [pc, #236]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023bf0:	2200      	movs	r2, #0
 8023bf2:	841a      	strh	r2, [r3, #32]
	    if(theme) obj_Style.text.color = LV_COLOR_SILVER;
 8023bf4:	79fb      	ldrb	r3, [r7, #7]
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d003      	beq.n	8023c02 <SettingsScreen_dateInit+0x26>
 8023bfa:	4a38      	ldr	r2, [pc, #224]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023bfc:	4b38      	ldr	r3, [pc, #224]	; (8023ce0 <SettingsScreen_dateInit+0x104>)
 8023bfe:	881b      	ldrh	r3, [r3, #0]
 8023c00:	8413      	strh	r3, [r2, #32]
	    obj_Style.text.font = &digital_font_for_number_30;
 8023c02:	4b36      	ldr	r3, [pc, #216]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c04:	4a37      	ldr	r2, [pc, #220]	; (8023ce4 <SettingsScreen_dateInit+0x108>)
 8023c06:	625a      	str	r2, [r3, #36]	; 0x24
	    obj_Style.body.main_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023c08:	4c34      	ldr	r4, [pc, #208]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c0a:	2200      	movs	r2, #0
 8023c0c:	21a5      	movs	r1, #165	; 0xa5
 8023c0e:	20ff      	movs	r0, #255	; 0xff
 8023c10:	f7ff fe80 	bl	8023914 <lv_color_make>
 8023c14:	8060      	strh	r0, [r4, #2]
	    obj_Style.body.grad_color   = lv_color_make(0xFF, 0xA5, 0x00);
 8023c16:	4c31      	ldr	r4, [pc, #196]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c18:	2200      	movs	r2, #0
 8023c1a:	21a5      	movs	r1, #165	; 0xa5
 8023c1c:	20ff      	movs	r0, #255	; 0xff
 8023c1e:	f7ff fe79 	bl	8023914 <lv_color_make>
 8023c22:	80a0      	strh	r0, [r4, #4]
	    obj_Style.body.radius= 10;
 8023c24:	4b2d      	ldr	r3, [pc, #180]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c26:	220a      	movs	r2, #10
 8023c28:	80da      	strh	r2, [r3, #6]
	    obj_Style.body.opa=200;
 8023c2a:	4b2c      	ldr	r3, [pc, #176]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c2c:	22c8      	movs	r2, #200	; 0xc8
 8023c2e:	721a      	strb	r2, [r3, #8]

	    lv_obj_t * dateLbl = lv_label_create(lv_scr_act(), NULL);
 8023c30:	f7ff febc 	bl	80239ac <lv_scr_act>
 8023c34:	4603      	mov	r3, r0
 8023c36:	2100      	movs	r1, #0
 8023c38:	4618      	mov	r0, r3
 8023c3a:	f7f5 fc67 	bl	801950c <lv_label_create>
 8023c3e:	60f8      	str	r0, [r7, #12]
	 	lv_label_set_style(dateLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023c40:	4a29      	ldr	r2, [pc, #164]	; (8023ce8 <SettingsScreen_dateInit+0x10c>)
 8023c42:	2100      	movs	r1, #0
 8023c44:	68f8      	ldr	r0, [r7, #12]
 8023c46:	f7ff febc 	bl	80239c2 <lv_label_set_style>
		lv_label_set_text(dateLbl, "Date:");
 8023c4a:	4928      	ldr	r1, [pc, #160]	; (8023cec <SettingsScreen_dateInit+0x110>)
 8023c4c:	68f8      	ldr	r0, [r7, #12]
 8023c4e:	f7f5 fd8f 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(dateLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 80);
 8023c52:	2350      	movs	r3, #80	; 0x50
 8023c54:	9300      	str	r3, [sp, #0]
 8023c56:	2314      	movs	r3, #20
 8023c58:	2201      	movs	r2, #1
 8023c5a:	2100      	movs	r1, #0
 8023c5c:	68f8      	ldr	r0, [r7, #12]
 8023c5e:	f7e2 fb3d 	bl	80062dc <lv_obj_align>

    S_DateLbl = lv_label_create(lv_scr_act(), NULL);
 8023c62:	f7ff fea3 	bl	80239ac <lv_scr_act>
 8023c66:	4603      	mov	r3, r0
 8023c68:	2100      	movs	r1, #0
 8023c6a:	4618      	mov	r0, r3
 8023c6c:	f7f5 fc4e 	bl	801950c <lv_label_create>
 8023c70:	4602      	mov	r2, r0
 8023c72:	4b1f      	ldr	r3, [pc, #124]	; (8023cf0 <SettingsScreen_dateInit+0x114>)
 8023c74:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(S_DateLbl, true);
 8023c76:	4b1e      	ldr	r3, [pc, #120]	; (8023cf0 <SettingsScreen_dateInit+0x114>)
 8023c78:	681b      	ldr	r3, [r3, #0]
 8023c7a:	2101      	movs	r1, #1
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	f7f5 fe93 	bl	80199a8 <lv_label_set_recolor>
 	lv_label_set_style(S_DateLbl, LV_LABEL_STYLE_MAIN, &obj_Style);
 8023c82:	4b1b      	ldr	r3, [pc, #108]	; (8023cf0 <SettingsScreen_dateInit+0x114>)
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	4a15      	ldr	r2, [pc, #84]	; (8023cdc <SettingsScreen_dateInit+0x100>)
 8023c88:	2100      	movs	r1, #0
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	f7ff fe99 	bl	80239c2 <lv_label_set_style>
	snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8023c90:	4b18      	ldr	r3, [pc, #96]	; (8023cf4 <SettingsScreen_dateInit+0x118>)
 8023c92:	781b      	ldrb	r3, [r3, #0]
 8023c94:	4619      	mov	r1, r3
 8023c96:	4b18      	ldr	r3, [pc, #96]	; (8023cf8 <SettingsScreen_dateInit+0x11c>)
 8023c98:	781b      	ldrb	r3, [r3, #0]
 8023c9a:	461a      	mov	r2, r3
 8023c9c:	4b17      	ldr	r3, [pc, #92]	; (8023cfc <SettingsScreen_dateInit+0x120>)
 8023c9e:	881b      	ldrh	r3, [r3, #0]
 8023ca0:	9301      	str	r3, [sp, #4]
 8023ca2:	9200      	str	r2, [sp, #0]
 8023ca4:	460b      	mov	r3, r1
 8023ca6:	4a16      	ldr	r2, [pc, #88]	; (8023d00 <SettingsScreen_dateInit+0x124>)
 8023ca8:	2140      	movs	r1, #64	; 0x40
 8023caa:	4816      	ldr	r0, [pc, #88]	; (8023d04 <SettingsScreen_dateInit+0x128>)
 8023cac:	f003 ffe2 	bl	8027c74 <sniprintf>
			Sdates,Smonths,Syears);
	lv_label_set_text(S_DateLbl, settingsBuffer);
 8023cb0:	4b0f      	ldr	r3, [pc, #60]	; (8023cf0 <SettingsScreen_dateInit+0x114>)
 8023cb2:	681b      	ldr	r3, [r3, #0]
 8023cb4:	4913      	ldr	r1, [pc, #76]	; (8023d04 <SettingsScreen_dateInit+0x128>)
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f7f5 fd5a 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8023cbc:	4b0c      	ldr	r3, [pc, #48]	; (8023cf0 <SettingsScreen_dateInit+0x114>)
 8023cbe:	6818      	ldr	r0, [r3, #0]
 8023cc0:	2350      	movs	r3, #80	; 0x50
 8023cc2:	9300      	str	r3, [sp, #0]
 8023cc4:	f06f 0313 	mvn.w	r3, #19
 8023cc8:	2203      	movs	r2, #3
 8023cca:	2100      	movs	r1, #0
 8023ccc:	f7e2 fb06 	bl	80062dc <lv_obj_align>
}
 8023cd0:	bf00      	nop
 8023cd2:	3714      	adds	r7, #20
 8023cd4:	46bd      	mov	sp, r7
 8023cd6:	bd90      	pop	{r4, r7, pc}
 8023cd8:	20006c74 	.word	0x20006c74
 8023cdc:	20006490 	.word	0x20006490
 8023ce0:	0802a0dc 	.word	0x0802a0dc
 8023ce4:	200027e8 	.word	0x200027e8
 8023ce8:	200063a0 	.word	0x200063a0
 8023cec:	0802a0e0 	.word	0x0802a0e0
 8023cf0:	20007028 	.word	0x20007028
 8023cf4:	20007010 	.word	0x20007010
 8023cf8:	2000702e 	.word	0x2000702e
 8023cfc:	20007024 	.word	0x20007024
 8023d00:	0802a0e8 	.word	0x0802a0e8
 8023d04:	20007034 	.word	0x20007034

08023d08 <SettingsScreen_bluetoothInit>:

void SettingsScreen_bluetoothInit(bool theme){
 8023d08:	b590      	push	{r4, r7, lr}
 8023d0a:	b087      	sub	sp, #28
 8023d0c:	af02      	add	r7, sp, #8
 8023d0e:	4603      	mov	r3, r0
 8023d10:	71fb      	strb	r3, [r7, #7]

    lv_style_copy(&bluetooth_indic_style, &lv_style_pretty_color);
 8023d12:	493a      	ldr	r1, [pc, #232]	; (8023dfc <SettingsScreen_bluetoothInit+0xf4>)
 8023d14:	483a      	ldr	r0, [pc, #232]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d16:	f7e4 fd25 	bl	8008764 <lv_style_copy>
    bluetooth_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8023d1a:	4b39      	ldr	r3, [pc, #228]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d1c:	f647 4218 	movw	r2, #31768	; 0x7c18
 8023d20:	80da      	strh	r2, [r3, #6]
    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 8023d22:	4c37      	ldr	r4, [pc, #220]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d24:	2000      	movs	r0, #0
 8023d26:	f7ff fe2d 	bl	8023984 <lv_color_hex>
 8023d2a:	8060      	strh	r0, [r4, #2]
    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 8023d2c:	4c34      	ldr	r4, [pc, #208]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d2e:	2000      	movs	r0, #0
 8023d30:	f7ff fe28 	bl	8023984 <lv_color_hex>
 8023d34:	80a0      	strh	r0, [r4, #4]
    if(theme){
 8023d36:	79fb      	ldrb	r3, [r7, #7]
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	d00b      	beq.n	8023d54 <SettingsScreen_bluetoothInit+0x4c>
    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8023d3c:	4c30      	ldr	r4, [pc, #192]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d3e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023d42:	f7ff fe1f 	bl	8023984 <lv_color_hex>
 8023d46:	8060      	strh	r0, [r4, #2]
    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8023d48:	4c2d      	ldr	r4, [pc, #180]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d4a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023d4e:	f7ff fe19 	bl	8023984 <lv_color_hex>
 8023d52:	80a0      	strh	r0, [r4, #4]
    }
    bluetooth_indic_style.body.padding.left = 0;
 8023d54:	4b2a      	ldr	r3, [pc, #168]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d56:	2200      	movs	r2, #0
 8023d58:	835a      	strh	r2, [r3, #26]
    bluetooth_indic_style.body.padding.right = 0;
 8023d5a:	4b29      	ldr	r3, [pc, #164]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d5c:	2200      	movs	r2, #0
 8023d5e:	839a      	strh	r2, [r3, #28]
    bluetooth_indic_style.body.padding.top = 0;
 8023d60:	4b27      	ldr	r3, [pc, #156]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d62:	2200      	movs	r2, #0
 8023d64:	82da      	strh	r2, [r3, #22]
    bluetooth_indic_style.body.padding.bottom = 0;
 8023d66:	4b26      	ldr	r3, [pc, #152]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023d68:	2200      	movs	r2, #0
 8023d6a:	831a      	strh	r2, [r3, #24]

    lv_obj_t * bluetoothLbl = lv_label_create(lv_scr_act(), NULL);
 8023d6c:	f7ff fe1e 	bl	80239ac <lv_scr_act>
 8023d70:	4603      	mov	r3, r0
 8023d72:	2100      	movs	r1, #0
 8023d74:	4618      	mov	r0, r3
 8023d76:	f7f5 fbc9 	bl	801950c <lv_label_create>
 8023d7a:	60f8      	str	r0, [r7, #12]
 	lv_label_set_style(bluetoothLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023d7c:	4a21      	ldr	r2, [pc, #132]	; (8023e04 <SettingsScreen_bluetoothInit+0xfc>)
 8023d7e:	2100      	movs	r1, #0
 8023d80:	68f8      	ldr	r0, [r7, #12]
 8023d82:	f7ff fe1e 	bl	80239c2 <lv_label_set_style>
	lv_label_set_text(bluetoothLbl, LV_SYMBOL_BLUETOOTH "Statu:");
 8023d86:	4920      	ldr	r1, [pc, #128]	; (8023e08 <SettingsScreen_bluetoothInit+0x100>)
 8023d88:	68f8      	ldr	r0, [r7, #12]
 8023d8a:	f7f5 fcf1 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(bluetoothLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 120);
 8023d8e:	2378      	movs	r3, #120	; 0x78
 8023d90:	9300      	str	r3, [sp, #0]
 8023d92:	2314      	movs	r3, #20
 8023d94:	2201      	movs	r2, #1
 8023d96:	2100      	movs	r1, #0
 8023d98:	68f8      	ldr	r0, [r7, #12]
 8023d9a:	f7e2 fa9f 	bl	80062dc <lv_obj_align>

    SbluetoothSwitch = lv_sw_create(lv_scr_act(), NULL);
 8023d9e:	f7ff fe05 	bl	80239ac <lv_scr_act>
 8023da2:	4603      	mov	r3, r0
 8023da4:	2100      	movs	r1, #0
 8023da6:	4618      	mov	r0, r3
 8023da8:	f7fa fe08 	bl	801e9bc <lv_sw_create>
 8023dac:	4602      	mov	r2, r0
 8023dae:	4b17      	ldr	r3, [pc, #92]	; (8023e0c <SettingsScreen_bluetoothInit+0x104>)
 8023db0:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 8023db2:	4b16      	ldr	r3, [pc, #88]	; (8023e0c <SettingsScreen_bluetoothInit+0x104>)
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	4a12      	ldr	r2, [pc, #72]	; (8023e00 <SettingsScreen_bluetoothInit+0xf8>)
 8023db8:	2101      	movs	r1, #1
 8023dba:	4618      	mov	r0, r3
 8023dbc:	f7fa fedc 	bl	801eb78 <lv_sw_set_style>
    lv_sw_on(SbluetoothSwitch, LV_ANIM_OFF);
 8023dc0:	4b12      	ldr	r3, [pc, #72]	; (8023e0c <SettingsScreen_bluetoothInit+0x104>)
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	2100      	movs	r1, #0
 8023dc6:	4618      	mov	r0, r3
 8023dc8:	f7fa fea0 	bl	801eb0c <lv_sw_on>
    if(SbluetoothStatu)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8023dcc:	4b10      	ldr	r3, [pc, #64]	; (8023e10 <SettingsScreen_bluetoothInit+0x108>)
 8023dce:	781b      	ldrb	r3, [r3, #0]
 8023dd0:	2b00      	cmp	r3, #0
 8023dd2:	d005      	beq.n	8023de0 <SettingsScreen_bluetoothInit+0xd8>
 8023dd4:	4b0d      	ldr	r3, [pc, #52]	; (8023e0c <SettingsScreen_bluetoothInit+0x104>)
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	2101      	movs	r1, #1
 8023dda:	4618      	mov	r0, r3
 8023ddc:	f7fa fe96 	bl	801eb0c <lv_sw_on>
    lv_obj_align(SbluetoothSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 120);
 8023de0:	4b0a      	ldr	r3, [pc, #40]	; (8023e0c <SettingsScreen_bluetoothInit+0x104>)
 8023de2:	6818      	ldr	r0, [r3, #0]
 8023de4:	2378      	movs	r3, #120	; 0x78
 8023de6:	9300      	str	r3, [sp, #0]
 8023de8:	f06f 0313 	mvn.w	r3, #19
 8023dec:	2203      	movs	r2, #3
 8023dee:	2100      	movs	r1, #0
 8023df0:	f7e2 fa74 	bl	80062dc <lv_obj_align>
}
 8023df4:	bf00      	nop
 8023df6:	3714      	adds	r7, #20
 8023df8:	46bd      	mov	sp, r7
 8023dfa:	bd90      	pop	{r4, r7, pc}
 8023dfc:	20006a94 	.word	0x20006a94
 8023e00:	200063dc 	.word	0x200063dc
 8023e04:	200063a0 	.word	0x200063a0
 8023e08:	0802a114 	.word	0x0802a114
 8023e0c:	20007014 	.word	0x20007014
 8023e10:	20007005 	.word	0x20007005

08023e14 <SettingsScreen_unitTypeInit>:
/**/
void SettingsScreen_unitTypeInit(bool theme){
 8023e14:	b590      	push	{r4, r7, lr}
 8023e16:	b087      	sub	sp, #28
 8023e18:	af02      	add	r7, sp, #8
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	71fb      	strb	r3, [r7, #7]
	static lv_style_t unitDesc_Style;
	lv_style_copy(&unitDesc_Style, &description_Style);
 8023e1e:	494c      	ldr	r1, [pc, #304]	; (8023f50 <SettingsScreen_unitTypeInit+0x13c>)
 8023e20:	484c      	ldr	r0, [pc, #304]	; (8023f54 <SettingsScreen_unitTypeInit+0x140>)
 8023e22:	f7e4 fc9f 	bl	8008764 <lv_style_copy>
	unitDesc_Style.text.font = &lv_font_unscii_8;
 8023e26:	4b4b      	ldr	r3, [pc, #300]	; (8023f54 <SettingsScreen_unitTypeInit+0x140>)
 8023e28:	4a4b      	ldr	r2, [pc, #300]	; (8023f58 <SettingsScreen_unitTypeInit+0x144>)
 8023e2a:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_copy(&unit_indic_style, &lv_style_pretty_color);
 8023e2c:	494b      	ldr	r1, [pc, #300]	; (8023f5c <SettingsScreen_unitTypeInit+0x148>)
 8023e2e:	484c      	ldr	r0, [pc, #304]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e30:	f7e4 fc98 	bl	8008764 <lv_style_copy>
    unit_indic_style.body.radius = LV_RADIUS_CIRCLE;
 8023e34:	4b4a      	ldr	r3, [pc, #296]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e36:	f647 4218 	movw	r2, #31768	; 0x7c18
 8023e3a:	80da      	strh	r2, [r3, #6]
    unit_indic_style.body.main_color = lv_color_hex(0x000000);
 8023e3c:	4c48      	ldr	r4, [pc, #288]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e3e:	2000      	movs	r0, #0
 8023e40:	f7ff fda0 	bl	8023984 <lv_color_hex>
 8023e44:	8060      	strh	r0, [r4, #2]
    unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 8023e46:	4c46      	ldr	r4, [pc, #280]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e48:	2000      	movs	r0, #0
 8023e4a:	f7ff fd9b 	bl	8023984 <lv_color_hex>
 8023e4e:	80a0      	strh	r0, [r4, #4]
    if(theme){
 8023e50:	79fb      	ldrb	r3, [r7, #7]
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	d00b      	beq.n	8023e6e <SettingsScreen_unitTypeInit+0x5a>
    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8023e56:	4c42      	ldr	r4, [pc, #264]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023e5c:	f7ff fd92 	bl	8023984 <lv_color_hex>
 8023e60:	8060      	strh	r0, [r4, #2]
    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8023e62:	4c3f      	ldr	r4, [pc, #252]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023e68:	f7ff fd8c 	bl	8023984 <lv_color_hex>
 8023e6c:	80a0      	strh	r0, [r4, #4]
    }
    unit_indic_style.body.padding.left = 0;
 8023e6e:	4b3c      	ldr	r3, [pc, #240]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e70:	2200      	movs	r2, #0
 8023e72:	835a      	strh	r2, [r3, #26]
    unit_indic_style.body.padding.right = 0;
 8023e74:	4b3a      	ldr	r3, [pc, #232]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e76:	2200      	movs	r2, #0
 8023e78:	839a      	strh	r2, [r3, #28]
    unit_indic_style.body.padding.top = 0;
 8023e7a:	4b39      	ldr	r3, [pc, #228]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e7c:	2200      	movs	r2, #0
 8023e7e:	82da      	strh	r2, [r3, #22]
    unit_indic_style.body.padding.bottom = 0;
 8023e80:	4b37      	ldr	r3, [pc, #220]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023e82:	2200      	movs	r2, #0
 8023e84:	831a      	strh	r2, [r3, #24]

    lv_obj_t * unitLbl = lv_label_create(lv_scr_act(), NULL);
 8023e86:	f7ff fd91 	bl	80239ac <lv_scr_act>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	2100      	movs	r1, #0
 8023e8e:	4618      	mov	r0, r3
 8023e90:	f7f5 fb3c 	bl	801950c <lv_label_create>
 8023e94:	60f8      	str	r0, [r7, #12]
    lv_label_set_style(unitLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8023e96:	4a2e      	ldr	r2, [pc, #184]	; (8023f50 <SettingsScreen_unitTypeInit+0x13c>)
 8023e98:	2100      	movs	r1, #0
 8023e9a:	68f8      	ldr	r0, [r7, #12]
 8023e9c:	f7ff fd91 	bl	80239c2 <lv_label_set_style>
	lv_label_set_text(unitLbl, "Unit:");
 8023ea0:	4930      	ldr	r1, [pc, #192]	; (8023f64 <SettingsScreen_unitTypeInit+0x150>)
 8023ea2:	68f8      	ldr	r0, [r7, #12]
 8023ea4:	f7f5 fc64 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(unitLbl, NULL, LV_ALIGN_IN_TOP_LEFT, 20, 160);
 8023ea8:	23a0      	movs	r3, #160	; 0xa0
 8023eaa:	9300      	str	r3, [sp, #0]
 8023eac:	2314      	movs	r3, #20
 8023eae:	2201      	movs	r2, #1
 8023eb0:	2100      	movs	r1, #0
 8023eb2:	68f8      	ldr	r0, [r7, #12]
 8023eb4:	f7e2 fa12 	bl	80062dc <lv_obj_align>

    lv_obj_t * unitDescLbl = lv_label_create(lv_scr_act(), NULL);
 8023eb8:	f7ff fd78 	bl	80239ac <lv_scr_act>
 8023ebc:	4603      	mov	r3, r0
 8023ebe:	2100      	movs	r1, #0
 8023ec0:	4618      	mov	r0, r3
 8023ec2:	f7f5 fb23 	bl	801950c <lv_label_create>
 8023ec6:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(unitDescLbl, LV_LABEL_STYLE_MAIN, &unitDesc_Style);
 8023ec8:	4a22      	ldr	r2, [pc, #136]	; (8023f54 <SettingsScreen_unitTypeInit+0x140>)
 8023eca:	2100      	movs	r1, #0
 8023ecc:	68b8      	ldr	r0, [r7, #8]
 8023ece:	f7ff fd78 	bl	80239c2 <lv_label_set_style>
 	lv_label_set_align(unitDescLbl, LV_LABEL_ALIGN_CENTER);
 8023ed2:	2101      	movs	r1, #1
 8023ed4:	68b8      	ldr	r0, [r7, #8]
 8023ed6:	f7f5 fd43 	bl	8019960 <lv_label_set_align>
	lv_label_set_text(unitDescLbl, "KM\n/\nMILES");
 8023eda:	4923      	ldr	r1, [pc, #140]	; (8023f68 <SettingsScreen_unitTypeInit+0x154>)
 8023edc:	68b8      	ldr	r0, [r7, #8]
 8023ede:	f7f5 fc47 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(unitDescLbl, NULL, LV_ALIGN_IN_TOP_MID, 0, 160);
 8023ee2:	23a0      	movs	r3, #160	; 0xa0
 8023ee4:	9300      	str	r3, [sp, #0]
 8023ee6:	2300      	movs	r3, #0
 8023ee8:	2202      	movs	r2, #2
 8023eea:	2100      	movs	r1, #0
 8023eec:	68b8      	ldr	r0, [r7, #8]
 8023eee:	f7e2 f9f5 	bl	80062dc <lv_obj_align>

    unitTypeSwitch = lv_sw_create(lv_scr_act(), NULL);
 8023ef2:	f7ff fd5b 	bl	80239ac <lv_scr_act>
 8023ef6:	4603      	mov	r3, r0
 8023ef8:	2100      	movs	r1, #0
 8023efa:	4618      	mov	r0, r3
 8023efc:	f7fa fd5e 	bl	801e9bc <lv_sw_create>
 8023f00:	4602      	mov	r2, r0
 8023f02:	4b1a      	ldr	r3, [pc, #104]	; (8023f6c <SettingsScreen_unitTypeInit+0x158>)
 8023f04:	601a      	str	r2, [r3, #0]
    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 8023f06:	4b19      	ldr	r3, [pc, #100]	; (8023f6c <SettingsScreen_unitTypeInit+0x158>)
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	4a15      	ldr	r2, [pc, #84]	; (8023f60 <SettingsScreen_unitTypeInit+0x14c>)
 8023f0c:	2101      	movs	r1, #1
 8023f0e:	4618      	mov	r0, r3
 8023f10:	f7fa fe32 	bl	801eb78 <lv_sw_set_style>
    lv_sw_on(unitTypeSwitch, LV_ANIM_OFF);
 8023f14:	4b15      	ldr	r3, [pc, #84]	; (8023f6c <SettingsScreen_unitTypeInit+0x158>)
 8023f16:	681b      	ldr	r3, [r3, #0]
 8023f18:	2100      	movs	r1, #0
 8023f1a:	4618      	mov	r0, r3
 8023f1c:	f7fa fdf6 	bl	801eb0c <lv_sw_on>
    if(SunitType)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 8023f20:	4b13      	ldr	r3, [pc, #76]	; (8023f70 <SettingsScreen_unitTypeInit+0x15c>)
 8023f22:	781b      	ldrb	r3, [r3, #0]
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	d005      	beq.n	8023f34 <SettingsScreen_unitTypeInit+0x120>
 8023f28:	4b10      	ldr	r3, [pc, #64]	; (8023f6c <SettingsScreen_unitTypeInit+0x158>)
 8023f2a:	681b      	ldr	r3, [r3, #0]
 8023f2c:	2101      	movs	r1, #1
 8023f2e:	4618      	mov	r0, r3
 8023f30:	f7fa fdec 	bl	801eb0c <lv_sw_on>
    lv_obj_align(unitTypeSwitch, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 160);
 8023f34:	4b0d      	ldr	r3, [pc, #52]	; (8023f6c <SettingsScreen_unitTypeInit+0x158>)
 8023f36:	6818      	ldr	r0, [r3, #0]
 8023f38:	23a0      	movs	r3, #160	; 0xa0
 8023f3a:	9300      	str	r3, [sp, #0]
 8023f3c:	f06f 0313 	mvn.w	r3, #19
 8023f40:	2203      	movs	r2, #3
 8023f42:	2100      	movs	r1, #0
 8023f44:	f7e2 f9ca 	bl	80062dc <lv_obj_align>
}
 8023f48:	bf00      	nop
 8023f4a:	3714      	adds	r7, #20
 8023f4c:	46bd      	mov	sp, r7
 8023f4e:	bd90      	pop	{r4, r7, pc}
 8023f50:	200063a0 	.word	0x200063a0
 8023f54:	200064cc 	.word	0x200064cc
 8023f58:	200026cc 	.word	0x200026cc
 8023f5c:	20006a94 	.word	0x20006a94
 8023f60:	20006418 	.word	0x20006418
 8023f64:	0802a120 	.word	0x0802a120
 8023f68:	0802a128 	.word	0x0802a128
 8023f6c:	2000700c 	.word	0x2000700c
 8023f70:	20007076 	.word	0x20007076

08023f74 <SettingsScreen_buttonsInit>:
/**/
void SettingsScreen_buttonsInit(bool theme){
 8023f74:	b580      	push	{r7, lr}
 8023f76:	b086      	sub	sp, #24
 8023f78:	af02      	add	r7, sp, #8
 8023f7a:	4603      	mov	r3, r0
 8023f7c:	71fb      	strb	r3, [r7, #7]
	static lv_style_t scrl_style,bg_style;
	lv_style_copy(&scrl_style, &lv_style_plain);
 8023f7e:	4963      	ldr	r1, [pc, #396]	; (802410c <SettingsScreen_buttonsInit+0x198>)
 8023f80:	4863      	ldr	r0, [pc, #396]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023f82:	f7e4 fbef 	bl	8008764 <lv_style_copy>
	scrl_style.body.main_color = LV_COLOR_SILVER;
 8023f86:	4a62      	ldr	r2, [pc, #392]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023f88:	4b62      	ldr	r3, [pc, #392]	; (8024114 <SettingsScreen_buttonsInit+0x1a0>)
 8023f8a:	881b      	ldrh	r3, [r3, #0]
 8023f8c:	8053      	strh	r3, [r2, #2]
	scrl_style.body.grad_color = LV_COLOR_SILVER;
 8023f8e:	4a60      	ldr	r2, [pc, #384]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023f90:	4b60      	ldr	r3, [pc, #384]	; (8024114 <SettingsScreen_buttonsInit+0x1a0>)
 8023f92:	881b      	ldrh	r3, [r3, #0]
 8023f94:	8093      	strh	r3, [r2, #4]
	scrl_style.body.border.color = LV_COLOR_BLACK;
 8023f96:	4b5e      	ldr	r3, [pc, #376]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023f98:	2200      	movs	r2, #0
 8023f9a:	815a      	strh	r2, [r3, #10]
	scrl_style.body.border.width = 0;
 8023f9c:	4b5c      	ldr	r3, [pc, #368]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	819a      	strh	r2, [r3, #12]
	scrl_style.text.color = LV_COLOR_WHITE;
 8023fa2:	4a5b      	ldr	r2, [pc, #364]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023fa4:	4b5c      	ldr	r3, [pc, #368]	; (8024118 <SettingsScreen_buttonsInit+0x1a4>)
 8023fa6:	881b      	ldrh	r3, [r3, #0]
 8023fa8:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&bg_style, &lv_style_plain);
 8023faa:	4958      	ldr	r1, [pc, #352]	; (802410c <SettingsScreen_buttonsInit+0x198>)
 8023fac:	485b      	ldr	r0, [pc, #364]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fae:	f7e4 fbd9 	bl	8008764 <lv_style_copy>
	bg_style.body.main_color = LV_COLOR_BLACK;
 8023fb2:	4b5a      	ldr	r3, [pc, #360]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fb4:	2200      	movs	r2, #0
 8023fb6:	805a      	strh	r2, [r3, #2]
	bg_style.body.grad_color = LV_COLOR_BLACK;
 8023fb8:	4b58      	ldr	r3, [pc, #352]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fba:	2200      	movs	r2, #0
 8023fbc:	809a      	strh	r2, [r3, #4]
	bg_style.body.border.color = LV_COLOR_WHITE;
 8023fbe:	4a57      	ldr	r2, [pc, #348]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fc0:	4b55      	ldr	r3, [pc, #340]	; (8024118 <SettingsScreen_buttonsInit+0x1a4>)
 8023fc2:	881b      	ldrh	r3, [r3, #0]
 8023fc4:	8153      	strh	r3, [r2, #10]
	bg_style.body.border.width = 0;
 8023fc6:	4b55      	ldr	r3, [pc, #340]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fc8:	2200      	movs	r2, #0
 8023fca:	819a      	strh	r2, [r3, #12]
	bg_style.body.border.opa = LV_OPA_90;
 8023fcc:	4b53      	ldr	r3, [pc, #332]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fce:	22e5      	movs	r2, #229	; 0xe5
 8023fd0:	73da      	strb	r2, [r3, #15]
	bg_style.body.opa = LV_OPA_90;
 8023fd2:	4b52      	ldr	r3, [pc, #328]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fd4:	22e5      	movs	r2, #229	; 0xe5
 8023fd6:	721a      	strb	r2, [r3, #8]
	bg_style.text.color = LV_COLOR_WHITE;
 8023fd8:	4a50      	ldr	r2, [pc, #320]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fda:	4b4f      	ldr	r3, [pc, #316]	; (8024118 <SettingsScreen_buttonsInit+0x1a4>)
 8023fdc:	881b      	ldrh	r3, [r3, #0]
 8023fde:	8413      	strh	r3, [r2, #32]
    if(theme){
 8023fe0:	79fb      	ldrb	r3, [r7, #7]
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	d010      	beq.n	8024008 <SettingsScreen_buttonsInit+0x94>
		bg_style.body.main_color = LV_COLOR_WHITE;
 8023fe6:	4a4d      	ldr	r2, [pc, #308]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023fe8:	4b4b      	ldr	r3, [pc, #300]	; (8024118 <SettingsScreen_buttonsInit+0x1a4>)
 8023fea:	881b      	ldrh	r3, [r3, #0]
 8023fec:	8053      	strh	r3, [r2, #2]
		bg_style.body.grad_color = LV_COLOR_WHITE;
 8023fee:	4a4b      	ldr	r2, [pc, #300]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023ff0:	4b49      	ldr	r3, [pc, #292]	; (8024118 <SettingsScreen_buttonsInit+0x1a4>)
 8023ff2:	881b      	ldrh	r3, [r3, #0]
 8023ff4:	8093      	strh	r3, [r2, #4]
		bg_style.body.border.color = LV_COLOR_BLACK;
 8023ff6:	4b49      	ldr	r3, [pc, #292]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8023ff8:	2200      	movs	r2, #0
 8023ffa:	815a      	strh	r2, [r3, #10]
		scrl_style.text.color = LV_COLOR_BLACK;
 8023ffc:	4b44      	ldr	r3, [pc, #272]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 8023ffe:	2200      	movs	r2, #0
 8024000:	841a      	strh	r2, [r3, #32]
		bg_style.text.color = LV_COLOR_BLACK;
 8024002:	4b46      	ldr	r3, [pc, #280]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8024004:	2200      	movs	r2, #0
 8024006:	841a      	strh	r2, [r3, #32]
	 }
    //LV_BTN_STATE_TGL_PR
    //LV_BTN_STATE_REL
    lv_obj_t * saveBtnLbl;

    S_saveBtn = lv_btn_create(lv_scr_act(), NULL);
 8024008:	f7ff fcd0 	bl	80239ac <lv_scr_act>
 802400c:	4603      	mov	r3, r0
 802400e:	2100      	movs	r1, #0
 8024010:	4618      	mov	r0, r3
 8024012:	f7f1 fc0f 	bl	8015834 <lv_btn_create>
 8024016:	4602      	mov	r2, r0
 8024018:	4b41      	ldr	r3, [pc, #260]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 802401a:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_saveBtn,80);
 802401c:	4b40      	ldr	r3, [pc, #256]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	2150      	movs	r1, #80	; 0x50
 8024022:	4618      	mov	r0, r3
 8024024:	f7e2 f930 	bl	8006288 <lv_obj_set_width>
    lv_obj_set_height(S_saveBtn,30);
 8024028:	4b3d      	ldr	r3, [pc, #244]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	211e      	movs	r1, #30
 802402e:	4618      	mov	r0, r3
 8024030:	f7e2 f93f 	bl	80062b2 <lv_obj_set_height>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_REL,  &scrl_style);
 8024034:	4b3a      	ldr	r3, [pc, #232]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 8024036:	681b      	ldr	r3, [r3, #0]
 8024038:	4a35      	ldr	r2, [pc, #212]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 802403a:	2100      	movs	r1, #0
 802403c:	4618      	mov	r0, r3
 802403e:	f7f1 fd07 	bl	8015a50 <lv_btn_set_style>
    lv_btn_set_style(S_saveBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 8024042:	4b37      	ldr	r3, [pc, #220]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 8024044:	681b      	ldr	r3, [r3, #0]
 8024046:	4a35      	ldr	r2, [pc, #212]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 8024048:	2103      	movs	r1, #3
 802404a:	4618      	mov	r0, r3
 802404c:	f7f1 fd00 	bl	8015a50 <lv_btn_set_style>
    lv_obj_align(S_saveBtn, NULL,LV_ALIGN_IN_TOP_RIGHT, -20, 200);
 8024050:	4b33      	ldr	r3, [pc, #204]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 8024052:	6818      	ldr	r0, [r3, #0]
 8024054:	23c8      	movs	r3, #200	; 0xc8
 8024056:	9300      	str	r3, [sp, #0]
 8024058:	f06f 0313 	mvn.w	r3, #19
 802405c:	2203      	movs	r2, #3
 802405e:	2100      	movs	r1, #0
 8024060:	f7e2 f93c 	bl	80062dc <lv_obj_align>
    lv_btn_set_state(S_saveBtn, LV_BTN_STATE_TGL_PR);
 8024064:	4b2e      	ldr	r3, [pc, #184]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	2103      	movs	r1, #3
 802406a:	4618      	mov	r0, r3
 802406c:	f7f1 fcc6 	bl	80159fc <lv_btn_set_state>

    saveBtnLbl = lv_label_create(S_saveBtn, NULL);
 8024070:	4b2b      	ldr	r3, [pc, #172]	; (8024120 <SettingsScreen_buttonsInit+0x1ac>)
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	2100      	movs	r1, #0
 8024076:	4618      	mov	r0, r3
 8024078:	f7f5 fa48 	bl	801950c <lv_label_create>
 802407c:	60f8      	str	r0, [r7, #12]
    lv_label_set_text(saveBtnLbl, "Save");
 802407e:	4929      	ldr	r1, [pc, #164]	; (8024124 <SettingsScreen_buttonsInit+0x1b0>)
 8024080:	68f8      	ldr	r0, [r7, #12]
 8024082:	f7f5 fb75 	bl	8019770 <lv_label_set_text>

    lv_obj_t * closeBtnLbl;

    S_closeBtn = lv_btn_create(lv_scr_act(), NULL);
 8024086:	f7ff fc91 	bl	80239ac <lv_scr_act>
 802408a:	4603      	mov	r3, r0
 802408c:	2100      	movs	r1, #0
 802408e:	4618      	mov	r0, r3
 8024090:	f7f1 fbd0 	bl	8015834 <lv_btn_create>
 8024094:	4602      	mov	r2, r0
 8024096:	4b24      	ldr	r3, [pc, #144]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 8024098:	601a      	str	r2, [r3, #0]
    lv_obj_set_width(S_closeBtn,80);
 802409a:	4b23      	ldr	r3, [pc, #140]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 802409c:	681b      	ldr	r3, [r3, #0]
 802409e:	2150      	movs	r1, #80	; 0x50
 80240a0:	4618      	mov	r0, r3
 80240a2:	f7e2 f8f1 	bl	8006288 <lv_obj_set_width>
    lv_obj_set_height(S_closeBtn,30);
 80240a6:	4b20      	ldr	r3, [pc, #128]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	211e      	movs	r1, #30
 80240ac:	4618      	mov	r0, r3
 80240ae:	f7e2 f900 	bl	80062b2 <lv_obj_set_height>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_REL,  &scrl_style);
 80240b2:	4b1d      	ldr	r3, [pc, #116]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240b4:	681b      	ldr	r3, [r3, #0]
 80240b6:	4a16      	ldr	r2, [pc, #88]	; (8024110 <SettingsScreen_buttonsInit+0x19c>)
 80240b8:	2100      	movs	r1, #0
 80240ba:	4618      	mov	r0, r3
 80240bc:	f7f1 fcc8 	bl	8015a50 <lv_btn_set_style>
    lv_btn_set_style(S_closeBtn, LV_BTN_STYLE_TGL_PR,  &bg_style);
 80240c0:	4b19      	ldr	r3, [pc, #100]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240c2:	681b      	ldr	r3, [r3, #0]
 80240c4:	4a15      	ldr	r2, [pc, #84]	; (802411c <SettingsScreen_buttonsInit+0x1a8>)
 80240c6:	2103      	movs	r1, #3
 80240c8:	4618      	mov	r0, r3
 80240ca:	f7f1 fcc1 	bl	8015a50 <lv_btn_set_style>
    lv_obj_align(S_closeBtn, NULL,LV_ALIGN_IN_TOP_LEFT, 20, 200);
 80240ce:	4b16      	ldr	r3, [pc, #88]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240d0:	6818      	ldr	r0, [r3, #0]
 80240d2:	23c8      	movs	r3, #200	; 0xc8
 80240d4:	9300      	str	r3, [sp, #0]
 80240d6:	2314      	movs	r3, #20
 80240d8:	2201      	movs	r2, #1
 80240da:	2100      	movs	r1, #0
 80240dc:	f7e2 f8fe 	bl	80062dc <lv_obj_align>
    lv_btn_set_state(S_closeBtn, LV_BTN_STATE_TGL_PR);
 80240e0:	4b11      	ldr	r3, [pc, #68]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	2103      	movs	r1, #3
 80240e6:	4618      	mov	r0, r3
 80240e8:	f7f1 fc88 	bl	80159fc <lv_btn_set_state>

    closeBtnLbl = lv_label_create(S_closeBtn, NULL);
 80240ec:	4b0e      	ldr	r3, [pc, #56]	; (8024128 <SettingsScreen_buttonsInit+0x1b4>)
 80240ee:	681b      	ldr	r3, [r3, #0]
 80240f0:	2100      	movs	r1, #0
 80240f2:	4618      	mov	r0, r3
 80240f4:	f7f5 fa0a 	bl	801950c <lv_label_create>
 80240f8:	60b8      	str	r0, [r7, #8]
    lv_label_set_text(closeBtnLbl, "close");
 80240fa:	490c      	ldr	r1, [pc, #48]	; (802412c <SettingsScreen_buttonsInit+0x1b8>)
 80240fc:	68b8      	ldr	r0, [r7, #8]
 80240fe:	f7f5 fb37 	bl	8019770 <lv_label_set_text>
}
 8024102:	bf00      	nop
 8024104:	3710      	adds	r7, #16
 8024106:	46bd      	mov	sp, r7
 8024108:	bd80      	pop	{r7, pc}
 802410a:	bf00      	nop
 802410c:	20006c74 	.word	0x20006c74
 8024110:	20006508 	.word	0x20006508
 8024114:	0802a0dc 	.word	0x0802a0dc
 8024118:	0802a0a4 	.word	0x0802a0a4
 802411c:	20006544 	.word	0x20006544
 8024120:	20007020 	.word	0x20007020
 8024124:	0802a134 	.word	0x0802a134
 8024128:	20007008 	.word	0x20007008
 802412c:	0802a13c 	.word	0x0802a13c

08024130 <SettingsScreen_ButtonController>:

/*This function using for control to buttons*/
void SettingsScreen_ButtonController(void){
 8024130:	b580      	push	{r7, lr}
 8024132:	af00      	add	r7, sp, #0
	  if(1==tos_LeftButton_Listenner_For_MenuControl()) {	SettingsScreen_DateUpdateVal(false);
 8024134:	f002 fb30 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8024138:	4603      	mov	r3, r0
 802413a:	2b01      	cmp	r3, #1
 802413c:	d134      	bne.n	80241a8 <SettingsScreen_ButtonController+0x78>
 802413e:	2000      	movs	r0, #0
 8024140:	f000 f96c 	bl	802441c <SettingsScreen_DateUpdateVal>
		  switch(S_whichItem){
 8024144:	4b36      	ldr	r3, [pc, #216]	; (8024220 <SettingsScreen_ButtonController+0xf0>)
 8024146:	781b      	ldrb	r3, [r3, #0]
 8024148:	2b04      	cmp	r3, #4
 802414a:	d82d      	bhi.n	80241a8 <SettingsScreen_ButtonController+0x78>
 802414c:	a201      	add	r2, pc, #4	; (adr r2, 8024154 <SettingsScreen_ButtonController+0x24>)
 802414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024152:	bf00      	nop
 8024154:	08024169 	.word	0x08024169
 8024158:	08024171 	.word	0x08024171
 802415c:	08024179 	.word	0x08024179
 8024160:	08024181 	.word	0x08024181
 8024164:	08024189 	.word	0x08024189
		  case 0: SettingsScreen_TimeUpdateVal(false); break;
 8024168:	2000      	movs	r0, #0
 802416a:	f000 f8e1 	bl	8024330 <SettingsScreen_TimeUpdateVal>
 802416e:	e01b      	b.n	80241a8 <SettingsScreen_ButtonController+0x78>
		  case 1: SettingsScreen_DateUpdateVal(false); break;
 8024170:	2000      	movs	r0, #0
 8024172:	f000 f953 	bl	802441c <SettingsScreen_DateUpdateVal>
 8024176:	e017      	b.n	80241a8 <SettingsScreen_ButtonController+0x78>
		  case 2: SettingsScreen_BluetoothUpdateVal(false); break;
 8024178:	2000      	movs	r0, #0
 802417a:	f000 f9d9 	bl	8024530 <SettingsScreen_BluetoothUpdateVal>
 802417e:	e013      	b.n	80241a8 <SettingsScreen_ButtonController+0x78>
		  case 3: SettingsScreen_UnitUpdateVal(false); break;
 8024180:	2000      	movs	r0, #0
 8024182:	f000 f9fd 	bl	8024580 <SettingsScreen_UnitUpdateVal>
 8024186:	e00f      	b.n	80241a8 <SettingsScreen_ButtonController+0x78>
		  case 4: lv_btn_set_state(S_closeBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 8024188:	4b26      	ldr	r3, [pc, #152]	; (8024224 <SettingsScreen_ButtonController+0xf4>)
 802418a:	681b      	ldr	r3, [r3, #0]
 802418c:	2100      	movs	r1, #0
 802418e:	4618      	mov	r0, r3
 8024190:	f7f1 fc34 	bl	80159fc <lv_btn_set_state>
 8024194:	4b24      	ldr	r3, [pc, #144]	; (8024228 <SettingsScreen_ButtonController+0xf8>)
 8024196:	2200      	movs	r2, #0
 8024198:	701a      	strb	r2, [r3, #0]
			tos_MenuScreen_Init(true,S_hrtc);
 802419a:	4b24      	ldr	r3, [pc, #144]	; (802422c <SettingsScreen_ButtonController+0xfc>)
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	4619      	mov	r1, r3
 80241a0:	2001      	movs	r0, #1
 80241a2:	f7fd f953 	bl	802144c <tos_MenuScreen_Init>
		  break;
 80241a6:	bf00      	nop
		  }
	  }
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 80241a8:	f002 face 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 80241ac:	4603      	mov	r3, r0
 80241ae:	2b01      	cmp	r3, #1
 80241b0:	d12c      	bne.n	802420c <SettingsScreen_ButtonController+0xdc>
		  //SettingsScreen_DateUpdateVal(true);
		  switch(S_whichItem){
 80241b2:	4b1b      	ldr	r3, [pc, #108]	; (8024220 <SettingsScreen_ButtonController+0xf0>)
 80241b4:	781b      	ldrb	r3, [r3, #0]
 80241b6:	2b04      	cmp	r3, #4
 80241b8:	d828      	bhi.n	802420c <SettingsScreen_ButtonController+0xdc>
 80241ba:	a201      	add	r2, pc, #4	; (adr r2, 80241c0 <SettingsScreen_ButtonController+0x90>)
 80241bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80241c0:	080241d5 	.word	0x080241d5
 80241c4:	080241dd 	.word	0x080241dd
 80241c8:	080241e5 	.word	0x080241e5
 80241cc:	080241ed 	.word	0x080241ed
 80241d0:	080241f5 	.word	0x080241f5
		  case 0: SettingsScreen_TimeUpdateVal(true); break;
 80241d4:	2001      	movs	r0, #1
 80241d6:	f000 f8ab 	bl	8024330 <SettingsScreen_TimeUpdateVal>
 80241da:	e017      	b.n	802420c <SettingsScreen_ButtonController+0xdc>
		  case 1: SettingsScreen_DateUpdateVal(true); break;
 80241dc:	2001      	movs	r0, #1
 80241de:	f000 f91d 	bl	802441c <SettingsScreen_DateUpdateVal>
 80241e2:	e013      	b.n	802420c <SettingsScreen_ButtonController+0xdc>
		  case 2: SettingsScreen_BluetoothUpdateVal(true); break;
 80241e4:	2001      	movs	r0, #1
 80241e6:	f000 f9a3 	bl	8024530 <SettingsScreen_BluetoothUpdateVal>
 80241ea:	e00f      	b.n	802420c <SettingsScreen_ButtonController+0xdc>
		  case 3: SettingsScreen_UnitUpdateVal(true); break;
 80241ec:	2001      	movs	r0, #1
 80241ee:	f000 f9c7 	bl	8024580 <SettingsScreen_UnitUpdateVal>
 80241f2:	e00b      	b.n	802420c <SettingsScreen_ButtonController+0xdc>
		  case 4: lv_btn_set_state(S_saveBtn, LV_BTN_STATE_REL); isMenuOpen=false;
 80241f4:	4b0e      	ldr	r3, [pc, #56]	; (8024230 <SettingsScreen_ButtonController+0x100>)
 80241f6:	681b      	ldr	r3, [r3, #0]
 80241f8:	2100      	movs	r1, #0
 80241fa:	4618      	mov	r0, r3
 80241fc:	f7f1 fbfe 	bl	80159fc <lv_btn_set_state>
 8024200:	4b09      	ldr	r3, [pc, #36]	; (8024228 <SettingsScreen_ButtonController+0xf8>)
 8024202:	2200      	movs	r2, #0
 8024204:	701a      	strb	r2, [r3, #0]
		  SettingsScreen_SetNewValues();
 8024206:	f000 fbd5 	bl	80249b4 <SettingsScreen_SetNewValues>
		  break;
 802420a:	bf00      	nop
		  }
	  }
	  if(1==tos_EnterButton_Listenner_For_MenuControl()) {
 802420c:	f002 faec 	bl	80267e8 <tos_EnterButton_Listenner_For_MenuControl>
 8024210:	4603      	mov	r3, r0
 8024212:	2b01      	cmp	r3, #1
 8024214:	d101      	bne.n	802421a <SettingsScreen_ButtonController+0xea>
		  SettingsScreen_WhichItemSetVal();
 8024216:	f000 f80d 	bl	8024234 <SettingsScreen_WhichItemSetVal>
		 // SettingsScreen_DateSetVal();
	  }

}
 802421a:	bf00      	nop
 802421c:	bd80      	pop	{r7, pc}
 802421e:	bf00      	nop
 8024220:	20007075 	.word	0x20007075
 8024224:	20007008 	.word	0x20007008
 8024228:	2000702c 	.word	0x2000702c
 802422c:	20007030 	.word	0x20007030
 8024230:	20007020 	.word	0x20007020

08024234 <SettingsScreen_WhichItemSetVal>:


/*This function using for  control the set which item chouser*/
void SettingsScreen_WhichItemSetVal(void){	//	"%d -%d \n",StimeSetVal,S_whichItem
 8024234:	b580      	push	{r7, lr}
 8024236:	af00      	add	r7, sp, #0
	if(4==S_whichItem)S_whichItem=0;
 8024238:	4b1c      	ldr	r3, [pc, #112]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 802423a:	781b      	ldrb	r3, [r3, #0]
 802423c:	2b04      	cmp	r3, #4
 802423e:	d102      	bne.n	8024246 <SettingsScreen_WhichItemSetVal+0x12>
 8024240:	4b1a      	ldr	r3, [pc, #104]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 8024242:	2200      	movs	r2, #0
 8024244:	701a      	strb	r2, [r3, #0]

	if(0==S_whichItem)SettingsScreen_TimeSetVal();
 8024246:	4b19      	ldr	r3, [pc, #100]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 8024248:	781b      	ldrb	r3, [r3, #0]
 802424a:	2b00      	cmp	r3, #0
 802424c:	d102      	bne.n	8024254 <SettingsScreen_WhichItemSetVal+0x20>
 802424e:	f000 f833 	bl	80242b8 <SettingsScreen_TimeSetVal>
 8024252:	e00c      	b.n	802426e <SettingsScreen_WhichItemSetVal+0x3a>
	else if(1==S_whichItem)SettingsScreen_DateSetVal();
 8024254:	4b15      	ldr	r3, [pc, #84]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 8024256:	781b      	ldrb	r3, [r3, #0]
 8024258:	2b01      	cmp	r3, #1
 802425a:	d102      	bne.n	8024262 <SettingsScreen_WhichItemSetVal+0x2e>
 802425c:	f000 f84a 	bl	80242f4 <SettingsScreen_DateSetVal>
 8024260:	e005      	b.n	802426e <SettingsScreen_WhichItemSetVal+0x3a>
	else S_whichItem++;
 8024262:	4b12      	ldr	r3, [pc, #72]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 8024264:	781b      	ldrb	r3, [r3, #0]
 8024266:	3301      	adds	r3, #1
 8024268:	b2da      	uxtb	r2, r3
 802426a:	4b10      	ldr	r3, [pc, #64]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 802426c:	701a      	strb	r2, [r3, #0]

	SbluetoothSetVal=false;
 802426e:	4b10      	ldr	r3, [pc, #64]	; (80242b0 <SettingsScreen_WhichItemSetVal+0x7c>)
 8024270:	2200      	movs	r2, #0
 8024272:	701a      	strb	r2, [r3, #0]
	if(2==S_whichItem)SbluetoothSetVal=true;
 8024274:	4b0d      	ldr	r3, [pc, #52]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 8024276:	781b      	ldrb	r3, [r3, #0]
 8024278:	2b02      	cmp	r3, #2
 802427a:	d102      	bne.n	8024282 <SettingsScreen_WhichItemSetVal+0x4e>
 802427c:	4b0c      	ldr	r3, [pc, #48]	; (80242b0 <SettingsScreen_WhichItemSetVal+0x7c>)
 802427e:	2201      	movs	r2, #1
 8024280:	701a      	strb	r2, [r3, #0]
	SunitSetVal=false;
 8024282:	4b0c      	ldr	r3, [pc, #48]	; (80242b4 <SettingsScreen_WhichItemSetVal+0x80>)
 8024284:	2200      	movs	r2, #0
 8024286:	701a      	strb	r2, [r3, #0]
	if(3==S_whichItem)SunitSetVal=true;
 8024288:	4b08      	ldr	r3, [pc, #32]	; (80242ac <SettingsScreen_WhichItemSetVal+0x78>)
 802428a:	781b      	ldrb	r3, [r3, #0]
 802428c:	2b03      	cmp	r3, #3
 802428e:	d102      	bne.n	8024296 <SettingsScreen_WhichItemSetVal+0x62>
 8024290:	4b08      	ldr	r3, [pc, #32]	; (80242b4 <SettingsScreen_WhichItemSetVal+0x80>)
 8024292:	2201      	movs	r2, #1
 8024294:	701a      	strb	r2, [r3, #0]

	SettingsScreen_newTimeLblController();
 8024296:	f000 f995 	bl	80245c4 <SettingsScreen_newTimeLblController>
	SettingsScreen_newDateLblController();
 802429a:	f000 fa51 	bl	8024740 <SettingsScreen_newDateLblController>
	SettingsScreen_newBluetoothValController();
 802429e:	f000 fb0d 	bl	80248bc <SettingsScreen_newBluetoothValController>
	SettingsScreen_newUnitTypeController();
 80242a2:	f000 fb49 	bl	8024938 <SettingsScreen_newUnitTypeController>
}
 80242a6:	bf00      	nop
 80242a8:	bd80      	pop	{r7, pc}
 80242aa:	bf00      	nop
 80242ac:	20007075 	.word	0x20007075
 80242b0:	20007074 	.word	0x20007074
 80242b4:	20007012 	.word	0x20007012

080242b8 <SettingsScreen_TimeSetVal>:
/*This function using for  control the set time values chouser*/
void SettingsScreen_TimeSetVal(void){
 80242b8:	b580      	push	{r7, lr}
 80242ba:	af00      	add	r7, sp, #0
	StimeSetVal++;
 80242bc:	4b0b      	ldr	r3, [pc, #44]	; (80242ec <SettingsScreen_TimeSetVal+0x34>)
 80242be:	781b      	ldrb	r3, [r3, #0]
 80242c0:	3301      	adds	r3, #1
 80242c2:	b2da      	uxtb	r2, r3
 80242c4:	4b09      	ldr	r3, [pc, #36]	; (80242ec <SettingsScreen_TimeSetVal+0x34>)
 80242c6:	701a      	strb	r2, [r3, #0]
	if(4==StimeSetVal){StimeSetVal=0; S_whichItem++;}
 80242c8:	4b08      	ldr	r3, [pc, #32]	; (80242ec <SettingsScreen_TimeSetVal+0x34>)
 80242ca:	781b      	ldrb	r3, [r3, #0]
 80242cc:	2b04      	cmp	r3, #4
 80242ce:	d108      	bne.n	80242e2 <SettingsScreen_TimeSetVal+0x2a>
 80242d0:	4b06      	ldr	r3, [pc, #24]	; (80242ec <SettingsScreen_TimeSetVal+0x34>)
 80242d2:	2200      	movs	r2, #0
 80242d4:	701a      	strb	r2, [r3, #0]
 80242d6:	4b06      	ldr	r3, [pc, #24]	; (80242f0 <SettingsScreen_TimeSetVal+0x38>)
 80242d8:	781b      	ldrb	r3, [r3, #0]
 80242da:	3301      	adds	r3, #1
 80242dc:	b2da      	uxtb	r2, r3
 80242de:	4b04      	ldr	r3, [pc, #16]	; (80242f0 <SettingsScreen_TimeSetVal+0x38>)
 80242e0:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newTimeLblController();
 80242e2:	f000 f96f 	bl	80245c4 <SettingsScreen_newTimeLblController>
}
 80242e6:	bf00      	nop
 80242e8:	bd80      	pop	{r7, pc}
 80242ea:	bf00      	nop
 80242ec:	2000702d 	.word	0x2000702d
 80242f0:	20007075 	.word	0x20007075

080242f4 <SettingsScreen_DateSetVal>:
/*This function using for  control the set date values chouser*/
void SettingsScreen_DateSetVal(void){
 80242f4:	b580      	push	{r7, lr}
 80242f6:	af00      	add	r7, sp, #0
	SdateSetVal++;
 80242f8:	4b0b      	ldr	r3, [pc, #44]	; (8024328 <SettingsScreen_DateSetVal+0x34>)
 80242fa:	781b      	ldrb	r3, [r3, #0]
 80242fc:	3301      	adds	r3, #1
 80242fe:	b2da      	uxtb	r2, r3
 8024300:	4b09      	ldr	r3, [pc, #36]	; (8024328 <SettingsScreen_DateSetVal+0x34>)
 8024302:	701a      	strb	r2, [r3, #0]
	if(4==SdateSetVal){SdateSetVal=0; S_whichItem++;}
 8024304:	4b08      	ldr	r3, [pc, #32]	; (8024328 <SettingsScreen_DateSetVal+0x34>)
 8024306:	781b      	ldrb	r3, [r3, #0]
 8024308:	2b04      	cmp	r3, #4
 802430a:	d108      	bne.n	802431e <SettingsScreen_DateSetVal+0x2a>
 802430c:	4b06      	ldr	r3, [pc, #24]	; (8024328 <SettingsScreen_DateSetVal+0x34>)
 802430e:	2200      	movs	r2, #0
 8024310:	701a      	strb	r2, [r3, #0]
 8024312:	4b06      	ldr	r3, [pc, #24]	; (802432c <SettingsScreen_DateSetVal+0x38>)
 8024314:	781b      	ldrb	r3, [r3, #0]
 8024316:	3301      	adds	r3, #1
 8024318:	b2da      	uxtb	r2, r3
 802431a:	4b04      	ldr	r3, [pc, #16]	; (802432c <SettingsScreen_DateSetVal+0x38>)
 802431c:	701a      	strb	r2, [r3, #0]
	SettingsScreen_newDateLblController();
 802431e:	f000 fa0f 	bl	8024740 <SettingsScreen_newDateLblController>
}
 8024322:	bf00      	nop
 8024324:	bd80      	pop	{r7, pc}
 8024326:	bf00      	nop
 8024328:	20007004 	.word	0x20007004
 802432c:	20007075 	.word	0x20007075

08024330 <SettingsScreen_TimeUpdateVal>:
/*This function using for update and plus or minus the time values*/
void SettingsScreen_TimeUpdateVal(bool plus){
 8024330:	b580      	push	{r7, lr}
 8024332:	b082      	sub	sp, #8
 8024334:	af00      	add	r7, sp, #0
 8024336:	4603      	mov	r3, r0
 8024338:	71fb      	strb	r3, [r7, #7]
	switch(StimeSetVal){
 802433a:	4b34      	ldr	r3, [pc, #208]	; (802440c <SettingsScreen_TimeUpdateVal+0xdc>)
 802433c:	781b      	ldrb	r3, [r3, #0]
 802433e:	2b02      	cmp	r3, #2
 8024340:	d020      	beq.n	8024384 <SettingsScreen_TimeUpdateVal+0x54>
 8024342:	2b03      	cmp	r3, #3
 8024344:	d03a      	beq.n	80243bc <SettingsScreen_TimeUpdateVal+0x8c>
 8024346:	2b01      	cmp	r3, #1
 8024348:	d000      	beq.n	802434c <SettingsScreen_TimeUpdateVal+0x1c>
	case 3:
		if(plus){
			Sseconds++; if(60==Sseconds)Sseconds=0;
		}else{if(Sseconds>0)Sseconds--;}
		break;
	default: break;
 802434a:	e058      	b.n	80243fe <SettingsScreen_TimeUpdateVal+0xce>
		if(plus){
 802434c:	79fb      	ldrb	r3, [r7, #7]
 802434e:	2b00      	cmp	r3, #0
 8024350:	d00d      	beq.n	802436e <SettingsScreen_TimeUpdateVal+0x3e>
			Shours++; if(24==Shours)Shours=0;
 8024352:	4b2f      	ldr	r3, [pc, #188]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024354:	781b      	ldrb	r3, [r3, #0]
 8024356:	3301      	adds	r3, #1
 8024358:	b2da      	uxtb	r2, r3
 802435a:	4b2d      	ldr	r3, [pc, #180]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 802435c:	701a      	strb	r2, [r3, #0]
 802435e:	4b2c      	ldr	r3, [pc, #176]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024360:	781b      	ldrb	r3, [r3, #0]
 8024362:	2b18      	cmp	r3, #24
 8024364:	d146      	bne.n	80243f4 <SettingsScreen_TimeUpdateVal+0xc4>
 8024366:	4b2a      	ldr	r3, [pc, #168]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024368:	2200      	movs	r2, #0
 802436a:	701a      	strb	r2, [r3, #0]
		break;
 802436c:	e042      	b.n	80243f4 <SettingsScreen_TimeUpdateVal+0xc4>
		}else{if(Shours>0)Shours--;}
 802436e:	4b28      	ldr	r3, [pc, #160]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024370:	781b      	ldrb	r3, [r3, #0]
 8024372:	2b00      	cmp	r3, #0
 8024374:	d03e      	beq.n	80243f4 <SettingsScreen_TimeUpdateVal+0xc4>
 8024376:	4b26      	ldr	r3, [pc, #152]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024378:	781b      	ldrb	r3, [r3, #0]
 802437a:	3b01      	subs	r3, #1
 802437c:	b2da      	uxtb	r2, r3
 802437e:	4b24      	ldr	r3, [pc, #144]	; (8024410 <SettingsScreen_TimeUpdateVal+0xe0>)
 8024380:	701a      	strb	r2, [r3, #0]
		break;
 8024382:	e037      	b.n	80243f4 <SettingsScreen_TimeUpdateVal+0xc4>
		if(plus){
 8024384:	79fb      	ldrb	r3, [r7, #7]
 8024386:	2b00      	cmp	r3, #0
 8024388:	d00d      	beq.n	80243a6 <SettingsScreen_TimeUpdateVal+0x76>
			Sminutes++; if(60==Sminutes)Sminutes=0;
 802438a:	4b22      	ldr	r3, [pc, #136]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 802438c:	781b      	ldrb	r3, [r3, #0]
 802438e:	3301      	adds	r3, #1
 8024390:	b2da      	uxtb	r2, r3
 8024392:	4b20      	ldr	r3, [pc, #128]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024394:	701a      	strb	r2, [r3, #0]
 8024396:	4b1f      	ldr	r3, [pc, #124]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 8024398:	781b      	ldrb	r3, [r3, #0]
 802439a:	2b3c      	cmp	r3, #60	; 0x3c
 802439c:	d12c      	bne.n	80243f8 <SettingsScreen_TimeUpdateVal+0xc8>
 802439e:	4b1d      	ldr	r3, [pc, #116]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 80243a0:	2200      	movs	r2, #0
 80243a2:	701a      	strb	r2, [r3, #0]
		break;
 80243a4:	e028      	b.n	80243f8 <SettingsScreen_TimeUpdateVal+0xc8>
		}else{if(Sminutes>0)Sminutes--;}
 80243a6:	4b1b      	ldr	r3, [pc, #108]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 80243a8:	781b      	ldrb	r3, [r3, #0]
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d024      	beq.n	80243f8 <SettingsScreen_TimeUpdateVal+0xc8>
 80243ae:	4b19      	ldr	r3, [pc, #100]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 80243b0:	781b      	ldrb	r3, [r3, #0]
 80243b2:	3b01      	subs	r3, #1
 80243b4:	b2da      	uxtb	r2, r3
 80243b6:	4b17      	ldr	r3, [pc, #92]	; (8024414 <SettingsScreen_TimeUpdateVal+0xe4>)
 80243b8:	701a      	strb	r2, [r3, #0]
		break;
 80243ba:	e01d      	b.n	80243f8 <SettingsScreen_TimeUpdateVal+0xc8>
		if(plus){
 80243bc:	79fb      	ldrb	r3, [r7, #7]
 80243be:	2b00      	cmp	r3, #0
 80243c0:	d00d      	beq.n	80243de <SettingsScreen_TimeUpdateVal+0xae>
			Sseconds++; if(60==Sseconds)Sseconds=0;
 80243c2:	4b15      	ldr	r3, [pc, #84]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243c4:	781b      	ldrb	r3, [r3, #0]
 80243c6:	3301      	adds	r3, #1
 80243c8:	b2da      	uxtb	r2, r3
 80243ca:	4b13      	ldr	r3, [pc, #76]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243cc:	701a      	strb	r2, [r3, #0]
 80243ce:	4b12      	ldr	r3, [pc, #72]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243d0:	781b      	ldrb	r3, [r3, #0]
 80243d2:	2b3c      	cmp	r3, #60	; 0x3c
 80243d4:	d112      	bne.n	80243fc <SettingsScreen_TimeUpdateVal+0xcc>
 80243d6:	4b10      	ldr	r3, [pc, #64]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243d8:	2200      	movs	r2, #0
 80243da:	701a      	strb	r2, [r3, #0]
		break;
 80243dc:	e00e      	b.n	80243fc <SettingsScreen_TimeUpdateVal+0xcc>
		}else{if(Sseconds>0)Sseconds--;}
 80243de:	4b0e      	ldr	r3, [pc, #56]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243e0:	781b      	ldrb	r3, [r3, #0]
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d00a      	beq.n	80243fc <SettingsScreen_TimeUpdateVal+0xcc>
 80243e6:	4b0c      	ldr	r3, [pc, #48]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243e8:	781b      	ldrb	r3, [r3, #0]
 80243ea:	3b01      	subs	r3, #1
 80243ec:	b2da      	uxtb	r2, r3
 80243ee:	4b0a      	ldr	r3, [pc, #40]	; (8024418 <SettingsScreen_TimeUpdateVal+0xe8>)
 80243f0:	701a      	strb	r2, [r3, #0]
		break;
 80243f2:	e003      	b.n	80243fc <SettingsScreen_TimeUpdateVal+0xcc>
		break;
 80243f4:	bf00      	nop
 80243f6:	e002      	b.n	80243fe <SettingsScreen_TimeUpdateVal+0xce>
		break;
 80243f8:	bf00      	nop
 80243fa:	e000      	b.n	80243fe <SettingsScreen_TimeUpdateVal+0xce>
		break;
 80243fc:	bf00      	nop
	}
	SettingsScreen_newTimeLblController();
 80243fe:	f000 f8e1 	bl	80245c4 <SettingsScreen_newTimeLblController>
}
 8024402:	bf00      	nop
 8024404:	3708      	adds	r7, #8
 8024406:	46bd      	mov	sp, r7
 8024408:	bd80      	pop	{r7, pc}
 802440a:	bf00      	nop
 802440c:	2000702d 	.word	0x2000702d
 8024410:	20007011 	.word	0x20007011
 8024414:	2000701c 	.word	0x2000701c
 8024418:	2000702f 	.word	0x2000702f

0802441c <SettingsScreen_DateUpdateVal>:
/*This function using for  update and plus or minus the date values*/
void SettingsScreen_DateUpdateVal(bool plus){
 802441c:	b580      	push	{r7, lr}
 802441e:	b082      	sub	sp, #8
 8024420:	af00      	add	r7, sp, #0
 8024422:	4603      	mov	r3, r0
 8024424:	71fb      	strb	r3, [r7, #7]
	switch(SdateSetVal){
 8024426:	4b3d      	ldr	r3, [pc, #244]	; (802451c <SettingsScreen_DateUpdateVal+0x100>)
 8024428:	781b      	ldrb	r3, [r3, #0]
 802442a:	2b02      	cmp	r3, #2
 802442c:	d03b      	beq.n	80244a6 <SettingsScreen_DateUpdateVal+0x8a>
 802442e:	2b03      	cmp	r3, #3
 8024430:	d052      	beq.n	80244d8 <SettingsScreen_DateUpdateVal+0xbc>
 8024432:	2b01      	cmp	r3, #1
 8024434:	d000      	beq.n	8024438 <SettingsScreen_DateUpdateVal+0x1c>
	case 3:
		if(plus){
			Syears++;
		}else{if(2020<Syears)Syears--;}
		break;
	default: break;
 8024436:	e06b      	b.n	8024510 <SettingsScreen_DateUpdateVal+0xf4>
		if(plus){if(0==Syears%4 && (Sdates<daysofmonths[Smonths-1]+1))Sdates++;
 8024438:	79fb      	ldrb	r3, [r7, #7]
 802443a:	2b00      	cmp	r3, #0
 802443c:	d028      	beq.n	8024490 <SettingsScreen_DateUpdateVal+0x74>
 802443e:	4b38      	ldr	r3, [pc, #224]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 8024440:	881b      	ldrh	r3, [r3, #0]
 8024442:	f003 0303 	and.w	r3, r3, #3
 8024446:	b29b      	uxth	r3, r3
 8024448:	2b00      	cmp	r3, #0
 802444a:	d111      	bne.n	8024470 <SettingsScreen_DateUpdateVal+0x54>
 802444c:	4b35      	ldr	r3, [pc, #212]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 802444e:	781b      	ldrb	r3, [r3, #0]
 8024450:	4619      	mov	r1, r3
 8024452:	4b35      	ldr	r3, [pc, #212]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 8024454:	781b      	ldrb	r3, [r3, #0]
 8024456:	3b01      	subs	r3, #1
 8024458:	4a34      	ldr	r2, [pc, #208]	; (802452c <SettingsScreen_DateUpdateVal+0x110>)
 802445a:	5cd3      	ldrb	r3, [r2, r3]
 802445c:	3301      	adds	r3, #1
 802445e:	4299      	cmp	r1, r3
 8024460:	da06      	bge.n	8024470 <SettingsScreen_DateUpdateVal+0x54>
 8024462:	4b30      	ldr	r3, [pc, #192]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 8024464:	781b      	ldrb	r3, [r3, #0]
 8024466:	3301      	adds	r3, #1
 8024468:	b2da      	uxtb	r2, r3
 802446a:	4b2e      	ldr	r3, [pc, #184]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 802446c:	701a      	strb	r2, [r3, #0]
		break;
 802446e:	e04a      	b.n	8024506 <SettingsScreen_DateUpdateVal+0xea>
		else if(Sdates<daysofmonths[Smonths-1])Sdates++;
 8024470:	4b2d      	ldr	r3, [pc, #180]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 8024472:	781b      	ldrb	r3, [r3, #0]
 8024474:	3b01      	subs	r3, #1
 8024476:	4a2d      	ldr	r2, [pc, #180]	; (802452c <SettingsScreen_DateUpdateVal+0x110>)
 8024478:	5cd2      	ldrb	r2, [r2, r3]
 802447a:	4b2a      	ldr	r3, [pc, #168]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 802447c:	781b      	ldrb	r3, [r3, #0]
 802447e:	429a      	cmp	r2, r3
 8024480:	d941      	bls.n	8024506 <SettingsScreen_DateUpdateVal+0xea>
 8024482:	4b28      	ldr	r3, [pc, #160]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 8024484:	781b      	ldrb	r3, [r3, #0]
 8024486:	3301      	adds	r3, #1
 8024488:	b2da      	uxtb	r2, r3
 802448a:	4b26      	ldr	r3, [pc, #152]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 802448c:	701a      	strb	r2, [r3, #0]
		break;
 802448e:	e03a      	b.n	8024506 <SettingsScreen_DateUpdateVal+0xea>
		}else{if(1<Sdates)Sdates--;}
 8024490:	4b24      	ldr	r3, [pc, #144]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 8024492:	781b      	ldrb	r3, [r3, #0]
 8024494:	2b01      	cmp	r3, #1
 8024496:	d936      	bls.n	8024506 <SettingsScreen_DateUpdateVal+0xea>
 8024498:	4b22      	ldr	r3, [pc, #136]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 802449a:	781b      	ldrb	r3, [r3, #0]
 802449c:	3b01      	subs	r3, #1
 802449e:	b2da      	uxtb	r2, r3
 80244a0:	4b20      	ldr	r3, [pc, #128]	; (8024524 <SettingsScreen_DateUpdateVal+0x108>)
 80244a2:	701a      	strb	r2, [r3, #0]
		break;
 80244a4:	e02f      	b.n	8024506 <SettingsScreen_DateUpdateVal+0xea>
		if(plus){
 80244a6:	79fb      	ldrb	r3, [r7, #7]
 80244a8:	2b00      	cmp	r3, #0
 80244aa:	d00a      	beq.n	80244c2 <SettingsScreen_DateUpdateVal+0xa6>
			if(Smonths<12)Smonths++;
 80244ac:	4b1e      	ldr	r3, [pc, #120]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244ae:	781b      	ldrb	r3, [r3, #0]
 80244b0:	2b0b      	cmp	r3, #11
 80244b2:	d82a      	bhi.n	802450a <SettingsScreen_DateUpdateVal+0xee>
 80244b4:	4b1c      	ldr	r3, [pc, #112]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244b6:	781b      	ldrb	r3, [r3, #0]
 80244b8:	3301      	adds	r3, #1
 80244ba:	b2da      	uxtb	r2, r3
 80244bc:	4b1a      	ldr	r3, [pc, #104]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244be:	701a      	strb	r2, [r3, #0]
		break;
 80244c0:	e023      	b.n	802450a <SettingsScreen_DateUpdateVal+0xee>
		}else{if(1<Smonths)Smonths--;}
 80244c2:	4b19      	ldr	r3, [pc, #100]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244c4:	781b      	ldrb	r3, [r3, #0]
 80244c6:	2b01      	cmp	r3, #1
 80244c8:	d91f      	bls.n	802450a <SettingsScreen_DateUpdateVal+0xee>
 80244ca:	4b17      	ldr	r3, [pc, #92]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244cc:	781b      	ldrb	r3, [r3, #0]
 80244ce:	3b01      	subs	r3, #1
 80244d0:	b2da      	uxtb	r2, r3
 80244d2:	4b15      	ldr	r3, [pc, #84]	; (8024528 <SettingsScreen_DateUpdateVal+0x10c>)
 80244d4:	701a      	strb	r2, [r3, #0]
		break;
 80244d6:	e018      	b.n	802450a <SettingsScreen_DateUpdateVal+0xee>
		if(plus){
 80244d8:	79fb      	ldrb	r3, [r7, #7]
 80244da:	2b00      	cmp	r3, #0
 80244dc:	d006      	beq.n	80244ec <SettingsScreen_DateUpdateVal+0xd0>
			Syears++;
 80244de:	4b10      	ldr	r3, [pc, #64]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 80244e0:	881b      	ldrh	r3, [r3, #0]
 80244e2:	3301      	adds	r3, #1
 80244e4:	b29a      	uxth	r2, r3
 80244e6:	4b0e      	ldr	r3, [pc, #56]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 80244e8:	801a      	strh	r2, [r3, #0]
		break;
 80244ea:	e010      	b.n	802450e <SettingsScreen_DateUpdateVal+0xf2>
		}else{if(2020<Syears)Syears--;}
 80244ec:	4b0c      	ldr	r3, [pc, #48]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 80244ee:	881b      	ldrh	r3, [r3, #0]
 80244f0:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80244f4:	4293      	cmp	r3, r2
 80244f6:	d90a      	bls.n	802450e <SettingsScreen_DateUpdateVal+0xf2>
 80244f8:	4b09      	ldr	r3, [pc, #36]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 80244fa:	881b      	ldrh	r3, [r3, #0]
 80244fc:	3b01      	subs	r3, #1
 80244fe:	b29a      	uxth	r2, r3
 8024500:	4b07      	ldr	r3, [pc, #28]	; (8024520 <SettingsScreen_DateUpdateVal+0x104>)
 8024502:	801a      	strh	r2, [r3, #0]
		break;
 8024504:	e003      	b.n	802450e <SettingsScreen_DateUpdateVal+0xf2>
		break;
 8024506:	bf00      	nop
 8024508:	e002      	b.n	8024510 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 802450a:	bf00      	nop
 802450c:	e000      	b.n	8024510 <SettingsScreen_DateUpdateVal+0xf4>
		break;
 802450e:	bf00      	nop
	}
	SettingsScreen_newDateLblController();
 8024510:	f000 f916 	bl	8024740 <SettingsScreen_newDateLblController>
}
 8024514:	bf00      	nop
 8024516:	3708      	adds	r7, #8
 8024518:	46bd      	mov	sp, r7
 802451a:	bd80      	pop	{r7, pc}
 802451c:	20007004 	.word	0x20007004
 8024520:	20007024 	.word	0x20007024
 8024524:	20007010 	.word	0x20007010
 8024528:	2000702e 	.word	0x2000702e
 802452c:	2000283c 	.word	0x2000283c

08024530 <SettingsScreen_BluetoothUpdateVal>:
/**/
void SettingsScreen_BluetoothUpdateVal(bool val){
 8024530:	b580      	push	{r7, lr}
 8024532:	b082      	sub	sp, #8
 8024534:	af00      	add	r7, sp, #0
 8024536:	4603      	mov	r3, r0
 8024538:	71fb      	strb	r3, [r7, #7]
	SbluetoothSetVal=true;
 802453a:	4b0e      	ldr	r3, [pc, #56]	; (8024574 <SettingsScreen_BluetoothUpdateVal+0x44>)
 802453c:	2201      	movs	r2, #1
 802453e:	701a      	strb	r2, [r3, #0]

    if(val)lv_sw_on(SbluetoothSwitch, LV_ANIM_ON);
 8024540:	79fb      	ldrb	r3, [r7, #7]
 8024542:	2b00      	cmp	r3, #0
 8024544:	d006      	beq.n	8024554 <SettingsScreen_BluetoothUpdateVal+0x24>
 8024546:	4b0c      	ldr	r3, [pc, #48]	; (8024578 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8024548:	681b      	ldr	r3, [r3, #0]
 802454a:	2101      	movs	r1, #1
 802454c:	4618      	mov	r0, r3
 802454e:	f7fa fadd 	bl	801eb0c <lv_sw_on>
 8024552:	e005      	b.n	8024560 <SettingsScreen_BluetoothUpdateVal+0x30>
    else lv_sw_off(SbluetoothSwitch, LV_ANIM_ON);
 8024554:	4b08      	ldr	r3, [pc, #32]	; (8024578 <SettingsScreen_BluetoothUpdateVal+0x48>)
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	2101      	movs	r1, #1
 802455a:	4618      	mov	r0, r3
 802455c:	f7fa faf1 	bl	801eb42 <lv_sw_off>
    SettingsScreen_newBluetoothValController();
 8024560:	f000 f9ac 	bl	80248bc <SettingsScreen_newBluetoothValController>
    SbluetoothStatu =val;
 8024564:	4a05      	ldr	r2, [pc, #20]	; (802457c <SettingsScreen_BluetoothUpdateVal+0x4c>)
 8024566:	79fb      	ldrb	r3, [r7, #7]
 8024568:	7013      	strb	r3, [r2, #0]
}
 802456a:	bf00      	nop
 802456c:	3708      	adds	r7, #8
 802456e:	46bd      	mov	sp, r7
 8024570:	bd80      	pop	{r7, pc}
 8024572:	bf00      	nop
 8024574:	20007074 	.word	0x20007074
 8024578:	20007014 	.word	0x20007014
 802457c:	20007005 	.word	0x20007005

08024580 <SettingsScreen_UnitUpdateVal>:
/**/
void SettingsScreen_UnitUpdateVal(bool val){
 8024580:	b580      	push	{r7, lr}
 8024582:	b082      	sub	sp, #8
 8024584:	af00      	add	r7, sp, #0
 8024586:	4603      	mov	r3, r0
 8024588:	71fb      	strb	r3, [r7, #7]

    if(val)lv_sw_on(unitTypeSwitch, LV_ANIM_ON);
 802458a:	79fb      	ldrb	r3, [r7, #7]
 802458c:	2b00      	cmp	r3, #0
 802458e:	d006      	beq.n	802459e <SettingsScreen_UnitUpdateVal+0x1e>
 8024590:	4b0a      	ldr	r3, [pc, #40]	; (80245bc <SettingsScreen_UnitUpdateVal+0x3c>)
 8024592:	681b      	ldr	r3, [r3, #0]
 8024594:	2101      	movs	r1, #1
 8024596:	4618      	mov	r0, r3
 8024598:	f7fa fab8 	bl	801eb0c <lv_sw_on>
 802459c:	e005      	b.n	80245aa <SettingsScreen_UnitUpdateVal+0x2a>
    else lv_sw_off(unitTypeSwitch, LV_ANIM_ON);
 802459e:	4b07      	ldr	r3, [pc, #28]	; (80245bc <SettingsScreen_UnitUpdateVal+0x3c>)
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	2101      	movs	r1, #1
 80245a4:	4618      	mov	r0, r3
 80245a6:	f7fa facc 	bl	801eb42 <lv_sw_off>
    SettingsScreen_newUnitTypeController();
 80245aa:	f000 f9c5 	bl	8024938 <SettingsScreen_newUnitTypeController>
	SunitType=val;
 80245ae:	4a04      	ldr	r2, [pc, #16]	; (80245c0 <SettingsScreen_UnitUpdateVal+0x40>)
 80245b0:	79fb      	ldrb	r3, [r7, #7]
 80245b2:	7013      	strb	r3, [r2, #0]
}
 80245b4:	bf00      	nop
 80245b6:	3708      	adds	r7, #8
 80245b8:	46bd      	mov	sp, r7
 80245ba:	bd80      	pop	{r7, pc}
 80245bc:	2000700c 	.word	0x2000700c
 80245c0:	20007076 	.word	0x20007076

080245c4 <SettingsScreen_newTimeLblController>:

/*This function using for update set time label*/
void SettingsScreen_newTimeLblController(void){
 80245c4:	b580      	push	{r7, lr}
 80245c6:	b082      	sub	sp, #8
 80245c8:	af02      	add	r7, sp, #8
	switch(StimeSetVal){
 80245ca:	4b4f      	ldr	r3, [pc, #316]	; (8024708 <SettingsScreen_newTimeLblController+0x144>)
 80245cc:	781b      	ldrb	r3, [r3, #0]
 80245ce:	2b02      	cmp	r3, #2
 80245d0:	d029      	beq.n	8024626 <SettingsScreen_newTimeLblController+0x62>
 80245d2:	2b03      	cmp	r3, #3
 80245d4:	d04d      	beq.n	8024672 <SettingsScreen_newTimeLblController+0xae>
 80245d6:	2b01      	cmp	r3, #1
 80245d8:	d171      	bne.n	80246be <SettingsScreen_newTimeLblController+0xfa>
	case 1:
			if(Stheme)
 80245da:	4b4c      	ldr	r3, [pc, #304]	; (802470c <SettingsScreen_newTimeLblController+0x148>)
 80245dc:	781b      	ldrb	r3, [r3, #0]
 80245de:	2b00      	cmp	r3, #0
 80245e0:	d010      	beq.n	8024604 <SettingsScreen_newTimeLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 80245e2:	4b4b      	ldr	r3, [pc, #300]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 80245e4:	781b      	ldrb	r3, [r3, #0]
 80245e6:	4619      	mov	r1, r3
 80245e8:	4b4a      	ldr	r3, [pc, #296]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 80245ea:	781b      	ldrb	r3, [r3, #0]
 80245ec:	461a      	mov	r2, r3
 80245ee:	4b4a      	ldr	r3, [pc, #296]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 80245f0:	781b      	ldrb	r3, [r3, #0]
 80245f2:	9301      	str	r3, [sp, #4]
 80245f4:	9200      	str	r2, [sp, #0]
 80245f6:	460b      	mov	r3, r1
 80245f8:	4a48      	ldr	r2, [pc, #288]	; (802471c <SettingsScreen_newTimeLblController+0x158>)
 80245fa:	2140      	movs	r1, #64	; 0x40
 80245fc:	4848      	ldr	r0, [pc, #288]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 80245fe:	f003 fb39 	bl	8027c74 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 8024602:	e06d      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %02d#",
 8024604:	4b42      	ldr	r3, [pc, #264]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 8024606:	781b      	ldrb	r3, [r3, #0]
 8024608:	4619      	mov	r1, r3
 802460a:	4b42      	ldr	r3, [pc, #264]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 802460c:	781b      	ldrb	r3, [r3, #0]
 802460e:	461a      	mov	r2, r3
 8024610:	4b41      	ldr	r3, [pc, #260]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 8024612:	781b      	ldrb	r3, [r3, #0]
 8024614:	9301      	str	r3, [sp, #4]
 8024616:	9200      	str	r2, [sp, #0]
 8024618:	460b      	mov	r3, r1
 802461a:	4a42      	ldr	r2, [pc, #264]	; (8024724 <SettingsScreen_newTimeLblController+0x160>)
 802461c:	2140      	movs	r1, #64	; 0x40
 802461e:	4840      	ldr	r0, [pc, #256]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 8024620:	f003 fb28 	bl	8027c74 <sniprintf>
		break;
 8024624:	e05c      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
	case 2:
			if(Stheme)
 8024626:	4b39      	ldr	r3, [pc, #228]	; (802470c <SettingsScreen_newTimeLblController+0x148>)
 8024628:	781b      	ldrb	r3, [r3, #0]
 802462a:	2b00      	cmp	r3, #0
 802462c:	d010      	beq.n	8024650 <SettingsScreen_newTimeLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %02d#",
 802462e:	4b38      	ldr	r3, [pc, #224]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 8024630:	781b      	ldrb	r3, [r3, #0]
 8024632:	4619      	mov	r1, r3
 8024634:	4b37      	ldr	r3, [pc, #220]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 8024636:	781b      	ldrb	r3, [r3, #0]
 8024638:	461a      	mov	r2, r3
 802463a:	4b37      	ldr	r3, [pc, #220]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 802463c:	781b      	ldrb	r3, [r3, #0]
 802463e:	9301      	str	r3, [sp, #4]
 8024640:	9200      	str	r2, [sp, #0]
 8024642:	460b      	mov	r3, r1
 8024644:	4a38      	ldr	r2, [pc, #224]	; (8024728 <SettingsScreen_newTimeLblController+0x164>)
 8024646:	2140      	movs	r1, #64	; 0x40
 8024648:	4835      	ldr	r0, [pc, #212]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 802464a:	f003 fb13 	bl	8027c74 <sniprintf>
					Shours,Sminutes,Sseconds);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 802464e:	e047      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %02d#",
 8024650:	4b2f      	ldr	r3, [pc, #188]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 8024652:	781b      	ldrb	r3, [r3, #0]
 8024654:	4619      	mov	r1, r3
 8024656:	4b2f      	ldr	r3, [pc, #188]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 8024658:	781b      	ldrb	r3, [r3, #0]
 802465a:	461a      	mov	r2, r3
 802465c:	4b2e      	ldr	r3, [pc, #184]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 802465e:	781b      	ldrb	r3, [r3, #0]
 8024660:	9301      	str	r3, [sp, #4]
 8024662:	9200      	str	r2, [sp, #0]
 8024664:	460b      	mov	r3, r1
 8024666:	4a31      	ldr	r2, [pc, #196]	; (802472c <SettingsScreen_newTimeLblController+0x168>)
 8024668:	2140      	movs	r1, #64	; 0x40
 802466a:	482d      	ldr	r0, [pc, #180]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 802466c:	f003 fb02 	bl	8027c74 <sniprintf>
		break;
 8024670:	e036      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
	case 3:
		if(Stheme)
 8024672:	4b26      	ldr	r3, [pc, #152]	; (802470c <SettingsScreen_newTimeLblController+0x148>)
 8024674:	781b      	ldrb	r3, [r3, #0]
 8024676:	2b00      	cmp	r3, #0
 8024678:	d010      	beq.n	802469c <SettingsScreen_newTimeLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %02d#",
 802467a:	4b25      	ldr	r3, [pc, #148]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 802467c:	781b      	ldrb	r3, [r3, #0]
 802467e:	4619      	mov	r1, r3
 8024680:	4b24      	ldr	r3, [pc, #144]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 8024682:	781b      	ldrb	r3, [r3, #0]
 8024684:	461a      	mov	r2, r3
 8024686:	4b24      	ldr	r3, [pc, #144]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 8024688:	781b      	ldrb	r3, [r3, #0]
 802468a:	9301      	str	r3, [sp, #4]
 802468c:	9200      	str	r2, [sp, #0]
 802468e:	460b      	mov	r3, r1
 8024690:	4a27      	ldr	r2, [pc, #156]	; (8024730 <SettingsScreen_newTimeLblController+0x16c>)
 8024692:	2140      	movs	r1, #64	; 0x40
 8024694:	4822      	ldr	r0, [pc, #136]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 8024696:	f003 faed 	bl	8027c74 <sniprintf>
					Shours,Sminutes,Sseconds);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
					Shours,Sminutes,Sseconds);
		break;
 802469a:	e021      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %02d#",
 802469c:	4b1c      	ldr	r3, [pc, #112]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 802469e:	781b      	ldrb	r3, [r3, #0]
 80246a0:	4619      	mov	r1, r3
 80246a2:	4b1c      	ldr	r3, [pc, #112]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 80246a4:	781b      	ldrb	r3, [r3, #0]
 80246a6:	461a      	mov	r2, r3
 80246a8:	4b1b      	ldr	r3, [pc, #108]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 80246aa:	781b      	ldrb	r3, [r3, #0]
 80246ac:	9301      	str	r3, [sp, #4]
 80246ae:	9200      	str	r2, [sp, #0]
 80246b0:	460b      	mov	r3, r1
 80246b2:	4a20      	ldr	r2, [pc, #128]	; (8024734 <SettingsScreen_newTimeLblController+0x170>)
 80246b4:	2140      	movs	r1, #64	; 0x40
 80246b6:	481a      	ldr	r0, [pc, #104]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 80246b8:	f003 fadc 	bl	8027c74 <sniprintf>
		break;
 80246bc:	e010      	b.n	80246e0 <SettingsScreen_newTimeLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#",
 80246be:	4b14      	ldr	r3, [pc, #80]	; (8024710 <SettingsScreen_newTimeLblController+0x14c>)
 80246c0:	781b      	ldrb	r3, [r3, #0]
 80246c2:	4619      	mov	r1, r3
 80246c4:	4b13      	ldr	r3, [pc, #76]	; (8024714 <SettingsScreen_newTimeLblController+0x150>)
 80246c6:	781b      	ldrb	r3, [r3, #0]
 80246c8:	461a      	mov	r2, r3
 80246ca:	4b13      	ldr	r3, [pc, #76]	; (8024718 <SettingsScreen_newTimeLblController+0x154>)
 80246cc:	781b      	ldrb	r3, [r3, #0]
 80246ce:	9301      	str	r3, [sp, #4]
 80246d0:	9200      	str	r2, [sp, #0]
 80246d2:	460b      	mov	r3, r1
 80246d4:	4a18      	ldr	r2, [pc, #96]	; (8024738 <SettingsScreen_newTimeLblController+0x174>)
 80246d6:	2140      	movs	r1, #64	; 0x40
 80246d8:	4811      	ldr	r0, [pc, #68]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 80246da:	f003 facb 	bl	8027c74 <sniprintf>
					Shours,Sminutes,Sseconds); break;
 80246de:	bf00      	nop
	}
	lv_label_set_text(S_ClockLbl, settingsBuffer);
 80246e0:	4b16      	ldr	r3, [pc, #88]	; (802473c <SettingsScreen_newTimeLblController+0x178>)
 80246e2:	681b      	ldr	r3, [r3, #0]
 80246e4:	490e      	ldr	r1, [pc, #56]	; (8024720 <SettingsScreen_newTimeLblController+0x15c>)
 80246e6:	4618      	mov	r0, r3
 80246e8:	f7f5 f842 	bl	8019770 <lv_label_set_text>
	lv_obj_align(S_ClockLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 40);
 80246ec:	4b13      	ldr	r3, [pc, #76]	; (802473c <SettingsScreen_newTimeLblController+0x178>)
 80246ee:	6818      	ldr	r0, [r3, #0]
 80246f0:	2328      	movs	r3, #40	; 0x28
 80246f2:	9300      	str	r3, [sp, #0]
 80246f4:	f06f 0313 	mvn.w	r3, #19
 80246f8:	2203      	movs	r2, #3
 80246fa:	2100      	movs	r1, #0
 80246fc:	f7e1 fdee 	bl	80062dc <lv_obj_align>

}
 8024700:	bf00      	nop
 8024702:	46bd      	mov	sp, r7
 8024704:	bd80      	pop	{r7, pc}
 8024706:	bf00      	nop
 8024708:	2000702d 	.word	0x2000702d
 802470c:	20007013 	.word	0x20007013
 8024710:	20007011 	.word	0x20007011
 8024714:	2000701c 	.word	0x2000701c
 8024718:	2000702f 	.word	0x2000702f
 802471c:	0802a144 	.word	0x0802a144
 8024720:	20007034 	.word	0x20007034
 8024724:	0802a170 	.word	0x0802a170
 8024728:	0802a19c 	.word	0x0802a19c
 802472c:	0802a1c8 	.word	0x0802a1c8
 8024730:	0802a1f4 	.word	0x0802a1f4
 8024734:	0802a220 	.word	0x0802a220
 8024738:	0802a0b0 	.word	0x0802a0b0
 802473c:	20007018 	.word	0x20007018

08024740 <SettingsScreen_newDateLblController>:
/*This function using for update set date label*/
void SettingsScreen_newDateLblController(void){
 8024740:	b580      	push	{r7, lr}
 8024742:	b082      	sub	sp, #8
 8024744:	af02      	add	r7, sp, #8
	switch(SdateSetVal){
 8024746:	4b4f      	ldr	r3, [pc, #316]	; (8024884 <SettingsScreen_newDateLblController+0x144>)
 8024748:	781b      	ldrb	r3, [r3, #0]
 802474a:	2b02      	cmp	r3, #2
 802474c:	d029      	beq.n	80247a2 <SettingsScreen_newDateLblController+0x62>
 802474e:	2b03      	cmp	r3, #3
 8024750:	d04d      	beq.n	80247ee <SettingsScreen_newDateLblController+0xae>
 8024752:	2b01      	cmp	r3, #1
 8024754:	d171      	bne.n	802483a <SettingsScreen_newDateLblController+0xfa>
	case 1:
			if(Stheme)
 8024756:	4b4c      	ldr	r3, [pc, #304]	; (8024888 <SettingsScreen_newDateLblController+0x148>)
 8024758:	781b      	ldrb	r3, [r3, #0]
 802475a:	2b00      	cmp	r3, #0
 802475c:	d010      	beq.n	8024780 <SettingsScreen_newDateLblController+0x40>
				 snprintf(settingsBuffer,64, "#FFFFFF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 802475e:	4b4b      	ldr	r3, [pc, #300]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 8024760:	781b      	ldrb	r3, [r3, #0]
 8024762:	4619      	mov	r1, r3
 8024764:	4b4a      	ldr	r3, [pc, #296]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 8024766:	781b      	ldrb	r3, [r3, #0]
 8024768:	461a      	mov	r2, r3
 802476a:	4b4a      	ldr	r3, [pc, #296]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 802476c:	881b      	ldrh	r3, [r3, #0]
 802476e:	9301      	str	r3, [sp, #4]
 8024770:	9200      	str	r2, [sp, #0]
 8024772:	460b      	mov	r3, r1
 8024774:	4a48      	ldr	r2, [pc, #288]	; (8024898 <SettingsScreen_newDateLblController+0x158>)
 8024776:	2140      	movs	r1, #64	; 0x40
 8024778:	4848      	ldr	r0, [pc, #288]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 802477a:	f003 fa7b 	bl	8027c74 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 802477e:	e06d      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#000000 %02d#.#00FFFF %02d#.#FFA500 %04d#",
 8024780:	4b42      	ldr	r3, [pc, #264]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 8024782:	781b      	ldrb	r3, [r3, #0]
 8024784:	4619      	mov	r1, r3
 8024786:	4b42      	ldr	r3, [pc, #264]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 8024788:	781b      	ldrb	r3, [r3, #0]
 802478a:	461a      	mov	r2, r3
 802478c:	4b41      	ldr	r3, [pc, #260]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 802478e:	881b      	ldrh	r3, [r3, #0]
 8024790:	9301      	str	r3, [sp, #4]
 8024792:	9200      	str	r2, [sp, #0]
 8024794:	460b      	mov	r3, r1
 8024796:	4a42      	ldr	r2, [pc, #264]	; (80248a0 <SettingsScreen_newDateLblController+0x160>)
 8024798:	2140      	movs	r1, #64	; 0x40
 802479a:	4840      	ldr	r0, [pc, #256]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 802479c:	f003 fa6a 	bl	8027c74 <sniprintf>
		break;
 80247a0:	e05c      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
	case 2:
			if(Stheme)
 80247a2:	4b39      	ldr	r3, [pc, #228]	; (8024888 <SettingsScreen_newDateLblController+0x148>)
 80247a4:	781b      	ldrb	r3, [r3, #0]
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d010      	beq.n	80247cc <SettingsScreen_newDateLblController+0x8c>
				 snprintf(settingsBuffer,64, "#FF00FF %02d#.#FFFFFF %02d#.#FFA500 %04d#",
 80247aa:	4b38      	ldr	r3, [pc, #224]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 80247ac:	781b      	ldrb	r3, [r3, #0]
 80247ae:	4619      	mov	r1, r3
 80247b0:	4b37      	ldr	r3, [pc, #220]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 80247b2:	781b      	ldrb	r3, [r3, #0]
 80247b4:	461a      	mov	r2, r3
 80247b6:	4b37      	ldr	r3, [pc, #220]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 80247b8:	881b      	ldrh	r3, [r3, #0]
 80247ba:	9301      	str	r3, [sp, #4]
 80247bc:	9200      	str	r2, [sp, #0]
 80247be:	460b      	mov	r3, r1
 80247c0:	4a38      	ldr	r2, [pc, #224]	; (80248a4 <SettingsScreen_newDateLblController+0x164>)
 80247c2:	2140      	movs	r1, #64	; 0x40
 80247c4:	4835      	ldr	r0, [pc, #212]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 80247c6:	f003 fa55 	bl	8027c74 <sniprintf>
				Sdates,Smonths,Syears);
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
				Sdates,Smonths,Syears);
		break;
 80247ca:	e047      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
			else snprintf(settingsBuffer,64, "#FF00FF %02d#.#000000 %02d#.#FFA500 %04d#",
 80247cc:	4b2f      	ldr	r3, [pc, #188]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 80247ce:	781b      	ldrb	r3, [r3, #0]
 80247d0:	4619      	mov	r1, r3
 80247d2:	4b2f      	ldr	r3, [pc, #188]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 80247d4:	781b      	ldrb	r3, [r3, #0]
 80247d6:	461a      	mov	r2, r3
 80247d8:	4b2e      	ldr	r3, [pc, #184]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 80247da:	881b      	ldrh	r3, [r3, #0]
 80247dc:	9301      	str	r3, [sp, #4]
 80247de:	9200      	str	r2, [sp, #0]
 80247e0:	460b      	mov	r3, r1
 80247e2:	4a31      	ldr	r2, [pc, #196]	; (80248a8 <SettingsScreen_newDateLblController+0x168>)
 80247e4:	2140      	movs	r1, #64	; 0x40
 80247e6:	482d      	ldr	r0, [pc, #180]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 80247e8:	f003 fa44 	bl	8027c74 <sniprintf>
		break;
 80247ec:	e036      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
	case 3:
		if(Stheme)
 80247ee:	4b26      	ldr	r3, [pc, #152]	; (8024888 <SettingsScreen_newDateLblController+0x148>)
 80247f0:	781b      	ldrb	r3, [r3, #0]
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	d010      	beq.n	8024818 <SettingsScreen_newDateLblController+0xd8>
			 snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFFFFF %04d#",
 80247f6:	4b25      	ldr	r3, [pc, #148]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 80247f8:	781b      	ldrb	r3, [r3, #0]
 80247fa:	4619      	mov	r1, r3
 80247fc:	4b24      	ldr	r3, [pc, #144]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 80247fe:	781b      	ldrb	r3, [r3, #0]
 8024800:	461a      	mov	r2, r3
 8024802:	4b24      	ldr	r3, [pc, #144]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 8024804:	881b      	ldrh	r3, [r3, #0]
 8024806:	9301      	str	r3, [sp, #4]
 8024808:	9200      	str	r2, [sp, #0]
 802480a:	460b      	mov	r3, r1
 802480c:	4a27      	ldr	r2, [pc, #156]	; (80248ac <SettingsScreen_newDateLblController+0x16c>)
 802480e:	2140      	movs	r1, #64	; 0x40
 8024810:	4822      	ldr	r0, [pc, #136]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 8024812:	f003 fa2f 	bl	8027c74 <sniprintf>
				Sdates,Smonths,Syears);
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
				Sdates,Smonths,Syears);
		break;
 8024816:	e021      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
		else snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#000000 %04d#",
 8024818:	4b1c      	ldr	r3, [pc, #112]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 802481a:	781b      	ldrb	r3, [r3, #0]
 802481c:	4619      	mov	r1, r3
 802481e:	4b1c      	ldr	r3, [pc, #112]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 8024820:	781b      	ldrb	r3, [r3, #0]
 8024822:	461a      	mov	r2, r3
 8024824:	4b1b      	ldr	r3, [pc, #108]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 8024826:	881b      	ldrh	r3, [r3, #0]
 8024828:	9301      	str	r3, [sp, #4]
 802482a:	9200      	str	r2, [sp, #0]
 802482c:	460b      	mov	r3, r1
 802482e:	4a20      	ldr	r2, [pc, #128]	; (80248b0 <SettingsScreen_newDateLblController+0x170>)
 8024830:	2140      	movs	r1, #64	; 0x40
 8024832:	481a      	ldr	r0, [pc, #104]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 8024834:	f003 fa1e 	bl	8027c74 <sniprintf>
		break;
 8024838:	e010      	b.n	802485c <SettingsScreen_newDateLblController+0x11c>
	default: snprintf(settingsBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %04d#",
 802483a:	4b14      	ldr	r3, [pc, #80]	; (802488c <SettingsScreen_newDateLblController+0x14c>)
 802483c:	781b      	ldrb	r3, [r3, #0]
 802483e:	4619      	mov	r1, r3
 8024840:	4b13      	ldr	r3, [pc, #76]	; (8024890 <SettingsScreen_newDateLblController+0x150>)
 8024842:	781b      	ldrb	r3, [r3, #0]
 8024844:	461a      	mov	r2, r3
 8024846:	4b13      	ldr	r3, [pc, #76]	; (8024894 <SettingsScreen_newDateLblController+0x154>)
 8024848:	881b      	ldrh	r3, [r3, #0]
 802484a:	9301      	str	r3, [sp, #4]
 802484c:	9200      	str	r2, [sp, #0]
 802484e:	460b      	mov	r3, r1
 8024850:	4a18      	ldr	r2, [pc, #96]	; (80248b4 <SettingsScreen_newDateLblController+0x174>)
 8024852:	2140      	movs	r1, #64	; 0x40
 8024854:	4811      	ldr	r0, [pc, #68]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 8024856:	f003 fa0d 	bl	8027c74 <sniprintf>
				Sdates,Smonths,Syears); break;
 802485a:	bf00      	nop
	}
	lv_label_set_text(S_DateLbl, settingsBuffer);
 802485c:	4b16      	ldr	r3, [pc, #88]	; (80248b8 <SettingsScreen_newDateLblController+0x178>)
 802485e:	681b      	ldr	r3, [r3, #0]
 8024860:	490e      	ldr	r1, [pc, #56]	; (802489c <SettingsScreen_newDateLblController+0x15c>)
 8024862:	4618      	mov	r0, r3
 8024864:	f7f4 ff84 	bl	8019770 <lv_label_set_text>
	lv_obj_align(S_DateLbl, NULL, LV_ALIGN_IN_TOP_RIGHT, -20, 80);
 8024868:	4b13      	ldr	r3, [pc, #76]	; (80248b8 <SettingsScreen_newDateLblController+0x178>)
 802486a:	6818      	ldr	r0, [r3, #0]
 802486c:	2350      	movs	r3, #80	; 0x50
 802486e:	9300      	str	r3, [sp, #0]
 8024870:	f06f 0313 	mvn.w	r3, #19
 8024874:	2203      	movs	r2, #3
 8024876:	2100      	movs	r1, #0
 8024878:	f7e1 fd30 	bl	80062dc <lv_obj_align>

}
 802487c:	bf00      	nop
 802487e:	46bd      	mov	sp, r7
 8024880:	bd80      	pop	{r7, pc}
 8024882:	bf00      	nop
 8024884:	20007004 	.word	0x20007004
 8024888:	20007013 	.word	0x20007013
 802488c:	20007010 	.word	0x20007010
 8024890:	2000702e 	.word	0x2000702e
 8024894:	20007024 	.word	0x20007024
 8024898:	0802a24c 	.word	0x0802a24c
 802489c:	20007034 	.word	0x20007034
 80248a0:	0802a278 	.word	0x0802a278
 80248a4:	0802a2a4 	.word	0x0802a2a4
 80248a8:	0802a2d0 	.word	0x0802a2d0
 80248ac:	0802a2fc 	.word	0x0802a2fc
 80248b0:	0802a328 	.word	0x0802a328
 80248b4:	0802a0e8 	.word	0x0802a0e8
 80248b8:	20007028 	.word	0x20007028

080248bc <SettingsScreen_newBluetoothValController>:
/*This function using for update set bluetooth switch*/
void SettingsScreen_newBluetoothValController(void){
 80248bc:	b598      	push	{r3, r4, r7, lr}
 80248be:	af00      	add	r7, sp, #0
	if(SbluetoothSetVal){
 80248c0:	4b18      	ldr	r3, [pc, #96]	; (8024924 <SettingsScreen_newBluetoothValController+0x68>)
 80248c2:	781b      	ldrb	r3, [r3, #0]
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d00a      	beq.n	80248de <SettingsScreen_newBluetoothValController+0x22>
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 80248c8:	4c17      	ldr	r4, [pc, #92]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 80248ca:	4818      	ldr	r0, [pc, #96]	; (802492c <SettingsScreen_newBluetoothValController+0x70>)
 80248cc:	f7ff f85a 	bl	8023984 <lv_color_hex>
 80248d0:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 80248d2:	4c15      	ldr	r4, [pc, #84]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 80248d4:	4815      	ldr	r0, [pc, #84]	; (802492c <SettingsScreen_newBluetoothValController+0x70>)
 80248d6:	f7ff f855 	bl	8023984 <lv_color_hex>
 80248da:	80a0      	strh	r0, [r4, #4]
 80248dc:	e019      	b.n	8024912 <SettingsScreen_newBluetoothValController+0x56>
	}else{
	    bluetooth_indic_style.body.main_color = lv_color_hex(0x000000);
 80248de:	4c12      	ldr	r4, [pc, #72]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 80248e0:	2000      	movs	r0, #0
 80248e2:	f7ff f84f 	bl	8023984 <lv_color_hex>
 80248e6:	8060      	strh	r0, [r4, #2]
	    bluetooth_indic_style.body.grad_color = lv_color_hex(0x000000);
 80248e8:	4c0f      	ldr	r4, [pc, #60]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 80248ea:	2000      	movs	r0, #0
 80248ec:	f7ff f84a 	bl	8023984 <lv_color_hex>
 80248f0:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 80248f2:	4b0f      	ldr	r3, [pc, #60]	; (8024930 <SettingsScreen_newBluetoothValController+0x74>)
 80248f4:	781b      	ldrb	r3, [r3, #0]
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	d00b      	beq.n	8024912 <SettingsScreen_newBluetoothValController+0x56>
	    	bluetooth_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 80248fa:	4c0b      	ldr	r4, [pc, #44]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 80248fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024900:	f7ff f840 	bl	8023984 <lv_color_hex>
 8024904:	8060      	strh	r0, [r4, #2]
	    	bluetooth_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8024906:	4c08      	ldr	r4, [pc, #32]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 8024908:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802490c:	f7ff f83a 	bl	8023984 <lv_color_hex>
 8024910:	80a0      	strh	r0, [r4, #4]
	    }
	}
    lv_sw_set_style(SbluetoothSwitch, LV_SW_STYLE_INDIC, &bluetooth_indic_style);
 8024912:	4b08      	ldr	r3, [pc, #32]	; (8024934 <SettingsScreen_newBluetoothValController+0x78>)
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	4a04      	ldr	r2, [pc, #16]	; (8024928 <SettingsScreen_newBluetoothValController+0x6c>)
 8024918:	2101      	movs	r1, #1
 802491a:	4618      	mov	r0, r3
 802491c:	f7fa f92c 	bl	801eb78 <lv_sw_set_style>
}
 8024920:	bf00      	nop
 8024922:	bd98      	pop	{r3, r4, r7, pc}
 8024924:	20007074 	.word	0x20007074
 8024928:	200063dc 	.word	0x200063dc
 802492c:	009fc8ef 	.word	0x009fc8ef
 8024930:	20007013 	.word	0x20007013
 8024934:	20007014 	.word	0x20007014

08024938 <SettingsScreen_newUnitTypeController>:
/*This function using for update set unit switch*/
void SettingsScreen_newUnitTypeController(void){
 8024938:	b598      	push	{r3, r4, r7, lr}
 802493a:	af00      	add	r7, sp, #0
	if(SunitSetVal){
 802493c:	4b18      	ldr	r3, [pc, #96]	; (80249a0 <SettingsScreen_newUnitTypeController+0x68>)
 802493e:	781b      	ldrb	r3, [r3, #0]
 8024940:	2b00      	cmp	r3, #0
 8024942:	d00a      	beq.n	802495a <SettingsScreen_newUnitTypeController+0x22>
	    unit_indic_style.body.main_color = lv_color_hex(0x9fc8ef);
 8024944:	4c17      	ldr	r4, [pc, #92]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024946:	4818      	ldr	r0, [pc, #96]	; (80249a8 <SettingsScreen_newUnitTypeController+0x70>)
 8024948:	f7ff f81c 	bl	8023984 <lv_color_hex>
 802494c:	8060      	strh	r0, [r4, #2]
	    unit_indic_style.body.grad_color = lv_color_hex(0x9fc8ef);
 802494e:	4c15      	ldr	r4, [pc, #84]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024950:	4815      	ldr	r0, [pc, #84]	; (80249a8 <SettingsScreen_newUnitTypeController+0x70>)
 8024952:	f7ff f817 	bl	8023984 <lv_color_hex>
 8024956:	80a0      	strh	r0, [r4, #4]
 8024958:	e019      	b.n	802498e <SettingsScreen_newUnitTypeController+0x56>
	}else{
		unit_indic_style.body.main_color = lv_color_hex(0x000000);
 802495a:	4c12      	ldr	r4, [pc, #72]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 802495c:	2000      	movs	r0, #0
 802495e:	f7ff f811 	bl	8023984 <lv_color_hex>
 8024962:	8060      	strh	r0, [r4, #2]
		unit_indic_style.body.grad_color = lv_color_hex(0x000000);
 8024964:	4c0f      	ldr	r4, [pc, #60]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024966:	2000      	movs	r0, #0
 8024968:	f7ff f80c 	bl	8023984 <lv_color_hex>
 802496c:	80a0      	strh	r0, [r4, #4]
	    if(Stheme){
 802496e:	4b0f      	ldr	r3, [pc, #60]	; (80249ac <SettingsScreen_newUnitTypeController+0x74>)
 8024970:	781b      	ldrb	r3, [r3, #0]
 8024972:	2b00      	cmp	r3, #0
 8024974:	d00b      	beq.n	802498e <SettingsScreen_newUnitTypeController+0x56>
	    	unit_indic_style.body.main_color = lv_color_hex(0xFFFFFF);
 8024976:	4c0b      	ldr	r4, [pc, #44]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024978:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802497c:	f7ff f802 	bl	8023984 <lv_color_hex>
 8024980:	8060      	strh	r0, [r4, #2]
	    	unit_indic_style.body.grad_color = lv_color_hex(0xFFFFFF);
 8024982:	4c08      	ldr	r4, [pc, #32]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024984:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024988:	f7fe fffc 	bl	8023984 <lv_color_hex>
 802498c:	80a0      	strh	r0, [r4, #4]
	    }
	}

    lv_sw_set_style(unitTypeSwitch, LV_SW_STYLE_INDIC, &unit_indic_style);
 802498e:	4b08      	ldr	r3, [pc, #32]	; (80249b0 <SettingsScreen_newUnitTypeController+0x78>)
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	4a04      	ldr	r2, [pc, #16]	; (80249a4 <SettingsScreen_newUnitTypeController+0x6c>)
 8024994:	2101      	movs	r1, #1
 8024996:	4618      	mov	r0, r3
 8024998:	f7fa f8ee 	bl	801eb78 <lv_sw_set_style>
}
 802499c:	bf00      	nop
 802499e:	bd98      	pop	{r3, r4, r7, pc}
 80249a0:	20007012 	.word	0x20007012
 80249a4:	20006418 	.word	0x20006418
 80249a8:	009fc8ef 	.word	0x009fc8ef
 80249ac:	20007013 	.word	0x20007013
 80249b0:	2000700c 	.word	0x2000700c

080249b4 <SettingsScreen_SetNewValues>:



//Setter Getter Functions

void SettingsScreen_SetNewValues(void){
 80249b4:	b580      	push	{r7, lr}
 80249b6:	af00      	add	r7, sp, #0
	  tos_RTC_SetTime(S_hrtc,Shours,Sminutes,Sseconds);
 80249b8:	4b10      	ldr	r3, [pc, #64]	; (80249fc <SettingsScreen_SetNewValues+0x48>)
 80249ba:	6818      	ldr	r0, [r3, #0]
 80249bc:	4b10      	ldr	r3, [pc, #64]	; (8024a00 <SettingsScreen_SetNewValues+0x4c>)
 80249be:	7819      	ldrb	r1, [r3, #0]
 80249c0:	4b10      	ldr	r3, [pc, #64]	; (8024a04 <SettingsScreen_SetNewValues+0x50>)
 80249c2:	781a      	ldrb	r2, [r3, #0]
 80249c4:	4b10      	ldr	r3, [pc, #64]	; (8024a08 <SettingsScreen_SetNewValues+0x54>)
 80249c6:	781b      	ldrb	r3, [r3, #0]
 80249c8:	f002 fb20 	bl	802700c <tos_RTC_SetTime>
	  tos_RTC_SetDate(S_hrtc,(Syears-2000),Smonths,Sdates);
 80249cc:	4b0b      	ldr	r3, [pc, #44]	; (80249fc <SettingsScreen_SetNewValues+0x48>)
 80249ce:	6818      	ldr	r0, [r3, #0]
 80249d0:	4b0e      	ldr	r3, [pc, #56]	; (8024a0c <SettingsScreen_SetNewValues+0x58>)
 80249d2:	881b      	ldrh	r3, [r3, #0]
 80249d4:	b2db      	uxtb	r3, r3
 80249d6:	3330      	adds	r3, #48	; 0x30
 80249d8:	b2d9      	uxtb	r1, r3
 80249da:	4b0d      	ldr	r3, [pc, #52]	; (8024a10 <SettingsScreen_SetNewValues+0x5c>)
 80249dc:	781a      	ldrb	r2, [r3, #0]
 80249de:	4b0d      	ldr	r3, [pc, #52]	; (8024a14 <SettingsScreen_SetNewValues+0x60>)
 80249e0:	781b      	ldrb	r3, [r3, #0]
 80249e2:	f002 fb35 	bl	8027050 <tos_RTC_SetDate>
	  tos_BluetoothSetStepsVal(SbluetoothStatu,SunitType);
 80249e6:	4b0c      	ldr	r3, [pc, #48]	; (8024a18 <SettingsScreen_SetNewValues+0x64>)
 80249e8:	781b      	ldrb	r3, [r3, #0]
 80249ea:	461a      	mov	r2, r3
 80249ec:	4b0b      	ldr	r3, [pc, #44]	; (8024a1c <SettingsScreen_SetNewValues+0x68>)
 80249ee:	781b      	ldrb	r3, [r3, #0]
 80249f0:	4619      	mov	r1, r3
 80249f2:	4610      	mov	r0, r2
 80249f4:	f001 fe8e 	bl	8026714 <tos_BluetoothSetStepsVal>
}
 80249f8:	bf00      	nop
 80249fa:	bd80      	pop	{r7, pc}
 80249fc:	20007030 	.word	0x20007030
 8024a00:	20007011 	.word	0x20007011
 8024a04:	2000701c 	.word	0x2000701c
 8024a08:	2000702f 	.word	0x2000702f
 8024a0c:	20007024 	.word	0x20007024
 8024a10:	2000702e 	.word	0x2000702e
 8024a14:	20007010 	.word	0x20007010
 8024a18:	20007005 	.word	0x20007005
 8024a1c:	20007076 	.word	0x20007076

08024a20 <SettingsScreen_SetTime>:

void SettingsScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8024a20:	b480      	push	{r7}
 8024a22:	b083      	sub	sp, #12
 8024a24:	af00      	add	r7, sp, #0
 8024a26:	4603      	mov	r3, r0
 8024a28:	71fb      	strb	r3, [r7, #7]
 8024a2a:	460b      	mov	r3, r1
 8024a2c:	71bb      	strb	r3, [r7, #6]
 8024a2e:	4613      	mov	r3, r2
 8024a30:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 8024a32:	4b0b      	ldr	r3, [pc, #44]	; (8024a60 <SettingsScreen_SetTime+0x40>)
 8024a34:	781b      	ldrb	r3, [r3, #0]
 8024a36:	f083 0301 	eor.w	r3, r3, #1
 8024a3a:	b2db      	uxtb	r3, r3
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d008      	beq.n	8024a52 <SettingsScreen_SetTime+0x32>
		Shours = getHours;
 8024a40:	4a08      	ldr	r2, [pc, #32]	; (8024a64 <SettingsScreen_SetTime+0x44>)
 8024a42:	79fb      	ldrb	r3, [r7, #7]
 8024a44:	7013      	strb	r3, [r2, #0]
		Sminutes = getMinutes;
 8024a46:	4a08      	ldr	r2, [pc, #32]	; (8024a68 <SettingsScreen_SetTime+0x48>)
 8024a48:	79bb      	ldrb	r3, [r7, #6]
 8024a4a:	7013      	strb	r3, [r2, #0]
		Sseconds = getSeconds;
 8024a4c:	4a07      	ldr	r2, [pc, #28]	; (8024a6c <SettingsScreen_SetTime+0x4c>)
 8024a4e:	797b      	ldrb	r3, [r7, #5]
 8024a50:	7013      	strb	r3, [r2, #0]
	}
}
 8024a52:	bf00      	nop
 8024a54:	370c      	adds	r7, #12
 8024a56:	46bd      	mov	sp, r7
 8024a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a5c:	4770      	bx	lr
 8024a5e:	bf00      	nop
 8024a60:	2000702c 	.word	0x2000702c
 8024a64:	20007011 	.word	0x20007011
 8024a68:	2000701c 	.word	0x2000701c
 8024a6c:	2000702f 	.word	0x2000702f

08024a70 <SettingsScreen_SetDate>:
void SettingsScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate) {
 8024a70:	b480      	push	{r7}
 8024a72:	b083      	sub	sp, #12
 8024a74:	af00      	add	r7, sp, #0
 8024a76:	4603      	mov	r3, r0
 8024a78:	71fb      	strb	r3, [r7, #7]
 8024a7a:	460b      	mov	r3, r1
 8024a7c:	71bb      	strb	r3, [r7, #6]
 8024a7e:	4613      	mov	r3, r2
 8024a80:	717b      	strb	r3, [r7, #5]
	if(!isMenuOpen){
 8024a82:	4b0d      	ldr	r3, [pc, #52]	; (8024ab8 <SettingsScreen_SetDate+0x48>)
 8024a84:	781b      	ldrb	r3, [r3, #0]
 8024a86:	f083 0301 	eor.w	r3, r3, #1
 8024a8a:	b2db      	uxtb	r3, r3
 8024a8c:	2b00      	cmp	r3, #0
 8024a8e:	d00c      	beq.n	8024aaa <SettingsScreen_SetDate+0x3a>
		Syears =getYear+2000;
 8024a90:	79fb      	ldrb	r3, [r7, #7]
 8024a92:	b29b      	uxth	r3, r3
 8024a94:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8024a98:	b29a      	uxth	r2, r3
 8024a9a:	4b08      	ldr	r3, [pc, #32]	; (8024abc <SettingsScreen_SetDate+0x4c>)
 8024a9c:	801a      	strh	r2, [r3, #0]
		Smonths = getMonth;
 8024a9e:	4a08      	ldr	r2, [pc, #32]	; (8024ac0 <SettingsScreen_SetDate+0x50>)
 8024aa0:	79bb      	ldrb	r3, [r7, #6]
 8024aa2:	7013      	strb	r3, [r2, #0]
		Sdates = getDate;
 8024aa4:	4a07      	ldr	r2, [pc, #28]	; (8024ac4 <SettingsScreen_SetDate+0x54>)
 8024aa6:	797b      	ldrb	r3, [r7, #5]
 8024aa8:	7013      	strb	r3, [r2, #0]
	}
}
 8024aaa:	bf00      	nop
 8024aac:	370c      	adds	r7, #12
 8024aae:	46bd      	mov	sp, r7
 8024ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ab4:	4770      	bx	lr
 8024ab6:	bf00      	nop
 8024ab8:	2000702c 	.word	0x2000702c
 8024abc:	20007024 	.word	0x20007024
 8024ac0:	2000702e 	.word	0x2000702e
 8024ac4:	20007010 	.word	0x20007010

08024ac8 <SettingsScreen_isSettingsOpen>:
	if(!isMenuOpen)SbluetoothStatu=statu;
}
void SettingsScreen_SetUnitType(bool val){
	if(!isMenuOpen)SunitType=val;
}
bool SettingsScreen_isSettingsOpen(void){
 8024ac8:	b480      	push	{r7}
 8024aca:	af00      	add	r7, sp, #0
	return isMenuOpen;
 8024acc:	4b03      	ldr	r3, [pc, #12]	; (8024adc <SettingsScreen_isSettingsOpen+0x14>)
 8024ace:	781b      	ldrb	r3, [r3, #0]
}
 8024ad0:	4618      	mov	r0, r3
 8024ad2:	46bd      	mov	sp, r7
 8024ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ad8:	4770      	bx	lr
 8024ada:	bf00      	nop
 8024adc:	2000702c 	.word	0x2000702c

08024ae0 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8024ae0:	b580      	push	{r7, lr}
 8024ae2:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8024ae4:	f7ed fd5c 	bl	80125a0 <lv_disp_get_default>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	4618      	mov	r0, r3
 8024aec:	f7e0 fa24 	bl	8004f38 <lv_disp_get_scr_act>
 8024af0:	4603      	mov	r3, r0
}
 8024af2:	4618      	mov	r0, r3
 8024af4:	bd80      	pop	{r7, pc}

08024af6 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8024af6:	b580      	push	{r7, lr}
 8024af8:	b084      	sub	sp, #16
 8024afa:	af00      	add	r7, sp, #0
 8024afc:	60f8      	str	r0, [r7, #12]
 8024afe:	460b      	mov	r3, r1
 8024b00:	607a      	str	r2, [r7, #4]
 8024b02:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8024b04:	6879      	ldr	r1, [r7, #4]
 8024b06:	68f8      	ldr	r0, [r7, #12]
 8024b08:	f7e2 f88d 	bl	8006c26 <lv_obj_set_style>
}
 8024b0c:	bf00      	nop
 8024b0e:	3710      	adds	r7, #16
 8024b10:	46bd      	mov	sp, r7
 8024b12:	bd80      	pop	{r7, pc}

08024b14 <tos_SleepModeScreen_Init>:
void SMS_digitalTimePrintTheScreen(void);
void SMS_batteryValueUpdater(void);
void SMS_bluetoothStatusUpdater(void);
void SMS_Updater(lv_task_t * t);

void tos_SleepModeScreen_Init(void) {
 8024b14:	b580      	push	{r7, lr}
 8024b16:	b082      	sub	sp, #8
 8024b18:	af02      	add	r7, sp, #8
	slptaskController=true;
 8024b1a:	4ba1      	ldr	r3, [pc, #644]	; (8024da0 <tos_SleepModeScreen_Init+0x28c>)
 8024b1c:	2201      	movs	r2, #1
 8024b1e:	701a      	strb	r2, [r3, #0]
	static lv_style_t slpStyle_screen;
	lv_style_copy(&slpStyle_screen, &lv_style_plain);
 8024b20:	49a0      	ldr	r1, [pc, #640]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024b22:	48a1      	ldr	r0, [pc, #644]	; (8024da8 <tos_SleepModeScreen_Init+0x294>)
 8024b24:	f7e3 fe1e 	bl	8008764 <lv_style_copy>
	slpStyle_screen.body.main_color = LV_COLOR_BLACK;
 8024b28:	4b9f      	ldr	r3, [pc, #636]	; (8024da8 <tos_SleepModeScreen_Init+0x294>)
 8024b2a:	2200      	movs	r2, #0
 8024b2c:	805a      	strh	r2, [r3, #2]
	slpStyle_screen.body.grad_color = LV_COLOR_BLACK;
 8024b2e:	4b9e      	ldr	r3, [pc, #632]	; (8024da8 <tos_SleepModeScreen_Init+0x294>)
 8024b30:	2200      	movs	r2, #0
 8024b32:	809a      	strh	r2, [r3, #4]
		lv_obj_set_style(lv_scr_act(), &slpStyle_screen);
 8024b34:	f7ff ffd4 	bl	8024ae0 <lv_scr_act>
 8024b38:	4603      	mov	r3, r0
 8024b3a:	499b      	ldr	r1, [pc, #620]	; (8024da8 <tos_SleepModeScreen_Init+0x294>)
 8024b3c:	4618      	mov	r0, r3
 8024b3e:	f7e2 f872 	bl	8006c26 <lv_obj_set_style>

	//Battery
	slpbatteryLbl= lv_label_create(lv_scr_act(), NULL);
 8024b42:	f7ff ffcd 	bl	8024ae0 <lv_scr_act>
 8024b46:	4603      	mov	r3, r0
 8024b48:	2100      	movs	r1, #0
 8024b4a:	4618      	mov	r0, r3
 8024b4c:	f7f4 fcde 	bl	801950c <lv_label_create>
 8024b50:	4602      	mov	r2, r0
 8024b52:	4b96      	ldr	r3, [pc, #600]	; (8024dac <tos_SleepModeScreen_Init+0x298>)
 8024b54:	601a      	str	r2, [r3, #0]
	lv_style_copy(&slpbattery_style, &lv_style_plain);
 8024b56:	4993      	ldr	r1, [pc, #588]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024b58:	4895      	ldr	r0, [pc, #596]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b5a:	f7e3 fe03 	bl	8008764 <lv_style_copy>
	slpbattery_style.text.color = LV_COLOR_GREEN;
 8024b5e:	4a94      	ldr	r2, [pc, #592]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b60:	f892 3020 	ldrb.w	r3, [r2, #32]
 8024b64:	2104      	movs	r1, #4
 8024b66:	f361 0302 	bfi	r3, r1, #0, #3
 8024b6a:	f882 3020 	strb.w	r3, [r2, #32]
 8024b6e:	4a90      	ldr	r2, [pc, #576]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b70:	f892 3020 	ldrb.w	r3, [r2, #32]
 8024b74:	f36f 03c7 	bfc	r3, #3, #5
 8024b78:	f882 3020 	strb.w	r3, [r2, #32]
 8024b7c:	4a8c      	ldr	r2, [pc, #560]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b7e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8024b82:	f36f 0304 	bfc	r3, #0, #5
 8024b86:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8024b8a:	4a89      	ldr	r2, [pc, #548]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b8c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8024b90:	f36f 1347 	bfc	r3, #5, #3
 8024b94:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	lv_label_set_style(slpbatteryLbl, LV_LABEL_STYLE_MAIN, &slpbattery_style);
 8024b98:	4b84      	ldr	r3, [pc, #528]	; (8024dac <tos_SleepModeScreen_Init+0x298>)
 8024b9a:	681b      	ldr	r3, [r3, #0]
 8024b9c:	4a84      	ldr	r2, [pc, #528]	; (8024db0 <tos_SleepModeScreen_Init+0x29c>)
 8024b9e:	2100      	movs	r1, #0
 8024ba0:	4618      	mov	r0, r3
 8024ba2:	f7ff ffa8 	bl	8024af6 <lv_label_set_style>
	lv_label_set_text(slpbatteryLbl, LV_SYMBOL_BATTERY_FULL);
 8024ba6:	4b81      	ldr	r3, [pc, #516]	; (8024dac <tos_SleepModeScreen_Init+0x298>)
 8024ba8:	681b      	ldr	r3, [r3, #0]
 8024baa:	4982      	ldr	r1, [pc, #520]	; (8024db4 <tos_SleepModeScreen_Init+0x2a0>)
 8024bac:	4618      	mov	r0, r3
 8024bae:	f7f4 fddf 	bl	8019770 <lv_label_set_text>
	lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8024bb2:	4b7e      	ldr	r3, [pc, #504]	; (8024dac <tos_SleepModeScreen_Init+0x298>)
 8024bb4:	6818      	ldr	r0, [r3, #0]
 8024bb6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024bba:	9300      	str	r3, [sp, #0]
 8024bbc:	2364      	movs	r3, #100	; 0x64
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	2100      	movs	r1, #0
 8024bc2:	f7e1 fb8b 	bl	80062dc <lv_obj_align>

	//Bluetooth
	slpbluetoothLbl= lv_label_create(lv_scr_act(), NULL);
 8024bc6:	f7ff ff8b 	bl	8024ae0 <lv_scr_act>
 8024bca:	4603      	mov	r3, r0
 8024bcc:	2100      	movs	r1, #0
 8024bce:	4618      	mov	r0, r3
 8024bd0:	f7f4 fc9c 	bl	801950c <lv_label_create>
 8024bd4:	4602      	mov	r2, r0
 8024bd6:	4b78      	ldr	r3, [pc, #480]	; (8024db8 <tos_SleepModeScreen_Init+0x2a4>)
 8024bd8:	601a      	str	r2, [r3, #0]
    lv_style_copy(&slpbluetooth_style, &lv_style_plain);
 8024bda:	4972      	ldr	r1, [pc, #456]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024bdc:	4877      	ldr	r0, [pc, #476]	; (8024dbc <tos_SleepModeScreen_Init+0x2a8>)
 8024bde:	f7e3 fdc1 	bl	8008764 <lv_style_copy>
    slpbluetooth_style.text.color = LV_COLOR_WHITE;
 8024be2:	4a76      	ldr	r2, [pc, #472]	; (8024dbc <tos_SleepModeScreen_Init+0x2a8>)
 8024be4:	4b76      	ldr	r3, [pc, #472]	; (8024dc0 <tos_SleepModeScreen_Init+0x2ac>)
 8024be6:	881b      	ldrh	r3, [r3, #0]
 8024be8:	8413      	strh	r3, [r2, #32]
	lv_label_set_style(slpbluetoothLbl, LV_LABEL_STYLE_MAIN, &slpbluetooth_style);
 8024bea:	4b73      	ldr	r3, [pc, #460]	; (8024db8 <tos_SleepModeScreen_Init+0x2a4>)
 8024bec:	681b      	ldr	r3, [r3, #0]
 8024bee:	4a73      	ldr	r2, [pc, #460]	; (8024dbc <tos_SleepModeScreen_Init+0x2a8>)
 8024bf0:	2100      	movs	r1, #0
 8024bf2:	4618      	mov	r0, r3
 8024bf4:	f7ff ff7f 	bl	8024af6 <lv_label_set_style>
	lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8024bf8:	4b6f      	ldr	r3, [pc, #444]	; (8024db8 <tos_SleepModeScreen_Init+0x2a4>)
 8024bfa:	681b      	ldr	r3, [r3, #0]
 8024bfc:	4971      	ldr	r1, [pc, #452]	; (8024dc4 <tos_SleepModeScreen_Init+0x2b0>)
 8024bfe:	4618      	mov	r0, r3
 8024c00:	f7f4 fdb6 	bl	8019770 <lv_label_set_text>
	lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8024c04:	4b6c      	ldr	r3, [pc, #432]	; (8024db8 <tos_SleepModeScreen_Init+0x2a4>)
 8024c06:	6818      	ldr	r0, [r3, #0]
 8024c08:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024c0c:	9300      	str	r3, [sp, #0]
 8024c0e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024c12:	2200      	movs	r2, #0
 8024c14:	2100      	movs	r1, #0
 8024c16:	f7e1 fb61 	bl	80062dc <lv_obj_align>

	//Digital Clock
		static lv_style_t slpdClock_style,slpdDate_style,slpweekD_style;
				lv_style_copy(&slpdClock_style, &lv_style_plain);
 8024c1a:	4962      	ldr	r1, [pc, #392]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024c1c:	486a      	ldr	r0, [pc, #424]	; (8024dc8 <tos_SleepModeScreen_Init+0x2b4>)
 8024c1e:	f7e3 fda1 	bl	8008764 <lv_style_copy>
				slpdClock_style.text.font =&digital_font_for_number_65;
 8024c22:	4b69      	ldr	r3, [pc, #420]	; (8024dc8 <tos_SleepModeScreen_Init+0x2b4>)
 8024c24:	4a69      	ldr	r2, [pc, #420]	; (8024dcc <tos_SleepModeScreen_Init+0x2b8>)
 8024c26:	625a      	str	r2, [r3, #36]	; 0x24
				slpdClock_style.text.color= LV_COLOR_SILVER;
 8024c28:	4a67      	ldr	r2, [pc, #412]	; (8024dc8 <tos_SleepModeScreen_Init+0x2b4>)
 8024c2a:	4b69      	ldr	r3, [pc, #420]	; (8024dd0 <tos_SleepModeScreen_Init+0x2bc>)
 8024c2c:	881b      	ldrh	r3, [r3, #0]
 8024c2e:	8413      	strh	r3, [r2, #32]
			    lv_style_copy(&slpdDate_style, &lv_style_plain);
 8024c30:	495c      	ldr	r1, [pc, #368]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024c32:	4868      	ldr	r0, [pc, #416]	; (8024dd4 <tos_SleepModeScreen_Init+0x2c0>)
 8024c34:	f7e3 fd96 	bl	8008764 <lv_style_copy>
			    slpdDate_style.text.font =&digital_font_for_number_30;
 8024c38:	4b66      	ldr	r3, [pc, #408]	; (8024dd4 <tos_SleepModeScreen_Init+0x2c0>)
 8024c3a:	4a67      	ldr	r2, [pc, #412]	; (8024dd8 <tos_SleepModeScreen_Init+0x2c4>)
 8024c3c:	625a      	str	r2, [r3, #36]	; 0x24
			    slpdDate_style.text.color= LV_COLOR_SILVER;
 8024c3e:	4a65      	ldr	r2, [pc, #404]	; (8024dd4 <tos_SleepModeScreen_Init+0x2c0>)
 8024c40:	4b63      	ldr	r3, [pc, #396]	; (8024dd0 <tos_SleepModeScreen_Init+0x2bc>)
 8024c42:	881b      	ldrh	r3, [r3, #0]
 8024c44:	8413      	strh	r3, [r2, #32]
				lv_style_copy(&slpweekD_style, &lv_style_plain);
 8024c46:	4957      	ldr	r1, [pc, #348]	; (8024da4 <tos_SleepModeScreen_Init+0x290>)
 8024c48:	4864      	ldr	r0, [pc, #400]	; (8024ddc <tos_SleepModeScreen_Init+0x2c8>)
 8024c4a:	f7e3 fd8b 	bl	8008764 <lv_style_copy>
				slpweekD_style.text.font =&lv_font_roboto_22;
 8024c4e:	4b63      	ldr	r3, [pc, #396]	; (8024ddc <tos_SleepModeScreen_Init+0x2c8>)
 8024c50:	4a63      	ldr	r2, [pc, #396]	; (8024de0 <tos_SleepModeScreen_Init+0x2cc>)
 8024c52:	625a      	str	r2, [r3, #36]	; 0x24
				slpweekD_style.text.color= LV_COLOR_SILVER;
 8024c54:	4a61      	ldr	r2, [pc, #388]	; (8024ddc <tos_SleepModeScreen_Init+0x2c8>)
 8024c56:	4b5e      	ldr	r3, [pc, #376]	; (8024dd0 <tos_SleepModeScreen_Init+0x2bc>)
 8024c58:	881b      	ldrh	r3, [r3, #0]
 8024c5a:	8413      	strh	r3, [r2, #32]

				slpdigitalClock = lv_label_create(lv_scr_act(), NULL);
 8024c5c:	f7ff ff40 	bl	8024ae0 <lv_scr_act>
 8024c60:	4603      	mov	r3, r0
 8024c62:	2100      	movs	r1, #0
 8024c64:	4618      	mov	r0, r3
 8024c66:	f7f4 fc51 	bl	801950c <lv_label_create>
 8024c6a:	4602      	mov	r2, r0
 8024c6c:	4b5d      	ldr	r3, [pc, #372]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024c6e:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalClock, LV_LABEL_STYLE_MAIN, &slpdClock_style);
 8024c70:	4b5c      	ldr	r3, [pc, #368]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024c72:	681b      	ldr	r3, [r3, #0]
 8024c74:	4a54      	ldr	r2, [pc, #336]	; (8024dc8 <tos_SleepModeScreen_Init+0x2b4>)
 8024c76:	2100      	movs	r1, #0
 8024c78:	4618      	mov	r0, r3
 8024c7a:	f7ff ff3c 	bl	8024af6 <lv_label_set_style>
			    lv_obj_set_width(slpdigitalClock, 200);
 8024c7e:	4b59      	ldr	r3, [pc, #356]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	21c8      	movs	r1, #200	; 0xc8
 8024c84:	4618      	mov	r0, r3
 8024c86:	f7e1 faff 	bl	8006288 <lv_obj_set_width>
			    snprintf(slpbuffer, 8, "%02d:%02d:%02d", hours,minutes,seconds);
 8024c8a:	4b57      	ldr	r3, [pc, #348]	; (8024de8 <tos_SleepModeScreen_Init+0x2d4>)
 8024c8c:	781b      	ldrb	r3, [r3, #0]
 8024c8e:	4619      	mov	r1, r3
 8024c90:	4b56      	ldr	r3, [pc, #344]	; (8024dec <tos_SleepModeScreen_Init+0x2d8>)
 8024c92:	781b      	ldrb	r3, [r3, #0]
 8024c94:	461a      	mov	r2, r3
 8024c96:	4b56      	ldr	r3, [pc, #344]	; (8024df0 <tos_SleepModeScreen_Init+0x2dc>)
 8024c98:	781b      	ldrb	r3, [r3, #0]
 8024c9a:	9301      	str	r3, [sp, #4]
 8024c9c:	9200      	str	r2, [sp, #0]
 8024c9e:	460b      	mov	r3, r1
 8024ca0:	4a54      	ldr	r2, [pc, #336]	; (8024df4 <tos_SleepModeScreen_Init+0x2e0>)
 8024ca2:	2108      	movs	r1, #8
 8024ca4:	4854      	ldr	r0, [pc, #336]	; (8024df8 <tos_SleepModeScreen_Init+0x2e4>)
 8024ca6:	f002 ffe5 	bl	8027c74 <sniprintf>
			    lv_label_set_text(slpdigitalClock, slpbuffer);
 8024caa:	4b4e      	ldr	r3, [pc, #312]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024cac:	681b      	ldr	r3, [r3, #0]
 8024cae:	4952      	ldr	r1, [pc, #328]	; (8024df8 <tos_SleepModeScreen_Init+0x2e4>)
 8024cb0:	4618      	mov	r0, r3
 8024cb2:	f7f4 fd5d 	bl	8019770 <lv_label_set_text>
			    lv_label_set_align(slpdigitalClock, LV_LABEL_ALIGN_CENTER);
 8024cb6:	4b4b      	ldr	r3, [pc, #300]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	2101      	movs	r1, #1
 8024cbc:	4618      	mov	r0, r3
 8024cbe:	f7f4 fe4f 	bl	8019960 <lv_label_set_align>
			    lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 8024cc2:	4b48      	ldr	r3, [pc, #288]	; (8024de4 <tos_SleepModeScreen_Init+0x2d0>)
 8024cc4:	6818      	ldr	r0, [r3, #0]
 8024cc6:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024cca:	9300      	str	r3, [sp, #0]
 8024ccc:	2300      	movs	r3, #0
 8024cce:	2200      	movs	r2, #0
 8024cd0:	2100      	movs	r1, #0
 8024cd2:	f7e1 fb03 	bl	80062dc <lv_obj_align>

			   //Digital Date
			    dateTmp=date;
 8024cd6:	4b49      	ldr	r3, [pc, #292]	; (8024dfc <tos_SleepModeScreen_Init+0x2e8>)
 8024cd8:	781a      	ldrb	r2, [r3, #0]
 8024cda:	4b49      	ldr	r3, [pc, #292]	; (8024e00 <tos_SleepModeScreen_Init+0x2ec>)
 8024cdc:	701a      	strb	r2, [r3, #0]
			    slpdigitalDate = lv_label_create(lv_scr_act(), NULL);
 8024cde:	f7ff feff 	bl	8024ae0 <lv_scr_act>
 8024ce2:	4603      	mov	r3, r0
 8024ce4:	2100      	movs	r1, #0
 8024ce6:	4618      	mov	r0, r3
 8024ce8:	f7f4 fc10 	bl	801950c <lv_label_create>
 8024cec:	4602      	mov	r2, r0
 8024cee:	4b45      	ldr	r3, [pc, #276]	; (8024e04 <tos_SleepModeScreen_Init+0x2f0>)
 8024cf0:	601a      	str	r2, [r3, #0]
			    lv_label_set_style(slpdigitalDate, LV_LABEL_STYLE_MAIN, &slpdDate_style);
 8024cf2:	4b44      	ldr	r3, [pc, #272]	; (8024e04 <tos_SleepModeScreen_Init+0x2f0>)
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	4a37      	ldr	r2, [pc, #220]	; (8024dd4 <tos_SleepModeScreen_Init+0x2c0>)
 8024cf8:	2100      	movs	r1, #0
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	f7ff fefb 	bl	8024af6 <lv_label_set_style>
		    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8024d00:	4b3e      	ldr	r3, [pc, #248]	; (8024dfc <tos_SleepModeScreen_Init+0x2e8>)
 8024d02:	781b      	ldrb	r3, [r3, #0]
 8024d04:	4619      	mov	r1, r3
 8024d06:	4b40      	ldr	r3, [pc, #256]	; (8024e08 <tos_SleepModeScreen_Init+0x2f4>)
 8024d08:	781b      	ldrb	r3, [r3, #0]
 8024d0a:	461a      	mov	r2, r3
 8024d0c:	4b3f      	ldr	r3, [pc, #252]	; (8024e0c <tos_SleepModeScreen_Init+0x2f8>)
 8024d0e:	881b      	ldrh	r3, [r3, #0]
 8024d10:	9301      	str	r3, [sp, #4]
 8024d12:	9200      	str	r2, [sp, #0]
 8024d14:	460b      	mov	r3, r1
 8024d16:	4a3e      	ldr	r2, [pc, #248]	; (8024e10 <tos_SleepModeScreen_Init+0x2fc>)
 8024d18:	2110      	movs	r1, #16
 8024d1a:	4837      	ldr	r0, [pc, #220]	; (8024df8 <tos_SleepModeScreen_Init+0x2e4>)
 8024d1c:	f002 ffaa 	bl	8027c74 <sniprintf>
				lv_label_set_text(slpdigitalDate, slpbuffer);
 8024d20:	4b38      	ldr	r3, [pc, #224]	; (8024e04 <tos_SleepModeScreen_Init+0x2f0>)
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	4934      	ldr	r1, [pc, #208]	; (8024df8 <tos_SleepModeScreen_Init+0x2e4>)
 8024d26:	4618      	mov	r0, r3
 8024d28:	f7f4 fd22 	bl	8019770 <lv_label_set_text>
			    lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8024d2c:	4b35      	ldr	r3, [pc, #212]	; (8024e04 <tos_SleepModeScreen_Init+0x2f0>)
 8024d2e:	6818      	ldr	r0, [r3, #0]
 8024d30:	230a      	movs	r3, #10
 8024d32:	9300      	str	r3, [sp, #0]
 8024d34:	2300      	movs	r3, #0
 8024d36:	2200      	movs	r2, #0
 8024d38:	2100      	movs	r1, #0
 8024d3a:	f7e1 facf 	bl	80062dc <lv_obj_align>

			    //Week Day
			    slpweekDay = lv_label_create(lv_scr_act(), NULL);
 8024d3e:	f7ff fecf 	bl	8024ae0 <lv_scr_act>
 8024d42:	4603      	mov	r3, r0
 8024d44:	2100      	movs	r1, #0
 8024d46:	4618      	mov	r0, r3
 8024d48:	f7f4 fbe0 	bl	801950c <lv_label_create>
 8024d4c:	4602      	mov	r2, r0
 8024d4e:	4b31      	ldr	r3, [pc, #196]	; (8024e14 <tos_SleepModeScreen_Init+0x300>)
 8024d50:	601a      	str	r2, [r3, #0]
			    lv_obj_set_width(slpweekDay, 150);
 8024d52:	4b30      	ldr	r3, [pc, #192]	; (8024e14 <tos_SleepModeScreen_Init+0x300>)
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	2196      	movs	r1, #150	; 0x96
 8024d58:	4618      	mov	r0, r3
 8024d5a:	f7e1 fa95 	bl	8006288 <lv_obj_set_width>
			    lv_label_set_style(slpweekDay, LV_LABEL_STYLE_MAIN, &slpweekD_style);
 8024d5e:	4b2d      	ldr	r3, [pc, #180]	; (8024e14 <tos_SleepModeScreen_Init+0x300>)
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	4a1e      	ldr	r2, [pc, #120]	; (8024ddc <tos_SleepModeScreen_Init+0x2c8>)
 8024d64:	2100      	movs	r1, #0
 8024d66:	4618      	mov	r0, r3
 8024d68:	f7ff fec5 	bl	8024af6 <lv_label_set_style>
			    lv_label_set_text(slpweekDay,slpweekDayStr);
 8024d6c:	4b29      	ldr	r3, [pc, #164]	; (8024e14 <tos_SleepModeScreen_Init+0x300>)
 8024d6e:	681a      	ldr	r2, [r3, #0]
 8024d70:	4b29      	ldr	r3, [pc, #164]	; (8024e18 <tos_SleepModeScreen_Init+0x304>)
 8024d72:	681b      	ldr	r3, [r3, #0]
 8024d74:	4619      	mov	r1, r3
 8024d76:	4610      	mov	r0, r2
 8024d78:	f7f4 fcfa 	bl	8019770 <lv_label_set_text>
			    lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 8024d7c:	4b25      	ldr	r3, [pc, #148]	; (8024e14 <tos_SleepModeScreen_Init+0x300>)
 8024d7e:	6818      	ldr	r0, [r3, #0]
 8024d80:	2323      	movs	r3, #35	; 0x23
 8024d82:	9300      	str	r3, [sp, #0]
 8024d84:	2300      	movs	r3, #0
 8024d86:	2200      	movs	r2, #0
 8024d88:	2100      	movs	r1, #0
 8024d8a:	f7e1 faa7 	bl	80062dc <lv_obj_align>
				lv_task_create(SMS_Updater, 250, _LV_TASK_PRIO_NUM, NULL);
 8024d8e:	2300      	movs	r3, #0
 8024d90:	2206      	movs	r2, #6
 8024d92:	21fa      	movs	r1, #250	; 0xfa
 8024d94:	4821      	ldr	r0, [pc, #132]	; (8024e1c <tos_SleepModeScreen_Init+0x308>)
 8024d96:	f7ef f847 	bl	8013e28 <lv_task_create>
}
 8024d9a:	bf00      	nop
 8024d9c:	46bd      	mov	sp, r7
 8024d9e:	bd80      	pop	{r7, pc}
 8024da0:	20007104 	.word	0x20007104
 8024da4:	20006c74 	.word	0x20006c74
 8024da8:	20006580 	.word	0x20006580
 8024dac:	20007108 	.word	0x20007108
 8024db0:	200070c8 	.word	0x200070c8
 8024db4:	0802a354 	.word	0x0802a354
 8024db8:	200070c0 	.word	0x200070c0
 8024dbc:	20007084 	.word	0x20007084
 8024dc0:	0802a37c 	.word	0x0802a37c
 8024dc4:	0802a358 	.word	0x0802a358
 8024dc8:	200065bc 	.word	0x200065bc
 8024dcc:	20002818 	.word	0x20002818
 8024dd0:	0802a380 	.word	0x0802a380
 8024dd4:	200065f8 	.word	0x200065f8
 8024dd8:	200027e8 	.word	0x200027e8
 8024ddc:	20006634 	.word	0x20006634
 8024de0:	200017c0 	.word	0x200017c0
 8024de4:	2000707c 	.word	0x2000707c
 8024de8:	20006ef5 	.word	0x20006ef5
 8024dec:	20006ef4 	.word	0x20006ef4
 8024df0:	20006ee4 	.word	0x20006ee4
 8024df4:	0802a35c 	.word	0x0802a35c
 8024df8:	20007114 	.word	0x20007114
 8024dfc:	200073c4 	.word	0x200073c4
 8024e00:	20006e0c 	.word	0x20006e0c
 8024e04:	20007078 	.word	0x20007078
 8024e08:	20006e24 	.word	0x20006e24
 8024e0c:	20006ee6 	.word	0x20006ee6
 8024e10:	0802a36c 	.word	0x0802a36c
 8024e14:	200070c4 	.word	0x200070c4
 8024e18:	20007124 	.word	0x20007124
 8024e1c:	08024e21 	.word	0x08024e21

08024e20 <SMS_Updater>:
/*This function using for update all updater functions*/
void SMS_Updater(lv_task_t *t){
 8024e20:	b580      	push	{r7, lr}
 8024e22:	b082      	sub	sp, #8
 8024e24:	af00      	add	r7, sp, #0
 8024e26:	6078      	str	r0, [r7, #4]
	if(slptaskController){
 8024e28:	4b08      	ldr	r3, [pc, #32]	; (8024e4c <SMS_Updater+0x2c>)
 8024e2a:	781b      	ldrb	r3, [r3, #0]
 8024e2c:	2b00      	cmp	r3, #0
 8024e2e:	d006      	beq.n	8024e3e <SMS_Updater+0x1e>
		SMS_batteryValueUpdater();
 8024e30:	f000 f88a 	bl	8024f48 <SMS_batteryValueUpdater>
		SMS_bluetoothStatusUpdater();
 8024e34:	f000 f8ac 	bl	8024f90 <SMS_bluetoothStatusUpdater>
		SMS_digitalTimePrintTheScreen();
 8024e38:	f000 f80a 	bl	8024e50 <SMS_digitalTimePrintTheScreen>
	}else lv_task_del(t);
}
 8024e3c:	e002      	b.n	8024e44 <SMS_Updater+0x24>
	}else lv_task_del(t);
 8024e3e:	6878      	ldr	r0, [r7, #4]
 8024e40:	f7ef f82a 	bl	8013e98 <lv_task_del>
}
 8024e44:	bf00      	nop
 8024e46:	3708      	adds	r7, #8
 8024e48:	46bd      	mov	sp, r7
 8024e4a:	bd80      	pop	{r7, pc}
 8024e4c:	20007104 	.word	0x20007104

08024e50 <SMS_digitalTimePrintTheScreen>:
/* This function using for digital clock print to screen*/
void SMS_digitalTimePrintTheScreen(void){
 8024e50:	b580      	push	{r7, lr}
 8024e52:	b082      	sub	sp, #8
 8024e54:	af02      	add	r7, sp, #8
		snprintf(slpbuffer, 16, "%02d:%02d:%02d", hours,minutes,seconds);
 8024e56:	4b2e      	ldr	r3, [pc, #184]	; (8024f10 <SMS_digitalTimePrintTheScreen+0xc0>)
 8024e58:	781b      	ldrb	r3, [r3, #0]
 8024e5a:	4619      	mov	r1, r3
 8024e5c:	4b2d      	ldr	r3, [pc, #180]	; (8024f14 <SMS_digitalTimePrintTheScreen+0xc4>)
 8024e5e:	781b      	ldrb	r3, [r3, #0]
 8024e60:	461a      	mov	r2, r3
 8024e62:	4b2d      	ldr	r3, [pc, #180]	; (8024f18 <SMS_digitalTimePrintTheScreen+0xc8>)
 8024e64:	781b      	ldrb	r3, [r3, #0]
 8024e66:	9301      	str	r3, [sp, #4]
 8024e68:	9200      	str	r2, [sp, #0]
 8024e6a:	460b      	mov	r3, r1
 8024e6c:	4a2b      	ldr	r2, [pc, #172]	; (8024f1c <SMS_digitalTimePrintTheScreen+0xcc>)
 8024e6e:	2110      	movs	r1, #16
 8024e70:	482b      	ldr	r0, [pc, #172]	; (8024f20 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e72:	f002 feff 	bl	8027c74 <sniprintf>
		    lv_label_set_text(slpdigitalClock, slpbuffer);
 8024e76:	4b2b      	ldr	r3, [pc, #172]	; (8024f24 <SMS_digitalTimePrintTheScreen+0xd4>)
 8024e78:	681b      	ldr	r3, [r3, #0]
 8024e7a:	4929      	ldr	r1, [pc, #164]	; (8024f20 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024e7c:	4618      	mov	r0, r3
 8024e7e:	f7f4 fc77 	bl	8019770 <lv_label_set_text>
			lv_obj_align(slpdigitalClock, NULL, LV_ALIGN_CENTER, 0, -35);
 8024e82:	4b28      	ldr	r3, [pc, #160]	; (8024f24 <SMS_digitalTimePrintTheScreen+0xd4>)
 8024e84:	6818      	ldr	r0, [r3, #0]
 8024e86:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8024e8a:	9300      	str	r3, [sp, #0]
 8024e8c:	2300      	movs	r3, #0
 8024e8e:	2200      	movs	r2, #0
 8024e90:	2100      	movs	r1, #0
 8024e92:	f7e1 fa23 	bl	80062dc <lv_obj_align>
				if(dateTmp!=date){
 8024e96:	4b24      	ldr	r3, [pc, #144]	; (8024f28 <SMS_digitalTimePrintTheScreen+0xd8>)
 8024e98:	781a      	ldrb	r2, [r3, #0]
 8024e9a:	4b24      	ldr	r3, [pc, #144]	; (8024f2c <SMS_digitalTimePrintTheScreen+0xdc>)
 8024e9c:	781b      	ldrb	r3, [r3, #0]
 8024e9e:	429a      	cmp	r2, r3
 8024ea0:	d033      	beq.n	8024f0a <SMS_digitalTimePrintTheScreen+0xba>
					 //Digital Date
					    	snprintf(slpbuffer, 16, "%02d:%02d:%04d", date,month,year);
 8024ea2:	4b22      	ldr	r3, [pc, #136]	; (8024f2c <SMS_digitalTimePrintTheScreen+0xdc>)
 8024ea4:	781b      	ldrb	r3, [r3, #0]
 8024ea6:	4619      	mov	r1, r3
 8024ea8:	4b21      	ldr	r3, [pc, #132]	; (8024f30 <SMS_digitalTimePrintTheScreen+0xe0>)
 8024eaa:	781b      	ldrb	r3, [r3, #0]
 8024eac:	461a      	mov	r2, r3
 8024eae:	4b21      	ldr	r3, [pc, #132]	; (8024f34 <SMS_digitalTimePrintTheScreen+0xe4>)
 8024eb0:	881b      	ldrh	r3, [r3, #0]
 8024eb2:	9301      	str	r3, [sp, #4]
 8024eb4:	9200      	str	r2, [sp, #0]
 8024eb6:	460b      	mov	r3, r1
 8024eb8:	4a1f      	ldr	r2, [pc, #124]	; (8024f38 <SMS_digitalTimePrintTheScreen+0xe8>)
 8024eba:	2110      	movs	r1, #16
 8024ebc:	4818      	ldr	r0, [pc, #96]	; (8024f20 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024ebe:	f002 fed9 	bl	8027c74 <sniprintf>
							lv_label_set_text(slpdigitalDate, slpbuffer);
 8024ec2:	4b1e      	ldr	r3, [pc, #120]	; (8024f3c <SMS_digitalTimePrintTheScreen+0xec>)
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	4916      	ldr	r1, [pc, #88]	; (8024f20 <SMS_digitalTimePrintTheScreen+0xd0>)
 8024ec8:	4618      	mov	r0, r3
 8024eca:	f7f4 fc51 	bl	8019770 <lv_label_set_text>
					    	//Week Day
					    	lv_label_set_text(slpweekDay, slpweekDayStr);
 8024ece:	4b1c      	ldr	r3, [pc, #112]	; (8024f40 <SMS_digitalTimePrintTheScreen+0xf0>)
 8024ed0:	681a      	ldr	r2, [r3, #0]
 8024ed2:	4b1c      	ldr	r3, [pc, #112]	; (8024f44 <SMS_digitalTimePrintTheScreen+0xf4>)
 8024ed4:	681b      	ldr	r3, [r3, #0]
 8024ed6:	4619      	mov	r1, r3
 8024ed8:	4610      	mov	r0, r2
 8024eda:	f7f4 fc49 	bl	8019770 <lv_label_set_text>
					    	dateTmp=date;
 8024ede:	4b13      	ldr	r3, [pc, #76]	; (8024f2c <SMS_digitalTimePrintTheScreen+0xdc>)
 8024ee0:	781a      	ldrb	r2, [r3, #0]
 8024ee2:	4b11      	ldr	r3, [pc, #68]	; (8024f28 <SMS_digitalTimePrintTheScreen+0xd8>)
 8024ee4:	701a      	strb	r2, [r3, #0]


					    	lv_obj_align(slpdigitalDate, NULL, LV_ALIGN_CENTER, 0, 10);
 8024ee6:	4b15      	ldr	r3, [pc, #84]	; (8024f3c <SMS_digitalTimePrintTheScreen+0xec>)
 8024ee8:	6818      	ldr	r0, [r3, #0]
 8024eea:	230a      	movs	r3, #10
 8024eec:	9300      	str	r3, [sp, #0]
 8024eee:	2300      	movs	r3, #0
 8024ef0:	2200      	movs	r2, #0
 8024ef2:	2100      	movs	r1, #0
 8024ef4:	f7e1 f9f2 	bl	80062dc <lv_obj_align>
					    	lv_obj_align(slpweekDay, NULL, LV_ALIGN_CENTER, 0, 35);
 8024ef8:	4b11      	ldr	r3, [pc, #68]	; (8024f40 <SMS_digitalTimePrintTheScreen+0xf0>)
 8024efa:	6818      	ldr	r0, [r3, #0]
 8024efc:	2323      	movs	r3, #35	; 0x23
 8024efe:	9300      	str	r3, [sp, #0]
 8024f00:	2300      	movs	r3, #0
 8024f02:	2200      	movs	r2, #0
 8024f04:	2100      	movs	r1, #0
 8024f06:	f7e1 f9e9 	bl	80062dc <lv_obj_align>
				}
}
 8024f0a:	bf00      	nop
 8024f0c:	46bd      	mov	sp, r7
 8024f0e:	bd80      	pop	{r7, pc}
 8024f10:	20006ef5 	.word	0x20006ef5
 8024f14:	20006ef4 	.word	0x20006ef4
 8024f18:	20006ee4 	.word	0x20006ee4
 8024f1c:	0802a35c 	.word	0x0802a35c
 8024f20:	20007114 	.word	0x20007114
 8024f24:	2000707c 	.word	0x2000707c
 8024f28:	20006e0c 	.word	0x20006e0c
 8024f2c:	200073c4 	.word	0x200073c4
 8024f30:	20006e24 	.word	0x20006e24
 8024f34:	20006ee6 	.word	0x20006ee6
 8024f38:	0802a36c 	.word	0x0802a36c
 8024f3c:	20007078 	.word	0x20007078
 8024f40:	200070c4 	.word	0x200070c4
 8024f44:	20007124 	.word	0x20007124

08024f48 <SMS_batteryValueUpdater>:
/* This function using for battery value update
*/
void SMS_batteryValueUpdater(void){
 8024f48:	b580      	push	{r7, lr}
 8024f4a:	b082      	sub	sp, #8
 8024f4c:	af02      	add	r7, sp, #8
		  lv_label_set_text(slpbatteryLbl, slpbatteryVal);
 8024f4e:	4b0c      	ldr	r3, [pc, #48]	; (8024f80 <SMS_batteryValueUpdater+0x38>)
 8024f50:	681a      	ldr	r2, [r3, #0]
 8024f52:	4b0c      	ldr	r3, [pc, #48]	; (8024f84 <SMS_batteryValueUpdater+0x3c>)
 8024f54:	681b      	ldr	r3, [r3, #0]
 8024f56:	4619      	mov	r1, r3
 8024f58:	4610      	mov	r0, r2
 8024f5a:	f7f4 fc09 	bl	8019770 <lv_label_set_text>
		  slpbattery_style.text.color = slpbatteryColor;
 8024f5e:	4a0a      	ldr	r2, [pc, #40]	; (8024f88 <SMS_batteryValueUpdater+0x40>)
 8024f60:	4b0a      	ldr	r3, [pc, #40]	; (8024f8c <SMS_batteryValueUpdater+0x44>)
 8024f62:	881b      	ldrh	r3, [r3, #0]
 8024f64:	8413      	strh	r3, [r2, #32]
		  lv_obj_align(slpbatteryLbl, NULL, LV_ALIGN_CENTER, 100, -110);
 8024f66:	4b06      	ldr	r3, [pc, #24]	; (8024f80 <SMS_batteryValueUpdater+0x38>)
 8024f68:	6818      	ldr	r0, [r3, #0]
 8024f6a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024f6e:	9300      	str	r3, [sp, #0]
 8024f70:	2364      	movs	r3, #100	; 0x64
 8024f72:	2200      	movs	r2, #0
 8024f74:	2100      	movs	r1, #0
 8024f76:	f7e1 f9b1 	bl	80062dc <lv_obj_align>
}
 8024f7a:	bf00      	nop
 8024f7c:	46bd      	mov	sp, r7
 8024f7e:	bd80      	pop	{r7, pc}
 8024f80:	20007108 	.word	0x20007108
 8024f84:	20007110 	.word	0x20007110
 8024f88:	200070c8 	.word	0x200070c8
 8024f8c:	2000710c 	.word	0x2000710c

08024f90 <SMS_bluetoothStatusUpdater>:
/* This function using for bluetooth status update
*/
void SMS_bluetoothStatusUpdater(void){
 8024f90:	b580      	push	{r7, lr}
 8024f92:	b082      	sub	sp, #8
 8024f94:	af02      	add	r7, sp, #8
		if(slpbluetoothStatus){
 8024f96:	4b11      	ldr	r3, [pc, #68]	; (8024fdc <SMS_bluetoothStatusUpdater+0x4c>)
 8024f98:	781b      	ldrb	r3, [r3, #0]
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	d015      	beq.n	8024fca <SMS_bluetoothStatusUpdater+0x3a>
			slpbluetooth_style.text.color = slpbluetoothColor;
 8024f9e:	4a10      	ldr	r2, [pc, #64]	; (8024fe0 <SMS_bluetoothStatusUpdater+0x50>)
 8024fa0:	4b10      	ldr	r3, [pc, #64]	; (8024fe4 <SMS_bluetoothStatusUpdater+0x54>)
 8024fa2:	881b      	ldrh	r3, [r3, #0]
 8024fa4:	8413      	strh	r3, [r2, #32]
			  lv_label_set_text(slpbluetoothLbl, LV_SYMBOL_BLUETOOTH);
 8024fa6:	4b10      	ldr	r3, [pc, #64]	; (8024fe8 <SMS_bluetoothStatusUpdater+0x58>)
 8024fa8:	681b      	ldr	r3, [r3, #0]
 8024faa:	4910      	ldr	r1, [pc, #64]	; (8024fec <SMS_bluetoothStatusUpdater+0x5c>)
 8024fac:	4618      	mov	r0, r3
 8024fae:	f7f4 fbdf 	bl	8019770 <lv_label_set_text>
			  lv_obj_align(slpbluetoothLbl, NULL, LV_ALIGN_CENTER, -110, -110);
 8024fb2:	4b0d      	ldr	r3, [pc, #52]	; (8024fe8 <SMS_bluetoothStatusUpdater+0x58>)
 8024fb4:	6818      	ldr	r0, [r3, #0]
 8024fb6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024fba:	9300      	str	r3, [sp, #0]
 8024fbc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024fc0:	2200      	movs	r2, #0
 8024fc2:	2100      	movs	r1, #0
 8024fc4:	f7e1 f98a 	bl	80062dc <lv_obj_align>
		}
		else lv_label_set_text(slpbluetoothLbl, " ");
}
 8024fc8:	e005      	b.n	8024fd6 <SMS_bluetoothStatusUpdater+0x46>
		else lv_label_set_text(slpbluetoothLbl, " ");
 8024fca:	4b07      	ldr	r3, [pc, #28]	; (8024fe8 <SMS_bluetoothStatusUpdater+0x58>)
 8024fcc:	681b      	ldr	r3, [r3, #0]
 8024fce:	4908      	ldr	r1, [pc, #32]	; (8024ff0 <SMS_bluetoothStatusUpdater+0x60>)
 8024fd0:	4618      	mov	r0, r3
 8024fd2:	f7f4 fbcd 	bl	8019770 <lv_label_set_text>
}
 8024fd6:	bf00      	nop
 8024fd8:	46bd      	mov	sp, r7
 8024fda:	bd80      	pop	{r7, pc}
 8024fdc:	20007105 	.word	0x20007105
 8024fe0:	20007084 	.word	0x20007084
 8024fe4:	20007080 	.word	0x20007080
 8024fe8:	200070c0 	.word	0x200070c0
 8024fec:	0802a358 	.word	0x0802a358
 8024ff0:	0802a384 	.word	0x0802a384

08024ff4 <SleepModeScreen_SetTime>:

//Getter and setter functions
void SleepModeScreen_SetTime(uint8_t getHours, uint8_t getMinutes, uint8_t getSeconds) {
 8024ff4:	b480      	push	{r7}
 8024ff6:	b083      	sub	sp, #12
 8024ff8:	af00      	add	r7, sp, #0
 8024ffa:	4603      	mov	r3, r0
 8024ffc:	71fb      	strb	r3, [r7, #7]
 8024ffe:	460b      	mov	r3, r1
 8025000:	71bb      	strb	r3, [r7, #6]
 8025002:	4613      	mov	r3, r2
 8025004:	717b      	strb	r3, [r7, #5]
	hours = getHours;
 8025006:	4a07      	ldr	r2, [pc, #28]	; (8025024 <SleepModeScreen_SetTime+0x30>)
 8025008:	79fb      	ldrb	r3, [r7, #7]
 802500a:	7013      	strb	r3, [r2, #0]
	minutes = getMinutes;
 802500c:	4a06      	ldr	r2, [pc, #24]	; (8025028 <SleepModeScreen_SetTime+0x34>)
 802500e:	79bb      	ldrb	r3, [r7, #6]
 8025010:	7013      	strb	r3, [r2, #0]
	seconds = getSeconds;
 8025012:	4a06      	ldr	r2, [pc, #24]	; (802502c <SleepModeScreen_SetTime+0x38>)
 8025014:	797b      	ldrb	r3, [r7, #5]
 8025016:	7013      	strb	r3, [r2, #0]
}
 8025018:	bf00      	nop
 802501a:	370c      	adds	r7, #12
 802501c:	46bd      	mov	sp, r7
 802501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025022:	4770      	bx	lr
 8025024:	20006ef5 	.word	0x20006ef5
 8025028:	20006ef4 	.word	0x20006ef4
 802502c:	20006ee4 	.word	0x20006ee4

08025030 <SleepModeScreen_SetDate>:
void SleepModeScreen_SetDate(uint8_t getYear, uint8_t getMonth, uint8_t getDate, char* getWeekDay) {
 8025030:	b480      	push	{r7}
 8025032:	b083      	sub	sp, #12
 8025034:	af00      	add	r7, sp, #0
 8025036:	603b      	str	r3, [r7, #0]
 8025038:	4603      	mov	r3, r0
 802503a:	71fb      	strb	r3, [r7, #7]
 802503c:	460b      	mov	r3, r1
 802503e:	71bb      	strb	r3, [r7, #6]
 8025040:	4613      	mov	r3, r2
 8025042:	717b      	strb	r3, [r7, #5]
	year =getYear+2000;
 8025044:	79fb      	ldrb	r3, [r7, #7]
 8025046:	b29b      	uxth	r3, r3
 8025048:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 802504c:	b29a      	uxth	r2, r3
 802504e:	4b08      	ldr	r3, [pc, #32]	; (8025070 <SleepModeScreen_SetDate+0x40>)
 8025050:	801a      	strh	r2, [r3, #0]
	month = getMonth;
 8025052:	4a08      	ldr	r2, [pc, #32]	; (8025074 <SleepModeScreen_SetDate+0x44>)
 8025054:	79bb      	ldrb	r3, [r7, #6]
 8025056:	7013      	strb	r3, [r2, #0]
	date = getDate;
 8025058:	4a07      	ldr	r2, [pc, #28]	; (8025078 <SleepModeScreen_SetDate+0x48>)
 802505a:	797b      	ldrb	r3, [r7, #5]
 802505c:	7013      	strb	r3, [r2, #0]
	slpweekDayStr =getWeekDay;
 802505e:	4a07      	ldr	r2, [pc, #28]	; (802507c <SleepModeScreen_SetDate+0x4c>)
 8025060:	683b      	ldr	r3, [r7, #0]
 8025062:	6013      	str	r3, [r2, #0]

}
 8025064:	bf00      	nop
 8025066:	370c      	adds	r7, #12
 8025068:	46bd      	mov	sp, r7
 802506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802506e:	4770      	bx	lr
 8025070:	20006ee6 	.word	0x20006ee6
 8025074:	20006e24 	.word	0x20006e24
 8025078:	200073c4 	.word	0x200073c4
 802507c:	20007124 	.word	0x20007124

08025080 <SleepModeScreen_SetBatteryVal>:
void SleepModeScreen_SetBatteryVal(char* getBatteryVal, lv_color_t getBatteryColor) {
 8025080:	b480      	push	{r7}
 8025082:	b083      	sub	sp, #12
 8025084:	af00      	add	r7, sp, #0
 8025086:	6078      	str	r0, [r7, #4]
 8025088:	8039      	strh	r1, [r7, #0]
	slpbatteryVal =getBatteryVal;
 802508a:	4a06      	ldr	r2, [pc, #24]	; (80250a4 <SleepModeScreen_SetBatteryVal+0x24>)
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	6013      	str	r3, [r2, #0]
	slpbatteryColor =getBatteryColor;
 8025090:	4a05      	ldr	r2, [pc, #20]	; (80250a8 <SleepModeScreen_SetBatteryVal+0x28>)
 8025092:	883b      	ldrh	r3, [r7, #0]
 8025094:	8013      	strh	r3, [r2, #0]
}
 8025096:	bf00      	nop
 8025098:	370c      	adds	r7, #12
 802509a:	46bd      	mov	sp, r7
 802509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250a0:	4770      	bx	lr
 80250a2:	bf00      	nop
 80250a4:	20007110 	.word	0x20007110
 80250a8:	2000710c 	.word	0x2000710c

080250ac <SleepModeScreen_SetBluetoothStatusVal>:
void SleepModeScreen_SetBluetoothStatusVal(bool getBluetoothStatus, lv_color_t getBluetoothColor) {
 80250ac:	b480      	push	{r7}
 80250ae:	b083      	sub	sp, #12
 80250b0:	af00      	add	r7, sp, #0
 80250b2:	4603      	mov	r3, r0
 80250b4:	80b9      	strh	r1, [r7, #4]
 80250b6:	71fb      	strb	r3, [r7, #7]
	slpbluetoothStatus =getBluetoothStatus;
 80250b8:	4a05      	ldr	r2, [pc, #20]	; (80250d0 <SleepModeScreen_SetBluetoothStatusVal+0x24>)
 80250ba:	79fb      	ldrb	r3, [r7, #7]
 80250bc:	7013      	strb	r3, [r2, #0]
	slpbluetoothColor =getBluetoothColor;
 80250be:	4a05      	ldr	r2, [pc, #20]	; (80250d4 <SleepModeScreen_SetBluetoothStatusVal+0x28>)
 80250c0:	88bb      	ldrh	r3, [r7, #4]
 80250c2:	8013      	strh	r3, [r2, #0]
}
 80250c4:	bf00      	nop
 80250c6:	370c      	adds	r7, #12
 80250c8:	46bd      	mov	sp, r7
 80250ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ce:	4770      	bx	lr
 80250d0:	20007105 	.word	0x20007105
 80250d4:	20007080 	.word	0x20007080

080250d8 <SleepModeScreen_TaskControllerSet>:
void SleepModeScreen_TaskControllerSet(bool active){
 80250d8:	b480      	push	{r7}
 80250da:	b083      	sub	sp, #12
 80250dc:	af00      	add	r7, sp, #0
 80250de:	4603      	mov	r3, r0
 80250e0:	71fb      	strb	r3, [r7, #7]
	slptaskController = active;
 80250e2:	4a04      	ldr	r2, [pc, #16]	; (80250f4 <SleepModeScreen_TaskControllerSet+0x1c>)
 80250e4:	79fb      	ldrb	r3, [r7, #7]
 80250e6:	7013      	strb	r3, [r2, #0]
}
 80250e8:	bf00      	nop
 80250ea:	370c      	adds	r7, #12
 80250ec:	46bd      	mov	sp, r7
 80250ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250f2:	4770      	bx	lr
 80250f4:	20007104 	.word	0x20007104

080250f8 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80250f8:	b480      	push	{r7}
 80250fa:	b085      	sub	sp, #20
 80250fc:	af00      	add	r7, sp, #0
 80250fe:	4603      	mov	r3, r0
 8025100:	71fb      	strb	r3, [r7, #7]
 8025102:	460b      	mov	r3, r1
 8025104:	71bb      	strb	r3, [r7, #6]
 8025106:	4613      	mov	r3, r2
 8025108:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 802510a:	79bb      	ldrb	r3, [r7, #6]
 802510c:	095b      	lsrs	r3, r3, #5
 802510e:	b2db      	uxtb	r3, r3
 8025110:	f003 0307 	and.w	r3, r3, #7
 8025114:	b2da      	uxtb	r2, r3
 8025116:	7b3b      	ldrb	r3, [r7, #12]
 8025118:	f362 0302 	bfi	r3, r2, #0, #3
 802511c:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 802511e:	79fb      	ldrb	r3, [r7, #7]
 8025120:	08db      	lsrs	r3, r3, #3
 8025122:	b2db      	uxtb	r3, r3
 8025124:	f003 031f 	and.w	r3, r3, #31
 8025128:	b2da      	uxtb	r2, r3
 802512a:	7b3b      	ldrb	r3, [r7, #12]
 802512c:	f362 03c7 	bfi	r3, r2, #3, #5
 8025130:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 8025132:	797b      	ldrb	r3, [r7, #5]
 8025134:	08db      	lsrs	r3, r3, #3
 8025136:	b2db      	uxtb	r3, r3
 8025138:	f003 031f 	and.w	r3, r3, #31
 802513c:	b2da      	uxtb	r2, r3
 802513e:	7b7b      	ldrb	r3, [r7, #13]
 8025140:	f362 0304 	bfi	r3, r2, #0, #5
 8025144:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 8025146:	79bb      	ldrb	r3, [r7, #6]
 8025148:	089b      	lsrs	r3, r3, #2
 802514a:	b2db      	uxtb	r3, r3
 802514c:	f003 0307 	and.w	r3, r3, #7
 8025150:	b2da      	uxtb	r2, r3
 8025152:	7b7b      	ldrb	r3, [r7, #13]
 8025154:	f362 1347 	bfi	r3, r2, #5, #3
 8025158:	737b      	strb	r3, [r7, #13]
    return color;
 802515a:	89bb      	ldrh	r3, [r7, #12]
}
 802515c:	4618      	mov	r0, r3
 802515e:	3714      	adds	r7, #20
 8025160:	46bd      	mov	sp, r7
 8025162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025166:	4770      	bx	lr

08025168 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025168:	b580      	push	{r7, lr}
 802516a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 802516c:	f7ed fa18 	bl	80125a0 <lv_disp_get_default>
 8025170:	4603      	mov	r3, r0
 8025172:	4618      	mov	r0, r3
 8025174:	f7df fee0 	bl	8004f38 <lv_disp_get_scr_act>
 8025178:	4603      	mov	r3, r0
}
 802517a:	4618      	mov	r0, r3
 802517c:	bd80      	pop	{r7, pc}

0802517e <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 802517e:	b580      	push	{r7, lr}
 8025180:	b084      	sub	sp, #16
 8025182:	af00      	add	r7, sp, #0
 8025184:	60f8      	str	r0, [r7, #12]
 8025186:	460b      	mov	r3, r1
 8025188:	607a      	str	r2, [r7, #4]
 802518a:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 802518c:	6879      	ldr	r1, [r7, #4]
 802518e:	68f8      	ldr	r0, [r7, #12]
 8025190:	f7e1 fd49 	bl	8006c26 <lv_obj_set_style>
}
 8025194:	bf00      	nop
 8025196:	3710      	adds	r7, #16
 8025198:	46bd      	mov	sp, r7
 802519a:	bd80      	pop	{r7, pc}

0802519c <tos_StartScreen_Init>:
#include "StartScreen.h"
#include "../../tOSbaga.h"
#include "stdio.h"


void tos_StartScreen_Init(void) {
 802519c:	b590      	push	{r4, r7, lr}
 802519e:	b085      	sub	sp, #20
 80251a0:	af02      	add	r7, sp, #8
	static lv_style_t style_screen;
	lv_style_copy(&style_screen, &lv_style_plain);
 80251a2:	4926      	ldr	r1, [pc, #152]	; (802523c <tos_StartScreen_Init+0xa0>)
 80251a4:	4826      	ldr	r0, [pc, #152]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251a6:	f7e3 fadd 	bl	8008764 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_BLACK;
 80251aa:	4b25      	ldr	r3, [pc, #148]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251ac:	2200      	movs	r2, #0
 80251ae:	805a      	strh	r2, [r3, #2]
	style_screen.body.grad_color = LV_COLOR_BLACK;
 80251b0:	4b23      	ldr	r3, [pc, #140]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251b2:	2200      	movs	r2, #0
 80251b4:	809a      	strh	r2, [r3, #4]
	style_screen.text.color = lv_color_make(68,133,247);
 80251b6:	4c22      	ldr	r4, [pc, #136]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251b8:	22f7      	movs	r2, #247	; 0xf7
 80251ba:	2185      	movs	r1, #133	; 0x85
 80251bc:	2044      	movs	r0, #68	; 0x44
 80251be:	f7ff ff9b 	bl	80250f8 <lv_color_make>
 80251c2:	8420      	strh	r0, [r4, #32]
	style_screen.text.font = &lv_font_roboto_28;
 80251c4:	4b1e      	ldr	r3, [pc, #120]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251c6:	4a1f      	ldr	r2, [pc, #124]	; (8025244 <tos_StartScreen_Init+0xa8>)
 80251c8:	625a      	str	r2, [r3, #36]	; 0x24
	lv_obj_set_style(lv_scr_act(), &style_screen);
 80251ca:	f7ff ffcd 	bl	8025168 <lv_scr_act>
 80251ce:	4603      	mov	r3, r0
 80251d0:	491b      	ldr	r1, [pc, #108]	; (8025240 <tos_StartScreen_Init+0xa4>)
 80251d2:	4618      	mov	r0, r3
 80251d4:	f7e1 fd27 	bl	8006c26 <lv_obj_set_style>

	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 80251d8:	f7ff ffc6 	bl	8025168 <lv_scr_act>
 80251dc:	4603      	mov	r3, r0
 80251de:	2100      	movs	r1, #0
 80251e0:	4618      	mov	r0, r3
 80251e2:	f7f3 fe07 	bl	8018df4 <lv_img_create>
 80251e6:	6078      	str	r0, [r7, #4]
	lv_img_set_src(img1, &tos75x75);
 80251e8:	4917      	ldr	r1, [pc, #92]	; (8025248 <tos_StartScreen_Init+0xac>)
 80251ea:	6878      	ldr	r0, [r7, #4]
 80251ec:	f7f3 fea0 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -20);
 80251f0:	f06f 0313 	mvn.w	r3, #19
 80251f4:	9300      	str	r3, [sp, #0]
 80251f6:	2300      	movs	r3, #0
 80251f8:	2200      	movs	r2, #0
 80251fa:	2100      	movs	r1, #0
 80251fc:	6878      	ldr	r0, [r7, #4]
 80251fe:	f7e1 f86d 	bl	80062dc <lv_obj_align>

	lv_obj_t * tosLbl =lv_label_create(lv_scr_act(), NULL);
 8025202:	f7ff ffb1 	bl	8025168 <lv_scr_act>
 8025206:	4603      	mov	r3, r0
 8025208:	2100      	movs	r1, #0
 802520a:	4618      	mov	r0, r3
 802520c:	f7f4 f97e 	bl	801950c <lv_label_create>
 8025210:	6038      	str	r0, [r7, #0]
 	lv_label_set_style(tosLbl, LV_LABEL_STYLE_MAIN, &style_screen);
 8025212:	4a0b      	ldr	r2, [pc, #44]	; (8025240 <tos_StartScreen_Init+0xa4>)
 8025214:	2100      	movs	r1, #0
 8025216:	6838      	ldr	r0, [r7, #0]
 8025218:	f7ff ffb1 	bl	802517e <lv_label_set_style>
 	lv_label_set_text(tosLbl, "tOSbaga fsw 1.0");
 802521c:	490b      	ldr	r1, [pc, #44]	; (802524c <tos_StartScreen_Init+0xb0>)
 802521e:	6838      	ldr	r0, [r7, #0]
 8025220:	f7f4 faa6 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(tosLbl, NULL, LV_ALIGN_CENTER, 0, 50);
 8025224:	2332      	movs	r3, #50	; 0x32
 8025226:	9300      	str	r3, [sp, #0]
 8025228:	2300      	movs	r3, #0
 802522a:	2200      	movs	r2, #0
 802522c:	2100      	movs	r1, #0
 802522e:	6838      	ldr	r0, [r7, #0]
 8025230:	f7e1 f854 	bl	80062dc <lv_obj_align>
}
 8025234:	bf00      	nop
 8025236:	370c      	adds	r7, #12
 8025238:	46bd      	mov	sp, r7
 802523a:	bd90      	pop	{r4, r7, pc}
 802523c:	20006c74 	.word	0x20006c74
 8025240:	20006670 	.word	0x20006670
 8025244:	20002394 	.word	0x20002394
 8025248:	08044fcc 	.word	0x08044fcc
 802524c:	0802a388 	.word	0x0802a388

08025250 <lv_color_make>:
    return color;
}
#else
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{g8 >> 5, r8 >> 3, b8 >> 3, (g8 >> 2) & 0x7}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8025250:	b480      	push	{r7}
 8025252:	b085      	sub	sp, #20
 8025254:	af00      	add	r7, sp, #0
 8025256:	4603      	mov	r3, r0
 8025258:	71fb      	strb	r3, [r7, #7]
 802525a:	460b      	mov	r3, r1
 802525c:	71bb      	strb	r3, [r7, #6]
 802525e:	4613      	mov	r3, r2
 8025260:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.green_h = (uint16_t)(g8 >> 5);
 8025262:	79bb      	ldrb	r3, [r7, #6]
 8025264:	095b      	lsrs	r3, r3, #5
 8025266:	b2db      	uxtb	r3, r3
 8025268:	f003 0307 	and.w	r3, r3, #7
 802526c:	b2da      	uxtb	r2, r3
 802526e:	7b3b      	ldrb	r3, [r7, #12]
 8025270:	f362 0302 	bfi	r3, r2, #0, #3
 8025274:	733b      	strb	r3, [r7, #12]
    color.ch.red = (uint16_t)(r8 >> 3);
 8025276:	79fb      	ldrb	r3, [r7, #7]
 8025278:	08db      	lsrs	r3, r3, #3
 802527a:	b2db      	uxtb	r3, r3
 802527c:	f003 031f 	and.w	r3, r3, #31
 8025280:	b2da      	uxtb	r2, r3
 8025282:	7b3b      	ldrb	r3, [r7, #12]
 8025284:	f362 03c7 	bfi	r3, r2, #3, #5
 8025288:	733b      	strb	r3, [r7, #12]
    color.ch.blue = (uint16_t)(b8 >> 3);
 802528a:	797b      	ldrb	r3, [r7, #5]
 802528c:	08db      	lsrs	r3, r3, #3
 802528e:	b2db      	uxtb	r3, r3
 8025290:	f003 031f 	and.w	r3, r3, #31
 8025294:	b2da      	uxtb	r2, r3
 8025296:	7b7b      	ldrb	r3, [r7, #13]
 8025298:	f362 0304 	bfi	r3, r2, #0, #5
 802529c:	737b      	strb	r3, [r7, #13]
    color.ch.green_l = (uint16_t)((g8 >> 2) & 0x7);
 802529e:	79bb      	ldrb	r3, [r7, #6]
 80252a0:	089b      	lsrs	r3, r3, #2
 80252a2:	b2db      	uxtb	r3, r3
 80252a4:	f003 0307 	and.w	r3, r3, #7
 80252a8:	b2da      	uxtb	r2, r3
 80252aa:	7b7b      	ldrb	r3, [r7, #13]
 80252ac:	f362 1347 	bfi	r3, r2, #5, #3
 80252b0:	737b      	strb	r3, [r7, #13]
    return color;
 80252b2:	89bb      	ldrh	r3, [r7, #12]
}
 80252b4:	4618      	mov	r0, r3
 80252b6:	3714      	adds	r7, #20
 80252b8:	46bd      	mov	sp, r7
 80252ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252be:	4770      	bx	lr

080252c0 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 80252c0:	b580      	push	{r7, lr}
 80252c2:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80252c4:	f7ed f96c 	bl	80125a0 <lv_disp_get_default>
 80252c8:	4603      	mov	r3, r0
 80252ca:	4618      	mov	r0, r3
 80252cc:	f7df fe34 	bl	8004f38 <lv_disp_get_scr_act>
 80252d0:	4603      	mov	r3, r0
}
 80252d2:	4618      	mov	r0, r3
 80252d4:	bd80      	pop	{r7, pc}

080252d6 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80252d6:	b580      	push	{r7, lr}
 80252d8:	b084      	sub	sp, #16
 80252da:	af00      	add	r7, sp, #0
 80252dc:	60f8      	str	r0, [r7, #12]
 80252de:	460b      	mov	r3, r1
 80252e0:	607a      	str	r2, [r7, #4]
 80252e2:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80252e4:	6879      	ldr	r1, [r7, #4]
 80252e6:	68f8      	ldr	r0, [r7, #12]
 80252e8:	f7e1 fc9d 	bl	8006c26 <lv_obj_set_style>
}
 80252ec:	bf00      	nop
 80252ee:	3710      	adds	r7, #16
 80252f0:	46bd      	mov	sp, r7
 80252f2:	bd80      	pop	{r7, pc}

080252f4 <tos_StepAndKcalScreen_Init>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void tos_StepAndKcalScreen_Init(bool unitType, bool theme){
 80252f4:	b580      	push	{r7, lr}
 80252f6:	b082      	sub	sp, #8
 80252f8:	af00      	add	r7, sp, #0
 80252fa:	4603      	mov	r3, r0
 80252fc:	460a      	mov	r2, r1
 80252fe:	71fb      	strb	r3, [r7, #7]
 8025300:	4613      	mov	r3, r2
 8025302:	71bb      	strb	r3, [r7, #6]
	lv_obj_clean(lv_scr_act());
 8025304:	f7ff ffdc 	bl	80252c0 <lv_scr_act>
 8025308:	4603      	mov	r3, r0
 802530a:	4618      	mov	r0, r3
 802530c:	f7e0 fd74 	bl	8005df8 <lv_obj_clean>
	lv_style_copy(&description_Style, &lv_style_plain);
 8025310:	4928      	ldr	r1, [pc, #160]	; (80253b4 <tos_StepAndKcalScreen_Init+0xc0>)
 8025312:	4829      	ldr	r0, [pc, #164]	; (80253b8 <tos_StepAndKcalScreen_Init+0xc4>)
 8025314:	f7e3 fa26 	bl	8008764 <lv_style_copy>
	description_Style.text.font = &lv_font_unscii_8;
 8025318:	4b27      	ldr	r3, [pc, #156]	; (80253b8 <tos_StepAndKcalScreen_Init+0xc4>)
 802531a:	4a28      	ldr	r2, [pc, #160]	; (80253bc <tos_StepAndKcalScreen_Init+0xc8>)
 802531c:	625a      	str	r2, [r3, #36]	; 0x24
	description_Style.text.color = LV_COLOR_GRAY;
 802531e:	4a26      	ldr	r2, [pc, #152]	; (80253b8 <tos_StepAndKcalScreen_Init+0xc4>)
 8025320:	4b27      	ldr	r3, [pc, #156]	; (80253c0 <tos_StepAndKcalScreen_Init+0xcc>)
 8025322:	881b      	ldrh	r3, [r3, #0]
 8025324:	8413      	strh	r3, [r2, #32]

	lv_style_copy(&style_screen, &lv_style_plain);
 8025326:	4923      	ldr	r1, [pc, #140]	; (80253b4 <tos_StepAndKcalScreen_Init+0xc0>)
 8025328:	4826      	ldr	r0, [pc, #152]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 802532a:	f7e3 fa1b 	bl	8008764 <lv_style_copy>
	if(theme){
 802532e:	79bb      	ldrb	r3, [r7, #6]
 8025330:	2b00      	cmp	r3, #0
 8025332:	d00a      	beq.n	802534a <tos_StepAndKcalScreen_Init+0x56>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8025334:	4b23      	ldr	r3, [pc, #140]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 8025336:	2200      	movs	r2, #0
 8025338:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 802533a:	4b22      	ldr	r3, [pc, #136]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 802533c:	2200      	movs	r2, #0
 802533e:	809a      	strh	r2, [r3, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 8025340:	4a1d      	ldr	r2, [pc, #116]	; (80253b8 <tos_StepAndKcalScreen_Init+0xc4>)
 8025342:	4b21      	ldr	r3, [pc, #132]	; (80253c8 <tos_StepAndKcalScreen_Init+0xd4>)
 8025344:	881b      	ldrh	r3, [r3, #0]
 8025346:	8413      	strh	r3, [r2, #32]
 8025348:	e00b      	b.n	8025362 <tos_StepAndKcalScreen_Init+0x6e>
	}else{
		style_screen.body.main_color = LV_COLOR_WHITE;
 802534a:	4a1e      	ldr	r2, [pc, #120]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 802534c:	4b1f      	ldr	r3, [pc, #124]	; (80253cc <tos_StepAndKcalScreen_Init+0xd8>)
 802534e:	881b      	ldrh	r3, [r3, #0]
 8025350:	8053      	strh	r3, [r2, #2]
		style_screen.body.grad_color = LV_COLOR_WHITE;
 8025352:	4a1c      	ldr	r2, [pc, #112]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 8025354:	4b1d      	ldr	r3, [pc, #116]	; (80253cc <tos_StepAndKcalScreen_Init+0xd8>)
 8025356:	881b      	ldrh	r3, [r3, #0]
 8025358:	8093      	strh	r3, [r2, #4]
		description_Style.text.color = LV_COLOR_SILVER;
 802535a:	4a17      	ldr	r2, [pc, #92]	; (80253b8 <tos_StepAndKcalScreen_Init+0xc4>)
 802535c:	4b1a      	ldr	r3, [pc, #104]	; (80253c8 <tos_StepAndKcalScreen_Init+0xd4>)
 802535e:	881b      	ldrh	r3, [r3, #0]
 8025360:	8413      	strh	r3, [r2, #32]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025362:	f7ff ffad 	bl	80252c0 <lv_scr_act>
 8025366:	4603      	mov	r3, r0
 8025368:	4916      	ldr	r1, [pc, #88]	; (80253c4 <tos_StepAndKcalScreen_Init+0xd0>)
 802536a:	4618      	mov	r0, r3
 802536c:	f7e1 fc5b 	bl	8006c26 <lv_obj_set_style>

	SAK_unitType=unitType;
 8025370:	4a17      	ldr	r2, [pc, #92]	; (80253d0 <tos_StepAndKcalScreen_Init+0xdc>)
 8025372:	79fb      	ldrb	r3, [r7, #7]
 8025374:	7013      	strb	r3, [r2, #0]
	SAK_buffTmp="null";
 8025376:	4b17      	ldr	r3, [pc, #92]	; (80253d4 <tos_StepAndKcalScreen_Init+0xe0>)
 8025378:	4a17      	ldr	r2, [pc, #92]	; (80253d8 <tos_StepAndKcalScreen_Init+0xe4>)
 802537a:	601a      	str	r2, [r3, #0]

	StepAndKcal_Steps(theme);
 802537c:	79bb      	ldrb	r3, [r7, #6]
 802537e:	4618      	mov	r0, r3
 8025380:	f000 f830 	bl	80253e4 <StepAndKcal_Steps>
	StepAndKcal_kCals(theme);
 8025384:	79bb      	ldrb	r3, [r7, #6]
 8025386:	4618      	mov	r0, r3
 8025388:	f000 f8e4 	bl	8025554 <StepAndKcal_kCals>
	StepAndKcal_Distances(unitType,theme);
 802538c:	79ba      	ldrb	r2, [r7, #6]
 802538e:	79fb      	ldrb	r3, [r7, #7]
 8025390:	4611      	mov	r1, r2
 8025392:	4618      	mov	r0, r3
 8025394:	f000 f996 	bl	80256c4 <StepAndKcal_Distances>
	SAk_taskController=true;
 8025398:	4b10      	ldr	r3, [pc, #64]	; (80253dc <tos_StepAndKcalScreen_Init+0xe8>)
 802539a:	2201      	movs	r2, #1
 802539c:	701a      	strb	r2, [r3, #0]
	lv_task_create(SAK_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 802539e:	2300      	movs	r3, #0
 80253a0:	2201      	movs	r2, #1
 80253a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80253a6:	480e      	ldr	r0, [pc, #56]	; (80253e0 <tos_StepAndKcalScreen_Init+0xec>)
 80253a8:	f7ee fd3e 	bl	8013e28 <lv_task_create>
}
 80253ac:	bf00      	nop
 80253ae:	3708      	adds	r7, #8
 80253b0:	46bd      	mov	sp, r7
 80253b2:	bd80      	pop	{r7, pc}
 80253b4:	20006c74 	.word	0x20006c74
 80253b8:	200066e8 	.word	0x200066e8
 80253bc:	200026cc 	.word	0x200026cc
 80253c0:	0802a3a0 	.word	0x0802a3a0
 80253c4:	200066ac 	.word	0x200066ac
 80253c8:	0802a3a4 	.word	0x0802a3a4
 80253cc:	0802a3a8 	.word	0x0802a3a8
 80253d0:	20007158 	.word	0x20007158
 80253d4:	2000712c 	.word	0x2000712c
 80253d8:	0802a398 	.word	0x0802a398
 80253dc:	20007150 	.word	0x20007150
 80253e0:	08025845 	.word	0x08025845

080253e4 <StepAndKcal_Steps>:
/* This function using for initiation steps Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Steps(bool theme){
 80253e4:	b590      	push	{r4, r7, lr}
 80253e6:	b087      	sub	sp, #28
 80253e8:	af02      	add	r7, sp, #8
 80253ea:	4603      	mov	r3, r0
 80253ec:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 80253ee:	f7ff ff67 	bl	80252c0 <lv_scr_act>
 80253f2:	4603      	mov	r3, r0
 80253f4:	2100      	movs	r1, #0
 80253f6:	4618      	mov	r0, r3
 80253f8:	f7f3 fcfc 	bl	8018df4 <lv_img_create>
 80253fc:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &stepsBlack42x28);
 80253fe:	79fb      	ldrb	r3, [r7, #7]
 8025400:	2b00      	cmp	r3, #0
 8025402:	d004      	beq.n	802540e <StepAndKcal_Steps+0x2a>
 8025404:	4949      	ldr	r1, [pc, #292]	; (802552c <StepAndKcal_Steps+0x148>)
 8025406:	68f8      	ldr	r0, [r7, #12]
 8025408:	f7f3 fd92 	bl	8018f30 <lv_img_set_src>
 802540c:	e003      	b.n	8025416 <StepAndKcal_Steps+0x32>
	else lv_img_set_src(img1, &stepsWhite42x28);
 802540e:	4948      	ldr	r1, [pc, #288]	; (8025530 <StepAndKcal_Steps+0x14c>)
 8025410:	68f8      	ldr	r0, [r7, #12]
 8025412:	f7f3 fd8d 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 0, -83);
 8025416:	f06f 0352 	mvn.w	r3, #82	; 0x52
 802541a:	9300      	str	r3, [sp, #0]
 802541c:	2300      	movs	r3, #0
 802541e:	2200      	movs	r2, #0
 8025420:	2100      	movs	r1, #0
 8025422:	68f8      	ldr	r0, [r7, #12]
 8025424:	f7e0 ff5a 	bl	80062dc <lv_obj_align>

   	lv_obj_t * stepsDescLbl= lv_label_create(lv_scr_act(), NULL);
 8025428:	f7ff ff4a 	bl	80252c0 <lv_scr_act>
 802542c:	4603      	mov	r3, r0
 802542e:	2100      	movs	r1, #0
 8025430:	4618      	mov	r0, r3
 8025432:	f7f4 f86b 	bl	801950c <lv_label_create>
 8025436:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(stepsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 8025438:	4a3e      	ldr	r2, [pc, #248]	; (8025534 <StepAndKcal_Steps+0x150>)
 802543a:	2100      	movs	r1, #0
 802543c:	68b8      	ldr	r0, [r7, #8]
 802543e:	f7ff ff4a 	bl	80252d6 <lv_label_set_style>
   	lv_label_set_text(stepsDescLbl, "steps");
 8025442:	493d      	ldr	r1, [pc, #244]	; (8025538 <StepAndKcal_Steps+0x154>)
 8025444:	68b8      	ldr	r0, [r7, #8]
 8025446:	f7f4 f993 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(stepsDescLbl, NULL, LV_ALIGN_CENTER, 0, -9);
 802544a:	f06f 0308 	mvn.w	r3, #8
 802544e:	9300      	str	r3, [sp, #0]
 8025450:	2300      	movs	r3, #0
 8025452:	2200      	movs	r2, #0
 8025454:	2100      	movs	r1, #0
 8025456:	68b8      	ldr	r0, [r7, #8]
 8025458:	f7e0 ff40 	bl	80062dc <lv_obj_align>

    static lv_style_t steps_Style;
    lv_style_copy(&steps_Style, &lv_style_plain);
 802545c:	4937      	ldr	r1, [pc, #220]	; (802553c <StepAndKcal_Steps+0x158>)
 802545e:	4838      	ldr	r0, [pc, #224]	; (8025540 <StepAndKcal_Steps+0x15c>)
 8025460:	f7e3 f980 	bl	8008764 <lv_style_copy>
    steps_Style.line.color = lv_color_make(101,204,53);
 8025464:	4c36      	ldr	r4, [pc, #216]	; (8025540 <StepAndKcal_Steps+0x15c>)
 8025466:	2235      	movs	r2, #53	; 0x35
 8025468:	21cc      	movs	r1, #204	; 0xcc
 802546a:	2065      	movs	r0, #101	; 0x65
 802546c:	f7ff fef0 	bl	8025250 <lv_color_make>
 8025470:	86a0      	strh	r0, [r4, #52]	; 0x34
    steps_Style.line.width = 3;
 8025472:	4b33      	ldr	r3, [pc, #204]	; (8025540 <StepAndKcal_Steps+0x15c>)
 8025474:	2203      	movs	r2, #3
 8025476:	86da      	strh	r2, [r3, #54]	; 0x36
    steps_Style.text.color = lv_color_make(101,204,53);
 8025478:	4c31      	ldr	r4, [pc, #196]	; (8025540 <StepAndKcal_Steps+0x15c>)
 802547a:	2235      	movs	r2, #53	; 0x35
 802547c:	21cc      	movs	r1, #204	; 0xcc
 802547e:	2065      	movs	r0, #101	; 0x65
 8025480:	f7ff fee6 	bl	8025250 <lv_color_make>
 8025484:	8420      	strh	r0, [r4, #32]
    steps_Style.text.font = &digital_font_for_number_30;
 8025486:	4b2e      	ldr	r3, [pc, #184]	; (8025540 <StepAndKcal_Steps+0x15c>)
 8025488:	4a2e      	ldr	r2, [pc, #184]	; (8025544 <StepAndKcal_Steps+0x160>)
 802548a:	625a      	str	r2, [r3, #36]	; 0x24

	//Dynamic objs
    SAK_stepsArc = lv_arc_create(lv_scr_act(), NULL);
 802548c:	f7ff ff18 	bl	80252c0 <lv_scr_act>
 8025490:	4603      	mov	r3, r0
 8025492:	2100      	movs	r1, #0
 8025494:	4618      	mov	r0, r3
 8025496:	f7ef fa37 	bl	8014908 <lv_arc_create>
 802549a:	4602      	mov	r2, r0
 802549c:	4b2a      	ldr	r3, [pc, #168]	; (8025548 <StepAndKcal_Steps+0x164>)
 802549e:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_stepsArc, 65, 65);
 80254a0:	4b29      	ldr	r3, [pc, #164]	; (8025548 <StepAndKcal_Steps+0x164>)
 80254a2:	681b      	ldr	r3, [r3, #0]
 80254a4:	2241      	movs	r2, #65	; 0x41
 80254a6:	2141      	movs	r1, #65	; 0x41
 80254a8:	4618      	mov	r0, r3
 80254aa:	f7e0 fe74 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(SAK_stepsArc, 0, 360);
 80254ae:	4b26      	ldr	r3, [pc, #152]	; (8025548 <StepAndKcal_Steps+0x164>)
 80254b0:	681b      	ldr	r3, [r3, #0]
 80254b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80254b6:	2100      	movs	r1, #0
 80254b8:	4618      	mov	r0, r3
 80254ba:	f7ef faa1 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(SAK_stepsArc, LV_ARC_STYLE_MAIN, &steps_Style);
 80254be:	4b22      	ldr	r3, [pc, #136]	; (8025548 <StepAndKcal_Steps+0x164>)
 80254c0:	681b      	ldr	r3, [r3, #0]
 80254c2:	4a1f      	ldr	r2, [pc, #124]	; (8025540 <StepAndKcal_Steps+0x15c>)
 80254c4:	2100      	movs	r1, #0
 80254c6:	4618      	mov	r0, r3
 80254c8:	f7ef fac3 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(SAK_stepsArc, NULL, LV_ALIGN_CENTER, 0, -83);
 80254cc:	4b1e      	ldr	r3, [pc, #120]	; (8025548 <StepAndKcal_Steps+0x164>)
 80254ce:	6818      	ldr	r0, [r3, #0]
 80254d0:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80254d4:	9300      	str	r3, [sp, #0]
 80254d6:	2300      	movs	r3, #0
 80254d8:	2200      	movs	r2, #0
 80254da:	2100      	movs	r1, #0
 80254dc:	f7e0 fefe 	bl	80062dc <lv_obj_align>

    SAK_stepsLbl = lv_label_create(lv_scr_act(), NULL);
 80254e0:	f7ff feee 	bl	80252c0 <lv_scr_act>
 80254e4:	4603      	mov	r3, r0
 80254e6:	2100      	movs	r1, #0
 80254e8:	4618      	mov	r0, r3
 80254ea:	f7f4 f80f 	bl	801950c <lv_label_create>
 80254ee:	4602      	mov	r2, r0
 80254f0:	4b16      	ldr	r3, [pc, #88]	; (802554c <StepAndKcal_Steps+0x168>)
 80254f2:	601a      	str	r2, [r3, #0]
 	lv_label_set_style(SAK_stepsLbl, LV_LABEL_STYLE_MAIN, &steps_Style);
 80254f4:	4b15      	ldr	r3, [pc, #84]	; (802554c <StepAndKcal_Steps+0x168>)
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	4a11      	ldr	r2, [pc, #68]	; (8025540 <StepAndKcal_Steps+0x15c>)
 80254fa:	2100      	movs	r1, #0
 80254fc:	4618      	mov	r0, r3
 80254fe:	f7ff feea 	bl	80252d6 <lv_label_set_style>
   	lv_label_set_text(SAK_stepsLbl, "0000");
 8025502:	4b12      	ldr	r3, [pc, #72]	; (802554c <StepAndKcal_Steps+0x168>)
 8025504:	681b      	ldr	r3, [r3, #0]
 8025506:	4912      	ldr	r1, [pc, #72]	; (8025550 <StepAndKcal_Steps+0x16c>)
 8025508:	4618      	mov	r0, r3
 802550a:	f7f4 f931 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 802550e:	4b0f      	ldr	r3, [pc, #60]	; (802554c <StepAndKcal_Steps+0x168>)
 8025510:	6818      	ldr	r0, [r3, #0]
 8025512:	f06f 031d 	mvn.w	r3, #29
 8025516:	9300      	str	r3, [sp, #0]
 8025518:	2300      	movs	r3, #0
 802551a:	2200      	movs	r2, #0
 802551c:	2100      	movs	r1, #0
 802551e:	f7e0 fedd 	bl	80062dc <lv_obj_align>
}
 8025522:	bf00      	nop
 8025524:	3714      	adds	r7, #20
 8025526:	46bd      	mov	sp, r7
 8025528:	bd90      	pop	{r4, r7, pc}
 802552a:	bf00      	nop
 802552c:	0803f368 	.word	0x0803f368
 8025530:	0803fca4 	.word	0x0803fca4
 8025534:	200066e8 	.word	0x200066e8
 8025538:	0802a3ac 	.word	0x0802a3ac
 802553c:	20006c74 	.word	0x20006c74
 8025540:	20006724 	.word	0x20006724
 8025544:	200027e8 	.word	0x200027e8
 8025548:	20007128 	.word	0x20007128
 802554c:	2000714c 	.word	0x2000714c
 8025550:	0802a3b4 	.word	0x0802a3b4

08025554 <StepAndKcal_kCals>:
/* This function using for initiation kCals Objs on Screen
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_kCals(bool theme){
 8025554:	b590      	push	{r4, r7, lr}
 8025556:	b087      	sub	sp, #28
 8025558:	af02      	add	r7, sp, #8
 802555a:	4603      	mov	r3, r0
 802555c:	71fb      	strb	r3, [r7, #7]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 802555e:	f7ff feaf 	bl	80252c0 <lv_scr_act>
 8025562:	4603      	mov	r3, r0
 8025564:	2100      	movs	r1, #0
 8025566:	4618      	mov	r0, r3
 8025568:	f7f3 fc44 	bl	8018df4 <lv_img_create>
 802556c:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &kCalsBlack42x28);
 802556e:	79fb      	ldrb	r3, [r7, #7]
 8025570:	2b00      	cmp	r3, #0
 8025572:	d004      	beq.n	802557e <StepAndKcal_kCals+0x2a>
 8025574:	4949      	ldr	r1, [pc, #292]	; (802569c <StepAndKcal_kCals+0x148>)
 8025576:	68f8      	ldr	r0, [r7, #12]
 8025578:	f7f3 fcda 	bl	8018f30 <lv_img_set_src>
 802557c:	e003      	b.n	8025586 <StepAndKcal_kCals+0x32>
	else lv_img_set_src(img1, &kCalsWhite42x28);
 802557e:	4948      	ldr	r1, [pc, #288]	; (80256a0 <StepAndKcal_kCals+0x14c>)
 8025580:	68f8      	ldr	r0, [r7, #12]
 8025582:	f7f3 fcd5 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, -60, 37);
 8025586:	2325      	movs	r3, #37	; 0x25
 8025588:	9300      	str	r3, [sp, #0]
 802558a:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802558e:	2200      	movs	r2, #0
 8025590:	2100      	movs	r1, #0
 8025592:	68f8      	ldr	r0, [r7, #12]
 8025594:	f7e0 fea2 	bl	80062dc <lv_obj_align>

	static lv_style_t kCals_Style;
	lv_style_copy(&kCals_Style, &lv_style_plain);
 8025598:	4942      	ldr	r1, [pc, #264]	; (80256a4 <StepAndKcal_kCals+0x150>)
 802559a:	4843      	ldr	r0, [pc, #268]	; (80256a8 <StepAndKcal_kCals+0x154>)
 802559c:	f7e3 f8e2 	bl	8008764 <lv_style_copy>
	kCals_Style.line.color = lv_color_make(255,205,105);
 80255a0:	4c41      	ldr	r4, [pc, #260]	; (80256a8 <StepAndKcal_kCals+0x154>)
 80255a2:	2269      	movs	r2, #105	; 0x69
 80255a4:	21cd      	movs	r1, #205	; 0xcd
 80255a6:	20ff      	movs	r0, #255	; 0xff
 80255a8:	f7ff fe52 	bl	8025250 <lv_color_make>
 80255ac:	86a0      	strh	r0, [r4, #52]	; 0x34
    kCals_Style.line.width = 3;
 80255ae:	4b3e      	ldr	r3, [pc, #248]	; (80256a8 <StepAndKcal_kCals+0x154>)
 80255b0:	2203      	movs	r2, #3
 80255b2:	86da      	strh	r2, [r3, #54]	; 0x36
    kCals_Style.text.color = lv_color_make(255,205,105);
 80255b4:	4c3c      	ldr	r4, [pc, #240]	; (80256a8 <StepAndKcal_kCals+0x154>)
 80255b6:	2269      	movs	r2, #105	; 0x69
 80255b8:	21cd      	movs	r1, #205	; 0xcd
 80255ba:	20ff      	movs	r0, #255	; 0xff
 80255bc:	f7ff fe48 	bl	8025250 <lv_color_make>
 80255c0:	8420      	strh	r0, [r4, #32]
    kCals_Style.text.font = &digital_font_for_number_30;
 80255c2:	4b39      	ldr	r3, [pc, #228]	; (80256a8 <StepAndKcal_kCals+0x154>)
 80255c4:	4a39      	ldr	r2, [pc, #228]	; (80256ac <StepAndKcal_kCals+0x158>)
 80255c6:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * kCalsDescLbl= lv_label_create(lv_scr_act(), NULL);
 80255c8:	f7ff fe7a 	bl	80252c0 <lv_scr_act>
 80255cc:	4603      	mov	r3, r0
 80255ce:	2100      	movs	r1, #0
 80255d0:	4618      	mov	r0, r3
 80255d2:	f7f3 ff9b 	bl	801950c <lv_label_create>
 80255d6:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(kCalsDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 80255d8:	4a35      	ldr	r2, [pc, #212]	; (80256b0 <StepAndKcal_kCals+0x15c>)
 80255da:	2100      	movs	r1, #0
 80255dc:	68b8      	ldr	r0, [r7, #8]
 80255de:	f7ff fe7a 	bl	80252d6 <lv_label_set_style>
   	lv_label_set_text(kCalsDescLbl, "kCals");
 80255e2:	4934      	ldr	r1, [pc, #208]	; (80256b4 <StepAndKcal_kCals+0x160>)
 80255e4:	68b8      	ldr	r0, [r7, #8]
 80255e6:	f7f4 f8c3 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(kCalsDescLbl, NULL, LV_ALIGN_CENTER, -60, 111);
 80255ea:	236f      	movs	r3, #111	; 0x6f
 80255ec:	9300      	str	r3, [sp, #0]
 80255ee:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80255f2:	2200      	movs	r2, #0
 80255f4:	2100      	movs	r1, #0
 80255f6:	68b8      	ldr	r0, [r7, #8]
 80255f8:	f7e0 fe70 	bl	80062dc <lv_obj_align>

    //Dynamic objs
    SAK_kCalsArc = lv_arc_create(lv_scr_act(), NULL);
 80255fc:	f7ff fe60 	bl	80252c0 <lv_scr_act>
 8025600:	4603      	mov	r3, r0
 8025602:	2100      	movs	r1, #0
 8025604:	4618      	mov	r0, r3
 8025606:	f7ef f97f 	bl	8014908 <lv_arc_create>
 802560a:	4602      	mov	r2, r0
 802560c:	4b2a      	ldr	r3, [pc, #168]	; (80256b8 <StepAndKcal_kCals+0x164>)
 802560e:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_kCalsArc, 80, 80);
 8025610:	4b29      	ldr	r3, [pc, #164]	; (80256b8 <StepAndKcal_kCals+0x164>)
 8025612:	681b      	ldr	r3, [r3, #0]
 8025614:	2250      	movs	r2, #80	; 0x50
 8025616:	2150      	movs	r1, #80	; 0x50
 8025618:	4618      	mov	r0, r3
 802561a:	f7e0 fdbc 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(SAK_kCalsArc, 0, 360);
 802561e:	4b26      	ldr	r3, [pc, #152]	; (80256b8 <StepAndKcal_kCals+0x164>)
 8025620:	681b      	ldr	r3, [r3, #0]
 8025622:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8025626:	2100      	movs	r1, #0
 8025628:	4618      	mov	r0, r3
 802562a:	f7ef f9e9 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(SAK_kCalsArc, LV_ARC_STYLE_MAIN, &kCals_Style);
 802562e:	4b22      	ldr	r3, [pc, #136]	; (80256b8 <StepAndKcal_kCals+0x164>)
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	4a1d      	ldr	r2, [pc, #116]	; (80256a8 <StepAndKcal_kCals+0x154>)
 8025634:	2100      	movs	r1, #0
 8025636:	4618      	mov	r0, r3
 8025638:	f7ef fa0b 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(SAK_kCalsArc, NULL, LV_ALIGN_CENTER,-60, 37);
 802563c:	4b1e      	ldr	r3, [pc, #120]	; (80256b8 <StepAndKcal_kCals+0x164>)
 802563e:	6818      	ldr	r0, [r3, #0]
 8025640:	2325      	movs	r3, #37	; 0x25
 8025642:	9300      	str	r3, [sp, #0]
 8025644:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8025648:	2200      	movs	r2, #0
 802564a:	2100      	movs	r1, #0
 802564c:	f7e0 fe46 	bl	80062dc <lv_obj_align>

    SAK_kcalsLbl = lv_label_create(lv_scr_act(), NULL);
 8025650:	f7ff fe36 	bl	80252c0 <lv_scr_act>
 8025654:	4603      	mov	r3, r0
 8025656:	2100      	movs	r1, #0
 8025658:	4618      	mov	r0, r3
 802565a:	f7f3 ff57 	bl	801950c <lv_label_create>
 802565e:	4602      	mov	r2, r0
 8025660:	4b16      	ldr	r3, [pc, #88]	; (80256bc <StepAndKcal_kCals+0x168>)
 8025662:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_kcalsLbl, LV_LABEL_STYLE_MAIN, &kCals_Style);
 8025664:	4b15      	ldr	r3, [pc, #84]	; (80256bc <StepAndKcal_kCals+0x168>)
 8025666:	681b      	ldr	r3, [r3, #0]
 8025668:	4a0f      	ldr	r2, [pc, #60]	; (80256a8 <StepAndKcal_kCals+0x154>)
 802566a:	2100      	movs	r1, #0
 802566c:	4618      	mov	r0, r3
 802566e:	f7ff fe32 	bl	80252d6 <lv_label_set_style>
   	lv_label_set_text(SAK_kcalsLbl, "0000");
 8025672:	4b12      	ldr	r3, [pc, #72]	; (80256bc <StepAndKcal_kCals+0x168>)
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	4912      	ldr	r1, [pc, #72]	; (80256c0 <StepAndKcal_kCals+0x16c>)
 8025678:	4618      	mov	r0, r3
 802567a:	f7f4 f879 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 802567e:	4b0f      	ldr	r3, [pc, #60]	; (80256bc <StepAndKcal_kCals+0x168>)
 8025680:	6818      	ldr	r0, [r3, #0]
 8025682:	235a      	movs	r3, #90	; 0x5a
 8025684:	9300      	str	r3, [sp, #0]
 8025686:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 802568a:	2200      	movs	r2, #0
 802568c:	2100      	movs	r1, #0
 802568e:	f7e0 fe25 	bl	80062dc <lv_obj_align>
}
 8025692:	bf00      	nop
 8025694:	3714      	adds	r7, #20
 8025696:	46bd      	mov	sp, r7
 8025698:	bd90      	pop	{r4, r7, pc}
 802569a:	bf00      	nop
 802569c:	08038028 	.word	0x08038028
 80256a0:	08038964 	.word	0x08038964
 80256a4:	20006c74 	.word	0x20006c74
 80256a8:	20006760 	.word	0x20006760
 80256ac:	200027e8 	.word	0x200027e8
 80256b0:	200066e8 	.word	0x200066e8
 80256b4:	0802a3bc 	.word	0x0802a3bc
 80256b8:	20007154 	.word	0x20007154
 80256bc:	20007130 	.word	0x20007130
 80256c0:	0802a3b4 	.word	0x0802a3b4

080256c4 <StepAndKcal_Distances>:
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param theme using for set Theme
 * true->dark || false->light
*/
void StepAndKcal_Distances(bool unitType,bool theme){
 80256c4:	b590      	push	{r4, r7, lr}
 80256c6:	b087      	sub	sp, #28
 80256c8:	af02      	add	r7, sp, #8
 80256ca:	4603      	mov	r3, r0
 80256cc:	460a      	mov	r2, r1
 80256ce:	71fb      	strb	r3, [r7, #7]
 80256d0:	4613      	mov	r3, r2
 80256d2:	71bb      	strb	r3, [r7, #6]
	//Static objs
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
 80256d4:	f7ff fdf4 	bl	80252c0 <lv_scr_act>
 80256d8:	4603      	mov	r3, r0
 80256da:	2100      	movs	r1, #0
 80256dc:	4618      	mov	r0, r3
 80256de:	f7f3 fb89 	bl	8018df4 <lv_img_create>
 80256e2:	60f8      	str	r0, [r7, #12]
	if(theme) lv_img_set_src(img1, &locationPointBlack42x28);
 80256e4:	79bb      	ldrb	r3, [r7, #6]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d004      	beq.n	80256f4 <StepAndKcal_Distances+0x30>
 80256ea:	494b      	ldr	r1, [pc, #300]	; (8025818 <StepAndKcal_Distances+0x154>)
 80256ec:	68f8      	ldr	r0, [r7, #12]
 80256ee:	f7f3 fc1f 	bl	8018f30 <lv_img_set_src>
 80256f2:	e003      	b.n	80256fc <StepAndKcal_Distances+0x38>
	else lv_img_set_src(img1, &locationPointWhite42x28);
 80256f4:	4949      	ldr	r1, [pc, #292]	; (802581c <StepAndKcal_Distances+0x158>)
 80256f6:	68f8      	ldr	r0, [r7, #12]
 80256f8:	f7f3 fc1a 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(img1, NULL, LV_ALIGN_CENTER, 60, 37);
 80256fc:	2325      	movs	r3, #37	; 0x25
 80256fe:	9300      	str	r3, [sp, #0]
 8025700:	233c      	movs	r3, #60	; 0x3c
 8025702:	2200      	movs	r2, #0
 8025704:	2100      	movs	r1, #0
 8025706:	68f8      	ldr	r0, [r7, #12]
 8025708:	f7e0 fde8 	bl	80062dc <lv_obj_align>

    static lv_style_t distance_Style;
    lv_style_copy(&distance_Style, &lv_style_plain);
 802570c:	4944      	ldr	r1, [pc, #272]	; (8025820 <StepAndKcal_Distances+0x15c>)
 802570e:	4845      	ldr	r0, [pc, #276]	; (8025824 <StepAndKcal_Distances+0x160>)
 8025710:	f7e3 f828 	bl	8008764 <lv_style_copy>
    distance_Style.line.color = lv_color_make(214,23,32);
 8025714:	4c43      	ldr	r4, [pc, #268]	; (8025824 <StepAndKcal_Distances+0x160>)
 8025716:	2220      	movs	r2, #32
 8025718:	2117      	movs	r1, #23
 802571a:	20d6      	movs	r0, #214	; 0xd6
 802571c:	f7ff fd98 	bl	8025250 <lv_color_make>
 8025720:	86a0      	strh	r0, [r4, #52]	; 0x34
    distance_Style.line.width = 3;
 8025722:	4b40      	ldr	r3, [pc, #256]	; (8025824 <StepAndKcal_Distances+0x160>)
 8025724:	2203      	movs	r2, #3
 8025726:	86da      	strh	r2, [r3, #54]	; 0x36
    distance_Style.text.color = lv_color_make(214,23,32);
 8025728:	4c3e      	ldr	r4, [pc, #248]	; (8025824 <StepAndKcal_Distances+0x160>)
 802572a:	2220      	movs	r2, #32
 802572c:	2117      	movs	r1, #23
 802572e:	20d6      	movs	r0, #214	; 0xd6
 8025730:	f7ff fd8e 	bl	8025250 <lv_color_make>
 8025734:	8420      	strh	r0, [r4, #32]
    distance_Style.text.font = &digital_font_for_number_30;
 8025736:	4b3b      	ldr	r3, [pc, #236]	; (8025824 <StepAndKcal_Distances+0x160>)
 8025738:	4a3b      	ldr	r2, [pc, #236]	; (8025828 <StepAndKcal_Distances+0x164>)
 802573a:	625a      	str	r2, [r3, #36]	; 0x24

   	lv_obj_t * distDescLbl= lv_label_create(lv_scr_act(), NULL);
 802573c:	f7ff fdc0 	bl	80252c0 <lv_scr_act>
 8025740:	4603      	mov	r3, r0
 8025742:	2100      	movs	r1, #0
 8025744:	4618      	mov	r0, r3
 8025746:	f7f3 fee1 	bl	801950c <lv_label_create>
 802574a:	60b8      	str	r0, [r7, #8]
 	lv_label_set_style(distDescLbl, LV_LABEL_STYLE_MAIN, &description_Style);
 802574c:	4a37      	ldr	r2, [pc, #220]	; (802582c <StepAndKcal_Distances+0x168>)
 802574e:	2100      	movs	r1, #0
 8025750:	68b8      	ldr	r0, [r7, #8]
 8025752:	f7ff fdc0 	bl	80252d6 <lv_label_set_style>
 	if(unitType) lv_label_set_text(distDescLbl, "km");
 8025756:	79fb      	ldrb	r3, [r7, #7]
 8025758:	2b00      	cmp	r3, #0
 802575a:	d004      	beq.n	8025766 <StepAndKcal_Distances+0xa2>
 802575c:	4934      	ldr	r1, [pc, #208]	; (8025830 <StepAndKcal_Distances+0x16c>)
 802575e:	68b8      	ldr	r0, [r7, #8]
 8025760:	f7f4 f806 	bl	8019770 <lv_label_set_text>
 8025764:	e003      	b.n	802576e <StepAndKcal_Distances+0xaa>
 	else lv_label_set_text(distDescLbl, "miles");
 8025766:	4933      	ldr	r1, [pc, #204]	; (8025834 <StepAndKcal_Distances+0x170>)
 8025768:	68b8      	ldr	r0, [r7, #8]
 802576a:	f7f4 f801 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(distDescLbl, NULL, LV_ALIGN_CENTER, 60, 111);
 802576e:	236f      	movs	r3, #111	; 0x6f
 8025770:	9300      	str	r3, [sp, #0]
 8025772:	233c      	movs	r3, #60	; 0x3c
 8025774:	2200      	movs	r2, #0
 8025776:	2100      	movs	r1, #0
 8025778:	68b8      	ldr	r0, [r7, #8]
 802577a:	f7e0 fdaf 	bl	80062dc <lv_obj_align>

    //Dynamic objs
    SAK_distancesArc = lv_arc_create(lv_scr_act(), NULL);
 802577e:	f7ff fd9f 	bl	80252c0 <lv_scr_act>
 8025782:	4603      	mov	r3, r0
 8025784:	2100      	movs	r1, #0
 8025786:	4618      	mov	r0, r3
 8025788:	f7ef f8be 	bl	8014908 <lv_arc_create>
 802578c:	4602      	mov	r2, r0
 802578e:	4b2a      	ldr	r3, [pc, #168]	; (8025838 <StepAndKcal_Distances+0x174>)
 8025790:	601a      	str	r2, [r3, #0]
    lv_obj_set_size(SAK_distancesArc, 80, 80);
 8025792:	4b29      	ldr	r3, [pc, #164]	; (8025838 <StepAndKcal_Distances+0x174>)
 8025794:	681b      	ldr	r3, [r3, #0]
 8025796:	2250      	movs	r2, #80	; 0x50
 8025798:	2150      	movs	r1, #80	; 0x50
 802579a:	4618      	mov	r0, r3
 802579c:	f7e0 fcfb 	bl	8006196 <lv_obj_set_size>
    lv_arc_set_angles(SAK_distancesArc, 0, 360);
 80257a0:	4b25      	ldr	r3, [pc, #148]	; (8025838 <StepAndKcal_Distances+0x174>)
 80257a2:	681b      	ldr	r3, [r3, #0]
 80257a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80257a8:	2100      	movs	r1, #0
 80257aa:	4618      	mov	r0, r3
 80257ac:	f7ef f928 	bl	8014a00 <lv_arc_set_angles>
    lv_arc_set_style(SAK_distancesArc, LV_ARC_STYLE_MAIN, &distance_Style);
 80257b0:	4b21      	ldr	r3, [pc, #132]	; (8025838 <StepAndKcal_Distances+0x174>)
 80257b2:	681b      	ldr	r3, [r3, #0]
 80257b4:	4a1b      	ldr	r2, [pc, #108]	; (8025824 <StepAndKcal_Distances+0x160>)
 80257b6:	2100      	movs	r1, #0
 80257b8:	4618      	mov	r0, r3
 80257ba:	f7ef f94a 	bl	8014a52 <lv_arc_set_style>
    lv_obj_align(SAK_distancesArc, NULL, LV_ALIGN_CENTER, 60, 37);
 80257be:	4b1e      	ldr	r3, [pc, #120]	; (8025838 <StepAndKcal_Distances+0x174>)
 80257c0:	6818      	ldr	r0, [r3, #0]
 80257c2:	2325      	movs	r3, #37	; 0x25
 80257c4:	9300      	str	r3, [sp, #0]
 80257c6:	233c      	movs	r3, #60	; 0x3c
 80257c8:	2200      	movs	r2, #0
 80257ca:	2100      	movs	r1, #0
 80257cc:	f7e0 fd86 	bl	80062dc <lv_obj_align>

    SAK_distanceLbl = lv_label_create(lv_scr_act(), NULL);
 80257d0:	f7ff fd76 	bl	80252c0 <lv_scr_act>
 80257d4:	4603      	mov	r3, r0
 80257d6:	2100      	movs	r1, #0
 80257d8:	4618      	mov	r0, r3
 80257da:	f7f3 fe97 	bl	801950c <lv_label_create>
 80257de:	4602      	mov	r2, r0
 80257e0:	4b16      	ldr	r3, [pc, #88]	; (802583c <StepAndKcal_Distances+0x178>)
 80257e2:	601a      	str	r2, [r3, #0]
   	lv_label_set_style(SAK_distanceLbl, LV_LABEL_STYLE_MAIN, &distance_Style);
 80257e4:	4b15      	ldr	r3, [pc, #84]	; (802583c <StepAndKcal_Distances+0x178>)
 80257e6:	681b      	ldr	r3, [r3, #0]
 80257e8:	4a0e      	ldr	r2, [pc, #56]	; (8025824 <StepAndKcal_Distances+0x160>)
 80257ea:	2100      	movs	r1, #0
 80257ec:	4618      	mov	r0, r3
 80257ee:	f7ff fd72 	bl	80252d6 <lv_label_set_style>
   	lv_label_set_text(SAK_distanceLbl, "0000.00");
 80257f2:	4b12      	ldr	r3, [pc, #72]	; (802583c <StepAndKcal_Distances+0x178>)
 80257f4:	681b      	ldr	r3, [r3, #0]
 80257f6:	4912      	ldr	r1, [pc, #72]	; (8025840 <StepAndKcal_Distances+0x17c>)
 80257f8:	4618      	mov	r0, r3
 80257fa:	f7f3 ffb9 	bl	8019770 <lv_label_set_text>
   	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 80257fe:	4b0f      	ldr	r3, [pc, #60]	; (802583c <StepAndKcal_Distances+0x178>)
 8025800:	6818      	ldr	r0, [r3, #0]
 8025802:	235a      	movs	r3, #90	; 0x5a
 8025804:	9300      	str	r3, [sp, #0]
 8025806:	233c      	movs	r3, #60	; 0x3c
 8025808:	2200      	movs	r2, #0
 802580a:	2100      	movs	r1, #0
 802580c:	f7e0 fd66 	bl	80062dc <lv_obj_align>
}
 8025810:	bf00      	nop
 8025812:	3714      	adds	r7, #20
 8025814:	46bd      	mov	sp, r7
 8025816:	bd90      	pop	{r4, r7, pc}
 8025818:	080392a0 	.word	0x080392a0
 802581c:	08039bdc 	.word	0x08039bdc
 8025820:	20006c74 	.word	0x20006c74
 8025824:	2000679c 	.word	0x2000679c
 8025828:	200027e8 	.word	0x200027e8
 802582c:	200066e8 	.word	0x200066e8
 8025830:	0802a3c4 	.word	0x0802a3c4
 8025834:	0802a3c8 	.word	0x0802a3c8
 8025838:	20007148 	.word	0x20007148
 802583c:	20007134 	.word	0x20007134
 8025840:	0802a3d0 	.word	0x0802a3d0

08025844 <SAK_Updater>:

//Update Functions
/*This function using for update all update functions*/
void SAK_Updater(lv_task_t *t){
 8025844:	b580      	push	{r7, lr}
 8025846:	b082      	sub	sp, #8
 8025848:	af00      	add	r7, sp, #0
 802584a:	6078      	str	r0, [r7, #4]
	if(SAk_taskController){
 802584c:	4b08      	ldr	r3, [pc, #32]	; (8025870 <SAK_Updater+0x2c>)
 802584e:	781b      	ldrb	r3, [r3, #0]
 8025850:	2b00      	cmp	r3, #0
 8025852:	d005      	beq.n	8025860 <SAK_Updater+0x1c>
		SAK_steps_angle_loader();
 8025854:	f000 f810 	bl	8025878 <SAK_steps_angle_loader>
		SAK_kCals_angle_loader();
 8025858:	f000 f89a 	bl	8025990 <SAK_kCals_angle_loader>
		SAK_distances_angle_loader();
 802585c:	f000 f924 	bl	8025aa8 <SAK_distances_angle_loader>
	}lv_task_del(t);
 8025860:	6878      	ldr	r0, [r7, #4]
 8025862:	f7ee fb19 	bl	8013e98 <lv_task_del>
}
 8025866:	bf00      	nop
 8025868:	3708      	adds	r7, #8
 802586a:	46bd      	mov	sp, r7
 802586c:	bd80      	pop	{r7, pc}
 802586e:	bf00      	nop
 8025870:	20007150 	.word	0x20007150
 8025874:	00000000 	.word	0x00000000

08025878 <SAK_steps_angle_loader>:
/* This function using for calculate and set the angle for arcObjects,
We use here set steps
*/
void SAK_steps_angle_loader(void)
{
 8025878:	b590      	push	{r4, r7, lr}
 802587a:	b085      	sub	sp, #20
 802587c:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_steps);
 802587e:	4b3c      	ldr	r3, [pc, #240]	; (8025970 <SAK_steps_angle_loader+0xf8>)
 8025880:	881b      	ldrh	r3, [r3, #0]
 8025882:	4a3c      	ldr	r2, [pc, #240]	; (8025974 <SAK_steps_angle_loader+0xfc>)
 8025884:	2108      	movs	r1, #8
 8025886:	483c      	ldr	r0, [pc, #240]	; (8025978 <SAK_steps_angle_loader+0x100>)
 8025888:	f002 f9f4 	bl	8027c74 <sniprintf>
 		lv_label_set_text(SAK_stepsLbl, stepAndKcalBuffer);
 802588c:	4b3b      	ldr	r3, [pc, #236]	; (802597c <SAK_steps_angle_loader+0x104>)
 802588e:	681b      	ldr	r3, [r3, #0]
 8025890:	4939      	ldr	r1, [pc, #228]	; (8025978 <SAK_steps_angle_loader+0x100>)
 8025892:	4618      	mov	r0, r3
 8025894:	f7f3 ff6c 	bl	8019770 <lv_label_set_text>
 		lv_obj_align(SAK_stepsLbl, NULL, LV_ALIGN_CENTER, 0, -30);
 8025898:	4b38      	ldr	r3, [pc, #224]	; (802597c <SAK_steps_angle_loader+0x104>)
 802589a:	6818      	ldr	r0, [r3, #0]
 802589c:	f06f 031d 	mvn.w	r3, #29
 80258a0:	9300      	str	r3, [sp, #0]
 80258a2:	2300      	movs	r3, #0
 80258a4:	2200      	movs	r2, #0
 80258a6:	2100      	movs	r1, #0
 80258a8:	f7e0 fd18 	bl	80062dc <lv_obj_align>

 		if(SAK_steps<=10000){
 80258ac:	4b30      	ldr	r3, [pc, #192]	; (8025970 <SAK_steps_angle_loader+0xf8>)
 80258ae:	881b      	ldrh	r3, [r3, #0]
 80258b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80258b4:	4293      	cmp	r3, r2
 80258b6:	d84b      	bhi.n	8025950 <SAK_steps_angle_loader+0xd8>
 			double stepsTemp = tos_Ratio(SAK_steps, 0, 10000, 0, 359);
 80258b8:	4b2d      	ldr	r3, [pc, #180]	; (8025970 <SAK_steps_angle_loader+0xf8>)
 80258ba:	881b      	ldrh	r3, [r3, #0]
 80258bc:	4618      	mov	r0, r3
 80258be:	f7da fe31 	bl	8000524 <__aeabi_ui2d>
 80258c2:	4603      	mov	r3, r0
 80258c4:	460c      	mov	r4, r1
 80258c6:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025958 <SAK_steps_angle_loader+0xe0>
 80258ca:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025960 <SAK_steps_angle_loader+0xe8>
 80258ce:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025968 <SAK_steps_angle_loader+0xf0>
 80258d2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025960 <SAK_steps_angle_loader+0xe8>
 80258d6:	ec44 3b10 	vmov	d0, r3, r4
 80258da:	f000 ffe3 	bl	80268a4 <tos_Ratio>
 80258de:	ed87 0b00 	vstr	d0, [r7]
 			if(stepsTemp < 180) lv_arc_set_angles(SAK_stepsArc, 180-stepsTemp ,180);
 80258e2:	f04f 0200 	mov.w	r2, #0
 80258e6:	4b26      	ldr	r3, [pc, #152]	; (8025980 <SAK_steps_angle_loader+0x108>)
 80258e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80258ec:	f7db f906 	bl	8000afc <__aeabi_dcmplt>
 80258f0:	4603      	mov	r3, r0
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	d016      	beq.n	8025924 <SAK_steps_angle_loader+0xac>
 80258f6:	4b23      	ldr	r3, [pc, #140]	; (8025984 <SAK_steps_angle_loader+0x10c>)
 80258f8:	681c      	ldr	r4, [r3, #0]
 80258fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80258fe:	f04f 0000 	mov.w	r0, #0
 8025902:	491f      	ldr	r1, [pc, #124]	; (8025980 <SAK_steps_angle_loader+0x108>)
 8025904:	f7da fcd0 	bl	80002a8 <__aeabi_dsub>
 8025908:	4602      	mov	r2, r0
 802590a:	460b      	mov	r3, r1
 802590c:	4610      	mov	r0, r2
 802590e:	4619      	mov	r1, r3
 8025910:	f7db f95a 	bl	8000bc8 <__aeabi_d2uiz>
 8025914:	4603      	mov	r3, r0
 8025916:	b29b      	uxth	r3, r3
 8025918:	22b4      	movs	r2, #180	; 0xb4
 802591a:	4619      	mov	r1, r3
 802591c:	4620      	mov	r0, r4
 802591e:	f7ef f86f 	bl	8014a00 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 		}
}
 8025922:	e015      	b.n	8025950 <SAK_steps_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_stepsArc, 540-stepsTemp ,180);
 8025924:	4b17      	ldr	r3, [pc, #92]	; (8025984 <SAK_steps_angle_loader+0x10c>)
 8025926:	681c      	ldr	r4, [r3, #0]
 8025928:	e9d7 2300 	ldrd	r2, r3, [r7]
 802592c:	f04f 0000 	mov.w	r0, #0
 8025930:	4915      	ldr	r1, [pc, #84]	; (8025988 <SAK_steps_angle_loader+0x110>)
 8025932:	f7da fcb9 	bl	80002a8 <__aeabi_dsub>
 8025936:	4602      	mov	r2, r0
 8025938:	460b      	mov	r3, r1
 802593a:	4610      	mov	r0, r2
 802593c:	4619      	mov	r1, r3
 802593e:	f7db f943 	bl	8000bc8 <__aeabi_d2uiz>
 8025942:	4603      	mov	r3, r0
 8025944:	b29b      	uxth	r3, r3
 8025946:	22b4      	movs	r2, #180	; 0xb4
 8025948:	4619      	mov	r1, r3
 802594a:	4620      	mov	r0, r4
 802594c:	f7ef f858 	bl	8014a00 <lv_arc_set_angles>
}
 8025950:	bf00      	nop
 8025952:	370c      	adds	r7, #12
 8025954:	46bd      	mov	sp, r7
 8025956:	bd90      	pop	{r4, r7, pc}
 8025958:	00000000 	.word	0x00000000
 802595c:	40767000 	.word	0x40767000
	...
 802596c:	40c38800 	.word	0x40c38800
 8025970:	20007152 	.word	0x20007152
 8025974:	0802a3d8 	.word	0x0802a3d8
 8025978:	2000715c 	.word	0x2000715c
 802597c:	2000714c 	.word	0x2000714c
 8025980:	40668000 	.word	0x40668000
 8025984:	20007128 	.word	0x20007128
 8025988:	4080e000 	.word	0x4080e000
 802598c:	00000000 	.word	0x00000000

08025990 <SAK_kCals_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_kCals_angle_loader(void)
{
 8025990:	b590      	push	{r4, r7, lr}
 8025992:	b085      	sub	sp, #20
 8025994:	af02      	add	r7, sp, #8
 		snprintf(stepAndKcalBuffer,8, "%05d",SAK_kCals);
 8025996:	4b3c      	ldr	r3, [pc, #240]	; (8025a88 <SAK_kCals_angle_loader+0xf8>)
 8025998:	881b      	ldrh	r3, [r3, #0]
 802599a:	4a3c      	ldr	r2, [pc, #240]	; (8025a8c <SAK_kCals_angle_loader+0xfc>)
 802599c:	2108      	movs	r1, #8
 802599e:	483c      	ldr	r0, [pc, #240]	; (8025a90 <SAK_kCals_angle_loader+0x100>)
 80259a0:	f002 f968 	bl	8027c74 <sniprintf>
 		lv_label_set_text(SAK_kcalsLbl, stepAndKcalBuffer);
 80259a4:	4b3b      	ldr	r3, [pc, #236]	; (8025a94 <SAK_kCals_angle_loader+0x104>)
 80259a6:	681b      	ldr	r3, [r3, #0]
 80259a8:	4939      	ldr	r1, [pc, #228]	; (8025a90 <SAK_kCals_angle_loader+0x100>)
 80259aa:	4618      	mov	r0, r3
 80259ac:	f7f3 fee0 	bl	8019770 <lv_label_set_text>
 	   	lv_obj_align(SAK_kcalsLbl, NULL, LV_ALIGN_CENTER, -60, 90);
 80259b0:	4b38      	ldr	r3, [pc, #224]	; (8025a94 <SAK_kCals_angle_loader+0x104>)
 80259b2:	6818      	ldr	r0, [r3, #0]
 80259b4:	235a      	movs	r3, #90	; 0x5a
 80259b6:	9300      	str	r3, [sp, #0]
 80259b8:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 80259bc:	2200      	movs	r2, #0
 80259be:	2100      	movs	r1, #0
 80259c0:	f7e0 fc8c 	bl	80062dc <lv_obj_align>

 	   	if(SAK_kCals<=10000){
 80259c4:	4b30      	ldr	r3, [pc, #192]	; (8025a88 <SAK_kCals_angle_loader+0xf8>)
 80259c6:	881b      	ldrh	r3, [r3, #0]
 80259c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80259cc:	4293      	cmp	r3, r2
 80259ce:	d84b      	bhi.n	8025a68 <SAK_kCals_angle_loader+0xd8>
 			double kCalsTemp = tos_Ratio(SAK_kCals, 0, 10000, 0, 359);
 80259d0:	4b2d      	ldr	r3, [pc, #180]	; (8025a88 <SAK_kCals_angle_loader+0xf8>)
 80259d2:	881b      	ldrh	r3, [r3, #0]
 80259d4:	4618      	mov	r0, r3
 80259d6:	f7da fda5 	bl	8000524 <__aeabi_ui2d>
 80259da:	4603      	mov	r3, r0
 80259dc:	460c      	mov	r4, r1
 80259de:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8025a70 <SAK_kCals_angle_loader+0xe0>
 80259e2:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8025a78 <SAK_kCals_angle_loader+0xe8>
 80259e6:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8025a80 <SAK_kCals_angle_loader+0xf0>
 80259ea:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8025a78 <SAK_kCals_angle_loader+0xe8>
 80259ee:	ec44 3b10 	vmov	d0, r3, r4
 80259f2:	f000 ff57 	bl	80268a4 <tos_Ratio>
 80259f6:	ed87 0b00 	vstr	d0, [r7]
 			if(kCalsTemp < 180) lv_arc_set_angles(SAK_kCalsArc, 180-kCalsTemp ,180);
 80259fa:	f04f 0200 	mov.w	r2, #0
 80259fe:	4b26      	ldr	r3, [pc, #152]	; (8025a98 <SAK_kCals_angle_loader+0x108>)
 8025a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025a04:	f7db f87a 	bl	8000afc <__aeabi_dcmplt>
 8025a08:	4603      	mov	r3, r0
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	d016      	beq.n	8025a3c <SAK_kCals_angle_loader+0xac>
 8025a0e:	4b23      	ldr	r3, [pc, #140]	; (8025a9c <SAK_kCals_angle_loader+0x10c>)
 8025a10:	681c      	ldr	r4, [r3, #0]
 8025a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025a16:	f04f 0000 	mov.w	r0, #0
 8025a1a:	491f      	ldr	r1, [pc, #124]	; (8025a98 <SAK_kCals_angle_loader+0x108>)
 8025a1c:	f7da fc44 	bl	80002a8 <__aeabi_dsub>
 8025a20:	4602      	mov	r2, r0
 8025a22:	460b      	mov	r3, r1
 8025a24:	4610      	mov	r0, r2
 8025a26:	4619      	mov	r1, r3
 8025a28:	f7db f8ce 	bl	8000bc8 <__aeabi_d2uiz>
 8025a2c:	4603      	mov	r3, r0
 8025a2e:	b29b      	uxth	r3, r3
 8025a30:	22b4      	movs	r2, #180	; 0xb4
 8025a32:	4619      	mov	r1, r3
 8025a34:	4620      	mov	r0, r4
 8025a36:	f7ee ffe3 	bl	8014a00 <lv_arc_set_angles>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 	   	}
}
 8025a3a:	e015      	b.n	8025a68 <SAK_kCals_angle_loader+0xd8>
 			    else lv_arc_set_angles(SAK_kCalsArc, 540-kCalsTemp ,180);
 8025a3c:	4b17      	ldr	r3, [pc, #92]	; (8025a9c <SAK_kCals_angle_loader+0x10c>)
 8025a3e:	681c      	ldr	r4, [r3, #0]
 8025a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025a44:	f04f 0000 	mov.w	r0, #0
 8025a48:	4915      	ldr	r1, [pc, #84]	; (8025aa0 <SAK_kCals_angle_loader+0x110>)
 8025a4a:	f7da fc2d 	bl	80002a8 <__aeabi_dsub>
 8025a4e:	4602      	mov	r2, r0
 8025a50:	460b      	mov	r3, r1
 8025a52:	4610      	mov	r0, r2
 8025a54:	4619      	mov	r1, r3
 8025a56:	f7db f8b7 	bl	8000bc8 <__aeabi_d2uiz>
 8025a5a:	4603      	mov	r3, r0
 8025a5c:	b29b      	uxth	r3, r3
 8025a5e:	22b4      	movs	r2, #180	; 0xb4
 8025a60:	4619      	mov	r1, r3
 8025a62:	4620      	mov	r0, r4
 8025a64:	f7ee ffcc 	bl	8014a00 <lv_arc_set_angles>
}
 8025a68:	bf00      	nop
 8025a6a:	370c      	adds	r7, #12
 8025a6c:	46bd      	mov	sp, r7
 8025a6e:	bd90      	pop	{r4, r7, pc}
 8025a70:	00000000 	.word	0x00000000
 8025a74:	40767000 	.word	0x40767000
	...
 8025a84:	40c38800 	.word	0x40c38800
 8025a88:	20007138 	.word	0x20007138
 8025a8c:	0802a3d8 	.word	0x0802a3d8
 8025a90:	2000715c 	.word	0x2000715c
 8025a94:	20007130 	.word	0x20007130
 8025a98:	40668000 	.word	0x40668000
 8025a9c:	20007154 	.word	0x20007154
 8025aa0:	4080e000 	.word	0x4080e000
 8025aa4:	00000000 	.word	0x00000000

08025aa8 <SAK_distances_angle_loader>:

/* This function using for calculate and set the angle for arcObjects,
We use here set kCAls
*/
void SAK_distances_angle_loader(void){
 8025aa8:	b590      	push	{r4, r7, lr}
 8025aaa:	b089      	sub	sp, #36	; 0x24
 8025aac:	af02      	add	r7, sp, #8
		float distTmp=(float)tos_distance_Calc(SAK_unitType,SAK_steps);
 8025aae:	4b4e      	ldr	r3, [pc, #312]	; (8025be8 <SAK_distances_angle_loader+0x140>)
 8025ab0:	781a      	ldrb	r2, [r3, #0]
 8025ab2:	4b4e      	ldr	r3, [pc, #312]	; (8025bec <SAK_distances_angle_loader+0x144>)
 8025ab4:	881b      	ldrh	r3, [r3, #0]
 8025ab6:	4619      	mov	r1, r3
 8025ab8:	4610      	mov	r0, r2
 8025aba:	f000 ff71 	bl	80269a0 <tos_distance_Calc>
 8025abe:	ed87 0a05 	vstr	s0, [r7, #20]

		uint16_t tmp1=distTmp; float tmp2=distTmp-tmp1; tmp2*=1000;
 8025ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8025ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025aca:	ee17 3a90 	vmov	r3, s15
 8025ace:	827b      	strh	r3, [r7, #18]
 8025ad0:	8a7b      	ldrh	r3, [r7, #18]
 8025ad2:	ee07 3a90 	vmov	s15, r3
 8025ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025ada:	ed97 7a05 	vldr	s14, [r7, #20]
 8025ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025ae2:	edc7 7a03 	vstr	s15, [r7, #12]
 8025ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8025aea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8025bf0 <SAK_distances_angle_loader+0x148>
 8025aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025af2:	edc7 7a03 	vstr	s15, [r7, #12]
	 	snprintf(stepAndKcalBuffer,8, "%03d.%03d",tmp1,(uint16_t)tmp2);
 8025af6:	8a7b      	ldrh	r3, [r7, #18]
 8025af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8025afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025b00:	ee17 2a90 	vmov	r2, s15
 8025b04:	b292      	uxth	r2, r2
 8025b06:	9200      	str	r2, [sp, #0]
 8025b08:	4a3a      	ldr	r2, [pc, #232]	; (8025bf4 <SAK_distances_angle_loader+0x14c>)
 8025b0a:	2108      	movs	r1, #8
 8025b0c:	483a      	ldr	r0, [pc, #232]	; (8025bf8 <SAK_distances_angle_loader+0x150>)
 8025b0e:	f002 f8b1 	bl	8027c74 <sniprintf>
	 	lv_label_set_text(SAK_distanceLbl, stepAndKcalBuffer);
 8025b12:	4b3a      	ldr	r3, [pc, #232]	; (8025bfc <SAK_distances_angle_loader+0x154>)
 8025b14:	681b      	ldr	r3, [r3, #0]
 8025b16:	4938      	ldr	r1, [pc, #224]	; (8025bf8 <SAK_distances_angle_loader+0x150>)
 8025b18:	4618      	mov	r0, r3
 8025b1a:	f7f3 fe29 	bl	8019770 <lv_label_set_text>
	 	lv_obj_align(SAK_distanceLbl, NULL, LV_ALIGN_CENTER, 60, 90);
 8025b1e:	4b37      	ldr	r3, [pc, #220]	; (8025bfc <SAK_distances_angle_loader+0x154>)
 8025b20:	6818      	ldr	r0, [r3, #0]
 8025b22:	235a      	movs	r3, #90	; 0x5a
 8025b24:	9300      	str	r3, [sp, #0]
 8025b26:	233c      	movs	r3, #60	; 0x3c
 8025b28:	2200      	movs	r2, #0
 8025b2a:	2100      	movs	r1, #0
 8025b2c:	f7e0 fbd6 	bl	80062dc <lv_obj_align>

 	   	double distanceTemp = tos_Ratio(distTmp, 0, 1000, 0, 359);
 8025b30:	6978      	ldr	r0, [r7, #20]
 8025b32:	f7da fd19 	bl	8000568 <__aeabi_f2d>
 8025b36:	4603      	mov	r3, r0
 8025b38:	460c      	mov	r4, r1
 8025b3a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8025bd0 <SAK_distances_angle_loader+0x128>
 8025b3e:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8025bd8 <SAK_distances_angle_loader+0x130>
 8025b42:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8025be0 <SAK_distances_angle_loader+0x138>
 8025b46:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8025bd8 <SAK_distances_angle_loader+0x130>
 8025b4a:	ec44 3b10 	vmov	d0, r3, r4
 8025b4e:	f000 fea9 	bl	80268a4 <tos_Ratio>
 8025b52:	ed87 0b00 	vstr	d0, [r7]
 		if(distanceTemp < 180) lv_arc_set_angles(SAK_distancesArc, 180-distanceTemp ,180);
 8025b56:	f04f 0200 	mov.w	r2, #0
 8025b5a:	4b29      	ldr	r3, [pc, #164]	; (8025c00 <SAK_distances_angle_loader+0x158>)
 8025b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025b60:	f7da ffcc 	bl	8000afc <__aeabi_dcmplt>
 8025b64:	4603      	mov	r3, r0
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	d016      	beq.n	8025b98 <SAK_distances_angle_loader+0xf0>
 8025b6a:	4b26      	ldr	r3, [pc, #152]	; (8025c04 <SAK_distances_angle_loader+0x15c>)
 8025b6c:	681c      	ldr	r4, [r3, #0]
 8025b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025b72:	f04f 0000 	mov.w	r0, #0
 8025b76:	4922      	ldr	r1, [pc, #136]	; (8025c00 <SAK_distances_angle_loader+0x158>)
 8025b78:	f7da fb96 	bl	80002a8 <__aeabi_dsub>
 8025b7c:	4602      	mov	r2, r0
 8025b7e:	460b      	mov	r3, r1
 8025b80:	4610      	mov	r0, r2
 8025b82:	4619      	mov	r1, r3
 8025b84:	f7db f820 	bl	8000bc8 <__aeabi_d2uiz>
 8025b88:	4603      	mov	r3, r0
 8025b8a:	b29b      	uxth	r3, r3
 8025b8c:	22b4      	movs	r2, #180	; 0xb4
 8025b8e:	4619      	mov	r1, r3
 8025b90:	4620      	mov	r0, r4
 8025b92:	f7ee ff35 	bl	8014a00 <lv_arc_set_angles>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
}
 8025b96:	e015      	b.n	8025bc4 <SAK_distances_angle_loader+0x11c>
 			else lv_arc_set_angles(SAK_distancesArc, 540-distanceTemp ,180);
 8025b98:	4b1a      	ldr	r3, [pc, #104]	; (8025c04 <SAK_distances_angle_loader+0x15c>)
 8025b9a:	681c      	ldr	r4, [r3, #0]
 8025b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025ba0:	f04f 0000 	mov.w	r0, #0
 8025ba4:	4918      	ldr	r1, [pc, #96]	; (8025c08 <SAK_distances_angle_loader+0x160>)
 8025ba6:	f7da fb7f 	bl	80002a8 <__aeabi_dsub>
 8025baa:	4602      	mov	r2, r0
 8025bac:	460b      	mov	r3, r1
 8025bae:	4610      	mov	r0, r2
 8025bb0:	4619      	mov	r1, r3
 8025bb2:	f7db f809 	bl	8000bc8 <__aeabi_d2uiz>
 8025bb6:	4603      	mov	r3, r0
 8025bb8:	b29b      	uxth	r3, r3
 8025bba:	22b4      	movs	r2, #180	; 0xb4
 8025bbc:	4619      	mov	r1, r3
 8025bbe:	4620      	mov	r0, r4
 8025bc0:	f7ee ff1e 	bl	8014a00 <lv_arc_set_angles>
}
 8025bc4:	bf00      	nop
 8025bc6:	371c      	adds	r7, #28
 8025bc8:	46bd      	mov	sp, r7
 8025bca:	bd90      	pop	{r4, r7, pc}
 8025bcc:	f3af 8000 	nop.w
 8025bd0:	00000000 	.word	0x00000000
 8025bd4:	40767000 	.word	0x40767000
	...
 8025be4:	408f4000 	.word	0x408f4000
 8025be8:	20007158 	.word	0x20007158
 8025bec:	20007152 	.word	0x20007152
 8025bf0:	447a0000 	.word	0x447a0000
 8025bf4:	0802a3e0 	.word	0x0802a3e0
 8025bf8:	2000715c 	.word	0x2000715c
 8025bfc:	20007134 	.word	0x20007134
 8025c00:	40668000 	.word	0x40668000
 8025c04:	20007148 	.word	0x20007148
 8025c08:	4080e000 	.word	0x4080e000

08025c0c <StepAndKcal_TaskControllerSet>:
//Setter Getter Functions
void StepAndKcal_SetStepsAndKcals(uint16_t getSteps, uint16_t getKcals) {
	SAK_steps =getSteps;
	SAK_kCals =getKcals;
}
void StepAndKcal_TaskControllerSet(bool active){
 8025c0c:	b480      	push	{r7}
 8025c0e:	b083      	sub	sp, #12
 8025c10:	af00      	add	r7, sp, #0
 8025c12:	4603      	mov	r3, r0
 8025c14:	71fb      	strb	r3, [r7, #7]
	SAk_taskController = active;
 8025c16:	4a04      	ldr	r2, [pc, #16]	; (8025c28 <StepAndKcal_TaskControllerSet+0x1c>)
 8025c18:	79fb      	ldrb	r3, [r7, #7]
 8025c1a:	7013      	strb	r3, [r2, #0]
}
 8025c1c:	bf00      	nop
 8025c1e:	370c      	adds	r7, #12
 8025c20:	46bd      	mov	sp, r7
 8025c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c26:	4770      	bx	lr
 8025c28:	20007150 	.word	0x20007150

08025c2c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8025c2c:	b580      	push	{r7, lr}
 8025c2e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8025c30:	f7ec fcb6 	bl	80125a0 <lv_disp_get_default>
 8025c34:	4603      	mov	r3, r0
 8025c36:	4618      	mov	r0, r3
 8025c38:	f7df f97e 	bl	8004f38 <lv_disp_get_scr_act>
 8025c3c:	4603      	mov	r3, r0
}
 8025c3e:	4618      	mov	r0, r3
 8025c40:	bd80      	pop	{r7, pc}

08025c42 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8025c42:	b580      	push	{r7, lr}
 8025c44:	b084      	sub	sp, #16
 8025c46:	af00      	add	r7, sp, #0
 8025c48:	60f8      	str	r0, [r7, #12]
 8025c4a:	460b      	mov	r3, r1
 8025c4c:	607a      	str	r2, [r7, #4]
 8025c4e:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8025c50:	6879      	ldr	r1, [r7, #4]
 8025c52:	68f8      	ldr	r0, [r7, #12]
 8025c54:	f7e0 ffe7 	bl	8006c26 <lv_obj_set_style>
}
 8025c58:	bf00      	nop
 8025c5a:	3710      	adds	r7, #16
 8025c5c:	46bd      	mov	sp, r7
 8025c5e:	bd80      	pop	{r7, pc}

08025c60 <tos_StopWatchScreen_Init>:
void StopWatch_Update_Lbl(void);
void StopWatch_Update_saveLbl(void);
void StopWatch_Update_StatuImg(uint8_t statu);

/*This function using for initialization StopWatch screen*/
void tos_StopWatchScreen_Init(bool theme){
 8025c60:	b580      	push	{r7, lr}
 8025c62:	b082      	sub	sp, #8
 8025c64:	af00      	add	r7, sp, #0
 8025c66:	4603      	mov	r3, r0
 8025c68:	71fb      	strb	r3, [r7, #7]
	lv_obj_clean(lv_scr_act());
 8025c6a:	f7ff ffdf 	bl	8025c2c <lv_scr_act>
 8025c6e:	4603      	mov	r3, r0
 8025c70:	4618      	mov	r0, r3
 8025c72:	f7e0 f8c1 	bl	8005df8 <lv_obj_clean>

	lv_style_copy(&style_screen, &lv_style_plain);
 8025c76:	4919      	ldr	r1, [pc, #100]	; (8025cdc <tos_StopWatchScreen_Init+0x7c>)
 8025c78:	4819      	ldr	r0, [pc, #100]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025c7a:	f7e2 fd73 	bl	8008764 <lv_style_copy>
	style_screen.body.main_color = LV_COLOR_WHITE;
 8025c7e:	4a18      	ldr	r2, [pc, #96]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025c80:	4b18      	ldr	r3, [pc, #96]	; (8025ce4 <tos_StopWatchScreen_Init+0x84>)
 8025c82:	881b      	ldrh	r3, [r3, #0]
 8025c84:	8053      	strh	r3, [r2, #2]
	style_screen.body.grad_color = LV_COLOR_WHITE;
 8025c86:	4a16      	ldr	r2, [pc, #88]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025c88:	4b16      	ldr	r3, [pc, #88]	; (8025ce4 <tos_StopWatchScreen_Init+0x84>)
 8025c8a:	881b      	ldrh	r3, [r3, #0]
 8025c8c:	8093      	strh	r3, [r2, #4]
	if(theme){
 8025c8e:	79fb      	ldrb	r3, [r7, #7]
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d005      	beq.n	8025ca0 <tos_StopWatchScreen_Init+0x40>
		style_screen.body.main_color = LV_COLOR_BLACK;
 8025c94:	4b12      	ldr	r3, [pc, #72]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025c96:	2200      	movs	r2, #0
 8025c98:	805a      	strh	r2, [r3, #2]
		style_screen.body.grad_color = LV_COLOR_BLACK;
 8025c9a:	4b11      	ldr	r3, [pc, #68]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025c9c:	2200      	movs	r2, #0
 8025c9e:	809a      	strh	r2, [r3, #4]
	}	lv_obj_set_style(lv_scr_act(), &style_screen);
 8025ca0:	f7ff ffc4 	bl	8025c2c <lv_scr_act>
 8025ca4:	4603      	mov	r3, r0
 8025ca6:	490e      	ldr	r1, [pc, #56]	; (8025ce0 <tos_StopWatchScreen_Init+0x80>)
 8025ca8:	4618      	mov	r0, r3
 8025caa:	f7e0 ffbc 	bl	8006c26 <lv_obj_set_style>
 	isStartCount=false;
 8025cae:	4b0e      	ldr	r3, [pc, #56]	; (8025ce8 <tos_StopWatchScreen_Init+0x88>)
 8025cb0:	2200      	movs	r2, #0
 8025cb2:	701a      	strb	r2, [r3, #0]
 	SWtheme=theme;
 8025cb4:	4a0d      	ldr	r2, [pc, #52]	; (8025cec <tos_StopWatchScreen_Init+0x8c>)
 8025cb6:	79fb      	ldrb	r3, [r7, #7]
 8025cb8:	7013      	strb	r3, [r2, #0]

	StopWatch_Obj_Init();
 8025cba:	f000 f81d 	bl	8025cf8 <StopWatch_Obj_Init>
 	SW_taskController=true;
 8025cbe:	4b0c      	ldr	r3, [pc, #48]	; (8025cf0 <tos_StopWatchScreen_Init+0x90>)
 8025cc0:	2201      	movs	r2, #1
 8025cc2:	701a      	strb	r2, [r3, #0]
	lv_task_create(StopWatch_Stopwatch_Updater, 500, LV_TASK_PRIO_LOWEST, NULL);
 8025cc4:	2300      	movs	r3, #0
 8025cc6:	2201      	movs	r2, #1
 8025cc8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8025ccc:	4809      	ldr	r0, [pc, #36]	; (8025cf4 <tos_StopWatchScreen_Init+0x94>)
 8025cce:	f7ee f8ab 	bl	8013e28 <lv_task_create>

}
 8025cd2:	bf00      	nop
 8025cd4:	3708      	adds	r7, #8
 8025cd6:	46bd      	mov	sp, r7
 8025cd8:	bd80      	pop	{r7, pc}
 8025cda:	bf00      	nop
 8025cdc:	20006c74 	.word	0x20006c74
 8025ce0:	200067d8 	.word	0x200067d8
 8025ce4:	0802a3ec 	.word	0x0802a3ec
 8025ce8:	200071ba 	.word	0x200071ba
 8025cec:	20007164 	.word	0x20007164
 8025cf0:	200071bd 	.word	0x200071bd
 8025cf4:	08025eb1 	.word	0x08025eb1

08025cf8 <StopWatch_Obj_Init>:

/*This function using for create and set objects on screen*/
void StopWatch_Obj_Init(void){
 8025cf8:	b580      	push	{r7, lr}
 8025cfa:	b084      	sub	sp, #16
 8025cfc:	af04      	add	r7, sp, #16

	SW_Statu_Img = lv_img_create(lv_scr_act(), NULL);
 8025cfe:	f7ff ff95 	bl	8025c2c <lv_scr_act>
 8025d02:	4603      	mov	r3, r0
 8025d04:	2100      	movs	r1, #0
 8025d06:	4618      	mov	r0, r3
 8025d08:	f7f3 f874 	bl	8018df4 <lv_img_create>
 8025d0c:	4602      	mov	r2, r0
 8025d0e:	4b57      	ldr	r3, [pc, #348]	; (8025e6c <StopWatch_Obj_Init+0x174>)
 8025d10:	601a      	str	r2, [r3, #0]
	if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 8025d12:	4b57      	ldr	r3, [pc, #348]	; (8025e70 <StopWatch_Obj_Init+0x178>)
 8025d14:	781b      	ldrb	r3, [r3, #0]
 8025d16:	2b00      	cmp	r3, #0
 8025d18:	d006      	beq.n	8025d28 <StopWatch_Obj_Init+0x30>
 8025d1a:	4b54      	ldr	r3, [pc, #336]	; (8025e6c <StopWatch_Obj_Init+0x174>)
 8025d1c:	681b      	ldr	r3, [r3, #0]
 8025d1e:	4955      	ldr	r1, [pc, #340]	; (8025e74 <StopWatch_Obj_Init+0x17c>)
 8025d20:	4618      	mov	r0, r3
 8025d22:	f7f3 f905 	bl	8018f30 <lv_img_set_src>
 8025d26:	e005      	b.n	8025d34 <StopWatch_Obj_Init+0x3c>
	else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 8025d28:	4b50      	ldr	r3, [pc, #320]	; (8025e6c <StopWatch_Obj_Init+0x174>)
 8025d2a:	681b      	ldr	r3, [r3, #0]
 8025d2c:	4952      	ldr	r1, [pc, #328]	; (8025e78 <StopWatch_Obj_Init+0x180>)
 8025d2e:	4618      	mov	r0, r3
 8025d30:	f7f3 f8fe 	bl	8018f30 <lv_img_set_src>
	lv_obj_align(SW_Statu_Img, NULL, LV_ALIGN_CENTER, 0, 0);
 8025d34:	4b4d      	ldr	r3, [pc, #308]	; (8025e6c <StopWatch_Obj_Init+0x174>)
 8025d36:	6818      	ldr	r0, [r3, #0]
 8025d38:	2300      	movs	r3, #0
 8025d3a:	9300      	str	r3, [sp, #0]
 8025d3c:	2300      	movs	r3, #0
 8025d3e:	2200      	movs	r2, #0
 8025d40:	2100      	movs	r1, #0
 8025d42:	f7e0 facb 	bl	80062dc <lv_obj_align>

    static lv_style_t text_Style,save_text_Style;
    lv_style_copy(&text_Style, &lv_style_plain);
 8025d46:	494d      	ldr	r1, [pc, #308]	; (8025e7c <StopWatch_Obj_Init+0x184>)
 8025d48:	484d      	ldr	r0, [pc, #308]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025d4a:	f7e2 fd0b 	bl	8008764 <lv_style_copy>
    text_Style.text.color = LV_COLOR_BLACK;
 8025d4e:	4b4c      	ldr	r3, [pc, #304]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025d50:	2200      	movs	r2, #0
 8025d52:	841a      	strh	r2, [r3, #32]
    if(SWtheme) text_Style.text.color = LV_COLOR_SILVER;
 8025d54:	4b46      	ldr	r3, [pc, #280]	; (8025e70 <StopWatch_Obj_Init+0x178>)
 8025d56:	781b      	ldrb	r3, [r3, #0]
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d003      	beq.n	8025d64 <StopWatch_Obj_Init+0x6c>
 8025d5c:	4a48      	ldr	r2, [pc, #288]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025d5e:	4b49      	ldr	r3, [pc, #292]	; (8025e84 <StopWatch_Obj_Init+0x18c>)
 8025d60:	881b      	ldrh	r3, [r3, #0]
 8025d62:	8413      	strh	r3, [r2, #32]
    text_Style.text.font = &digital_font_for_number_30;
 8025d64:	4b46      	ldr	r3, [pc, #280]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025d66:	4a48      	ldr	r2, [pc, #288]	; (8025e88 <StopWatch_Obj_Init+0x190>)
 8025d68:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_copy(&save_text_Style, &text_Style);
 8025d6a:	4945      	ldr	r1, [pc, #276]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025d6c:	4847      	ldr	r0, [pc, #284]	; (8025e8c <StopWatch_Obj_Init+0x194>)
 8025d6e:	f7e2 fcf9 	bl	8008764 <lv_style_copy>
    save_text_Style.text.opa=200;
 8025d72:	4b46      	ldr	r3, [pc, #280]	; (8025e8c <StopWatch_Obj_Init+0x194>)
 8025d74:	22c8      	movs	r2, #200	; 0xc8
 8025d76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    	   //MAGENTA -> FF00FF
   	       //AQUA -> 00FFFF
	       //ORANGE -> FFA500

    SW_Lbl = lv_label_create(lv_scr_act(), NULL);
 8025d7a:	f7ff ff57 	bl	8025c2c <lv_scr_act>
 8025d7e:	4603      	mov	r3, r0
 8025d80:	2100      	movs	r1, #0
 8025d82:	4618      	mov	r0, r3
 8025d84:	f7f3 fbc2 	bl	801950c <lv_label_create>
 8025d88:	4602      	mov	r2, r0
 8025d8a:	4b41      	ldr	r3, [pc, #260]	; (8025e90 <StopWatch_Obj_Init+0x198>)
 8025d8c:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_Lbl, true);
 8025d8e:	4b40      	ldr	r3, [pc, #256]	; (8025e90 <StopWatch_Obj_Init+0x198>)
 8025d90:	681b      	ldr	r3, [r3, #0]
 8025d92:	2101      	movs	r1, #1
 8025d94:	4618      	mov	r0, r3
 8025d96:	f7f3 fe07 	bl	80199a8 <lv_label_set_recolor>
 	lv_label_set_style(SW_Lbl, LV_LABEL_STYLE_MAIN, &text_Style);
 8025d9a:	4b3d      	ldr	r3, [pc, #244]	; (8025e90 <StopWatch_Obj_Init+0x198>)
 8025d9c:	681b      	ldr	r3, [r3, #0]
 8025d9e:	4a38      	ldr	r2, [pc, #224]	; (8025e80 <StopWatch_Obj_Init+0x188>)
 8025da0:	2100      	movs	r1, #0
 8025da2:	4618      	mov	r0, r3
 8025da4:	f7ff ff4d 	bl	8025c42 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025da8:	4b3a      	ldr	r3, [pc, #232]	; (8025e94 <StopWatch_Obj_Init+0x19c>)
 8025daa:	781b      	ldrb	r3, [r3, #0]
 8025dac:	4618      	mov	r0, r3
 8025dae:	4b3a      	ldr	r3, [pc, #232]	; (8025e98 <StopWatch_Obj_Init+0x1a0>)
 8025db0:	781b      	ldrb	r3, [r3, #0]
 8025db2:	461a      	mov	r2, r3
 8025db4:	4b39      	ldr	r3, [pc, #228]	; (8025e9c <StopWatch_Obj_Init+0x1a4>)
 8025db6:	781b      	ldrb	r3, [r3, #0]
 8025db8:	4619      	mov	r1, r3
 8025dba:	4b39      	ldr	r3, [pc, #228]	; (8025ea0 <StopWatch_Obj_Init+0x1a8>)
 8025dbc:	881b      	ldrh	r3, [r3, #0]
 8025dbe:	9302      	str	r3, [sp, #8]
 8025dc0:	9101      	str	r1, [sp, #4]
 8025dc2:	9200      	str	r2, [sp, #0]
 8025dc4:	4603      	mov	r3, r0
 8025dc6:	4a37      	ldr	r2, [pc, #220]	; (8025ea4 <StopWatch_Obj_Init+0x1ac>)
 8025dc8:	2140      	movs	r1, #64	; 0x40
 8025dca:	4837      	ldr	r0, [pc, #220]	; (8025ea8 <StopWatch_Obj_Init+0x1b0>)
 8025dcc:	f001 ff52 	bl	8027c74 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8025dd0:	4b2f      	ldr	r3, [pc, #188]	; (8025e90 <StopWatch_Obj_Init+0x198>)
 8025dd2:	681b      	ldr	r3, [r3, #0]
 8025dd4:	4934      	ldr	r1, [pc, #208]	; (8025ea8 <StopWatch_Obj_Init+0x1b0>)
 8025dd6:	4618      	mov	r0, r3
 8025dd8:	f7f3 fcca 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(SW_Lbl, NULL, LV_ALIGN_CENTER, 0, -70);
 8025ddc:	4b2c      	ldr	r3, [pc, #176]	; (8025e90 <StopWatch_Obj_Init+0x198>)
 8025dde:	6818      	ldr	r0, [r3, #0]
 8025de0:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8025de4:	9300      	str	r3, [sp, #0]
 8025de6:	2300      	movs	r3, #0
 8025de8:	2200      	movs	r2, #0
 8025dea:	2100      	movs	r1, #0
 8025dec:	f7e0 fa76 	bl	80062dc <lv_obj_align>


 	SW_saveLbl= lv_label_create(lv_scr_act(), NULL);
 8025df0:	f7ff ff1c 	bl	8025c2c <lv_scr_act>
 8025df4:	4603      	mov	r3, r0
 8025df6:	2100      	movs	r1, #0
 8025df8:	4618      	mov	r0, r3
 8025dfa:	f7f3 fb87 	bl	801950c <lv_label_create>
 8025dfe:	4602      	mov	r2, r0
 8025e00:	4b2a      	ldr	r3, [pc, #168]	; (8025eac <StopWatch_Obj_Init+0x1b4>)
 8025e02:	601a      	str	r2, [r3, #0]
    lv_label_set_recolor(SW_saveLbl, true);
 8025e04:	4b29      	ldr	r3, [pc, #164]	; (8025eac <StopWatch_Obj_Init+0x1b4>)
 8025e06:	681b      	ldr	r3, [r3, #0]
 8025e08:	2101      	movs	r1, #1
 8025e0a:	4618      	mov	r0, r3
 8025e0c:	f7f3 fdcc 	bl	80199a8 <lv_label_set_recolor>
 	lv_label_set_style(SW_saveLbl, LV_LABEL_STYLE_MAIN, &save_text_Style);
 8025e10:	4b26      	ldr	r3, [pc, #152]	; (8025eac <StopWatch_Obj_Init+0x1b4>)
 8025e12:	681b      	ldr	r3, [r3, #0]
 8025e14:	4a1d      	ldr	r2, [pc, #116]	; (8025e8c <StopWatch_Obj_Init+0x194>)
 8025e16:	2100      	movs	r1, #0
 8025e18:	4618      	mov	r0, r3
 8025e1a:	f7ff ff12 	bl	8025c42 <lv_label_set_style>
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 8025e1e:	4b1d      	ldr	r3, [pc, #116]	; (8025e94 <StopWatch_Obj_Init+0x19c>)
 8025e20:	781b      	ldrb	r3, [r3, #0]
 8025e22:	4618      	mov	r0, r3
 8025e24:	4b1c      	ldr	r3, [pc, #112]	; (8025e98 <StopWatch_Obj_Init+0x1a0>)
 8025e26:	781b      	ldrb	r3, [r3, #0]
 8025e28:	461a      	mov	r2, r3
 8025e2a:	4b1c      	ldr	r3, [pc, #112]	; (8025e9c <StopWatch_Obj_Init+0x1a4>)
 8025e2c:	781b      	ldrb	r3, [r3, #0]
 8025e2e:	4619      	mov	r1, r3
 8025e30:	4b1b      	ldr	r3, [pc, #108]	; (8025ea0 <StopWatch_Obj_Init+0x1a8>)
 8025e32:	881b      	ldrh	r3, [r3, #0]
 8025e34:	9302      	str	r3, [sp, #8]
 8025e36:	9101      	str	r1, [sp, #4]
 8025e38:	9200      	str	r2, [sp, #0]
 8025e3a:	4603      	mov	r3, r0
 8025e3c:	4a19      	ldr	r2, [pc, #100]	; (8025ea4 <StopWatch_Obj_Init+0x1ac>)
 8025e3e:	2140      	movs	r1, #64	; 0x40
 8025e40:	4819      	ldr	r0, [pc, #100]	; (8025ea8 <StopWatch_Obj_Init+0x1b0>)
 8025e42:	f001 ff17 	bl	8027c74 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8025e46:	4b19      	ldr	r3, [pc, #100]	; (8025eac <StopWatch_Obj_Init+0x1b4>)
 8025e48:	681b      	ldr	r3, [r3, #0]
 8025e4a:	4917      	ldr	r1, [pc, #92]	; (8025ea8 <StopWatch_Obj_Init+0x1b0>)
 8025e4c:	4618      	mov	r0, r3
 8025e4e:	f7f3 fc8f 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 8025e52:	4b16      	ldr	r3, [pc, #88]	; (8025eac <StopWatch_Obj_Init+0x1b4>)
 8025e54:	6818      	ldr	r0, [r3, #0]
 8025e56:	2346      	movs	r3, #70	; 0x46
 8025e58:	9300      	str	r3, [sp, #0]
 8025e5a:	2300      	movs	r3, #0
 8025e5c:	2200      	movs	r2, #0
 8025e5e:	2100      	movs	r1, #0
 8025e60:	f7e0 fa3c 	bl	80062dc <lv_obj_align>
}
 8025e64:	bf00      	nop
 8025e66:	46bd      	mov	sp, r7
 8025e68:	bd80      	pop	{r7, pc}
 8025e6a:	bf00      	nop
 8025e6c:	200071b4 	.word	0x200071b4
 8025e70:	20007164 	.word	0x20007164
 8025e74:	08041038 	.word	0x08041038
 8025e78:	080423cc 	.word	0x080423cc
 8025e7c:	20006c74 	.word	0x20006c74
 8025e80:	20006814 	.word	0x20006814
 8025e84:	0802a420 	.word	0x0802a420
 8025e88:	200027e8 	.word	0x200027e8
 8025e8c:	20006850 	.word	0x20006850
 8025e90:	20007168 	.word	0x20007168
 8025e94:	200071bc 	.word	0x200071bc
 8025e98:	20007170 	.word	0x20007170
 8025e9c:	200071bb 	.word	0x200071bb
 8025ea0:	200071b8 	.word	0x200071b8
 8025ea4:	0802a3f0 	.word	0x0802a3f0
 8025ea8:	20007174 	.word	0x20007174
 8025eac:	2000716c 	.word	0x2000716c

08025eb0 <StopWatch_Stopwatch_Updater>:

/*This function using for update to current label*/
void StopWatch_Stopwatch_Updater(lv_task_t *t){
 8025eb0:	b580      	push	{r7, lr}
 8025eb2:	b082      	sub	sp, #8
 8025eb4:	af00      	add	r7, sp, #0
 8025eb6:	6078      	str	r0, [r7, #4]
	if(SW_taskController){
 8025eb8:	4b06      	ldr	r3, [pc, #24]	; (8025ed4 <StopWatch_Stopwatch_Updater+0x24>)
 8025eba:	781b      	ldrb	r3, [r3, #0]
 8025ebc:	2b00      	cmp	r3, #0
 8025ebe:	d002      	beq.n	8025ec6 <StopWatch_Stopwatch_Updater+0x16>
		StopWatch_Update_Lbl();
 8025ec0:	f000 f8a2 	bl	8026008 <StopWatch_Update_Lbl>
		}else lv_task_del(t);
}
 8025ec4:	e002      	b.n	8025ecc <StopWatch_Stopwatch_Updater+0x1c>
		}else lv_task_del(t);
 8025ec6:	6878      	ldr	r0, [r7, #4]
 8025ec8:	f7ed ffe6 	bl	8013e98 <lv_task_del>
}
 8025ecc:	bf00      	nop
 8025ece:	3708      	adds	r7, #8
 8025ed0:	46bd      	mov	sp, r7
 8025ed2:	bd80      	pop	{r7, pc}
 8025ed4:	200071bd 	.word	0x200071bd

08025ed8 <StopWatch_ButtonController>:

/*This function using for control to buttons*/
void StopWatch_ButtonController(void){
 8025ed8:	b580      	push	{r7, lr}
 8025eda:	b082      	sub	sp, #8
 8025edc:	af00      	add	r7, sp, #0
	uint8_t rightBtnListen =tos_LeftButton_Listenner_For_MenuControl();
 8025ede:	f000 fc5b 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8025ee2:	4603      	mov	r3, r0
 8025ee4:	71fb      	strb	r3, [r7, #7]
	  if(2==rightBtnListen){
 8025ee6:	79fb      	ldrb	r3, [r7, #7]
 8025ee8:	2b02      	cmp	r3, #2
 8025eea:	d114      	bne.n	8025f16 <StopWatch_ButtonController+0x3e>
		  //Clear and stop
		  SWseconds=0; SWminutes=0; SWhours=0; SWmilisecs=0; isStartCount=false;
 8025eec:	4b1e      	ldr	r3, [pc, #120]	; (8025f68 <StopWatch_ButtonController+0x90>)
 8025eee:	2200      	movs	r2, #0
 8025ef0:	701a      	strb	r2, [r3, #0]
 8025ef2:	4b1e      	ldr	r3, [pc, #120]	; (8025f6c <StopWatch_ButtonController+0x94>)
 8025ef4:	2200      	movs	r2, #0
 8025ef6:	701a      	strb	r2, [r3, #0]
 8025ef8:	4b1d      	ldr	r3, [pc, #116]	; (8025f70 <StopWatch_ButtonController+0x98>)
 8025efa:	2200      	movs	r2, #0
 8025efc:	701a      	strb	r2, [r3, #0]
 8025efe:	4b1d      	ldr	r3, [pc, #116]	; (8025f74 <StopWatch_ButtonController+0x9c>)
 8025f00:	2200      	movs	r2, #0
 8025f02:	801a      	strh	r2, [r3, #0]
 8025f04:	4b1c      	ldr	r3, [pc, #112]	; (8025f78 <StopWatch_ButtonController+0xa0>)
 8025f06:	2200      	movs	r2, #0
 8025f08:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);
 8025f0a:	481c      	ldr	r0, [pc, #112]	; (8025f7c <StopWatch_ButtonController+0xa4>)
 8025f0c:	f7dd fedb 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
		  StopWatch_Update_StatuImg(0);}
 8025f10:	2000      	movs	r0, #0
 8025f12:	f000 f8df 	bl	80260d4 <StopWatch_Update_StatuImg>
	  if(1==rightBtnListen){
 8025f16:	79fb      	ldrb	r3, [r7, #7]
 8025f18:	2b01      	cmp	r3, #1
 8025f1a:	d119      	bne.n	8025f50 <StopWatch_ButtonController+0x78>
		  //Start Stop
		  if(!isStartCount){HAL_TIM_Base_Start_IT(&TOS_STOPWATCH_TIMER); isStartCount=true;
 8025f1c:	4b16      	ldr	r3, [pc, #88]	; (8025f78 <StopWatch_ButtonController+0xa0>)
 8025f1e:	781b      	ldrb	r3, [r3, #0]
 8025f20:	f083 0301 	eor.w	r3, r3, #1
 8025f24:	b2db      	uxtb	r3, r3
 8025f26:	2b00      	cmp	r3, #0
 8025f28:	d009      	beq.n	8025f3e <StopWatch_ButtonController+0x66>
 8025f2a:	4814      	ldr	r0, [pc, #80]	; (8025f7c <StopWatch_ButtonController+0xa4>)
 8025f2c:	f7dd fea7 	bl	8003c7e <HAL_TIM_Base_Start_IT>
 8025f30:	4b11      	ldr	r3, [pc, #68]	; (8025f78 <StopWatch_ButtonController+0xa0>)
 8025f32:	2201      	movs	r2, #1
 8025f34:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(2);}
 8025f36:	2002      	movs	r0, #2
 8025f38:	f000 f8cc 	bl	80260d4 <StopWatch_Update_StatuImg>
 8025f3c:	e008      	b.n	8025f50 <StopWatch_ButtonController+0x78>
		  else { HAL_TIM_Base_Stop_IT(&TOS_STOPWATCH_TIMER);  isStartCount=false;
 8025f3e:	480f      	ldr	r0, [pc, #60]	; (8025f7c <StopWatch_ButtonController+0xa4>)
 8025f40:	f7dd fec1 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
 8025f44:	4b0c      	ldr	r3, [pc, #48]	; (8025f78 <StopWatch_ButtonController+0xa0>)
 8025f46:	2200      	movs	r2, #0
 8025f48:	701a      	strb	r2, [r3, #0]
		  StopWatch_Update_StatuImg(1);}}
 8025f4a:	2001      	movs	r0, #1
 8025f4c:	f000 f8c2 	bl	80260d4 <StopWatch_Update_StatuImg>
	  if(1==tos_RightButton_Listenner_For_MenuControl()) {
 8025f50:	f000 fbfa 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 8025f54:	4603      	mov	r3, r0
 8025f56:	2b01      	cmp	r3, #1
 8025f58:	d101      	bne.n	8025f5e <StopWatch_ButtonController+0x86>
				  //Save
				  StopWatch_Update_saveLbl();
 8025f5a:	f000 f883 	bl	8026064 <StopWatch_Update_saveLbl>
		  }




}
 8025f5e:	bf00      	nop
 8025f60:	3708      	adds	r7, #8
 8025f62:	46bd      	mov	sp, r7
 8025f64:	bd80      	pop	{r7, pc}
 8025f66:	bf00      	nop
 8025f68:	200071bb 	.word	0x200071bb
 8025f6c:	20007170 	.word	0x20007170
 8025f70:	200071bc 	.word	0x200071bc
 8025f74:	200071b8 	.word	0x200071b8
 8025f78:	200071ba 	.word	0x200071ba
 8025f7c:	200069f0 	.word	0x200069f0

08025f80 <StopWatch_Update_Time>:

/*This function using for update time
 * this function must be called in timer interupt function*/
void StopWatch_Update_Time(void){
 8025f80:	b480      	push	{r7}
 8025f82:	af00      	add	r7, sp, #0
	//Colled by stm32f4xx_it.c TIM4_IRQHandler func
	if(SW_taskController){
 8025f84:	4b1b      	ldr	r3, [pc, #108]	; (8025ff4 <StopWatch_Update_Time+0x74>)
 8025f86:	781b      	ldrb	r3, [r3, #0]
 8025f88:	2b00      	cmp	r3, #0
 8025f8a:	d02d      	beq.n	8025fe8 <StopWatch_Update_Time+0x68>
		SWmilisecs++;
 8025f8c:	4b1a      	ldr	r3, [pc, #104]	; (8025ff8 <StopWatch_Update_Time+0x78>)
 8025f8e:	881b      	ldrh	r3, [r3, #0]
 8025f90:	3301      	adds	r3, #1
 8025f92:	b29a      	uxth	r2, r3
 8025f94:	4b18      	ldr	r3, [pc, #96]	; (8025ff8 <StopWatch_Update_Time+0x78>)
 8025f96:	801a      	strh	r2, [r3, #0]
			if(SWmilisecs==1000){
 8025f98:	4b17      	ldr	r3, [pc, #92]	; (8025ff8 <StopWatch_Update_Time+0x78>)
 8025f9a:	881b      	ldrh	r3, [r3, #0]
 8025f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025fa0:	d122      	bne.n	8025fe8 <StopWatch_Update_Time+0x68>
				SWmilisecs=0;
 8025fa2:	4b15      	ldr	r3, [pc, #84]	; (8025ff8 <StopWatch_Update_Time+0x78>)
 8025fa4:	2200      	movs	r2, #0
 8025fa6:	801a      	strh	r2, [r3, #0]
				SWseconds++;
 8025fa8:	4b14      	ldr	r3, [pc, #80]	; (8025ffc <StopWatch_Update_Time+0x7c>)
 8025faa:	781b      	ldrb	r3, [r3, #0]
 8025fac:	3301      	adds	r3, #1
 8025fae:	b2da      	uxtb	r2, r3
 8025fb0:	4b12      	ldr	r3, [pc, #72]	; (8025ffc <StopWatch_Update_Time+0x7c>)
 8025fb2:	701a      	strb	r2, [r3, #0]
				if(SWseconds==60){
 8025fb4:	4b11      	ldr	r3, [pc, #68]	; (8025ffc <StopWatch_Update_Time+0x7c>)
 8025fb6:	781b      	ldrb	r3, [r3, #0]
 8025fb8:	2b3c      	cmp	r3, #60	; 0x3c
 8025fba:	d115      	bne.n	8025fe8 <StopWatch_Update_Time+0x68>
					SWseconds=0;
 8025fbc:	4b0f      	ldr	r3, [pc, #60]	; (8025ffc <StopWatch_Update_Time+0x7c>)
 8025fbe:	2200      	movs	r2, #0
 8025fc0:	701a      	strb	r2, [r3, #0]
					SWminutes++;
 8025fc2:	4b0f      	ldr	r3, [pc, #60]	; (8026000 <StopWatch_Update_Time+0x80>)
 8025fc4:	781b      	ldrb	r3, [r3, #0]
 8025fc6:	3301      	adds	r3, #1
 8025fc8:	b2da      	uxtb	r2, r3
 8025fca:	4b0d      	ldr	r3, [pc, #52]	; (8026000 <StopWatch_Update_Time+0x80>)
 8025fcc:	701a      	strb	r2, [r3, #0]
					if(SWminutes==60){
 8025fce:	4b0c      	ldr	r3, [pc, #48]	; (8026000 <StopWatch_Update_Time+0x80>)
 8025fd0:	781b      	ldrb	r3, [r3, #0]
 8025fd2:	2b3c      	cmp	r3, #60	; 0x3c
 8025fd4:	d108      	bne.n	8025fe8 <StopWatch_Update_Time+0x68>
						SWminutes=0;
 8025fd6:	4b0a      	ldr	r3, [pc, #40]	; (8026000 <StopWatch_Update_Time+0x80>)
 8025fd8:	2200      	movs	r2, #0
 8025fda:	701a      	strb	r2, [r3, #0]
						SWhours++;
 8025fdc:	4b09      	ldr	r3, [pc, #36]	; (8026004 <StopWatch_Update_Time+0x84>)
 8025fde:	781b      	ldrb	r3, [r3, #0]
 8025fe0:	3301      	adds	r3, #1
 8025fe2:	b2da      	uxtb	r2, r3
 8025fe4:	4b07      	ldr	r3, [pc, #28]	; (8026004 <StopWatch_Update_Time+0x84>)
 8025fe6:	701a      	strb	r2, [r3, #0]
					}
				}
			}
	}
}
 8025fe8:	bf00      	nop
 8025fea:	46bd      	mov	sp, r7
 8025fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ff0:	4770      	bx	lr
 8025ff2:	bf00      	nop
 8025ff4:	200071bd 	.word	0x200071bd
 8025ff8:	200071b8 	.word	0x200071b8
 8025ffc:	200071bb 	.word	0x200071bb
 8026000:	20007170 	.word	0x20007170
 8026004:	200071bc 	.word	0x200071bc

08026008 <StopWatch_Update_Lbl>:

/*This function using for set current value to label*/
void StopWatch_Update_Lbl(void){
 8026008:	b580      	push	{r7, lr}
 802600a:	b084      	sub	sp, #16
 802600c:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802600e:	4b0e      	ldr	r3, [pc, #56]	; (8026048 <StopWatch_Update_Lbl+0x40>)
 8026010:	781b      	ldrb	r3, [r3, #0]
 8026012:	4618      	mov	r0, r3
 8026014:	4b0d      	ldr	r3, [pc, #52]	; (802604c <StopWatch_Update_Lbl+0x44>)
 8026016:	781b      	ldrb	r3, [r3, #0]
 8026018:	461a      	mov	r2, r3
 802601a:	4b0d      	ldr	r3, [pc, #52]	; (8026050 <StopWatch_Update_Lbl+0x48>)
 802601c:	781b      	ldrb	r3, [r3, #0]
 802601e:	4619      	mov	r1, r3
 8026020:	4b0c      	ldr	r3, [pc, #48]	; (8026054 <StopWatch_Update_Lbl+0x4c>)
 8026022:	881b      	ldrh	r3, [r3, #0]
 8026024:	9302      	str	r3, [sp, #8]
 8026026:	9101      	str	r1, [sp, #4]
 8026028:	9200      	str	r2, [sp, #0]
 802602a:	4603      	mov	r3, r0
 802602c:	4a0a      	ldr	r2, [pc, #40]	; (8026058 <StopWatch_Update_Lbl+0x50>)
 802602e:	2140      	movs	r1, #64	; 0x40
 8026030:	480a      	ldr	r0, [pc, #40]	; (802605c <StopWatch_Update_Lbl+0x54>)
 8026032:	f001 fe1f 	bl	8027c74 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_Lbl, stopWatchBuffer);
 8026036:	4b0a      	ldr	r3, [pc, #40]	; (8026060 <StopWatch_Update_Lbl+0x58>)
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	4908      	ldr	r1, [pc, #32]	; (802605c <StopWatch_Update_Lbl+0x54>)
 802603c:	4618      	mov	r0, r3
 802603e:	f7f3 fb97 	bl	8019770 <lv_label_set_text>
}
 8026042:	bf00      	nop
 8026044:	46bd      	mov	sp, r7
 8026046:	bd80      	pop	{r7, pc}
 8026048:	200071bc 	.word	0x200071bc
 802604c:	20007170 	.word	0x20007170
 8026050:	200071bb 	.word	0x200071bb
 8026054:	200071b8 	.word	0x200071b8
 8026058:	0802a3f0 	.word	0x0802a3f0
 802605c:	20007174 	.word	0x20007174
 8026060:	20007168 	.word	0x20007168

08026064 <StopWatch_Update_saveLbl>:
/*This function using for set saved value to label*/
void StopWatch_Update_saveLbl(void){
 8026064:	b580      	push	{r7, lr}
 8026066:	b084      	sub	sp, #16
 8026068:	af04      	add	r7, sp, #16
	snprintf(stopWatchBuffer,64, "#FF00FF %02d#.#00FFFF %02d#.#FFA500 %02d#.%03d",
 802606a:	4b13      	ldr	r3, [pc, #76]	; (80260b8 <StopWatch_Update_saveLbl+0x54>)
 802606c:	781b      	ldrb	r3, [r3, #0]
 802606e:	4618      	mov	r0, r3
 8026070:	4b12      	ldr	r3, [pc, #72]	; (80260bc <StopWatch_Update_saveLbl+0x58>)
 8026072:	781b      	ldrb	r3, [r3, #0]
 8026074:	461a      	mov	r2, r3
 8026076:	4b12      	ldr	r3, [pc, #72]	; (80260c0 <StopWatch_Update_saveLbl+0x5c>)
 8026078:	781b      	ldrb	r3, [r3, #0]
 802607a:	4619      	mov	r1, r3
 802607c:	4b11      	ldr	r3, [pc, #68]	; (80260c4 <StopWatch_Update_saveLbl+0x60>)
 802607e:	881b      	ldrh	r3, [r3, #0]
 8026080:	9302      	str	r3, [sp, #8]
 8026082:	9101      	str	r1, [sp, #4]
 8026084:	9200      	str	r2, [sp, #0]
 8026086:	4603      	mov	r3, r0
 8026088:	4a0f      	ldr	r2, [pc, #60]	; (80260c8 <StopWatch_Update_saveLbl+0x64>)
 802608a:	2140      	movs	r1, #64	; 0x40
 802608c:	480f      	ldr	r0, [pc, #60]	; (80260cc <StopWatch_Update_saveLbl+0x68>)
 802608e:	f001 fdf1 	bl	8027c74 <sniprintf>
			SWhours,SWminutes,SWseconds,SWmilisecs);
	lv_label_set_text(SW_saveLbl, stopWatchBuffer);
 8026092:	4b0f      	ldr	r3, [pc, #60]	; (80260d0 <StopWatch_Update_saveLbl+0x6c>)
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	490d      	ldr	r1, [pc, #52]	; (80260cc <StopWatch_Update_saveLbl+0x68>)
 8026098:	4618      	mov	r0, r3
 802609a:	f7f3 fb69 	bl	8019770 <lv_label_set_text>
 	lv_obj_align(SW_saveLbl, NULL, LV_ALIGN_CENTER, 0, 70);
 802609e:	4b0c      	ldr	r3, [pc, #48]	; (80260d0 <StopWatch_Update_saveLbl+0x6c>)
 80260a0:	6818      	ldr	r0, [r3, #0]
 80260a2:	2346      	movs	r3, #70	; 0x46
 80260a4:	9300      	str	r3, [sp, #0]
 80260a6:	2300      	movs	r3, #0
 80260a8:	2200      	movs	r2, #0
 80260aa:	2100      	movs	r1, #0
 80260ac:	f7e0 f916 	bl	80062dc <lv_obj_align>
}
 80260b0:	bf00      	nop
 80260b2:	46bd      	mov	sp, r7
 80260b4:	bd80      	pop	{r7, pc}
 80260b6:	bf00      	nop
 80260b8:	200071bc 	.word	0x200071bc
 80260bc:	20007170 	.word	0x20007170
 80260c0:	200071bb 	.word	0x200071bb
 80260c4:	200071b8 	.word	0x200071b8
 80260c8:	0802a3f0 	.word	0x0802a3f0
 80260cc:	20007174 	.word	0x20007174
 80260d0:	2000716c 	.word	0x2000716c

080260d4 <StopWatch_Update_StatuImg>:
/*This function using for set statu image
 * @param statu using for select count statu
 * 0 -> stop statu
 * 1 -> pause statu
 * 2 -> play statu*/
void StopWatch_Update_StatuImg(uint8_t statu){
 80260d4:	b580      	push	{r7, lr}
 80260d6:	b082      	sub	sp, #8
 80260d8:	af00      	add	r7, sp, #0
 80260da:	4603      	mov	r3, r0
 80260dc:	71fb      	strb	r3, [r7, #7]
	if(0==statu){
 80260de:	79fb      	ldrb	r3, [r7, #7]
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	d111      	bne.n	8026108 <StopWatch_Update_StatuImg+0x34>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &stopBlack50x50);
 80260e4:	4b1f      	ldr	r3, [pc, #124]	; (8026164 <StopWatch_Update_StatuImg+0x90>)
 80260e6:	781b      	ldrb	r3, [r3, #0]
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	d006      	beq.n	80260fa <StopWatch_Update_StatuImg+0x26>
 80260ec:	4b1e      	ldr	r3, [pc, #120]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 80260ee:	681b      	ldr	r3, [r3, #0]
 80260f0:	491e      	ldr	r1, [pc, #120]	; (802616c <StopWatch_Update_StatuImg+0x98>)
 80260f2:	4618      	mov	r0, r3
 80260f4:	f7f2 ff1c 	bl	8018f30 <lv_img_set_src>
	}
	else if(2==statu){
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
	}
}
 80260f8:	e02f      	b.n	802615a <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &stopWhite50x50);
 80260fa:	4b1b      	ldr	r3, [pc, #108]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 80260fc:	681b      	ldr	r3, [r3, #0]
 80260fe:	491c      	ldr	r1, [pc, #112]	; (8026170 <StopWatch_Update_StatuImg+0x9c>)
 8026100:	4618      	mov	r0, r3
 8026102:	f7f2 ff15 	bl	8018f30 <lv_img_set_src>
}
 8026106:	e028      	b.n	802615a <StopWatch_Update_StatuImg+0x86>
	else if(1==statu){
 8026108:	79fb      	ldrb	r3, [r7, #7]
 802610a:	2b01      	cmp	r3, #1
 802610c:	d111      	bne.n	8026132 <StopWatch_Update_StatuImg+0x5e>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &pauseBlack50x50);
 802610e:	4b15      	ldr	r3, [pc, #84]	; (8026164 <StopWatch_Update_StatuImg+0x90>)
 8026110:	781b      	ldrb	r3, [r3, #0]
 8026112:	2b00      	cmp	r3, #0
 8026114:	d006      	beq.n	8026124 <StopWatch_Update_StatuImg+0x50>
 8026116:	4b14      	ldr	r3, [pc, #80]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	4916      	ldr	r1, [pc, #88]	; (8026174 <StopWatch_Update_StatuImg+0xa0>)
 802611c:	4618      	mov	r0, r3
 802611e:	f7f2 ff07 	bl	8018f30 <lv_img_set_src>
}
 8026122:	e01a      	b.n	802615a <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &pauseWhite50x50);
 8026124:	4b10      	ldr	r3, [pc, #64]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	4913      	ldr	r1, [pc, #76]	; (8026178 <StopWatch_Update_StatuImg+0xa4>)
 802612a:	4618      	mov	r0, r3
 802612c:	f7f2 ff00 	bl	8018f30 <lv_img_set_src>
}
 8026130:	e013      	b.n	802615a <StopWatch_Update_StatuImg+0x86>
	else if(2==statu){
 8026132:	79fb      	ldrb	r3, [r7, #7]
 8026134:	2b02      	cmp	r3, #2
 8026136:	d110      	bne.n	802615a <StopWatch_Update_StatuImg+0x86>
		if(SWtheme) lv_img_set_src(SW_Statu_Img, &playBlack50x50);
 8026138:	4b0a      	ldr	r3, [pc, #40]	; (8026164 <StopWatch_Update_StatuImg+0x90>)
 802613a:	781b      	ldrb	r3, [r3, #0]
 802613c:	2b00      	cmp	r3, #0
 802613e:	d006      	beq.n	802614e <StopWatch_Update_StatuImg+0x7a>
 8026140:	4b09      	ldr	r3, [pc, #36]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 8026142:	681b      	ldr	r3, [r3, #0]
 8026144:	490d      	ldr	r1, [pc, #52]	; (802617c <StopWatch_Update_StatuImg+0xa8>)
 8026146:	4618      	mov	r0, r3
 8026148:	f7f2 fef2 	bl	8018f30 <lv_img_set_src>
}
 802614c:	e005      	b.n	802615a <StopWatch_Update_StatuImg+0x86>
		else lv_img_set_src(SW_Statu_Img, &playWhite50x50);
 802614e:	4b06      	ldr	r3, [pc, #24]	; (8026168 <StopWatch_Update_StatuImg+0x94>)
 8026150:	681b      	ldr	r3, [r3, #0]
 8026152:	490b      	ldr	r1, [pc, #44]	; (8026180 <StopWatch_Update_StatuImg+0xac>)
 8026154:	4618      	mov	r0, r3
 8026156:	f7f2 feeb 	bl	8018f30 <lv_img_set_src>
}
 802615a:	bf00      	nop
 802615c:	3708      	adds	r7, #8
 802615e:	46bd      	mov	sp, r7
 8026160:	bd80      	pop	{r7, pc}
 8026162:	bf00      	nop
 8026164:	20007164 	.word	0x20007164
 8026168:	200071b4 	.word	0x200071b4
 802616c:	08041038 	.word	0x08041038
 8026170:	080423cc 	.word	0x080423cc
 8026174:	0803af70 	.word	0x0803af70
 8026178:	0803c304 	.word	0x0803c304
 802617c:	0803d698 	.word	0x0803d698
 8026180:	0803ea2c 	.word	0x0803ea2c

08026184 <StopWatch_TaskControllerSet>:



//Setter Getter Functions

void StopWatch_TaskControllerSet(bool active){
 8026184:	b480      	push	{r7}
 8026186:	b083      	sub	sp, #12
 8026188:	af00      	add	r7, sp, #0
 802618a:	4603      	mov	r3, r0
 802618c:	71fb      	strb	r3, [r7, #7]
	SW_taskController = active;
 802618e:	4a04      	ldr	r2, [pc, #16]	; (80261a0 <StopWatch_TaskControllerSet+0x1c>)
 8026190:	79fb      	ldrb	r3, [r7, #7]
 8026192:	7013      	strb	r3, [r2, #0]
}
 8026194:	bf00      	nop
 8026196:	370c      	adds	r7, #12
 8026198:	46bd      	mov	sp, r7
 802619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802619e:	4770      	bx	lr
 80261a0:	200071bd 	.word	0x200071bd

080261a4 <StopWatch_TaskControllerGet>:
bool StopWatch_TaskControllerGet(void){
 80261a4:	b480      	push	{r7}
 80261a6:	af00      	add	r7, sp, #0
	return SW_taskController;
 80261a8:	4b03      	ldr	r3, [pc, #12]	; (80261b8 <StopWatch_TaskControllerGet+0x14>)
 80261aa:	781b      	ldrb	r3, [r3, #0]
}
 80261ac:	4618      	mov	r0, r3
 80261ae:	46bd      	mov	sp, r7
 80261b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261b4:	4770      	bx	lr
 80261b6:	bf00      	nop
 80261b8:	200071bd 	.word	0x200071bd

080261bc <tos_getBatteryVAl>:
#include "../../lvgl/lvgl.h"

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp);
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal);

void tos_getBatteryVAl(uint8_t batteryVal,uint8_t Screen){
 80261bc:	b580      	push	{r7, lr}
 80261be:	b084      	sub	sp, #16
 80261c0:	af00      	add	r7, sp, #0
 80261c2:	4603      	mov	r3, r0
 80261c4:	460a      	mov	r2, r1
 80261c6:	71fb      	strb	r3, [r7, #7]
 80261c8:	4613      	mov	r3, r2
 80261ca:	71bb      	strb	r3, [r7, #6]
	static uint8_t batteryValueTemp = 0;
	if (batteryVal != batteryValueTemp){
 80261cc:	4b12      	ldr	r3, [pc, #72]	; (8026218 <tos_getBatteryVAl+0x5c>)
 80261ce:	781b      	ldrb	r3, [r3, #0]
 80261d0:	79fa      	ldrb	r2, [r7, #7]
 80261d2:	429a      	cmp	r2, r3
 80261d4:	d01d      	beq.n	8026212 <tos_getBatteryVAl+0x56>
	char * batterySym= tos_BatteryVal_Sym_Helper(batteryVal,batteryValueTemp);
 80261d6:	4b10      	ldr	r3, [pc, #64]	; (8026218 <tos_getBatteryVAl+0x5c>)
 80261d8:	781a      	ldrb	r2, [r3, #0]
 80261da:	79fb      	ldrb	r3, [r7, #7]
 80261dc:	4611      	mov	r1, r2
 80261de:	4618      	mov	r0, r3
 80261e0:	f000 f81c 	bl	802621c <tos_BatteryVal_Sym_Helper>
 80261e4:	60f8      	str	r0, [r7, #12]
	lv_color_t batteryClr = tos_BatteryVal_SymColor_Helper(batteryVal);
 80261e6:	79fb      	ldrb	r3, [r7, #7]
 80261e8:	4618      	mov	r0, r3
 80261ea:	f000 f889 	bl	8026300 <tos_BatteryVal_SymColor_Helper>
 80261ee:	4603      	mov	r3, r0
 80261f0:	813b      	strh	r3, [r7, #8]
	switch(Screen){
 80261f2:	79bb      	ldrb	r3, [r7, #6]
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	d002      	beq.n	80261fe <tos_getBatteryVAl+0x42>
 80261f8:	2b01      	cmp	r3, #1
 80261fa:	d005      	beq.n	8026208 <tos_getBatteryVAl+0x4c>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
	/*case TOS_SCREEN_STOPWATCH_: tos_MainScreen_Init(1,1);break;
	case TOS_SCREEN_NOTIFICATIONS_: break;*/
	default: return;
 80261fc:	e009      	b.n	8026212 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBatteryVal(batterySym, batteryClr); break;
 80261fe:	8939      	ldrh	r1, [r7, #8]
 8026200:	68f8      	ldr	r0, [r7, #12]
 8026202:	f7fb f895 	bl	8021330 <MainScreen_SetBatteryVal>
 8026206:	e004      	b.n	8026212 <tos_getBatteryVAl+0x56>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBatteryVal(batterySym, batteryClr); break;
 8026208:	8939      	ldrh	r1, [r7, #8]
 802620a:	68f8      	ldr	r0, [r7, #12]
 802620c:	f7fe ff38 	bl	8025080 <SleepModeScreen_SetBatteryVal>
 8026210:	bf00      	nop
	}

	}
}
 8026212:	3710      	adds	r7, #16
 8026214:	46bd      	mov	sp, r7
 8026216:	bd80      	pop	{r7, pc}
 8026218:	2000688c 	.word	0x2000688c

0802621c <tos_BatteryVal_Sym_Helper>:

char * tos_BatteryVal_Sym_Helper(uint8_t batteryVal,uint8_t batteryValueTemp){
 802621c:	b480      	push	{r7}
 802621e:	b083      	sub	sp, #12
 8026220:	af00      	add	r7, sp, #0
 8026222:	4603      	mov	r3, r0
 8026224:	460a      	mov	r2, r1
 8026226:	71fb      	strb	r3, [r7, #7]
 8026228:	4613      	mov	r3, r2
 802622a:	71bb      	strb	r3, [r7, #6]
		if(batteryVal <= batteryValueTemp){
 802622c:	79fa      	ldrb	r2, [r7, #7]
 802622e:	79bb      	ldrb	r3, [r7, #6]
 8026230:	429a      	cmp	r2, r3
 8026232:	d824      	bhi.n	802627e <tos_BatteryVal_Sym_Helper+0x62>
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 8026234:	79fb      	ldrb	r3, [r7, #7]
 8026236:	2b09      	cmp	r3, #9
 8026238:	d801      	bhi.n	802623e <tos_BatteryVal_Sym_Helper+0x22>
 802623a:	4b27      	ldr	r3, [pc, #156]	; (80262d8 <tos_BatteryVal_Sym_Helper+0xbc>)
 802623c:	e045      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_BATTERY_1;
 802623e:	79fb      	ldrb	r3, [r7, #7]
 8026240:	2b09      	cmp	r3, #9
 8026242:	d904      	bls.n	802624e <tos_BatteryVal_Sym_Helper+0x32>
 8026244:	79fb      	ldrb	r3, [r7, #7]
 8026246:	2b18      	cmp	r3, #24
 8026248:	d801      	bhi.n	802624e <tos_BatteryVal_Sym_Helper+0x32>
 802624a:	4b24      	ldr	r3, [pc, #144]	; (80262dc <tos_BatteryVal_Sym_Helper+0xc0>)
 802624c:	e03d      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_BATTERY_2;
 802624e:	79fb      	ldrb	r3, [r7, #7]
 8026250:	2b18      	cmp	r3, #24
 8026252:	d904      	bls.n	802625e <tos_BatteryVal_Sym_Helper+0x42>
 8026254:	79fb      	ldrb	r3, [r7, #7]
 8026256:	2b31      	cmp	r3, #49	; 0x31
 8026258:	d801      	bhi.n	802625e <tos_BatteryVal_Sym_Helper+0x42>
 802625a:	4b21      	ldr	r3, [pc, #132]	; (80262e0 <tos_BatteryVal_Sym_Helper+0xc4>)
 802625c:	e035      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_BATTERY_3;
 802625e:	79fb      	ldrb	r3, [r7, #7]
 8026260:	2b31      	cmp	r3, #49	; 0x31
 8026262:	d904      	bls.n	802626e <tos_BatteryVal_Sym_Helper+0x52>
 8026264:	79fb      	ldrb	r3, [r7, #7]
 8026266:	2b4f      	cmp	r3, #79	; 0x4f
 8026268:	d801      	bhi.n	802626e <tos_BatteryVal_Sym_Helper+0x52>
 802626a:	4b1e      	ldr	r3, [pc, #120]	; (80262e4 <tos_BatteryVal_Sym_Helper+0xc8>)
 802626c:	e02d      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_BATTERY_FULL;
 802626e:	79fb      	ldrb	r3, [r7, #7]
 8026270:	2b4f      	cmp	r3, #79	; 0x4f
 8026272:	d929      	bls.n	80262c8 <tos_BatteryVal_Sym_Helper+0xac>
 8026274:	79fb      	ldrb	r3, [r7, #7]
 8026276:	2b64      	cmp	r3, #100	; 0x64
 8026278:	d826      	bhi.n	80262c8 <tos_BatteryVal_Sym_Helper+0xac>
 802627a:	4b1b      	ldr	r3, [pc, #108]	; (80262e8 <tos_BatteryVal_Sym_Helper+0xcc>)
 802627c:	e025      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
	}else{
			if (batteryVal < 10 && batteryVal >= 0) return LV_SYMBOL_BATTERY_EMPTY;
 802627e:	79fb      	ldrb	r3, [r7, #7]
 8026280:	2b09      	cmp	r3, #9
 8026282:	d801      	bhi.n	8026288 <tos_BatteryVal_Sym_Helper+0x6c>
 8026284:	4b14      	ldr	r3, [pc, #80]	; (80262d8 <tos_BatteryVal_Sym_Helper+0xbc>)
 8026286:	e020      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_1;
 8026288:	79fb      	ldrb	r3, [r7, #7]
 802628a:	2b09      	cmp	r3, #9
 802628c:	d904      	bls.n	8026298 <tos_BatteryVal_Sym_Helper+0x7c>
 802628e:	79fb      	ldrb	r3, [r7, #7]
 8026290:	2b18      	cmp	r3, #24
 8026292:	d801      	bhi.n	8026298 <tos_BatteryVal_Sym_Helper+0x7c>
 8026294:	4b15      	ldr	r3, [pc, #84]	; (80262ec <tos_BatteryVal_Sym_Helper+0xd0>)
 8026296:	e018      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_2;
 8026298:	79fb      	ldrb	r3, [r7, #7]
 802629a:	2b18      	cmp	r3, #24
 802629c:	d904      	bls.n	80262a8 <tos_BatteryVal_Sym_Helper+0x8c>
 802629e:	79fb      	ldrb	r3, [r7, #7]
 80262a0:	2b31      	cmp	r3, #49	; 0x31
 80262a2:	d801      	bhi.n	80262a8 <tos_BatteryVal_Sym_Helper+0x8c>
 80262a4:	4b12      	ldr	r3, [pc, #72]	; (80262f0 <tos_BatteryVal_Sym_Helper+0xd4>)
 80262a6:	e010      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_3;
 80262a8:	79fb      	ldrb	r3, [r7, #7]
 80262aa:	2b31      	cmp	r3, #49	; 0x31
 80262ac:	d904      	bls.n	80262b8 <tos_BatteryVal_Sym_Helper+0x9c>
 80262ae:	79fb      	ldrb	r3, [r7, #7]
 80262b0:	2b4f      	cmp	r3, #79	; 0x4f
 80262b2:	d801      	bhi.n	80262b8 <tos_BatteryVal_Sym_Helper+0x9c>
 80262b4:	4b0f      	ldr	r3, [pc, #60]	; (80262f4 <tos_BatteryVal_Sym_Helper+0xd8>)
 80262b6:	e008      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_SYMBOL_CHARGE LV_SYMBOL_BATTERY_FULL;
 80262b8:	79fb      	ldrb	r3, [r7, #7]
 80262ba:	2b4f      	cmp	r3, #79	; 0x4f
 80262bc:	d904      	bls.n	80262c8 <tos_BatteryVal_Sym_Helper+0xac>
 80262be:	79fb      	ldrb	r3, [r7, #7]
 80262c0:	2b64      	cmp	r3, #100	; 0x64
 80262c2:	d801      	bhi.n	80262c8 <tos_BatteryVal_Sym_Helper+0xac>
 80262c4:	4b0c      	ldr	r3, [pc, #48]	; (80262f8 <tos_BatteryVal_Sym_Helper+0xdc>)
 80262c6:	e000      	b.n	80262ca <tos_BatteryVal_Sym_Helper+0xae>
			}
		return "err";
 80262c8:	4b0c      	ldr	r3, [pc, #48]	; (80262fc <tos_BatteryVal_Sym_Helper+0xe0>)
}
 80262ca:	4618      	mov	r0, r3
 80262cc:	370c      	adds	r7, #12
 80262ce:	46bd      	mov	sp, r7
 80262d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262d4:	4770      	bx	lr
 80262d6:	bf00      	nop
 80262d8:	0802a424 	.word	0x0802a424
 80262dc:	0802a428 	.word	0x0802a428
 80262e0:	0802a42c 	.word	0x0802a42c
 80262e4:	0802a430 	.word	0x0802a430
 80262e8:	0802a434 	.word	0x0802a434
 80262ec:	0802a438 	.word	0x0802a438
 80262f0:	0802a440 	.word	0x0802a440
 80262f4:	0802a448 	.word	0x0802a448
 80262f8:	0802a450 	.word	0x0802a450
 80262fc:	0802a458 	.word	0x0802a458

08026300 <tos_BatteryVal_SymColor_Helper>:
lv_color_t tos_BatteryVal_SymColor_Helper(uint8_t batteryVal){
 8026300:	b480      	push	{r7}
 8026302:	b083      	sub	sp, #12
 8026304:	af00      	add	r7, sp, #0
 8026306:	4602      	mov	r2, r0
 8026308:	71fa      	strb	r2, [r7, #7]
			if (batteryVal < 10 && batteryVal >= 0) return LV_COLOR_RED;
 802630a:	79fa      	ldrb	r2, [r7, #7]
 802630c:	2a09      	cmp	r2, #9
 802630e:	d808      	bhi.n	8026322 <tos_BatteryVal_SymColor_Helper+0x22>
 8026310:	f36f 0302 	bfc	r3, #0, #3
 8026314:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8026318:	f36f 230c 	bfc	r3, #8, #5
 802631c:	f36f 334f 	bfc	r3, #13, #3
 8026320:	e038      	b.n	8026394 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 10 && batteryVal < 25) return LV_COLOR_RED;
 8026322:	79fa      	ldrb	r2, [r7, #7]
 8026324:	2a09      	cmp	r2, #9
 8026326:	d90b      	bls.n	8026340 <tos_BatteryVal_SymColor_Helper+0x40>
 8026328:	79fa      	ldrb	r2, [r7, #7]
 802632a:	2a18      	cmp	r2, #24
 802632c:	d808      	bhi.n	8026340 <tos_BatteryVal_SymColor_Helper+0x40>
 802632e:	f36f 0302 	bfc	r3, #0, #3
 8026332:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8026336:	f36f 230c 	bfc	r3, #8, #5
 802633a:	f36f 334f 	bfc	r3, #13, #3
 802633e:	e029      	b.n	8026394 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 25 && batteryVal < 50) return LV_COLOR_ORANGE;
 8026340:	79fa      	ldrb	r2, [r7, #7]
 8026342:	2a18      	cmp	r2, #24
 8026344:	d905      	bls.n	8026352 <tos_BatteryVal_SymColor_Helper+0x52>
 8026346:	79fa      	ldrb	r2, [r7, #7]
 8026348:	2a31      	cmp	r2, #49	; 0x31
 802634a:	d802      	bhi.n	8026352 <tos_BatteryVal_SymColor_Helper+0x52>
 802634c:	4b14      	ldr	r3, [pc, #80]	; (80263a0 <tos_BatteryVal_SymColor_Helper+0xa0>)
 802634e:	881b      	ldrh	r3, [r3, #0]
 8026350:	e020      	b.n	8026394 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 50 && batteryVal < 80) return LV_COLOR_ORANGE;
 8026352:	79fa      	ldrb	r2, [r7, #7]
 8026354:	2a31      	cmp	r2, #49	; 0x31
 8026356:	d905      	bls.n	8026364 <tos_BatteryVal_SymColor_Helper+0x64>
 8026358:	79fa      	ldrb	r2, [r7, #7]
 802635a:	2a4f      	cmp	r2, #79	; 0x4f
 802635c:	d802      	bhi.n	8026364 <tos_BatteryVal_SymColor_Helper+0x64>
 802635e:	4b10      	ldr	r3, [pc, #64]	; (80263a0 <tos_BatteryVal_SymColor_Helper+0xa0>)
 8026360:	881b      	ldrh	r3, [r3, #0]
 8026362:	e017      	b.n	8026394 <tos_BatteryVal_SymColor_Helper+0x94>
			else if (batteryVal >= 80 && batteryVal <= 100) return LV_COLOR_GREEN;
 8026364:	79fa      	ldrb	r2, [r7, #7]
 8026366:	2a4f      	cmp	r2, #79	; 0x4f
 8026368:	d90c      	bls.n	8026384 <tos_BatteryVal_SymColor_Helper+0x84>
 802636a:	79fa      	ldrb	r2, [r7, #7]
 802636c:	2a64      	cmp	r2, #100	; 0x64
 802636e:	d809      	bhi.n	8026384 <tos_BatteryVal_SymColor_Helper+0x84>
 8026370:	2204      	movs	r2, #4
 8026372:	f362 0302 	bfi	r3, r2, #0, #3
 8026376:	f36f 03c7 	bfc	r3, #3, #5
 802637a:	f36f 230c 	bfc	r3, #8, #5
 802637e:	f36f 334f 	bfc	r3, #13, #3
 8026382:	e007      	b.n	8026394 <tos_BatteryVal_SymColor_Helper+0x94>

			return LV_COLOR_BLUE;
 8026384:	f36f 0302 	bfc	r3, #0, #3
 8026388:	f36f 03c7 	bfc	r3, #3, #5
 802638c:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8026390:	f36f 334f 	bfc	r3, #13, #3
}
 8026394:	4618      	mov	r0, r3
 8026396:	370c      	adds	r7, #12
 8026398:	46bd      	mov	sp, r7
 802639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802639e:	4770      	bx	lr
 80263a0:	0802a45c 	.word	0x0802a45c

080263a4 <tos_BluetoothReceiverAndTransmitter>:
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc);
void tos_Bluetooth_GetAndPushNotification(void);
void tos_Bluetooth_SetBatteryVal(uint8_t batteryVal);
void tos_Bluetooth_SetStepsVal(uint8_t stepsVal);
void tos_Bluetooth_GetCurrentTime(RTC_HandleTypeDef *hrtc);
void tos_BluetoothReceiverAndTransmitter(RTC_HandleTypeDef *hrtc){
 80263a4:	b580      	push	{r7, lr}
 80263a6:	b082      	sub	sp, #8
 80263a8:	af00      	add	r7, sp, #0
 80263aa:	6078      	str	r0, [r7, #4]
	if(bluetoothEnable){
 80263ac:	4b06      	ldr	r3, [pc, #24]	; (80263c8 <tos_BluetoothReceiverAndTransmitter+0x24>)
 80263ae:	781b      	ldrb	r3, [r3, #0]
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	d004      	beq.n	80263be <tos_BluetoothReceiverAndTransmitter+0x1a>
		tos_Bluetooth_FirstConnectGetValues(hrtc);
 80263b4:	6878      	ldr	r0, [r7, #4]
 80263b6:	f000 f809 	bl	80263cc <tos_Bluetooth_FirstConnectGetValues>
		tos_Bluetooth_GetAndPushNotification();
 80263ba:	f000 f8e9 	bl	8026590 <tos_Bluetooth_GetAndPushNotification>
		//tos_Bluetooth_GetCurrentTime(hrtc);
		//tos_Bluetooth_SetBatteryVal(BluetoothBatteryVal);
		//tos_Bluetooth_SetStepsVal(BluetoothStepsVal);
	}
}
 80263be:	bf00      	nop
 80263c0:	3708      	adds	r7, #8
 80263c2:	46bd      	mov	sp, r7
 80263c4:	bd80      	pop	{r7, pc}
 80263c6:	bf00      	nop
 80263c8:	20002848 	.word	0x20002848

080263cc <tos_Bluetooth_FirstConnectGetValues>:
		  }}

}
/*This function using for first connect get time and date values and set Rtc
 * @param hrtc using for get rtc module*/
void tos_Bluetooth_FirstConnectGetValues(RTC_HandleTypeDef *hrtc){
 80263cc:	b580      	push	{r7, lr}
 80263ce:	b084      	sub	sp, #16
 80263d0:	af02      	add	r7, sp, #8
 80263d2:	6078      	str	r0, [r7, #4]
	  isConnected=BLUETOOTH_IS_CONNECT;
 80263d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80263d8:	485a      	ldr	r0, [pc, #360]	; (8026544 <tos_Bluetooth_FirstConnectGetValues+0x178>)
 80263da:	f7dc f939 	bl	8002650 <HAL_GPIO_ReadPin>
 80263de:	4603      	mov	r3, r0
 80263e0:	2b00      	cmp	r3, #0
 80263e2:	bf14      	ite	ne
 80263e4:	2301      	movne	r3, #1
 80263e6:	2300      	moveq	r3, #0
 80263e8:	b2da      	uxtb	r2, r3
 80263ea:	4b57      	ldr	r3, [pc, #348]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 80263ec:	701a      	strb	r2, [r3, #0]
	  if(befConnectVal!=isConnected){
 80263ee:	4b57      	ldr	r3, [pc, #348]	; (802654c <tos_Bluetooth_FirstConnectGetValues+0x180>)
 80263f0:	781a      	ldrb	r2, [r3, #0]
 80263f2:	4b55      	ldr	r3, [pc, #340]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 80263f4:	781b      	ldrb	r3, [r3, #0]
 80263f6:	429a      	cmp	r2, r3
 80263f8:	f000 80a0 	beq.w	802653c <tos_Bluetooth_FirstConnectGetValues+0x170>
	  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "connected", 20,50);
 80263fc:	2332      	movs	r3, #50	; 0x32
 80263fe:	2214      	movs	r2, #20
 8026400:	4953      	ldr	r1, [pc, #332]	; (8026550 <tos_Bluetooth_FirstConnectGetValues+0x184>)
 8026402:	4854      	ldr	r0, [pc, #336]	; (8026554 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8026404:	f7de f893 	bl	800452e <HAL_UART_Transmit>
	 if(isConnected){
 8026408:	4b4f      	ldr	r3, [pc, #316]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 802640a:	781b      	ldrb	r3, [r3, #0]
 802640c:	2b00      	cmp	r3, #0
 802640e:	f000 8087 	beq.w	8026520 <tos_Bluetooth_FirstConnectGetValues+0x154>
		  timeTryAgain:
 8026412:	bf00      	nop
		  if(!isConnected) return;
 8026414:	4b4c      	ldr	r3, [pc, #304]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8026416:	781b      	ldrb	r3, [r3, #0]
 8026418:	f083 0301 	eor.w	r3, r3, #1
 802641c:	b2db      	uxtb	r3, r3
 802641e:	2b00      	cmp	r3, #0
 8026420:	f040 8089 	bne.w	8026536 <tos_Bluetooth_FirstConnectGetValues+0x16a>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 13, 100);
 8026424:	2364      	movs	r3, #100	; 0x64
 8026426:	220d      	movs	r2, #13
 8026428:	494b      	ldr	r1, [pc, #300]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 802642a:	484a      	ldr	r0, [pc, #296]	; (8026554 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 802642c:	f7de f918 	bl	8004660 <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 8026430:	4b4a      	ldr	r3, [pc, #296]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8026432:	4a49      	ldr	r2, [pc, #292]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026434:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='t' && rx_buffer[1]=='i' && rx_buffer[2]=='m' && rx_buffer[3]=='e'))
 8026436:	4b48      	ldr	r3, [pc, #288]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026438:	781b      	ldrb	r3, [r3, #0]
 802643a:	2b74      	cmp	r3, #116	; 0x74
 802643c:	d1e9      	bne.n	8026412 <tos_Bluetooth_FirstConnectGetValues+0x46>
 802643e:	4b46      	ldr	r3, [pc, #280]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026440:	785b      	ldrb	r3, [r3, #1]
 8026442:	2b69      	cmp	r3, #105	; 0x69
 8026444:	d1e5      	bne.n	8026412 <tos_Bluetooth_FirstConnectGetValues+0x46>
 8026446:	4b44      	ldr	r3, [pc, #272]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026448:	789b      	ldrb	r3, [r3, #2]
 802644a:	2b6d      	cmp	r3, #109	; 0x6d
 802644c:	d1e1      	bne.n	8026412 <tos_Bluetooth_FirstConnectGetValues+0x46>
 802644e:	4b42      	ldr	r3, [pc, #264]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026450:	78db      	ldrb	r3, [r3, #3]
 8026452:	2b65      	cmp	r3, #101	; 0x65
 8026454:	d1dd      	bne.n	8026412 <tos_Bluetooth_FirstConnectGetValues+0x46>
			  goto timeTryAgain;
		  else{
			  sscanf(tmp,"time %2d %2d %2d",&time[0],&time[1],&time[2]);
 8026456:	4b41      	ldr	r3, [pc, #260]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8026458:	6818      	ldr	r0, [r3, #0]
 802645a:	4b41      	ldr	r3, [pc, #260]	; (8026560 <tos_Bluetooth_FirstConnectGetValues+0x194>)
 802645c:	9300      	str	r3, [sp, #0]
 802645e:	4b41      	ldr	r3, [pc, #260]	; (8026564 <tos_Bluetooth_FirstConnectGetValues+0x198>)
 8026460:	4a41      	ldr	r2, [pc, #260]	; (8026568 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8026462:	4942      	ldr	r1, [pc, #264]	; (802656c <tos_Bluetooth_FirstConnectGetValues+0x1a0>)
 8026464:	f001 fc3a 	bl	8027cdc <siscanf>
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetTime", 20,50);
 8026468:	2332      	movs	r3, #50	; 0x32
 802646a:	2214      	movs	r2, #20
 802646c:	4940      	ldr	r1, [pc, #256]	; (8026570 <tos_Bluetooth_FirstConnectGetValues+0x1a4>)
 802646e:	4839      	ldr	r0, [pc, #228]	; (8026554 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 8026470:	f7de f85d 	bl	800452e <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8026474:	4b38      	ldr	r3, [pc, #224]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026476:	4a3f      	ldr	r2, [pc, #252]	; (8026574 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 8026478:	8811      	ldrh	r1, [r2, #0]
 802647a:	7892      	ldrb	r2, [r2, #2]
 802647c:	8019      	strh	r1, [r3, #0]
 802647e:	709a      	strb	r2, [r3, #2]
 8026480:	e000      	b.n	8026484 <tos_Bluetooth_FirstConnectGetValues+0xb8>
		  }
		 dateTryAgain:
 8026482:	bf00      	nop
		  if(!isConnected) return;
 8026484:	4b30      	ldr	r3, [pc, #192]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 8026486:	781b      	ldrb	r3, [r3, #0]
 8026488:	f083 0301 	eor.w	r3, r3, #1
 802648c:	b2db      	uxtb	r3, r3
 802648e:	2b00      	cmp	r3, #0
 8026490:	d153      	bne.n	802653a <tos_Bluetooth_FirstConnectGetValues+0x16e>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 15, 100);
 8026492:	2364      	movs	r3, #100	; 0x64
 8026494:	220f      	movs	r2, #15
 8026496:	4930      	ldr	r1, [pc, #192]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026498:	482e      	ldr	r0, [pc, #184]	; (8026554 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 802649a:	f7de f8e1 	bl	8004660 <HAL_UART_Receive>
		  tmp=&rx_buffer[0];
 802649e:	4b2f      	ldr	r3, [pc, #188]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80264a0:	4a2d      	ldr	r2, [pc, #180]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264a2:	601a      	str	r2, [r3, #0]
		  if(!(rx_buffer[0]=='d' && rx_buffer[1]=='a' && rx_buffer[2]=='t' && rx_buffer[3]=='e'))
 80264a4:	4b2c      	ldr	r3, [pc, #176]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264a6:	781b      	ldrb	r3, [r3, #0]
 80264a8:	2b64      	cmp	r3, #100	; 0x64
 80264aa:	d1ea      	bne.n	8026482 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 80264ac:	4b2a      	ldr	r3, [pc, #168]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264ae:	785b      	ldrb	r3, [r3, #1]
 80264b0:	2b61      	cmp	r3, #97	; 0x61
 80264b2:	d1e6      	bne.n	8026482 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 80264b4:	4b28      	ldr	r3, [pc, #160]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264b6:	789b      	ldrb	r3, [r3, #2]
 80264b8:	2b74      	cmp	r3, #116	; 0x74
 80264ba:	d1e2      	bne.n	8026482 <tos_Bluetooth_FirstConnectGetValues+0xb6>
 80264bc:	4b26      	ldr	r3, [pc, #152]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264be:	78db      	ldrb	r3, [r3, #3]
 80264c0:	2b65      	cmp	r3, #101	; 0x65
 80264c2:	d1de      	bne.n	8026482 <tos_Bluetooth_FirstConnectGetValues+0xb6>
			  goto dateTryAgain;
		  else{
			  sscanf(tmp,"date %2d %2d %2d",
 80264c4:	4b25      	ldr	r3, [pc, #148]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 80264c6:	6818      	ldr	r0, [r3, #0]
 80264c8:	4b2b      	ldr	r3, [pc, #172]	; (8026578 <tos_Bluetooth_FirstConnectGetValues+0x1ac>)
 80264ca:	9300      	str	r3, [sp, #0]
 80264cc:	4b2b      	ldr	r3, [pc, #172]	; (802657c <tos_Bluetooth_FirstConnectGetValues+0x1b0>)
 80264ce:	4a2c      	ldr	r2, [pc, #176]	; (8026580 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 80264d0:	492c      	ldr	r1, [pc, #176]	; (8026584 <tos_Bluetooth_FirstConnectGetValues+0x1b8>)
 80264d2:	f001 fc03 	bl	8027cdc <siscanf>
			  					  &date[0],&date[1],&date[2]);
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasSetDate", 20,50);
 80264d6:	2332      	movs	r3, #50	; 0x32
 80264d8:	2214      	movs	r2, #20
 80264da:	492b      	ldr	r1, [pc, #172]	; (8026588 <tos_Bluetooth_FirstConnectGetValues+0x1bc>)
 80264dc:	481d      	ldr	r0, [pc, #116]	; (8026554 <tos_Bluetooth_FirstConnectGetValues+0x188>)
 80264de:	f7de f826 	bl	800452e <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 80264e2:	4b1d      	ldr	r3, [pc, #116]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 80264e4:	4a23      	ldr	r2, [pc, #140]	; (8026574 <tos_Bluetooth_FirstConnectGetValues+0x1a8>)
 80264e6:	8811      	ldrh	r1, [r2, #0]
 80264e8:	7892      	ldrb	r2, [r2, #2]
 80264ea:	8019      	strh	r1, [r3, #0]
 80264ec:	709a      	strb	r2, [r3, #2]
		  }
		  tos_RTC_SetDate(hrtc,date[0],date[1],date[2]);
 80264ee:	4b24      	ldr	r3, [pc, #144]	; (8026580 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 80264f0:	881b      	ldrh	r3, [r3, #0]
 80264f2:	b2d9      	uxtb	r1, r3
 80264f4:	4b22      	ldr	r3, [pc, #136]	; (8026580 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 80264f6:	885b      	ldrh	r3, [r3, #2]
 80264f8:	b2da      	uxtb	r2, r3
 80264fa:	4b21      	ldr	r3, [pc, #132]	; (8026580 <tos_Bluetooth_FirstConnectGetValues+0x1b4>)
 80264fc:	889b      	ldrh	r3, [r3, #4]
 80264fe:	b2db      	uxtb	r3, r3
 8026500:	6878      	ldr	r0, [r7, #4]
 8026502:	f000 fda5 	bl	8027050 <tos_RTC_SetDate>
		  tos_RTC_SetTime(hrtc,time[0],time[1],time[2]);
 8026506:	4b18      	ldr	r3, [pc, #96]	; (8026568 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8026508:	881b      	ldrh	r3, [r3, #0]
 802650a:	b2d9      	uxtb	r1, r3
 802650c:	4b16      	ldr	r3, [pc, #88]	; (8026568 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 802650e:	885b      	ldrh	r3, [r3, #2]
 8026510:	b2da      	uxtb	r2, r3
 8026512:	4b15      	ldr	r3, [pc, #84]	; (8026568 <tos_Bluetooth_FirstConnectGetValues+0x19c>)
 8026514:	889b      	ldrh	r3, [r3, #4]
 8026516:	b2db      	uxtb	r3, r3
 8026518:	6878      	ldr	r0, [r7, #4]
 802651a:	f000 fd77 	bl	802700c <tos_RTC_SetTime>
 802651e:	e005      	b.n	802652c <tos_Bluetooth_FirstConnectGetValues+0x160>
	  }else{
		  tmp=&rx_buffer[0];
 8026520:	4b0e      	ldr	r3, [pc, #56]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8026522:	4a0d      	ldr	r2, [pc, #52]	; (8026558 <tos_Bluetooth_FirstConnectGetValues+0x18c>)
 8026524:	601a      	str	r2, [r3, #0]
		  tmp ="notConnected";
 8026526:	4b0d      	ldr	r3, [pc, #52]	; (802655c <tos_Bluetooth_FirstConnectGetValues+0x190>)
 8026528:	4a18      	ldr	r2, [pc, #96]	; (802658c <tos_Bluetooth_FirstConnectGetValues+0x1c0>)
 802652a:	601a      	str	r2, [r3, #0]
	  }
	  befConnectVal=isConnected;
 802652c:	4b06      	ldr	r3, [pc, #24]	; (8026548 <tos_Bluetooth_FirstConnectGetValues+0x17c>)
 802652e:	781a      	ldrb	r2, [r3, #0]
 8026530:	4b06      	ldr	r3, [pc, #24]	; (802654c <tos_Bluetooth_FirstConnectGetValues+0x180>)
 8026532:	701a      	strb	r2, [r3, #0]
 8026534:	e002      	b.n	802653c <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 8026536:	bf00      	nop
 8026538:	e000      	b.n	802653c <tos_Bluetooth_FirstConnectGetValues+0x170>
		  if(!isConnected) return;
 802653a:	bf00      	nop
	  }
}
 802653c:	3708      	adds	r7, #8
 802653e:	46bd      	mov	sp, r7
 8026540:	bd80      	pop	{r7, pc}
 8026542:	bf00      	nop
 8026544:	40020800 	.word	0x40020800
 8026548:	200072a8 	.word	0x200072a8
 802654c:	200073ca 	.word	0x200073ca
 8026550:	0802a484 	.word	0x0802a484
 8026554:	20006958 	.word	0x20006958
 8026558:	200072ac 	.word	0x200072ac
 802655c:	200071c0 	.word	0x200071c0
 8026560:	200073c0 	.word	0x200073c0
 8026564:	200073be 	.word	0x200073be
 8026568:	200073bc 	.word	0x200073bc
 802656c:	0802a460 	.word	0x0802a460
 8026570:	0802a474 	.word	0x0802a474
 8026574:	0802a480 	.word	0x0802a480
 8026578:	200073c8 	.word	0x200073c8
 802657c:	200073c6 	.word	0x200073c6
 8026580:	200073c4 	.word	0x200073c4
 8026584:	0802a490 	.word	0x0802a490
 8026588:	0802a4a4 	.word	0x0802a4a4
 802658c:	0802a4b0 	.word	0x0802a4b0

08026590 <tos_Bluetooth_GetAndPushNotification>:

/*This function using for get notifications and push notification list*/
void tos_Bluetooth_GetAndPushNotification(void){
 8026590:	b580      	push	{r7, lr}
 8026592:	af00      	add	r7, sp, #0
	if(isConnected){
 8026594:	4b1f      	ldr	r3, [pc, #124]	; (8026614 <tos_Bluetooth_GetAndPushNotification+0x84>)
 8026596:	781b      	ldrb	r3, [r3, #0]
 8026598:	2b00      	cmp	r3, #0
 802659a:	d039      	beq.n	8026610 <tos_Bluetooth_GetAndPushNotification+0x80>
		  HAL_UART_Receive(&TOS_BLUETOOTH_PORT, (uint8_t*)rx_buffer, 250, 100);
 802659c:	2364      	movs	r3, #100	; 0x64
 802659e:	22fa      	movs	r2, #250	; 0xfa
 80265a0:	491d      	ldr	r1, [pc, #116]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265a2:	481e      	ldr	r0, [pc, #120]	; (802661c <tos_Bluetooth_GetAndPushNotification+0x8c>)
 80265a4:	f7de f85c 	bl	8004660 <HAL_UART_Receive>
		  if(rx_buffer[0]=='n' && rx_buffer[1]=='o' && rx_buffer[2]=='t' && rx_buffer[3]=='f'){
 80265a8:	4b1b      	ldr	r3, [pc, #108]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265aa:	781b      	ldrb	r3, [r3, #0]
 80265ac:	2b6e      	cmp	r3, #110	; 0x6e
 80265ae:	d12f      	bne.n	8026610 <tos_Bluetooth_GetAndPushNotification+0x80>
 80265b0:	4b19      	ldr	r3, [pc, #100]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265b2:	785b      	ldrb	r3, [r3, #1]
 80265b4:	2b6f      	cmp	r3, #111	; 0x6f
 80265b6:	d12b      	bne.n	8026610 <tos_Bluetooth_GetAndPushNotification+0x80>
 80265b8:	4b17      	ldr	r3, [pc, #92]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265ba:	789b      	ldrb	r3, [r3, #2]
 80265bc:	2b74      	cmp	r3, #116	; 0x74
 80265be:	d127      	bne.n	8026610 <tos_Bluetooth_GetAndPushNotification+0x80>
 80265c0:	4b15      	ldr	r3, [pc, #84]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265c2:	78db      	ldrb	r3, [r3, #3]
 80265c4:	2b66      	cmp	r3, #102	; 0x66
 80265c6:	d123      	bne.n	8026610 <tos_Bluetooth_GetAndPushNotification+0x80>
			  tmp=&rx_buffer[0];
 80265c8:	4b15      	ldr	r3, [pc, #84]	; (8026620 <tos_Bluetooth_GetAndPushNotification+0x90>)
 80265ca:	4a13      	ldr	r2, [pc, #76]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 80265cc:	601a      	str	r2, [r3, #0]
			  sscanf(tmp,"notf: appName %s appNotf %s",BluetoothAppName,BluetoothNotf);
 80265ce:	4b14      	ldr	r3, [pc, #80]	; (8026620 <tos_Bluetooth_GetAndPushNotification+0x90>)
 80265d0:	6818      	ldr	r0, [r3, #0]
 80265d2:	4b14      	ldr	r3, [pc, #80]	; (8026624 <tos_Bluetooth_GetAndPushNotification+0x94>)
 80265d4:	4a14      	ldr	r2, [pc, #80]	; (8026628 <tos_Bluetooth_GetAndPushNotification+0x98>)
 80265d6:	4915      	ldr	r1, [pc, #84]	; (802662c <tos_Bluetooth_GetAndPushNotification+0x9c>)
 80265d8:	f001 fb80 	bl	8027cdc <siscanf>
			  BluetoothAppNameP=&BluetoothAppName[0];
 80265dc:	4b14      	ldr	r3, [pc, #80]	; (8026630 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 80265de:	4a12      	ldr	r2, [pc, #72]	; (8026628 <tos_Bluetooth_GetAndPushNotification+0x98>)
 80265e0:	601a      	str	r2, [r3, #0]
			  BluetoothNotfP=&BluetoothNotf[0];
 80265e2:	4b14      	ldr	r3, [pc, #80]	; (8026634 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 80265e4:	4a0f      	ldr	r2, [pc, #60]	; (8026624 <tos_Bluetooth_GetAndPushNotification+0x94>)
 80265e6:	601a      	str	r2, [r3, #0]
			  NotificationScreen_GetNotifications(BluetoothAppNameP,BluetoothNotfP);
 80265e8:	4b11      	ldr	r3, [pc, #68]	; (8026630 <tos_Bluetooth_GetAndPushNotification+0xa0>)
 80265ea:	681a      	ldr	r2, [r3, #0]
 80265ec:	4b11      	ldr	r3, [pc, #68]	; (8026634 <tos_Bluetooth_GetAndPushNotification+0xa4>)
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	4619      	mov	r1, r3
 80265f2:	4610      	mov	r0, r2
 80265f4:	f7fc f882 	bl	80226fc <NotificationScreen_GetNotifications>
			  HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, "wasPushNotf", 20,50);
 80265f8:	2332      	movs	r3, #50	; 0x32
 80265fa:	2214      	movs	r2, #20
 80265fc:	490e      	ldr	r1, [pc, #56]	; (8026638 <tos_Bluetooth_GetAndPushNotification+0xa8>)
 80265fe:	4807      	ldr	r0, [pc, #28]	; (802661c <tos_Bluetooth_GetAndPushNotification+0x8c>)
 8026600:	f7dd ff95 	bl	800452e <HAL_UART_Transmit>
			  sprintf(rx_buffer, "OK");
 8026604:	4b04      	ldr	r3, [pc, #16]	; (8026618 <tos_Bluetooth_GetAndPushNotification+0x88>)
 8026606:	4a0d      	ldr	r2, [pc, #52]	; (802663c <tos_Bluetooth_GetAndPushNotification+0xac>)
 8026608:	8811      	ldrh	r1, [r2, #0]
 802660a:	7892      	ldrb	r2, [r2, #2]
 802660c:	8019      	strh	r1, [r3, #0]
 802660e:	709a      	strb	r2, [r3, #2]
		  }
	}

}
 8026610:	bf00      	nop
 8026612:	bd80      	pop	{r7, pc}
 8026614:	200072a8 	.word	0x200072a8
 8026618:	200072ac 	.word	0x200072ac
 802661c:	20006958 	.word	0x20006958
 8026620:	200071c0 	.word	0x200071c0
 8026624:	200071c4 	.word	0x200071c4
 8026628:	20007294 	.word	0x20007294
 802662c:	0802a4c0 	.word	0x0802a4c0
 8026630:	2000728c 	.word	0x2000728c
 8026634:	200073cc 	.word	0x200073cc
 8026638:	0802a4dc 	.word	0x0802a4dc
 802663c:	0802a480 	.word	0x0802a480

08026640 <tos_BluetoothGetStatusVAl>:
	if(isConnected){
		  sprintf(tx_buffer, "stepsVal %d",stepsVal);
		    HAL_UART_Transmit(&TOS_BLUETOOTH_PORT, tx_buffer, 20,50);
		  }
}
void tos_BluetoothGetStatusVAl(bool bluetoothStatus,uint8_t Screen){
 8026640:	b580      	push	{r7, lr}
 8026642:	b084      	sub	sp, #16
 8026644:	af00      	add	r7, sp, #0
 8026646:	4603      	mov	r3, r0
 8026648:	460a      	mov	r2, r1
 802664a:	71fb      	strb	r3, [r7, #7]
 802664c:	4613      	mov	r3, r2
 802664e:	71bb      	strb	r3, [r7, #6]
	if(bluetoothStatus){
 8026650:	79fb      	ldrb	r3, [r7, #7]
 8026652:	2b00      	cmp	r3, #0
 8026654:	d018      	beq.n	8026688 <tos_BluetoothGetStatusVAl+0x48>
			lv_color_t bluetoothClr = tos_BluetoothStatus_SymColor_Helper(isConnected);
 8026656:	4b19      	ldr	r3, [pc, #100]	; (80266bc <tos_BluetoothGetStatusVAl+0x7c>)
 8026658:	781b      	ldrb	r3, [r3, #0]
 802665a:	4618      	mov	r0, r3
 802665c:	f000 f832 	bl	80266c4 <tos_BluetoothStatus_SymColor_Helper>
 8026660:	4603      	mov	r3, r0
 8026662:	81bb      	strh	r3, [r7, #12]
			switch(Screen){
 8026664:	79bb      	ldrb	r3, [r7, #6]
 8026666:	2b00      	cmp	r3, #0
 8026668:	d002      	beq.n	8026670 <tos_BluetoothGetStatusVAl+0x30>
 802666a:	2b01      	cmp	r3, #1
 802666c:	d006      	beq.n	802667c <tos_BluetoothGetStatusVAl+0x3c>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
				default: return;
 802666e:	e021      	b.n	80266b4 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 8026670:	79fb      	ldrb	r3, [r7, #7]
 8026672:	89b9      	ldrh	r1, [r7, #12]
 8026674:	4618      	mov	r0, r3
 8026676:	f7fa fe71 	bl	802135c <MainScreen_SetBluetoothStatusVal>
 802667a:	e01b      	b.n	80266b4 <tos_BluetoothGetStatusVAl+0x74>
				case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, bluetoothClr); break;
 802667c:	79fb      	ldrb	r3, [r7, #7]
 802667e:	89b9      	ldrh	r1, [r7, #12]
 8026680:	4618      	mov	r0, r3
 8026682:	f7fe fd13 	bl	80250ac <SleepModeScreen_SetBluetoothStatusVal>
 8026686:	e015      	b.n	80266b4 <tos_BluetoothGetStatusVAl+0x74>
				}
	}else switch(Screen){
 8026688:	79bb      	ldrb	r3, [r7, #6]
 802668a:	2b00      	cmp	r3, #0
 802668c:	d002      	beq.n	8026694 <tos_BluetoothGetStatusVAl+0x54>
 802668e:	2b01      	cmp	r3, #1
 8026690:	d008      	beq.n	80266a4 <tos_BluetoothGetStatusVAl+0x64>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
	default: return;
 8026692:	e00f      	b.n	80266b4 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_MAIN_:  	MainScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 8026694:	4b0a      	ldr	r3, [pc, #40]	; (80266c0 <tos_BluetoothGetStatusVAl+0x80>)
 8026696:	881a      	ldrh	r2, [r3, #0]
 8026698:	79fb      	ldrb	r3, [r7, #7]
 802669a:	4611      	mov	r1, r2
 802669c:	4618      	mov	r0, r3
 802669e:	f7fa fe5d 	bl	802135c <MainScreen_SetBluetoothStatusVal>
 80266a2:	e007      	b.n	80266b4 <tos_BluetoothGetStatusVAl+0x74>
	case TOS_SCREEN_SLEEPMODE_:  SleepModeScreen_SetBluetoothStatusVal(bluetoothStatus, LV_COLOR_WHITE); break;
 80266a4:	4b06      	ldr	r3, [pc, #24]	; (80266c0 <tos_BluetoothGetStatusVAl+0x80>)
 80266a6:	881a      	ldrh	r2, [r3, #0]
 80266a8:	79fb      	ldrb	r3, [r7, #7]
 80266aa:	4611      	mov	r1, r2
 80266ac:	4618      	mov	r0, r3
 80266ae:	f7fe fcfd 	bl	80250ac <SleepModeScreen_SetBluetoothStatusVal>
 80266b2:	bf00      	nop
	}
}
 80266b4:	3710      	adds	r7, #16
 80266b6:	46bd      	mov	sp, r7
 80266b8:	bd80      	pop	{r7, pc}
 80266ba:	bf00      	nop
 80266bc:	200072a8 	.word	0x200072a8
 80266c0:	0802a504 	.word	0x0802a504

080266c4 <tos_BluetoothStatus_SymColor_Helper>:
lv_color_t tos_BluetoothStatus_SymColor_Helper(bool bluetoothConnected){
 80266c4:	b480      	push	{r7}
 80266c6:	b083      	sub	sp, #12
 80266c8:	af00      	add	r7, sp, #0
 80266ca:	4602      	mov	r2, r0
 80266cc:	71fa      	strb	r2, [r7, #7]
			if (bluetoothConnected) return LV_COLOR_BLUE;
 80266ce:	79fa      	ldrb	r2, [r7, #7]
 80266d0:	2a00      	cmp	r2, #0
 80266d2:	d008      	beq.n	80266e6 <tos_BluetoothStatus_SymColor_Helper+0x22>
 80266d4:	f36f 0302 	bfc	r3, #0, #3
 80266d8:	f36f 03c7 	bfc	r3, #3, #5
 80266dc:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 80266e0:	f36f 334f 	bfc	r3, #13, #3
 80266e4:	e001      	b.n	80266ea <tos_BluetoothStatus_SymColor_Helper+0x26>
			else return LV_COLOR_GRAY;
 80266e6:	4b04      	ldr	r3, [pc, #16]	; (80266f8 <tos_BluetoothStatus_SymColor_Helper+0x34>)
 80266e8:	881b      	ldrh	r3, [r3, #0]
}
 80266ea:	4618      	mov	r0, r3
 80266ec:	370c      	adds	r7, #12
 80266ee:	46bd      	mov	sp, r7
 80266f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266f4:	4770      	bx	lr
 80266f6:	bf00      	nop
 80266f8:	0802a508 	.word	0x0802a508

080266fc <tos_BluetoothGetEnableVal>:
void tos_BluetoothEnableController(void){
	//Bluetooth u aktif ve pasif edecek pin belirlenecek burası ona gore duzenlenecek.
	//Modul uzerinde regulator oldugu icin sonraya kaldı

}
bool tos_BluetoothGetEnableVal(void){
 80266fc:	b480      	push	{r7}
 80266fe:	af00      	add	r7, sp, #0
	return bluetoothEnable;
 8026700:	4b03      	ldr	r3, [pc, #12]	; (8026710 <tos_BluetoothGetEnableVal+0x14>)
 8026702:	781b      	ldrb	r3, [r3, #0]
}
 8026704:	4618      	mov	r0, r3
 8026706:	46bd      	mov	sp, r7
 8026708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802670c:	4770      	bx	lr
 802670e:	bf00      	nop
 8026710:	20002848 	.word	0x20002848

08026714 <tos_BluetoothSetStepsVal>:
	BluetoothBatteryVal=batteryVal;
}
uint16_t tos_BluetoothGetStepsVal(void){
	return BluetoothStepsVal;
}
void tos_BluetoothSetStepsVal(uint8_t steps,bool unitType){
 8026714:	b480      	push	{r7}
 8026716:	b083      	sub	sp, #12
 8026718:	af00      	add	r7, sp, #0
 802671a:	4603      	mov	r3, r0
 802671c:	460a      	mov	r2, r1
 802671e:	71fb      	strb	r3, [r7, #7]
 8026720:	4613      	mov	r3, r2
 8026722:	71bb      	strb	r3, [r7, #6]
	BluetoothStepsVal=steps;
 8026724:	79fb      	ldrb	r3, [r7, #7]
 8026726:	b29a      	uxth	r2, r3
 8026728:	4b05      	ldr	r3, [pc, #20]	; (8026740 <tos_BluetoothSetStepsVal+0x2c>)
 802672a:	801a      	strh	r2, [r3, #0]
	BluetoothUnitType=unitType;
 802672c:	4a05      	ldr	r2, [pc, #20]	; (8026744 <tos_BluetoothSetStepsVal+0x30>)
 802672e:	79bb      	ldrb	r3, [r7, #6]
 8026730:	7013      	strb	r3, [r2, #0]
}
 8026732:	bf00      	nop
 8026734:	370c      	adds	r7, #12
 8026736:	46bd      	mov	sp, r7
 8026738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802673c:	4770      	bx	lr
 802673e:	bf00      	nop
 8026740:	200073d2 	.word	0x200073d2
 8026744:	20007290 	.word	0x20007290

08026748 <tos_RightButton_Listenner_For_MenuControl>:
 *      Author: neset
 */

#include "tos_Button_Helper.h"
static uint16_t enterbtncounter=0,rightbtncounter=0,leftbtncounter=0;
uint8_t tos_RightButton_Listenner_For_MenuControl(void) {
 8026748:	b580      	push	{r7, lr}
 802674a:	af00      	add	r7, sp, #0
	if(READ_RIGHT_BTN){
 802674c:	2140      	movs	r1, #64	; 0x40
 802674e:	4810      	ldr	r0, [pc, #64]	; (8026790 <tos_RightButton_Listenner_For_MenuControl+0x48>)
 8026750:	f7db ff7e 	bl	8002650 <HAL_GPIO_ReadPin>
 8026754:	4603      	mov	r3, r0
 8026756:	2b00      	cmp	r3, #0
 8026758:	d016      	beq.n	8026788 <tos_RightButton_Listenner_For_MenuControl+0x40>
		if(rightbtncounter>=BTN_LONG_PRESS_TIME){ rightbtncounter=0;return 2;}
 802675a:	4b0e      	ldr	r3, [pc, #56]	; (8026794 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802675c:	881b      	ldrh	r3, [r3, #0]
 802675e:	f240 2225 	movw	r2, #549	; 0x225
 8026762:	4293      	cmp	r3, r2
 8026764:	d904      	bls.n	8026770 <tos_RightButton_Listenner_For_MenuControl+0x28>
 8026766:	4b0b      	ldr	r3, [pc, #44]	; (8026794 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 8026768:	2200      	movs	r2, #0
 802676a:	801a      	strh	r2, [r3, #0]
 802676c:	2302      	movs	r3, #2
 802676e:	e00c      	b.n	802678a <tos_RightButton_Listenner_For_MenuControl+0x42>
		if(rightbtncounter>=BTN_SHORT_PRESS_TIME){ rightbtncounter=0;return 1;}
 8026770:	4b08      	ldr	r3, [pc, #32]	; (8026794 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 8026772:	881b      	ldrh	r3, [r3, #0]
 8026774:	2b04      	cmp	r3, #4
 8026776:	d904      	bls.n	8026782 <tos_RightButton_Listenner_For_MenuControl+0x3a>
 8026778:	4b06      	ldr	r3, [pc, #24]	; (8026794 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 802677a:	2200      	movs	r2, #0
 802677c:	801a      	strh	r2, [r3, #0]
 802677e:	2301      	movs	r3, #1
 8026780:	e003      	b.n	802678a <tos_RightButton_Listenner_For_MenuControl+0x42>
		 rightbtncounter=0;
 8026782:	4b04      	ldr	r3, [pc, #16]	; (8026794 <tos_RightButton_Listenner_For_MenuControl+0x4c>)
 8026784:	2200      	movs	r2, #0
 8026786:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8026788:	2300      	movs	r3, #0
}
 802678a:	4618      	mov	r0, r3
 802678c:	bd80      	pop	{r7, pc}
 802678e:	bf00      	nop
 8026790:	40021000 	.word	0x40021000
 8026794:	20006890 	.word	0x20006890

08026798 <tos_LeftButton_Listenner_For_MenuControl>:
uint8_t tos_LeftButton_Listenner_For_MenuControl(void) {
 8026798:	b580      	push	{r7, lr}
 802679a:	af00      	add	r7, sp, #0

			if(READ_LEFT_BTN){
 802679c:	2110      	movs	r1, #16
 802679e:	4810      	ldr	r0, [pc, #64]	; (80267e0 <tos_LeftButton_Listenner_For_MenuControl+0x48>)
 80267a0:	f7db ff56 	bl	8002650 <HAL_GPIO_ReadPin>
 80267a4:	4603      	mov	r3, r0
 80267a6:	2b00      	cmp	r3, #0
 80267a8:	d016      	beq.n	80267d8 <tos_LeftButton_Listenner_For_MenuControl+0x40>
				if(leftbtncounter>=BTN_LONG_PRESS_TIME){ leftbtncounter=0;return 2;}
 80267aa:	4b0e      	ldr	r3, [pc, #56]	; (80267e4 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 80267ac:	881b      	ldrh	r3, [r3, #0]
 80267ae:	f240 2225 	movw	r2, #549	; 0x225
 80267b2:	4293      	cmp	r3, r2
 80267b4:	d904      	bls.n	80267c0 <tos_LeftButton_Listenner_For_MenuControl+0x28>
 80267b6:	4b0b      	ldr	r3, [pc, #44]	; (80267e4 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 80267b8:	2200      	movs	r2, #0
 80267ba:	801a      	strh	r2, [r3, #0]
 80267bc:	2302      	movs	r3, #2
 80267be:	e00c      	b.n	80267da <tos_LeftButton_Listenner_For_MenuControl+0x42>
				if(leftbtncounter>=BTN_SHORT_PRESS_TIME){ leftbtncounter=0;return 1;}
 80267c0:	4b08      	ldr	r3, [pc, #32]	; (80267e4 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 80267c2:	881b      	ldrh	r3, [r3, #0]
 80267c4:	2b04      	cmp	r3, #4
 80267c6:	d904      	bls.n	80267d2 <tos_LeftButton_Listenner_For_MenuControl+0x3a>
 80267c8:	4b06      	ldr	r3, [pc, #24]	; (80267e4 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 80267ca:	2200      	movs	r2, #0
 80267cc:	801a      	strh	r2, [r3, #0]
 80267ce:	2301      	movs	r3, #1
 80267d0:	e003      	b.n	80267da <tos_LeftButton_Listenner_For_MenuControl+0x42>
				 leftbtncounter=0;
 80267d2:	4b04      	ldr	r3, [pc, #16]	; (80267e4 <tos_LeftButton_Listenner_For_MenuControl+0x4c>)
 80267d4:	2200      	movs	r2, #0
 80267d6:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 80267d8:	2300      	movs	r3, #0
}
 80267da:	4618      	mov	r0, r3
 80267dc:	bd80      	pop	{r7, pc}
 80267de:	bf00      	nop
 80267e0:	40021000 	.word	0x40021000
 80267e4:	20006892 	.word	0x20006892

080267e8 <tos_EnterButton_Listenner_For_MenuControl>:

uint8_t tos_EnterButton_Listenner_For_MenuControl(void) {
 80267e8:	b580      	push	{r7, lr}
 80267ea:	af00      	add	r7, sp, #0
			if(READ_ENTER_BTN){
 80267ec:	2120      	movs	r1, #32
 80267ee:	4810      	ldr	r0, [pc, #64]	; (8026830 <tos_EnterButton_Listenner_For_MenuControl+0x48>)
 80267f0:	f7db ff2e 	bl	8002650 <HAL_GPIO_ReadPin>
 80267f4:	4603      	mov	r3, r0
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d016      	beq.n	8026828 <tos_EnterButton_Listenner_For_MenuControl+0x40>
				if(enterbtncounter>=BTN_LONG_PRESS_TIME){ enterbtncounter=0;return 2;}
 80267fa:	4b0e      	ldr	r3, [pc, #56]	; (8026834 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 80267fc:	881b      	ldrh	r3, [r3, #0]
 80267fe:	f240 2225 	movw	r2, #549	; 0x225
 8026802:	4293      	cmp	r3, r2
 8026804:	d904      	bls.n	8026810 <tos_EnterButton_Listenner_For_MenuControl+0x28>
 8026806:	4b0b      	ldr	r3, [pc, #44]	; (8026834 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 8026808:	2200      	movs	r2, #0
 802680a:	801a      	strh	r2, [r3, #0]
 802680c:	2302      	movs	r3, #2
 802680e:	e00c      	b.n	802682a <tos_EnterButton_Listenner_For_MenuControl+0x42>
				if(enterbtncounter>=BTN_SHORT_PRESS_TIME){ enterbtncounter=0;return 1;}
 8026810:	4b08      	ldr	r3, [pc, #32]	; (8026834 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 8026812:	881b      	ldrh	r3, [r3, #0]
 8026814:	2b04      	cmp	r3, #4
 8026816:	d904      	bls.n	8026822 <tos_EnterButton_Listenner_For_MenuControl+0x3a>
 8026818:	4b06      	ldr	r3, [pc, #24]	; (8026834 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 802681a:	2200      	movs	r2, #0
 802681c:	801a      	strh	r2, [r3, #0]
 802681e:	2301      	movs	r3, #1
 8026820:	e003      	b.n	802682a <tos_EnterButton_Listenner_For_MenuControl+0x42>
				 enterbtncounter=0;
 8026822:	4b04      	ldr	r3, [pc, #16]	; (8026834 <tos_EnterButton_Listenner_For_MenuControl+0x4c>)
 8026824:	2200      	movs	r2, #0
 8026826:	801a      	strh	r2, [r3, #0]
			}
			return 0;
 8026828:	2300      	movs	r3, #0
}
 802682a:	4618      	mov	r0, r3
 802682c:	bd80      	pop	{r7, pc}
 802682e:	bf00      	nop
 8026830:	40021000 	.word	0x40021000
 8026834:	2000688e 	.word	0x2000688e

08026838 <tos_ButtonCounterIncrease>:
void tos_ButtonCounterIncrease(void){
 8026838:	b580      	push	{r7, lr}
 802683a:	af00      	add	r7, sp, #0
	if(!READ_ENTER_BTN)enterbtncounter++;
 802683c:	2120      	movs	r1, #32
 802683e:	4815      	ldr	r0, [pc, #84]	; (8026894 <tos_ButtonCounterIncrease+0x5c>)
 8026840:	f7db ff06 	bl	8002650 <HAL_GPIO_ReadPin>
 8026844:	4603      	mov	r3, r0
 8026846:	2b00      	cmp	r3, #0
 8026848:	d106      	bne.n	8026858 <tos_ButtonCounterIncrease+0x20>
 802684a:	4b13      	ldr	r3, [pc, #76]	; (8026898 <tos_ButtonCounterIncrease+0x60>)
 802684c:	881b      	ldrh	r3, [r3, #0]
 802684e:	3301      	adds	r3, #1
 8026850:	b29a      	uxth	r2, r3
 8026852:	4b11      	ldr	r3, [pc, #68]	; (8026898 <tos_ButtonCounterIncrease+0x60>)
 8026854:	801a      	strh	r2, [r3, #0]
	else if(!READ_LEFT_BTN)leftbtncounter++;
	else if(!READ_RIGHT_BTN)rightbtncounter++;
}
 8026856:	e01a      	b.n	802688e <tos_ButtonCounterIncrease+0x56>
	else if(!READ_LEFT_BTN)leftbtncounter++;
 8026858:	2110      	movs	r1, #16
 802685a:	480e      	ldr	r0, [pc, #56]	; (8026894 <tos_ButtonCounterIncrease+0x5c>)
 802685c:	f7db fef8 	bl	8002650 <HAL_GPIO_ReadPin>
 8026860:	4603      	mov	r3, r0
 8026862:	2b00      	cmp	r3, #0
 8026864:	d106      	bne.n	8026874 <tos_ButtonCounterIncrease+0x3c>
 8026866:	4b0d      	ldr	r3, [pc, #52]	; (802689c <tos_ButtonCounterIncrease+0x64>)
 8026868:	881b      	ldrh	r3, [r3, #0]
 802686a:	3301      	adds	r3, #1
 802686c:	b29a      	uxth	r2, r3
 802686e:	4b0b      	ldr	r3, [pc, #44]	; (802689c <tos_ButtonCounterIncrease+0x64>)
 8026870:	801a      	strh	r2, [r3, #0]
}
 8026872:	e00c      	b.n	802688e <tos_ButtonCounterIncrease+0x56>
	else if(!READ_RIGHT_BTN)rightbtncounter++;
 8026874:	2140      	movs	r1, #64	; 0x40
 8026876:	4807      	ldr	r0, [pc, #28]	; (8026894 <tos_ButtonCounterIncrease+0x5c>)
 8026878:	f7db feea 	bl	8002650 <HAL_GPIO_ReadPin>
 802687c:	4603      	mov	r3, r0
 802687e:	2b00      	cmp	r3, #0
 8026880:	d105      	bne.n	802688e <tos_ButtonCounterIncrease+0x56>
 8026882:	4b07      	ldr	r3, [pc, #28]	; (80268a0 <tos_ButtonCounterIncrease+0x68>)
 8026884:	881b      	ldrh	r3, [r3, #0]
 8026886:	3301      	adds	r3, #1
 8026888:	b29a      	uxth	r2, r3
 802688a:	4b05      	ldr	r3, [pc, #20]	; (80268a0 <tos_ButtonCounterIncrease+0x68>)
 802688c:	801a      	strh	r2, [r3, #0]
}
 802688e:	bf00      	nop
 8026890:	bd80      	pop	{r7, pc}
 8026892:	bf00      	nop
 8026894:	40021000 	.word	0x40021000
 8026898:	2000688e 	.word	0x2000688e
 802689c:	20006892 	.word	0x20006892
 80268a0:	20006890 	.word	0x20006890

080268a4 <tos_Ratio>:
*inMin input minumun
*inMax input maximun
*outMin output minumun
*outMax output maximun
*/
double tos_Ratio(double inValue, double inMin, double inMax, double outMin, double outMax) {
 80268a4:	b5b0      	push	{r4, r5, r7, lr}
 80268a6:	b08a      	sub	sp, #40	; 0x28
 80268a8:	af00      	add	r7, sp, #0
 80268aa:	ed87 0b08 	vstr	d0, [r7, #32]
 80268ae:	ed87 1b06 	vstr	d1, [r7, #24]
 80268b2:	ed87 2b04 	vstr	d2, [r7, #16]
 80268b6:	ed87 3b02 	vstr	d3, [r7, #8]
 80268ba:	ed87 4b00 	vstr	d4, [r7]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 80268be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80268c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80268c6:	f7d9 fcef 	bl	80002a8 <__aeabi_dsub>
 80268ca:	4603      	mov	r3, r0
 80268cc:	460c      	mov	r4, r1
 80268ce:	4625      	mov	r5, r4
 80268d0:	461c      	mov	r4, r3
 80268d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80268d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80268da:	f7d9 fce5 	bl	80002a8 <__aeabi_dsub>
 80268de:	4602      	mov	r2, r0
 80268e0:	460b      	mov	r3, r1
 80268e2:	4620      	mov	r0, r4
 80268e4:	4629      	mov	r1, r5
 80268e6:	f7d9 fe97 	bl	8000618 <__aeabi_dmul>
 80268ea:	4603      	mov	r3, r0
 80268ec:	460c      	mov	r4, r1
 80268ee:	4625      	mov	r5, r4
 80268f0:	461c      	mov	r4, r3
 80268f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80268f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80268fa:	f7d9 fcd5 	bl	80002a8 <__aeabi_dsub>
 80268fe:	4602      	mov	r2, r0
 8026900:	460b      	mov	r3, r1
 8026902:	4620      	mov	r0, r4
 8026904:	4629      	mov	r1, r5
 8026906:	f7d9 ffb1 	bl	800086c <__aeabi_ddiv>
 802690a:	4603      	mov	r3, r0
 802690c:	460c      	mov	r4, r1
 802690e:	4618      	mov	r0, r3
 8026910:	4621      	mov	r1, r4
 8026912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026916:	f7d9 fcc9 	bl	80002ac <__adddf3>
 802691a:	4603      	mov	r3, r0
 802691c:	460c      	mov	r4, r1
 802691e:	ec44 3b17 	vmov	d7, r3, r4
}
 8026922:	eeb0 0a47 	vmov.f32	s0, s14
 8026926:	eef0 0a67 	vmov.f32	s1, s15
 802692a:	3728      	adds	r7, #40	; 0x28
 802692c:	46bd      	mov	sp, r7
 802692e:	bdb0      	pop	{r4, r5, r7, pc}

08026930 <tos_Rounding>:
/*This function using for Rounding a floating value to int
*getValue input value
*/
uint8_t tos_Rounding(double getValue){
 8026930:	b590      	push	{r4, r7, lr}
 8026932:	b083      	sub	sp, #12
 8026934:	af00      	add	r7, sp, #0
 8026936:	ed87 0b00 	vstr	d0, [r7]
	if(getValue<(((uint8_t)getValue)+0.5f)) return (uint8_t)getValue;
 802693a:	e9d7 0100 	ldrd	r0, r1, [r7]
 802693e:	f7da f943 	bl	8000bc8 <__aeabi_d2uiz>
 8026942:	4603      	mov	r3, r0
 8026944:	b2db      	uxtb	r3, r3
 8026946:	ee07 3a90 	vmov	s15, r3
 802694a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802694e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8026952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026956:	ee17 0a90 	vmov	r0, s15
 802695a:	f7d9 fe05 	bl	8000568 <__aeabi_f2d>
 802695e:	4603      	mov	r3, r0
 8026960:	460c      	mov	r4, r1
 8026962:	461a      	mov	r2, r3
 8026964:	4623      	mov	r3, r4
 8026966:	e9d7 0100 	ldrd	r0, r1, [r7]
 802696a:	f7da f8c7 	bl	8000afc <__aeabi_dcmplt>
 802696e:	4603      	mov	r3, r0
 8026970:	2b00      	cmp	r3, #0
 8026972:	d006      	beq.n	8026982 <tos_Rounding+0x52>
 8026974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8026978:	f7da f926 	bl	8000bc8 <__aeabi_d2uiz>
 802697c:	4603      	mov	r3, r0
 802697e:	b2db      	uxtb	r3, r3
 8026980:	e007      	b.n	8026992 <tos_Rounding+0x62>
	else return (uint8_t)getValue+1;
 8026982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8026986:	f7da f91f 	bl	8000bc8 <__aeabi_d2uiz>
 802698a:	4603      	mov	r3, r0
 802698c:	b2db      	uxtb	r3, r3
 802698e:	3301      	adds	r3, #1
 8026990:	b2db      	uxtb	r3, r3
}
 8026992:	4618      	mov	r0, r3
 8026994:	370c      	adds	r7, #12
 8026996:	46bd      	mov	sp, r7
 8026998:	bd90      	pop	{r4, r7, pc}
 802699a:	0000      	movs	r0, r0
 802699c:	0000      	movs	r0, r0
	...

080269a0 <tos_distance_Calc>:
/*This function using for calculate how much was go distance (kilometers or miles)
 * @param unitType using for kilometers or miles
 * true->kilometers || fasle->miles
 * @param steps using for get steps value
*/
float tos_distance_Calc(bool unitType,uint16_t steps){
 80269a0:	b590      	push	{r4, r7, lr}
 80269a2:	b085      	sub	sp, #20
 80269a4:	af00      	add	r7, sp, #0
 80269a6:	4603      	mov	r3, r0
 80269a8:	460a      	mov	r2, r1
 80269aa:	71fb      	strb	r3, [r7, #7]
 80269ac:	4613      	mov	r3, r2
 80269ae:	80bb      	strh	r3, [r7, #4]
	float meterTmp=(float)steps*0.707;
 80269b0:	88bb      	ldrh	r3, [r7, #4]
 80269b2:	ee07 3a90 	vmov	s15, r3
 80269b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80269ba:	ee17 0a90 	vmov	r0, s15
 80269be:	f7d9 fdd3 	bl	8000568 <__aeabi_f2d>
 80269c2:	a310      	add	r3, pc, #64	; (adr r3, 8026a04 <tos_distance_Calc+0x64>)
 80269c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269c8:	f7d9 fe26 	bl	8000618 <__aeabi_dmul>
 80269cc:	4603      	mov	r3, r0
 80269ce:	460c      	mov	r4, r1
 80269d0:	4618      	mov	r0, r3
 80269d2:	4621      	mov	r1, r4
 80269d4:	f7da f918 	bl	8000c08 <__aeabi_d2f>
 80269d8:	4603      	mov	r3, r0
 80269da:	60fb      	str	r3, [r7, #12]
	meterTmp/=1000;
 80269dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80269e0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8026a00 <tos_distance_Calc+0x60>
 80269e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80269e8:	edc7 7a03 	vstr	s15, [r7, #12]
	//if(!unitType) return meterTmp*0.621371192;
	return meterTmp;
 80269ec:	68fb      	ldr	r3, [r7, #12]
 80269ee:	ee07 3a90 	vmov	s15, r3
}
 80269f2:	eeb0 0a67 	vmov.f32	s0, s15
 80269f6:	3714      	adds	r7, #20
 80269f8:	46bd      	mov	sp, r7
 80269fa:	bd90      	pop	{r4, r7, pc}
 80269fc:	f3af 8000 	nop.w
 8026a00:	447a0000 	.word	0x447a0000
 8026a04:	76c8b439 	.word	0x76c8b439
 8026a08:	3fe69fbe 	.word	0x3fe69fbe

08026a0c <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8026a0c:	b580      	push	{r7, lr}
 8026a0e:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8026a10:	f7eb fdc6 	bl	80125a0 <lv_disp_get_default>
 8026a14:	4603      	mov	r3, r0
 8026a16:	4618      	mov	r0, r3
 8026a18:	f7de fa8e 	bl	8004f38 <lv_disp_get_scr_act>
 8026a1c:	4603      	mov	r3, r0
}
 8026a1e:	4618      	mov	r0, r3
 8026a20:	bd80      	pop	{r7, pc}
	...

08026a24 <tos_Screen_Init>:
uint8_t currentScreen;
void tos_Gui_Init(void);



void tos_Screen_Init(void){
 8026a24:	b580      	push	{r7, lr}
 8026a26:	af00      	add	r7, sp, #0
	ST7789_UnSelect();
 8026a28:	2201      	movs	r2, #1
 8026a2a:	2108      	movs	r1, #8
 8026a2c:	4810      	ldr	r0, [pc, #64]	; (8026a70 <tos_Screen_Init+0x4c>)
 8026a2e:	f7db fe27 	bl	8002680 <HAL_GPIO_WritePin>
	isScreenCounterEnable=true;
 8026a32:	4b10      	ldr	r3, [pc, #64]	; (8026a74 <tos_Screen_Init+0x50>)
 8026a34:	2201      	movs	r2, #1
 8026a36:	701a      	strb	r2, [r3, #0]
	screenStatu=true;
 8026a38:	4b0f      	ldr	r3, [pc, #60]	; (8026a78 <tos_Screen_Init+0x54>)
 8026a3a:	2201      	movs	r2, #1
 8026a3c:	701a      	strb	r2, [r3, #0]
	GuiHelperOpen=true;
 8026a3e:	4b0f      	ldr	r3, [pc, #60]	; (8026a7c <tos_Screen_Init+0x58>)
 8026a40:	2201      	movs	r2, #1
 8026a42:	701a      	strb	r2, [r3, #0]
	screenType=1;
 8026a44:	4b0e      	ldr	r3, [pc, #56]	; (8026a80 <tos_Screen_Init+0x5c>)
 8026a46:	2201      	movs	r2, #1
 8026a48:	701a      	strb	r2, [r3, #0]
	screenTheme=0;
 8026a4a:	4b0e      	ldr	r3, [pc, #56]	; (8026a84 <tos_Screen_Init+0x60>)
 8026a4c:	2200      	movs	r2, #0
 8026a4e:	701a      	strb	r2, [r3, #0]
	currentScreen=1;
 8026a50:	4b0d      	ldr	r3, [pc, #52]	; (8026a88 <tos_Screen_Init+0x64>)
 8026a52:	2201      	movs	r2, #1
 8026a54:	701a      	strb	r2, [r3, #0]
	screenCounter=0;
 8026a56:	4b0d      	ldr	r3, [pc, #52]	; (8026a8c <tos_Screen_Init+0x68>)
 8026a58:	2200      	movs	r2, #0
 8026a5a:	801a      	strh	r2, [r3, #0]
	tos_StartScreen_Init();
 8026a5c:	f7fe fb9e 	bl	802519c <tos_StartScreen_Init>
	HAL_TIM_Base_Start_IT(&TOS_GUI_TIMER);
 8026a60:	480b      	ldr	r0, [pc, #44]	; (8026a90 <tos_Screen_Init+0x6c>)
 8026a62:	f7dd f90c 	bl	8003c7e <HAL_TIM_Base_Start_IT>
	isWorkingSystem=true;
 8026a66:	4b0b      	ldr	r3, [pc, #44]	; (8026a94 <tos_Screen_Init+0x70>)
 8026a68:	2201      	movs	r2, #1
 8026a6a:	701a      	strb	r2, [r3, #0]


}
 8026a6c:	bf00      	nop
 8026a6e:	bd80      	pop	{r7, pc}
 8026a70:	40020000 	.word	0x40020000
 8026a74:	200073d7 	.word	0x200073d7
 8026a78:	200073db 	.word	0x200073db
 8026a7c:	200073d5 	.word	0x200073d5
 8026a80:	200073da 	.word	0x200073da
 8026a84:	200073d4 	.word	0x200073d4
 8026a88:	200073d6 	.word	0x200073d6
 8026a8c:	200073d8 	.word	0x200073d8
 8026a90:	200068b8 	.word	0x200068b8
 8026a94:	20006894 	.word	0x20006894

08026a98 <tos_firstScreen_Update>:
void tos_firstScreen_Update(void){
 8026a98:	b580      	push	{r7, lr}
 8026a9a:	af00      	add	r7, sp, #0
	if(isScreenCounterEnable){
 8026a9c:	4b09      	ldr	r3, [pc, #36]	; (8026ac4 <tos_firstScreen_Update+0x2c>)
 8026a9e:	781b      	ldrb	r3, [r3, #0]
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d00d      	beq.n	8026ac0 <tos_firstScreen_Update+0x28>
		screenCounter++;
 8026aa4:	4b08      	ldr	r3, [pc, #32]	; (8026ac8 <tos_firstScreen_Update+0x30>)
 8026aa6:	881b      	ldrh	r3, [r3, #0]
 8026aa8:	3301      	adds	r3, #1
 8026aaa:	b29a      	uxth	r2, r3
 8026aac:	4b06      	ldr	r3, [pc, #24]	; (8026ac8 <tos_firstScreen_Update+0x30>)
 8026aae:	801a      	strh	r2, [r3, #0]
		if(screenCounter>=5000){
 8026ab0:	4b05      	ldr	r3, [pc, #20]	; (8026ac8 <tos_firstScreen_Update+0x30>)
 8026ab2:	881b      	ldrh	r3, [r3, #0]
 8026ab4:	f241 3287 	movw	r2, #4999	; 0x1387
 8026ab8:	4293      	cmp	r3, r2
 8026aba:	d901      	bls.n	8026ac0 <tos_firstScreen_Update+0x28>
			tos_Gui_Init();
 8026abc:	f000 f806 	bl	8026acc <tos_Gui_Init>
		}
	}

}
 8026ac0:	bf00      	nop
 8026ac2:	bd80      	pop	{r7, pc}
 8026ac4:	200073d7 	.word	0x200073d7
 8026ac8:	200073d8 	.word	0x200073d8

08026acc <tos_Gui_Init>:

void tos_Gui_Init(void){
 8026acc:	b580      	push	{r7, lr}
 8026ace:	af00      	add	r7, sp, #0
	screenCounter=0;
 8026ad0:	4b0a      	ldr	r3, [pc, #40]	; (8026afc <tos_Gui_Init+0x30>)
 8026ad2:	2200      	movs	r2, #0
 8026ad4:	801a      	strh	r2, [r3, #0]
	currentScreen=0;
 8026ad6:	4b0a      	ldr	r3, [pc, #40]	; (8026b00 <tos_Gui_Init+0x34>)
 8026ad8:	2200      	movs	r2, #0
 8026ada:	701a      	strb	r2, [r3, #0]
	isScreenCounterEnable=false;
 8026adc:	4b09      	ldr	r3, [pc, #36]	; (8026b04 <tos_Gui_Init+0x38>)
 8026ade:	2200      	movs	r2, #0
 8026ae0:	701a      	strb	r2, [r3, #0]
	lv_obj_clean(lv_scr_act());
 8026ae2:	f7ff ff93 	bl	8026a0c <lv_scr_act>
 8026ae6:	4603      	mov	r3, r0
 8026ae8:	4618      	mov	r0, r3
 8026aea:	f7df f985 	bl	8005df8 <lv_obj_clean>
	tos_Screen_Chooser(currentScreen);
 8026aee:	4b04      	ldr	r3, [pc, #16]	; (8026b00 <tos_Gui_Init+0x34>)
 8026af0:	781b      	ldrb	r3, [r3, #0]
 8026af2:	4618      	mov	r0, r3
 8026af4:	f000 f876 	bl	8026be4 <tos_Screen_Chooser>
}
 8026af8:	bf00      	nop
 8026afa:	bd80      	pop	{r7, pc}
 8026afc:	200073d8 	.word	0x200073d8
 8026b00:	200073d6 	.word	0x200073d6
 8026b04:	200073d7 	.word	0x200073d7

08026b08 <tos_ScreenController>:


void tos_ScreenController(void){
 8026b08:	b580      	push	{r7, lr}
 8026b0a:	af00      	add	r7, sp, #0
	 tos_Menu_Controller();
 8026b0c:	f7fa fcf0 	bl	80214f0 <tos_Menu_Controller>
	if(screenCounter==0 && GuiHelperOpen){
 8026b10:	4b2e      	ldr	r3, [pc, #184]	; (8026bcc <tos_ScreenController+0xc4>)
 8026b12:	881b      	ldrh	r3, [r3, #0]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d158      	bne.n	8026bca <tos_ScreenController+0xc2>
 8026b18:	4b2d      	ldr	r3, [pc, #180]	; (8026bd0 <tos_ScreenController+0xc8>)
 8026b1a:	781b      	ldrb	r3, [r3, #0]
 8026b1c:	2b00      	cmp	r3, #0
 8026b1e:	d054      	beq.n	8026bca <tos_ScreenController+0xc2>

		if(1==tos_EnterButton_Listenner_For_MenuControl()){ sleepCounter=0;
 8026b20:	f7ff fe62 	bl	80267e8 <tos_EnterButton_Listenner_For_MenuControl>
 8026b24:	4603      	mov	r3, r0
 8026b26:	2b01      	cmp	r3, #1
 8026b28:	d11f      	bne.n	8026b6a <tos_ScreenController+0x62>
 8026b2a:	4b2a      	ldr	r3, [pc, #168]	; (8026bd4 <tos_ScreenController+0xcc>)
 8026b2c:	2200      	movs	r2, #0
 8026b2e:	801a      	strh	r2, [r3, #0]
			if(!screenStatu){screenStatu=true;	ST7789_UnSelect(); return;}
 8026b30:	4b29      	ldr	r3, [pc, #164]	; (8026bd8 <tos_ScreenController+0xd0>)
 8026b32:	781b      	ldrb	r3, [r3, #0]
 8026b34:	f083 0301 	eor.w	r3, r3, #1
 8026b38:	b2db      	uxtb	r3, r3
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	d008      	beq.n	8026b50 <tos_ScreenController+0x48>
 8026b3e:	4b26      	ldr	r3, [pc, #152]	; (8026bd8 <tos_ScreenController+0xd0>)
 8026b40:	2201      	movs	r2, #1
 8026b42:	701a      	strb	r2, [r3, #0]
 8026b44:	2201      	movs	r2, #1
 8026b46:	2108      	movs	r1, #8
 8026b48:	4824      	ldr	r0, [pc, #144]	; (8026bdc <tos_ScreenController+0xd4>)
 8026b4a:	f7db fd99 	bl	8002680 <HAL_GPIO_WritePin>
 8026b4e:	e03c      	b.n	8026bca <tos_ScreenController+0xc2>
			else if(1==currentScreen){currentScreen=0; tos_Screen_Chooser(currentScreen);	return;}
 8026b50:	4b23      	ldr	r3, [pc, #140]	; (8026be0 <tos_ScreenController+0xd8>)
 8026b52:	781b      	ldrb	r3, [r3, #0]
 8026b54:	2b01      	cmp	r3, #1
 8026b56:	d10a      	bne.n	8026b6e <tos_ScreenController+0x66>
 8026b58:	4b21      	ldr	r3, [pc, #132]	; (8026be0 <tos_ScreenController+0xd8>)
 8026b5a:	2200      	movs	r2, #0
 8026b5c:	701a      	strb	r2, [r3, #0]
 8026b5e:	4b20      	ldr	r3, [pc, #128]	; (8026be0 <tos_ScreenController+0xd8>)
 8026b60:	781b      	ldrb	r3, [r3, #0]
 8026b62:	4618      	mov	r0, r3
 8026b64:	f000 f83e 	bl	8026be4 <tos_Screen_Chooser>
 8026b68:	e02f      	b.n	8026bca <tos_ScreenController+0xc2>
		}
		else if(2==tos_EnterButton_Listenner_For_MenuControl()){
 8026b6a:	f7ff fe3d 	bl	80267e8 <tos_EnterButton_Listenner_For_MenuControl>
				//screenStatu=false; currentScreen=1;tos_Screen_Chooser(currentScreen); return;
		}
		if(1==tos_LeftButton_Listenner_For_MenuControl()){ sleepCounter=0;
 8026b6e:	f7ff fe13 	bl	8026798 <tos_LeftButton_Listenner_For_MenuControl>
 8026b72:	4603      	mov	r3, r0
 8026b74:	2b01      	cmp	r3, #1
 8026b76:	d111      	bne.n	8026b9c <tos_ScreenController+0x94>
 8026b78:	4b16      	ldr	r3, [pc, #88]	; (8026bd4 <tos_ScreenController+0xcc>)
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(5); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8026b7e:	2005      	movs	r0, #5
 8026b80:	f7fa fe52 	bl	8021828 <MenuScreen_SetItem>
 8026b84:	4b16      	ldr	r3, [pc, #88]	; (8026be0 <tos_ScreenController+0xd8>)
 8026b86:	2202      	movs	r2, #2
 8026b88:	701a      	strb	r2, [r3, #0]
 8026b8a:	4b15      	ldr	r3, [pc, #84]	; (8026be0 <tos_ScreenController+0xd8>)
 8026b8c:	781b      	ldrb	r3, [r3, #0]
 8026b8e:	4618      	mov	r0, r3
 8026b90:	f000 f828 	bl	8026be4 <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 8026b94:	4b0e      	ldr	r3, [pc, #56]	; (8026bd0 <tos_ScreenController+0xc8>)
 8026b96:	2200      	movs	r2, #0
 8026b98:	701a      	strb	r2, [r3, #0]
 8026b9a:	e016      	b.n	8026bca <tos_ScreenController+0xc2>
			}
		if(1==tos_RightButton_Listenner_For_MenuControl()){ sleepCounter=0;
 8026b9c:	f7ff fdd4 	bl	8026748 <tos_RightButton_Listenner_For_MenuControl>
 8026ba0:	4603      	mov	r3, r0
 8026ba2:	2b01      	cmp	r3, #1
 8026ba4:	d111      	bne.n	8026bca <tos_ScreenController+0xc2>
 8026ba6:	4b0b      	ldr	r3, [pc, #44]	; (8026bd4 <tos_ScreenController+0xcc>)
 8026ba8:	2200      	movs	r2, #0
 8026baa:	801a      	strh	r2, [r3, #0]
			MenuScreen_SetItem(0); currentScreen=2; tos_Screen_Chooser(currentScreen);
 8026bac:	2000      	movs	r0, #0
 8026bae:	f7fa fe3b 	bl	8021828 <MenuScreen_SetItem>
 8026bb2:	4b0b      	ldr	r3, [pc, #44]	; (8026be0 <tos_ScreenController+0xd8>)
 8026bb4:	2202      	movs	r2, #2
 8026bb6:	701a      	strb	r2, [r3, #0]
 8026bb8:	4b09      	ldr	r3, [pc, #36]	; (8026be0 <tos_ScreenController+0xd8>)
 8026bba:	781b      	ldrb	r3, [r3, #0]
 8026bbc:	4618      	mov	r0, r3
 8026bbe:	f000 f811 	bl	8026be4 <tos_Screen_Chooser>
			GuiHelperOpen=false; 	return;
 8026bc2:	4b03      	ldr	r3, [pc, #12]	; (8026bd0 <tos_ScreenController+0xc8>)
 8026bc4:	2200      	movs	r2, #0
 8026bc6:	701a      	strb	r2, [r3, #0]
 8026bc8:	bf00      	nop
		}


	}

}
 8026bca:	bd80      	pop	{r7, pc}
 8026bcc:	200073d8 	.word	0x200073d8
 8026bd0:	200073d5 	.word	0x200073d5
 8026bd4:	20006896 	.word	0x20006896
 8026bd8:	200073db 	.word	0x200073db
 8026bdc:	40020000 	.word	0x40020000
 8026be0:	200073d6 	.word	0x200073d6

08026be4 <tos_Screen_Chooser>:
/*This function using for set new screen*/
void tos_Screen_Chooser(uint8_t currentScreen){
 8026be4:	b580      	push	{r7, lr}
 8026be6:	b082      	sub	sp, #8
 8026be8:	af00      	add	r7, sp, #0
 8026bea:	4603      	mov	r3, r0
 8026bec:	71fb      	strb	r3, [r7, #7]
	SleepModeScreen_TaskControllerSet(false);
 8026bee:	2000      	movs	r0, #0
 8026bf0:	f7fe fa72 	bl	80250d8 <SleepModeScreen_TaskControllerSet>
	MainScreen_TaskControllerSet(false);
 8026bf4:	2000      	movs	r0, #0
 8026bf6:	f7fa fbc7 	bl	8021388 <MainScreen_TaskControllerSet>
	MenuScreen_TaskControllerSet(false);
 8026bfa:	2000      	movs	r0, #0
 8026bfc:	f7fa fe04 	bl	8021808 <MenuScreen_TaskControllerSet>
	lv_obj_clean(lv_scr_act());
 8026c00:	f7ff ff04 	bl	8026a0c <lv_scr_act>
 8026c04:	4603      	mov	r3, r0
 8026c06:	4618      	mov	r0, r3
 8026c08:	f7df f8f6 	bl	8005df8 <lv_obj_clean>
	switch(currentScreen){
 8026c0c:	79fb      	ldrb	r3, [r7, #7]
 8026c0e:	2b01      	cmp	r3, #1
 8026c10:	d00f      	beq.n	8026c32 <tos_Screen_Chooser+0x4e>
 8026c12:	2b02      	cmp	r3, #2
 8026c14:	d013      	beq.n	8026c3e <tos_Screen_Chooser+0x5a>
 8026c16:	2b00      	cmp	r3, #0
 8026c18:	d000      	beq.n	8026c1c <tos_Screen_Chooser+0x38>
	case TOS_SCREEN_MENU:
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
		MenuScreen_TaskControllerSet(true);
		tos_MenuScreen_Init(true,ScreenRtc);
		break;
	default: return;
 8026c1a:	e01d      	b.n	8026c58 <tos_Screen_Chooser+0x74>
		HAL_TIM_Base_Start_IT(&TOS_SCREENUPDATE_TIMER);
 8026c1c:	4810      	ldr	r0, [pc, #64]	; (8026c60 <tos_Screen_Chooser+0x7c>)
 8026c1e:	f7dd f82e 	bl	8003c7e <HAL_TIM_Base_Start_IT>
		MainScreen_TaskControllerSet(true);
 8026c22:	2001      	movs	r0, #1
 8026c24:	f7fa fbb0 	bl	8021388 <MainScreen_TaskControllerSet>
		tos_MainScreen_Init(1,1);break;
 8026c28:	2101      	movs	r1, #1
 8026c2a:	2001      	movs	r0, #1
 8026c2c:	f7f8 fc3a 	bl	801f4a4 <tos_MainScreen_Init>
 8026c30:	e012      	b.n	8026c58 <tos_Screen_Chooser+0x74>
		SleepModeScreen_TaskControllerSet(true);
 8026c32:	2001      	movs	r0, #1
 8026c34:	f7fe fa50 	bl	80250d8 <SleepModeScreen_TaskControllerSet>
		tos_SleepModeScreen_Init();break;
 8026c38:	f7fd ff6c 	bl	8024b14 <tos_SleepModeScreen_Init>
 8026c3c:	e00c      	b.n	8026c58 <tos_Screen_Chooser+0x74>
		HAL_TIM_Base_Stop_IT(&TOS_SCREENUPDATE_TIMER);
 8026c3e:	4808      	ldr	r0, [pc, #32]	; (8026c60 <tos_Screen_Chooser+0x7c>)
 8026c40:	f7dd f841 	bl	8003cc6 <HAL_TIM_Base_Stop_IT>
		MenuScreen_TaskControllerSet(true);
 8026c44:	2001      	movs	r0, #1
 8026c46:	f7fa fddf 	bl	8021808 <MenuScreen_TaskControllerSet>
		tos_MenuScreen_Init(true,ScreenRtc);
 8026c4a:	4b06      	ldr	r3, [pc, #24]	; (8026c64 <tos_Screen_Chooser+0x80>)
 8026c4c:	681b      	ldr	r3, [r3, #0]
 8026c4e:	4619      	mov	r1, r3
 8026c50:	2001      	movs	r0, #1
 8026c52:	f7fa fbfb 	bl	802144c <tos_MenuScreen_Init>
		break;
 8026c56:	bf00      	nop
	}
}
 8026c58:	3708      	adds	r7, #8
 8026c5a:	46bd      	mov	sp, r7
 8026c5c:	bd80      	pop	{r7, pc}
 8026c5e:	bf00      	nop
 8026c60:	200068f8 	.word	0x200068f8
 8026c64:	200073dc 	.word	0x200073dc

08026c68 <tos_Screen_Variables_Getter>:
void tos_Screen_Variables_Getter(uint8_t Screen){
 8026c68:	b580      	push	{r7, lr}
 8026c6a:	b082      	sub	sp, #8
 8026c6c:	af00      	add	r7, sp, #0
 8026c6e:	4603      	mov	r3, r0
 8026c70:	71fb      	strb	r3, [r7, #7]
	  tos_BluetoothReceiverAndTransmitter(ScreenRtc);
 8026c72:	4b0f      	ldr	r3, [pc, #60]	; (8026cb0 <tos_Screen_Variables_Getter+0x48>)
 8026c74:	681b      	ldr	r3, [r3, #0]
 8026c76:	4618      	mov	r0, r3
 8026c78:	f7ff fb94 	bl	80263a4 <tos_BluetoothReceiverAndTransmitter>
	  tos_BluetoothGetStatusVAl(tos_BluetoothGetEnableVal(),Screen);
 8026c7c:	f7ff fd3e 	bl	80266fc <tos_BluetoothGetEnableVal>
 8026c80:	4603      	mov	r3, r0
 8026c82:	461a      	mov	r2, r3
 8026c84:	79fb      	ldrb	r3, [r7, #7]
 8026c86:	4619      	mov	r1, r3
 8026c88:	4610      	mov	r0, r2
 8026c8a:	f7ff fcd9 	bl	8026640 <tos_BluetoothGetStatusVAl>
	  tos_RTC_GetTime(ScreenRtc,Screen);
 8026c8e:	4b08      	ldr	r3, [pc, #32]	; (8026cb0 <tos_Screen_Variables_Getter+0x48>)
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	79fa      	ldrb	r2, [r7, #7]
 8026c94:	4611      	mov	r1, r2
 8026c96:	4618      	mov	r0, r3
 8026c98:	f000 f948 	bl	8026f2c <tos_RTC_GetTime>
	  tos_getBatteryVAl(50,Screen);
 8026c9c:	79fb      	ldrb	r3, [r7, #7]
 8026c9e:	4619      	mov	r1, r3
 8026ca0:	2032      	movs	r0, #50	; 0x32
 8026ca2:	f7ff fa8b 	bl	80261bc <tos_getBatteryVAl>

}
 8026ca6:	bf00      	nop
 8026ca8:	3708      	adds	r7, #8
 8026caa:	46bd      	mov	sp, r7
 8026cac:	bd80      	pop	{r7, pc}
 8026cae:	bf00      	nop
 8026cb0:	200073dc 	.word	0x200073dc

08026cb4 <tos_Get_Rtc>:
void tos_Get_Rtc(RTC_HandleTypeDef *hrtc){
 8026cb4:	b480      	push	{r7}
 8026cb6:	b083      	sub	sp, #12
 8026cb8:	af00      	add	r7, sp, #0
 8026cba:	6078      	str	r0, [r7, #4]
	ScreenRtc=hrtc;
 8026cbc:	4a04      	ldr	r2, [pc, #16]	; (8026cd0 <tos_Get_Rtc+0x1c>)
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	6013      	str	r3, [r2, #0]
}
 8026cc2:	bf00      	nop
 8026cc4:	370c      	adds	r7, #12
 8026cc6:	46bd      	mov	sp, r7
 8026cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ccc:	4770      	bx	lr
 8026cce:	bf00      	nop
 8026cd0:	200073dc 	.word	0x200073dc

08026cd4 <tos_Get_Current_Screen>:
uint8_t tos_Get_Current_Screen(void){
 8026cd4:	b480      	push	{r7}
 8026cd6:	af00      	add	r7, sp, #0
	return currentScreen;
 8026cd8:	4b03      	ldr	r3, [pc, #12]	; (8026ce8 <tos_Get_Current_Screen+0x14>)
 8026cda:	781b      	ldrb	r3, [r3, #0]
}
 8026cdc:	4618      	mov	r0, r3
 8026cde:	46bd      	mov	sp, r7
 8026ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ce4:	4770      	bx	lr
 8026ce6:	bf00      	nop
 8026ce8:	200073d6 	.word	0x200073d6

08026cec <tos_Set_Current_Screen>:
void tos_Set_Current_Screen(void){
 8026cec:	b580      	push	{r7, lr}
 8026cee:	af00      	add	r7, sp, #0
	currentScreen=0; tos_Screen_Chooser(currentScreen);
 8026cf0:	4b06      	ldr	r3, [pc, #24]	; (8026d0c <tos_Set_Current_Screen+0x20>)
 8026cf2:	2200      	movs	r2, #0
 8026cf4:	701a      	strb	r2, [r3, #0]
 8026cf6:	4b05      	ldr	r3, [pc, #20]	; (8026d0c <tos_Set_Current_Screen+0x20>)
 8026cf8:	781b      	ldrb	r3, [r3, #0]
 8026cfa:	4618      	mov	r0, r3
 8026cfc:	f7ff ff72 	bl	8026be4 <tos_Screen_Chooser>
	GuiHelperOpen=true;
 8026d00:	4b03      	ldr	r3, [pc, #12]	; (8026d10 <tos_Set_Current_Screen+0x24>)
 8026d02:	2201      	movs	r2, #1
 8026d04:	701a      	strb	r2, [r3, #0]
}
 8026d06:	bf00      	nop
 8026d08:	bd80      	pop	{r7, pc}
 8026d0a:	bf00      	nop
 8026d0c:	200073d6 	.word	0x200073d6
 8026d10:	200073d5 	.word	0x200073d5

08026d14 <tos_SleepScreen_Counter>:
void tos_SleepScreen_Counter(void){
 8026d14:	b580      	push	{r7, lr}
 8026d16:	af00      	add	r7, sp, #0
	sleepCounter++;
 8026d18:	4b11      	ldr	r3, [pc, #68]	; (8026d60 <tos_SleepScreen_Counter+0x4c>)
 8026d1a:	881b      	ldrh	r3, [r3, #0]
 8026d1c:	3301      	adds	r3, #1
 8026d1e:	b29a      	uxth	r2, r3
 8026d20:	4b0f      	ldr	r3, [pc, #60]	; (8026d60 <tos_SleepScreen_Counter+0x4c>)
 8026d22:	801a      	strh	r2, [r3, #0]
	if(sleepCounter>=450){
 8026d24:	4b0e      	ldr	r3, [pc, #56]	; (8026d60 <tos_SleepScreen_Counter+0x4c>)
 8026d26:	881b      	ldrh	r3, [r3, #0]
 8026d28:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8026d2c:	d316      	bcc.n	8026d5c <tos_SleepScreen_Counter+0x48>
		if(1==currentScreen) { screenStatu=false; ST7789_Select(); }
 8026d2e:	4b0d      	ldr	r3, [pc, #52]	; (8026d64 <tos_SleepScreen_Counter+0x50>)
 8026d30:	781b      	ldrb	r3, [r3, #0]
 8026d32:	2b01      	cmp	r3, #1
 8026d34:	d107      	bne.n	8026d46 <tos_SleepScreen_Counter+0x32>
 8026d36:	4b0c      	ldr	r3, [pc, #48]	; (8026d68 <tos_SleepScreen_Counter+0x54>)
 8026d38:	2200      	movs	r2, #0
 8026d3a:	701a      	strb	r2, [r3, #0]
 8026d3c:	2200      	movs	r2, #0
 8026d3e:	2108      	movs	r1, #8
 8026d40:	480a      	ldr	r0, [pc, #40]	; (8026d6c <tos_SleepScreen_Counter+0x58>)
 8026d42:	f7db fc9d 	bl	8002680 <HAL_GPIO_WritePin>
		currentScreen=1; tos_Screen_Chooser(currentScreen);
 8026d46:	4b07      	ldr	r3, [pc, #28]	; (8026d64 <tos_SleepScreen_Counter+0x50>)
 8026d48:	2201      	movs	r2, #1
 8026d4a:	701a      	strb	r2, [r3, #0]
 8026d4c:	4b05      	ldr	r3, [pc, #20]	; (8026d64 <tos_SleepScreen_Counter+0x50>)
 8026d4e:	781b      	ldrb	r3, [r3, #0]
 8026d50:	4618      	mov	r0, r3
 8026d52:	f7ff ff47 	bl	8026be4 <tos_Screen_Chooser>
		sleepCounter=0;
 8026d56:	4b02      	ldr	r3, [pc, #8]	; (8026d60 <tos_SleepScreen_Counter+0x4c>)
 8026d58:	2200      	movs	r2, #0
 8026d5a:	801a      	strh	r2, [r3, #0]
	}
}
 8026d5c:	bf00      	nop
 8026d5e:	bd80      	pop	{r7, pc}
 8026d60:	20006896 	.word	0x20006896
 8026d64:	200073d6 	.word	0x200073d6
 8026d68:	200073db 	.word	0x200073db
 8026d6c:	40020000 	.word	0x40020000

08026d70 <tos_Notification_CreateRoot>:
#include "tos_Notification_Helper.h"



tos_Notification *  tos_Notification_CreateRoot(tos_Notification * root){
 8026d70:	b580      	push	{r7, lr}
 8026d72:	b082      	sub	sp, #8
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
	root=NULL;
 8026d78:	2300      	movs	r3, #0
 8026d7a:	607b      	str	r3, [r7, #4]
	root=tos_Notification_CreateNode(0);
 8026d7c:	2000      	movs	r0, #0
 8026d7e:	f000 f816 	bl	8026dae <tos_Notification_CreateNode>
 8026d82:	6078      	str	r0, [r7, #4]
    return root;
 8026d84:	687b      	ldr	r3, [r7, #4]
}
 8026d86:	4618      	mov	r0, r3
 8026d88:	3708      	adds	r7, #8
 8026d8a:	46bd      	mov	sp, r7
 8026d8c:	bd80      	pop	{r7, pc}

08026d8e <tos_Notification_SetFirstNode>:
tos_Notification *  tos_Notification_SetFirstNode(tos_Notification * root,tos_Notification * node){
 8026d8e:	b480      	push	{r7}
 8026d90:	b083      	sub	sp, #12
 8026d92:	af00      	add	r7, sp, #0
 8026d94:	6078      	str	r0, [r7, #4]
 8026d96:	6039      	str	r1, [r7, #0]
    node=NULL;
 8026d98:	2300      	movs	r3, #0
 8026d9a:	603b      	str	r3, [r7, #0]
    node=root;
 8026d9c:	687b      	ldr	r3, [r7, #4]
 8026d9e:	603b      	str	r3, [r7, #0]
    return node;
 8026da0:	683b      	ldr	r3, [r7, #0]
}
 8026da2:	4618      	mov	r0, r3
 8026da4:	370c      	adds	r7, #12
 8026da6:	46bd      	mov	sp, r7
 8026da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dac:	4770      	bx	lr

08026dae <tos_Notification_CreateNode>:

tos_Notification * tos_Notification_CreateNode(uint16_t index){
 8026dae:	b580      	push	{r7, lr}
 8026db0:	b084      	sub	sp, #16
 8026db2:	af00      	add	r7, sp, #0
 8026db4:	4603      	mov	r3, r0
 8026db6:	80fb      	strh	r3, [r7, #6]
	tos_Notification * node;
	node=(tos_Notification *)malloc(sizeof(tos_Notification));
 8026db8:	2010      	movs	r0, #16
 8026dba:	f000 fa23 	bl	8027204 <malloc>
 8026dbe:	4603      	mov	r3, r0
 8026dc0:	60fb      	str	r3, [r7, #12]
	if(node){
 8026dc2:	68fb      	ldr	r3, [r7, #12]
 8026dc4:	2b00      	cmp	r3, #0
 8026dc6:	d005      	beq.n	8026dd4 <tos_Notification_CreateNode+0x26>
		node->index=index;
 8026dc8:	68fb      	ldr	r3, [r7, #12]
 8026dca:	88fa      	ldrh	r2, [r7, #6]
 8026dcc:	811a      	strh	r2, [r3, #8]
		node->next=NULL;
 8026dce:	68fb      	ldr	r3, [r7, #12]
 8026dd0:	2200      	movs	r2, #0
 8026dd2:	60da      	str	r2, [r3, #12]
	}
	return node;
 8026dd4:	68fb      	ldr	r3, [r7, #12]
}
 8026dd6:	4618      	mov	r0, r3
 8026dd8:	3710      	adds	r7, #16
 8026dda:	46bd      	mov	sp, r7
 8026ddc:	bd80      	pop	{r7, pc}

08026dde <tos_Notification_RemoveNode>:

void tos_Notification_RemoveNode(tos_Notification *previous,tos_Notification *node){
 8026dde:	b580      	push	{r7, lr}
 8026de0:	b082      	sub	sp, #8
 8026de2:	af00      	add	r7, sp, #0
 8026de4:	6078      	str	r0, [r7, #4]
 8026de6:	6039      	str	r1, [r7, #0]

	if(!node){
 8026de8:	683b      	ldr	r3, [r7, #0]
 8026dea:	2b00      	cmp	r3, #0
 8026dec:	d00b      	beq.n	8026e06 <tos_Notification_RemoveNode+0x28>
		return;
	}
	if(previous){
 8026dee:	687b      	ldr	r3, [r7, #4]
 8026df0:	2b00      	cmp	r3, #0
 8026df2:	d003      	beq.n	8026dfc <tos_Notification_RemoveNode+0x1e>
		previous->next=node->next;
 8026df4:	683b      	ldr	r3, [r7, #0]
 8026df6:	68da      	ldr	r2, [r3, #12]
 8026df8:	687b      	ldr	r3, [r7, #4]
 8026dfa:	60da      	str	r2, [r3, #12]
	}
	free(node);
 8026dfc:	6838      	ldr	r0, [r7, #0]
 8026dfe:	f000 fa09 	bl	8027214 <free>
	return;
 8026e02:	bf00      	nop
 8026e04:	e000      	b.n	8026e08 <tos_Notification_RemoveNode+0x2a>
		return;
 8026e06:	bf00      	nop
}
 8026e08:	3708      	adds	r7, #8
 8026e0a:	46bd      	mov	sp, r7
 8026e0c:	bd80      	pop	{r7, pc}

08026e0e <tos_NotificationGetSize>:
		tmp=tmp->next;
	}
	return;
}

uint8_t tos_NotificationGetSize(tos_Notification * root){
 8026e0e:	b480      	push	{r7}
 8026e10:	b085      	sub	sp, #20
 8026e12:	af00      	add	r7, sp, #0
 8026e14:	6078      	str	r0, [r7, #4]
	tos_Notification * tmp=root;
 8026e16:	687b      	ldr	r3, [r7, #4]
 8026e18:	60fb      	str	r3, [r7, #12]
	while(tmp){
 8026e1a:	e00c      	b.n	8026e36 <tos_NotificationGetSize+0x28>
    if(tmp->next==NULL)	return (tmp->index+1);
 8026e1c:	68fb      	ldr	r3, [r7, #12]
 8026e1e:	68db      	ldr	r3, [r3, #12]
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	d105      	bne.n	8026e30 <tos_NotificationGetSize+0x22>
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	891b      	ldrh	r3, [r3, #8]
 8026e28:	b2db      	uxtb	r3, r3
 8026e2a:	3301      	adds	r3, #1
 8026e2c:	b2db      	uxtb	r3, r3
 8026e2e:	e005      	b.n	8026e3c <tos_NotificationGetSize+0x2e>
	tmp=tmp->next;
 8026e30:	68fb      	ldr	r3, [r7, #12]
 8026e32:	68db      	ldr	r3, [r3, #12]
 8026e34:	60fb      	str	r3, [r7, #12]
	while(tmp){
 8026e36:	68fb      	ldr	r3, [r7, #12]
 8026e38:	2b00      	cmp	r3, #0
 8026e3a:	d1ef      	bne.n	8026e1c <tos_NotificationGetSize+0xe>
	}

}
 8026e3c:	4618      	mov	r0, r3
 8026e3e:	3714      	adds	r7, #20
 8026e40:	46bd      	mov	sp, r7
 8026e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e46:	4770      	bx	lr

08026e48 <tos_NotificationGetItem>:


tos_Notification *tos_NotificationGetItem(tos_Notification * root,uint16_t itemIndex){
 8026e48:	b580      	push	{r7, lr}
 8026e4a:	b084      	sub	sp, #16
 8026e4c:	af00      	add	r7, sp, #0
 8026e4e:	6078      	str	r0, [r7, #4]
 8026e50:	460b      	mov	r3, r1
 8026e52:	807b      	strh	r3, [r7, #2]
		tos_Notification * tmp=root;
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	60fb      	str	r3, [r7, #12]
	if( itemIndex<tos_NotificationGetSize(root)){
 8026e58:	6878      	ldr	r0, [r7, #4]
 8026e5a:	f7ff ffd8 	bl	8026e0e <tos_NotificationGetSize>
 8026e5e:	4603      	mov	r3, r0
 8026e60:	b29b      	uxth	r3, r3
 8026e62:	887a      	ldrh	r2, [r7, #2]
 8026e64:	429a      	cmp	r2, r3
 8026e66:	d20d      	bcs.n	8026e84 <tos_NotificationGetItem+0x3c>
		while(tmp){
 8026e68:	e009      	b.n	8026e7e <tos_NotificationGetItem+0x36>
	if(itemIndex==tmp->index){
 8026e6a:	68fb      	ldr	r3, [r7, #12]
 8026e6c:	891b      	ldrh	r3, [r3, #8]
 8026e6e:	887a      	ldrh	r2, [r7, #2]
 8026e70:	429a      	cmp	r2, r3
 8026e72:	d101      	bne.n	8026e78 <tos_NotificationGetItem+0x30>
		return tmp;
 8026e74:	68fb      	ldr	r3, [r7, #12]
 8026e76:	e006      	b.n	8026e86 <tos_NotificationGetItem+0x3e>
	}tmp=tmp->next;
 8026e78:	68fb      	ldr	r3, [r7, #12]
 8026e7a:	68db      	ldr	r3, [r3, #12]
 8026e7c:	60fb      	str	r3, [r7, #12]
		while(tmp){
 8026e7e:	68fb      	ldr	r3, [r7, #12]
 8026e80:	2b00      	cmp	r3, #0
 8026e82:	d1f2      	bne.n	8026e6a <tos_NotificationGetItem+0x22>
	}}
        return NULL;
 8026e84:	2300      	movs	r3, #0
}
 8026e86:	4618      	mov	r0, r3
 8026e88:	3710      	adds	r7, #16
 8026e8a:	46bd      	mov	sp, r7
 8026e8c:	bd80      	pop	{r7, pc}

08026e8e <tos_NotificationPushItem>:


tos_Notification * tos_NotificationPushItem(tos_Notification * node,char *appName,char *notification){
 8026e8e:	b580      	push	{r7, lr}
 8026e90:	b086      	sub	sp, #24
 8026e92:	af00      	add	r7, sp, #0
 8026e94:	60f8      	str	r0, [r7, #12]
 8026e96:	60b9      	str	r1, [r7, #8]
 8026e98:	607a      	str	r2, [r7, #4]
		tos_Notification * tmp;
		tmp=tos_Notification_CreateNode(tos_NotificationGetSize(node));
 8026e9a:	68f8      	ldr	r0, [r7, #12]
 8026e9c:	f7ff ffb7 	bl	8026e0e <tos_NotificationGetSize>
 8026ea0:	4603      	mov	r3, r0
 8026ea2:	b29b      	uxth	r3, r3
 8026ea4:	4618      	mov	r0, r3
 8026ea6:	f7ff ff82 	bl	8026dae <tos_Notification_CreateNode>
 8026eaa:	6178      	str	r0, [r7, #20]
		if(appName!=NULL)tmp->appName =appName;
 8026eac:	68bb      	ldr	r3, [r7, #8]
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d002      	beq.n	8026eb8 <tos_NotificationPushItem+0x2a>
 8026eb2:	697b      	ldr	r3, [r7, #20]
 8026eb4:	68ba      	ldr	r2, [r7, #8]
 8026eb6:	601a      	str	r2, [r3, #0]
		if(notification!=NULL) tmp->appNot =notification;
 8026eb8:	687b      	ldr	r3, [r7, #4]
 8026eba:	2b00      	cmp	r3, #0
 8026ebc:	d002      	beq.n	8026ec4 <tos_NotificationPushItem+0x36>
 8026ebe:	697b      	ldr	r3, [r7, #20]
 8026ec0:	687a      	ldr	r2, [r7, #4]
 8026ec2:	605a      	str	r2, [r3, #4]
        node->next=tmp;
 8026ec4:	68fb      	ldr	r3, [r7, #12]
 8026ec6:	697a      	ldr	r2, [r7, #20]
 8026ec8:	60da      	str	r2, [r3, #12]
        node=node->next;
 8026eca:	68fb      	ldr	r3, [r7, #12]
 8026ecc:	68db      	ldr	r3, [r3, #12]
 8026ece:	60fb      	str	r3, [r7, #12]
        return node;
 8026ed0:	68fb      	ldr	r3, [r7, #12]

}
 8026ed2:	4618      	mov	r0, r3
 8026ed4:	3718      	adds	r7, #24
 8026ed6:	46bd      	mov	sp, r7
 8026ed8:	bd80      	pop	{r7, pc}

08026eda <tos_NotificationDelItem>:

void tos_NotificationDelItem(tos_Notification *root,tos_Notification *node,uint16_t index){
 8026eda:	b580      	push	{r7, lr}
 8026edc:	b086      	sub	sp, #24
 8026ede:	af00      	add	r7, sp, #0
 8026ee0:	60f8      	str	r0, [r7, #12]
 8026ee2:	60b9      	str	r1, [r7, #8]
 8026ee4:	4613      	mov	r3, r2
 8026ee6:	80fb      	strh	r3, [r7, #6]
		node=root;
 8026ee8:	68fb      	ldr	r3, [r7, #12]
 8026eea:	60bb      	str	r3, [r7, #8]
		tos_Notification * tmp=NULL;
 8026eec:	2300      	movs	r3, #0
 8026eee:	617b      	str	r3, [r7, #20]
		while(node){
 8026ef0:	e014      	b.n	8026f1c <tos_NotificationDelItem+0x42>
			if(node->index==index){
 8026ef2:	68bb      	ldr	r3, [r7, #8]
 8026ef4:	891b      	ldrh	r3, [r3, #8]
 8026ef6:	88fa      	ldrh	r2, [r7, #6]
 8026ef8:	429a      	cmp	r2, r3
 8026efa:	d10a      	bne.n	8026f12 <tos_NotificationDelItem+0x38>
				if(tmp==NULL){
 8026efc:	697b      	ldr	r3, [r7, #20]
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	d102      	bne.n	8026f08 <tos_NotificationDelItem+0x2e>
					root=node->next;
 8026f02:	68bb      	ldr	r3, [r7, #8]
 8026f04:	68db      	ldr	r3, [r3, #12]
 8026f06:	60fb      	str	r3, [r7, #12]
				}
				tos_Notification_RemoveNode(tmp,node);
 8026f08:	68b9      	ldr	r1, [r7, #8]
 8026f0a:	6978      	ldr	r0, [r7, #20]
 8026f0c:	f7ff ff67 	bl	8026dde <tos_Notification_RemoveNode>
				break;
 8026f10:	e007      	b.n	8026f22 <tos_NotificationDelItem+0x48>
			}
			tmp=node;
 8026f12:	68bb      	ldr	r3, [r7, #8]
 8026f14:	617b      	str	r3, [r7, #20]
			node=node->next;
 8026f16:	68bb      	ldr	r3, [r7, #8]
 8026f18:	68db      	ldr	r3, [r3, #12]
 8026f1a:	60bb      	str	r3, [r7, #8]
		while(node){
 8026f1c:	68bb      	ldr	r3, [r7, #8]
 8026f1e:	2b00      	cmp	r3, #0
 8026f20:	d1e7      	bne.n	8026ef2 <tos_NotificationDelItem+0x18>

		}

}
 8026f22:	bf00      	nop
 8026f24:	3718      	adds	r7, #24
 8026f26:	46bd      	mov	sp, r7
 8026f28:	bd80      	pop	{r7, pc}
	...

08026f2c <tos_RTC_GetTime>:
	tos_RTC_SetDate(hrtc,tos_Flash_GetYear(),tos_Flash_GetMonth(),tos_Flash_GetDate());
	tos_RTC_SetTime(hrtc,tos_Flash_GetHours(),tos_Flash_GetMinutes(),tos_Flash_GetSeconds());

}

  void tos_RTC_GetTime(RTC_HandleTypeDef *hrtc, uint8_t Screen){
 8026f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026f2e:	b083      	sub	sp, #12
 8026f30:	af00      	add	r7, sp, #0
 8026f32:	6078      	str	r0, [r7, #4]
 8026f34:	460b      	mov	r3, r1
 8026f36:	70fb      	strb	r3, [r7, #3]

			  HAL_RTC_GetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8026f38:	2200      	movs	r2, #0
 8026f3a:	4932      	ldr	r1, [pc, #200]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f3c:	6878      	ldr	r0, [r7, #4]
 8026f3e:	f7dc fa4b 	bl	80033d8 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8026f42:	2200      	movs	r2, #0
 8026f44:	4930      	ldr	r1, [pc, #192]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f46:	6878      	ldr	r0, [r7, #4]
 8026f48:	f7dc fb4b 	bl	80035e2 <HAL_RTC_GetDate>
				switch(Screen){
 8026f4c:	78fb      	ldrb	r3, [r7, #3]
 8026f4e:	2b00      	cmp	r3, #0
 8026f50:	d002      	beq.n	8026f58 <tos_RTC_GetTime+0x2c>
 8026f52:	2b01      	cmp	r3, #1
 8026f54:	d020      	beq.n	8026f98 <tos_RTC_GetTime+0x6c>
 8026f56:	e03f      	b.n	8026fd8 <tos_RTC_GetTime+0xac>
				case TOS_SCREEN_MAIN_: MainScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026f58:	4b2a      	ldr	r3, [pc, #168]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f5a:	7818      	ldrb	r0, [r3, #0]
 8026f5c:	4b29      	ldr	r3, [pc, #164]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f5e:	7859      	ldrb	r1, [r3, #1]
 8026f60:	4b28      	ldr	r3, [pc, #160]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f62:	789b      	ldrb	r3, [r3, #2]
 8026f64:	461a      	mov	r2, r3
 8026f66:	f7fa f99d 	bl	80212a4 <MainScreen_SetTime>
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026f6a:	4b27      	ldr	r3, [pc, #156]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f6c:	78dc      	ldrb	r4, [r3, #3]
 8026f6e:	4b26      	ldr	r3, [pc, #152]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f70:	785d      	ldrb	r5, [r3, #1]
 8026f72:	4b25      	ldr	r3, [pc, #148]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f74:	789e      	ldrb	r6, [r3, #2]
 8026f76:	4b24      	ldr	r3, [pc, #144]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f78:	78d8      	ldrb	r0, [r3, #3]
 8026f7a:	4b23      	ldr	r3, [pc, #140]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f7c:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));
 8026f7e:	4b22      	ldr	r3, [pc, #136]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026f80:	789b      	ldrb	r3, [r3, #2]
				  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026f82:	b29b      	uxth	r3, r3
 8026f84:	461a      	mov	r2, r3
 8026f86:	f000 f88b 	bl	80270a0 <weekDayFinder>
 8026f8a:	4603      	mov	r3, r0
 8026f8c:	4632      	mov	r2, r6
 8026f8e:	4629      	mov	r1, r5
 8026f90:	4620      	mov	r0, r4
 8026f92:	f7fa f9a5 	bl	80212e0 <MainScreen_SetDate>
				  break;
 8026f96:	e032      	b.n	8026ffe <tos_RTC_GetTime+0xd2>
				case TOS_SCREEN_SLEEPMODE_: SleepModeScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026f98:	4b1a      	ldr	r3, [pc, #104]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f9a:	7818      	ldrb	r0, [r3, #0]
 8026f9c:	4b19      	ldr	r3, [pc, #100]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026f9e:	7859      	ldrb	r1, [r3, #1]
 8026fa0:	4b18      	ldr	r3, [pc, #96]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026fa2:	789b      	ldrb	r3, [r3, #2]
 8026fa4:	461a      	mov	r2, r3
 8026fa6:	f7fe f825 	bl	8024ff4 <SleepModeScreen_SetTime>
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026faa:	4b17      	ldr	r3, [pc, #92]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fac:	78dc      	ldrb	r4, [r3, #3]
 8026fae:	4b16      	ldr	r3, [pc, #88]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fb0:	785d      	ldrb	r5, [r3, #1]
 8026fb2:	4b15      	ldr	r3, [pc, #84]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fb4:	789e      	ldrb	r6, [r3, #2]
 8026fb6:	4b14      	ldr	r3, [pc, #80]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fb8:	78d8      	ldrb	r0, [r3, #3]
 8026fba:	4b13      	ldr	r3, [pc, #76]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fbc:	7859      	ldrb	r1, [r3, #1]
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8026fbe:	4b12      	ldr	r3, [pc, #72]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fc0:	789b      	ldrb	r3, [r3, #2]
				SleepModeScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
 8026fc2:	b29b      	uxth	r3, r3
 8026fc4:	461a      	mov	r2, r3
 8026fc6:	f000 f86b 	bl	80270a0 <weekDayFinder>
 8026fca:	4603      	mov	r3, r0
 8026fcc:	4632      	mov	r2, r6
 8026fce:	4629      	mov	r1, r5
 8026fd0:	4620      	mov	r0, r4
 8026fd2:	f7fe f82d 	bl	8025030 <SleepModeScreen_SetDate>
									  weekDayFinder(myDate.Year,myDate.Month,myDate.Date)); break;
 8026fd6:	e012      	b.n	8026ffe <tos_RTC_GetTime+0xd2>
				default:
					  SettingsScreen_SetTime(myTime.Hours,myTime.Minutes,myTime.Seconds);
 8026fd8:	4b0a      	ldr	r3, [pc, #40]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026fda:	7818      	ldrb	r0, [r3, #0]
 8026fdc:	4b09      	ldr	r3, [pc, #36]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026fde:	7859      	ldrb	r1, [r3, #1]
 8026fe0:	4b08      	ldr	r3, [pc, #32]	; (8027004 <tos_RTC_GetTime+0xd8>)
 8026fe2:	789b      	ldrb	r3, [r3, #2]
 8026fe4:	461a      	mov	r2, r3
 8026fe6:	f7fd fd1b 	bl	8024a20 <SettingsScreen_SetTime>
					  SettingsScreen_SetDate(myDate.Year,myDate.Month,myDate.Date);
 8026fea:	4b07      	ldr	r3, [pc, #28]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026fec:	78d8      	ldrb	r0, [r3, #3]
 8026fee:	4b06      	ldr	r3, [pc, #24]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026ff0:	7859      	ldrb	r1, [r3, #1]
 8026ff2:	4b05      	ldr	r3, [pc, #20]	; (8027008 <tos_RTC_GetTime+0xdc>)
 8026ff4:	789b      	ldrb	r3, [r3, #2]
 8026ff6:	461a      	mov	r2, r3
 8026ff8:	f7fd fd3a 	bl	8024a70 <SettingsScreen_SetDate>
					  return;
 8026ffc:	bf00      	nop
				}

			/*  MainScreen_SetDate(myDate.Year,myDate.Month,myDate.Date,
					  weekDayFinder(myDate.Year,myDate.Month,myDate.Date));*/
  }
 8026ffe:	370c      	adds	r7, #12
 8027000:	46bd      	mov	sp, r7
 8027002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027004:	20006898 	.word	0x20006898
 8027008:	200068ac 	.word	0x200068ac

0802700c <tos_RTC_SetTime>:

  void tos_RTC_SetTime(RTC_HandleTypeDef *hrtc,uint8_t setHours,uint8_t setMins,uint8_t setSecs){
 802700c:	b580      	push	{r7, lr}
 802700e:	b082      	sub	sp, #8
 8027010:	af00      	add	r7, sp, #0
 8027012:	6078      	str	r0, [r7, #4]
 8027014:	4608      	mov	r0, r1
 8027016:	4611      	mov	r1, r2
 8027018:	461a      	mov	r2, r3
 802701a:	4603      	mov	r3, r0
 802701c:	70fb      	strb	r3, [r7, #3]
 802701e:	460b      	mov	r3, r1
 8027020:	70bb      	strb	r3, [r7, #2]
 8027022:	4613      	mov	r3, r2
 8027024:	707b      	strb	r3, [r7, #1]
	  myTime.Hours = setHours;
 8027026:	4a09      	ldr	r2, [pc, #36]	; (802704c <tos_RTC_SetTime+0x40>)
 8027028:	78fb      	ldrb	r3, [r7, #3]
 802702a:	7013      	strb	r3, [r2, #0]
	  myTime.Minutes = setMins;
 802702c:	4a07      	ldr	r2, [pc, #28]	; (802704c <tos_RTC_SetTime+0x40>)
 802702e:	78bb      	ldrb	r3, [r7, #2]
 8027030:	7053      	strb	r3, [r2, #1]
	  myTime.Seconds = setSecs;
 8027032:	4a06      	ldr	r2, [pc, #24]	; (802704c <tos_RTC_SetTime+0x40>)
 8027034:	787b      	ldrb	r3, [r7, #1]
 8027036:	7093      	strb	r3, [r2, #2]
	  HAL_RTC_SetTime(hrtc,&myTime,RTC_FORMAT_BIN);
 8027038:	2200      	movs	r2, #0
 802703a:	4904      	ldr	r1, [pc, #16]	; (802704c <tos_RTC_SetTime+0x40>)
 802703c:	6878      	ldr	r0, [r7, #4]
 802703e:	f7dc f90e 	bl	800325e <HAL_RTC_SetTime>
  }
 8027042:	bf00      	nop
 8027044:	3708      	adds	r7, #8
 8027046:	46bd      	mov	sp, r7
 8027048:	bd80      	pop	{r7, pc}
 802704a:	bf00      	nop
 802704c:	20006898 	.word	0x20006898

08027050 <tos_RTC_SetDate>:

  void tos_RTC_SetDate(RTC_HandleTypeDef *hrtc,uint8_t setYear,uint8_t setMonth,uint8_t setDate){
 8027050:	b580      	push	{r7, lr}
 8027052:	b082      	sub	sp, #8
 8027054:	af00      	add	r7, sp, #0
 8027056:	6078      	str	r0, [r7, #4]
 8027058:	4608      	mov	r0, r1
 802705a:	4611      	mov	r1, r2
 802705c:	461a      	mov	r2, r3
 802705e:	4603      	mov	r3, r0
 8027060:	70fb      	strb	r3, [r7, #3]
 8027062:	460b      	mov	r3, r1
 8027064:	70bb      	strb	r3, [r7, #2]
 8027066:	4613      	mov	r3, r2
 8027068:	707b      	strb	r3, [r7, #1]
	  if(setDate>31 || setMonth>12) return;
 802706a:	787b      	ldrb	r3, [r7, #1]
 802706c:	2b1f      	cmp	r3, #31
 802706e:	d811      	bhi.n	8027094 <tos_RTC_SetDate+0x44>
 8027070:	78bb      	ldrb	r3, [r7, #2]
 8027072:	2b0c      	cmp	r3, #12
 8027074:	d80e      	bhi.n	8027094 <tos_RTC_SetDate+0x44>
	  myDate.Month = setMonth;
 8027076:	4a09      	ldr	r2, [pc, #36]	; (802709c <tos_RTC_SetDate+0x4c>)
 8027078:	78bb      	ldrb	r3, [r7, #2]
 802707a:	7053      	strb	r3, [r2, #1]
	  myDate.Date = setDate;
 802707c:	4a07      	ldr	r2, [pc, #28]	; (802709c <tos_RTC_SetDate+0x4c>)
 802707e:	787b      	ldrb	r3, [r7, #1]
 8027080:	7093      	strb	r3, [r2, #2]
	  myDate.Year = setYear;
 8027082:	4a06      	ldr	r2, [pc, #24]	; (802709c <tos_RTC_SetDate+0x4c>)
 8027084:	78fb      	ldrb	r3, [r7, #3]
 8027086:	70d3      	strb	r3, [r2, #3]
	  HAL_RTC_SetDate(hrtc,&myDate,RTC_FORMAT_BIN);
 8027088:	2200      	movs	r2, #0
 802708a:	4904      	ldr	r1, [pc, #16]	; (802709c <tos_RTC_SetDate+0x4c>)
 802708c:	6878      	ldr	r0, [r7, #4]
 802708e:	f7dc fa01 	bl	8003494 <HAL_RTC_SetDate>
 8027092:	e000      	b.n	8027096 <tos_RTC_SetDate+0x46>
	  if(setDate>31 || setMonth>12) return;
 8027094:	bf00      	nop
  }
 8027096:	3708      	adds	r7, #8
 8027098:	46bd      	mov	sp, r7
 802709a:	bd80      	pop	{r7, pc}
 802709c:	200068ac 	.word	0x200068ac

080270a0 <weekDayFinder>:



char * weekDayFinder(uint8_t getYear,uint8_t getMonth,uint16_t getDate){
 80270a0:	b590      	push	{r4, r7, lr}
 80270a2:	b087      	sub	sp, #28
 80270a4:	af00      	add	r7, sp, #0
 80270a6:	4603      	mov	r3, r0
 80270a8:	71fb      	strb	r3, [r7, #7]
 80270aa:	460b      	mov	r3, r1
 80270ac:	71bb      	strb	r3, [r7, #6]
 80270ae:	4613      	mov	r3, r2
 80270b0:	80bb      	strh	r3, [r7, #4]
	getYear=getYear+2000;
 80270b2:	79fb      	ldrb	r3, [r7, #7]
 80270b4:	3b30      	subs	r3, #48	; 0x30
 80270b6:	71fb      	strb	r3, [r7, #7]
	static uint8_t t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	getYear-= getMonth < 3;
 80270b8:	79bb      	ldrb	r3, [r7, #6]
 80270ba:	2b02      	cmp	r3, #2
 80270bc:	bf94      	ite	ls
 80270be:	2301      	movls	r3, #1
 80270c0:	2300      	movhi	r3, #0
 80270c2:	b2db      	uxtb	r3, r3
 80270c4:	461a      	mov	r2, r3
 80270c6:	79fb      	ldrb	r3, [r7, #7]
 80270c8:	1a9b      	subs	r3, r3, r2
 80270ca:	71fb      	strb	r3, [r7, #7]
	double weekDayTmp =(double)((getYear + (getYear/4) - (getYear/100) + (getYear/400) + t[getMonth-1] + getDate) % 7);
 80270cc:	79fb      	ldrb	r3, [r7, #7]
 80270ce:	79fa      	ldrb	r2, [r7, #7]
 80270d0:	0892      	lsrs	r2, r2, #2
 80270d2:	b2d2      	uxtb	r2, r2
 80270d4:	4413      	add	r3, r2
 80270d6:	79fa      	ldrb	r2, [r7, #7]
 80270d8:	492a      	ldr	r1, [pc, #168]	; (8027184 <weekDayFinder+0xe4>)
 80270da:	fba1 1202 	umull	r1, r2, r1, r2
 80270de:	0952      	lsrs	r2, r2, #5
 80270e0:	b2d2      	uxtb	r2, r2
 80270e2:	1a9a      	subs	r2, r3, r2
 80270e4:	79fb      	ldrb	r3, [r7, #7]
 80270e6:	4927      	ldr	r1, [pc, #156]	; (8027184 <weekDayFinder+0xe4>)
 80270e8:	fb81 0103 	smull	r0, r1, r1, r3
 80270ec:	11c9      	asrs	r1, r1, #7
 80270ee:	17db      	asrs	r3, r3, #31
 80270f0:	1acb      	subs	r3, r1, r3
 80270f2:	4413      	add	r3, r2
 80270f4:	79ba      	ldrb	r2, [r7, #6]
 80270f6:	3a01      	subs	r2, #1
 80270f8:	4923      	ldr	r1, [pc, #140]	; (8027188 <weekDayFinder+0xe8>)
 80270fa:	5c8a      	ldrb	r2, [r1, r2]
 80270fc:	441a      	add	r2, r3
 80270fe:	88bb      	ldrh	r3, [r7, #4]
 8027100:	441a      	add	r2, r3
 8027102:	4b22      	ldr	r3, [pc, #136]	; (802718c <weekDayFinder+0xec>)
 8027104:	fb83 1302 	smull	r1, r3, r3, r2
 8027108:	4413      	add	r3, r2
 802710a:	1099      	asrs	r1, r3, #2
 802710c:	17d3      	asrs	r3, r2, #31
 802710e:	1ac9      	subs	r1, r1, r3
 8027110:	460b      	mov	r3, r1
 8027112:	00db      	lsls	r3, r3, #3
 8027114:	1a5b      	subs	r3, r3, r1
 8027116:	1ad1      	subs	r1, r2, r3
 8027118:	4608      	mov	r0, r1
 802711a:	f7d9 fa13 	bl	8000544 <__aeabi_i2d>
 802711e:	4603      	mov	r3, r0
 8027120:	460c      	mov	r4, r1
 8027122:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint8_t weekDay =tos_Rounding(weekDayTmp);
 8027126:	ed97 0b04 	vldr	d0, [r7, #16]
 802712a:	f7ff fc01 	bl	8026930 <tos_Rounding>
 802712e:	4603      	mov	r3, r0
 8027130:	73fb      	strb	r3, [r7, #15]


	switch(weekDay){
 8027132:	7bfb      	ldrb	r3, [r7, #15]
 8027134:	2b06      	cmp	r3, #6
 8027136:	d81f      	bhi.n	8027178 <weekDayFinder+0xd8>
 8027138:	a201      	add	r2, pc, #4	; (adr r2, 8027140 <weekDayFinder+0xa0>)
 802713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802713e:	bf00      	nop
 8027140:	0802715d 	.word	0x0802715d
 8027144:	08027161 	.word	0x08027161
 8027148:	08027165 	.word	0x08027165
 802714c:	08027169 	.word	0x08027169
 8027150:	0802716d 	.word	0x0802716d
 8027154:	08027171 	.word	0x08027171
 8027158:	08027175 	.word	0x08027175
	case 0: return "Pazartesi"; break;
 802715c:	4b0c      	ldr	r3, [pc, #48]	; (8027190 <weekDayFinder+0xf0>)
 802715e:	e00c      	b.n	802717a <weekDayFinder+0xda>
	case 1: return "Sali"; break;
 8027160:	4b0c      	ldr	r3, [pc, #48]	; (8027194 <weekDayFinder+0xf4>)
 8027162:	e00a      	b.n	802717a <weekDayFinder+0xda>
	case 2: return "Carsamba"; break;
 8027164:	4b0c      	ldr	r3, [pc, #48]	; (8027198 <weekDayFinder+0xf8>)
 8027166:	e008      	b.n	802717a <weekDayFinder+0xda>
	case 3: return "Persembe"; break;
 8027168:	4b0c      	ldr	r3, [pc, #48]	; (802719c <weekDayFinder+0xfc>)
 802716a:	e006      	b.n	802717a <weekDayFinder+0xda>
	case 4: return "Cuma"; break;
 802716c:	4b0c      	ldr	r3, [pc, #48]	; (80271a0 <weekDayFinder+0x100>)
 802716e:	e004      	b.n	802717a <weekDayFinder+0xda>
	case 5: return "Cumartesi"; break;
 8027170:	4b0c      	ldr	r3, [pc, #48]	; (80271a4 <weekDayFinder+0x104>)
 8027172:	e002      	b.n	802717a <weekDayFinder+0xda>
	case 6: return "Pazar"; break;
 8027174:	4b0c      	ldr	r3, [pc, #48]	; (80271a8 <weekDayFinder+0x108>)
 8027176:	e000      	b.n	802717a <weekDayFinder+0xda>
	default: return " ";
 8027178:	4b0c      	ldr	r3, [pc, #48]	; (80271ac <weekDayFinder+0x10c>)
	}

}
 802717a:	4618      	mov	r0, r3
 802717c:	371c      	adds	r7, #28
 802717e:	46bd      	mov	sp, r7
 8027180:	bd90      	pop	{r4, r7, pc}
 8027182:	bf00      	nop
 8027184:	51eb851f 	.word	0x51eb851f
 8027188:	2000284c 	.word	0x2000284c
 802718c:	92492493 	.word	0x92492493
 8027190:	0802a50c 	.word	0x0802a50c
 8027194:	0802a518 	.word	0x0802a518
 8027198:	0802a520 	.word	0x0802a520
 802719c:	0802a52c 	.word	0x0802a52c
 80271a0:	0802a538 	.word	0x0802a538
 80271a4:	0802a540 	.word	0x0802a540
 80271a8:	0802a54c 	.word	0x0802a54c
 80271ac:	0802a554 	.word	0x0802a554

080271b0 <__errno>:
 80271b0:	4b01      	ldr	r3, [pc, #4]	; (80271b8 <__errno+0x8>)
 80271b2:	6818      	ldr	r0, [r3, #0]
 80271b4:	4770      	bx	lr
 80271b6:	bf00      	nop
 80271b8:	20002858 	.word	0x20002858

080271bc <__libc_init_array>:
 80271bc:	b570      	push	{r4, r5, r6, lr}
 80271be:	4e0d      	ldr	r6, [pc, #52]	; (80271f4 <__libc_init_array+0x38>)
 80271c0:	4c0d      	ldr	r4, [pc, #52]	; (80271f8 <__libc_init_array+0x3c>)
 80271c2:	1ba4      	subs	r4, r4, r6
 80271c4:	10a4      	asrs	r4, r4, #2
 80271c6:	2500      	movs	r5, #0
 80271c8:	42a5      	cmp	r5, r4
 80271ca:	d109      	bne.n	80271e0 <__libc_init_array+0x24>
 80271cc:	4e0b      	ldr	r6, [pc, #44]	; (80271fc <__libc_init_array+0x40>)
 80271ce:	4c0c      	ldr	r4, [pc, #48]	; (8027200 <__libc_init_array+0x44>)
 80271d0:	f002 fd4a 	bl	8029c68 <_init>
 80271d4:	1ba4      	subs	r4, r4, r6
 80271d6:	10a4      	asrs	r4, r4, #2
 80271d8:	2500      	movs	r5, #0
 80271da:	42a5      	cmp	r5, r4
 80271dc:	d105      	bne.n	80271ea <__libc_init_array+0x2e>
 80271de:	bd70      	pop	{r4, r5, r6, pc}
 80271e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80271e4:	4798      	blx	r3
 80271e6:	3501      	adds	r5, #1
 80271e8:	e7ee      	b.n	80271c8 <__libc_init_array+0xc>
 80271ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80271ee:	4798      	blx	r3
 80271f0:	3501      	adds	r5, #1
 80271f2:	e7f2      	b.n	80271da <__libc_init_array+0x1e>
 80271f4:	080452b4 	.word	0x080452b4
 80271f8:	080452b4 	.word	0x080452b4
 80271fc:	080452b4 	.word	0x080452b4
 8027200:	080452b8 	.word	0x080452b8

08027204 <malloc>:
 8027204:	4b02      	ldr	r3, [pc, #8]	; (8027210 <malloc+0xc>)
 8027206:	4601      	mov	r1, r0
 8027208:	6818      	ldr	r0, [r3, #0]
 802720a:	f000 b86d 	b.w	80272e8 <_malloc_r>
 802720e:	bf00      	nop
 8027210:	20002858 	.word	0x20002858

08027214 <free>:
 8027214:	4b02      	ldr	r3, [pc, #8]	; (8027220 <free+0xc>)
 8027216:	4601      	mov	r1, r0
 8027218:	6818      	ldr	r0, [r3, #0]
 802721a:	f000 b817 	b.w	802724c <_free_r>
 802721e:	bf00      	nop
 8027220:	20002858 	.word	0x20002858

08027224 <memcpy>:
 8027224:	b510      	push	{r4, lr}
 8027226:	1e43      	subs	r3, r0, #1
 8027228:	440a      	add	r2, r1
 802722a:	4291      	cmp	r1, r2
 802722c:	d100      	bne.n	8027230 <memcpy+0xc>
 802722e:	bd10      	pop	{r4, pc}
 8027230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027238:	e7f7      	b.n	802722a <memcpy+0x6>

0802723a <memset>:
 802723a:	4402      	add	r2, r0
 802723c:	4603      	mov	r3, r0
 802723e:	4293      	cmp	r3, r2
 8027240:	d100      	bne.n	8027244 <memset+0xa>
 8027242:	4770      	bx	lr
 8027244:	f803 1b01 	strb.w	r1, [r3], #1
 8027248:	e7f9      	b.n	802723e <memset+0x4>
	...

0802724c <_free_r>:
 802724c:	b538      	push	{r3, r4, r5, lr}
 802724e:	4605      	mov	r5, r0
 8027250:	2900      	cmp	r1, #0
 8027252:	d045      	beq.n	80272e0 <_free_r+0x94>
 8027254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027258:	1f0c      	subs	r4, r1, #4
 802725a:	2b00      	cmp	r3, #0
 802725c:	bfb8      	it	lt
 802725e:	18e4      	addlt	r4, r4, r3
 8027260:	f001 fbc4 	bl	80289ec <__malloc_lock>
 8027264:	4a1f      	ldr	r2, [pc, #124]	; (80272e4 <_free_r+0x98>)
 8027266:	6813      	ldr	r3, [r2, #0]
 8027268:	4610      	mov	r0, r2
 802726a:	b933      	cbnz	r3, 802727a <_free_r+0x2e>
 802726c:	6063      	str	r3, [r4, #4]
 802726e:	6014      	str	r4, [r2, #0]
 8027270:	4628      	mov	r0, r5
 8027272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027276:	f001 bbba 	b.w	80289ee <__malloc_unlock>
 802727a:	42a3      	cmp	r3, r4
 802727c:	d90c      	bls.n	8027298 <_free_r+0x4c>
 802727e:	6821      	ldr	r1, [r4, #0]
 8027280:	1862      	adds	r2, r4, r1
 8027282:	4293      	cmp	r3, r2
 8027284:	bf04      	itt	eq
 8027286:	681a      	ldreq	r2, [r3, #0]
 8027288:	685b      	ldreq	r3, [r3, #4]
 802728a:	6063      	str	r3, [r4, #4]
 802728c:	bf04      	itt	eq
 802728e:	1852      	addeq	r2, r2, r1
 8027290:	6022      	streq	r2, [r4, #0]
 8027292:	6004      	str	r4, [r0, #0]
 8027294:	e7ec      	b.n	8027270 <_free_r+0x24>
 8027296:	4613      	mov	r3, r2
 8027298:	685a      	ldr	r2, [r3, #4]
 802729a:	b10a      	cbz	r2, 80272a0 <_free_r+0x54>
 802729c:	42a2      	cmp	r2, r4
 802729e:	d9fa      	bls.n	8027296 <_free_r+0x4a>
 80272a0:	6819      	ldr	r1, [r3, #0]
 80272a2:	1858      	adds	r0, r3, r1
 80272a4:	42a0      	cmp	r0, r4
 80272a6:	d10b      	bne.n	80272c0 <_free_r+0x74>
 80272a8:	6820      	ldr	r0, [r4, #0]
 80272aa:	4401      	add	r1, r0
 80272ac:	1858      	adds	r0, r3, r1
 80272ae:	4282      	cmp	r2, r0
 80272b0:	6019      	str	r1, [r3, #0]
 80272b2:	d1dd      	bne.n	8027270 <_free_r+0x24>
 80272b4:	6810      	ldr	r0, [r2, #0]
 80272b6:	6852      	ldr	r2, [r2, #4]
 80272b8:	605a      	str	r2, [r3, #4]
 80272ba:	4401      	add	r1, r0
 80272bc:	6019      	str	r1, [r3, #0]
 80272be:	e7d7      	b.n	8027270 <_free_r+0x24>
 80272c0:	d902      	bls.n	80272c8 <_free_r+0x7c>
 80272c2:	230c      	movs	r3, #12
 80272c4:	602b      	str	r3, [r5, #0]
 80272c6:	e7d3      	b.n	8027270 <_free_r+0x24>
 80272c8:	6820      	ldr	r0, [r4, #0]
 80272ca:	1821      	adds	r1, r4, r0
 80272cc:	428a      	cmp	r2, r1
 80272ce:	bf04      	itt	eq
 80272d0:	6811      	ldreq	r1, [r2, #0]
 80272d2:	6852      	ldreq	r2, [r2, #4]
 80272d4:	6062      	str	r2, [r4, #4]
 80272d6:	bf04      	itt	eq
 80272d8:	1809      	addeq	r1, r1, r0
 80272da:	6021      	streq	r1, [r4, #0]
 80272dc:	605c      	str	r4, [r3, #4]
 80272de:	e7c7      	b.n	8027270 <_free_r+0x24>
 80272e0:	bd38      	pop	{r3, r4, r5, pc}
 80272e2:	bf00      	nop
 80272e4:	200068b0 	.word	0x200068b0

080272e8 <_malloc_r>:
 80272e8:	b570      	push	{r4, r5, r6, lr}
 80272ea:	1ccd      	adds	r5, r1, #3
 80272ec:	f025 0503 	bic.w	r5, r5, #3
 80272f0:	3508      	adds	r5, #8
 80272f2:	2d0c      	cmp	r5, #12
 80272f4:	bf38      	it	cc
 80272f6:	250c      	movcc	r5, #12
 80272f8:	2d00      	cmp	r5, #0
 80272fa:	4606      	mov	r6, r0
 80272fc:	db01      	blt.n	8027302 <_malloc_r+0x1a>
 80272fe:	42a9      	cmp	r1, r5
 8027300:	d903      	bls.n	802730a <_malloc_r+0x22>
 8027302:	230c      	movs	r3, #12
 8027304:	6033      	str	r3, [r6, #0]
 8027306:	2000      	movs	r0, #0
 8027308:	bd70      	pop	{r4, r5, r6, pc}
 802730a:	f001 fb6f 	bl	80289ec <__malloc_lock>
 802730e:	4a21      	ldr	r2, [pc, #132]	; (8027394 <_malloc_r+0xac>)
 8027310:	6814      	ldr	r4, [r2, #0]
 8027312:	4621      	mov	r1, r4
 8027314:	b991      	cbnz	r1, 802733c <_malloc_r+0x54>
 8027316:	4c20      	ldr	r4, [pc, #128]	; (8027398 <_malloc_r+0xb0>)
 8027318:	6823      	ldr	r3, [r4, #0]
 802731a:	b91b      	cbnz	r3, 8027324 <_malloc_r+0x3c>
 802731c:	4630      	mov	r0, r6
 802731e:	f000 fc99 	bl	8027c54 <_sbrk_r>
 8027322:	6020      	str	r0, [r4, #0]
 8027324:	4629      	mov	r1, r5
 8027326:	4630      	mov	r0, r6
 8027328:	f000 fc94 	bl	8027c54 <_sbrk_r>
 802732c:	1c43      	adds	r3, r0, #1
 802732e:	d124      	bne.n	802737a <_malloc_r+0x92>
 8027330:	230c      	movs	r3, #12
 8027332:	6033      	str	r3, [r6, #0]
 8027334:	4630      	mov	r0, r6
 8027336:	f001 fb5a 	bl	80289ee <__malloc_unlock>
 802733a:	e7e4      	b.n	8027306 <_malloc_r+0x1e>
 802733c:	680b      	ldr	r3, [r1, #0]
 802733e:	1b5b      	subs	r3, r3, r5
 8027340:	d418      	bmi.n	8027374 <_malloc_r+0x8c>
 8027342:	2b0b      	cmp	r3, #11
 8027344:	d90f      	bls.n	8027366 <_malloc_r+0x7e>
 8027346:	600b      	str	r3, [r1, #0]
 8027348:	50cd      	str	r5, [r1, r3]
 802734a:	18cc      	adds	r4, r1, r3
 802734c:	4630      	mov	r0, r6
 802734e:	f001 fb4e 	bl	80289ee <__malloc_unlock>
 8027352:	f104 000b 	add.w	r0, r4, #11
 8027356:	1d23      	adds	r3, r4, #4
 8027358:	f020 0007 	bic.w	r0, r0, #7
 802735c:	1ac3      	subs	r3, r0, r3
 802735e:	d0d3      	beq.n	8027308 <_malloc_r+0x20>
 8027360:	425a      	negs	r2, r3
 8027362:	50e2      	str	r2, [r4, r3]
 8027364:	e7d0      	b.n	8027308 <_malloc_r+0x20>
 8027366:	428c      	cmp	r4, r1
 8027368:	684b      	ldr	r3, [r1, #4]
 802736a:	bf16      	itet	ne
 802736c:	6063      	strne	r3, [r4, #4]
 802736e:	6013      	streq	r3, [r2, #0]
 8027370:	460c      	movne	r4, r1
 8027372:	e7eb      	b.n	802734c <_malloc_r+0x64>
 8027374:	460c      	mov	r4, r1
 8027376:	6849      	ldr	r1, [r1, #4]
 8027378:	e7cc      	b.n	8027314 <_malloc_r+0x2c>
 802737a:	1cc4      	adds	r4, r0, #3
 802737c:	f024 0403 	bic.w	r4, r4, #3
 8027380:	42a0      	cmp	r0, r4
 8027382:	d005      	beq.n	8027390 <_malloc_r+0xa8>
 8027384:	1a21      	subs	r1, r4, r0
 8027386:	4630      	mov	r0, r6
 8027388:	f000 fc64 	bl	8027c54 <_sbrk_r>
 802738c:	3001      	adds	r0, #1
 802738e:	d0cf      	beq.n	8027330 <_malloc_r+0x48>
 8027390:	6025      	str	r5, [r4, #0]
 8027392:	e7db      	b.n	802734c <_malloc_r+0x64>
 8027394:	200068b0 	.word	0x200068b0
 8027398:	200068b4 	.word	0x200068b4

0802739c <__cvt>:
 802739c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80273a0:	ec55 4b10 	vmov	r4, r5, d0
 80273a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80273a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80273aa:	2d00      	cmp	r5, #0
 80273ac:	460e      	mov	r6, r1
 80273ae:	4691      	mov	r9, r2
 80273b0:	4619      	mov	r1, r3
 80273b2:	bfb8      	it	lt
 80273b4:	4622      	movlt	r2, r4
 80273b6:	462b      	mov	r3, r5
 80273b8:	f027 0720 	bic.w	r7, r7, #32
 80273bc:	bfbb      	ittet	lt
 80273be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80273c2:	461d      	movlt	r5, r3
 80273c4:	2300      	movge	r3, #0
 80273c6:	232d      	movlt	r3, #45	; 0x2d
 80273c8:	bfb8      	it	lt
 80273ca:	4614      	movlt	r4, r2
 80273cc:	2f46      	cmp	r7, #70	; 0x46
 80273ce:	700b      	strb	r3, [r1, #0]
 80273d0:	d004      	beq.n	80273dc <__cvt+0x40>
 80273d2:	2f45      	cmp	r7, #69	; 0x45
 80273d4:	d100      	bne.n	80273d8 <__cvt+0x3c>
 80273d6:	3601      	adds	r6, #1
 80273d8:	2102      	movs	r1, #2
 80273da:	e000      	b.n	80273de <__cvt+0x42>
 80273dc:	2103      	movs	r1, #3
 80273de:	ab03      	add	r3, sp, #12
 80273e0:	9301      	str	r3, [sp, #4]
 80273e2:	ab02      	add	r3, sp, #8
 80273e4:	9300      	str	r3, [sp, #0]
 80273e6:	4632      	mov	r2, r6
 80273e8:	4653      	mov	r3, sl
 80273ea:	ec45 4b10 	vmov	d0, r4, r5
 80273ee:	f000 fd37 	bl	8027e60 <_dtoa_r>
 80273f2:	2f47      	cmp	r7, #71	; 0x47
 80273f4:	4680      	mov	r8, r0
 80273f6:	d102      	bne.n	80273fe <__cvt+0x62>
 80273f8:	f019 0f01 	tst.w	r9, #1
 80273fc:	d026      	beq.n	802744c <__cvt+0xb0>
 80273fe:	2f46      	cmp	r7, #70	; 0x46
 8027400:	eb08 0906 	add.w	r9, r8, r6
 8027404:	d111      	bne.n	802742a <__cvt+0x8e>
 8027406:	f898 3000 	ldrb.w	r3, [r8]
 802740a:	2b30      	cmp	r3, #48	; 0x30
 802740c:	d10a      	bne.n	8027424 <__cvt+0x88>
 802740e:	2200      	movs	r2, #0
 8027410:	2300      	movs	r3, #0
 8027412:	4620      	mov	r0, r4
 8027414:	4629      	mov	r1, r5
 8027416:	f7d9 fb67 	bl	8000ae8 <__aeabi_dcmpeq>
 802741a:	b918      	cbnz	r0, 8027424 <__cvt+0x88>
 802741c:	f1c6 0601 	rsb	r6, r6, #1
 8027420:	f8ca 6000 	str.w	r6, [sl]
 8027424:	f8da 3000 	ldr.w	r3, [sl]
 8027428:	4499      	add	r9, r3
 802742a:	2200      	movs	r2, #0
 802742c:	2300      	movs	r3, #0
 802742e:	4620      	mov	r0, r4
 8027430:	4629      	mov	r1, r5
 8027432:	f7d9 fb59 	bl	8000ae8 <__aeabi_dcmpeq>
 8027436:	b938      	cbnz	r0, 8027448 <__cvt+0xac>
 8027438:	2230      	movs	r2, #48	; 0x30
 802743a:	9b03      	ldr	r3, [sp, #12]
 802743c:	454b      	cmp	r3, r9
 802743e:	d205      	bcs.n	802744c <__cvt+0xb0>
 8027440:	1c59      	adds	r1, r3, #1
 8027442:	9103      	str	r1, [sp, #12]
 8027444:	701a      	strb	r2, [r3, #0]
 8027446:	e7f8      	b.n	802743a <__cvt+0x9e>
 8027448:	f8cd 900c 	str.w	r9, [sp, #12]
 802744c:	9b03      	ldr	r3, [sp, #12]
 802744e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027450:	eba3 0308 	sub.w	r3, r3, r8
 8027454:	4640      	mov	r0, r8
 8027456:	6013      	str	r3, [r2, #0]
 8027458:	b004      	add	sp, #16
 802745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802745e <__exponent>:
 802745e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027460:	2900      	cmp	r1, #0
 8027462:	4604      	mov	r4, r0
 8027464:	bfba      	itte	lt
 8027466:	4249      	neglt	r1, r1
 8027468:	232d      	movlt	r3, #45	; 0x2d
 802746a:	232b      	movge	r3, #43	; 0x2b
 802746c:	2909      	cmp	r1, #9
 802746e:	f804 2b02 	strb.w	r2, [r4], #2
 8027472:	7043      	strb	r3, [r0, #1]
 8027474:	dd20      	ble.n	80274b8 <__exponent+0x5a>
 8027476:	f10d 0307 	add.w	r3, sp, #7
 802747a:	461f      	mov	r7, r3
 802747c:	260a      	movs	r6, #10
 802747e:	fb91 f5f6 	sdiv	r5, r1, r6
 8027482:	fb06 1115 	mls	r1, r6, r5, r1
 8027486:	3130      	adds	r1, #48	; 0x30
 8027488:	2d09      	cmp	r5, #9
 802748a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802748e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8027492:	4629      	mov	r1, r5
 8027494:	dc09      	bgt.n	80274aa <__exponent+0x4c>
 8027496:	3130      	adds	r1, #48	; 0x30
 8027498:	3b02      	subs	r3, #2
 802749a:	f802 1c01 	strb.w	r1, [r2, #-1]
 802749e:	42bb      	cmp	r3, r7
 80274a0:	4622      	mov	r2, r4
 80274a2:	d304      	bcc.n	80274ae <__exponent+0x50>
 80274a4:	1a10      	subs	r0, r2, r0
 80274a6:	b003      	add	sp, #12
 80274a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80274aa:	4613      	mov	r3, r2
 80274ac:	e7e7      	b.n	802747e <__exponent+0x20>
 80274ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80274b2:	f804 2b01 	strb.w	r2, [r4], #1
 80274b6:	e7f2      	b.n	802749e <__exponent+0x40>
 80274b8:	2330      	movs	r3, #48	; 0x30
 80274ba:	4419      	add	r1, r3
 80274bc:	7083      	strb	r3, [r0, #2]
 80274be:	1d02      	adds	r2, r0, #4
 80274c0:	70c1      	strb	r1, [r0, #3]
 80274c2:	e7ef      	b.n	80274a4 <__exponent+0x46>

080274c4 <_printf_float>:
 80274c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274c8:	b08d      	sub	sp, #52	; 0x34
 80274ca:	460c      	mov	r4, r1
 80274cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80274d0:	4616      	mov	r6, r2
 80274d2:	461f      	mov	r7, r3
 80274d4:	4605      	mov	r5, r0
 80274d6:	f001 fa7b 	bl	80289d0 <_localeconv_r>
 80274da:	6803      	ldr	r3, [r0, #0]
 80274dc:	9304      	str	r3, [sp, #16]
 80274de:	4618      	mov	r0, r3
 80274e0:	f7d8 fe80 	bl	80001e4 <strlen>
 80274e4:	2300      	movs	r3, #0
 80274e6:	930a      	str	r3, [sp, #40]	; 0x28
 80274e8:	f8d8 3000 	ldr.w	r3, [r8]
 80274ec:	9005      	str	r0, [sp, #20]
 80274ee:	3307      	adds	r3, #7
 80274f0:	f023 0307 	bic.w	r3, r3, #7
 80274f4:	f103 0208 	add.w	r2, r3, #8
 80274f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80274fc:	f8d4 b000 	ldr.w	fp, [r4]
 8027500:	f8c8 2000 	str.w	r2, [r8]
 8027504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027508:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802750c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8027510:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027514:	9307      	str	r3, [sp, #28]
 8027516:	f8cd 8018 	str.w	r8, [sp, #24]
 802751a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802751e:	4ba7      	ldr	r3, [pc, #668]	; (80277bc <_printf_float+0x2f8>)
 8027520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027524:	f7d9 fb12 	bl	8000b4c <__aeabi_dcmpun>
 8027528:	bb70      	cbnz	r0, 8027588 <_printf_float+0xc4>
 802752a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802752e:	4ba3      	ldr	r3, [pc, #652]	; (80277bc <_printf_float+0x2f8>)
 8027530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027534:	f7d9 faec 	bl	8000b10 <__aeabi_dcmple>
 8027538:	bb30      	cbnz	r0, 8027588 <_printf_float+0xc4>
 802753a:	2200      	movs	r2, #0
 802753c:	2300      	movs	r3, #0
 802753e:	4640      	mov	r0, r8
 8027540:	4649      	mov	r1, r9
 8027542:	f7d9 fadb 	bl	8000afc <__aeabi_dcmplt>
 8027546:	b110      	cbz	r0, 802754e <_printf_float+0x8a>
 8027548:	232d      	movs	r3, #45	; 0x2d
 802754a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802754e:	4a9c      	ldr	r2, [pc, #624]	; (80277c0 <_printf_float+0x2fc>)
 8027550:	4b9c      	ldr	r3, [pc, #624]	; (80277c4 <_printf_float+0x300>)
 8027552:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8027556:	bf8c      	ite	hi
 8027558:	4690      	movhi	r8, r2
 802755a:	4698      	movls	r8, r3
 802755c:	2303      	movs	r3, #3
 802755e:	f02b 0204 	bic.w	r2, fp, #4
 8027562:	6123      	str	r3, [r4, #16]
 8027564:	6022      	str	r2, [r4, #0]
 8027566:	f04f 0900 	mov.w	r9, #0
 802756a:	9700      	str	r7, [sp, #0]
 802756c:	4633      	mov	r3, r6
 802756e:	aa0b      	add	r2, sp, #44	; 0x2c
 8027570:	4621      	mov	r1, r4
 8027572:	4628      	mov	r0, r5
 8027574:	f000 f9e6 	bl	8027944 <_printf_common>
 8027578:	3001      	adds	r0, #1
 802757a:	f040 808d 	bne.w	8027698 <_printf_float+0x1d4>
 802757e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027582:	b00d      	add	sp, #52	; 0x34
 8027584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027588:	4642      	mov	r2, r8
 802758a:	464b      	mov	r3, r9
 802758c:	4640      	mov	r0, r8
 802758e:	4649      	mov	r1, r9
 8027590:	f7d9 fadc 	bl	8000b4c <__aeabi_dcmpun>
 8027594:	b110      	cbz	r0, 802759c <_printf_float+0xd8>
 8027596:	4a8c      	ldr	r2, [pc, #560]	; (80277c8 <_printf_float+0x304>)
 8027598:	4b8c      	ldr	r3, [pc, #560]	; (80277cc <_printf_float+0x308>)
 802759a:	e7da      	b.n	8027552 <_printf_float+0x8e>
 802759c:	6861      	ldr	r1, [r4, #4]
 802759e:	1c4b      	adds	r3, r1, #1
 80275a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80275a4:	a80a      	add	r0, sp, #40	; 0x28
 80275a6:	d13e      	bne.n	8027626 <_printf_float+0x162>
 80275a8:	2306      	movs	r3, #6
 80275aa:	6063      	str	r3, [r4, #4]
 80275ac:	2300      	movs	r3, #0
 80275ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80275b2:	ab09      	add	r3, sp, #36	; 0x24
 80275b4:	9300      	str	r3, [sp, #0]
 80275b6:	ec49 8b10 	vmov	d0, r8, r9
 80275ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80275be:	6022      	str	r2, [r4, #0]
 80275c0:	f8cd a004 	str.w	sl, [sp, #4]
 80275c4:	6861      	ldr	r1, [r4, #4]
 80275c6:	4628      	mov	r0, r5
 80275c8:	f7ff fee8 	bl	802739c <__cvt>
 80275cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80275d0:	2b47      	cmp	r3, #71	; 0x47
 80275d2:	4680      	mov	r8, r0
 80275d4:	d109      	bne.n	80275ea <_printf_float+0x126>
 80275d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275d8:	1cd8      	adds	r0, r3, #3
 80275da:	db02      	blt.n	80275e2 <_printf_float+0x11e>
 80275dc:	6862      	ldr	r2, [r4, #4]
 80275de:	4293      	cmp	r3, r2
 80275e0:	dd47      	ble.n	8027672 <_printf_float+0x1ae>
 80275e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80275e6:	fa5f fa8a 	uxtb.w	sl, sl
 80275ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80275ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80275f0:	d824      	bhi.n	802763c <_printf_float+0x178>
 80275f2:	3901      	subs	r1, #1
 80275f4:	4652      	mov	r2, sl
 80275f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80275fa:	9109      	str	r1, [sp, #36]	; 0x24
 80275fc:	f7ff ff2f 	bl	802745e <__exponent>
 8027600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027602:	1813      	adds	r3, r2, r0
 8027604:	2a01      	cmp	r2, #1
 8027606:	4681      	mov	r9, r0
 8027608:	6123      	str	r3, [r4, #16]
 802760a:	dc02      	bgt.n	8027612 <_printf_float+0x14e>
 802760c:	6822      	ldr	r2, [r4, #0]
 802760e:	07d1      	lsls	r1, r2, #31
 8027610:	d501      	bpl.n	8027616 <_printf_float+0x152>
 8027612:	3301      	adds	r3, #1
 8027614:	6123      	str	r3, [r4, #16]
 8027616:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802761a:	2b00      	cmp	r3, #0
 802761c:	d0a5      	beq.n	802756a <_printf_float+0xa6>
 802761e:	232d      	movs	r3, #45	; 0x2d
 8027620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027624:	e7a1      	b.n	802756a <_printf_float+0xa6>
 8027626:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 802762a:	f000 8177 	beq.w	802791c <_printf_float+0x458>
 802762e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8027632:	d1bb      	bne.n	80275ac <_printf_float+0xe8>
 8027634:	2900      	cmp	r1, #0
 8027636:	d1b9      	bne.n	80275ac <_printf_float+0xe8>
 8027638:	2301      	movs	r3, #1
 802763a:	e7b6      	b.n	80275aa <_printf_float+0xe6>
 802763c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8027640:	d119      	bne.n	8027676 <_printf_float+0x1b2>
 8027642:	2900      	cmp	r1, #0
 8027644:	6863      	ldr	r3, [r4, #4]
 8027646:	dd0c      	ble.n	8027662 <_printf_float+0x19e>
 8027648:	6121      	str	r1, [r4, #16]
 802764a:	b913      	cbnz	r3, 8027652 <_printf_float+0x18e>
 802764c:	6822      	ldr	r2, [r4, #0]
 802764e:	07d2      	lsls	r2, r2, #31
 8027650:	d502      	bpl.n	8027658 <_printf_float+0x194>
 8027652:	3301      	adds	r3, #1
 8027654:	440b      	add	r3, r1
 8027656:	6123      	str	r3, [r4, #16]
 8027658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802765a:	65a3      	str	r3, [r4, #88]	; 0x58
 802765c:	f04f 0900 	mov.w	r9, #0
 8027660:	e7d9      	b.n	8027616 <_printf_float+0x152>
 8027662:	b913      	cbnz	r3, 802766a <_printf_float+0x1a6>
 8027664:	6822      	ldr	r2, [r4, #0]
 8027666:	07d0      	lsls	r0, r2, #31
 8027668:	d501      	bpl.n	802766e <_printf_float+0x1aa>
 802766a:	3302      	adds	r3, #2
 802766c:	e7f3      	b.n	8027656 <_printf_float+0x192>
 802766e:	2301      	movs	r3, #1
 8027670:	e7f1      	b.n	8027656 <_printf_float+0x192>
 8027672:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8027676:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802767a:	4293      	cmp	r3, r2
 802767c:	db05      	blt.n	802768a <_printf_float+0x1c6>
 802767e:	6822      	ldr	r2, [r4, #0]
 8027680:	6123      	str	r3, [r4, #16]
 8027682:	07d1      	lsls	r1, r2, #31
 8027684:	d5e8      	bpl.n	8027658 <_printf_float+0x194>
 8027686:	3301      	adds	r3, #1
 8027688:	e7e5      	b.n	8027656 <_printf_float+0x192>
 802768a:	2b00      	cmp	r3, #0
 802768c:	bfd4      	ite	le
 802768e:	f1c3 0302 	rsble	r3, r3, #2
 8027692:	2301      	movgt	r3, #1
 8027694:	4413      	add	r3, r2
 8027696:	e7de      	b.n	8027656 <_printf_float+0x192>
 8027698:	6823      	ldr	r3, [r4, #0]
 802769a:	055a      	lsls	r2, r3, #21
 802769c:	d407      	bmi.n	80276ae <_printf_float+0x1ea>
 802769e:	6923      	ldr	r3, [r4, #16]
 80276a0:	4642      	mov	r2, r8
 80276a2:	4631      	mov	r1, r6
 80276a4:	4628      	mov	r0, r5
 80276a6:	47b8      	blx	r7
 80276a8:	3001      	adds	r0, #1
 80276aa:	d12b      	bne.n	8027704 <_printf_float+0x240>
 80276ac:	e767      	b.n	802757e <_printf_float+0xba>
 80276ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80276b2:	f240 80dc 	bls.w	802786e <_printf_float+0x3aa>
 80276b6:	2200      	movs	r2, #0
 80276b8:	2300      	movs	r3, #0
 80276ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80276be:	f7d9 fa13 	bl	8000ae8 <__aeabi_dcmpeq>
 80276c2:	2800      	cmp	r0, #0
 80276c4:	d033      	beq.n	802772e <_printf_float+0x26a>
 80276c6:	2301      	movs	r3, #1
 80276c8:	4a41      	ldr	r2, [pc, #260]	; (80277d0 <_printf_float+0x30c>)
 80276ca:	4631      	mov	r1, r6
 80276cc:	4628      	mov	r0, r5
 80276ce:	47b8      	blx	r7
 80276d0:	3001      	adds	r0, #1
 80276d2:	f43f af54 	beq.w	802757e <_printf_float+0xba>
 80276d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80276da:	429a      	cmp	r2, r3
 80276dc:	db02      	blt.n	80276e4 <_printf_float+0x220>
 80276de:	6823      	ldr	r3, [r4, #0]
 80276e0:	07d8      	lsls	r0, r3, #31
 80276e2:	d50f      	bpl.n	8027704 <_printf_float+0x240>
 80276e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80276e8:	4631      	mov	r1, r6
 80276ea:	4628      	mov	r0, r5
 80276ec:	47b8      	blx	r7
 80276ee:	3001      	adds	r0, #1
 80276f0:	f43f af45 	beq.w	802757e <_printf_float+0xba>
 80276f4:	f04f 0800 	mov.w	r8, #0
 80276f8:	f104 091a 	add.w	r9, r4, #26
 80276fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276fe:	3b01      	subs	r3, #1
 8027700:	4543      	cmp	r3, r8
 8027702:	dc09      	bgt.n	8027718 <_printf_float+0x254>
 8027704:	6823      	ldr	r3, [r4, #0]
 8027706:	079b      	lsls	r3, r3, #30
 8027708:	f100 8103 	bmi.w	8027912 <_printf_float+0x44e>
 802770c:	68e0      	ldr	r0, [r4, #12]
 802770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027710:	4298      	cmp	r0, r3
 8027712:	bfb8      	it	lt
 8027714:	4618      	movlt	r0, r3
 8027716:	e734      	b.n	8027582 <_printf_float+0xbe>
 8027718:	2301      	movs	r3, #1
 802771a:	464a      	mov	r2, r9
 802771c:	4631      	mov	r1, r6
 802771e:	4628      	mov	r0, r5
 8027720:	47b8      	blx	r7
 8027722:	3001      	adds	r0, #1
 8027724:	f43f af2b 	beq.w	802757e <_printf_float+0xba>
 8027728:	f108 0801 	add.w	r8, r8, #1
 802772c:	e7e6      	b.n	80276fc <_printf_float+0x238>
 802772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027730:	2b00      	cmp	r3, #0
 8027732:	dc2b      	bgt.n	802778c <_printf_float+0x2c8>
 8027734:	2301      	movs	r3, #1
 8027736:	4a26      	ldr	r2, [pc, #152]	; (80277d0 <_printf_float+0x30c>)
 8027738:	4631      	mov	r1, r6
 802773a:	4628      	mov	r0, r5
 802773c:	47b8      	blx	r7
 802773e:	3001      	adds	r0, #1
 8027740:	f43f af1d 	beq.w	802757e <_printf_float+0xba>
 8027744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027746:	b923      	cbnz	r3, 8027752 <_printf_float+0x28e>
 8027748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802774a:	b913      	cbnz	r3, 8027752 <_printf_float+0x28e>
 802774c:	6823      	ldr	r3, [r4, #0]
 802774e:	07d9      	lsls	r1, r3, #31
 8027750:	d5d8      	bpl.n	8027704 <_printf_float+0x240>
 8027752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027756:	4631      	mov	r1, r6
 8027758:	4628      	mov	r0, r5
 802775a:	47b8      	blx	r7
 802775c:	3001      	adds	r0, #1
 802775e:	f43f af0e 	beq.w	802757e <_printf_float+0xba>
 8027762:	f04f 0900 	mov.w	r9, #0
 8027766:	f104 0a1a 	add.w	sl, r4, #26
 802776a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802776c:	425b      	negs	r3, r3
 802776e:	454b      	cmp	r3, r9
 8027770:	dc01      	bgt.n	8027776 <_printf_float+0x2b2>
 8027772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027774:	e794      	b.n	80276a0 <_printf_float+0x1dc>
 8027776:	2301      	movs	r3, #1
 8027778:	4652      	mov	r2, sl
 802777a:	4631      	mov	r1, r6
 802777c:	4628      	mov	r0, r5
 802777e:	47b8      	blx	r7
 8027780:	3001      	adds	r0, #1
 8027782:	f43f aefc 	beq.w	802757e <_printf_float+0xba>
 8027786:	f109 0901 	add.w	r9, r9, #1
 802778a:	e7ee      	b.n	802776a <_printf_float+0x2a6>
 802778c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802778e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027790:	429a      	cmp	r2, r3
 8027792:	bfa8      	it	ge
 8027794:	461a      	movge	r2, r3
 8027796:	2a00      	cmp	r2, #0
 8027798:	4691      	mov	r9, r2
 802779a:	dd07      	ble.n	80277ac <_printf_float+0x2e8>
 802779c:	4613      	mov	r3, r2
 802779e:	4631      	mov	r1, r6
 80277a0:	4642      	mov	r2, r8
 80277a2:	4628      	mov	r0, r5
 80277a4:	47b8      	blx	r7
 80277a6:	3001      	adds	r0, #1
 80277a8:	f43f aee9 	beq.w	802757e <_printf_float+0xba>
 80277ac:	f104 031a 	add.w	r3, r4, #26
 80277b0:	f04f 0b00 	mov.w	fp, #0
 80277b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80277b8:	9306      	str	r3, [sp, #24]
 80277ba:	e015      	b.n	80277e8 <_printf_float+0x324>
 80277bc:	7fefffff 	.word	0x7fefffff
 80277c0:	08044fdc 	.word	0x08044fdc
 80277c4:	08044fd8 	.word	0x08044fd8
 80277c8:	08044fe4 	.word	0x08044fe4
 80277cc:	08044fe0 	.word	0x08044fe0
 80277d0:	0804519b 	.word	0x0804519b
 80277d4:	2301      	movs	r3, #1
 80277d6:	9a06      	ldr	r2, [sp, #24]
 80277d8:	4631      	mov	r1, r6
 80277da:	4628      	mov	r0, r5
 80277dc:	47b8      	blx	r7
 80277de:	3001      	adds	r0, #1
 80277e0:	f43f aecd 	beq.w	802757e <_printf_float+0xba>
 80277e4:	f10b 0b01 	add.w	fp, fp, #1
 80277e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80277ec:	ebaa 0309 	sub.w	r3, sl, r9
 80277f0:	455b      	cmp	r3, fp
 80277f2:	dcef      	bgt.n	80277d4 <_printf_float+0x310>
 80277f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80277f8:	429a      	cmp	r2, r3
 80277fa:	44d0      	add	r8, sl
 80277fc:	db15      	blt.n	802782a <_printf_float+0x366>
 80277fe:	6823      	ldr	r3, [r4, #0]
 8027800:	07da      	lsls	r2, r3, #31
 8027802:	d412      	bmi.n	802782a <_printf_float+0x366>
 8027804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027808:	eba3 020a 	sub.w	r2, r3, sl
 802780c:	eba3 0a01 	sub.w	sl, r3, r1
 8027810:	4592      	cmp	sl, r2
 8027812:	bfa8      	it	ge
 8027814:	4692      	movge	sl, r2
 8027816:	f1ba 0f00 	cmp.w	sl, #0
 802781a:	dc0e      	bgt.n	802783a <_printf_float+0x376>
 802781c:	f04f 0800 	mov.w	r8, #0
 8027820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027824:	f104 091a 	add.w	r9, r4, #26
 8027828:	e019      	b.n	802785e <_printf_float+0x39a>
 802782a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802782e:	4631      	mov	r1, r6
 8027830:	4628      	mov	r0, r5
 8027832:	47b8      	blx	r7
 8027834:	3001      	adds	r0, #1
 8027836:	d1e5      	bne.n	8027804 <_printf_float+0x340>
 8027838:	e6a1      	b.n	802757e <_printf_float+0xba>
 802783a:	4653      	mov	r3, sl
 802783c:	4642      	mov	r2, r8
 802783e:	4631      	mov	r1, r6
 8027840:	4628      	mov	r0, r5
 8027842:	47b8      	blx	r7
 8027844:	3001      	adds	r0, #1
 8027846:	d1e9      	bne.n	802781c <_printf_float+0x358>
 8027848:	e699      	b.n	802757e <_printf_float+0xba>
 802784a:	2301      	movs	r3, #1
 802784c:	464a      	mov	r2, r9
 802784e:	4631      	mov	r1, r6
 8027850:	4628      	mov	r0, r5
 8027852:	47b8      	blx	r7
 8027854:	3001      	adds	r0, #1
 8027856:	f43f ae92 	beq.w	802757e <_printf_float+0xba>
 802785a:	f108 0801 	add.w	r8, r8, #1
 802785e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027862:	1a9b      	subs	r3, r3, r2
 8027864:	eba3 030a 	sub.w	r3, r3, sl
 8027868:	4543      	cmp	r3, r8
 802786a:	dcee      	bgt.n	802784a <_printf_float+0x386>
 802786c:	e74a      	b.n	8027704 <_printf_float+0x240>
 802786e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027870:	2a01      	cmp	r2, #1
 8027872:	dc01      	bgt.n	8027878 <_printf_float+0x3b4>
 8027874:	07db      	lsls	r3, r3, #31
 8027876:	d53a      	bpl.n	80278ee <_printf_float+0x42a>
 8027878:	2301      	movs	r3, #1
 802787a:	4642      	mov	r2, r8
 802787c:	4631      	mov	r1, r6
 802787e:	4628      	mov	r0, r5
 8027880:	47b8      	blx	r7
 8027882:	3001      	adds	r0, #1
 8027884:	f43f ae7b 	beq.w	802757e <_printf_float+0xba>
 8027888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802788c:	4631      	mov	r1, r6
 802788e:	4628      	mov	r0, r5
 8027890:	47b8      	blx	r7
 8027892:	3001      	adds	r0, #1
 8027894:	f108 0801 	add.w	r8, r8, #1
 8027898:	f43f ae71 	beq.w	802757e <_printf_float+0xba>
 802789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802789e:	2200      	movs	r2, #0
 80278a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80278a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80278a8:	2300      	movs	r3, #0
 80278aa:	f7d9 f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 80278ae:	b9c8      	cbnz	r0, 80278e4 <_printf_float+0x420>
 80278b0:	4653      	mov	r3, sl
 80278b2:	4642      	mov	r2, r8
 80278b4:	4631      	mov	r1, r6
 80278b6:	4628      	mov	r0, r5
 80278b8:	47b8      	blx	r7
 80278ba:	3001      	adds	r0, #1
 80278bc:	d10e      	bne.n	80278dc <_printf_float+0x418>
 80278be:	e65e      	b.n	802757e <_printf_float+0xba>
 80278c0:	2301      	movs	r3, #1
 80278c2:	4652      	mov	r2, sl
 80278c4:	4631      	mov	r1, r6
 80278c6:	4628      	mov	r0, r5
 80278c8:	47b8      	blx	r7
 80278ca:	3001      	adds	r0, #1
 80278cc:	f43f ae57 	beq.w	802757e <_printf_float+0xba>
 80278d0:	f108 0801 	add.w	r8, r8, #1
 80278d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80278d6:	3b01      	subs	r3, #1
 80278d8:	4543      	cmp	r3, r8
 80278da:	dcf1      	bgt.n	80278c0 <_printf_float+0x3fc>
 80278dc:	464b      	mov	r3, r9
 80278de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80278e2:	e6de      	b.n	80276a2 <_printf_float+0x1de>
 80278e4:	f04f 0800 	mov.w	r8, #0
 80278e8:	f104 0a1a 	add.w	sl, r4, #26
 80278ec:	e7f2      	b.n	80278d4 <_printf_float+0x410>
 80278ee:	2301      	movs	r3, #1
 80278f0:	e7df      	b.n	80278b2 <_printf_float+0x3ee>
 80278f2:	2301      	movs	r3, #1
 80278f4:	464a      	mov	r2, r9
 80278f6:	4631      	mov	r1, r6
 80278f8:	4628      	mov	r0, r5
 80278fa:	47b8      	blx	r7
 80278fc:	3001      	adds	r0, #1
 80278fe:	f43f ae3e 	beq.w	802757e <_printf_float+0xba>
 8027902:	f108 0801 	add.w	r8, r8, #1
 8027906:	68e3      	ldr	r3, [r4, #12]
 8027908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802790a:	1a9b      	subs	r3, r3, r2
 802790c:	4543      	cmp	r3, r8
 802790e:	dcf0      	bgt.n	80278f2 <_printf_float+0x42e>
 8027910:	e6fc      	b.n	802770c <_printf_float+0x248>
 8027912:	f04f 0800 	mov.w	r8, #0
 8027916:	f104 0919 	add.w	r9, r4, #25
 802791a:	e7f4      	b.n	8027906 <_printf_float+0x442>
 802791c:	2900      	cmp	r1, #0
 802791e:	f43f ae8b 	beq.w	8027638 <_printf_float+0x174>
 8027922:	2300      	movs	r3, #0
 8027924:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8027928:	ab09      	add	r3, sp, #36	; 0x24
 802792a:	9300      	str	r3, [sp, #0]
 802792c:	ec49 8b10 	vmov	d0, r8, r9
 8027930:	6022      	str	r2, [r4, #0]
 8027932:	f8cd a004 	str.w	sl, [sp, #4]
 8027936:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802793a:	4628      	mov	r0, r5
 802793c:	f7ff fd2e 	bl	802739c <__cvt>
 8027940:	4680      	mov	r8, r0
 8027942:	e648      	b.n	80275d6 <_printf_float+0x112>

08027944 <_printf_common>:
 8027944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027948:	4691      	mov	r9, r2
 802794a:	461f      	mov	r7, r3
 802794c:	688a      	ldr	r2, [r1, #8]
 802794e:	690b      	ldr	r3, [r1, #16]
 8027950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027954:	4293      	cmp	r3, r2
 8027956:	bfb8      	it	lt
 8027958:	4613      	movlt	r3, r2
 802795a:	f8c9 3000 	str.w	r3, [r9]
 802795e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027962:	4606      	mov	r6, r0
 8027964:	460c      	mov	r4, r1
 8027966:	b112      	cbz	r2, 802796e <_printf_common+0x2a>
 8027968:	3301      	adds	r3, #1
 802796a:	f8c9 3000 	str.w	r3, [r9]
 802796e:	6823      	ldr	r3, [r4, #0]
 8027970:	0699      	lsls	r1, r3, #26
 8027972:	bf42      	ittt	mi
 8027974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027978:	3302      	addmi	r3, #2
 802797a:	f8c9 3000 	strmi.w	r3, [r9]
 802797e:	6825      	ldr	r5, [r4, #0]
 8027980:	f015 0506 	ands.w	r5, r5, #6
 8027984:	d107      	bne.n	8027996 <_printf_common+0x52>
 8027986:	f104 0a19 	add.w	sl, r4, #25
 802798a:	68e3      	ldr	r3, [r4, #12]
 802798c:	f8d9 2000 	ldr.w	r2, [r9]
 8027990:	1a9b      	subs	r3, r3, r2
 8027992:	42ab      	cmp	r3, r5
 8027994:	dc28      	bgt.n	80279e8 <_printf_common+0xa4>
 8027996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802799a:	6822      	ldr	r2, [r4, #0]
 802799c:	3300      	adds	r3, #0
 802799e:	bf18      	it	ne
 80279a0:	2301      	movne	r3, #1
 80279a2:	0692      	lsls	r2, r2, #26
 80279a4:	d42d      	bmi.n	8027a02 <_printf_common+0xbe>
 80279a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80279aa:	4639      	mov	r1, r7
 80279ac:	4630      	mov	r0, r6
 80279ae:	47c0      	blx	r8
 80279b0:	3001      	adds	r0, #1
 80279b2:	d020      	beq.n	80279f6 <_printf_common+0xb2>
 80279b4:	6823      	ldr	r3, [r4, #0]
 80279b6:	68e5      	ldr	r5, [r4, #12]
 80279b8:	f8d9 2000 	ldr.w	r2, [r9]
 80279bc:	f003 0306 	and.w	r3, r3, #6
 80279c0:	2b04      	cmp	r3, #4
 80279c2:	bf08      	it	eq
 80279c4:	1aad      	subeq	r5, r5, r2
 80279c6:	68a3      	ldr	r3, [r4, #8]
 80279c8:	6922      	ldr	r2, [r4, #16]
 80279ca:	bf0c      	ite	eq
 80279cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80279d0:	2500      	movne	r5, #0
 80279d2:	4293      	cmp	r3, r2
 80279d4:	bfc4      	itt	gt
 80279d6:	1a9b      	subgt	r3, r3, r2
 80279d8:	18ed      	addgt	r5, r5, r3
 80279da:	f04f 0900 	mov.w	r9, #0
 80279de:	341a      	adds	r4, #26
 80279e0:	454d      	cmp	r5, r9
 80279e2:	d11a      	bne.n	8027a1a <_printf_common+0xd6>
 80279e4:	2000      	movs	r0, #0
 80279e6:	e008      	b.n	80279fa <_printf_common+0xb6>
 80279e8:	2301      	movs	r3, #1
 80279ea:	4652      	mov	r2, sl
 80279ec:	4639      	mov	r1, r7
 80279ee:	4630      	mov	r0, r6
 80279f0:	47c0      	blx	r8
 80279f2:	3001      	adds	r0, #1
 80279f4:	d103      	bne.n	80279fe <_printf_common+0xba>
 80279f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80279fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279fe:	3501      	adds	r5, #1
 8027a00:	e7c3      	b.n	802798a <_printf_common+0x46>
 8027a02:	18e1      	adds	r1, r4, r3
 8027a04:	1c5a      	adds	r2, r3, #1
 8027a06:	2030      	movs	r0, #48	; 0x30
 8027a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027a0c:	4422      	add	r2, r4
 8027a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027a16:	3302      	adds	r3, #2
 8027a18:	e7c5      	b.n	80279a6 <_printf_common+0x62>
 8027a1a:	2301      	movs	r3, #1
 8027a1c:	4622      	mov	r2, r4
 8027a1e:	4639      	mov	r1, r7
 8027a20:	4630      	mov	r0, r6
 8027a22:	47c0      	blx	r8
 8027a24:	3001      	adds	r0, #1
 8027a26:	d0e6      	beq.n	80279f6 <_printf_common+0xb2>
 8027a28:	f109 0901 	add.w	r9, r9, #1
 8027a2c:	e7d8      	b.n	80279e0 <_printf_common+0x9c>
	...

08027a30 <_printf_i>:
 8027a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8027a38:	460c      	mov	r4, r1
 8027a3a:	7e09      	ldrb	r1, [r1, #24]
 8027a3c:	b085      	sub	sp, #20
 8027a3e:	296e      	cmp	r1, #110	; 0x6e
 8027a40:	4617      	mov	r7, r2
 8027a42:	4606      	mov	r6, r0
 8027a44:	4698      	mov	r8, r3
 8027a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027a48:	f000 80b3 	beq.w	8027bb2 <_printf_i+0x182>
 8027a4c:	d822      	bhi.n	8027a94 <_printf_i+0x64>
 8027a4e:	2963      	cmp	r1, #99	; 0x63
 8027a50:	d036      	beq.n	8027ac0 <_printf_i+0x90>
 8027a52:	d80a      	bhi.n	8027a6a <_printf_i+0x3a>
 8027a54:	2900      	cmp	r1, #0
 8027a56:	f000 80b9 	beq.w	8027bcc <_printf_i+0x19c>
 8027a5a:	2958      	cmp	r1, #88	; 0x58
 8027a5c:	f000 8083 	beq.w	8027b66 <_printf_i+0x136>
 8027a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8027a68:	e032      	b.n	8027ad0 <_printf_i+0xa0>
 8027a6a:	2964      	cmp	r1, #100	; 0x64
 8027a6c:	d001      	beq.n	8027a72 <_printf_i+0x42>
 8027a6e:	2969      	cmp	r1, #105	; 0x69
 8027a70:	d1f6      	bne.n	8027a60 <_printf_i+0x30>
 8027a72:	6820      	ldr	r0, [r4, #0]
 8027a74:	6813      	ldr	r3, [r2, #0]
 8027a76:	0605      	lsls	r5, r0, #24
 8027a78:	f103 0104 	add.w	r1, r3, #4
 8027a7c:	d52a      	bpl.n	8027ad4 <_printf_i+0xa4>
 8027a7e:	681b      	ldr	r3, [r3, #0]
 8027a80:	6011      	str	r1, [r2, #0]
 8027a82:	2b00      	cmp	r3, #0
 8027a84:	da03      	bge.n	8027a8e <_printf_i+0x5e>
 8027a86:	222d      	movs	r2, #45	; 0x2d
 8027a88:	425b      	negs	r3, r3
 8027a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027a8e:	486f      	ldr	r0, [pc, #444]	; (8027c4c <_printf_i+0x21c>)
 8027a90:	220a      	movs	r2, #10
 8027a92:	e039      	b.n	8027b08 <_printf_i+0xd8>
 8027a94:	2973      	cmp	r1, #115	; 0x73
 8027a96:	f000 809d 	beq.w	8027bd4 <_printf_i+0x1a4>
 8027a9a:	d808      	bhi.n	8027aae <_printf_i+0x7e>
 8027a9c:	296f      	cmp	r1, #111	; 0x6f
 8027a9e:	d020      	beq.n	8027ae2 <_printf_i+0xb2>
 8027aa0:	2970      	cmp	r1, #112	; 0x70
 8027aa2:	d1dd      	bne.n	8027a60 <_printf_i+0x30>
 8027aa4:	6823      	ldr	r3, [r4, #0]
 8027aa6:	f043 0320 	orr.w	r3, r3, #32
 8027aaa:	6023      	str	r3, [r4, #0]
 8027aac:	e003      	b.n	8027ab6 <_printf_i+0x86>
 8027aae:	2975      	cmp	r1, #117	; 0x75
 8027ab0:	d017      	beq.n	8027ae2 <_printf_i+0xb2>
 8027ab2:	2978      	cmp	r1, #120	; 0x78
 8027ab4:	d1d4      	bne.n	8027a60 <_printf_i+0x30>
 8027ab6:	2378      	movs	r3, #120	; 0x78
 8027ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027abc:	4864      	ldr	r0, [pc, #400]	; (8027c50 <_printf_i+0x220>)
 8027abe:	e055      	b.n	8027b6c <_printf_i+0x13c>
 8027ac0:	6813      	ldr	r3, [r2, #0]
 8027ac2:	1d19      	adds	r1, r3, #4
 8027ac4:	681b      	ldr	r3, [r3, #0]
 8027ac6:	6011      	str	r1, [r2, #0]
 8027ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027ad0:	2301      	movs	r3, #1
 8027ad2:	e08c      	b.n	8027bee <_printf_i+0x1be>
 8027ad4:	681b      	ldr	r3, [r3, #0]
 8027ad6:	6011      	str	r1, [r2, #0]
 8027ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027adc:	bf18      	it	ne
 8027ade:	b21b      	sxthne	r3, r3
 8027ae0:	e7cf      	b.n	8027a82 <_printf_i+0x52>
 8027ae2:	6813      	ldr	r3, [r2, #0]
 8027ae4:	6825      	ldr	r5, [r4, #0]
 8027ae6:	1d18      	adds	r0, r3, #4
 8027ae8:	6010      	str	r0, [r2, #0]
 8027aea:	0628      	lsls	r0, r5, #24
 8027aec:	d501      	bpl.n	8027af2 <_printf_i+0xc2>
 8027aee:	681b      	ldr	r3, [r3, #0]
 8027af0:	e002      	b.n	8027af8 <_printf_i+0xc8>
 8027af2:	0668      	lsls	r0, r5, #25
 8027af4:	d5fb      	bpl.n	8027aee <_printf_i+0xbe>
 8027af6:	881b      	ldrh	r3, [r3, #0]
 8027af8:	4854      	ldr	r0, [pc, #336]	; (8027c4c <_printf_i+0x21c>)
 8027afa:	296f      	cmp	r1, #111	; 0x6f
 8027afc:	bf14      	ite	ne
 8027afe:	220a      	movne	r2, #10
 8027b00:	2208      	moveq	r2, #8
 8027b02:	2100      	movs	r1, #0
 8027b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027b08:	6865      	ldr	r5, [r4, #4]
 8027b0a:	60a5      	str	r5, [r4, #8]
 8027b0c:	2d00      	cmp	r5, #0
 8027b0e:	f2c0 8095 	blt.w	8027c3c <_printf_i+0x20c>
 8027b12:	6821      	ldr	r1, [r4, #0]
 8027b14:	f021 0104 	bic.w	r1, r1, #4
 8027b18:	6021      	str	r1, [r4, #0]
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d13d      	bne.n	8027b9a <_printf_i+0x16a>
 8027b1e:	2d00      	cmp	r5, #0
 8027b20:	f040 808e 	bne.w	8027c40 <_printf_i+0x210>
 8027b24:	4665      	mov	r5, ip
 8027b26:	2a08      	cmp	r2, #8
 8027b28:	d10b      	bne.n	8027b42 <_printf_i+0x112>
 8027b2a:	6823      	ldr	r3, [r4, #0]
 8027b2c:	07db      	lsls	r3, r3, #31
 8027b2e:	d508      	bpl.n	8027b42 <_printf_i+0x112>
 8027b30:	6923      	ldr	r3, [r4, #16]
 8027b32:	6862      	ldr	r2, [r4, #4]
 8027b34:	429a      	cmp	r2, r3
 8027b36:	bfde      	ittt	le
 8027b38:	2330      	movle	r3, #48	; 0x30
 8027b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027b3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8027b42:	ebac 0305 	sub.w	r3, ip, r5
 8027b46:	6123      	str	r3, [r4, #16]
 8027b48:	f8cd 8000 	str.w	r8, [sp]
 8027b4c:	463b      	mov	r3, r7
 8027b4e:	aa03      	add	r2, sp, #12
 8027b50:	4621      	mov	r1, r4
 8027b52:	4630      	mov	r0, r6
 8027b54:	f7ff fef6 	bl	8027944 <_printf_common>
 8027b58:	3001      	adds	r0, #1
 8027b5a:	d14d      	bne.n	8027bf8 <_printf_i+0x1c8>
 8027b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027b60:	b005      	add	sp, #20
 8027b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027b66:	4839      	ldr	r0, [pc, #228]	; (8027c4c <_printf_i+0x21c>)
 8027b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027b6c:	6813      	ldr	r3, [r2, #0]
 8027b6e:	6821      	ldr	r1, [r4, #0]
 8027b70:	1d1d      	adds	r5, r3, #4
 8027b72:	681b      	ldr	r3, [r3, #0]
 8027b74:	6015      	str	r5, [r2, #0]
 8027b76:	060a      	lsls	r2, r1, #24
 8027b78:	d50b      	bpl.n	8027b92 <_printf_i+0x162>
 8027b7a:	07ca      	lsls	r2, r1, #31
 8027b7c:	bf44      	itt	mi
 8027b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8027b82:	6021      	strmi	r1, [r4, #0]
 8027b84:	b91b      	cbnz	r3, 8027b8e <_printf_i+0x15e>
 8027b86:	6822      	ldr	r2, [r4, #0]
 8027b88:	f022 0220 	bic.w	r2, r2, #32
 8027b8c:	6022      	str	r2, [r4, #0]
 8027b8e:	2210      	movs	r2, #16
 8027b90:	e7b7      	b.n	8027b02 <_printf_i+0xd2>
 8027b92:	064d      	lsls	r5, r1, #25
 8027b94:	bf48      	it	mi
 8027b96:	b29b      	uxthmi	r3, r3
 8027b98:	e7ef      	b.n	8027b7a <_printf_i+0x14a>
 8027b9a:	4665      	mov	r5, ip
 8027b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8027ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8027ba4:	5cc3      	ldrb	r3, [r0, r3]
 8027ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8027baa:	460b      	mov	r3, r1
 8027bac:	2900      	cmp	r1, #0
 8027bae:	d1f5      	bne.n	8027b9c <_printf_i+0x16c>
 8027bb0:	e7b9      	b.n	8027b26 <_printf_i+0xf6>
 8027bb2:	6813      	ldr	r3, [r2, #0]
 8027bb4:	6825      	ldr	r5, [r4, #0]
 8027bb6:	6961      	ldr	r1, [r4, #20]
 8027bb8:	1d18      	adds	r0, r3, #4
 8027bba:	6010      	str	r0, [r2, #0]
 8027bbc:	0628      	lsls	r0, r5, #24
 8027bbe:	681b      	ldr	r3, [r3, #0]
 8027bc0:	d501      	bpl.n	8027bc6 <_printf_i+0x196>
 8027bc2:	6019      	str	r1, [r3, #0]
 8027bc4:	e002      	b.n	8027bcc <_printf_i+0x19c>
 8027bc6:	066a      	lsls	r2, r5, #25
 8027bc8:	d5fb      	bpl.n	8027bc2 <_printf_i+0x192>
 8027bca:	8019      	strh	r1, [r3, #0]
 8027bcc:	2300      	movs	r3, #0
 8027bce:	6123      	str	r3, [r4, #16]
 8027bd0:	4665      	mov	r5, ip
 8027bd2:	e7b9      	b.n	8027b48 <_printf_i+0x118>
 8027bd4:	6813      	ldr	r3, [r2, #0]
 8027bd6:	1d19      	adds	r1, r3, #4
 8027bd8:	6011      	str	r1, [r2, #0]
 8027bda:	681d      	ldr	r5, [r3, #0]
 8027bdc:	6862      	ldr	r2, [r4, #4]
 8027bde:	2100      	movs	r1, #0
 8027be0:	4628      	mov	r0, r5
 8027be2:	f7d8 fb0d 	bl	8000200 <memchr>
 8027be6:	b108      	cbz	r0, 8027bec <_printf_i+0x1bc>
 8027be8:	1b40      	subs	r0, r0, r5
 8027bea:	6060      	str	r0, [r4, #4]
 8027bec:	6863      	ldr	r3, [r4, #4]
 8027bee:	6123      	str	r3, [r4, #16]
 8027bf0:	2300      	movs	r3, #0
 8027bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027bf6:	e7a7      	b.n	8027b48 <_printf_i+0x118>
 8027bf8:	6923      	ldr	r3, [r4, #16]
 8027bfa:	462a      	mov	r2, r5
 8027bfc:	4639      	mov	r1, r7
 8027bfe:	4630      	mov	r0, r6
 8027c00:	47c0      	blx	r8
 8027c02:	3001      	adds	r0, #1
 8027c04:	d0aa      	beq.n	8027b5c <_printf_i+0x12c>
 8027c06:	6823      	ldr	r3, [r4, #0]
 8027c08:	079b      	lsls	r3, r3, #30
 8027c0a:	d413      	bmi.n	8027c34 <_printf_i+0x204>
 8027c0c:	68e0      	ldr	r0, [r4, #12]
 8027c0e:	9b03      	ldr	r3, [sp, #12]
 8027c10:	4298      	cmp	r0, r3
 8027c12:	bfb8      	it	lt
 8027c14:	4618      	movlt	r0, r3
 8027c16:	e7a3      	b.n	8027b60 <_printf_i+0x130>
 8027c18:	2301      	movs	r3, #1
 8027c1a:	464a      	mov	r2, r9
 8027c1c:	4639      	mov	r1, r7
 8027c1e:	4630      	mov	r0, r6
 8027c20:	47c0      	blx	r8
 8027c22:	3001      	adds	r0, #1
 8027c24:	d09a      	beq.n	8027b5c <_printf_i+0x12c>
 8027c26:	3501      	adds	r5, #1
 8027c28:	68e3      	ldr	r3, [r4, #12]
 8027c2a:	9a03      	ldr	r2, [sp, #12]
 8027c2c:	1a9b      	subs	r3, r3, r2
 8027c2e:	42ab      	cmp	r3, r5
 8027c30:	dcf2      	bgt.n	8027c18 <_printf_i+0x1e8>
 8027c32:	e7eb      	b.n	8027c0c <_printf_i+0x1dc>
 8027c34:	2500      	movs	r5, #0
 8027c36:	f104 0919 	add.w	r9, r4, #25
 8027c3a:	e7f5      	b.n	8027c28 <_printf_i+0x1f8>
 8027c3c:	2b00      	cmp	r3, #0
 8027c3e:	d1ac      	bne.n	8027b9a <_printf_i+0x16a>
 8027c40:	7803      	ldrb	r3, [r0, #0]
 8027c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027c4a:	e76c      	b.n	8027b26 <_printf_i+0xf6>
 8027c4c:	08044fe8 	.word	0x08044fe8
 8027c50:	08044ff9 	.word	0x08044ff9

08027c54 <_sbrk_r>:
 8027c54:	b538      	push	{r3, r4, r5, lr}
 8027c56:	4c06      	ldr	r4, [pc, #24]	; (8027c70 <_sbrk_r+0x1c>)
 8027c58:	2300      	movs	r3, #0
 8027c5a:	4605      	mov	r5, r0
 8027c5c:	4608      	mov	r0, r1
 8027c5e:	6023      	str	r3, [r4, #0]
 8027c60:	f7d9 fe5c 	bl	800191c <_sbrk>
 8027c64:	1c43      	adds	r3, r0, #1
 8027c66:	d102      	bne.n	8027c6e <_sbrk_r+0x1a>
 8027c68:	6823      	ldr	r3, [r4, #0]
 8027c6a:	b103      	cbz	r3, 8027c6e <_sbrk_r+0x1a>
 8027c6c:	602b      	str	r3, [r5, #0]
 8027c6e:	bd38      	pop	{r3, r4, r5, pc}
 8027c70:	200073e0 	.word	0x200073e0

08027c74 <sniprintf>:
 8027c74:	b40c      	push	{r2, r3}
 8027c76:	b530      	push	{r4, r5, lr}
 8027c78:	4b17      	ldr	r3, [pc, #92]	; (8027cd8 <sniprintf+0x64>)
 8027c7a:	1e0c      	subs	r4, r1, #0
 8027c7c:	b09d      	sub	sp, #116	; 0x74
 8027c7e:	681d      	ldr	r5, [r3, #0]
 8027c80:	da08      	bge.n	8027c94 <sniprintf+0x20>
 8027c82:	238b      	movs	r3, #139	; 0x8b
 8027c84:	602b      	str	r3, [r5, #0]
 8027c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027c8a:	b01d      	add	sp, #116	; 0x74
 8027c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027c90:	b002      	add	sp, #8
 8027c92:	4770      	bx	lr
 8027c94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8027c98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8027c9c:	bf14      	ite	ne
 8027c9e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8027ca2:	4623      	moveq	r3, r4
 8027ca4:	9304      	str	r3, [sp, #16]
 8027ca6:	9307      	str	r3, [sp, #28]
 8027ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027cac:	9002      	str	r0, [sp, #8]
 8027cae:	9006      	str	r0, [sp, #24]
 8027cb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027cb6:	ab21      	add	r3, sp, #132	; 0x84
 8027cb8:	a902      	add	r1, sp, #8
 8027cba:	4628      	mov	r0, r5
 8027cbc:	9301      	str	r3, [sp, #4]
 8027cbe:	f001 f9db 	bl	8029078 <_svfiprintf_r>
 8027cc2:	1c43      	adds	r3, r0, #1
 8027cc4:	bfbc      	itt	lt
 8027cc6:	238b      	movlt	r3, #139	; 0x8b
 8027cc8:	602b      	strlt	r3, [r5, #0]
 8027cca:	2c00      	cmp	r4, #0
 8027ccc:	d0dd      	beq.n	8027c8a <sniprintf+0x16>
 8027cce:	9b02      	ldr	r3, [sp, #8]
 8027cd0:	2200      	movs	r2, #0
 8027cd2:	701a      	strb	r2, [r3, #0]
 8027cd4:	e7d9      	b.n	8027c8a <sniprintf+0x16>
 8027cd6:	bf00      	nop
 8027cd8:	20002858 	.word	0x20002858

08027cdc <siscanf>:
 8027cdc:	b40e      	push	{r1, r2, r3}
 8027cde:	b530      	push	{r4, r5, lr}
 8027ce0:	b09c      	sub	sp, #112	; 0x70
 8027ce2:	ac1f      	add	r4, sp, #124	; 0x7c
 8027ce4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8027ce8:	f854 5b04 	ldr.w	r5, [r4], #4
 8027cec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8027cf0:	9002      	str	r0, [sp, #8]
 8027cf2:	9006      	str	r0, [sp, #24]
 8027cf4:	f7d8 fa76 	bl	80001e4 <strlen>
 8027cf8:	4b0b      	ldr	r3, [pc, #44]	; (8027d28 <siscanf+0x4c>)
 8027cfa:	9003      	str	r0, [sp, #12]
 8027cfc:	9007      	str	r0, [sp, #28]
 8027cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d00:	480a      	ldr	r0, [pc, #40]	; (8027d2c <siscanf+0x50>)
 8027d02:	9401      	str	r4, [sp, #4]
 8027d04:	2300      	movs	r3, #0
 8027d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8027d08:	9314      	str	r3, [sp, #80]	; 0x50
 8027d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027d0e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027d12:	462a      	mov	r2, r5
 8027d14:	4623      	mov	r3, r4
 8027d16:	a902      	add	r1, sp, #8
 8027d18:	6800      	ldr	r0, [r0, #0]
 8027d1a:	f001 faff 	bl	802931c <__ssvfiscanf_r>
 8027d1e:	b01c      	add	sp, #112	; 0x70
 8027d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027d24:	b003      	add	sp, #12
 8027d26:	4770      	bx	lr
 8027d28:	08027d31 	.word	0x08027d31
 8027d2c:	20002858 	.word	0x20002858

08027d30 <__seofread>:
 8027d30:	2000      	movs	r0, #0
 8027d32:	4770      	bx	lr

08027d34 <strcpy>:
 8027d34:	4603      	mov	r3, r0
 8027d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027d3a:	f803 2b01 	strb.w	r2, [r3], #1
 8027d3e:	2a00      	cmp	r2, #0
 8027d40:	d1f9      	bne.n	8027d36 <strcpy+0x2>
 8027d42:	4770      	bx	lr

08027d44 <quorem>:
 8027d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d48:	6903      	ldr	r3, [r0, #16]
 8027d4a:	690c      	ldr	r4, [r1, #16]
 8027d4c:	42a3      	cmp	r3, r4
 8027d4e:	4680      	mov	r8, r0
 8027d50:	f2c0 8082 	blt.w	8027e58 <quorem+0x114>
 8027d54:	3c01      	subs	r4, #1
 8027d56:	f101 0714 	add.w	r7, r1, #20
 8027d5a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8027d5e:	f100 0614 	add.w	r6, r0, #20
 8027d62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8027d66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8027d6a:	eb06 030c 	add.w	r3, r6, ip
 8027d6e:	3501      	adds	r5, #1
 8027d70:	eb07 090c 	add.w	r9, r7, ip
 8027d74:	9301      	str	r3, [sp, #4]
 8027d76:	fbb0 f5f5 	udiv	r5, r0, r5
 8027d7a:	b395      	cbz	r5, 8027de2 <quorem+0x9e>
 8027d7c:	f04f 0a00 	mov.w	sl, #0
 8027d80:	4638      	mov	r0, r7
 8027d82:	46b6      	mov	lr, r6
 8027d84:	46d3      	mov	fp, sl
 8027d86:	f850 2b04 	ldr.w	r2, [r0], #4
 8027d8a:	b293      	uxth	r3, r2
 8027d8c:	fb05 a303 	mla	r3, r5, r3, sl
 8027d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027d94:	b29b      	uxth	r3, r3
 8027d96:	ebab 0303 	sub.w	r3, fp, r3
 8027d9a:	0c12      	lsrs	r2, r2, #16
 8027d9c:	f8de b000 	ldr.w	fp, [lr]
 8027da0:	fb05 a202 	mla	r2, r5, r2, sl
 8027da4:	fa13 f38b 	uxtah	r3, r3, fp
 8027da8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8027dac:	fa1f fb82 	uxth.w	fp, r2
 8027db0:	f8de 2000 	ldr.w	r2, [lr]
 8027db4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8027db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027dbc:	b29b      	uxth	r3, r3
 8027dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027dc2:	4581      	cmp	r9, r0
 8027dc4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8027dc8:	f84e 3b04 	str.w	r3, [lr], #4
 8027dcc:	d2db      	bcs.n	8027d86 <quorem+0x42>
 8027dce:	f856 300c 	ldr.w	r3, [r6, ip]
 8027dd2:	b933      	cbnz	r3, 8027de2 <quorem+0x9e>
 8027dd4:	9b01      	ldr	r3, [sp, #4]
 8027dd6:	3b04      	subs	r3, #4
 8027dd8:	429e      	cmp	r6, r3
 8027dda:	461a      	mov	r2, r3
 8027ddc:	d330      	bcc.n	8027e40 <quorem+0xfc>
 8027dde:	f8c8 4010 	str.w	r4, [r8, #16]
 8027de2:	4640      	mov	r0, r8
 8027de4:	f001 f81a 	bl	8028e1c <__mcmp>
 8027de8:	2800      	cmp	r0, #0
 8027dea:	db25      	blt.n	8027e38 <quorem+0xf4>
 8027dec:	3501      	adds	r5, #1
 8027dee:	4630      	mov	r0, r6
 8027df0:	f04f 0c00 	mov.w	ip, #0
 8027df4:	f857 2b04 	ldr.w	r2, [r7], #4
 8027df8:	f8d0 e000 	ldr.w	lr, [r0]
 8027dfc:	b293      	uxth	r3, r2
 8027dfe:	ebac 0303 	sub.w	r3, ip, r3
 8027e02:	0c12      	lsrs	r2, r2, #16
 8027e04:	fa13 f38e 	uxtah	r3, r3, lr
 8027e08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027e0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027e10:	b29b      	uxth	r3, r3
 8027e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027e16:	45b9      	cmp	r9, r7
 8027e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8027e1c:	f840 3b04 	str.w	r3, [r0], #4
 8027e20:	d2e8      	bcs.n	8027df4 <quorem+0xb0>
 8027e22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8027e26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8027e2a:	b92a      	cbnz	r2, 8027e38 <quorem+0xf4>
 8027e2c:	3b04      	subs	r3, #4
 8027e2e:	429e      	cmp	r6, r3
 8027e30:	461a      	mov	r2, r3
 8027e32:	d30b      	bcc.n	8027e4c <quorem+0x108>
 8027e34:	f8c8 4010 	str.w	r4, [r8, #16]
 8027e38:	4628      	mov	r0, r5
 8027e3a:	b003      	add	sp, #12
 8027e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e40:	6812      	ldr	r2, [r2, #0]
 8027e42:	3b04      	subs	r3, #4
 8027e44:	2a00      	cmp	r2, #0
 8027e46:	d1ca      	bne.n	8027dde <quorem+0x9a>
 8027e48:	3c01      	subs	r4, #1
 8027e4a:	e7c5      	b.n	8027dd8 <quorem+0x94>
 8027e4c:	6812      	ldr	r2, [r2, #0]
 8027e4e:	3b04      	subs	r3, #4
 8027e50:	2a00      	cmp	r2, #0
 8027e52:	d1ef      	bne.n	8027e34 <quorem+0xf0>
 8027e54:	3c01      	subs	r4, #1
 8027e56:	e7ea      	b.n	8027e2e <quorem+0xea>
 8027e58:	2000      	movs	r0, #0
 8027e5a:	e7ee      	b.n	8027e3a <quorem+0xf6>
 8027e5c:	0000      	movs	r0, r0
	...

08027e60 <_dtoa_r>:
 8027e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e64:	ec57 6b10 	vmov	r6, r7, d0
 8027e68:	b097      	sub	sp, #92	; 0x5c
 8027e6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027e6c:	9106      	str	r1, [sp, #24]
 8027e6e:	4604      	mov	r4, r0
 8027e70:	920b      	str	r2, [sp, #44]	; 0x2c
 8027e72:	9312      	str	r3, [sp, #72]	; 0x48
 8027e74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8027e78:	e9cd 6700 	strd	r6, r7, [sp]
 8027e7c:	b93d      	cbnz	r5, 8027e8e <_dtoa_r+0x2e>
 8027e7e:	2010      	movs	r0, #16
 8027e80:	f7ff f9c0 	bl	8027204 <malloc>
 8027e84:	6260      	str	r0, [r4, #36]	; 0x24
 8027e86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027e8a:	6005      	str	r5, [r0, #0]
 8027e8c:	60c5      	str	r5, [r0, #12]
 8027e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027e90:	6819      	ldr	r1, [r3, #0]
 8027e92:	b151      	cbz	r1, 8027eaa <_dtoa_r+0x4a>
 8027e94:	685a      	ldr	r2, [r3, #4]
 8027e96:	604a      	str	r2, [r1, #4]
 8027e98:	2301      	movs	r3, #1
 8027e9a:	4093      	lsls	r3, r2
 8027e9c:	608b      	str	r3, [r1, #8]
 8027e9e:	4620      	mov	r0, r4
 8027ea0:	f000 fdda 	bl	8028a58 <_Bfree>
 8027ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027ea6:	2200      	movs	r2, #0
 8027ea8:	601a      	str	r2, [r3, #0]
 8027eaa:	1e3b      	subs	r3, r7, #0
 8027eac:	bfbb      	ittet	lt
 8027eae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8027eb2:	9301      	strlt	r3, [sp, #4]
 8027eb4:	2300      	movge	r3, #0
 8027eb6:	2201      	movlt	r2, #1
 8027eb8:	bfac      	ite	ge
 8027eba:	f8c8 3000 	strge.w	r3, [r8]
 8027ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8027ec2:	4baf      	ldr	r3, [pc, #700]	; (8028180 <_dtoa_r+0x320>)
 8027ec4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027ec8:	ea33 0308 	bics.w	r3, r3, r8
 8027ecc:	d114      	bne.n	8027ef8 <_dtoa_r+0x98>
 8027ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027ed0:	f242 730f 	movw	r3, #9999	; 0x270f
 8027ed4:	6013      	str	r3, [r2, #0]
 8027ed6:	9b00      	ldr	r3, [sp, #0]
 8027ed8:	b923      	cbnz	r3, 8027ee4 <_dtoa_r+0x84>
 8027eda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8027ede:	2800      	cmp	r0, #0
 8027ee0:	f000 8542 	beq.w	8028968 <_dtoa_r+0xb08>
 8027ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027ee6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8028194 <_dtoa_r+0x334>
 8027eea:	2b00      	cmp	r3, #0
 8027eec:	f000 8544 	beq.w	8028978 <_dtoa_r+0xb18>
 8027ef0:	f10b 0303 	add.w	r3, fp, #3
 8027ef4:	f000 bd3e 	b.w	8028974 <_dtoa_r+0xb14>
 8027ef8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8027efc:	2200      	movs	r2, #0
 8027efe:	2300      	movs	r3, #0
 8027f00:	4630      	mov	r0, r6
 8027f02:	4639      	mov	r1, r7
 8027f04:	f7d8 fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8027f08:	4681      	mov	r9, r0
 8027f0a:	b168      	cbz	r0, 8027f28 <_dtoa_r+0xc8>
 8027f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027f0e:	2301      	movs	r3, #1
 8027f10:	6013      	str	r3, [r2, #0]
 8027f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	f000 8524 	beq.w	8028962 <_dtoa_r+0xb02>
 8027f1a:	4b9a      	ldr	r3, [pc, #616]	; (8028184 <_dtoa_r+0x324>)
 8027f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027f1e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8027f22:	6013      	str	r3, [r2, #0]
 8027f24:	f000 bd28 	b.w	8028978 <_dtoa_r+0xb18>
 8027f28:	aa14      	add	r2, sp, #80	; 0x50
 8027f2a:	a915      	add	r1, sp, #84	; 0x54
 8027f2c:	ec47 6b10 	vmov	d0, r6, r7
 8027f30:	4620      	mov	r0, r4
 8027f32:	f000 ffea 	bl	8028f0a <__d2b>
 8027f36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8027f3a:	9004      	str	r0, [sp, #16]
 8027f3c:	2d00      	cmp	r5, #0
 8027f3e:	d07c      	beq.n	802803a <_dtoa_r+0x1da>
 8027f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027f44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8027f48:	46b2      	mov	sl, r6
 8027f4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8027f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8027f52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8027f56:	2200      	movs	r2, #0
 8027f58:	4b8b      	ldr	r3, [pc, #556]	; (8028188 <_dtoa_r+0x328>)
 8027f5a:	4650      	mov	r0, sl
 8027f5c:	4659      	mov	r1, fp
 8027f5e:	f7d8 f9a3 	bl	80002a8 <__aeabi_dsub>
 8027f62:	a381      	add	r3, pc, #516	; (adr r3, 8028168 <_dtoa_r+0x308>)
 8027f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f68:	f7d8 fb56 	bl	8000618 <__aeabi_dmul>
 8027f6c:	a380      	add	r3, pc, #512	; (adr r3, 8028170 <_dtoa_r+0x310>)
 8027f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f72:	f7d8 f99b 	bl	80002ac <__adddf3>
 8027f76:	4606      	mov	r6, r0
 8027f78:	4628      	mov	r0, r5
 8027f7a:	460f      	mov	r7, r1
 8027f7c:	f7d8 fae2 	bl	8000544 <__aeabi_i2d>
 8027f80:	a37d      	add	r3, pc, #500	; (adr r3, 8028178 <_dtoa_r+0x318>)
 8027f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f86:	f7d8 fb47 	bl	8000618 <__aeabi_dmul>
 8027f8a:	4602      	mov	r2, r0
 8027f8c:	460b      	mov	r3, r1
 8027f8e:	4630      	mov	r0, r6
 8027f90:	4639      	mov	r1, r7
 8027f92:	f7d8 f98b 	bl	80002ac <__adddf3>
 8027f96:	4606      	mov	r6, r0
 8027f98:	460f      	mov	r7, r1
 8027f9a:	f7d8 fded 	bl	8000b78 <__aeabi_d2iz>
 8027f9e:	2200      	movs	r2, #0
 8027fa0:	4682      	mov	sl, r0
 8027fa2:	2300      	movs	r3, #0
 8027fa4:	4630      	mov	r0, r6
 8027fa6:	4639      	mov	r1, r7
 8027fa8:	f7d8 fda8 	bl	8000afc <__aeabi_dcmplt>
 8027fac:	b148      	cbz	r0, 8027fc2 <_dtoa_r+0x162>
 8027fae:	4650      	mov	r0, sl
 8027fb0:	f7d8 fac8 	bl	8000544 <__aeabi_i2d>
 8027fb4:	4632      	mov	r2, r6
 8027fb6:	463b      	mov	r3, r7
 8027fb8:	f7d8 fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 8027fbc:	b908      	cbnz	r0, 8027fc2 <_dtoa_r+0x162>
 8027fbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8027fc2:	f1ba 0f16 	cmp.w	sl, #22
 8027fc6:	d859      	bhi.n	802807c <_dtoa_r+0x21c>
 8027fc8:	4970      	ldr	r1, [pc, #448]	; (802818c <_dtoa_r+0x32c>)
 8027fca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8027fce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027fd6:	f7d8 fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8027fda:	2800      	cmp	r0, #0
 8027fdc:	d050      	beq.n	8028080 <_dtoa_r+0x220>
 8027fde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8027fe2:	2300      	movs	r3, #0
 8027fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8027fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027fe8:	1b5d      	subs	r5, r3, r5
 8027fea:	f1b5 0801 	subs.w	r8, r5, #1
 8027fee:	bf49      	itett	mi
 8027ff0:	f1c5 0301 	rsbmi	r3, r5, #1
 8027ff4:	2300      	movpl	r3, #0
 8027ff6:	9305      	strmi	r3, [sp, #20]
 8027ff8:	f04f 0800 	movmi.w	r8, #0
 8027ffc:	bf58      	it	pl
 8027ffe:	9305      	strpl	r3, [sp, #20]
 8028000:	f1ba 0f00 	cmp.w	sl, #0
 8028004:	db3e      	blt.n	8028084 <_dtoa_r+0x224>
 8028006:	2300      	movs	r3, #0
 8028008:	44d0      	add	r8, sl
 802800a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802800e:	9307      	str	r3, [sp, #28]
 8028010:	9b06      	ldr	r3, [sp, #24]
 8028012:	2b09      	cmp	r3, #9
 8028014:	f200 8090 	bhi.w	8028138 <_dtoa_r+0x2d8>
 8028018:	2b05      	cmp	r3, #5
 802801a:	bfc4      	itt	gt
 802801c:	3b04      	subgt	r3, #4
 802801e:	9306      	strgt	r3, [sp, #24]
 8028020:	9b06      	ldr	r3, [sp, #24]
 8028022:	f1a3 0302 	sub.w	r3, r3, #2
 8028026:	bfcc      	ite	gt
 8028028:	2500      	movgt	r5, #0
 802802a:	2501      	movle	r5, #1
 802802c:	2b03      	cmp	r3, #3
 802802e:	f200 808f 	bhi.w	8028150 <_dtoa_r+0x2f0>
 8028032:	e8df f003 	tbb	[pc, r3]
 8028036:	7f7d      	.short	0x7f7d
 8028038:	7131      	.short	0x7131
 802803a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802803e:	441d      	add	r5, r3
 8028040:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8028044:	2820      	cmp	r0, #32
 8028046:	dd13      	ble.n	8028070 <_dtoa_r+0x210>
 8028048:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802804c:	9b00      	ldr	r3, [sp, #0]
 802804e:	fa08 f800 	lsl.w	r8, r8, r0
 8028052:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8028056:	fa23 f000 	lsr.w	r0, r3, r0
 802805a:	ea48 0000 	orr.w	r0, r8, r0
 802805e:	f7d8 fa61 	bl	8000524 <__aeabi_ui2d>
 8028062:	2301      	movs	r3, #1
 8028064:	4682      	mov	sl, r0
 8028066:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802806a:	3d01      	subs	r5, #1
 802806c:	9313      	str	r3, [sp, #76]	; 0x4c
 802806e:	e772      	b.n	8027f56 <_dtoa_r+0xf6>
 8028070:	9b00      	ldr	r3, [sp, #0]
 8028072:	f1c0 0020 	rsb	r0, r0, #32
 8028076:	fa03 f000 	lsl.w	r0, r3, r0
 802807a:	e7f0      	b.n	802805e <_dtoa_r+0x1fe>
 802807c:	2301      	movs	r3, #1
 802807e:	e7b1      	b.n	8027fe4 <_dtoa_r+0x184>
 8028080:	900f      	str	r0, [sp, #60]	; 0x3c
 8028082:	e7b0      	b.n	8027fe6 <_dtoa_r+0x186>
 8028084:	9b05      	ldr	r3, [sp, #20]
 8028086:	eba3 030a 	sub.w	r3, r3, sl
 802808a:	9305      	str	r3, [sp, #20]
 802808c:	f1ca 0300 	rsb	r3, sl, #0
 8028090:	9307      	str	r3, [sp, #28]
 8028092:	2300      	movs	r3, #0
 8028094:	930e      	str	r3, [sp, #56]	; 0x38
 8028096:	e7bb      	b.n	8028010 <_dtoa_r+0x1b0>
 8028098:	2301      	movs	r3, #1
 802809a:	930a      	str	r3, [sp, #40]	; 0x28
 802809c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802809e:	2b00      	cmp	r3, #0
 80280a0:	dd59      	ble.n	8028156 <_dtoa_r+0x2f6>
 80280a2:	9302      	str	r3, [sp, #8]
 80280a4:	4699      	mov	r9, r3
 80280a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80280a8:	2200      	movs	r2, #0
 80280aa:	6072      	str	r2, [r6, #4]
 80280ac:	2204      	movs	r2, #4
 80280ae:	f102 0014 	add.w	r0, r2, #20
 80280b2:	4298      	cmp	r0, r3
 80280b4:	6871      	ldr	r1, [r6, #4]
 80280b6:	d953      	bls.n	8028160 <_dtoa_r+0x300>
 80280b8:	4620      	mov	r0, r4
 80280ba:	f000 fc99 	bl	80289f0 <_Balloc>
 80280be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80280c0:	6030      	str	r0, [r6, #0]
 80280c2:	f1b9 0f0e 	cmp.w	r9, #14
 80280c6:	f8d3 b000 	ldr.w	fp, [r3]
 80280ca:	f200 80e6 	bhi.w	802829a <_dtoa_r+0x43a>
 80280ce:	2d00      	cmp	r5, #0
 80280d0:	f000 80e3 	beq.w	802829a <_dtoa_r+0x43a>
 80280d4:	ed9d 7b00 	vldr	d7, [sp]
 80280d8:	f1ba 0f00 	cmp.w	sl, #0
 80280dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80280e0:	dd74      	ble.n	80281cc <_dtoa_r+0x36c>
 80280e2:	4a2a      	ldr	r2, [pc, #168]	; (802818c <_dtoa_r+0x32c>)
 80280e4:	f00a 030f 	and.w	r3, sl, #15
 80280e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80280ec:	ed93 7b00 	vldr	d7, [r3]
 80280f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80280f4:	06f0      	lsls	r0, r6, #27
 80280f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80280fa:	d565      	bpl.n	80281c8 <_dtoa_r+0x368>
 80280fc:	4b24      	ldr	r3, [pc, #144]	; (8028190 <_dtoa_r+0x330>)
 80280fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8028102:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8028106:	f7d8 fbb1 	bl	800086c <__aeabi_ddiv>
 802810a:	e9cd 0100 	strd	r0, r1, [sp]
 802810e:	f006 060f 	and.w	r6, r6, #15
 8028112:	2503      	movs	r5, #3
 8028114:	4f1e      	ldr	r7, [pc, #120]	; (8028190 <_dtoa_r+0x330>)
 8028116:	e04c      	b.n	80281b2 <_dtoa_r+0x352>
 8028118:	2301      	movs	r3, #1
 802811a:	930a      	str	r3, [sp, #40]	; 0x28
 802811c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802811e:	4453      	add	r3, sl
 8028120:	f103 0901 	add.w	r9, r3, #1
 8028124:	9302      	str	r3, [sp, #8]
 8028126:	464b      	mov	r3, r9
 8028128:	2b01      	cmp	r3, #1
 802812a:	bfb8      	it	lt
 802812c:	2301      	movlt	r3, #1
 802812e:	e7ba      	b.n	80280a6 <_dtoa_r+0x246>
 8028130:	2300      	movs	r3, #0
 8028132:	e7b2      	b.n	802809a <_dtoa_r+0x23a>
 8028134:	2300      	movs	r3, #0
 8028136:	e7f0      	b.n	802811a <_dtoa_r+0x2ba>
 8028138:	2501      	movs	r5, #1
 802813a:	2300      	movs	r3, #0
 802813c:	9306      	str	r3, [sp, #24]
 802813e:	950a      	str	r5, [sp, #40]	; 0x28
 8028140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028144:	9302      	str	r3, [sp, #8]
 8028146:	4699      	mov	r9, r3
 8028148:	2200      	movs	r2, #0
 802814a:	2312      	movs	r3, #18
 802814c:	920b      	str	r2, [sp, #44]	; 0x2c
 802814e:	e7aa      	b.n	80280a6 <_dtoa_r+0x246>
 8028150:	2301      	movs	r3, #1
 8028152:	930a      	str	r3, [sp, #40]	; 0x28
 8028154:	e7f4      	b.n	8028140 <_dtoa_r+0x2e0>
 8028156:	2301      	movs	r3, #1
 8028158:	9302      	str	r3, [sp, #8]
 802815a:	4699      	mov	r9, r3
 802815c:	461a      	mov	r2, r3
 802815e:	e7f5      	b.n	802814c <_dtoa_r+0x2ec>
 8028160:	3101      	adds	r1, #1
 8028162:	6071      	str	r1, [r6, #4]
 8028164:	0052      	lsls	r2, r2, #1
 8028166:	e7a2      	b.n	80280ae <_dtoa_r+0x24e>
 8028168:	636f4361 	.word	0x636f4361
 802816c:	3fd287a7 	.word	0x3fd287a7
 8028170:	8b60c8b3 	.word	0x8b60c8b3
 8028174:	3fc68a28 	.word	0x3fc68a28
 8028178:	509f79fb 	.word	0x509f79fb
 802817c:	3fd34413 	.word	0x3fd34413
 8028180:	7ff00000 	.word	0x7ff00000
 8028184:	0804519c 	.word	0x0804519c
 8028188:	3ff80000 	.word	0x3ff80000
 802818c:	080450a0 	.word	0x080450a0
 8028190:	08045078 	.word	0x08045078
 8028194:	08045013 	.word	0x08045013
 8028198:	07f1      	lsls	r1, r6, #31
 802819a:	d508      	bpl.n	80281ae <_dtoa_r+0x34e>
 802819c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80281a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80281a4:	f7d8 fa38 	bl	8000618 <__aeabi_dmul>
 80281a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80281ac:	3501      	adds	r5, #1
 80281ae:	1076      	asrs	r6, r6, #1
 80281b0:	3708      	adds	r7, #8
 80281b2:	2e00      	cmp	r6, #0
 80281b4:	d1f0      	bne.n	8028198 <_dtoa_r+0x338>
 80281b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80281ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80281be:	f7d8 fb55 	bl	800086c <__aeabi_ddiv>
 80281c2:	e9cd 0100 	strd	r0, r1, [sp]
 80281c6:	e01a      	b.n	80281fe <_dtoa_r+0x39e>
 80281c8:	2502      	movs	r5, #2
 80281ca:	e7a3      	b.n	8028114 <_dtoa_r+0x2b4>
 80281cc:	f000 80a0 	beq.w	8028310 <_dtoa_r+0x4b0>
 80281d0:	f1ca 0600 	rsb	r6, sl, #0
 80281d4:	4b9f      	ldr	r3, [pc, #636]	; (8028454 <_dtoa_r+0x5f4>)
 80281d6:	4fa0      	ldr	r7, [pc, #640]	; (8028458 <_dtoa_r+0x5f8>)
 80281d8:	f006 020f 	and.w	r2, r6, #15
 80281dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80281e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80281e8:	f7d8 fa16 	bl	8000618 <__aeabi_dmul>
 80281ec:	e9cd 0100 	strd	r0, r1, [sp]
 80281f0:	1136      	asrs	r6, r6, #4
 80281f2:	2300      	movs	r3, #0
 80281f4:	2502      	movs	r5, #2
 80281f6:	2e00      	cmp	r6, #0
 80281f8:	d17f      	bne.n	80282fa <_dtoa_r+0x49a>
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	d1e1      	bne.n	80281c2 <_dtoa_r+0x362>
 80281fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028200:	2b00      	cmp	r3, #0
 8028202:	f000 8087 	beq.w	8028314 <_dtoa_r+0x4b4>
 8028206:	e9dd 6700 	ldrd	r6, r7, [sp]
 802820a:	2200      	movs	r2, #0
 802820c:	4b93      	ldr	r3, [pc, #588]	; (802845c <_dtoa_r+0x5fc>)
 802820e:	4630      	mov	r0, r6
 8028210:	4639      	mov	r1, r7
 8028212:	f7d8 fc73 	bl	8000afc <__aeabi_dcmplt>
 8028216:	2800      	cmp	r0, #0
 8028218:	d07c      	beq.n	8028314 <_dtoa_r+0x4b4>
 802821a:	f1b9 0f00 	cmp.w	r9, #0
 802821e:	d079      	beq.n	8028314 <_dtoa_r+0x4b4>
 8028220:	9b02      	ldr	r3, [sp, #8]
 8028222:	2b00      	cmp	r3, #0
 8028224:	dd35      	ble.n	8028292 <_dtoa_r+0x432>
 8028226:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802822a:	9308      	str	r3, [sp, #32]
 802822c:	4639      	mov	r1, r7
 802822e:	2200      	movs	r2, #0
 8028230:	4b8b      	ldr	r3, [pc, #556]	; (8028460 <_dtoa_r+0x600>)
 8028232:	4630      	mov	r0, r6
 8028234:	f7d8 f9f0 	bl	8000618 <__aeabi_dmul>
 8028238:	e9cd 0100 	strd	r0, r1, [sp]
 802823c:	9f02      	ldr	r7, [sp, #8]
 802823e:	3501      	adds	r5, #1
 8028240:	4628      	mov	r0, r5
 8028242:	f7d8 f97f 	bl	8000544 <__aeabi_i2d>
 8028246:	e9dd 2300 	ldrd	r2, r3, [sp]
 802824a:	f7d8 f9e5 	bl	8000618 <__aeabi_dmul>
 802824e:	2200      	movs	r2, #0
 8028250:	4b84      	ldr	r3, [pc, #528]	; (8028464 <_dtoa_r+0x604>)
 8028252:	f7d8 f82b 	bl	80002ac <__adddf3>
 8028256:	4605      	mov	r5, r0
 8028258:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802825c:	2f00      	cmp	r7, #0
 802825e:	d15d      	bne.n	802831c <_dtoa_r+0x4bc>
 8028260:	2200      	movs	r2, #0
 8028262:	4b81      	ldr	r3, [pc, #516]	; (8028468 <_dtoa_r+0x608>)
 8028264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028268:	f7d8 f81e 	bl	80002a8 <__aeabi_dsub>
 802826c:	462a      	mov	r2, r5
 802826e:	4633      	mov	r3, r6
 8028270:	e9cd 0100 	strd	r0, r1, [sp]
 8028274:	f7d8 fc60 	bl	8000b38 <__aeabi_dcmpgt>
 8028278:	2800      	cmp	r0, #0
 802827a:	f040 8288 	bne.w	802878e <_dtoa_r+0x92e>
 802827e:	462a      	mov	r2, r5
 8028280:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8028284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028288:	f7d8 fc38 	bl	8000afc <__aeabi_dcmplt>
 802828c:	2800      	cmp	r0, #0
 802828e:	f040 827c 	bne.w	802878a <_dtoa_r+0x92a>
 8028292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8028296:	e9cd 2300 	strd	r2, r3, [sp]
 802829a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802829c:	2b00      	cmp	r3, #0
 802829e:	f2c0 8150 	blt.w	8028542 <_dtoa_r+0x6e2>
 80282a2:	f1ba 0f0e 	cmp.w	sl, #14
 80282a6:	f300 814c 	bgt.w	8028542 <_dtoa_r+0x6e2>
 80282aa:	4b6a      	ldr	r3, [pc, #424]	; (8028454 <_dtoa_r+0x5f4>)
 80282ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80282b0:	ed93 7b00 	vldr	d7, [r3]
 80282b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80282b6:	2b00      	cmp	r3, #0
 80282b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80282bc:	f280 80d8 	bge.w	8028470 <_dtoa_r+0x610>
 80282c0:	f1b9 0f00 	cmp.w	r9, #0
 80282c4:	f300 80d4 	bgt.w	8028470 <_dtoa_r+0x610>
 80282c8:	f040 825e 	bne.w	8028788 <_dtoa_r+0x928>
 80282cc:	2200      	movs	r2, #0
 80282ce:	4b66      	ldr	r3, [pc, #408]	; (8028468 <_dtoa_r+0x608>)
 80282d0:	ec51 0b17 	vmov	r0, r1, d7
 80282d4:	f7d8 f9a0 	bl	8000618 <__aeabi_dmul>
 80282d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80282dc:	f7d8 fc22 	bl	8000b24 <__aeabi_dcmpge>
 80282e0:	464f      	mov	r7, r9
 80282e2:	464e      	mov	r6, r9
 80282e4:	2800      	cmp	r0, #0
 80282e6:	f040 8234 	bne.w	8028752 <_dtoa_r+0x8f2>
 80282ea:	2331      	movs	r3, #49	; 0x31
 80282ec:	f10b 0501 	add.w	r5, fp, #1
 80282f0:	f88b 3000 	strb.w	r3, [fp]
 80282f4:	f10a 0a01 	add.w	sl, sl, #1
 80282f8:	e22f      	b.n	802875a <_dtoa_r+0x8fa>
 80282fa:	07f2      	lsls	r2, r6, #31
 80282fc:	d505      	bpl.n	802830a <_dtoa_r+0x4aa>
 80282fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028302:	f7d8 f989 	bl	8000618 <__aeabi_dmul>
 8028306:	3501      	adds	r5, #1
 8028308:	2301      	movs	r3, #1
 802830a:	1076      	asrs	r6, r6, #1
 802830c:	3708      	adds	r7, #8
 802830e:	e772      	b.n	80281f6 <_dtoa_r+0x396>
 8028310:	2502      	movs	r5, #2
 8028312:	e774      	b.n	80281fe <_dtoa_r+0x39e>
 8028314:	f8cd a020 	str.w	sl, [sp, #32]
 8028318:	464f      	mov	r7, r9
 802831a:	e791      	b.n	8028240 <_dtoa_r+0x3e0>
 802831c:	4b4d      	ldr	r3, [pc, #308]	; (8028454 <_dtoa_r+0x5f4>)
 802831e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8028322:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8028326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028328:	2b00      	cmp	r3, #0
 802832a:	d047      	beq.n	80283bc <_dtoa_r+0x55c>
 802832c:	4602      	mov	r2, r0
 802832e:	460b      	mov	r3, r1
 8028330:	2000      	movs	r0, #0
 8028332:	494e      	ldr	r1, [pc, #312]	; (802846c <_dtoa_r+0x60c>)
 8028334:	f7d8 fa9a 	bl	800086c <__aeabi_ddiv>
 8028338:	462a      	mov	r2, r5
 802833a:	4633      	mov	r3, r6
 802833c:	f7d7 ffb4 	bl	80002a8 <__aeabi_dsub>
 8028340:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028344:	465d      	mov	r5, fp
 8028346:	e9dd 0100 	ldrd	r0, r1, [sp]
 802834a:	f7d8 fc15 	bl	8000b78 <__aeabi_d2iz>
 802834e:	4606      	mov	r6, r0
 8028350:	f7d8 f8f8 	bl	8000544 <__aeabi_i2d>
 8028354:	4602      	mov	r2, r0
 8028356:	460b      	mov	r3, r1
 8028358:	e9dd 0100 	ldrd	r0, r1, [sp]
 802835c:	f7d7 ffa4 	bl	80002a8 <__aeabi_dsub>
 8028360:	3630      	adds	r6, #48	; 0x30
 8028362:	f805 6b01 	strb.w	r6, [r5], #1
 8028366:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802836a:	e9cd 0100 	strd	r0, r1, [sp]
 802836e:	f7d8 fbc5 	bl	8000afc <__aeabi_dcmplt>
 8028372:	2800      	cmp	r0, #0
 8028374:	d163      	bne.n	802843e <_dtoa_r+0x5de>
 8028376:	e9dd 2300 	ldrd	r2, r3, [sp]
 802837a:	2000      	movs	r0, #0
 802837c:	4937      	ldr	r1, [pc, #220]	; (802845c <_dtoa_r+0x5fc>)
 802837e:	f7d7 ff93 	bl	80002a8 <__aeabi_dsub>
 8028382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8028386:	f7d8 fbb9 	bl	8000afc <__aeabi_dcmplt>
 802838a:	2800      	cmp	r0, #0
 802838c:	f040 80b7 	bne.w	80284fe <_dtoa_r+0x69e>
 8028390:	eba5 030b 	sub.w	r3, r5, fp
 8028394:	429f      	cmp	r7, r3
 8028396:	f77f af7c 	ble.w	8028292 <_dtoa_r+0x432>
 802839a:	2200      	movs	r2, #0
 802839c:	4b30      	ldr	r3, [pc, #192]	; (8028460 <_dtoa_r+0x600>)
 802839e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80283a2:	f7d8 f939 	bl	8000618 <__aeabi_dmul>
 80283a6:	2200      	movs	r2, #0
 80283a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80283ac:	4b2c      	ldr	r3, [pc, #176]	; (8028460 <_dtoa_r+0x600>)
 80283ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80283b2:	f7d8 f931 	bl	8000618 <__aeabi_dmul>
 80283b6:	e9cd 0100 	strd	r0, r1, [sp]
 80283ba:	e7c4      	b.n	8028346 <_dtoa_r+0x4e6>
 80283bc:	462a      	mov	r2, r5
 80283be:	4633      	mov	r3, r6
 80283c0:	f7d8 f92a 	bl	8000618 <__aeabi_dmul>
 80283c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80283c8:	eb0b 0507 	add.w	r5, fp, r7
 80283cc:	465e      	mov	r6, fp
 80283ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80283d2:	f7d8 fbd1 	bl	8000b78 <__aeabi_d2iz>
 80283d6:	4607      	mov	r7, r0
 80283d8:	f7d8 f8b4 	bl	8000544 <__aeabi_i2d>
 80283dc:	3730      	adds	r7, #48	; 0x30
 80283de:	4602      	mov	r2, r0
 80283e0:	460b      	mov	r3, r1
 80283e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80283e6:	f7d7 ff5f 	bl	80002a8 <__aeabi_dsub>
 80283ea:	f806 7b01 	strb.w	r7, [r6], #1
 80283ee:	42ae      	cmp	r6, r5
 80283f0:	e9cd 0100 	strd	r0, r1, [sp]
 80283f4:	f04f 0200 	mov.w	r2, #0
 80283f8:	d126      	bne.n	8028448 <_dtoa_r+0x5e8>
 80283fa:	4b1c      	ldr	r3, [pc, #112]	; (802846c <_dtoa_r+0x60c>)
 80283fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028400:	f7d7 ff54 	bl	80002ac <__adddf3>
 8028404:	4602      	mov	r2, r0
 8028406:	460b      	mov	r3, r1
 8028408:	e9dd 0100 	ldrd	r0, r1, [sp]
 802840c:	f7d8 fb94 	bl	8000b38 <__aeabi_dcmpgt>
 8028410:	2800      	cmp	r0, #0
 8028412:	d174      	bne.n	80284fe <_dtoa_r+0x69e>
 8028414:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8028418:	2000      	movs	r0, #0
 802841a:	4914      	ldr	r1, [pc, #80]	; (802846c <_dtoa_r+0x60c>)
 802841c:	f7d7 ff44 	bl	80002a8 <__aeabi_dsub>
 8028420:	4602      	mov	r2, r0
 8028422:	460b      	mov	r3, r1
 8028424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028428:	f7d8 fb68 	bl	8000afc <__aeabi_dcmplt>
 802842c:	2800      	cmp	r0, #0
 802842e:	f43f af30 	beq.w	8028292 <_dtoa_r+0x432>
 8028432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028436:	2b30      	cmp	r3, #48	; 0x30
 8028438:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 802843c:	d002      	beq.n	8028444 <_dtoa_r+0x5e4>
 802843e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8028442:	e04a      	b.n	80284da <_dtoa_r+0x67a>
 8028444:	4615      	mov	r5, r2
 8028446:	e7f4      	b.n	8028432 <_dtoa_r+0x5d2>
 8028448:	4b05      	ldr	r3, [pc, #20]	; (8028460 <_dtoa_r+0x600>)
 802844a:	f7d8 f8e5 	bl	8000618 <__aeabi_dmul>
 802844e:	e9cd 0100 	strd	r0, r1, [sp]
 8028452:	e7bc      	b.n	80283ce <_dtoa_r+0x56e>
 8028454:	080450a0 	.word	0x080450a0
 8028458:	08045078 	.word	0x08045078
 802845c:	3ff00000 	.word	0x3ff00000
 8028460:	40240000 	.word	0x40240000
 8028464:	401c0000 	.word	0x401c0000
 8028468:	40140000 	.word	0x40140000
 802846c:	3fe00000 	.word	0x3fe00000
 8028470:	e9dd 6700 	ldrd	r6, r7, [sp]
 8028474:	465d      	mov	r5, fp
 8028476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802847a:	4630      	mov	r0, r6
 802847c:	4639      	mov	r1, r7
 802847e:	f7d8 f9f5 	bl	800086c <__aeabi_ddiv>
 8028482:	f7d8 fb79 	bl	8000b78 <__aeabi_d2iz>
 8028486:	4680      	mov	r8, r0
 8028488:	f7d8 f85c 	bl	8000544 <__aeabi_i2d>
 802848c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028490:	f7d8 f8c2 	bl	8000618 <__aeabi_dmul>
 8028494:	4602      	mov	r2, r0
 8028496:	460b      	mov	r3, r1
 8028498:	4630      	mov	r0, r6
 802849a:	4639      	mov	r1, r7
 802849c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80284a0:	f7d7 ff02 	bl	80002a8 <__aeabi_dsub>
 80284a4:	f805 6b01 	strb.w	r6, [r5], #1
 80284a8:	eba5 060b 	sub.w	r6, r5, fp
 80284ac:	45b1      	cmp	r9, r6
 80284ae:	4602      	mov	r2, r0
 80284b0:	460b      	mov	r3, r1
 80284b2:	d139      	bne.n	8028528 <_dtoa_r+0x6c8>
 80284b4:	f7d7 fefa 	bl	80002ac <__adddf3>
 80284b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80284bc:	4606      	mov	r6, r0
 80284be:	460f      	mov	r7, r1
 80284c0:	f7d8 fb3a 	bl	8000b38 <__aeabi_dcmpgt>
 80284c4:	b9c8      	cbnz	r0, 80284fa <_dtoa_r+0x69a>
 80284c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80284ca:	4630      	mov	r0, r6
 80284cc:	4639      	mov	r1, r7
 80284ce:	f7d8 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80284d2:	b110      	cbz	r0, 80284da <_dtoa_r+0x67a>
 80284d4:	f018 0f01 	tst.w	r8, #1
 80284d8:	d10f      	bne.n	80284fa <_dtoa_r+0x69a>
 80284da:	9904      	ldr	r1, [sp, #16]
 80284dc:	4620      	mov	r0, r4
 80284de:	f000 fabb 	bl	8028a58 <_Bfree>
 80284e2:	2300      	movs	r3, #0
 80284e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80284e6:	702b      	strb	r3, [r5, #0]
 80284e8:	f10a 0301 	add.w	r3, sl, #1
 80284ec:	6013      	str	r3, [r2, #0]
 80284ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	f000 8241 	beq.w	8028978 <_dtoa_r+0xb18>
 80284f6:	601d      	str	r5, [r3, #0]
 80284f8:	e23e      	b.n	8028978 <_dtoa_r+0xb18>
 80284fa:	f8cd a020 	str.w	sl, [sp, #32]
 80284fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8028502:	2a39      	cmp	r2, #57	; 0x39
 8028504:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8028508:	d108      	bne.n	802851c <_dtoa_r+0x6bc>
 802850a:	459b      	cmp	fp, r3
 802850c:	d10a      	bne.n	8028524 <_dtoa_r+0x6c4>
 802850e:	9b08      	ldr	r3, [sp, #32]
 8028510:	3301      	adds	r3, #1
 8028512:	9308      	str	r3, [sp, #32]
 8028514:	2330      	movs	r3, #48	; 0x30
 8028516:	f88b 3000 	strb.w	r3, [fp]
 802851a:	465b      	mov	r3, fp
 802851c:	781a      	ldrb	r2, [r3, #0]
 802851e:	3201      	adds	r2, #1
 8028520:	701a      	strb	r2, [r3, #0]
 8028522:	e78c      	b.n	802843e <_dtoa_r+0x5de>
 8028524:	461d      	mov	r5, r3
 8028526:	e7ea      	b.n	80284fe <_dtoa_r+0x69e>
 8028528:	2200      	movs	r2, #0
 802852a:	4b9b      	ldr	r3, [pc, #620]	; (8028798 <_dtoa_r+0x938>)
 802852c:	f7d8 f874 	bl	8000618 <__aeabi_dmul>
 8028530:	2200      	movs	r2, #0
 8028532:	2300      	movs	r3, #0
 8028534:	4606      	mov	r6, r0
 8028536:	460f      	mov	r7, r1
 8028538:	f7d8 fad6 	bl	8000ae8 <__aeabi_dcmpeq>
 802853c:	2800      	cmp	r0, #0
 802853e:	d09a      	beq.n	8028476 <_dtoa_r+0x616>
 8028540:	e7cb      	b.n	80284da <_dtoa_r+0x67a>
 8028542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028544:	2a00      	cmp	r2, #0
 8028546:	f000 808b 	beq.w	8028660 <_dtoa_r+0x800>
 802854a:	9a06      	ldr	r2, [sp, #24]
 802854c:	2a01      	cmp	r2, #1
 802854e:	dc6e      	bgt.n	802862e <_dtoa_r+0x7ce>
 8028550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028552:	2a00      	cmp	r2, #0
 8028554:	d067      	beq.n	8028626 <_dtoa_r+0x7c6>
 8028556:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802855a:	9f07      	ldr	r7, [sp, #28]
 802855c:	9d05      	ldr	r5, [sp, #20]
 802855e:	9a05      	ldr	r2, [sp, #20]
 8028560:	2101      	movs	r1, #1
 8028562:	441a      	add	r2, r3
 8028564:	4620      	mov	r0, r4
 8028566:	9205      	str	r2, [sp, #20]
 8028568:	4498      	add	r8, r3
 802856a:	f000 fb15 	bl	8028b98 <__i2b>
 802856e:	4606      	mov	r6, r0
 8028570:	2d00      	cmp	r5, #0
 8028572:	dd0c      	ble.n	802858e <_dtoa_r+0x72e>
 8028574:	f1b8 0f00 	cmp.w	r8, #0
 8028578:	dd09      	ble.n	802858e <_dtoa_r+0x72e>
 802857a:	4545      	cmp	r5, r8
 802857c:	9a05      	ldr	r2, [sp, #20]
 802857e:	462b      	mov	r3, r5
 8028580:	bfa8      	it	ge
 8028582:	4643      	movge	r3, r8
 8028584:	1ad2      	subs	r2, r2, r3
 8028586:	9205      	str	r2, [sp, #20]
 8028588:	1aed      	subs	r5, r5, r3
 802858a:	eba8 0803 	sub.w	r8, r8, r3
 802858e:	9b07      	ldr	r3, [sp, #28]
 8028590:	b1eb      	cbz	r3, 80285ce <_dtoa_r+0x76e>
 8028592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028594:	2b00      	cmp	r3, #0
 8028596:	d067      	beq.n	8028668 <_dtoa_r+0x808>
 8028598:	b18f      	cbz	r7, 80285be <_dtoa_r+0x75e>
 802859a:	4631      	mov	r1, r6
 802859c:	463a      	mov	r2, r7
 802859e:	4620      	mov	r0, r4
 80285a0:	f000 fb9a 	bl	8028cd8 <__pow5mult>
 80285a4:	9a04      	ldr	r2, [sp, #16]
 80285a6:	4601      	mov	r1, r0
 80285a8:	4606      	mov	r6, r0
 80285aa:	4620      	mov	r0, r4
 80285ac:	f000 fafd 	bl	8028baa <__multiply>
 80285b0:	9904      	ldr	r1, [sp, #16]
 80285b2:	9008      	str	r0, [sp, #32]
 80285b4:	4620      	mov	r0, r4
 80285b6:	f000 fa4f 	bl	8028a58 <_Bfree>
 80285ba:	9b08      	ldr	r3, [sp, #32]
 80285bc:	9304      	str	r3, [sp, #16]
 80285be:	9b07      	ldr	r3, [sp, #28]
 80285c0:	1bda      	subs	r2, r3, r7
 80285c2:	d004      	beq.n	80285ce <_dtoa_r+0x76e>
 80285c4:	9904      	ldr	r1, [sp, #16]
 80285c6:	4620      	mov	r0, r4
 80285c8:	f000 fb86 	bl	8028cd8 <__pow5mult>
 80285cc:	9004      	str	r0, [sp, #16]
 80285ce:	2101      	movs	r1, #1
 80285d0:	4620      	mov	r0, r4
 80285d2:	f000 fae1 	bl	8028b98 <__i2b>
 80285d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80285d8:	4607      	mov	r7, r0
 80285da:	2b00      	cmp	r3, #0
 80285dc:	f000 81d0 	beq.w	8028980 <_dtoa_r+0xb20>
 80285e0:	461a      	mov	r2, r3
 80285e2:	4601      	mov	r1, r0
 80285e4:	4620      	mov	r0, r4
 80285e6:	f000 fb77 	bl	8028cd8 <__pow5mult>
 80285ea:	9b06      	ldr	r3, [sp, #24]
 80285ec:	2b01      	cmp	r3, #1
 80285ee:	4607      	mov	r7, r0
 80285f0:	dc40      	bgt.n	8028674 <_dtoa_r+0x814>
 80285f2:	9b00      	ldr	r3, [sp, #0]
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d139      	bne.n	802866c <_dtoa_r+0x80c>
 80285f8:	9b01      	ldr	r3, [sp, #4]
 80285fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80285fe:	2b00      	cmp	r3, #0
 8028600:	d136      	bne.n	8028670 <_dtoa_r+0x810>
 8028602:	9b01      	ldr	r3, [sp, #4]
 8028604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028608:	0d1b      	lsrs	r3, r3, #20
 802860a:	051b      	lsls	r3, r3, #20
 802860c:	b12b      	cbz	r3, 802861a <_dtoa_r+0x7ba>
 802860e:	9b05      	ldr	r3, [sp, #20]
 8028610:	3301      	adds	r3, #1
 8028612:	9305      	str	r3, [sp, #20]
 8028614:	f108 0801 	add.w	r8, r8, #1
 8028618:	2301      	movs	r3, #1
 802861a:	9307      	str	r3, [sp, #28]
 802861c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802861e:	2b00      	cmp	r3, #0
 8028620:	d12a      	bne.n	8028678 <_dtoa_r+0x818>
 8028622:	2001      	movs	r0, #1
 8028624:	e030      	b.n	8028688 <_dtoa_r+0x828>
 8028626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028628:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802862c:	e795      	b.n	802855a <_dtoa_r+0x6fa>
 802862e:	9b07      	ldr	r3, [sp, #28]
 8028630:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8028634:	42bb      	cmp	r3, r7
 8028636:	bfbf      	itttt	lt
 8028638:	9b07      	ldrlt	r3, [sp, #28]
 802863a:	9707      	strlt	r7, [sp, #28]
 802863c:	1afa      	sublt	r2, r7, r3
 802863e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8028640:	bfbb      	ittet	lt
 8028642:	189b      	addlt	r3, r3, r2
 8028644:	930e      	strlt	r3, [sp, #56]	; 0x38
 8028646:	1bdf      	subge	r7, r3, r7
 8028648:	2700      	movlt	r7, #0
 802864a:	f1b9 0f00 	cmp.w	r9, #0
 802864e:	bfb5      	itete	lt
 8028650:	9b05      	ldrlt	r3, [sp, #20]
 8028652:	9d05      	ldrge	r5, [sp, #20]
 8028654:	eba3 0509 	sublt.w	r5, r3, r9
 8028658:	464b      	movge	r3, r9
 802865a:	bfb8      	it	lt
 802865c:	2300      	movlt	r3, #0
 802865e:	e77e      	b.n	802855e <_dtoa_r+0x6fe>
 8028660:	9f07      	ldr	r7, [sp, #28]
 8028662:	9d05      	ldr	r5, [sp, #20]
 8028664:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8028666:	e783      	b.n	8028570 <_dtoa_r+0x710>
 8028668:	9a07      	ldr	r2, [sp, #28]
 802866a:	e7ab      	b.n	80285c4 <_dtoa_r+0x764>
 802866c:	2300      	movs	r3, #0
 802866e:	e7d4      	b.n	802861a <_dtoa_r+0x7ba>
 8028670:	9b00      	ldr	r3, [sp, #0]
 8028672:	e7d2      	b.n	802861a <_dtoa_r+0x7ba>
 8028674:	2300      	movs	r3, #0
 8028676:	9307      	str	r3, [sp, #28]
 8028678:	693b      	ldr	r3, [r7, #16]
 802867a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802867e:	6918      	ldr	r0, [r3, #16]
 8028680:	f000 fa3c 	bl	8028afc <__hi0bits>
 8028684:	f1c0 0020 	rsb	r0, r0, #32
 8028688:	4440      	add	r0, r8
 802868a:	f010 001f 	ands.w	r0, r0, #31
 802868e:	d047      	beq.n	8028720 <_dtoa_r+0x8c0>
 8028690:	f1c0 0320 	rsb	r3, r0, #32
 8028694:	2b04      	cmp	r3, #4
 8028696:	dd3b      	ble.n	8028710 <_dtoa_r+0x8b0>
 8028698:	9b05      	ldr	r3, [sp, #20]
 802869a:	f1c0 001c 	rsb	r0, r0, #28
 802869e:	4403      	add	r3, r0
 80286a0:	9305      	str	r3, [sp, #20]
 80286a2:	4405      	add	r5, r0
 80286a4:	4480      	add	r8, r0
 80286a6:	9b05      	ldr	r3, [sp, #20]
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	dd05      	ble.n	80286b8 <_dtoa_r+0x858>
 80286ac:	461a      	mov	r2, r3
 80286ae:	9904      	ldr	r1, [sp, #16]
 80286b0:	4620      	mov	r0, r4
 80286b2:	f000 fb5f 	bl	8028d74 <__lshift>
 80286b6:	9004      	str	r0, [sp, #16]
 80286b8:	f1b8 0f00 	cmp.w	r8, #0
 80286bc:	dd05      	ble.n	80286ca <_dtoa_r+0x86a>
 80286be:	4639      	mov	r1, r7
 80286c0:	4642      	mov	r2, r8
 80286c2:	4620      	mov	r0, r4
 80286c4:	f000 fb56 	bl	8028d74 <__lshift>
 80286c8:	4607      	mov	r7, r0
 80286ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286cc:	b353      	cbz	r3, 8028724 <_dtoa_r+0x8c4>
 80286ce:	4639      	mov	r1, r7
 80286d0:	9804      	ldr	r0, [sp, #16]
 80286d2:	f000 fba3 	bl	8028e1c <__mcmp>
 80286d6:	2800      	cmp	r0, #0
 80286d8:	da24      	bge.n	8028724 <_dtoa_r+0x8c4>
 80286da:	2300      	movs	r3, #0
 80286dc:	220a      	movs	r2, #10
 80286de:	9904      	ldr	r1, [sp, #16]
 80286e0:	4620      	mov	r0, r4
 80286e2:	f000 f9d0 	bl	8028a86 <__multadd>
 80286e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286e8:	9004      	str	r0, [sp, #16]
 80286ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80286ee:	2b00      	cmp	r3, #0
 80286f0:	f000 814d 	beq.w	802898e <_dtoa_r+0xb2e>
 80286f4:	2300      	movs	r3, #0
 80286f6:	4631      	mov	r1, r6
 80286f8:	220a      	movs	r2, #10
 80286fa:	4620      	mov	r0, r4
 80286fc:	f000 f9c3 	bl	8028a86 <__multadd>
 8028700:	9b02      	ldr	r3, [sp, #8]
 8028702:	2b00      	cmp	r3, #0
 8028704:	4606      	mov	r6, r0
 8028706:	dc4f      	bgt.n	80287a8 <_dtoa_r+0x948>
 8028708:	9b06      	ldr	r3, [sp, #24]
 802870a:	2b02      	cmp	r3, #2
 802870c:	dd4c      	ble.n	80287a8 <_dtoa_r+0x948>
 802870e:	e011      	b.n	8028734 <_dtoa_r+0x8d4>
 8028710:	d0c9      	beq.n	80286a6 <_dtoa_r+0x846>
 8028712:	9a05      	ldr	r2, [sp, #20]
 8028714:	331c      	adds	r3, #28
 8028716:	441a      	add	r2, r3
 8028718:	9205      	str	r2, [sp, #20]
 802871a:	441d      	add	r5, r3
 802871c:	4498      	add	r8, r3
 802871e:	e7c2      	b.n	80286a6 <_dtoa_r+0x846>
 8028720:	4603      	mov	r3, r0
 8028722:	e7f6      	b.n	8028712 <_dtoa_r+0x8b2>
 8028724:	f1b9 0f00 	cmp.w	r9, #0
 8028728:	dc38      	bgt.n	802879c <_dtoa_r+0x93c>
 802872a:	9b06      	ldr	r3, [sp, #24]
 802872c:	2b02      	cmp	r3, #2
 802872e:	dd35      	ble.n	802879c <_dtoa_r+0x93c>
 8028730:	f8cd 9008 	str.w	r9, [sp, #8]
 8028734:	9b02      	ldr	r3, [sp, #8]
 8028736:	b963      	cbnz	r3, 8028752 <_dtoa_r+0x8f2>
 8028738:	4639      	mov	r1, r7
 802873a:	2205      	movs	r2, #5
 802873c:	4620      	mov	r0, r4
 802873e:	f000 f9a2 	bl	8028a86 <__multadd>
 8028742:	4601      	mov	r1, r0
 8028744:	4607      	mov	r7, r0
 8028746:	9804      	ldr	r0, [sp, #16]
 8028748:	f000 fb68 	bl	8028e1c <__mcmp>
 802874c:	2800      	cmp	r0, #0
 802874e:	f73f adcc 	bgt.w	80282ea <_dtoa_r+0x48a>
 8028752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028754:	465d      	mov	r5, fp
 8028756:	ea6f 0a03 	mvn.w	sl, r3
 802875a:	f04f 0900 	mov.w	r9, #0
 802875e:	4639      	mov	r1, r7
 8028760:	4620      	mov	r0, r4
 8028762:	f000 f979 	bl	8028a58 <_Bfree>
 8028766:	2e00      	cmp	r6, #0
 8028768:	f43f aeb7 	beq.w	80284da <_dtoa_r+0x67a>
 802876c:	f1b9 0f00 	cmp.w	r9, #0
 8028770:	d005      	beq.n	802877e <_dtoa_r+0x91e>
 8028772:	45b1      	cmp	r9, r6
 8028774:	d003      	beq.n	802877e <_dtoa_r+0x91e>
 8028776:	4649      	mov	r1, r9
 8028778:	4620      	mov	r0, r4
 802877a:	f000 f96d 	bl	8028a58 <_Bfree>
 802877e:	4631      	mov	r1, r6
 8028780:	4620      	mov	r0, r4
 8028782:	f000 f969 	bl	8028a58 <_Bfree>
 8028786:	e6a8      	b.n	80284da <_dtoa_r+0x67a>
 8028788:	2700      	movs	r7, #0
 802878a:	463e      	mov	r6, r7
 802878c:	e7e1      	b.n	8028752 <_dtoa_r+0x8f2>
 802878e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8028792:	463e      	mov	r6, r7
 8028794:	e5a9      	b.n	80282ea <_dtoa_r+0x48a>
 8028796:	bf00      	nop
 8028798:	40240000 	.word	0x40240000
 802879c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802879e:	f8cd 9008 	str.w	r9, [sp, #8]
 80287a2:	2b00      	cmp	r3, #0
 80287a4:	f000 80fa 	beq.w	802899c <_dtoa_r+0xb3c>
 80287a8:	2d00      	cmp	r5, #0
 80287aa:	dd05      	ble.n	80287b8 <_dtoa_r+0x958>
 80287ac:	4631      	mov	r1, r6
 80287ae:	462a      	mov	r2, r5
 80287b0:	4620      	mov	r0, r4
 80287b2:	f000 fadf 	bl	8028d74 <__lshift>
 80287b6:	4606      	mov	r6, r0
 80287b8:	9b07      	ldr	r3, [sp, #28]
 80287ba:	2b00      	cmp	r3, #0
 80287bc:	d04c      	beq.n	8028858 <_dtoa_r+0x9f8>
 80287be:	6871      	ldr	r1, [r6, #4]
 80287c0:	4620      	mov	r0, r4
 80287c2:	f000 f915 	bl	80289f0 <_Balloc>
 80287c6:	6932      	ldr	r2, [r6, #16]
 80287c8:	3202      	adds	r2, #2
 80287ca:	4605      	mov	r5, r0
 80287cc:	0092      	lsls	r2, r2, #2
 80287ce:	f106 010c 	add.w	r1, r6, #12
 80287d2:	300c      	adds	r0, #12
 80287d4:	f7fe fd26 	bl	8027224 <memcpy>
 80287d8:	2201      	movs	r2, #1
 80287da:	4629      	mov	r1, r5
 80287dc:	4620      	mov	r0, r4
 80287de:	f000 fac9 	bl	8028d74 <__lshift>
 80287e2:	9b00      	ldr	r3, [sp, #0]
 80287e4:	f8cd b014 	str.w	fp, [sp, #20]
 80287e8:	f003 0301 	and.w	r3, r3, #1
 80287ec:	46b1      	mov	r9, r6
 80287ee:	9307      	str	r3, [sp, #28]
 80287f0:	4606      	mov	r6, r0
 80287f2:	4639      	mov	r1, r7
 80287f4:	9804      	ldr	r0, [sp, #16]
 80287f6:	f7ff faa5 	bl	8027d44 <quorem>
 80287fa:	4649      	mov	r1, r9
 80287fc:	4605      	mov	r5, r0
 80287fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8028802:	9804      	ldr	r0, [sp, #16]
 8028804:	f000 fb0a 	bl	8028e1c <__mcmp>
 8028808:	4632      	mov	r2, r6
 802880a:	9000      	str	r0, [sp, #0]
 802880c:	4639      	mov	r1, r7
 802880e:	4620      	mov	r0, r4
 8028810:	f000 fb1e 	bl	8028e50 <__mdiff>
 8028814:	68c3      	ldr	r3, [r0, #12]
 8028816:	4602      	mov	r2, r0
 8028818:	bb03      	cbnz	r3, 802885c <_dtoa_r+0x9fc>
 802881a:	4601      	mov	r1, r0
 802881c:	9008      	str	r0, [sp, #32]
 802881e:	9804      	ldr	r0, [sp, #16]
 8028820:	f000 fafc 	bl	8028e1c <__mcmp>
 8028824:	9a08      	ldr	r2, [sp, #32]
 8028826:	4603      	mov	r3, r0
 8028828:	4611      	mov	r1, r2
 802882a:	4620      	mov	r0, r4
 802882c:	9308      	str	r3, [sp, #32]
 802882e:	f000 f913 	bl	8028a58 <_Bfree>
 8028832:	9b08      	ldr	r3, [sp, #32]
 8028834:	b9a3      	cbnz	r3, 8028860 <_dtoa_r+0xa00>
 8028836:	9a06      	ldr	r2, [sp, #24]
 8028838:	b992      	cbnz	r2, 8028860 <_dtoa_r+0xa00>
 802883a:	9a07      	ldr	r2, [sp, #28]
 802883c:	b982      	cbnz	r2, 8028860 <_dtoa_r+0xa00>
 802883e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8028842:	d029      	beq.n	8028898 <_dtoa_r+0xa38>
 8028844:	9b00      	ldr	r3, [sp, #0]
 8028846:	2b00      	cmp	r3, #0
 8028848:	dd01      	ble.n	802884e <_dtoa_r+0x9ee>
 802884a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802884e:	9b05      	ldr	r3, [sp, #20]
 8028850:	1c5d      	adds	r5, r3, #1
 8028852:	f883 8000 	strb.w	r8, [r3]
 8028856:	e782      	b.n	802875e <_dtoa_r+0x8fe>
 8028858:	4630      	mov	r0, r6
 802885a:	e7c2      	b.n	80287e2 <_dtoa_r+0x982>
 802885c:	2301      	movs	r3, #1
 802885e:	e7e3      	b.n	8028828 <_dtoa_r+0x9c8>
 8028860:	9a00      	ldr	r2, [sp, #0]
 8028862:	2a00      	cmp	r2, #0
 8028864:	db04      	blt.n	8028870 <_dtoa_r+0xa10>
 8028866:	d125      	bne.n	80288b4 <_dtoa_r+0xa54>
 8028868:	9a06      	ldr	r2, [sp, #24]
 802886a:	bb1a      	cbnz	r2, 80288b4 <_dtoa_r+0xa54>
 802886c:	9a07      	ldr	r2, [sp, #28]
 802886e:	bb0a      	cbnz	r2, 80288b4 <_dtoa_r+0xa54>
 8028870:	2b00      	cmp	r3, #0
 8028872:	ddec      	ble.n	802884e <_dtoa_r+0x9ee>
 8028874:	2201      	movs	r2, #1
 8028876:	9904      	ldr	r1, [sp, #16]
 8028878:	4620      	mov	r0, r4
 802887a:	f000 fa7b 	bl	8028d74 <__lshift>
 802887e:	4639      	mov	r1, r7
 8028880:	9004      	str	r0, [sp, #16]
 8028882:	f000 facb 	bl	8028e1c <__mcmp>
 8028886:	2800      	cmp	r0, #0
 8028888:	dc03      	bgt.n	8028892 <_dtoa_r+0xa32>
 802888a:	d1e0      	bne.n	802884e <_dtoa_r+0x9ee>
 802888c:	f018 0f01 	tst.w	r8, #1
 8028890:	d0dd      	beq.n	802884e <_dtoa_r+0x9ee>
 8028892:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8028896:	d1d8      	bne.n	802884a <_dtoa_r+0x9ea>
 8028898:	9b05      	ldr	r3, [sp, #20]
 802889a:	9a05      	ldr	r2, [sp, #20]
 802889c:	1c5d      	adds	r5, r3, #1
 802889e:	2339      	movs	r3, #57	; 0x39
 80288a0:	7013      	strb	r3, [r2, #0]
 80288a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80288a6:	2b39      	cmp	r3, #57	; 0x39
 80288a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80288ac:	d04f      	beq.n	802894e <_dtoa_r+0xaee>
 80288ae:	3301      	adds	r3, #1
 80288b0:	7013      	strb	r3, [r2, #0]
 80288b2:	e754      	b.n	802875e <_dtoa_r+0x8fe>
 80288b4:	9a05      	ldr	r2, [sp, #20]
 80288b6:	2b00      	cmp	r3, #0
 80288b8:	f102 0501 	add.w	r5, r2, #1
 80288bc:	dd06      	ble.n	80288cc <_dtoa_r+0xa6c>
 80288be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80288c2:	d0e9      	beq.n	8028898 <_dtoa_r+0xa38>
 80288c4:	f108 0801 	add.w	r8, r8, #1
 80288c8:	9b05      	ldr	r3, [sp, #20]
 80288ca:	e7c2      	b.n	8028852 <_dtoa_r+0x9f2>
 80288cc:	9a02      	ldr	r2, [sp, #8]
 80288ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80288d2:	eba5 030b 	sub.w	r3, r5, fp
 80288d6:	4293      	cmp	r3, r2
 80288d8:	d021      	beq.n	802891e <_dtoa_r+0xabe>
 80288da:	2300      	movs	r3, #0
 80288dc:	220a      	movs	r2, #10
 80288de:	9904      	ldr	r1, [sp, #16]
 80288e0:	4620      	mov	r0, r4
 80288e2:	f000 f8d0 	bl	8028a86 <__multadd>
 80288e6:	45b1      	cmp	r9, r6
 80288e8:	9004      	str	r0, [sp, #16]
 80288ea:	f04f 0300 	mov.w	r3, #0
 80288ee:	f04f 020a 	mov.w	r2, #10
 80288f2:	4649      	mov	r1, r9
 80288f4:	4620      	mov	r0, r4
 80288f6:	d105      	bne.n	8028904 <_dtoa_r+0xaa4>
 80288f8:	f000 f8c5 	bl	8028a86 <__multadd>
 80288fc:	4681      	mov	r9, r0
 80288fe:	4606      	mov	r6, r0
 8028900:	9505      	str	r5, [sp, #20]
 8028902:	e776      	b.n	80287f2 <_dtoa_r+0x992>
 8028904:	f000 f8bf 	bl	8028a86 <__multadd>
 8028908:	4631      	mov	r1, r6
 802890a:	4681      	mov	r9, r0
 802890c:	2300      	movs	r3, #0
 802890e:	220a      	movs	r2, #10
 8028910:	4620      	mov	r0, r4
 8028912:	f000 f8b8 	bl	8028a86 <__multadd>
 8028916:	4606      	mov	r6, r0
 8028918:	e7f2      	b.n	8028900 <_dtoa_r+0xaa0>
 802891a:	f04f 0900 	mov.w	r9, #0
 802891e:	2201      	movs	r2, #1
 8028920:	9904      	ldr	r1, [sp, #16]
 8028922:	4620      	mov	r0, r4
 8028924:	f000 fa26 	bl	8028d74 <__lshift>
 8028928:	4639      	mov	r1, r7
 802892a:	9004      	str	r0, [sp, #16]
 802892c:	f000 fa76 	bl	8028e1c <__mcmp>
 8028930:	2800      	cmp	r0, #0
 8028932:	dcb6      	bgt.n	80288a2 <_dtoa_r+0xa42>
 8028934:	d102      	bne.n	802893c <_dtoa_r+0xadc>
 8028936:	f018 0f01 	tst.w	r8, #1
 802893a:	d1b2      	bne.n	80288a2 <_dtoa_r+0xa42>
 802893c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028940:	2b30      	cmp	r3, #48	; 0x30
 8028942:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8028946:	f47f af0a 	bne.w	802875e <_dtoa_r+0x8fe>
 802894a:	4615      	mov	r5, r2
 802894c:	e7f6      	b.n	802893c <_dtoa_r+0xadc>
 802894e:	4593      	cmp	fp, r2
 8028950:	d105      	bne.n	802895e <_dtoa_r+0xafe>
 8028952:	2331      	movs	r3, #49	; 0x31
 8028954:	f10a 0a01 	add.w	sl, sl, #1
 8028958:	f88b 3000 	strb.w	r3, [fp]
 802895c:	e6ff      	b.n	802875e <_dtoa_r+0x8fe>
 802895e:	4615      	mov	r5, r2
 8028960:	e79f      	b.n	80288a2 <_dtoa_r+0xa42>
 8028962:	f8df b064 	ldr.w	fp, [pc, #100]	; 80289c8 <_dtoa_r+0xb68>
 8028966:	e007      	b.n	8028978 <_dtoa_r+0xb18>
 8028968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802896a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80289cc <_dtoa_r+0xb6c>
 802896e:	b11b      	cbz	r3, 8028978 <_dtoa_r+0xb18>
 8028970:	f10b 0308 	add.w	r3, fp, #8
 8028974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028976:	6013      	str	r3, [r2, #0]
 8028978:	4658      	mov	r0, fp
 802897a:	b017      	add	sp, #92	; 0x5c
 802897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028980:	9b06      	ldr	r3, [sp, #24]
 8028982:	2b01      	cmp	r3, #1
 8028984:	f77f ae35 	ble.w	80285f2 <_dtoa_r+0x792>
 8028988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802898a:	9307      	str	r3, [sp, #28]
 802898c:	e649      	b.n	8028622 <_dtoa_r+0x7c2>
 802898e:	9b02      	ldr	r3, [sp, #8]
 8028990:	2b00      	cmp	r3, #0
 8028992:	dc03      	bgt.n	802899c <_dtoa_r+0xb3c>
 8028994:	9b06      	ldr	r3, [sp, #24]
 8028996:	2b02      	cmp	r3, #2
 8028998:	f73f aecc 	bgt.w	8028734 <_dtoa_r+0x8d4>
 802899c:	465d      	mov	r5, fp
 802899e:	4639      	mov	r1, r7
 80289a0:	9804      	ldr	r0, [sp, #16]
 80289a2:	f7ff f9cf 	bl	8027d44 <quorem>
 80289a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80289aa:	f805 8b01 	strb.w	r8, [r5], #1
 80289ae:	9a02      	ldr	r2, [sp, #8]
 80289b0:	eba5 030b 	sub.w	r3, r5, fp
 80289b4:	429a      	cmp	r2, r3
 80289b6:	ddb0      	ble.n	802891a <_dtoa_r+0xaba>
 80289b8:	2300      	movs	r3, #0
 80289ba:	220a      	movs	r2, #10
 80289bc:	9904      	ldr	r1, [sp, #16]
 80289be:	4620      	mov	r0, r4
 80289c0:	f000 f861 	bl	8028a86 <__multadd>
 80289c4:	9004      	str	r0, [sp, #16]
 80289c6:	e7ea      	b.n	802899e <_dtoa_r+0xb3e>
 80289c8:	0804519b 	.word	0x0804519b
 80289cc:	0804500a 	.word	0x0804500a

080289d0 <_localeconv_r>:
 80289d0:	4b04      	ldr	r3, [pc, #16]	; (80289e4 <_localeconv_r+0x14>)
 80289d2:	681b      	ldr	r3, [r3, #0]
 80289d4:	6a18      	ldr	r0, [r3, #32]
 80289d6:	4b04      	ldr	r3, [pc, #16]	; (80289e8 <_localeconv_r+0x18>)
 80289d8:	2800      	cmp	r0, #0
 80289da:	bf08      	it	eq
 80289dc:	4618      	moveq	r0, r3
 80289de:	30f0      	adds	r0, #240	; 0xf0
 80289e0:	4770      	bx	lr
 80289e2:	bf00      	nop
 80289e4:	20002858 	.word	0x20002858
 80289e8:	200028bc 	.word	0x200028bc

080289ec <__malloc_lock>:
 80289ec:	4770      	bx	lr

080289ee <__malloc_unlock>:
 80289ee:	4770      	bx	lr

080289f0 <_Balloc>:
 80289f0:	b570      	push	{r4, r5, r6, lr}
 80289f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80289f4:	4604      	mov	r4, r0
 80289f6:	460e      	mov	r6, r1
 80289f8:	b93d      	cbnz	r5, 8028a0a <_Balloc+0x1a>
 80289fa:	2010      	movs	r0, #16
 80289fc:	f7fe fc02 	bl	8027204 <malloc>
 8028a00:	6260      	str	r0, [r4, #36]	; 0x24
 8028a02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028a06:	6005      	str	r5, [r0, #0]
 8028a08:	60c5      	str	r5, [r0, #12]
 8028a0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8028a0c:	68eb      	ldr	r3, [r5, #12]
 8028a0e:	b183      	cbz	r3, 8028a32 <_Balloc+0x42>
 8028a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028a12:	68db      	ldr	r3, [r3, #12]
 8028a14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8028a18:	b9b8      	cbnz	r0, 8028a4a <_Balloc+0x5a>
 8028a1a:	2101      	movs	r1, #1
 8028a1c:	fa01 f506 	lsl.w	r5, r1, r6
 8028a20:	1d6a      	adds	r2, r5, #5
 8028a22:	0092      	lsls	r2, r2, #2
 8028a24:	4620      	mov	r0, r4
 8028a26:	f000 fabf 	bl	8028fa8 <_calloc_r>
 8028a2a:	b160      	cbz	r0, 8028a46 <_Balloc+0x56>
 8028a2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8028a30:	e00e      	b.n	8028a50 <_Balloc+0x60>
 8028a32:	2221      	movs	r2, #33	; 0x21
 8028a34:	2104      	movs	r1, #4
 8028a36:	4620      	mov	r0, r4
 8028a38:	f000 fab6 	bl	8028fa8 <_calloc_r>
 8028a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028a3e:	60e8      	str	r0, [r5, #12]
 8028a40:	68db      	ldr	r3, [r3, #12]
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	d1e4      	bne.n	8028a10 <_Balloc+0x20>
 8028a46:	2000      	movs	r0, #0
 8028a48:	bd70      	pop	{r4, r5, r6, pc}
 8028a4a:	6802      	ldr	r2, [r0, #0]
 8028a4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8028a50:	2300      	movs	r3, #0
 8028a52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028a56:	e7f7      	b.n	8028a48 <_Balloc+0x58>

08028a58 <_Bfree>:
 8028a58:	b570      	push	{r4, r5, r6, lr}
 8028a5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8028a5c:	4606      	mov	r6, r0
 8028a5e:	460d      	mov	r5, r1
 8028a60:	b93c      	cbnz	r4, 8028a72 <_Bfree+0x1a>
 8028a62:	2010      	movs	r0, #16
 8028a64:	f7fe fbce 	bl	8027204 <malloc>
 8028a68:	6270      	str	r0, [r6, #36]	; 0x24
 8028a6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028a6e:	6004      	str	r4, [r0, #0]
 8028a70:	60c4      	str	r4, [r0, #12]
 8028a72:	b13d      	cbz	r5, 8028a84 <_Bfree+0x2c>
 8028a74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028a76:	686a      	ldr	r2, [r5, #4]
 8028a78:	68db      	ldr	r3, [r3, #12]
 8028a7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028a7e:	6029      	str	r1, [r5, #0]
 8028a80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8028a84:	bd70      	pop	{r4, r5, r6, pc}

08028a86 <__multadd>:
 8028a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a8a:	690d      	ldr	r5, [r1, #16]
 8028a8c:	461f      	mov	r7, r3
 8028a8e:	4606      	mov	r6, r0
 8028a90:	460c      	mov	r4, r1
 8028a92:	f101 0c14 	add.w	ip, r1, #20
 8028a96:	2300      	movs	r3, #0
 8028a98:	f8dc 0000 	ldr.w	r0, [ip]
 8028a9c:	b281      	uxth	r1, r0
 8028a9e:	fb02 7101 	mla	r1, r2, r1, r7
 8028aa2:	0c0f      	lsrs	r7, r1, #16
 8028aa4:	0c00      	lsrs	r0, r0, #16
 8028aa6:	fb02 7000 	mla	r0, r2, r0, r7
 8028aaa:	b289      	uxth	r1, r1
 8028aac:	3301      	adds	r3, #1
 8028aae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8028ab2:	429d      	cmp	r5, r3
 8028ab4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8028ab8:	f84c 1b04 	str.w	r1, [ip], #4
 8028abc:	dcec      	bgt.n	8028a98 <__multadd+0x12>
 8028abe:	b1d7      	cbz	r7, 8028af6 <__multadd+0x70>
 8028ac0:	68a3      	ldr	r3, [r4, #8]
 8028ac2:	42ab      	cmp	r3, r5
 8028ac4:	dc12      	bgt.n	8028aec <__multadd+0x66>
 8028ac6:	6861      	ldr	r1, [r4, #4]
 8028ac8:	4630      	mov	r0, r6
 8028aca:	3101      	adds	r1, #1
 8028acc:	f7ff ff90 	bl	80289f0 <_Balloc>
 8028ad0:	6922      	ldr	r2, [r4, #16]
 8028ad2:	3202      	adds	r2, #2
 8028ad4:	f104 010c 	add.w	r1, r4, #12
 8028ad8:	4680      	mov	r8, r0
 8028ada:	0092      	lsls	r2, r2, #2
 8028adc:	300c      	adds	r0, #12
 8028ade:	f7fe fba1 	bl	8027224 <memcpy>
 8028ae2:	4621      	mov	r1, r4
 8028ae4:	4630      	mov	r0, r6
 8028ae6:	f7ff ffb7 	bl	8028a58 <_Bfree>
 8028aea:	4644      	mov	r4, r8
 8028aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8028af0:	3501      	adds	r5, #1
 8028af2:	615f      	str	r7, [r3, #20]
 8028af4:	6125      	str	r5, [r4, #16]
 8028af6:	4620      	mov	r0, r4
 8028af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028afc <__hi0bits>:
 8028afc:	0c02      	lsrs	r2, r0, #16
 8028afe:	0412      	lsls	r2, r2, #16
 8028b00:	4603      	mov	r3, r0
 8028b02:	b9b2      	cbnz	r2, 8028b32 <__hi0bits+0x36>
 8028b04:	0403      	lsls	r3, r0, #16
 8028b06:	2010      	movs	r0, #16
 8028b08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8028b0c:	bf04      	itt	eq
 8028b0e:	021b      	lsleq	r3, r3, #8
 8028b10:	3008      	addeq	r0, #8
 8028b12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8028b16:	bf04      	itt	eq
 8028b18:	011b      	lsleq	r3, r3, #4
 8028b1a:	3004      	addeq	r0, #4
 8028b1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8028b20:	bf04      	itt	eq
 8028b22:	009b      	lsleq	r3, r3, #2
 8028b24:	3002      	addeq	r0, #2
 8028b26:	2b00      	cmp	r3, #0
 8028b28:	db06      	blt.n	8028b38 <__hi0bits+0x3c>
 8028b2a:	005b      	lsls	r3, r3, #1
 8028b2c:	d503      	bpl.n	8028b36 <__hi0bits+0x3a>
 8028b2e:	3001      	adds	r0, #1
 8028b30:	4770      	bx	lr
 8028b32:	2000      	movs	r0, #0
 8028b34:	e7e8      	b.n	8028b08 <__hi0bits+0xc>
 8028b36:	2020      	movs	r0, #32
 8028b38:	4770      	bx	lr

08028b3a <__lo0bits>:
 8028b3a:	6803      	ldr	r3, [r0, #0]
 8028b3c:	f013 0207 	ands.w	r2, r3, #7
 8028b40:	4601      	mov	r1, r0
 8028b42:	d00b      	beq.n	8028b5c <__lo0bits+0x22>
 8028b44:	07da      	lsls	r2, r3, #31
 8028b46:	d423      	bmi.n	8028b90 <__lo0bits+0x56>
 8028b48:	0798      	lsls	r0, r3, #30
 8028b4a:	bf49      	itett	mi
 8028b4c:	085b      	lsrmi	r3, r3, #1
 8028b4e:	089b      	lsrpl	r3, r3, #2
 8028b50:	2001      	movmi	r0, #1
 8028b52:	600b      	strmi	r3, [r1, #0]
 8028b54:	bf5c      	itt	pl
 8028b56:	600b      	strpl	r3, [r1, #0]
 8028b58:	2002      	movpl	r0, #2
 8028b5a:	4770      	bx	lr
 8028b5c:	b298      	uxth	r0, r3
 8028b5e:	b9a8      	cbnz	r0, 8028b8c <__lo0bits+0x52>
 8028b60:	0c1b      	lsrs	r3, r3, #16
 8028b62:	2010      	movs	r0, #16
 8028b64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8028b68:	bf04      	itt	eq
 8028b6a:	0a1b      	lsreq	r3, r3, #8
 8028b6c:	3008      	addeq	r0, #8
 8028b6e:	071a      	lsls	r2, r3, #28
 8028b70:	bf04      	itt	eq
 8028b72:	091b      	lsreq	r3, r3, #4
 8028b74:	3004      	addeq	r0, #4
 8028b76:	079a      	lsls	r2, r3, #30
 8028b78:	bf04      	itt	eq
 8028b7a:	089b      	lsreq	r3, r3, #2
 8028b7c:	3002      	addeq	r0, #2
 8028b7e:	07da      	lsls	r2, r3, #31
 8028b80:	d402      	bmi.n	8028b88 <__lo0bits+0x4e>
 8028b82:	085b      	lsrs	r3, r3, #1
 8028b84:	d006      	beq.n	8028b94 <__lo0bits+0x5a>
 8028b86:	3001      	adds	r0, #1
 8028b88:	600b      	str	r3, [r1, #0]
 8028b8a:	4770      	bx	lr
 8028b8c:	4610      	mov	r0, r2
 8028b8e:	e7e9      	b.n	8028b64 <__lo0bits+0x2a>
 8028b90:	2000      	movs	r0, #0
 8028b92:	4770      	bx	lr
 8028b94:	2020      	movs	r0, #32
 8028b96:	4770      	bx	lr

08028b98 <__i2b>:
 8028b98:	b510      	push	{r4, lr}
 8028b9a:	460c      	mov	r4, r1
 8028b9c:	2101      	movs	r1, #1
 8028b9e:	f7ff ff27 	bl	80289f0 <_Balloc>
 8028ba2:	2201      	movs	r2, #1
 8028ba4:	6144      	str	r4, [r0, #20]
 8028ba6:	6102      	str	r2, [r0, #16]
 8028ba8:	bd10      	pop	{r4, pc}

08028baa <__multiply>:
 8028baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bae:	4614      	mov	r4, r2
 8028bb0:	690a      	ldr	r2, [r1, #16]
 8028bb2:	6923      	ldr	r3, [r4, #16]
 8028bb4:	429a      	cmp	r2, r3
 8028bb6:	bfb8      	it	lt
 8028bb8:	460b      	movlt	r3, r1
 8028bba:	4688      	mov	r8, r1
 8028bbc:	bfbc      	itt	lt
 8028bbe:	46a0      	movlt	r8, r4
 8028bc0:	461c      	movlt	r4, r3
 8028bc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8028bc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028bce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028bd2:	eb07 0609 	add.w	r6, r7, r9
 8028bd6:	42b3      	cmp	r3, r6
 8028bd8:	bfb8      	it	lt
 8028bda:	3101      	addlt	r1, #1
 8028bdc:	f7ff ff08 	bl	80289f0 <_Balloc>
 8028be0:	f100 0514 	add.w	r5, r0, #20
 8028be4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8028be8:	462b      	mov	r3, r5
 8028bea:	2200      	movs	r2, #0
 8028bec:	4573      	cmp	r3, lr
 8028bee:	d316      	bcc.n	8028c1e <__multiply+0x74>
 8028bf0:	f104 0214 	add.w	r2, r4, #20
 8028bf4:	f108 0114 	add.w	r1, r8, #20
 8028bf8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8028bfc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8028c00:	9300      	str	r3, [sp, #0]
 8028c02:	9b00      	ldr	r3, [sp, #0]
 8028c04:	9201      	str	r2, [sp, #4]
 8028c06:	4293      	cmp	r3, r2
 8028c08:	d80c      	bhi.n	8028c24 <__multiply+0x7a>
 8028c0a:	2e00      	cmp	r6, #0
 8028c0c:	dd03      	ble.n	8028c16 <__multiply+0x6c>
 8028c0e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8028c12:	2b00      	cmp	r3, #0
 8028c14:	d05d      	beq.n	8028cd2 <__multiply+0x128>
 8028c16:	6106      	str	r6, [r0, #16]
 8028c18:	b003      	add	sp, #12
 8028c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c1e:	f843 2b04 	str.w	r2, [r3], #4
 8028c22:	e7e3      	b.n	8028bec <__multiply+0x42>
 8028c24:	f8b2 b000 	ldrh.w	fp, [r2]
 8028c28:	f1bb 0f00 	cmp.w	fp, #0
 8028c2c:	d023      	beq.n	8028c76 <__multiply+0xcc>
 8028c2e:	4689      	mov	r9, r1
 8028c30:	46ac      	mov	ip, r5
 8028c32:	f04f 0800 	mov.w	r8, #0
 8028c36:	f859 4b04 	ldr.w	r4, [r9], #4
 8028c3a:	f8dc a000 	ldr.w	sl, [ip]
 8028c3e:	b2a3      	uxth	r3, r4
 8028c40:	fa1f fa8a 	uxth.w	sl, sl
 8028c44:	fb0b a303 	mla	r3, fp, r3, sl
 8028c48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8028c4c:	f8dc 4000 	ldr.w	r4, [ip]
 8028c50:	4443      	add	r3, r8
 8028c52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8028c56:	fb0b 840a 	mla	r4, fp, sl, r8
 8028c5a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8028c5e:	46e2      	mov	sl, ip
 8028c60:	b29b      	uxth	r3, r3
 8028c62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8028c66:	454f      	cmp	r7, r9
 8028c68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8028c6c:	f84a 3b04 	str.w	r3, [sl], #4
 8028c70:	d82b      	bhi.n	8028cca <__multiply+0x120>
 8028c72:	f8cc 8004 	str.w	r8, [ip, #4]
 8028c76:	9b01      	ldr	r3, [sp, #4]
 8028c78:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8028c7c:	3204      	adds	r2, #4
 8028c7e:	f1ba 0f00 	cmp.w	sl, #0
 8028c82:	d020      	beq.n	8028cc6 <__multiply+0x11c>
 8028c84:	682b      	ldr	r3, [r5, #0]
 8028c86:	4689      	mov	r9, r1
 8028c88:	46a8      	mov	r8, r5
 8028c8a:	f04f 0b00 	mov.w	fp, #0
 8028c8e:	f8b9 c000 	ldrh.w	ip, [r9]
 8028c92:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8028c96:	fb0a 440c 	mla	r4, sl, ip, r4
 8028c9a:	445c      	add	r4, fp
 8028c9c:	46c4      	mov	ip, r8
 8028c9e:	b29b      	uxth	r3, r3
 8028ca0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8028ca4:	f84c 3b04 	str.w	r3, [ip], #4
 8028ca8:	f859 3b04 	ldr.w	r3, [r9], #4
 8028cac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8028cb0:	0c1b      	lsrs	r3, r3, #16
 8028cb2:	fb0a b303 	mla	r3, sl, r3, fp
 8028cb6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8028cba:	454f      	cmp	r7, r9
 8028cbc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8028cc0:	d805      	bhi.n	8028cce <__multiply+0x124>
 8028cc2:	f8c8 3004 	str.w	r3, [r8, #4]
 8028cc6:	3504      	adds	r5, #4
 8028cc8:	e79b      	b.n	8028c02 <__multiply+0x58>
 8028cca:	46d4      	mov	ip, sl
 8028ccc:	e7b3      	b.n	8028c36 <__multiply+0x8c>
 8028cce:	46e0      	mov	r8, ip
 8028cd0:	e7dd      	b.n	8028c8e <__multiply+0xe4>
 8028cd2:	3e01      	subs	r6, #1
 8028cd4:	e799      	b.n	8028c0a <__multiply+0x60>
	...

08028cd8 <__pow5mult>:
 8028cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028cdc:	4615      	mov	r5, r2
 8028cde:	f012 0203 	ands.w	r2, r2, #3
 8028ce2:	4606      	mov	r6, r0
 8028ce4:	460f      	mov	r7, r1
 8028ce6:	d007      	beq.n	8028cf8 <__pow5mult+0x20>
 8028ce8:	3a01      	subs	r2, #1
 8028cea:	4c21      	ldr	r4, [pc, #132]	; (8028d70 <__pow5mult+0x98>)
 8028cec:	2300      	movs	r3, #0
 8028cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028cf2:	f7ff fec8 	bl	8028a86 <__multadd>
 8028cf6:	4607      	mov	r7, r0
 8028cf8:	10ad      	asrs	r5, r5, #2
 8028cfa:	d035      	beq.n	8028d68 <__pow5mult+0x90>
 8028cfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8028cfe:	b93c      	cbnz	r4, 8028d10 <__pow5mult+0x38>
 8028d00:	2010      	movs	r0, #16
 8028d02:	f7fe fa7f 	bl	8027204 <malloc>
 8028d06:	6270      	str	r0, [r6, #36]	; 0x24
 8028d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028d0c:	6004      	str	r4, [r0, #0]
 8028d0e:	60c4      	str	r4, [r0, #12]
 8028d10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8028d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028d18:	b94c      	cbnz	r4, 8028d2e <__pow5mult+0x56>
 8028d1a:	f240 2171 	movw	r1, #625	; 0x271
 8028d1e:	4630      	mov	r0, r6
 8028d20:	f7ff ff3a 	bl	8028b98 <__i2b>
 8028d24:	2300      	movs	r3, #0
 8028d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8028d2a:	4604      	mov	r4, r0
 8028d2c:	6003      	str	r3, [r0, #0]
 8028d2e:	f04f 0800 	mov.w	r8, #0
 8028d32:	07eb      	lsls	r3, r5, #31
 8028d34:	d50a      	bpl.n	8028d4c <__pow5mult+0x74>
 8028d36:	4639      	mov	r1, r7
 8028d38:	4622      	mov	r2, r4
 8028d3a:	4630      	mov	r0, r6
 8028d3c:	f7ff ff35 	bl	8028baa <__multiply>
 8028d40:	4639      	mov	r1, r7
 8028d42:	4681      	mov	r9, r0
 8028d44:	4630      	mov	r0, r6
 8028d46:	f7ff fe87 	bl	8028a58 <_Bfree>
 8028d4a:	464f      	mov	r7, r9
 8028d4c:	106d      	asrs	r5, r5, #1
 8028d4e:	d00b      	beq.n	8028d68 <__pow5mult+0x90>
 8028d50:	6820      	ldr	r0, [r4, #0]
 8028d52:	b938      	cbnz	r0, 8028d64 <__pow5mult+0x8c>
 8028d54:	4622      	mov	r2, r4
 8028d56:	4621      	mov	r1, r4
 8028d58:	4630      	mov	r0, r6
 8028d5a:	f7ff ff26 	bl	8028baa <__multiply>
 8028d5e:	6020      	str	r0, [r4, #0]
 8028d60:	f8c0 8000 	str.w	r8, [r0]
 8028d64:	4604      	mov	r4, r0
 8028d66:	e7e4      	b.n	8028d32 <__pow5mult+0x5a>
 8028d68:	4638      	mov	r0, r7
 8028d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028d6e:	bf00      	nop
 8028d70:	08045168 	.word	0x08045168

08028d74 <__lshift>:
 8028d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028d78:	460c      	mov	r4, r1
 8028d7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028d7e:	6923      	ldr	r3, [r4, #16]
 8028d80:	6849      	ldr	r1, [r1, #4]
 8028d82:	eb0a 0903 	add.w	r9, sl, r3
 8028d86:	68a3      	ldr	r3, [r4, #8]
 8028d88:	4607      	mov	r7, r0
 8028d8a:	4616      	mov	r6, r2
 8028d8c:	f109 0501 	add.w	r5, r9, #1
 8028d90:	42ab      	cmp	r3, r5
 8028d92:	db32      	blt.n	8028dfa <__lshift+0x86>
 8028d94:	4638      	mov	r0, r7
 8028d96:	f7ff fe2b 	bl	80289f0 <_Balloc>
 8028d9a:	2300      	movs	r3, #0
 8028d9c:	4680      	mov	r8, r0
 8028d9e:	f100 0114 	add.w	r1, r0, #20
 8028da2:	461a      	mov	r2, r3
 8028da4:	4553      	cmp	r3, sl
 8028da6:	db2b      	blt.n	8028e00 <__lshift+0x8c>
 8028da8:	6920      	ldr	r0, [r4, #16]
 8028daa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028dae:	f104 0314 	add.w	r3, r4, #20
 8028db2:	f016 021f 	ands.w	r2, r6, #31
 8028db6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028dba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8028dbe:	d025      	beq.n	8028e0c <__lshift+0x98>
 8028dc0:	f1c2 0e20 	rsb	lr, r2, #32
 8028dc4:	2000      	movs	r0, #0
 8028dc6:	681e      	ldr	r6, [r3, #0]
 8028dc8:	468a      	mov	sl, r1
 8028dca:	4096      	lsls	r6, r2
 8028dcc:	4330      	orrs	r0, r6
 8028dce:	f84a 0b04 	str.w	r0, [sl], #4
 8028dd2:	f853 0b04 	ldr.w	r0, [r3], #4
 8028dd6:	459c      	cmp	ip, r3
 8028dd8:	fa20 f00e 	lsr.w	r0, r0, lr
 8028ddc:	d814      	bhi.n	8028e08 <__lshift+0x94>
 8028dde:	6048      	str	r0, [r1, #4]
 8028de0:	b108      	cbz	r0, 8028de6 <__lshift+0x72>
 8028de2:	f109 0502 	add.w	r5, r9, #2
 8028de6:	3d01      	subs	r5, #1
 8028de8:	4638      	mov	r0, r7
 8028dea:	f8c8 5010 	str.w	r5, [r8, #16]
 8028dee:	4621      	mov	r1, r4
 8028df0:	f7ff fe32 	bl	8028a58 <_Bfree>
 8028df4:	4640      	mov	r0, r8
 8028df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028dfa:	3101      	adds	r1, #1
 8028dfc:	005b      	lsls	r3, r3, #1
 8028dfe:	e7c7      	b.n	8028d90 <__lshift+0x1c>
 8028e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8028e04:	3301      	adds	r3, #1
 8028e06:	e7cd      	b.n	8028da4 <__lshift+0x30>
 8028e08:	4651      	mov	r1, sl
 8028e0a:	e7dc      	b.n	8028dc6 <__lshift+0x52>
 8028e0c:	3904      	subs	r1, #4
 8028e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e12:	f841 2f04 	str.w	r2, [r1, #4]!
 8028e16:	459c      	cmp	ip, r3
 8028e18:	d8f9      	bhi.n	8028e0e <__lshift+0x9a>
 8028e1a:	e7e4      	b.n	8028de6 <__lshift+0x72>

08028e1c <__mcmp>:
 8028e1c:	6903      	ldr	r3, [r0, #16]
 8028e1e:	690a      	ldr	r2, [r1, #16]
 8028e20:	1a9b      	subs	r3, r3, r2
 8028e22:	b530      	push	{r4, r5, lr}
 8028e24:	d10c      	bne.n	8028e40 <__mcmp+0x24>
 8028e26:	0092      	lsls	r2, r2, #2
 8028e28:	3014      	adds	r0, #20
 8028e2a:	3114      	adds	r1, #20
 8028e2c:	1884      	adds	r4, r0, r2
 8028e2e:	4411      	add	r1, r2
 8028e30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8028e34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8028e38:	4295      	cmp	r5, r2
 8028e3a:	d003      	beq.n	8028e44 <__mcmp+0x28>
 8028e3c:	d305      	bcc.n	8028e4a <__mcmp+0x2e>
 8028e3e:	2301      	movs	r3, #1
 8028e40:	4618      	mov	r0, r3
 8028e42:	bd30      	pop	{r4, r5, pc}
 8028e44:	42a0      	cmp	r0, r4
 8028e46:	d3f3      	bcc.n	8028e30 <__mcmp+0x14>
 8028e48:	e7fa      	b.n	8028e40 <__mcmp+0x24>
 8028e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028e4e:	e7f7      	b.n	8028e40 <__mcmp+0x24>

08028e50 <__mdiff>:
 8028e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e54:	460d      	mov	r5, r1
 8028e56:	4607      	mov	r7, r0
 8028e58:	4611      	mov	r1, r2
 8028e5a:	4628      	mov	r0, r5
 8028e5c:	4614      	mov	r4, r2
 8028e5e:	f7ff ffdd 	bl	8028e1c <__mcmp>
 8028e62:	1e06      	subs	r6, r0, #0
 8028e64:	d108      	bne.n	8028e78 <__mdiff+0x28>
 8028e66:	4631      	mov	r1, r6
 8028e68:	4638      	mov	r0, r7
 8028e6a:	f7ff fdc1 	bl	80289f0 <_Balloc>
 8028e6e:	2301      	movs	r3, #1
 8028e70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8028e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e78:	bfa4      	itt	ge
 8028e7a:	4623      	movge	r3, r4
 8028e7c:	462c      	movge	r4, r5
 8028e7e:	4638      	mov	r0, r7
 8028e80:	6861      	ldr	r1, [r4, #4]
 8028e82:	bfa6      	itte	ge
 8028e84:	461d      	movge	r5, r3
 8028e86:	2600      	movge	r6, #0
 8028e88:	2601      	movlt	r6, #1
 8028e8a:	f7ff fdb1 	bl	80289f0 <_Balloc>
 8028e8e:	692b      	ldr	r3, [r5, #16]
 8028e90:	60c6      	str	r6, [r0, #12]
 8028e92:	6926      	ldr	r6, [r4, #16]
 8028e94:	f105 0914 	add.w	r9, r5, #20
 8028e98:	f104 0214 	add.w	r2, r4, #20
 8028e9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8028ea0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8028ea4:	f100 0514 	add.w	r5, r0, #20
 8028ea8:	f04f 0e00 	mov.w	lr, #0
 8028eac:	f852 ab04 	ldr.w	sl, [r2], #4
 8028eb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8028eb4:	fa1e f18a 	uxtah	r1, lr, sl
 8028eb8:	b2a3      	uxth	r3, r4
 8028eba:	1ac9      	subs	r1, r1, r3
 8028ebc:	0c23      	lsrs	r3, r4, #16
 8028ebe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8028ec2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8028ec6:	b289      	uxth	r1, r1
 8028ec8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8028ecc:	45c8      	cmp	r8, r9
 8028ece:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8028ed2:	4694      	mov	ip, r2
 8028ed4:	f845 3b04 	str.w	r3, [r5], #4
 8028ed8:	d8e8      	bhi.n	8028eac <__mdiff+0x5c>
 8028eda:	45bc      	cmp	ip, r7
 8028edc:	d304      	bcc.n	8028ee8 <__mdiff+0x98>
 8028ede:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8028ee2:	b183      	cbz	r3, 8028f06 <__mdiff+0xb6>
 8028ee4:	6106      	str	r6, [r0, #16]
 8028ee6:	e7c5      	b.n	8028e74 <__mdiff+0x24>
 8028ee8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8028eec:	fa1e f381 	uxtah	r3, lr, r1
 8028ef0:	141a      	asrs	r2, r3, #16
 8028ef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8028ef6:	b29b      	uxth	r3, r3
 8028ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028efc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8028f00:	f845 3b04 	str.w	r3, [r5], #4
 8028f04:	e7e9      	b.n	8028eda <__mdiff+0x8a>
 8028f06:	3e01      	subs	r6, #1
 8028f08:	e7e9      	b.n	8028ede <__mdiff+0x8e>

08028f0a <__d2b>:
 8028f0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028f0e:	460e      	mov	r6, r1
 8028f10:	2101      	movs	r1, #1
 8028f12:	ec59 8b10 	vmov	r8, r9, d0
 8028f16:	4615      	mov	r5, r2
 8028f18:	f7ff fd6a 	bl	80289f0 <_Balloc>
 8028f1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8028f20:	4607      	mov	r7, r0
 8028f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028f26:	bb34      	cbnz	r4, 8028f76 <__d2b+0x6c>
 8028f28:	9301      	str	r3, [sp, #4]
 8028f2a:	f1b8 0300 	subs.w	r3, r8, #0
 8028f2e:	d027      	beq.n	8028f80 <__d2b+0x76>
 8028f30:	a802      	add	r0, sp, #8
 8028f32:	f840 3d08 	str.w	r3, [r0, #-8]!
 8028f36:	f7ff fe00 	bl	8028b3a <__lo0bits>
 8028f3a:	9900      	ldr	r1, [sp, #0]
 8028f3c:	b1f0      	cbz	r0, 8028f7c <__d2b+0x72>
 8028f3e:	9a01      	ldr	r2, [sp, #4]
 8028f40:	f1c0 0320 	rsb	r3, r0, #32
 8028f44:	fa02 f303 	lsl.w	r3, r2, r3
 8028f48:	430b      	orrs	r3, r1
 8028f4a:	40c2      	lsrs	r2, r0
 8028f4c:	617b      	str	r3, [r7, #20]
 8028f4e:	9201      	str	r2, [sp, #4]
 8028f50:	9b01      	ldr	r3, [sp, #4]
 8028f52:	61bb      	str	r3, [r7, #24]
 8028f54:	2b00      	cmp	r3, #0
 8028f56:	bf14      	ite	ne
 8028f58:	2102      	movne	r1, #2
 8028f5a:	2101      	moveq	r1, #1
 8028f5c:	6139      	str	r1, [r7, #16]
 8028f5e:	b1c4      	cbz	r4, 8028f92 <__d2b+0x88>
 8028f60:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8028f64:	4404      	add	r4, r0
 8028f66:	6034      	str	r4, [r6, #0]
 8028f68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028f6c:	6028      	str	r0, [r5, #0]
 8028f6e:	4638      	mov	r0, r7
 8028f70:	b003      	add	sp, #12
 8028f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028f7a:	e7d5      	b.n	8028f28 <__d2b+0x1e>
 8028f7c:	6179      	str	r1, [r7, #20]
 8028f7e:	e7e7      	b.n	8028f50 <__d2b+0x46>
 8028f80:	a801      	add	r0, sp, #4
 8028f82:	f7ff fdda 	bl	8028b3a <__lo0bits>
 8028f86:	9b01      	ldr	r3, [sp, #4]
 8028f88:	617b      	str	r3, [r7, #20]
 8028f8a:	2101      	movs	r1, #1
 8028f8c:	6139      	str	r1, [r7, #16]
 8028f8e:	3020      	adds	r0, #32
 8028f90:	e7e5      	b.n	8028f5e <__d2b+0x54>
 8028f92:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8028f96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028f9a:	6030      	str	r0, [r6, #0]
 8028f9c:	6918      	ldr	r0, [r3, #16]
 8028f9e:	f7ff fdad 	bl	8028afc <__hi0bits>
 8028fa2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8028fa6:	e7e1      	b.n	8028f6c <__d2b+0x62>

08028fa8 <_calloc_r>:
 8028fa8:	b538      	push	{r3, r4, r5, lr}
 8028faa:	fb02 f401 	mul.w	r4, r2, r1
 8028fae:	4621      	mov	r1, r4
 8028fb0:	f7fe f99a 	bl	80272e8 <_malloc_r>
 8028fb4:	4605      	mov	r5, r0
 8028fb6:	b118      	cbz	r0, 8028fc0 <_calloc_r+0x18>
 8028fb8:	4622      	mov	r2, r4
 8028fba:	2100      	movs	r1, #0
 8028fbc:	f7fe f93d 	bl	802723a <memset>
 8028fc0:	4628      	mov	r0, r5
 8028fc2:	bd38      	pop	{r3, r4, r5, pc}

08028fc4 <__ssputs_r>:
 8028fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028fc8:	688e      	ldr	r6, [r1, #8]
 8028fca:	429e      	cmp	r6, r3
 8028fcc:	4682      	mov	sl, r0
 8028fce:	460c      	mov	r4, r1
 8028fd0:	4690      	mov	r8, r2
 8028fd2:	4699      	mov	r9, r3
 8028fd4:	d837      	bhi.n	8029046 <__ssputs_r+0x82>
 8028fd6:	898a      	ldrh	r2, [r1, #12]
 8028fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8028fdc:	d031      	beq.n	8029042 <__ssputs_r+0x7e>
 8028fde:	6825      	ldr	r5, [r4, #0]
 8028fe0:	6909      	ldr	r1, [r1, #16]
 8028fe2:	1a6f      	subs	r7, r5, r1
 8028fe4:	6965      	ldr	r5, [r4, #20]
 8028fe6:	2302      	movs	r3, #2
 8028fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028fec:	fb95 f5f3 	sdiv	r5, r5, r3
 8028ff0:	f109 0301 	add.w	r3, r9, #1
 8028ff4:	443b      	add	r3, r7
 8028ff6:	429d      	cmp	r5, r3
 8028ff8:	bf38      	it	cc
 8028ffa:	461d      	movcc	r5, r3
 8028ffc:	0553      	lsls	r3, r2, #21
 8028ffe:	d530      	bpl.n	8029062 <__ssputs_r+0x9e>
 8029000:	4629      	mov	r1, r5
 8029002:	f7fe f971 	bl	80272e8 <_malloc_r>
 8029006:	4606      	mov	r6, r0
 8029008:	b950      	cbnz	r0, 8029020 <__ssputs_r+0x5c>
 802900a:	230c      	movs	r3, #12
 802900c:	f8ca 3000 	str.w	r3, [sl]
 8029010:	89a3      	ldrh	r3, [r4, #12]
 8029012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029016:	81a3      	strh	r3, [r4, #12]
 8029018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029020:	463a      	mov	r2, r7
 8029022:	6921      	ldr	r1, [r4, #16]
 8029024:	f7fe f8fe 	bl	8027224 <memcpy>
 8029028:	89a3      	ldrh	r3, [r4, #12]
 802902a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802902e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029032:	81a3      	strh	r3, [r4, #12]
 8029034:	6126      	str	r6, [r4, #16]
 8029036:	6165      	str	r5, [r4, #20]
 8029038:	443e      	add	r6, r7
 802903a:	1bed      	subs	r5, r5, r7
 802903c:	6026      	str	r6, [r4, #0]
 802903e:	60a5      	str	r5, [r4, #8]
 8029040:	464e      	mov	r6, r9
 8029042:	454e      	cmp	r6, r9
 8029044:	d900      	bls.n	8029048 <__ssputs_r+0x84>
 8029046:	464e      	mov	r6, r9
 8029048:	4632      	mov	r2, r6
 802904a:	4641      	mov	r1, r8
 802904c:	6820      	ldr	r0, [r4, #0]
 802904e:	f000 fdb7 	bl	8029bc0 <memmove>
 8029052:	68a3      	ldr	r3, [r4, #8]
 8029054:	1b9b      	subs	r3, r3, r6
 8029056:	60a3      	str	r3, [r4, #8]
 8029058:	6823      	ldr	r3, [r4, #0]
 802905a:	441e      	add	r6, r3
 802905c:	6026      	str	r6, [r4, #0]
 802905e:	2000      	movs	r0, #0
 8029060:	e7dc      	b.n	802901c <__ssputs_r+0x58>
 8029062:	462a      	mov	r2, r5
 8029064:	f000 fdc5 	bl	8029bf2 <_realloc_r>
 8029068:	4606      	mov	r6, r0
 802906a:	2800      	cmp	r0, #0
 802906c:	d1e2      	bne.n	8029034 <__ssputs_r+0x70>
 802906e:	6921      	ldr	r1, [r4, #16]
 8029070:	4650      	mov	r0, sl
 8029072:	f7fe f8eb 	bl	802724c <_free_r>
 8029076:	e7c8      	b.n	802900a <__ssputs_r+0x46>

08029078 <_svfiprintf_r>:
 8029078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802907c:	461d      	mov	r5, r3
 802907e:	898b      	ldrh	r3, [r1, #12]
 8029080:	061f      	lsls	r7, r3, #24
 8029082:	b09d      	sub	sp, #116	; 0x74
 8029084:	4680      	mov	r8, r0
 8029086:	460c      	mov	r4, r1
 8029088:	4616      	mov	r6, r2
 802908a:	d50f      	bpl.n	80290ac <_svfiprintf_r+0x34>
 802908c:	690b      	ldr	r3, [r1, #16]
 802908e:	b96b      	cbnz	r3, 80290ac <_svfiprintf_r+0x34>
 8029090:	2140      	movs	r1, #64	; 0x40
 8029092:	f7fe f929 	bl	80272e8 <_malloc_r>
 8029096:	6020      	str	r0, [r4, #0]
 8029098:	6120      	str	r0, [r4, #16]
 802909a:	b928      	cbnz	r0, 80290a8 <_svfiprintf_r+0x30>
 802909c:	230c      	movs	r3, #12
 802909e:	f8c8 3000 	str.w	r3, [r8]
 80290a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80290a6:	e0c8      	b.n	802923a <_svfiprintf_r+0x1c2>
 80290a8:	2340      	movs	r3, #64	; 0x40
 80290aa:	6163      	str	r3, [r4, #20]
 80290ac:	2300      	movs	r3, #0
 80290ae:	9309      	str	r3, [sp, #36]	; 0x24
 80290b0:	2320      	movs	r3, #32
 80290b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80290b6:	2330      	movs	r3, #48	; 0x30
 80290b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80290bc:	9503      	str	r5, [sp, #12]
 80290be:	f04f 0b01 	mov.w	fp, #1
 80290c2:	4637      	mov	r7, r6
 80290c4:	463d      	mov	r5, r7
 80290c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80290ca:	b10b      	cbz	r3, 80290d0 <_svfiprintf_r+0x58>
 80290cc:	2b25      	cmp	r3, #37	; 0x25
 80290ce:	d13e      	bne.n	802914e <_svfiprintf_r+0xd6>
 80290d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80290d4:	d00b      	beq.n	80290ee <_svfiprintf_r+0x76>
 80290d6:	4653      	mov	r3, sl
 80290d8:	4632      	mov	r2, r6
 80290da:	4621      	mov	r1, r4
 80290dc:	4640      	mov	r0, r8
 80290de:	f7ff ff71 	bl	8028fc4 <__ssputs_r>
 80290e2:	3001      	adds	r0, #1
 80290e4:	f000 80a4 	beq.w	8029230 <_svfiprintf_r+0x1b8>
 80290e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80290ea:	4453      	add	r3, sl
 80290ec:	9309      	str	r3, [sp, #36]	; 0x24
 80290ee:	783b      	ldrb	r3, [r7, #0]
 80290f0:	2b00      	cmp	r3, #0
 80290f2:	f000 809d 	beq.w	8029230 <_svfiprintf_r+0x1b8>
 80290f6:	2300      	movs	r3, #0
 80290f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80290fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029100:	9304      	str	r3, [sp, #16]
 8029102:	9307      	str	r3, [sp, #28]
 8029104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029108:	931a      	str	r3, [sp, #104]	; 0x68
 802910a:	462f      	mov	r7, r5
 802910c:	2205      	movs	r2, #5
 802910e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8029112:	4850      	ldr	r0, [pc, #320]	; (8029254 <_svfiprintf_r+0x1dc>)
 8029114:	f7d7 f874 	bl	8000200 <memchr>
 8029118:	9b04      	ldr	r3, [sp, #16]
 802911a:	b9d0      	cbnz	r0, 8029152 <_svfiprintf_r+0xda>
 802911c:	06d9      	lsls	r1, r3, #27
 802911e:	bf44      	itt	mi
 8029120:	2220      	movmi	r2, #32
 8029122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8029126:	071a      	lsls	r2, r3, #28
 8029128:	bf44      	itt	mi
 802912a:	222b      	movmi	r2, #43	; 0x2b
 802912c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8029130:	782a      	ldrb	r2, [r5, #0]
 8029132:	2a2a      	cmp	r2, #42	; 0x2a
 8029134:	d015      	beq.n	8029162 <_svfiprintf_r+0xea>
 8029136:	9a07      	ldr	r2, [sp, #28]
 8029138:	462f      	mov	r7, r5
 802913a:	2000      	movs	r0, #0
 802913c:	250a      	movs	r5, #10
 802913e:	4639      	mov	r1, r7
 8029140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029144:	3b30      	subs	r3, #48	; 0x30
 8029146:	2b09      	cmp	r3, #9
 8029148:	d94d      	bls.n	80291e6 <_svfiprintf_r+0x16e>
 802914a:	b1b8      	cbz	r0, 802917c <_svfiprintf_r+0x104>
 802914c:	e00f      	b.n	802916e <_svfiprintf_r+0xf6>
 802914e:	462f      	mov	r7, r5
 8029150:	e7b8      	b.n	80290c4 <_svfiprintf_r+0x4c>
 8029152:	4a40      	ldr	r2, [pc, #256]	; (8029254 <_svfiprintf_r+0x1dc>)
 8029154:	1a80      	subs	r0, r0, r2
 8029156:	fa0b f000 	lsl.w	r0, fp, r0
 802915a:	4318      	orrs	r0, r3
 802915c:	9004      	str	r0, [sp, #16]
 802915e:	463d      	mov	r5, r7
 8029160:	e7d3      	b.n	802910a <_svfiprintf_r+0x92>
 8029162:	9a03      	ldr	r2, [sp, #12]
 8029164:	1d11      	adds	r1, r2, #4
 8029166:	6812      	ldr	r2, [r2, #0]
 8029168:	9103      	str	r1, [sp, #12]
 802916a:	2a00      	cmp	r2, #0
 802916c:	db01      	blt.n	8029172 <_svfiprintf_r+0xfa>
 802916e:	9207      	str	r2, [sp, #28]
 8029170:	e004      	b.n	802917c <_svfiprintf_r+0x104>
 8029172:	4252      	negs	r2, r2
 8029174:	f043 0302 	orr.w	r3, r3, #2
 8029178:	9207      	str	r2, [sp, #28]
 802917a:	9304      	str	r3, [sp, #16]
 802917c:	783b      	ldrb	r3, [r7, #0]
 802917e:	2b2e      	cmp	r3, #46	; 0x2e
 8029180:	d10c      	bne.n	802919c <_svfiprintf_r+0x124>
 8029182:	787b      	ldrb	r3, [r7, #1]
 8029184:	2b2a      	cmp	r3, #42	; 0x2a
 8029186:	d133      	bne.n	80291f0 <_svfiprintf_r+0x178>
 8029188:	9b03      	ldr	r3, [sp, #12]
 802918a:	1d1a      	adds	r2, r3, #4
 802918c:	681b      	ldr	r3, [r3, #0]
 802918e:	9203      	str	r2, [sp, #12]
 8029190:	2b00      	cmp	r3, #0
 8029192:	bfb8      	it	lt
 8029194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8029198:	3702      	adds	r7, #2
 802919a:	9305      	str	r3, [sp, #20]
 802919c:	4d2e      	ldr	r5, [pc, #184]	; (8029258 <_svfiprintf_r+0x1e0>)
 802919e:	7839      	ldrb	r1, [r7, #0]
 80291a0:	2203      	movs	r2, #3
 80291a2:	4628      	mov	r0, r5
 80291a4:	f7d7 f82c 	bl	8000200 <memchr>
 80291a8:	b138      	cbz	r0, 80291ba <_svfiprintf_r+0x142>
 80291aa:	2340      	movs	r3, #64	; 0x40
 80291ac:	1b40      	subs	r0, r0, r5
 80291ae:	fa03 f000 	lsl.w	r0, r3, r0
 80291b2:	9b04      	ldr	r3, [sp, #16]
 80291b4:	4303      	orrs	r3, r0
 80291b6:	3701      	adds	r7, #1
 80291b8:	9304      	str	r3, [sp, #16]
 80291ba:	7839      	ldrb	r1, [r7, #0]
 80291bc:	4827      	ldr	r0, [pc, #156]	; (802925c <_svfiprintf_r+0x1e4>)
 80291be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80291c2:	2206      	movs	r2, #6
 80291c4:	1c7e      	adds	r6, r7, #1
 80291c6:	f7d7 f81b 	bl	8000200 <memchr>
 80291ca:	2800      	cmp	r0, #0
 80291cc:	d038      	beq.n	8029240 <_svfiprintf_r+0x1c8>
 80291ce:	4b24      	ldr	r3, [pc, #144]	; (8029260 <_svfiprintf_r+0x1e8>)
 80291d0:	bb13      	cbnz	r3, 8029218 <_svfiprintf_r+0x1a0>
 80291d2:	9b03      	ldr	r3, [sp, #12]
 80291d4:	3307      	adds	r3, #7
 80291d6:	f023 0307 	bic.w	r3, r3, #7
 80291da:	3308      	adds	r3, #8
 80291dc:	9303      	str	r3, [sp, #12]
 80291de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80291e0:	444b      	add	r3, r9
 80291e2:	9309      	str	r3, [sp, #36]	; 0x24
 80291e4:	e76d      	b.n	80290c2 <_svfiprintf_r+0x4a>
 80291e6:	fb05 3202 	mla	r2, r5, r2, r3
 80291ea:	2001      	movs	r0, #1
 80291ec:	460f      	mov	r7, r1
 80291ee:	e7a6      	b.n	802913e <_svfiprintf_r+0xc6>
 80291f0:	2300      	movs	r3, #0
 80291f2:	3701      	adds	r7, #1
 80291f4:	9305      	str	r3, [sp, #20]
 80291f6:	4619      	mov	r1, r3
 80291f8:	250a      	movs	r5, #10
 80291fa:	4638      	mov	r0, r7
 80291fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029200:	3a30      	subs	r2, #48	; 0x30
 8029202:	2a09      	cmp	r2, #9
 8029204:	d903      	bls.n	802920e <_svfiprintf_r+0x196>
 8029206:	2b00      	cmp	r3, #0
 8029208:	d0c8      	beq.n	802919c <_svfiprintf_r+0x124>
 802920a:	9105      	str	r1, [sp, #20]
 802920c:	e7c6      	b.n	802919c <_svfiprintf_r+0x124>
 802920e:	fb05 2101 	mla	r1, r5, r1, r2
 8029212:	2301      	movs	r3, #1
 8029214:	4607      	mov	r7, r0
 8029216:	e7f0      	b.n	80291fa <_svfiprintf_r+0x182>
 8029218:	ab03      	add	r3, sp, #12
 802921a:	9300      	str	r3, [sp, #0]
 802921c:	4622      	mov	r2, r4
 802921e:	4b11      	ldr	r3, [pc, #68]	; (8029264 <_svfiprintf_r+0x1ec>)
 8029220:	a904      	add	r1, sp, #16
 8029222:	4640      	mov	r0, r8
 8029224:	f7fe f94e 	bl	80274c4 <_printf_float>
 8029228:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 802922c:	4681      	mov	r9, r0
 802922e:	d1d6      	bne.n	80291de <_svfiprintf_r+0x166>
 8029230:	89a3      	ldrh	r3, [r4, #12]
 8029232:	065b      	lsls	r3, r3, #25
 8029234:	f53f af35 	bmi.w	80290a2 <_svfiprintf_r+0x2a>
 8029238:	9809      	ldr	r0, [sp, #36]	; 0x24
 802923a:	b01d      	add	sp, #116	; 0x74
 802923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029240:	ab03      	add	r3, sp, #12
 8029242:	9300      	str	r3, [sp, #0]
 8029244:	4622      	mov	r2, r4
 8029246:	4b07      	ldr	r3, [pc, #28]	; (8029264 <_svfiprintf_r+0x1ec>)
 8029248:	a904      	add	r1, sp, #16
 802924a:	4640      	mov	r0, r8
 802924c:	f7fe fbf0 	bl	8027a30 <_printf_i>
 8029250:	e7ea      	b.n	8029228 <_svfiprintf_r+0x1b0>
 8029252:	bf00      	nop
 8029254:	08045174 	.word	0x08045174
 8029258:	0804517a 	.word	0x0804517a
 802925c:	0804517e 	.word	0x0804517e
 8029260:	080274c5 	.word	0x080274c5
 8029264:	08028fc5 	.word	0x08028fc5

08029268 <_sungetc_r>:
 8029268:	b538      	push	{r3, r4, r5, lr}
 802926a:	1c4b      	adds	r3, r1, #1
 802926c:	4614      	mov	r4, r2
 802926e:	d103      	bne.n	8029278 <_sungetc_r+0x10>
 8029270:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8029274:	4628      	mov	r0, r5
 8029276:	bd38      	pop	{r3, r4, r5, pc}
 8029278:	8993      	ldrh	r3, [r2, #12]
 802927a:	f023 0320 	bic.w	r3, r3, #32
 802927e:	8193      	strh	r3, [r2, #12]
 8029280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029282:	6852      	ldr	r2, [r2, #4]
 8029284:	b2cd      	uxtb	r5, r1
 8029286:	b18b      	cbz	r3, 80292ac <_sungetc_r+0x44>
 8029288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802928a:	4293      	cmp	r3, r2
 802928c:	dd08      	ble.n	80292a0 <_sungetc_r+0x38>
 802928e:	6823      	ldr	r3, [r4, #0]
 8029290:	1e5a      	subs	r2, r3, #1
 8029292:	6022      	str	r2, [r4, #0]
 8029294:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029298:	6863      	ldr	r3, [r4, #4]
 802929a:	3301      	adds	r3, #1
 802929c:	6063      	str	r3, [r4, #4]
 802929e:	e7e9      	b.n	8029274 <_sungetc_r+0xc>
 80292a0:	4621      	mov	r1, r4
 80292a2:	f000 fc2f 	bl	8029b04 <__submore>
 80292a6:	2800      	cmp	r0, #0
 80292a8:	d0f1      	beq.n	802928e <_sungetc_r+0x26>
 80292aa:	e7e1      	b.n	8029270 <_sungetc_r+0x8>
 80292ac:	6921      	ldr	r1, [r4, #16]
 80292ae:	6823      	ldr	r3, [r4, #0]
 80292b0:	b151      	cbz	r1, 80292c8 <_sungetc_r+0x60>
 80292b2:	4299      	cmp	r1, r3
 80292b4:	d208      	bcs.n	80292c8 <_sungetc_r+0x60>
 80292b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80292ba:	42a9      	cmp	r1, r5
 80292bc:	d104      	bne.n	80292c8 <_sungetc_r+0x60>
 80292be:	3b01      	subs	r3, #1
 80292c0:	3201      	adds	r2, #1
 80292c2:	6023      	str	r3, [r4, #0]
 80292c4:	6062      	str	r2, [r4, #4]
 80292c6:	e7d5      	b.n	8029274 <_sungetc_r+0xc>
 80292c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80292cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80292d0:	6363      	str	r3, [r4, #52]	; 0x34
 80292d2:	2303      	movs	r3, #3
 80292d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80292d6:	4623      	mov	r3, r4
 80292d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80292dc:	6023      	str	r3, [r4, #0]
 80292de:	2301      	movs	r3, #1
 80292e0:	e7dc      	b.n	802929c <_sungetc_r+0x34>

080292e2 <__ssrefill_r>:
 80292e2:	b510      	push	{r4, lr}
 80292e4:	460c      	mov	r4, r1
 80292e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80292e8:	b169      	cbz	r1, 8029306 <__ssrefill_r+0x24>
 80292ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80292ee:	4299      	cmp	r1, r3
 80292f0:	d001      	beq.n	80292f6 <__ssrefill_r+0x14>
 80292f2:	f7fd ffab 	bl	802724c <_free_r>
 80292f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80292f8:	6063      	str	r3, [r4, #4]
 80292fa:	2000      	movs	r0, #0
 80292fc:	6360      	str	r0, [r4, #52]	; 0x34
 80292fe:	b113      	cbz	r3, 8029306 <__ssrefill_r+0x24>
 8029300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029302:	6023      	str	r3, [r4, #0]
 8029304:	bd10      	pop	{r4, pc}
 8029306:	6923      	ldr	r3, [r4, #16]
 8029308:	6023      	str	r3, [r4, #0]
 802930a:	2300      	movs	r3, #0
 802930c:	6063      	str	r3, [r4, #4]
 802930e:	89a3      	ldrh	r3, [r4, #12]
 8029310:	f043 0320 	orr.w	r3, r3, #32
 8029314:	81a3      	strh	r3, [r4, #12]
 8029316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802931a:	e7f3      	b.n	8029304 <__ssrefill_r+0x22>

0802931c <__ssvfiscanf_r>:
 802931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029320:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8029324:	460c      	mov	r4, r1
 8029326:	2100      	movs	r1, #0
 8029328:	9144      	str	r1, [sp, #272]	; 0x110
 802932a:	9145      	str	r1, [sp, #276]	; 0x114
 802932c:	499f      	ldr	r1, [pc, #636]	; (80295ac <__ssvfiscanf_r+0x290>)
 802932e:	91a0      	str	r1, [sp, #640]	; 0x280
 8029330:	f10d 0804 	add.w	r8, sp, #4
 8029334:	499e      	ldr	r1, [pc, #632]	; (80295b0 <__ssvfiscanf_r+0x294>)
 8029336:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80295b4 <__ssvfiscanf_r+0x298>
 802933a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802933e:	4606      	mov	r6, r0
 8029340:	4692      	mov	sl, r2
 8029342:	91a1      	str	r1, [sp, #644]	; 0x284
 8029344:	9300      	str	r3, [sp, #0]
 8029346:	270a      	movs	r7, #10
 8029348:	f89a 3000 	ldrb.w	r3, [sl]
 802934c:	2b00      	cmp	r3, #0
 802934e:	f000 812a 	beq.w	80295a6 <__ssvfiscanf_r+0x28a>
 8029352:	4655      	mov	r5, sl
 8029354:	f000 fc14 	bl	8029b80 <__locale_ctype_ptr>
 8029358:	f815 bb01 	ldrb.w	fp, [r5], #1
 802935c:	4458      	add	r0, fp
 802935e:	7843      	ldrb	r3, [r0, #1]
 8029360:	f013 0308 	ands.w	r3, r3, #8
 8029364:	d01c      	beq.n	80293a0 <__ssvfiscanf_r+0x84>
 8029366:	6863      	ldr	r3, [r4, #4]
 8029368:	2b00      	cmp	r3, #0
 802936a:	dd12      	ble.n	8029392 <__ssvfiscanf_r+0x76>
 802936c:	f000 fc08 	bl	8029b80 <__locale_ctype_ptr>
 8029370:	6823      	ldr	r3, [r4, #0]
 8029372:	781a      	ldrb	r2, [r3, #0]
 8029374:	4410      	add	r0, r2
 8029376:	7842      	ldrb	r2, [r0, #1]
 8029378:	0712      	lsls	r2, r2, #28
 802937a:	d401      	bmi.n	8029380 <__ssvfiscanf_r+0x64>
 802937c:	46aa      	mov	sl, r5
 802937e:	e7e3      	b.n	8029348 <__ssvfiscanf_r+0x2c>
 8029380:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029382:	3201      	adds	r2, #1
 8029384:	9245      	str	r2, [sp, #276]	; 0x114
 8029386:	6862      	ldr	r2, [r4, #4]
 8029388:	3301      	adds	r3, #1
 802938a:	3a01      	subs	r2, #1
 802938c:	6062      	str	r2, [r4, #4]
 802938e:	6023      	str	r3, [r4, #0]
 8029390:	e7e9      	b.n	8029366 <__ssvfiscanf_r+0x4a>
 8029392:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029394:	4621      	mov	r1, r4
 8029396:	4630      	mov	r0, r6
 8029398:	4798      	blx	r3
 802939a:	2800      	cmp	r0, #0
 802939c:	d0e6      	beq.n	802936c <__ssvfiscanf_r+0x50>
 802939e:	e7ed      	b.n	802937c <__ssvfiscanf_r+0x60>
 80293a0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80293a4:	f040 8082 	bne.w	80294ac <__ssvfiscanf_r+0x190>
 80293a8:	9343      	str	r3, [sp, #268]	; 0x10c
 80293aa:	9341      	str	r3, [sp, #260]	; 0x104
 80293ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80293b0:	2b2a      	cmp	r3, #42	; 0x2a
 80293b2:	d103      	bne.n	80293bc <__ssvfiscanf_r+0xa0>
 80293b4:	2310      	movs	r3, #16
 80293b6:	9341      	str	r3, [sp, #260]	; 0x104
 80293b8:	f10a 0502 	add.w	r5, sl, #2
 80293bc:	46aa      	mov	sl, r5
 80293be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80293c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80293c6:	2a09      	cmp	r2, #9
 80293c8:	d922      	bls.n	8029410 <__ssvfiscanf_r+0xf4>
 80293ca:	2203      	movs	r2, #3
 80293cc:	4879      	ldr	r0, [pc, #484]	; (80295b4 <__ssvfiscanf_r+0x298>)
 80293ce:	f7d6 ff17 	bl	8000200 <memchr>
 80293d2:	b138      	cbz	r0, 80293e4 <__ssvfiscanf_r+0xc8>
 80293d4:	eba0 0309 	sub.w	r3, r0, r9
 80293d8:	2001      	movs	r0, #1
 80293da:	4098      	lsls	r0, r3
 80293dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80293de:	4318      	orrs	r0, r3
 80293e0:	9041      	str	r0, [sp, #260]	; 0x104
 80293e2:	46aa      	mov	sl, r5
 80293e4:	f89a 3000 	ldrb.w	r3, [sl]
 80293e8:	2b67      	cmp	r3, #103	; 0x67
 80293ea:	f10a 0501 	add.w	r5, sl, #1
 80293ee:	d82b      	bhi.n	8029448 <__ssvfiscanf_r+0x12c>
 80293f0:	2b65      	cmp	r3, #101	; 0x65
 80293f2:	f080 809f 	bcs.w	8029534 <__ssvfiscanf_r+0x218>
 80293f6:	2b47      	cmp	r3, #71	; 0x47
 80293f8:	d810      	bhi.n	802941c <__ssvfiscanf_r+0x100>
 80293fa:	2b45      	cmp	r3, #69	; 0x45
 80293fc:	f080 809a 	bcs.w	8029534 <__ssvfiscanf_r+0x218>
 8029400:	2b00      	cmp	r3, #0
 8029402:	d06c      	beq.n	80294de <__ssvfiscanf_r+0x1c2>
 8029404:	2b25      	cmp	r3, #37	; 0x25
 8029406:	d051      	beq.n	80294ac <__ssvfiscanf_r+0x190>
 8029408:	2303      	movs	r3, #3
 802940a:	9347      	str	r3, [sp, #284]	; 0x11c
 802940c:	9742      	str	r7, [sp, #264]	; 0x108
 802940e:	e027      	b.n	8029460 <__ssvfiscanf_r+0x144>
 8029410:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029412:	fb07 1303 	mla	r3, r7, r3, r1
 8029416:	3b30      	subs	r3, #48	; 0x30
 8029418:	9343      	str	r3, [sp, #268]	; 0x10c
 802941a:	e7cf      	b.n	80293bc <__ssvfiscanf_r+0xa0>
 802941c:	2b5b      	cmp	r3, #91	; 0x5b
 802941e:	d06a      	beq.n	80294f6 <__ssvfiscanf_r+0x1da>
 8029420:	d80c      	bhi.n	802943c <__ssvfiscanf_r+0x120>
 8029422:	2b58      	cmp	r3, #88	; 0x58
 8029424:	d1f0      	bne.n	8029408 <__ssvfiscanf_r+0xec>
 8029426:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802942c:	9241      	str	r2, [sp, #260]	; 0x104
 802942e:	2210      	movs	r2, #16
 8029430:	9242      	str	r2, [sp, #264]	; 0x108
 8029432:	2b6e      	cmp	r3, #110	; 0x6e
 8029434:	bf8c      	ite	hi
 8029436:	2304      	movhi	r3, #4
 8029438:	2303      	movls	r3, #3
 802943a:	e010      	b.n	802945e <__ssvfiscanf_r+0x142>
 802943c:	2b63      	cmp	r3, #99	; 0x63
 802943e:	d065      	beq.n	802950c <__ssvfiscanf_r+0x1f0>
 8029440:	2b64      	cmp	r3, #100	; 0x64
 8029442:	d1e1      	bne.n	8029408 <__ssvfiscanf_r+0xec>
 8029444:	9742      	str	r7, [sp, #264]	; 0x108
 8029446:	e7f4      	b.n	8029432 <__ssvfiscanf_r+0x116>
 8029448:	2b70      	cmp	r3, #112	; 0x70
 802944a:	d04b      	beq.n	80294e4 <__ssvfiscanf_r+0x1c8>
 802944c:	d826      	bhi.n	802949c <__ssvfiscanf_r+0x180>
 802944e:	2b6e      	cmp	r3, #110	; 0x6e
 8029450:	d062      	beq.n	8029518 <__ssvfiscanf_r+0x1fc>
 8029452:	d84c      	bhi.n	80294ee <__ssvfiscanf_r+0x1d2>
 8029454:	2b69      	cmp	r3, #105	; 0x69
 8029456:	d1d7      	bne.n	8029408 <__ssvfiscanf_r+0xec>
 8029458:	2300      	movs	r3, #0
 802945a:	9342      	str	r3, [sp, #264]	; 0x108
 802945c:	2303      	movs	r3, #3
 802945e:	9347      	str	r3, [sp, #284]	; 0x11c
 8029460:	6863      	ldr	r3, [r4, #4]
 8029462:	2b00      	cmp	r3, #0
 8029464:	dd68      	ble.n	8029538 <__ssvfiscanf_r+0x21c>
 8029466:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029468:	0659      	lsls	r1, r3, #25
 802946a:	d407      	bmi.n	802947c <__ssvfiscanf_r+0x160>
 802946c:	f000 fb88 	bl	8029b80 <__locale_ctype_ptr>
 8029470:	6823      	ldr	r3, [r4, #0]
 8029472:	781a      	ldrb	r2, [r3, #0]
 8029474:	4410      	add	r0, r2
 8029476:	7842      	ldrb	r2, [r0, #1]
 8029478:	0712      	lsls	r2, r2, #28
 802947a:	d464      	bmi.n	8029546 <__ssvfiscanf_r+0x22a>
 802947c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802947e:	2b02      	cmp	r3, #2
 8029480:	dc73      	bgt.n	802956a <__ssvfiscanf_r+0x24e>
 8029482:	466b      	mov	r3, sp
 8029484:	4622      	mov	r2, r4
 8029486:	a941      	add	r1, sp, #260	; 0x104
 8029488:	4630      	mov	r0, r6
 802948a:	f000 f897 	bl	80295bc <_scanf_chars>
 802948e:	2801      	cmp	r0, #1
 8029490:	f000 8089 	beq.w	80295a6 <__ssvfiscanf_r+0x28a>
 8029494:	2802      	cmp	r0, #2
 8029496:	f47f af71 	bne.w	802937c <__ssvfiscanf_r+0x60>
 802949a:	e01d      	b.n	80294d8 <__ssvfiscanf_r+0x1bc>
 802949c:	2b75      	cmp	r3, #117	; 0x75
 802949e:	d0d1      	beq.n	8029444 <__ssvfiscanf_r+0x128>
 80294a0:	2b78      	cmp	r3, #120	; 0x78
 80294a2:	d0c0      	beq.n	8029426 <__ssvfiscanf_r+0x10a>
 80294a4:	2b73      	cmp	r3, #115	; 0x73
 80294a6:	d1af      	bne.n	8029408 <__ssvfiscanf_r+0xec>
 80294a8:	2302      	movs	r3, #2
 80294aa:	e7d8      	b.n	802945e <__ssvfiscanf_r+0x142>
 80294ac:	6863      	ldr	r3, [r4, #4]
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	dd0c      	ble.n	80294cc <__ssvfiscanf_r+0x1b0>
 80294b2:	6823      	ldr	r3, [r4, #0]
 80294b4:	781a      	ldrb	r2, [r3, #0]
 80294b6:	455a      	cmp	r2, fp
 80294b8:	d175      	bne.n	80295a6 <__ssvfiscanf_r+0x28a>
 80294ba:	3301      	adds	r3, #1
 80294bc:	6862      	ldr	r2, [r4, #4]
 80294be:	6023      	str	r3, [r4, #0]
 80294c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80294c2:	3a01      	subs	r2, #1
 80294c4:	3301      	adds	r3, #1
 80294c6:	6062      	str	r2, [r4, #4]
 80294c8:	9345      	str	r3, [sp, #276]	; 0x114
 80294ca:	e757      	b.n	802937c <__ssvfiscanf_r+0x60>
 80294cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80294ce:	4621      	mov	r1, r4
 80294d0:	4630      	mov	r0, r6
 80294d2:	4798      	blx	r3
 80294d4:	2800      	cmp	r0, #0
 80294d6:	d0ec      	beq.n	80294b2 <__ssvfiscanf_r+0x196>
 80294d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80294da:	2800      	cmp	r0, #0
 80294dc:	d159      	bne.n	8029592 <__ssvfiscanf_r+0x276>
 80294de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80294e2:	e05c      	b.n	802959e <__ssvfiscanf_r+0x282>
 80294e4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80294e6:	f042 0220 	orr.w	r2, r2, #32
 80294ea:	9241      	str	r2, [sp, #260]	; 0x104
 80294ec:	e79b      	b.n	8029426 <__ssvfiscanf_r+0x10a>
 80294ee:	2308      	movs	r3, #8
 80294f0:	9342      	str	r3, [sp, #264]	; 0x108
 80294f2:	2304      	movs	r3, #4
 80294f4:	e7b3      	b.n	802945e <__ssvfiscanf_r+0x142>
 80294f6:	4629      	mov	r1, r5
 80294f8:	4640      	mov	r0, r8
 80294fa:	f000 f9b7 	bl	802986c <__sccl>
 80294fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029504:	9341      	str	r3, [sp, #260]	; 0x104
 8029506:	4605      	mov	r5, r0
 8029508:	2301      	movs	r3, #1
 802950a:	e7a8      	b.n	802945e <__ssvfiscanf_r+0x142>
 802950c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802950e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029512:	9341      	str	r3, [sp, #260]	; 0x104
 8029514:	2300      	movs	r3, #0
 8029516:	e7a2      	b.n	802945e <__ssvfiscanf_r+0x142>
 8029518:	9841      	ldr	r0, [sp, #260]	; 0x104
 802951a:	06c3      	lsls	r3, r0, #27
 802951c:	f53f af2e 	bmi.w	802937c <__ssvfiscanf_r+0x60>
 8029520:	9b00      	ldr	r3, [sp, #0]
 8029522:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029524:	1d19      	adds	r1, r3, #4
 8029526:	9100      	str	r1, [sp, #0]
 8029528:	681b      	ldr	r3, [r3, #0]
 802952a:	07c0      	lsls	r0, r0, #31
 802952c:	bf4c      	ite	mi
 802952e:	801a      	strhmi	r2, [r3, #0]
 8029530:	601a      	strpl	r2, [r3, #0]
 8029532:	e723      	b.n	802937c <__ssvfiscanf_r+0x60>
 8029534:	2305      	movs	r3, #5
 8029536:	e792      	b.n	802945e <__ssvfiscanf_r+0x142>
 8029538:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802953a:	4621      	mov	r1, r4
 802953c:	4630      	mov	r0, r6
 802953e:	4798      	blx	r3
 8029540:	2800      	cmp	r0, #0
 8029542:	d090      	beq.n	8029466 <__ssvfiscanf_r+0x14a>
 8029544:	e7c8      	b.n	80294d8 <__ssvfiscanf_r+0x1bc>
 8029546:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029548:	3201      	adds	r2, #1
 802954a:	9245      	str	r2, [sp, #276]	; 0x114
 802954c:	6862      	ldr	r2, [r4, #4]
 802954e:	3a01      	subs	r2, #1
 8029550:	2a00      	cmp	r2, #0
 8029552:	6062      	str	r2, [r4, #4]
 8029554:	dd02      	ble.n	802955c <__ssvfiscanf_r+0x240>
 8029556:	3301      	adds	r3, #1
 8029558:	6023      	str	r3, [r4, #0]
 802955a:	e787      	b.n	802946c <__ssvfiscanf_r+0x150>
 802955c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802955e:	4621      	mov	r1, r4
 8029560:	4630      	mov	r0, r6
 8029562:	4798      	blx	r3
 8029564:	2800      	cmp	r0, #0
 8029566:	d081      	beq.n	802946c <__ssvfiscanf_r+0x150>
 8029568:	e7b6      	b.n	80294d8 <__ssvfiscanf_r+0x1bc>
 802956a:	2b04      	cmp	r3, #4
 802956c:	dc06      	bgt.n	802957c <__ssvfiscanf_r+0x260>
 802956e:	466b      	mov	r3, sp
 8029570:	4622      	mov	r2, r4
 8029572:	a941      	add	r1, sp, #260	; 0x104
 8029574:	4630      	mov	r0, r6
 8029576:	f000 f885 	bl	8029684 <_scanf_i>
 802957a:	e788      	b.n	802948e <__ssvfiscanf_r+0x172>
 802957c:	4b0e      	ldr	r3, [pc, #56]	; (80295b8 <__ssvfiscanf_r+0x29c>)
 802957e:	2b00      	cmp	r3, #0
 8029580:	f43f aefc 	beq.w	802937c <__ssvfiscanf_r+0x60>
 8029584:	466b      	mov	r3, sp
 8029586:	4622      	mov	r2, r4
 8029588:	a941      	add	r1, sp, #260	; 0x104
 802958a:	4630      	mov	r0, r6
 802958c:	f3af 8000 	nop.w
 8029590:	e77d      	b.n	802948e <__ssvfiscanf_r+0x172>
 8029592:	89a3      	ldrh	r3, [r4, #12]
 8029594:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029598:	bf18      	it	ne
 802959a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 802959e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80295a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80295a8:	e7f9      	b.n	802959e <__ssvfiscanf_r+0x282>
 80295aa:	bf00      	nop
 80295ac:	08029269 	.word	0x08029269
 80295b0:	080292e3 	.word	0x080292e3
 80295b4:	0804517a 	.word	0x0804517a
 80295b8:	00000000 	.word	0x00000000

080295bc <_scanf_chars>:
 80295bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295c0:	4615      	mov	r5, r2
 80295c2:	688a      	ldr	r2, [r1, #8]
 80295c4:	4680      	mov	r8, r0
 80295c6:	460c      	mov	r4, r1
 80295c8:	b932      	cbnz	r2, 80295d8 <_scanf_chars+0x1c>
 80295ca:	698a      	ldr	r2, [r1, #24]
 80295cc:	2a00      	cmp	r2, #0
 80295ce:	bf14      	ite	ne
 80295d0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80295d4:	2201      	moveq	r2, #1
 80295d6:	608a      	str	r2, [r1, #8]
 80295d8:	6822      	ldr	r2, [r4, #0]
 80295da:	06d1      	lsls	r1, r2, #27
 80295dc:	bf5f      	itttt	pl
 80295de:	681a      	ldrpl	r2, [r3, #0]
 80295e0:	1d11      	addpl	r1, r2, #4
 80295e2:	6019      	strpl	r1, [r3, #0]
 80295e4:	6817      	ldrpl	r7, [r2, #0]
 80295e6:	2600      	movs	r6, #0
 80295e8:	69a3      	ldr	r3, [r4, #24]
 80295ea:	b1db      	cbz	r3, 8029624 <_scanf_chars+0x68>
 80295ec:	2b01      	cmp	r3, #1
 80295ee:	d107      	bne.n	8029600 <_scanf_chars+0x44>
 80295f0:	682b      	ldr	r3, [r5, #0]
 80295f2:	6962      	ldr	r2, [r4, #20]
 80295f4:	781b      	ldrb	r3, [r3, #0]
 80295f6:	5cd3      	ldrb	r3, [r2, r3]
 80295f8:	b9a3      	cbnz	r3, 8029624 <_scanf_chars+0x68>
 80295fa:	2e00      	cmp	r6, #0
 80295fc:	d132      	bne.n	8029664 <_scanf_chars+0xa8>
 80295fe:	e006      	b.n	802960e <_scanf_chars+0x52>
 8029600:	2b02      	cmp	r3, #2
 8029602:	d007      	beq.n	8029614 <_scanf_chars+0x58>
 8029604:	2e00      	cmp	r6, #0
 8029606:	d12d      	bne.n	8029664 <_scanf_chars+0xa8>
 8029608:	69a3      	ldr	r3, [r4, #24]
 802960a:	2b01      	cmp	r3, #1
 802960c:	d12a      	bne.n	8029664 <_scanf_chars+0xa8>
 802960e:	2001      	movs	r0, #1
 8029610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029614:	f000 fab4 	bl	8029b80 <__locale_ctype_ptr>
 8029618:	682b      	ldr	r3, [r5, #0]
 802961a:	781b      	ldrb	r3, [r3, #0]
 802961c:	4418      	add	r0, r3
 802961e:	7843      	ldrb	r3, [r0, #1]
 8029620:	071b      	lsls	r3, r3, #28
 8029622:	d4ef      	bmi.n	8029604 <_scanf_chars+0x48>
 8029624:	6823      	ldr	r3, [r4, #0]
 8029626:	06da      	lsls	r2, r3, #27
 8029628:	bf5e      	ittt	pl
 802962a:	682b      	ldrpl	r3, [r5, #0]
 802962c:	781b      	ldrbpl	r3, [r3, #0]
 802962e:	703b      	strbpl	r3, [r7, #0]
 8029630:	682a      	ldr	r2, [r5, #0]
 8029632:	686b      	ldr	r3, [r5, #4]
 8029634:	f102 0201 	add.w	r2, r2, #1
 8029638:	602a      	str	r2, [r5, #0]
 802963a:	68a2      	ldr	r2, [r4, #8]
 802963c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8029640:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8029644:	606b      	str	r3, [r5, #4]
 8029646:	f106 0601 	add.w	r6, r6, #1
 802964a:	bf58      	it	pl
 802964c:	3701      	addpl	r7, #1
 802964e:	60a2      	str	r2, [r4, #8]
 8029650:	b142      	cbz	r2, 8029664 <_scanf_chars+0xa8>
 8029652:	2b00      	cmp	r3, #0
 8029654:	dcc8      	bgt.n	80295e8 <_scanf_chars+0x2c>
 8029656:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802965a:	4629      	mov	r1, r5
 802965c:	4640      	mov	r0, r8
 802965e:	4798      	blx	r3
 8029660:	2800      	cmp	r0, #0
 8029662:	d0c1      	beq.n	80295e8 <_scanf_chars+0x2c>
 8029664:	6823      	ldr	r3, [r4, #0]
 8029666:	f013 0310 	ands.w	r3, r3, #16
 802966a:	d105      	bne.n	8029678 <_scanf_chars+0xbc>
 802966c:	68e2      	ldr	r2, [r4, #12]
 802966e:	3201      	adds	r2, #1
 8029670:	60e2      	str	r2, [r4, #12]
 8029672:	69a2      	ldr	r2, [r4, #24]
 8029674:	b102      	cbz	r2, 8029678 <_scanf_chars+0xbc>
 8029676:	703b      	strb	r3, [r7, #0]
 8029678:	6923      	ldr	r3, [r4, #16]
 802967a:	441e      	add	r6, r3
 802967c:	6126      	str	r6, [r4, #16]
 802967e:	2000      	movs	r0, #0
 8029680:	e7c6      	b.n	8029610 <_scanf_chars+0x54>
	...

08029684 <_scanf_i>:
 8029684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029688:	469a      	mov	sl, r3
 802968a:	4b74      	ldr	r3, [pc, #464]	; (802985c <_scanf_i+0x1d8>)
 802968c:	460c      	mov	r4, r1
 802968e:	4683      	mov	fp, r0
 8029690:	4616      	mov	r6, r2
 8029692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029696:	b087      	sub	sp, #28
 8029698:	ab03      	add	r3, sp, #12
 802969a:	68a7      	ldr	r7, [r4, #8]
 802969c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80296a0:	4b6f      	ldr	r3, [pc, #444]	; (8029860 <_scanf_i+0x1dc>)
 80296a2:	69a1      	ldr	r1, [r4, #24]
 80296a4:	4a6f      	ldr	r2, [pc, #444]	; (8029864 <_scanf_i+0x1e0>)
 80296a6:	2903      	cmp	r1, #3
 80296a8:	bf08      	it	eq
 80296aa:	461a      	moveq	r2, r3
 80296ac:	1e7b      	subs	r3, r7, #1
 80296ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80296b2:	bf84      	itt	hi
 80296b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80296b8:	60a3      	strhi	r3, [r4, #8]
 80296ba:	6823      	ldr	r3, [r4, #0]
 80296bc:	9200      	str	r2, [sp, #0]
 80296be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80296c2:	bf88      	it	hi
 80296c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80296c8:	f104 091c 	add.w	r9, r4, #28
 80296cc:	6023      	str	r3, [r4, #0]
 80296ce:	bf8c      	ite	hi
 80296d0:	197f      	addhi	r7, r7, r5
 80296d2:	2700      	movls	r7, #0
 80296d4:	464b      	mov	r3, r9
 80296d6:	f04f 0800 	mov.w	r8, #0
 80296da:	9301      	str	r3, [sp, #4]
 80296dc:	6831      	ldr	r1, [r6, #0]
 80296de:	ab03      	add	r3, sp, #12
 80296e0:	2202      	movs	r2, #2
 80296e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80296e6:	7809      	ldrb	r1, [r1, #0]
 80296e8:	f7d6 fd8a 	bl	8000200 <memchr>
 80296ec:	9b01      	ldr	r3, [sp, #4]
 80296ee:	b330      	cbz	r0, 802973e <_scanf_i+0xba>
 80296f0:	f1b8 0f01 	cmp.w	r8, #1
 80296f4:	d15a      	bne.n	80297ac <_scanf_i+0x128>
 80296f6:	6862      	ldr	r2, [r4, #4]
 80296f8:	b92a      	cbnz	r2, 8029706 <_scanf_i+0x82>
 80296fa:	6822      	ldr	r2, [r4, #0]
 80296fc:	2108      	movs	r1, #8
 80296fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029702:	6061      	str	r1, [r4, #4]
 8029704:	6022      	str	r2, [r4, #0]
 8029706:	6822      	ldr	r2, [r4, #0]
 8029708:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802970c:	6022      	str	r2, [r4, #0]
 802970e:	68a2      	ldr	r2, [r4, #8]
 8029710:	1e51      	subs	r1, r2, #1
 8029712:	60a1      	str	r1, [r4, #8]
 8029714:	b19a      	cbz	r2, 802973e <_scanf_i+0xba>
 8029716:	6832      	ldr	r2, [r6, #0]
 8029718:	1c51      	adds	r1, r2, #1
 802971a:	6031      	str	r1, [r6, #0]
 802971c:	7812      	ldrb	r2, [r2, #0]
 802971e:	701a      	strb	r2, [r3, #0]
 8029720:	1c5d      	adds	r5, r3, #1
 8029722:	6873      	ldr	r3, [r6, #4]
 8029724:	3b01      	subs	r3, #1
 8029726:	2b00      	cmp	r3, #0
 8029728:	6073      	str	r3, [r6, #4]
 802972a:	dc07      	bgt.n	802973c <_scanf_i+0xb8>
 802972c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029730:	4631      	mov	r1, r6
 8029732:	4658      	mov	r0, fp
 8029734:	4798      	blx	r3
 8029736:	2800      	cmp	r0, #0
 8029738:	f040 8086 	bne.w	8029848 <_scanf_i+0x1c4>
 802973c:	462b      	mov	r3, r5
 802973e:	f108 0801 	add.w	r8, r8, #1
 8029742:	f1b8 0f03 	cmp.w	r8, #3
 8029746:	d1c8      	bne.n	80296da <_scanf_i+0x56>
 8029748:	6862      	ldr	r2, [r4, #4]
 802974a:	b90a      	cbnz	r2, 8029750 <_scanf_i+0xcc>
 802974c:	220a      	movs	r2, #10
 802974e:	6062      	str	r2, [r4, #4]
 8029750:	6862      	ldr	r2, [r4, #4]
 8029752:	4945      	ldr	r1, [pc, #276]	; (8029868 <_scanf_i+0x1e4>)
 8029754:	6960      	ldr	r0, [r4, #20]
 8029756:	9301      	str	r3, [sp, #4]
 8029758:	1a89      	subs	r1, r1, r2
 802975a:	f000 f887 	bl	802986c <__sccl>
 802975e:	9b01      	ldr	r3, [sp, #4]
 8029760:	f04f 0800 	mov.w	r8, #0
 8029764:	461d      	mov	r5, r3
 8029766:	68a3      	ldr	r3, [r4, #8]
 8029768:	6822      	ldr	r2, [r4, #0]
 802976a:	2b00      	cmp	r3, #0
 802976c:	d03a      	beq.n	80297e4 <_scanf_i+0x160>
 802976e:	6831      	ldr	r1, [r6, #0]
 8029770:	6960      	ldr	r0, [r4, #20]
 8029772:	f891 c000 	ldrb.w	ip, [r1]
 8029776:	f810 000c 	ldrb.w	r0, [r0, ip]
 802977a:	2800      	cmp	r0, #0
 802977c:	d032      	beq.n	80297e4 <_scanf_i+0x160>
 802977e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8029782:	d121      	bne.n	80297c8 <_scanf_i+0x144>
 8029784:	0510      	lsls	r0, r2, #20
 8029786:	d51f      	bpl.n	80297c8 <_scanf_i+0x144>
 8029788:	f108 0801 	add.w	r8, r8, #1
 802978c:	b117      	cbz	r7, 8029794 <_scanf_i+0x110>
 802978e:	3301      	adds	r3, #1
 8029790:	3f01      	subs	r7, #1
 8029792:	60a3      	str	r3, [r4, #8]
 8029794:	6873      	ldr	r3, [r6, #4]
 8029796:	3b01      	subs	r3, #1
 8029798:	2b00      	cmp	r3, #0
 802979a:	6073      	str	r3, [r6, #4]
 802979c:	dd1b      	ble.n	80297d6 <_scanf_i+0x152>
 802979e:	6833      	ldr	r3, [r6, #0]
 80297a0:	3301      	adds	r3, #1
 80297a2:	6033      	str	r3, [r6, #0]
 80297a4:	68a3      	ldr	r3, [r4, #8]
 80297a6:	3b01      	subs	r3, #1
 80297a8:	60a3      	str	r3, [r4, #8]
 80297aa:	e7dc      	b.n	8029766 <_scanf_i+0xe2>
 80297ac:	f1b8 0f02 	cmp.w	r8, #2
 80297b0:	d1ad      	bne.n	802970e <_scanf_i+0x8a>
 80297b2:	6822      	ldr	r2, [r4, #0]
 80297b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80297b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80297bc:	d1bf      	bne.n	802973e <_scanf_i+0xba>
 80297be:	2110      	movs	r1, #16
 80297c0:	6061      	str	r1, [r4, #4]
 80297c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80297c6:	e7a1      	b.n	802970c <_scanf_i+0x88>
 80297c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80297cc:	6022      	str	r2, [r4, #0]
 80297ce:	780b      	ldrb	r3, [r1, #0]
 80297d0:	702b      	strb	r3, [r5, #0]
 80297d2:	3501      	adds	r5, #1
 80297d4:	e7de      	b.n	8029794 <_scanf_i+0x110>
 80297d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80297da:	4631      	mov	r1, r6
 80297dc:	4658      	mov	r0, fp
 80297de:	4798      	blx	r3
 80297e0:	2800      	cmp	r0, #0
 80297e2:	d0df      	beq.n	80297a4 <_scanf_i+0x120>
 80297e4:	6823      	ldr	r3, [r4, #0]
 80297e6:	05d9      	lsls	r1, r3, #23
 80297e8:	d50c      	bpl.n	8029804 <_scanf_i+0x180>
 80297ea:	454d      	cmp	r5, r9
 80297ec:	d908      	bls.n	8029800 <_scanf_i+0x17c>
 80297ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80297f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80297f6:	4632      	mov	r2, r6
 80297f8:	4658      	mov	r0, fp
 80297fa:	4798      	blx	r3
 80297fc:	1e6f      	subs	r7, r5, #1
 80297fe:	463d      	mov	r5, r7
 8029800:	454d      	cmp	r5, r9
 8029802:	d029      	beq.n	8029858 <_scanf_i+0x1d4>
 8029804:	6822      	ldr	r2, [r4, #0]
 8029806:	f012 0210 	ands.w	r2, r2, #16
 802980a:	d113      	bne.n	8029834 <_scanf_i+0x1b0>
 802980c:	702a      	strb	r2, [r5, #0]
 802980e:	6863      	ldr	r3, [r4, #4]
 8029810:	9e00      	ldr	r6, [sp, #0]
 8029812:	4649      	mov	r1, r9
 8029814:	4658      	mov	r0, fp
 8029816:	47b0      	blx	r6
 8029818:	f8da 3000 	ldr.w	r3, [sl]
 802981c:	6821      	ldr	r1, [r4, #0]
 802981e:	1d1a      	adds	r2, r3, #4
 8029820:	f8ca 2000 	str.w	r2, [sl]
 8029824:	f011 0f20 	tst.w	r1, #32
 8029828:	681b      	ldr	r3, [r3, #0]
 802982a:	d010      	beq.n	802984e <_scanf_i+0x1ca>
 802982c:	6018      	str	r0, [r3, #0]
 802982e:	68e3      	ldr	r3, [r4, #12]
 8029830:	3301      	adds	r3, #1
 8029832:	60e3      	str	r3, [r4, #12]
 8029834:	eba5 0509 	sub.w	r5, r5, r9
 8029838:	44a8      	add	r8, r5
 802983a:	6925      	ldr	r5, [r4, #16]
 802983c:	4445      	add	r5, r8
 802983e:	6125      	str	r5, [r4, #16]
 8029840:	2000      	movs	r0, #0
 8029842:	b007      	add	sp, #28
 8029844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029848:	f04f 0800 	mov.w	r8, #0
 802984c:	e7ca      	b.n	80297e4 <_scanf_i+0x160>
 802984e:	07ca      	lsls	r2, r1, #31
 8029850:	bf4c      	ite	mi
 8029852:	8018      	strhmi	r0, [r3, #0]
 8029854:	6018      	strpl	r0, [r3, #0]
 8029856:	e7ea      	b.n	802982e <_scanf_i+0x1aa>
 8029858:	2001      	movs	r0, #1
 802985a:	e7f2      	b.n	8029842 <_scanf_i+0x1be>
 802985c:	0802a558 	.word	0x0802a558
 8029860:	080299c9 	.word	0x080299c9
 8029864:	08029ae1 	.word	0x08029ae1
 8029868:	08045195 	.word	0x08045195

0802986c <__sccl>:
 802986c:	b570      	push	{r4, r5, r6, lr}
 802986e:	780b      	ldrb	r3, [r1, #0]
 8029870:	2b5e      	cmp	r3, #94	; 0x5e
 8029872:	bf13      	iteet	ne
 8029874:	1c4a      	addne	r2, r1, #1
 8029876:	1c8a      	addeq	r2, r1, #2
 8029878:	784b      	ldrbeq	r3, [r1, #1]
 802987a:	2100      	movne	r1, #0
 802987c:	bf08      	it	eq
 802987e:	2101      	moveq	r1, #1
 8029880:	1e44      	subs	r4, r0, #1
 8029882:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8029886:	f804 1f01 	strb.w	r1, [r4, #1]!
 802988a:	42ac      	cmp	r4, r5
 802988c:	d1fb      	bne.n	8029886 <__sccl+0x1a>
 802988e:	b913      	cbnz	r3, 8029896 <__sccl+0x2a>
 8029890:	3a01      	subs	r2, #1
 8029892:	4610      	mov	r0, r2
 8029894:	bd70      	pop	{r4, r5, r6, pc}
 8029896:	f081 0401 	eor.w	r4, r1, #1
 802989a:	54c4      	strb	r4, [r0, r3]
 802989c:	1c51      	adds	r1, r2, #1
 802989e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80298a2:	2d2d      	cmp	r5, #45	; 0x2d
 80298a4:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80298a8:	460a      	mov	r2, r1
 80298aa:	d006      	beq.n	80298ba <__sccl+0x4e>
 80298ac:	2d5d      	cmp	r5, #93	; 0x5d
 80298ae:	d0f0      	beq.n	8029892 <__sccl+0x26>
 80298b0:	b90d      	cbnz	r5, 80298b6 <__sccl+0x4a>
 80298b2:	4632      	mov	r2, r6
 80298b4:	e7ed      	b.n	8029892 <__sccl+0x26>
 80298b6:	462b      	mov	r3, r5
 80298b8:	e7ef      	b.n	802989a <__sccl+0x2e>
 80298ba:	780e      	ldrb	r6, [r1, #0]
 80298bc:	2e5d      	cmp	r6, #93	; 0x5d
 80298be:	d0fa      	beq.n	80298b6 <__sccl+0x4a>
 80298c0:	42b3      	cmp	r3, r6
 80298c2:	dcf8      	bgt.n	80298b6 <__sccl+0x4a>
 80298c4:	3301      	adds	r3, #1
 80298c6:	429e      	cmp	r6, r3
 80298c8:	54c4      	strb	r4, [r0, r3]
 80298ca:	dcfb      	bgt.n	80298c4 <__sccl+0x58>
 80298cc:	3102      	adds	r1, #2
 80298ce:	e7e6      	b.n	802989e <__sccl+0x32>

080298d0 <_strtol_l.isra.0>:
 80298d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80298d4:	4680      	mov	r8, r0
 80298d6:	4689      	mov	r9, r1
 80298d8:	4692      	mov	sl, r2
 80298da:	461e      	mov	r6, r3
 80298dc:	460f      	mov	r7, r1
 80298de:	463d      	mov	r5, r7
 80298e0:	9808      	ldr	r0, [sp, #32]
 80298e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80298e6:	f000 f947 	bl	8029b78 <__locale_ctype_ptr_l>
 80298ea:	4420      	add	r0, r4
 80298ec:	7843      	ldrb	r3, [r0, #1]
 80298ee:	f013 0308 	ands.w	r3, r3, #8
 80298f2:	d132      	bne.n	802995a <_strtol_l.isra.0+0x8a>
 80298f4:	2c2d      	cmp	r4, #45	; 0x2d
 80298f6:	d132      	bne.n	802995e <_strtol_l.isra.0+0x8e>
 80298f8:	787c      	ldrb	r4, [r7, #1]
 80298fa:	1cbd      	adds	r5, r7, #2
 80298fc:	2201      	movs	r2, #1
 80298fe:	2e00      	cmp	r6, #0
 8029900:	d05d      	beq.n	80299be <_strtol_l.isra.0+0xee>
 8029902:	2e10      	cmp	r6, #16
 8029904:	d109      	bne.n	802991a <_strtol_l.isra.0+0x4a>
 8029906:	2c30      	cmp	r4, #48	; 0x30
 8029908:	d107      	bne.n	802991a <_strtol_l.isra.0+0x4a>
 802990a:	782b      	ldrb	r3, [r5, #0]
 802990c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029910:	2b58      	cmp	r3, #88	; 0x58
 8029912:	d14f      	bne.n	80299b4 <_strtol_l.isra.0+0xe4>
 8029914:	786c      	ldrb	r4, [r5, #1]
 8029916:	2610      	movs	r6, #16
 8029918:	3502      	adds	r5, #2
 802991a:	2a00      	cmp	r2, #0
 802991c:	bf14      	ite	ne
 802991e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8029922:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8029926:	2700      	movs	r7, #0
 8029928:	fbb1 fcf6 	udiv	ip, r1, r6
 802992c:	4638      	mov	r0, r7
 802992e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8029932:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8029936:	2b09      	cmp	r3, #9
 8029938:	d817      	bhi.n	802996a <_strtol_l.isra.0+0x9a>
 802993a:	461c      	mov	r4, r3
 802993c:	42a6      	cmp	r6, r4
 802993e:	dd23      	ble.n	8029988 <_strtol_l.isra.0+0xb8>
 8029940:	1c7b      	adds	r3, r7, #1
 8029942:	d007      	beq.n	8029954 <_strtol_l.isra.0+0x84>
 8029944:	4584      	cmp	ip, r0
 8029946:	d31c      	bcc.n	8029982 <_strtol_l.isra.0+0xb2>
 8029948:	d101      	bne.n	802994e <_strtol_l.isra.0+0x7e>
 802994a:	45a6      	cmp	lr, r4
 802994c:	db19      	blt.n	8029982 <_strtol_l.isra.0+0xb2>
 802994e:	fb00 4006 	mla	r0, r0, r6, r4
 8029952:	2701      	movs	r7, #1
 8029954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029958:	e7eb      	b.n	8029932 <_strtol_l.isra.0+0x62>
 802995a:	462f      	mov	r7, r5
 802995c:	e7bf      	b.n	80298de <_strtol_l.isra.0+0xe>
 802995e:	2c2b      	cmp	r4, #43	; 0x2b
 8029960:	bf04      	itt	eq
 8029962:	1cbd      	addeq	r5, r7, #2
 8029964:	787c      	ldrbeq	r4, [r7, #1]
 8029966:	461a      	mov	r2, r3
 8029968:	e7c9      	b.n	80298fe <_strtol_l.isra.0+0x2e>
 802996a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802996e:	2b19      	cmp	r3, #25
 8029970:	d801      	bhi.n	8029976 <_strtol_l.isra.0+0xa6>
 8029972:	3c37      	subs	r4, #55	; 0x37
 8029974:	e7e2      	b.n	802993c <_strtol_l.isra.0+0x6c>
 8029976:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802997a:	2b19      	cmp	r3, #25
 802997c:	d804      	bhi.n	8029988 <_strtol_l.isra.0+0xb8>
 802997e:	3c57      	subs	r4, #87	; 0x57
 8029980:	e7dc      	b.n	802993c <_strtol_l.isra.0+0x6c>
 8029982:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8029986:	e7e5      	b.n	8029954 <_strtol_l.isra.0+0x84>
 8029988:	1c7b      	adds	r3, r7, #1
 802998a:	d108      	bne.n	802999e <_strtol_l.isra.0+0xce>
 802998c:	2322      	movs	r3, #34	; 0x22
 802998e:	f8c8 3000 	str.w	r3, [r8]
 8029992:	4608      	mov	r0, r1
 8029994:	f1ba 0f00 	cmp.w	sl, #0
 8029998:	d107      	bne.n	80299aa <_strtol_l.isra.0+0xda>
 802999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802999e:	b102      	cbz	r2, 80299a2 <_strtol_l.isra.0+0xd2>
 80299a0:	4240      	negs	r0, r0
 80299a2:	f1ba 0f00 	cmp.w	sl, #0
 80299a6:	d0f8      	beq.n	802999a <_strtol_l.isra.0+0xca>
 80299a8:	b10f      	cbz	r7, 80299ae <_strtol_l.isra.0+0xde>
 80299aa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80299ae:	f8ca 9000 	str.w	r9, [sl]
 80299b2:	e7f2      	b.n	802999a <_strtol_l.isra.0+0xca>
 80299b4:	2430      	movs	r4, #48	; 0x30
 80299b6:	2e00      	cmp	r6, #0
 80299b8:	d1af      	bne.n	802991a <_strtol_l.isra.0+0x4a>
 80299ba:	2608      	movs	r6, #8
 80299bc:	e7ad      	b.n	802991a <_strtol_l.isra.0+0x4a>
 80299be:	2c30      	cmp	r4, #48	; 0x30
 80299c0:	d0a3      	beq.n	802990a <_strtol_l.isra.0+0x3a>
 80299c2:	260a      	movs	r6, #10
 80299c4:	e7a9      	b.n	802991a <_strtol_l.isra.0+0x4a>
	...

080299c8 <_strtol_r>:
 80299c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80299ca:	4c06      	ldr	r4, [pc, #24]	; (80299e4 <_strtol_r+0x1c>)
 80299cc:	4d06      	ldr	r5, [pc, #24]	; (80299e8 <_strtol_r+0x20>)
 80299ce:	6824      	ldr	r4, [r4, #0]
 80299d0:	6a24      	ldr	r4, [r4, #32]
 80299d2:	2c00      	cmp	r4, #0
 80299d4:	bf08      	it	eq
 80299d6:	462c      	moveq	r4, r5
 80299d8:	9400      	str	r4, [sp, #0]
 80299da:	f7ff ff79 	bl	80298d0 <_strtol_l.isra.0>
 80299de:	b003      	add	sp, #12
 80299e0:	bd30      	pop	{r4, r5, pc}
 80299e2:	bf00      	nop
 80299e4:	20002858 	.word	0x20002858
 80299e8:	200028bc 	.word	0x200028bc

080299ec <_strtoul_l.isra.0>:
 80299ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80299f0:	4680      	mov	r8, r0
 80299f2:	4689      	mov	r9, r1
 80299f4:	4692      	mov	sl, r2
 80299f6:	461e      	mov	r6, r3
 80299f8:	460f      	mov	r7, r1
 80299fa:	463d      	mov	r5, r7
 80299fc:	9808      	ldr	r0, [sp, #32]
 80299fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029a02:	f000 f8b9 	bl	8029b78 <__locale_ctype_ptr_l>
 8029a06:	4420      	add	r0, r4
 8029a08:	7843      	ldrb	r3, [r0, #1]
 8029a0a:	f013 0308 	ands.w	r3, r3, #8
 8029a0e:	d130      	bne.n	8029a72 <_strtoul_l.isra.0+0x86>
 8029a10:	2c2d      	cmp	r4, #45	; 0x2d
 8029a12:	d130      	bne.n	8029a76 <_strtoul_l.isra.0+0x8a>
 8029a14:	787c      	ldrb	r4, [r7, #1]
 8029a16:	1cbd      	adds	r5, r7, #2
 8029a18:	2101      	movs	r1, #1
 8029a1a:	2e00      	cmp	r6, #0
 8029a1c:	d05c      	beq.n	8029ad8 <_strtoul_l.isra.0+0xec>
 8029a1e:	2e10      	cmp	r6, #16
 8029a20:	d109      	bne.n	8029a36 <_strtoul_l.isra.0+0x4a>
 8029a22:	2c30      	cmp	r4, #48	; 0x30
 8029a24:	d107      	bne.n	8029a36 <_strtoul_l.isra.0+0x4a>
 8029a26:	782b      	ldrb	r3, [r5, #0]
 8029a28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029a2c:	2b58      	cmp	r3, #88	; 0x58
 8029a2e:	d14e      	bne.n	8029ace <_strtoul_l.isra.0+0xe2>
 8029a30:	786c      	ldrb	r4, [r5, #1]
 8029a32:	2610      	movs	r6, #16
 8029a34:	3502      	adds	r5, #2
 8029a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8029a3a:	2300      	movs	r3, #0
 8029a3c:	fbb2 f2f6 	udiv	r2, r2, r6
 8029a40:	fb06 fc02 	mul.w	ip, r6, r2
 8029a44:	ea6f 0c0c 	mvn.w	ip, ip
 8029a48:	4618      	mov	r0, r3
 8029a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8029a4e:	2f09      	cmp	r7, #9
 8029a50:	d817      	bhi.n	8029a82 <_strtoul_l.isra.0+0x96>
 8029a52:	463c      	mov	r4, r7
 8029a54:	42a6      	cmp	r6, r4
 8029a56:	dd23      	ble.n	8029aa0 <_strtoul_l.isra.0+0xb4>
 8029a58:	2b00      	cmp	r3, #0
 8029a5a:	db1e      	blt.n	8029a9a <_strtoul_l.isra.0+0xae>
 8029a5c:	4282      	cmp	r2, r0
 8029a5e:	d31c      	bcc.n	8029a9a <_strtoul_l.isra.0+0xae>
 8029a60:	d101      	bne.n	8029a66 <_strtoul_l.isra.0+0x7a>
 8029a62:	45a4      	cmp	ip, r4
 8029a64:	db19      	blt.n	8029a9a <_strtoul_l.isra.0+0xae>
 8029a66:	fb00 4006 	mla	r0, r0, r6, r4
 8029a6a:	2301      	movs	r3, #1
 8029a6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029a70:	e7eb      	b.n	8029a4a <_strtoul_l.isra.0+0x5e>
 8029a72:	462f      	mov	r7, r5
 8029a74:	e7c1      	b.n	80299fa <_strtoul_l.isra.0+0xe>
 8029a76:	2c2b      	cmp	r4, #43	; 0x2b
 8029a78:	bf04      	itt	eq
 8029a7a:	1cbd      	addeq	r5, r7, #2
 8029a7c:	787c      	ldrbeq	r4, [r7, #1]
 8029a7e:	4619      	mov	r1, r3
 8029a80:	e7cb      	b.n	8029a1a <_strtoul_l.isra.0+0x2e>
 8029a82:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8029a86:	2f19      	cmp	r7, #25
 8029a88:	d801      	bhi.n	8029a8e <_strtoul_l.isra.0+0xa2>
 8029a8a:	3c37      	subs	r4, #55	; 0x37
 8029a8c:	e7e2      	b.n	8029a54 <_strtoul_l.isra.0+0x68>
 8029a8e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8029a92:	2f19      	cmp	r7, #25
 8029a94:	d804      	bhi.n	8029aa0 <_strtoul_l.isra.0+0xb4>
 8029a96:	3c57      	subs	r4, #87	; 0x57
 8029a98:	e7dc      	b.n	8029a54 <_strtoul_l.isra.0+0x68>
 8029a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029a9e:	e7e5      	b.n	8029a6c <_strtoul_l.isra.0+0x80>
 8029aa0:	2b00      	cmp	r3, #0
 8029aa2:	da09      	bge.n	8029ab8 <_strtoul_l.isra.0+0xcc>
 8029aa4:	2322      	movs	r3, #34	; 0x22
 8029aa6:	f8c8 3000 	str.w	r3, [r8]
 8029aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029aae:	f1ba 0f00 	cmp.w	sl, #0
 8029ab2:	d107      	bne.n	8029ac4 <_strtoul_l.isra.0+0xd8>
 8029ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ab8:	b101      	cbz	r1, 8029abc <_strtoul_l.isra.0+0xd0>
 8029aba:	4240      	negs	r0, r0
 8029abc:	f1ba 0f00 	cmp.w	sl, #0
 8029ac0:	d0f8      	beq.n	8029ab4 <_strtoul_l.isra.0+0xc8>
 8029ac2:	b10b      	cbz	r3, 8029ac8 <_strtoul_l.isra.0+0xdc>
 8029ac4:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8029ac8:	f8ca 9000 	str.w	r9, [sl]
 8029acc:	e7f2      	b.n	8029ab4 <_strtoul_l.isra.0+0xc8>
 8029ace:	2430      	movs	r4, #48	; 0x30
 8029ad0:	2e00      	cmp	r6, #0
 8029ad2:	d1b0      	bne.n	8029a36 <_strtoul_l.isra.0+0x4a>
 8029ad4:	2608      	movs	r6, #8
 8029ad6:	e7ae      	b.n	8029a36 <_strtoul_l.isra.0+0x4a>
 8029ad8:	2c30      	cmp	r4, #48	; 0x30
 8029ada:	d0a4      	beq.n	8029a26 <_strtoul_l.isra.0+0x3a>
 8029adc:	260a      	movs	r6, #10
 8029ade:	e7aa      	b.n	8029a36 <_strtoul_l.isra.0+0x4a>

08029ae0 <_strtoul_r>:
 8029ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029ae2:	4c06      	ldr	r4, [pc, #24]	; (8029afc <_strtoul_r+0x1c>)
 8029ae4:	4d06      	ldr	r5, [pc, #24]	; (8029b00 <_strtoul_r+0x20>)
 8029ae6:	6824      	ldr	r4, [r4, #0]
 8029ae8:	6a24      	ldr	r4, [r4, #32]
 8029aea:	2c00      	cmp	r4, #0
 8029aec:	bf08      	it	eq
 8029aee:	462c      	moveq	r4, r5
 8029af0:	9400      	str	r4, [sp, #0]
 8029af2:	f7ff ff7b 	bl	80299ec <_strtoul_l.isra.0>
 8029af6:	b003      	add	sp, #12
 8029af8:	bd30      	pop	{r4, r5, pc}
 8029afa:	bf00      	nop
 8029afc:	20002858 	.word	0x20002858
 8029b00:	200028bc 	.word	0x200028bc

08029b04 <__submore>:
 8029b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029b08:	460c      	mov	r4, r1
 8029b0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b10:	4299      	cmp	r1, r3
 8029b12:	d11d      	bne.n	8029b50 <__submore+0x4c>
 8029b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8029b18:	f7fd fbe6 	bl	80272e8 <_malloc_r>
 8029b1c:	b918      	cbnz	r0, 8029b26 <__submore+0x22>
 8029b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029b2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8029b2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8029b30:	6360      	str	r0, [r4, #52]	; 0x34
 8029b32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8029b36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8029b3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8029b3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8029b42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8029b46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8029b4a:	6020      	str	r0, [r4, #0]
 8029b4c:	2000      	movs	r0, #0
 8029b4e:	e7e8      	b.n	8029b22 <__submore+0x1e>
 8029b50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8029b52:	0077      	lsls	r7, r6, #1
 8029b54:	463a      	mov	r2, r7
 8029b56:	f000 f84c 	bl	8029bf2 <_realloc_r>
 8029b5a:	4605      	mov	r5, r0
 8029b5c:	2800      	cmp	r0, #0
 8029b5e:	d0de      	beq.n	8029b1e <__submore+0x1a>
 8029b60:	eb00 0806 	add.w	r8, r0, r6
 8029b64:	4601      	mov	r1, r0
 8029b66:	4632      	mov	r2, r6
 8029b68:	4640      	mov	r0, r8
 8029b6a:	f7fd fb5b 	bl	8027224 <memcpy>
 8029b6e:	f8c4 8000 	str.w	r8, [r4]
 8029b72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8029b76:	e7e9      	b.n	8029b4c <__submore+0x48>

08029b78 <__locale_ctype_ptr_l>:
 8029b78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8029b7c:	4770      	bx	lr
	...

08029b80 <__locale_ctype_ptr>:
 8029b80:	4b04      	ldr	r3, [pc, #16]	; (8029b94 <__locale_ctype_ptr+0x14>)
 8029b82:	4a05      	ldr	r2, [pc, #20]	; (8029b98 <__locale_ctype_ptr+0x18>)
 8029b84:	681b      	ldr	r3, [r3, #0]
 8029b86:	6a1b      	ldr	r3, [r3, #32]
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	bf08      	it	eq
 8029b8c:	4613      	moveq	r3, r2
 8029b8e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8029b92:	4770      	bx	lr
 8029b94:	20002858 	.word	0x20002858
 8029b98:	200028bc 	.word	0x200028bc

08029b9c <__ascii_mbtowc>:
 8029b9c:	b082      	sub	sp, #8
 8029b9e:	b901      	cbnz	r1, 8029ba2 <__ascii_mbtowc+0x6>
 8029ba0:	a901      	add	r1, sp, #4
 8029ba2:	b142      	cbz	r2, 8029bb6 <__ascii_mbtowc+0x1a>
 8029ba4:	b14b      	cbz	r3, 8029bba <__ascii_mbtowc+0x1e>
 8029ba6:	7813      	ldrb	r3, [r2, #0]
 8029ba8:	600b      	str	r3, [r1, #0]
 8029baa:	7812      	ldrb	r2, [r2, #0]
 8029bac:	1c10      	adds	r0, r2, #0
 8029bae:	bf18      	it	ne
 8029bb0:	2001      	movne	r0, #1
 8029bb2:	b002      	add	sp, #8
 8029bb4:	4770      	bx	lr
 8029bb6:	4610      	mov	r0, r2
 8029bb8:	e7fb      	b.n	8029bb2 <__ascii_mbtowc+0x16>
 8029bba:	f06f 0001 	mvn.w	r0, #1
 8029bbe:	e7f8      	b.n	8029bb2 <__ascii_mbtowc+0x16>

08029bc0 <memmove>:
 8029bc0:	4288      	cmp	r0, r1
 8029bc2:	b510      	push	{r4, lr}
 8029bc4:	eb01 0302 	add.w	r3, r1, r2
 8029bc8:	d807      	bhi.n	8029bda <memmove+0x1a>
 8029bca:	1e42      	subs	r2, r0, #1
 8029bcc:	4299      	cmp	r1, r3
 8029bce:	d00a      	beq.n	8029be6 <memmove+0x26>
 8029bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029bd4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8029bd8:	e7f8      	b.n	8029bcc <memmove+0xc>
 8029bda:	4283      	cmp	r3, r0
 8029bdc:	d9f5      	bls.n	8029bca <memmove+0xa>
 8029bde:	1881      	adds	r1, r0, r2
 8029be0:	1ad2      	subs	r2, r2, r3
 8029be2:	42d3      	cmn	r3, r2
 8029be4:	d100      	bne.n	8029be8 <memmove+0x28>
 8029be6:	bd10      	pop	{r4, pc}
 8029be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029bec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8029bf0:	e7f7      	b.n	8029be2 <memmove+0x22>

08029bf2 <_realloc_r>:
 8029bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029bf4:	4607      	mov	r7, r0
 8029bf6:	4614      	mov	r4, r2
 8029bf8:	460e      	mov	r6, r1
 8029bfa:	b921      	cbnz	r1, 8029c06 <_realloc_r+0x14>
 8029bfc:	4611      	mov	r1, r2
 8029bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8029c02:	f7fd bb71 	b.w	80272e8 <_malloc_r>
 8029c06:	b922      	cbnz	r2, 8029c12 <_realloc_r+0x20>
 8029c08:	f7fd fb20 	bl	802724c <_free_r>
 8029c0c:	4625      	mov	r5, r4
 8029c0e:	4628      	mov	r0, r5
 8029c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029c12:	f000 f821 	bl	8029c58 <_malloc_usable_size_r>
 8029c16:	42a0      	cmp	r0, r4
 8029c18:	d20f      	bcs.n	8029c3a <_realloc_r+0x48>
 8029c1a:	4621      	mov	r1, r4
 8029c1c:	4638      	mov	r0, r7
 8029c1e:	f7fd fb63 	bl	80272e8 <_malloc_r>
 8029c22:	4605      	mov	r5, r0
 8029c24:	2800      	cmp	r0, #0
 8029c26:	d0f2      	beq.n	8029c0e <_realloc_r+0x1c>
 8029c28:	4631      	mov	r1, r6
 8029c2a:	4622      	mov	r2, r4
 8029c2c:	f7fd fafa 	bl	8027224 <memcpy>
 8029c30:	4631      	mov	r1, r6
 8029c32:	4638      	mov	r0, r7
 8029c34:	f7fd fb0a 	bl	802724c <_free_r>
 8029c38:	e7e9      	b.n	8029c0e <_realloc_r+0x1c>
 8029c3a:	4635      	mov	r5, r6
 8029c3c:	e7e7      	b.n	8029c0e <_realloc_r+0x1c>

08029c3e <__ascii_wctomb>:
 8029c3e:	b149      	cbz	r1, 8029c54 <__ascii_wctomb+0x16>
 8029c40:	2aff      	cmp	r2, #255	; 0xff
 8029c42:	bf85      	ittet	hi
 8029c44:	238a      	movhi	r3, #138	; 0x8a
 8029c46:	6003      	strhi	r3, [r0, #0]
 8029c48:	700a      	strbls	r2, [r1, #0]
 8029c4a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8029c4e:	bf98      	it	ls
 8029c50:	2001      	movls	r0, #1
 8029c52:	4770      	bx	lr
 8029c54:	4608      	mov	r0, r1
 8029c56:	4770      	bx	lr

08029c58 <_malloc_usable_size_r>:
 8029c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029c5c:	1f18      	subs	r0, r3, #4
 8029c5e:	2b00      	cmp	r3, #0
 8029c60:	bfbc      	itt	lt
 8029c62:	580b      	ldrlt	r3, [r1, r0]
 8029c64:	18c0      	addlt	r0, r0, r3
 8029c66:	4770      	bx	lr

08029c68 <_init>:
 8029c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c6a:	bf00      	nop
 8029c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029c6e:	bc08      	pop	{r3}
 8029c70:	469e      	mov	lr, r3
 8029c72:	4770      	bx	lr

08029c74 <_fini>:
 8029c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c76:	bf00      	nop
 8029c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029c7a:	bc08      	pop	{r3}
 8029c7c:	469e      	mov	lr, r3
 8029c7e:	4770      	bx	lr
